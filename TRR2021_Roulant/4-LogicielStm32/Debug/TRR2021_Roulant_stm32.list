
TRR2021_Roulant_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c284  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0800c458  0800c458  0001c458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf40  0800cf40  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf48  0800cf48  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cf50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  200001e0  0800d130  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009e8  0800d130  000209e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f07  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b88  00000000  00000000  00036117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00038ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cc0  00000000  00000000  0003b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015da9  00000000  00000000  00063cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad7c  00000000  00000000  00079a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001747fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000634c  00000000  00000000  00174850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c43c 	.word	0x0800c43c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c43c 	.word	0x0800c43c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	uint8_t ch8=ch;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2,(uint8_t *)&ch8,1,HAL_MAX_DELAY);
 800105a:	f107 010f 	add.w	r1, r7, #15
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	2201      	movs	r2, #1
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <__io_putchar+0x28>)
 8001066:	f006 fa0d 	bl	8007484 <HAL_UART_Transmit>

	return ch;
 800106a:	687b      	ldr	r3, [r7, #4]

}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000800 	.word	0x20000800

08001078 <__io_getchar>:

int __io_getchar()
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

	int ch8;
	HAL_StatusTypeDef retour;

	ch8 = ' ';
 800107e:	2320      	movs	r3, #32
 8001080:	603b      	str	r3, [r7, #0]

	do {
		retour = HAL_UART_Receive(&huart2,(uint8_t*)&ch8,1,HAL_MAX_DELAY);
 8001082:	4639      	mov	r1, r7
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2201      	movs	r2, #1
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <__io_getchar+0x38>)
 800108c:	f006 fa8d 	bl	80075aa <HAL_UART_Receive>
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
		//delay_ms(1);
	} while(retour != HAL_OK);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f3      	bne.n	8001082 <__io_getchar+0xa>

		if(retour != HAL_OK)
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <__io_getchar+0x2e>
			ch8 = -1;
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	603b      	str	r3, [r7, #0]

return ch8;
 80010a6:	683b      	ldr	r3, [r7, #0]

}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000800 	.word	0x20000800

080010b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b8:	f002 fb83 	bl	80037c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010bc:	f000 f82e 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010c0:	f000 fed0 	bl	8001e64 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010c4:	f000 f9be 	bl	8001444 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010c8:	f000 f9fc 	bl	80014c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010cc:	f000 fac4 	bl	8001658 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010d0:	f000 fb60 	bl	8001794 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010d4:	f000 fbfc 	bl	80018d0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80010d8:	f000 fc98 	bl	8001a0c <MX_TIM8_Init>
  MX_UART4_Init();
 80010dc:	f000 fd72 	bl	8001bc4 <MX_UART4_Init>
  MX_UART5_Init();
 80010e0:	f000 fda0 	bl	8001c24 <MX_UART5_Init>
  MX_UART7_Init();
 80010e4:	f000 fdce 	bl	8001c84 <MX_UART7_Init>
  MX_UART8_Init();
 80010e8:	f000 fdfc 	bl	8001ce4 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80010ec:	f000 fe2a 	bl	8001d44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80010f0:	f000 fe58 	bl	8001da4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80010f4:	f000 fe86 	bl	8001e04 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80010f8:	f000 f8ae 	bl	8001258 <MX_ADC1_Init>
  MX_ADC3_Init();
 80010fc:	f000 f950 	bl	80013a0 <MX_ADC3_Init>
  MX_ADC2_Init();
 8001100:	f000 f8fc 	bl	80012fc <MX_ADC2_Init>
  MX_TIM12_Init();
 8001104:	f000 fcd6 	bl	8001ab4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  printf("+++++++ Buggy TRR 2022 Roulant +++++++");
 8001108:	4803      	ldr	r0, [pc, #12]	; (8001118 <main+0x64>)
 800110a:	f007 fb87 	bl	800881c <iprintf>

  // Initialisation des Lidars
  //tfminiplus_init();

  // Initialisation de la gestion radio et commande vehicule
  init_radio_commandes();
 800110e:	f000 ffd9 	bl	80020c4 <init_radio_commandes>

  // Récupération des parametres de conf

  // Lancement du shell
  shell();
 8001112:	f001 faf1 	bl	80026f8 <shell>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001116:	e7fe      	b.n	8001116 <main+0x62>
 8001118:	0800c458 	.word	0x0800c458

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b0b4      	sub	sp, #208	; 0xd0
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001126:	2230      	movs	r2, #48	; 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f006 ff04 	bl	8007f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001140:	f107 0308 	add.w	r3, r7, #8
 8001144:	2284      	movs	r2, #132	; 0x84
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fef5 	bl	8007f38 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	4b40      	ldr	r3, [pc, #256]	; (8001250 <SystemClock_Config+0x134>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a3f      	ldr	r2, [pc, #252]	; (8001250 <SystemClock_Config+0x134>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <SystemClock_Config+0x134>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <SystemClock_Config+0x138>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <SystemClock_Config+0x138>)
 800116c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <SystemClock_Config+0x138>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118a:	2310      	movs	r3, #16
 800118c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800119c:	2308      	movs	r3, #8
 800119e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80011a2:	23d8      	movs	r3, #216	; 0xd8
 80011a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f003 fa73 	bl	80046a4 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80011c4:	f000 ff78 	bl	80020b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011c8:	f003 fa1c 	bl	8004604 <HAL_PWREx_EnableOverDrive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80011d2:	f000 ff71 	bl	80020b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2302      	movs	r3, #2
 80011de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011fc:	2107      	movs	r1, #7
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fcf4 	bl	8004bec <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800120a:	f000 ff55 	bl	80020b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800120e:	f247 73c0 	movw	r3, #30656	; 0x77c0
 8001212:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001214:	2300      	movs	r3, #0
 8001216:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800121c:	2300      	movs	r3, #0
 800121e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001224:	2300      	movs	r3, #0
 8001226:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001228:	2300      	movs	r3, #0
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800122c:	2300      	movs	r3, #0
 800122e:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001230:	2300      	movs	r3, #0
 8001232:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fead 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001244:	f000 ff38 	bl	80020b8 <Error_Handler>
  }
}
 8001248:	bf00      	nop
 800124a:	37d0      	adds	r7, #208	; 0xd0
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_ADC1_Init+0x98>)
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <MX_ADC1_Init+0x9c>)
 800126e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001272:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001276:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001278:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <MX_ADC1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800127e:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_ADC1_Init+0x98>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001292:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <MX_ADC1_Init+0x98>)
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <MX_ADC1_Init+0xa0>)
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012ba:	f002 fb03 	bl	80038c4 <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c4:	f000 fef8 	bl	80020b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80012c8:	230f      	movs	r3, #15
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012da:	f002 fb37 	bl	800394c <HAL_ADC_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e4:	f000 fee8 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	2000054c 	.word	0x2000054c
 80012f4:	40012000 	.word	0x40012000
 80012f8:	0f000001 	.word	0x0f000001

080012fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_ADC2_Init+0x98>)
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <MX_ADC2_Init+0x9c>)
 8001312:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_ADC2_Init+0x98>)
 8001316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_ADC2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_ADC2_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_ADC2_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_ADC2_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_ADC2_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_ADC2_Init+0x98>)
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <MX_ADC2_Init+0xa0>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_ADC2_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_ADC2_Init+0x98>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_ADC2_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_ADC2_Init+0x98>)
 8001358:	2201      	movs	r2, #1
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_ADC2_Init+0x98>)
 800135e:	f002 fab1 	bl	80038c4 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001368:	f000 fea6 	bl	80020b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800136c:	2307      	movs	r3, #7
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_ADC2_Init+0x98>)
 800137e:	f002 fae5 	bl	800394c <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001388:	f000 fe96 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200003e8 	.word	0x200003e8
 8001398:	40012100 	.word	0x40012100
 800139c:	0f000001 	.word	0x0f000001

080013a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013a6:	463b      	mov	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <MX_ADC3_Init+0x98>)
 80013b4:	4a21      	ldr	r2, [pc, #132]	; (800143c <MX_ADC3_Init+0x9c>)
 80013b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_ADC3_Init+0x98>)
 80013ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_ADC3_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c6:	4b1c      	ldr	r3, [pc, #112]	; (8001438 <MX_ADC3_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_ADC3_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <MX_ADC3_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_ADC3_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <MX_ADC3_Init+0x98>)
 80013e2:	4a17      	ldr	r2, [pc, #92]	; (8001440 <MX_ADC3_Init+0xa0>)
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_ADC3_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_ADC3_Init+0x98>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_ADC3_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_ADC3_Init+0x98>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001400:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_ADC3_Init+0x98>)
 8001402:	f002 fa5f 	bl	80038c4 <HAL_ADC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800140c:	f000 fe54 	bl	80020b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001410:	230f      	movs	r3, #15
 8001412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001414:	2301      	movs	r3, #1
 8001416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_ADC3_Init+0x98>)
 8001422:	f002 fa93 	bl	800394c <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800142c:	f000 fe44 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000594 	.word	0x20000594
 800143c:	40012200 	.word	0x40012200
 8001440:	0f000001 	.word	0x0f000001

08001444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_I2C1_Init+0x74>)
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <MX_I2C1_Init+0x78>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <MX_I2C1_Init+0x7c>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_I2C1_Init+0x74>)
 800145c:	2201      	movs	r2, #1
 800145e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001480:	f002 ff98 	bl	80043b4 <HAL_I2C_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800148a:	f000 fe15 	bl	80020b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <MX_I2C1_Init+0x74>)
 8001492:	f003 f81f 	bl	80044d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800149c:	f000 fe0c 	bl	80020b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_I2C1_Init+0x74>)
 80014a4:	f003 f861 	bl	800456a <HAL_I2CEx_ConfigDigitalFilter>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ae:	f000 fe03 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000430 	.word	0x20000430
 80014bc:	40005400 	.word	0x40005400
 80014c0:	20404768 	.word	0x20404768

080014c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b09a      	sub	sp, #104	; 0x68
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	222c      	movs	r2, #44	; 0x2c
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fd1a 	bl	8007f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001504:	4b52      	ldr	r3, [pc, #328]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001506:	4a53      	ldr	r2, [pc, #332]	; (8001654 <MX_TIM1_Init+0x190>)
 8001508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <MX_TIM1_Init+0x18c>)
 800150c:	22d8      	movs	r2, #216	; 0xd8
 800150e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001516:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001518:	f64e 2260 	movw	r2, #60000	; 0xea60
 800151c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <MX_TIM1_Init+0x18c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001530:	4847      	ldr	r0, [pc, #284]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001532:	f004 f921 	bl	8005778 <HAL_TIM_Base_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800153c:	f000 fdbc 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001544:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154a:	4619      	mov	r1, r3
 800154c:	4840      	ldr	r0, [pc, #256]	; (8001650 <MX_TIM1_Init+0x18c>)
 800154e:	f004 ff35 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001558:	f000 fdae 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800155c:	483c      	ldr	r0, [pc, #240]	; (8001650 <MX_TIM1_Init+0x18c>)
 800155e:	f004 f962 	bl	8005826 <HAL_TIM_PWM_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001568:	f000 fda6 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001578:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800157c:	4619      	mov	r1, r3
 800157e:	4834      	ldr	r0, [pc, #208]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001580:	f005 fe08 	bl	8007194 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800158a:	f000 fd95 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158e:	2360      	movs	r3, #96	; 0x60
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8001592:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	2300      	movs	r3, #0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b0:	2200      	movs	r2, #0
 80015b2:	4619      	mov	r1, r3
 80015b4:	4826      	ldr	r0, [pc, #152]	; (8001650 <MX_TIM1_Init+0x18c>)
 80015b6:	f004 fdf1 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80015c0:	f000 fd7a 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80015c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ce:	2204      	movs	r2, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	481f      	ldr	r0, [pc, #124]	; (8001650 <MX_TIM1_Init+0x18c>)
 80015d4:	f004 fde2 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80015de:	f000 fd6b 	bl	80020b8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ea:	2208      	movs	r2, #8
 80015ec:	4619      	mov	r1, r3
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <MX_TIM1_Init+0x18c>)
 80015f0:	f004 fdd4 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80015fa:	f000 fd5d 	bl	80020b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001634:	f005 fe3c 	bl	80072b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 800163e:	f000 fd3b 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_TIM1_Init+0x18c>)
 8001644:	f001 fdc4 	bl	80031d0 <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3768      	adds	r7, #104	; 0x68
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000660 	.word	0x20000660
 8001654:	40010000 	.word	0x40010000

08001658 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b090      	sub	sp, #64	; 0x40
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800166c:	f107 031c 	add.w	r3, r7, #28
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168a:	463b      	mov	r3, r7
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001694:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <MX_TIM2_Init+0x138>)
 8001696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800169a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 800169c:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <MX_TIM2_Init+0x138>)
 800169e:	226c      	movs	r2, #108	; 0x6c
 80016a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b3b      	ldr	r3, [pc, #236]	; (8001790 <MX_TIM2_Init+0x138>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <MX_TIM2_Init+0x138>)
 80016aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <MX_TIM2_Init+0x138>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <MX_TIM2_Init+0x138>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016bc:	4834      	ldr	r0, [pc, #208]	; (8001790 <MX_TIM2_Init+0x138>)
 80016be:	f004 f85b 	bl	8005778 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80016c8:	f000 fcf6 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d6:	4619      	mov	r1, r3
 80016d8:	482d      	ldr	r0, [pc, #180]	; (8001790 <MX_TIM2_Init+0x138>)
 80016da:	f004 fe6f 	bl	80063bc <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80016e4:	f000 fce8 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80016e8:	4829      	ldr	r0, [pc, #164]	; (8001790 <MX_TIM2_Init+0x138>)
 80016ea:	f004 f9f7 	bl	8005adc <HAL_TIM_IC_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80016f4:	f000 fce0 	bl	80020b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80016f8:	2304      	movs	r3, #4
 80016fa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80016fc:	2350      	movs	r3, #80	; 0x50
 80016fe:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	481f      	ldr	r0, [pc, #124]	; (8001790 <MX_TIM2_Init+0x138>)
 8001714:	f004 ff18 	bl	8006548 <HAL_TIM_SlaveConfigSynchro>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800171e:	f000 fccb 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001726:	2301      	movs	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001732:	f107 030c 	add.w	r3, r7, #12
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	4815      	ldr	r0, [pc, #84]	; (8001790 <MX_TIM2_Init+0x138>)
 800173c:	f004 fc99 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001746:	f000 fcb7 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800174a:	2302      	movs	r3, #2
 800174c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800174e:	2302      	movs	r3, #2
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2204      	movs	r2, #4
 8001758:	4619      	mov	r1, r3
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_TIM2_Init+0x138>)
 800175c:	f004 fc89 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8001766:	f000 fca7 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_TIM2_Init+0x138>)
 8001778:	f005 fd0c 	bl	8007194 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001782:	f000 fc99 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3740      	adds	r7, #64	; 0x40
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200007b4 	.word	0x200007b4

08001794 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b090      	sub	sp, #64	; 0x40
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017d0:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017d2:	4a3e      	ldr	r2, [pc, #248]	; (80018cc <MX_TIM3_Init+0x138>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017d8:	226c      	movs	r2, #108	; 0x6c
 80017da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017e2:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f6:	4834      	ldr	r0, [pc, #208]	; (80018c8 <MX_TIM3_Init+0x134>)
 80017f8:	f003 ffbe 	bl	8005778 <HAL_TIM_Base_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001802:	f000 fc59 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800180c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001810:	4619      	mov	r1, r3
 8001812:	482d      	ldr	r0, [pc, #180]	; (80018c8 <MX_TIM3_Init+0x134>)
 8001814:	f004 fdd2 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800181e:	f000 fc4b 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001822:	4829      	ldr	r0, [pc, #164]	; (80018c8 <MX_TIM3_Init+0x134>)
 8001824:	f004 f95a 	bl	8005adc <HAL_TIM_IC_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800182e:	f000 fc43 	bl	80020b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001832:	2304      	movs	r3, #4
 8001834:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001836:	2350      	movs	r3, #80	; 0x50
 8001838:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	481e      	ldr	r0, [pc, #120]	; (80018c8 <MX_TIM3_Init+0x134>)
 800184e:	f004 fe7b 	bl	8006548 <HAL_TIM_SlaveConfigSynchro>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001858:	f000 fc2e 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001860:	2301      	movs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	2200      	movs	r2, #0
 8001872:	4619      	mov	r1, r3
 8001874:	4814      	ldr	r0, [pc, #80]	; (80018c8 <MX_TIM3_Init+0x134>)
 8001876:	f004 fbfc 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001880:	f000 fc1a 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001884:	2302      	movs	r3, #2
 8001886:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001888:	2302      	movs	r3, #2
 800188a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2204      	movs	r2, #4
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_TIM3_Init+0x134>)
 8001896:	f004 fbec 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 80018a0:	f000 fc0a 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a4:	2300      	movs	r3, #0
 80018a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_TIM3_Init+0x134>)
 80018b2:	f005 fc6f 	bl	8007194 <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 80018bc:	f000 fbfc 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	3740      	adds	r7, #64	; 0x40
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000047c 	.word	0x2000047c
 80018cc:	40000400 	.word	0x40000400

080018d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b090      	sub	sp, #64	; 0x40
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018f4:	f107 030c 	add.w	r3, r7, #12
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	463b      	mov	r3, r7
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800190c:	4b3d      	ldr	r3, [pc, #244]	; (8001a04 <MX_TIM4_Init+0x134>)
 800190e:	4a3e      	ldr	r2, [pc, #248]	; (8001a08 <MX_TIM4_Init+0x138>)
 8001910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <MX_TIM4_Init+0x134>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <MX_TIM4_Init+0x134>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 108;
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <MX_TIM4_Init+0x134>)
 8001920:	226c      	movs	r2, #108	; 0x6c
 8001922:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <MX_TIM4_Init+0x134>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <MX_TIM4_Init+0x134>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001930:	4834      	ldr	r0, [pc, #208]	; (8001a04 <MX_TIM4_Init+0x134>)
 8001932:	f003 ff21 	bl	8005778 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800193c:	f000 fbbc 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	4619      	mov	r1, r3
 800194c:	482d      	ldr	r0, [pc, #180]	; (8001a04 <MX_TIM4_Init+0x134>)
 800194e:	f004 fd35 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001958:	f000 fbae 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800195c:	4829      	ldr	r0, [pc, #164]	; (8001a04 <MX_TIM4_Init+0x134>)
 800195e:	f004 f8bd 	bl	8005adc <HAL_TIM_IC_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001968:	f000 fba6 	bl	80020b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800196c:	2304      	movs	r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001970:	2350      	movs	r3, #80	; 0x50
 8001972:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4619      	mov	r1, r3
 8001986:	481f      	ldr	r0, [pc, #124]	; (8001a04 <MX_TIM4_Init+0x134>)
 8001988:	f004 fdde 	bl	8006548 <HAL_TIM_SlaveConfigSynchro>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001992:	f000 fb91 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800199a:	2301      	movs	r3, #1
 800199c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	4815      	ldr	r0, [pc, #84]	; (8001a04 <MX_TIM4_Init+0x134>)
 80019b0:	f004 fb5f 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 80019ba:	f000 fb7d 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80019be:	2302      	movs	r3, #2
 80019c0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80019c2:	2302      	movs	r3, #2
 80019c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2204      	movs	r2, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM4_Init+0x134>)
 80019d0:	f004 fb4f 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 80019da:	f000 fb6d 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_TIM4_Init+0x134>)
 80019ec:	f005 fbd2 	bl	8007194 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM4_Init+0x12a>
  {
    Error_Handler();
 80019f6:	f000 fb5f 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019fa:	bf00      	nop
 80019fc:	3740      	adds	r7, #64	; 0x40
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000318 	.word	0x20000318
 8001a08:	40000800 	.word	0x40000800

08001a0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a2c:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <MX_TIM8_Init+0xa4>)
 8001a2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a42:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a50:	4b16      	ldr	r3, [pc, #88]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a56:	4815      	ldr	r0, [pc, #84]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a58:	f003 fe8e 	bl	8005778 <HAL_TIM_Base_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001a62:	f000 fb29 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	480e      	ldr	r0, [pc, #56]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a74:	f004 fca2 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001a7e:	f000 fb1b 	bl	80020b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_TIM8_Init+0xa0>)
 8001a94:	f005 fb7e 	bl	8007194 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001a9e:	f000 fb0b 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200002cc 	.word	0x200002cc
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001ae6:	4a36      	ldr	r2, [pc, #216]	; (8001bc0 <MX_TIM12_Init+0x10c>)
 8001ae8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b32      	ldr	r3, [pc, #200]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 108;
 8001af6:	4b31      	ldr	r3, [pc, #196]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001af8:	226c      	movs	r2, #108	; 0x6c
 8001afa:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001b08:	482c      	ldr	r0, [pc, #176]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001b0a:	f003 fe35 	bl	8005778 <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8001b14:	f000 fad0 	bl	80020b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4825      	ldr	r0, [pc, #148]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001b26:	f004 fc49 	bl	80063bc <HAL_TIM_ConfigClockSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM12_Init+0x80>
  {
    Error_Handler();
 8001b30:	f000 fac2 	bl	80020b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8001b34:	4821      	ldr	r0, [pc, #132]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001b36:	f003 ffd1 	bl	8005adc <HAL_TIM_IC_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM12_Init+0x90>
  {
    Error_Handler();
 8001b40:	f000 faba 	bl	80020b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b44:	2304      	movs	r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b48:	2350      	movs	r3, #80	; 0x50
 8001b4a:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4817      	ldr	r0, [pc, #92]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001b60:	f004 fcf2 	bl	8006548 <HAL_TIM_SlaveConfigSynchro>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM12_Init+0xba>
  {
    Error_Handler();
 8001b6a:	f000 faa5 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b72:	2301      	movs	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	4619      	mov	r1, r3
 8001b84:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001b86:	f004 fa74 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM12_Init+0xe0>
  {
    Error_Handler();
 8001b90:	f000 fa92 	bl	80020b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b94:	2302      	movs	r3, #2
 8001b96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_TIM12_Init+0x108>)
 8001ba4:	f004 fa65 	bl	8006072 <HAL_TIM_IC_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM12_Init+0xfe>
  {
    Error_Handler();
 8001bae:	f000 fa83 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000884 	.word	0x20000884
 8001bc0:	40001800 	.word	0x40001800

08001bc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <MX_UART4_Init+0x5c>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_UART4_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_UART4_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_UART4_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_UART4_Init+0x58>)
 8001c08:	f005 fbee 	bl	80073e8 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c12:	f000 fa51 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000730 	.word	0x20000730
 8001c20:	40004c00 	.word	0x40004c00

08001c24 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c2a:	4a15      	ldr	r2, [pc, #84]	; (8001c80 <MX_UART5_Init+0x5c>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_UART5_Init+0x58>)
 8001c68:	f005 fbbe 	bl	80073e8 <HAL_UART_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001c72:	f000 fa21 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200004c8 	.word	0x200004c8
 8001c80:	40005000 	.word	0x40005000

08001c84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_UART7_Init+0x58>)
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <MX_UART7_Init+0x5c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_UART7_Init+0x58>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_UART7_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_UART7_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_UART7_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_UART7_Init+0x58>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MX_UART7_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_UART7_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <MX_UART7_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_UART7_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_UART7_Init+0x58>)
 8001cc8:	f005 fb8e 	bl	80073e8 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f000 f9f1 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000248 	.word	0x20000248
 8001ce0:	40007800 	.word	0x40007800

08001ce4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_UART8_Init+0x58>)
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <MX_UART8_Init+0x5c>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_UART8_Init+0x58>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_UART8_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_UART8_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_UART8_Init+0x58>)
 8001d28:	f005 fb5e 	bl	80073e8 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001d32:	f000 f9c1 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200006ac 	.word	0x200006ac
 8001d40:	40007c00 	.word	0x40007c00

08001d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <MX_USART1_UART_Init+0x5c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_USART1_UART_Init+0x58>)
 8001d88:	f005 fb2e 	bl	80073e8 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d92:	f000 f991 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200005dc 	.word	0x200005dc
 8001da0:	40011000 	.word	0x40011000

08001da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <MX_USART2_UART_Init+0x5c>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001de8:	f005 fafe 	bl	80073e8 <HAL_UART_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001df2:	f000 f961 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000800 	.word	0x20000800
 8001e00:	40004400 	.word	0x40004400

08001e04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <MX_USART3_UART_Init+0x5c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e48:	f005 face 	bl	80073e8 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e52:	f000 f931 	bl	80020b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000364 	.word	0x20000364
 8001e60:	40004800 	.word	0x40004800

08001e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	; 0x38
 8001e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e7a:	4b87      	ldr	r3, [pc, #540]	; (8002098 <MX_GPIO_Init+0x234>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a86      	ldr	r2, [pc, #536]	; (8002098 <MX_GPIO_Init+0x234>)
 8001e80:	f043 0320 	orr.w	r3, r3, #32
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b84      	ldr	r3, [pc, #528]	; (8002098 <MX_GPIO_Init+0x234>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e92:	4b81      	ldr	r3, [pc, #516]	; (8002098 <MX_GPIO_Init+0x234>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a80      	ldr	r2, [pc, #512]	; (8002098 <MX_GPIO_Init+0x234>)
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b7e      	ldr	r3, [pc, #504]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <MX_GPIO_Init+0x234>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <MX_GPIO_Init+0x234>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b78      	ldr	r3, [pc, #480]	; (8002098 <MX_GPIO_Init+0x234>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec2:	4b75      	ldr	r3, [pc, #468]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a74      	ldr	r2, [pc, #464]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <MX_GPIO_Init+0x234>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ef2:	4b69      	ldr	r3, [pc, #420]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a68      	ldr	r2, [pc, #416]	; (8002098 <MX_GPIO_Init+0x234>)
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b66      	ldr	r3, [pc, #408]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0a:	4b63      	ldr	r3, [pc, #396]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a62      	ldr	r2, [pc, #392]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b60      	ldr	r3, [pc, #384]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b5a      	ldr	r3, [pc, #360]	; (8002098 <MX_GPIO_Init+0x234>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	4857      	ldr	r0, [pc, #348]	; (800209c <MX_GPIO_Init+0x238>)
 8001f40:	f002 fa1e 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f243 0124 	movw	r1, #12324	; 0x3024
 8001f4a:	4855      	ldr	r0, [pc, #340]	; (80020a0 <MX_GPIO_Init+0x23c>)
 8001f4c:	f002 fa18 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f56:	4853      	ldr	r0, [pc, #332]	; (80020a4 <MX_GPIO_Init+0x240>)
 8001f58:	f002 fa12 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Spare7_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8001f62:	4851      	ldr	r0, [pc, #324]	; (80020a8 <MX_GPIO_Init+0x244>)
 8001f64:	f002 fa0c 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001f6e:	484f      	ldr	r0, [pc, #316]	; (80020ac <MX_GPIO_Init+0x248>)
 8001f70:	f002 fa06 	bl	8004380 <HAL_GPIO_WritePin>
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f7a:	484d      	ldr	r0, [pc, #308]	; (80020b0 <MX_GPIO_Init+0x24c>)
 8001f7c:	f002 fa00 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f86:	484b      	ldr	r0, [pc, #300]	; (80020b4 <MX_GPIO_Init+0x250>)
 8001f88:	f002 f9fa 	bl	8004380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : qtr_ctrl_odd_Pin qtr_ctrl_even_Pin */
  GPIO_InitStruct.Pin = qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	483e      	ldr	r0, [pc, #248]	; (800209c <MX_GPIO_Init+0x238>)
 8001fa4:	f002 f828 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : lid1_pwr_en_Pin lid2_pwr_en_Pin lid3_pwr_en_Pin cmdLeds_Pin */
  GPIO_InitStruct.Pin = lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin;
 8001fa8:	f243 0324 	movw	r3, #12324	; 0x3024
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4837      	ldr	r0, [pc, #220]	; (80020a0 <MX_GPIO_Init+0x23c>)
 8001fc2:	f002 f819 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid6_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid6_pwr_en_Pin;
 8001fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid6_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4831      	ldr	r0, [pc, #196]	; (80020a4 <MX_GPIO_Init+0x240>)
 8001fe0:	f002 f80a 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare7_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = Spare7_Pin|led3_Pin|led2_Pin;
 8001fe4:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	482a      	ldr	r0, [pc, #168]	; (80020a8 <MX_GPIO_Init+0x244>)
 8001ffe:	f001 fffb 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare6_Pin Spare5_Pin Spare4_Pin Spare3_Pin
                           Spare2_Pin Spare1_Pin Spare0_Pin led1_Pin */
  GPIO_InitStruct.Pin = Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8002002:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4824      	ldr	r0, [pc, #144]	; (80020ac <MX_GPIO_Init+0x248>)
 800201c:	f001 ffec 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid4_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid4_pwr_en_Pin;
 8002020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid4_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	481d      	ldr	r0, [pc, #116]	; (80020b0 <MX_GPIO_Init+0x24c>)
 800203a:	f001 ffdd 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid5_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid5_pwr_en_Pin;
 800203e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid5_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4817      	ldr	r0, [pc, #92]	; (80020b4 <MX_GPIO_Init+0x250>)
 8002058:	f001 ffce 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : boutonExt1_Pin boutonExt2_Pin */
  GPIO_InitStruct.Pin = boutonExt1_Pin|boutonExt2_Pin;
 800205c:	2330      	movs	r3, #48	; 0x30
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	4619      	mov	r1, r3
 800206e:	480e      	ldr	r0, [pc, #56]	; (80020a8 <MX_GPIO_Init+0x244>)
 8002070:	f001 ffc2 	bl	8003ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : bouton3_Pin bouton2_Pin bouton1_Pin */
  GPIO_InitStruct.Pin = bouton3_Pin|bouton2_Pin|bouton1_Pin;
 8002074:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <MX_GPIO_Init+0x248>)
 800208a:	f001 ffb5 	bl	8003ff8 <HAL_GPIO_Init>

}
 800208e:	bf00      	nop
 8002090:	3738      	adds	r7, #56	; 0x38
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40021c00 	.word	0x40021c00
 80020a0:	40020400 	.word	0x40020400
 80020a4:	40021400 	.word	0x40021400
 80020a8:	40020c00 	.word	0x40020c00
 80020ac:	40021800 	.word	0x40021800
 80020b0:	40020000 	.word	0x40020000
 80020b4:	40020800 	.word	0x40020800

080020b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <Error_Handler+0x8>
	...

080020c4 <init_radio_commandes>:
static st_pwm_infos radio_spare;

static st_pwm_infos vehicule_speedsensor;

void init_radio_commandes()
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	// Initialisation de toutes les structures
	radio_dir.last_time = 0;
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <init_radio_commandes+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
	radio_dir.period = 0;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <init_radio_commandes+0x98>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]
	radio_dir.duty_cycle = 0;
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <init_radio_commandes+0x98>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]

	radio_throttle.last_time = 0;
 80020da:	4b21      	ldr	r3, [pc, #132]	; (8002160 <init_radio_commandes+0x9c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
	radio_throttle.period = 0;
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <init_radio_commandes+0x9c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	605a      	str	r2, [r3, #4]
	radio_throttle.duty_cycle = 0;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <init_radio_commandes+0x9c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]

	radio_spare.last_time = 0;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <init_radio_commandes+0xa0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
	radio_spare.period = 0;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <init_radio_commandes+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
	radio_spare.duty_cycle = 0;
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <init_radio_commandes+0xa0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]

	vehicule_speedsensor.last_time = 0;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <init_radio_commandes+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
	vehicule_speedsensor.period = 0;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <init_radio_commandes+0xa4>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
	vehicule_speedsensor.duty_cycle = 0;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <init_radio_commandes+0xa4>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]

	// Démarrage des Timers d'acquisition
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002110:	2100      	movs	r1, #0
 8002112:	4816      	ldr	r0, [pc, #88]	; (800216c <init_radio_commandes+0xa8>)
 8002114:	f003 fd44 	bl	8005ba0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002118:	2104      	movs	r1, #4
 800211a:	4814      	ldr	r0, [pc, #80]	; (800216c <init_radio_commandes+0xa8>)
 800211c:	f003 fd40 	bl	8005ba0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002120:	2100      	movs	r1, #0
 8002122:	4813      	ldr	r0, [pc, #76]	; (8002170 <init_radio_commandes+0xac>)
 8002124:	f003 fd3c 	bl	8005ba0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002128:	2104      	movs	r1, #4
 800212a:	4811      	ldr	r0, [pc, #68]	; (8002170 <init_radio_commandes+0xac>)
 800212c:	f003 fd38 	bl	8005ba0 <HAL_TIM_IC_Start_IT>

	// Démarrage du Timer de commande
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002130:	2100      	movs	r1, #0
 8002132:	4810      	ldr	r0, [pc, #64]	; (8002174 <init_radio_commandes+0xb0>)
 8002134:	f003 fbd8 	bl	80058e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002138:	2104      	movs	r1, #4
 800213a:	480e      	ldr	r0, [pc, #56]	; (8002174 <init_radio_commandes+0xb0>)
 800213c:	f003 fbd4 	bl	80058e8 <HAL_TIM_PWM_Start>

	// Détermination des valeurs médianes sur la télécommande.
	// Il s'avère que lorsque l'on relache la télécommande le point milieu de la gachette de vitesse
	// et de la direction.
	// On attend une seconde puis on mesure les valeurs par défaut
	HAL_Delay(1000);
 8002140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002144:	f001 fb9a 	bl	800387c <HAL_Delay>
	radio_dir.duty_cycle_default = radio_dir.duty_cycle;
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <init_radio_commandes+0x98>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a03      	ldr	r2, [pc, #12]	; (800215c <init_radio_commandes+0x98>)
 800214e:	60d3      	str	r3, [r2, #12]
	radio_throttle.duty_cycle_default = radio_throttle.duty_cycle;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <init_radio_commandes+0x9c>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a02      	ldr	r2, [pc, #8]	; (8002160 <init_radio_commandes+0x9c>)
 8002156:	60d3      	str	r3, [r2, #12]
	// TODO : c'est moins pire, mais ce n'est pas encore génial. Il faudrai peut être prévoir une courbe en expo comme sur les télécommandes de planeur

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200001fc 	.word	0x200001fc
 8002160:	2000020c 	.word	0x2000020c
 8002164:	2000021c 	.word	0x2000021c
 8002168:	2000022c 	.word	0x2000022c
 800216c:	200007b4 	.word	0x200007b4
 8002170:	2000047c 	.word	0x2000047c
 8002174:	20000660 	.word	0x20000660

08002178 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // Callback for PWM input catpure
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	if(htim==&htim3) // DIR from RX
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_TIM_IC_CaptureCallback+0x94>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d11c      	bne.n	80021c2 <HAL_TIM_IC_CaptureCallback+0x4a>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7f1b      	ldrb	r3, [r3, #28]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10c      	bne.n	80021aa <HAL_TIM_IC_CaptureCallback+0x32>
		{
			radio_dir.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002190:	2100      	movs	r1, #0
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f004 fa1a 	bl	80065cc <HAL_TIM_ReadCapturedValue>
 8002198:	4603      	mov	r3, r0
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x98>)
 800219c:	6053      	str	r3, [r2, #4]
			radio_dir.last_time = HAL_GetTick(); // timestamp last pulse
 800219e:	f001 fb61 	bl	8003864 <HAL_GetTick>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4a1a      	ldr	r2, [pc, #104]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x98>)
 80021a6:	6013      	str	r3, [r2, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			radio_throttle.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
		}
	}
}
 80021a8:	e02b      	b.n	8002202 <HAL_TIM_IC_CaptureCallback+0x8a>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7f1b      	ldrb	r3, [r3, #28]
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d127      	bne.n	8002202 <HAL_TIM_IC_CaptureCallback+0x8a>
			radio_dir.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80021b2:	2104      	movs	r1, #4
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f004 fa09 	bl	80065cc <HAL_TIM_ReadCapturedValue>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a14      	ldr	r2, [pc, #80]	; (8002210 <HAL_TIM_IC_CaptureCallback+0x98>)
 80021be:	6093      	str	r3, [r2, #8]
}
 80021c0:	e01f      	b.n	8002202 <HAL_TIM_IC_CaptureCallback+0x8a>
	else if(htim==&htim2) // THR from RX
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a13      	ldr	r2, [pc, #76]	; (8002214 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d11b      	bne.n	8002202 <HAL_TIM_IC_CaptureCallback+0x8a>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7f1b      	ldrb	r3, [r3, #28]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10c      	bne.n	80021ec <HAL_TIM_IC_CaptureCallback+0x74>
			radio_throttle.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80021d2:	2100      	movs	r1, #0
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f004 f9f9 	bl	80065cc <HAL_TIM_ReadCapturedValue>
 80021da:	4603      	mov	r3, r0
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80021de:	6053      	str	r3, [r2, #4]
			radio_throttle.last_time = HAL_GetTick(); // timestamp last pulse
 80021e0:	f001 fb40 	bl	8003864 <HAL_GetTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a0c      	ldr	r2, [pc, #48]	; (8002218 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80021e8:	6013      	str	r3, [r2, #0]
}
 80021ea:	e00a      	b.n	8002202 <HAL_TIM_IC_CaptureCallback+0x8a>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7f1b      	ldrb	r3, [r3, #28]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d106      	bne.n	8002202 <HAL_TIM_IC_CaptureCallback+0x8a>
			radio_throttle.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80021f4:	2104      	movs	r1, #4
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 f9e8 	bl	80065cc <HAL_TIM_ReadCapturedValue>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002200:	6093      	str	r3, [r2, #8]
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	2000047c 	.word	0x2000047c
 8002210:	200001fc 	.word	0x200001fc
 8002214:	200007b4 	.word	0x200007b4
 8002218:	2000020c 	.word	0x2000020c

0800221c <radio_dir_get>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int radio_dir_get(float *a_pDir)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if( (HAL_GetTick() - radio_dir.last_time) > 1000)
 8002224:	f001 fb1e 	bl	8003864 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	4b24      	ldr	r3, [pc, #144]	; (80022bc <radio_dir_get+0xa0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002234:	d902      	bls.n	800223c <radio_dir_get+0x20>
		return -1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e03b      	b.n	80022b4 <radio_dir_get+0x98>
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		if(radio_dir.duty_cycle<1000) radio_dir.duty_cycle = 1000;
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <radio_dir_get+0xa0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002244:	d203      	bcs.n	800224e <radio_dir_get+0x32>
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <radio_dir_get+0xa0>)
 8002248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800224c:	609a      	str	r2, [r3, #8]
		if(radio_dir.duty_cycle>2000) radio_dir.duty_cycle = 2000;
 800224e:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <radio_dir_get+0xa0>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002256:	d903      	bls.n	8002260 <radio_dir_get+0x44>
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <radio_dir_get+0xa0>)
 800225a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800225e:	609a      	str	r2, [r3, #8]

		*a_pDir = ((float)(radio_dir.duty_cycle) - (float)(radio_dir.duty_cycle_default))*VEHICULE_DIR_MAX/500.0;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <radio_dir_get+0xa0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <radio_dir_get+0xa0>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	ee17 0a90 	vmov	r0, s15
 8002280:	f7fe f992 	bl	80005a8 <__aeabi_f2d>
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <radio_dir_get+0xa4>)
 800228a:	f7fe f9e5 	bl	8000658 <__aeabi_dmul>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <radio_dir_get+0xa8>)
 800229c:	f7fe fb06 	bl	80008ac <__aeabi_ddiv>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fcce 	bl	8000c48 <__aeabi_d2f>
 80022ac:	4602      	mov	r2, r0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	200001fc 	.word	0x200001fc
 80022c0:	40468000 	.word	0x40468000
 80022c4:	407f4000 	.word	0x407f4000

080022c8 <radio_throttle_get>:

// Par convention, la vitesse est négative quand on recule.
int radio_throttle_get(float *a_pThrottle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - radio_throttle.last_time) > 1000)
 80022d0:	f001 fac8 	bl	8003864 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <radio_throttle_get+0xa0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022e0:	d902      	bls.n	80022e8 <radio_throttle_get+0x20>
		return -1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
 80022e6:	e03b      	b.n	8002360 <radio_throttle_get+0x98>
	else
	{
		if(radio_throttle.duty_cycle<1000) radio_throttle.duty_cycle = 1000;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <radio_throttle_get+0xa0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022f0:	d203      	bcs.n	80022fa <radio_throttle_get+0x32>
 80022f2:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <radio_throttle_get+0xa0>)
 80022f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022f8:	609a      	str	r2, [r3, #8]
		if(radio_throttle.duty_cycle>2000) radio_throttle.duty_cycle = 2000;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <radio_throttle_get+0xa0>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002302:	d903      	bls.n	800230c <radio_throttle_get+0x44>
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <radio_throttle_get+0xa0>)
 8002306:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800230a:	609a      	str	r2, [r3, #8]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		*a_pThrottle = ((float)(radio_throttle.duty_cycle) - (float)(radio_throttle.duty_cycle_default))*VEHICULE_SPEED_MAX/500.0;
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <radio_throttle_get+0xa0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <radio_throttle_get+0xa0>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002328:	ee17 0a90 	vmov	r0, s15
 800232c:	f7fe f93c 	bl	80005a8 <__aeabi_f2d>
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <radio_throttle_get+0xa4>)
 8002336:	f7fe f98f 	bl	8000658 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <radio_throttle_get+0xa8>)
 8002348:	f7fe fab0 	bl	80008ac <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe fc78 	bl	8000c48 <__aeabi_d2f>
 8002358:	4602      	mov	r2, r0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	601a      	str	r2, [r3, #0]
	}
	return 0;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2000020c 	.word	0x2000020c
 800236c:	40240000 	.word	0x40240000
 8002370:	407f4000 	.word	0x407f4000

08002374 <vehicule_dir_set>:
	return 0;
}

// Par convention, l'angle est négatif quand on tourne à gauche.
int vehicule_dir_set(float a_dir)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_dir>VEHICULE_DIR_MAX) || (a_dir<-VEHICULE_DIR_MAX))
 800237e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002382:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80023ec <vehicule_dir_set+0x78>
 8002386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	dc08      	bgt.n	80023a2 <vehicule_dir_set+0x2e>
 8002390:	edd7 7a01 	vldr	s15, [r7, #4]
 8002394:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80023f0 <vehicule_dir_set+0x7c>
 8002398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	d502      	bpl.n	80023a8 <vehicule_dir_set+0x34>
		return -1;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e01d      	b.n	80023e4 <vehicule_dir_set+0x70>
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR1 = 1500 + (int32_t)((a_dir/VEHICULE_DIR_MAX)*500.0);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fe f8fd 	bl	80005a8 <__aeabi_f2d>
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <vehicule_dir_set+0x80>)
 80023b4:	f7fe fa7a 	bl	80008ac <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <vehicule_dir_set+0x84>)
 80023c6:	f7fe f947 	bl	8000658 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fbf1 	bl	8000bb8 <__aeabi_d2iz>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <vehicule_dir_set+0x88>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	635a      	str	r2, [r3, #52]	; 0x34
	}

	return 0;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	42340000 	.word	0x42340000
 80023f0:	c2340000 	.word	0xc2340000
 80023f4:	40468000 	.word	0x40468000
 80023f8:	407f4000 	.word	0x407f4000
 80023fc:	20000660 	.word	0x20000660

08002400 <vehicule_throttle_set>:

// Par convention, la vitesse est négative quand on recule.
int vehicule_throttle_set(float a_throttle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_throttle>VEHICULE_SPEED_MAX) || (a_throttle<-VEHICULE_SPEED_MAX))
 800240a:	edd7 7a01 	vldr	s15, [r7, #4]
 800240e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	dc08      	bgt.n	800242e <vehicule_throttle_set+0x2e>
 800241c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002420:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d502      	bpl.n	8002434 <vehicule_throttle_set+0x34>
		return -1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e01d      	b.n	8002470 <vehicule_throttle_set+0x70>
	else
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR2 = 1500 + (int32_t)((a_throttle/VEHICULE_SPEED_MAX)*500.0);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7fe f8b7 	bl	80005a8 <__aeabi_f2d>
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <vehicule_throttle_set+0x78>)
 8002440:	f7fe fa34 	bl	80008ac <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <vehicule_throttle_set+0x7c>)
 8002452:	f7fe f901 	bl	8000658 <__aeabi_dmul>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	4610      	mov	r0, r2
 800245c:	4619      	mov	r1, r3
 800245e:	f7fe fbab 	bl	8000bb8 <__aeabi_d2iz>
 8002462:	4603      	mov	r3, r0
 8002464:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <vehicule_throttle_set+0x80>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	639a      	str	r2, [r3, #56]	; 0x38

	return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40240000 	.word	0x40240000
 800247c:	407f4000 	.word	0x407f4000
 8002480:	20000660 	.word	0x20000660

08002484 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002488:	f3bf 8f4f 	dsb	sy
}
 800248c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <__NVIC_SystemReset+0x24>)
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002496:	4904      	ldr	r1, [pc, #16]	; (80024a8 <__NVIC_SystemReset+0x24>)
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_SystemReset+0x28>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800249e:	f3bf 8f4f 	dsb	sy
}
 80024a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <__NVIC_SystemReset+0x20>
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	05fa0004 	.word	0x05fa0004

080024b0 <saisie_commande>:

    return nb_car_valide;
}

char *saisie_commande()
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
    char caractere;
	shell_etat etat;
	char *pCommandeCourante;
	unsigned int pointeur_historique;

    nb_car_valide = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    position = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
	etat = sh_normal;
 80024be:	2300      	movs	r3, #0
 80024c0:	74fb      	strb	r3, [r7, #19]

    // Caractere fin de chaine
	pointeur_historique = sh_historique.commande_courante;
 80024c2:	4b87      	ldr	r3, [pc, #540]	; (80026e0 <saisie_commande+0x230>)
 80024c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80024c8:	60bb      	str	r3, [r7, #8]
	pCommandeCourante = sh_historique.commandes[sh_historique.commande_courante];
 80024ca:	4b85      	ldr	r3, [pc, #532]	; (80026e0 <saisie_commande+0x230>)
 80024cc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80024d0:	2232      	movs	r2, #50	; 0x32
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	4a82      	ldr	r2, [pc, #520]	; (80026e0 <saisie_commande+0x230>)
 80024d8:	4413      	add	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
	pCommandeCourante[position] = 0x0;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]

    do {
        caractere = getchar();
 80024e6:	f005 fcf1 	bl	8007ecc <getchar>
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]

		if(etat == sh_normal)
 80024ee:	7cfb      	ldrb	r3, [r7, #19]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <saisie_commande+0x50>
		{
			if(caractere == 0x1b)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	2b1b      	cmp	r3, #27
 80024f8:	d162      	bne.n	80025c0 <saisie_commande+0x110>
				etat = sh_fleche_en_cours;
 80024fa:	2301      	movs	r3, #1
 80024fc:	74fb      	strb	r3, [r7, #19]
 80024fe:	e05f      	b.n	80025c0 <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_en_cours)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <saisie_commande+0x68>
		{
			if(caractere == 0x5b)
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b5b      	cmp	r3, #91	; 0x5b
 800250a:	d102      	bne.n	8002512 <saisie_commande+0x62>
				etat = sh_fleche_confirmee;
 800250c:	2302      	movs	r3, #2
 800250e:	74fb      	strb	r3, [r7, #19]
 8002510:	e056      	b.n	80025c0 <saisie_commande+0x110>
			else
				// Ce n'est pas le code pour une fleche
				// On jete le caractere 0x1b
				etat = sh_normal;
 8002512:	2300      	movs	r3, #0
 8002514:	74fb      	strb	r3, [r7, #19]
 8002516:	e053      	b.n	80025c0 <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_confirmee)
 8002518:	7cfb      	ldrb	r3, [r7, #19]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d145      	bne.n	80025aa <saisie_commande+0xfa>
		{
			if(caractere == 0x44)
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	2b44      	cmp	r3, #68	; 0x44
 8002522:	d105      	bne.n	8002530 <saisie_commande+0x80>
			{
				// Fleche vers la gauche
				position -=1;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	3b01      	subs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 800252a:	2303      	movs	r3, #3
 800252c:	74fb      	strb	r3, [r7, #19]
 800252e:	e047      	b.n	80025c0 <saisie_commande+0x110>
			}
			else if(caractere == 0x43)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b43      	cmp	r3, #67	; 0x43
 8002534:	d105      	bne.n	8002542 <saisie_commande+0x92>
			{
				// Fleche vers la droite
				position +=1;
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3301      	adds	r3, #1
 800253a:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 800253c:	2303      	movs	r3, #3
 800253e:	74fb      	strb	r3, [r7, #19]
 8002540:	e03e      	b.n	80025c0 <saisie_commande+0x110>
			}
			else if(caractere == 0x41)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b41      	cmp	r3, #65	; 0x41
 8002546:	d12d      	bne.n	80025a4 <saisie_commande+0xf4>
			{
				// Fleche vers le haut
				if(pointeur_historique == 0)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <saisie_commande+0xa4>
					pointeur_historique = SHELL_MAX_HISTORIQUE-1;
 800254e:	2304      	movs	r3, #4
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	e002      	b.n	800255a <saisie_commande+0xaa>
				else
					pointeur_historique = pointeur_historique-1;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3b01      	subs	r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
				pCommandeCourante = sh_historique.commandes[pointeur_historique];
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2232      	movs	r2, #50	; 0x32
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	4a5f      	ldr	r2, [pc, #380]	; (80026e0 <saisie_commande+0x230>)
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
                printf("\r\n                                                  ");
 8002568:	485e      	ldr	r0, [pc, #376]	; (80026e4 <saisie_commande+0x234>)
 800256a:	f006 f957 	bl	800881c <iprintf>
				printf("\r%s%s", PROMPT, pCommandeCourante);
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	495d      	ldr	r1, [pc, #372]	; (80026e8 <saisie_commande+0x238>)
 8002572:	485e      	ldr	r0, [pc, #376]	; (80026ec <saisie_commande+0x23c>)
 8002574:	f006 f952 	bl	800881c <iprintf>
				position = strlen(pCommandeCourante);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7fd fe53 	bl	8000224 <strlen>
 800257e:	4603      	mov	r3, r0
 8002580:	61bb      	str	r3, [r7, #24]
				nb_car_valide = position;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	61fb      	str	r3, [r7, #28]
				strcpy(sh_historique.commandes[sh_historique.commande_courante], pCommandeCourante);
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <saisie_commande+0x230>)
 8002588:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800258c:	2232      	movs	r2, #50	; 0x32
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	4a53      	ldr	r2, [pc, #332]	; (80026e0 <saisie_commande+0x230>)
 8002594:	4413      	add	r3, r2
 8002596:	68f9      	ldr	r1, [r7, #12]
 8002598:	4618      	mov	r0, r3
 800259a:	f006 f9cd 	bl	8008938 <strcpy>
				etat = sh_code_fleche;
 800259e:	2303      	movs	r3, #3
 80025a0:	74fb      	strb	r3, [r7, #19]
 80025a2:	e00d      	b.n	80025c0 <saisie_commande+0x110>
			}
			else
				// Inconnu ou non gere
				etat = sh_normal;
 80025a4:	2300      	movs	r3, #0
 80025a6:	74fb      	strb	r3, [r7, #19]
 80025a8:	e00a      	b.n	80025c0 <saisie_commande+0x110>
		}
		else if(etat == sh_code_fleche)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d107      	bne.n	80025c0 <saisie_commande+0x110>
		{
			if(caractere == 0x1b)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b1b      	cmp	r3, #27
 80025b4:	d102      	bne.n	80025bc <saisie_commande+0x10c>
				etat = sh_fleche_en_cours;
 80025b6:	2301      	movs	r3, #1
 80025b8:	74fb      	strb	r3, [r7, #19]
 80025ba:	e001      	b.n	80025c0 <saisie_commande+0x110>
			else
				etat = sh_normal;
 80025bc:	2300      	movs	r3, #0
 80025be:	74fb      	strb	r3, [r7, #19]
		}

		if(etat == sh_normal)
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d165      	bne.n	8002692 <saisie_commande+0x1e2>
		{
			if(caractere == 0x08)
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d122      	bne.n	8002612 <saisie_commande+0x162>
	        {
		        // DEL
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position-1" � la "fin de la chaine" d'une case
	            for(i=position-1; i<nb_car_valide; i++)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	e00b      	b.n	80025ec <saisie_commande+0x13c>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	441a      	add	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	68f9      	ldr	r1, [r7, #12]
 80025e0:	440b      	add	r3, r1
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	701a      	strb	r2, [r3, #0]
	            for(i=position-1; i<nb_car_valide; i++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbef      	blt.n	80025d4 <saisie_commande+0x124>

	            position -= 1;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
	            nb_car_valide -= 1;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]

                // Rafraichissement de l'affichage
                printf("\r                                                  ");
 8002600:	483b      	ldr	r0, [pc, #236]	; (80026f0 <saisie_commande+0x240>)
 8002602:	f006 f90b 	bl	800881c <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4937      	ldr	r1, [pc, #220]	; (80026e8 <saisie_commande+0x238>)
 800260a:	4838      	ldr	r0, [pc, #224]	; (80026ec <saisie_commande+0x23c>)
 800260c:	f006 f906 	bl	800881c <iprintf>
 8002610:	e03f      	b.n	8002692 <saisie_commande+0x1e2>
	        }
	        else if(caractere == 0x7F)
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	2b7f      	cmp	r3, #127	; 0x7f
 8002616:	d11e      	bne.n	8002656 <saisie_commande+0x1a6>
	       {
	            // SUPPR
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=position; i<nb_car_valide; i++)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e00b      	b.n	8002636 <saisie_commande+0x186>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	441a      	add	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	68f9      	ldr	r1, [r7, #12]
 800262a:	440b      	add	r3, r1
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	701a      	strb	r2, [r3, #0]
	            for(i=position; i<nb_car_valide; i++)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	3301      	adds	r3, #1
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	429a      	cmp	r2, r3
 800263c:	dbef      	blt.n	800261e <saisie_commande+0x16e>

	            nb_car_valide -= 1;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b01      	subs	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]

	            // Rafraichissement de l'affichage
                printf("\r                                                  ");
 8002644:	482a      	ldr	r0, [pc, #168]	; (80026f0 <saisie_commande+0x240>)
 8002646:	f006 f8e9 	bl	800881c <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4926      	ldr	r1, [pc, #152]	; (80026e8 <saisie_commande+0x238>)
 800264e:	4827      	ldr	r0, [pc, #156]	; (80026ec <saisie_commande+0x23c>)
 8002650:	f006 f8e4 	bl	800881c <iprintf>
 8002654:	e01d      	b.n	8002692 <saisie_commande+0x1e2>
	        else
	        {
	            // Pas de caractere special
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=nb_car_valide; i>=position; i--)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e00b      	b.n	8002674 <saisie_commande+0x1c4>
	                pCommandeCourante[i+1] = pCommandeCourante[i];
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	441a      	add	r2, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	68f9      	ldr	r1, [r7, #12]
 8002668:	440b      	add	r3, r1
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	701a      	strb	r2, [r3, #0]
	            for(i=nb_car_valide; i>=position; i--)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3b01      	subs	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	429a      	cmp	r2, r3
 800267a:	daef      	bge.n	800265c <saisie_commande+0x1ac>

	            pCommandeCourante[position++] = caractere;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	61ba      	str	r2, [r7, #24]
 8002682:	461a      	mov	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4413      	add	r3, r2
 8002688:	79fa      	ldrb	r2, [r7, #7]
 800268a:	701a      	strb	r2, [r3, #0]
	            nb_car_valide++;
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3301      	adds	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
	        }
		}
        // Over writing pour afficher la chaine mise � jour
        //printf("nb_car_valide = %d, position = %d\n", nb_car_valide, position);

    } while (caractere != '\n');
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b0a      	cmp	r3, #10
 8002696:	f47f af26 	bne.w	80024e6 <saisie_commande+0x36>

    if(nb_car_valide >= 2)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	dd06      	ble.n	80026ae <saisie_commande+0x1fe>
    {
        pCommandeCourante[nb_car_valide-2] = 0x0;
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3b02      	subs	r3, #2
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e002      	b.n	80026b4 <saisie_commande+0x204>
    }
    else
    {
        pCommandeCourante[0] = 0x0;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
    }

	sh_historique.commande_courante = (sh_historique.commande_courante + 1)%SHELL_MAX_HISTORIQUE;
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <saisie_commande+0x230>)
 80026b6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <saisie_commande+0x244>)
 80026be:	fb83 2301 	smull	r2, r3, r3, r1
 80026c2:	105a      	asrs	r2, r3, #1
 80026c4:	17cb      	asrs	r3, r1, #31
 80026c6:	1ad2      	subs	r2, r2, r3
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	1aca      	subs	r2, r1, r3
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <saisie_commande+0x230>)
 80026d2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    return pCommandeCourante;
 80026d6:	68fb      	ldr	r3, [r7, #12]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3720      	adds	r7, #32
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200008d0 	.word	0x200008d0
 80026e4:	0800c480 	.word	0x0800c480
 80026e8:	0800c4b8 	.word	0x0800c4b8
 80026ec:	0800c4cc 	.word	0x0800c4cc
 80026f0:	0800c4d4 	.word	0x0800c4d4
 80026f4:	66666667 	.word	0x66666667

080026f8 <shell>:
NVIC_SystemReset();

}

void shell()
{
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	b0c8      	sub	sp, #288	; 0x120
 80026fc:	af02      	add	r7, sp, #8
    char commande[50];
    char *tab_args[50];
    int num_args, i;
    float radio_throttle, radio_dir;

    sh_historique.commande_courante = 0;
 80026fe:	4bc3      	ldr	r3, [pc, #780]	; (8002a0c <shell+0x314>)
 8002700:	2200      	movs	r2, #0
 8002702:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800270c:	e00d      	b.n	800272a <shell+0x32>
        sh_historique.commandes[i][0] = '\0';
 800270e:	4abf      	ldr	r2, [pc, #764]	; (8002a0c <shell+0x314>)
 8002710:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002714:	2132      	movs	r1, #50	; 0x32
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 8002720:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002724:	3301      	adds	r3, #1
 8002726:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800272a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800272e:	2b04      	cmp	r3, #4
 8002730:	dded      	ble.n	800270e <shell+0x16>

    printf("\r\n");
 8002732:	48b7      	ldr	r0, [pc, #732]	; (8002a10 <shell+0x318>)
 8002734:	f006 f8f8 	bl	8008928 <puts>

    do {
        printf("%s", PROMPT);
 8002738:	49b6      	ldr	r1, [pc, #728]	; (8002a14 <shell+0x31c>)
 800273a:	48b7      	ldr	r0, [pc, #732]	; (8002a18 <shell+0x320>)
 800273c:	f006 f86e 	bl	800881c <iprintf>

        // Saisie de la commande
        saisie_commande();
 8002740:	f7ff feb6 	bl	80024b0 <saisie_commande>
        if(sh_historique.commande_courante == 0)
 8002744:	4bb1      	ldr	r3, [pc, #708]	; (8002a0c <shell+0x314>)
 8002746:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800274a:	2b00      	cmp	r3, #0
 800274c:	d106      	bne.n	800275c <shell+0x64>
        	strcpy(commande, sh_historique.commandes[SHELL_MAX_HISTORIQUE-1]);
 800274e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002752:	49b2      	ldr	r1, [pc, #712]	; (8002a1c <shell+0x324>)
 8002754:	4618      	mov	r0, r3
 8002756:	f006 f8ef 	bl	8008938 <strcpy>
 800275a:	e00e      	b.n	800277a <shell+0x82>
        else
        	strcpy(commande, sh_historique.commandes[sh_historique.commande_courante-1]);
 800275c:	4bab      	ldr	r3, [pc, #684]	; (8002a0c <shell+0x314>)
 800275e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002762:	3b01      	subs	r3, #1
 8002764:	2232      	movs	r2, #50	; 0x32
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	4aa8      	ldr	r2, [pc, #672]	; (8002a0c <shell+0x314>)
 800276c:	441a      	add	r2, r3
 800276e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f006 f8df 	bl	8008938 <strcpy>

        printf("\r\n");
 800277a:	48a5      	ldr	r0, [pc, #660]	; (8002a10 <shell+0x318>)
 800277c:	f006 f8d4 	bl	8008928 <puts>

        printf("%s\r\n", commande);
 8002780:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002784:	4619      	mov	r1, r3
 8002786:	48a6      	ldr	r0, [pc, #664]	; (8002a20 <shell+0x328>)
 8002788:	f006 f848 	bl	800881c <iprintf>

        // Interpretation de la commande
        num_args = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        tab_args[num_args] = strtok(commande, " ");
 8002792:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002796:	49a3      	ldr	r1, [pc, #652]	; (8002a24 <shell+0x32c>)
 8002798:	4618      	mov	r0, r3
 800279a:	f006 ff07 	bl	80095ac <strtok>
 800279e:	4601      	mov	r1, r0
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 80027ac:	e00f      	b.n	80027ce <shell+0xd6>
        {
            tab_args[++num_args] = strtok(NULL, " ");
 80027ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027b2:	3301      	adds	r3, #1
 80027b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80027b8:	499a      	ldr	r1, [pc, #616]	; (8002a24 <shell+0x32c>)
 80027ba:	2000      	movs	r0, #0
 80027bc:	f006 fef6 	bl	80095ac <strtok>
 80027c0:	4601      	mov	r1, r0
 80027c2:	f107 0308 	add.w	r3, r7, #8
 80027c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1e7      	bne.n	80027ae <shell+0xb6>
        }

        // Shell
        if(strcmp(tab_args[0], "hw_led") == 0)
 80027de:	f107 0308 	add.w	r3, r7, #8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4990      	ldr	r1, [pc, #576]	; (8002a28 <shell+0x330>)
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd fd12 	bl	8000210 <strcmp>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 80ba 	bne.w	8002968 <shell+0x270>
        {
            // Led
            if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led1")==0))
 80027f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d11a      	bne.n	8002832 <shell+0x13a>
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	498a      	ldr	r1, [pc, #552]	; (8002a2c <shell+0x334>)
 8002804:	4618      	mov	r0, r3
 8002806:	f7fd fd03 	bl	8000210 <strcmp>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d110      	bne.n	8002832 <shell+0x13a>
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	4986      	ldr	r1, [pc, #536]	; (8002a30 <shell+0x338>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fcf9 	bl	8000210 <strcmp>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d106      	bne.n	8002832 <shell+0x13a>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800282a:	4882      	ldr	r0, [pc, #520]	; (8002a34 <shell+0x33c>)
 800282c:	f001 fda8 	bl	8004380 <HAL_GPIO_WritePin>
 8002830:	e264      	b.n	8002cfc <shell+0x604>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led2")==0))
 8002832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002836:	2b03      	cmp	r3, #3
 8002838:	d119      	bne.n	800286e <shell+0x176>
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	497a      	ldr	r1, [pc, #488]	; (8002a2c <shell+0x334>)
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fce4 	bl	8000210 <strcmp>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10f      	bne.n	800286e <shell+0x176>
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4978      	ldr	r1, [pc, #480]	; (8002a38 <shell+0x340>)
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fcda 	bl	8000210 <strcmp>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <shell+0x176>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8002862:	2200      	movs	r2, #0
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	4875      	ldr	r0, [pc, #468]	; (8002a3c <shell+0x344>)
 8002868:	f001 fd8a 	bl	8004380 <HAL_GPIO_WritePin>
 800286c:	e246      	b.n	8002cfc <shell+0x604>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led3")==0))
 800286e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002872:	2b03      	cmp	r3, #3
 8002874:	d119      	bne.n	80028aa <shell+0x1b2>
 8002876:	f107 0308 	add.w	r3, r7, #8
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	496b      	ldr	r1, [pc, #428]	; (8002a2c <shell+0x334>)
 800287e:	4618      	mov	r0, r3
 8002880:	f7fd fcc6 	bl	8000210 <strcmp>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10f      	bne.n	80028aa <shell+0x1b2>
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	496b      	ldr	r1, [pc, #428]	; (8002a40 <shell+0x348>)
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fcbc 	bl	8000210 <strcmp>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <shell+0x1b2>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	4866      	ldr	r0, [pc, #408]	; (8002a3c <shell+0x344>)
 80028a4:	f001 fd6c 	bl	8004380 <HAL_GPIO_WritePin>
 80028a8:	e228      	b.n	8002cfc <shell+0x604>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led1")==0))
 80028aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d11a      	bne.n	80028e8 <shell+0x1f0>
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4962      	ldr	r1, [pc, #392]	; (8002a44 <shell+0x34c>)
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fd fca8 	bl	8000210 <strcmp>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d110      	bne.n	80028e8 <shell+0x1f0>
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4958      	ldr	r1, [pc, #352]	; (8002a30 <shell+0x338>)
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fc9e 	bl	8000210 <strcmp>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <shell+0x1f0>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028e0:	4854      	ldr	r0, [pc, #336]	; (8002a34 <shell+0x33c>)
 80028e2:	f001 fd4d 	bl	8004380 <HAL_GPIO_WritePin>
 80028e6:	e209      	b.n	8002cfc <shell+0x604>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led2")==0))
 80028e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d119      	bne.n	8002924 <shell+0x22c>
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4953      	ldr	r1, [pc, #332]	; (8002a44 <shell+0x34c>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fc89 	bl	8000210 <strcmp>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <shell+0x22c>
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	494b      	ldr	r1, [pc, #300]	; (8002a38 <shell+0x340>)
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fc7f 	bl	8000210 <strcmp>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <shell+0x22c>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8002918:	2201      	movs	r2, #1
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	4847      	ldr	r0, [pc, #284]	; (8002a3c <shell+0x344>)
 800291e:	f001 fd2f 	bl	8004380 <HAL_GPIO_WritePin>
 8002922:	e1eb      	b.n	8002cfc <shell+0x604>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led3")==0))
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002928:	2b03      	cmp	r3, #3
 800292a:	d119      	bne.n	8002960 <shell+0x268>
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4944      	ldr	r1, [pc, #272]	; (8002a44 <shell+0x34c>)
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fc6b 	bl	8000210 <strcmp>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10f      	bne.n	8002960 <shell+0x268>
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	493e      	ldr	r1, [pc, #248]	; (8002a40 <shell+0x348>)
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fc61 	bl	8000210 <strcmp>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <shell+0x268>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8002954:	2201      	movs	r2, #1
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	4838      	ldr	r0, [pc, #224]	; (8002a3c <shell+0x344>)
 800295a:	f001 fd11 	bl	8004380 <HAL_GPIO_WritePin>
 800295e:	e1cd      	b.n	8002cfc <shell+0x604>
            else
                printf("Parametres incorrects. \r\nSyntaxe : hw_led <on/off> <led1/led2/led3>\r\n");
 8002960:	4839      	ldr	r0, [pc, #228]	; (8002a48 <shell+0x350>)
 8002962:	f005 ffe1 	bl	8008928 <puts>
 8002966:	e6e7      	b.n	8002738 <shell+0x40>
        } else
		if(strcmp(tab_args[0], "hw_buttons") == 0)
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4937      	ldr	r1, [pc, #220]	; (8002a4c <shell+0x354>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fc4d 	bl	8000210 <strcmp>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d17b      	bne.n	8002a74 <shell+0x37c>
		{
			// Afiche l'�tat des boutons
			if(num_args==1)
 800297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002980:	2b01      	cmp	r3, #1
 8002982:	d13e      	bne.n	8002a02 <shell+0x30a>
			{
				if(HAL_GPIO_ReadPin(bouton1_GPIO_Port, bouton1_Pin) ==  GPIO_PIN_SET)
 8002984:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002988:	482a      	ldr	r0, [pc, #168]	; (8002a34 <shell+0x33c>)
 800298a:	f001 fce1 	bl	8004350 <HAL_GPIO_ReadPin>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d103      	bne.n	800299c <shell+0x2a4>
					printf("Bouton1 opened.\r\n");
 8002994:	482e      	ldr	r0, [pc, #184]	; (8002a50 <shell+0x358>)
 8002996:	f005 ffc7 	bl	8008928 <puts>
 800299a:	e002      	b.n	80029a2 <shell+0x2aa>
				else
					printf("Bouton1 closed.\r\n");
 800299c:	482d      	ldr	r0, [pc, #180]	; (8002a54 <shell+0x35c>)
 800299e:	f005 ffc3 	bl	8008928 <puts>
				if(HAL_GPIO_ReadPin(bouton2_GPIO_Port, bouton2_Pin) ==  GPIO_PIN_SET)
 80029a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a6:	4823      	ldr	r0, [pc, #140]	; (8002a34 <shell+0x33c>)
 80029a8:	f001 fcd2 	bl	8004350 <HAL_GPIO_ReadPin>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d103      	bne.n	80029ba <shell+0x2c2>
					printf("Bouton2 opened.\r\n");
 80029b2:	4829      	ldr	r0, [pc, #164]	; (8002a58 <shell+0x360>)
 80029b4:	f005 ffb8 	bl	8008928 <puts>
 80029b8:	e002      	b.n	80029c0 <shell+0x2c8>
				else
					printf("Bouton2 closed.\r\n");
 80029ba:	4828      	ldr	r0, [pc, #160]	; (8002a5c <shell+0x364>)
 80029bc:	f005 ffb4 	bl	8008928 <puts>
				if(HAL_GPIO_ReadPin(bouton3_GPIO_Port, bouton3_Pin) ==  GPIO_PIN_SET)
 80029c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029c4:	481b      	ldr	r0, [pc, #108]	; (8002a34 <shell+0x33c>)
 80029c6:	f001 fcc3 	bl	8004350 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d103      	bne.n	80029d8 <shell+0x2e0>
					printf("Bouton3 opened.\r\n");
 80029d0:	4823      	ldr	r0, [pc, #140]	; (8002a60 <shell+0x368>)
 80029d2:	f005 ffa9 	bl	8008928 <puts>
 80029d6:	e002      	b.n	80029de <shell+0x2e6>
				else
					printf("Bouton3 closed.\r\n");
 80029d8:	4822      	ldr	r0, [pc, #136]	; (8002a64 <shell+0x36c>)
 80029da:	f005 ffa5 	bl	8008928 <puts>
				if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin) ==  GPIO_PIN_SET)
 80029de:	2110      	movs	r1, #16
 80029e0:	4816      	ldr	r0, [pc, #88]	; (8002a3c <shell+0x344>)
 80029e2:	f001 fcb5 	bl	8004350 <HAL_GPIO_ReadPin>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d103      	bne.n	80029f4 <shell+0x2fc>
					printf("BoutonExt1 opened.\r\n");
 80029ec:	481e      	ldr	r0, [pc, #120]	; (8002a68 <shell+0x370>)
 80029ee:	f005 ff9b 	bl	8008928 <puts>
 80029f2:	e002      	b.n	80029fa <shell+0x302>
				else
					printf("BoutonExt1 closed.\r\n");
 80029f4:	481d      	ldr	r0, [pc, #116]	; (8002a6c <shell+0x374>)
 80029f6:	f005 ff97 	bl	8008928 <puts>
				printf("\r\n");
 80029fa:	4805      	ldr	r0, [pc, #20]	; (8002a10 <shell+0x318>)
 80029fc:	f005 ff94 	bl	8008928 <puts>
 8002a00:	e69a      	b.n	8002738 <shell+0x40>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : hw_buttons\r\n");
 8002a02:	481b      	ldr	r0, [pc, #108]	; (8002a70 <shell+0x378>)
 8002a04:	f005 ff90 	bl	8008928 <puts>
 8002a08:	e696      	b.n	8002738 <shell+0x40>
 8002a0a:	bf00      	nop
 8002a0c:	200008d0 	.word	0x200008d0
 8002a10:	0800c520 	.word	0x0800c520
 8002a14:	0800c4b8 	.word	0x0800c4b8
 8002a18:	0800c524 	.word	0x0800c524
 8002a1c:	20000998 	.word	0x20000998
 8002a20:	0800c528 	.word	0x0800c528
 8002a24:	0800c530 	.word	0x0800c530
 8002a28:	0800c534 	.word	0x0800c534
 8002a2c:	0800c53c 	.word	0x0800c53c
 8002a30:	0800c540 	.word	0x0800c540
 8002a34:	40021800 	.word	0x40021800
 8002a38:	0800c548 	.word	0x0800c548
 8002a3c:	40020c00 	.word	0x40020c00
 8002a40:	0800c550 	.word	0x0800c550
 8002a44:	0800c558 	.word	0x0800c558
 8002a48:	0800c55c 	.word	0x0800c55c
 8002a4c:	0800c5a4 	.word	0x0800c5a4
 8002a50:	0800c5b0 	.word	0x0800c5b0
 8002a54:	0800c5c4 	.word	0x0800c5c4
 8002a58:	0800c5d8 	.word	0x0800c5d8
 8002a5c:	0800c5ec 	.word	0x0800c5ec
 8002a60:	0800c600 	.word	0x0800c600
 8002a64:	0800c614 	.word	0x0800c614
 8002a68:	0800c628 	.word	0x0800c628
 8002a6c:	0800c63c 	.word	0x0800c63c
 8002a70:	0800c650 	.word	0x0800c650
//            	paramsModify();
//            }
//            else
//                printf("Parametres incorrects. \r\nSyntaxe : params_modify\r\n");
//        } else
		if(strcmp(tab_args[0], "radio_get") == 0)
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	49a1      	ldr	r1, [pc, #644]	; (8002d00 <shell+0x608>)
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fbc7 	bl	8000210 <strcmp>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d177      	bne.n	8002b78 <shell+0x480>
		{
			if(num_args==1)
 8002a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d128      	bne.n	8002ae2 <shell+0x3ea>
			{
				radio_dir_get(&radio_dir);
 8002a90:	463b      	mov	r3, r7
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fbc2 	bl	800221c <radio_dir_get>
				radio_throttle_get(&radio_throttle);
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fc14 	bl	80022c8 <radio_throttle_get>
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8002aa0:	4898      	ldr	r0, [pc, #608]	; (8002d04 <shell+0x60c>)
 8002aa2:	f005 ff41 	bl	8008928 <puts>
				radio_dir = 0.0;
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
				printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd74 	bl	80005a8 <__aeabi_f2d>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	460d      	mov	r5, r1
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd6d 	bl	80005a8 <__aeabi_f2d>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ad6:	4622      	mov	r2, r4
 8002ad8:	462b      	mov	r3, r5
 8002ada:	488b      	ldr	r0, [pc, #556]	; (8002d08 <shell+0x610>)
 8002adc:	f005 fe9e 	bl	800881c <iprintf>
 8002ae0:	e62a      	b.n	8002738 <shell+0x40>
			}
			else if(num_args==2)
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d142      	bne.n	8002b70 <shell+0x478>
			{
				int nb_lectures = atoi(tab_args[1]);
 8002aea:	f107 0308 	add.w	r3, r7, #8
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f005 f9e1 	bl	8007eb8 <atoi>
 8002af6:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8002afa:	4882      	ldr	r0, [pc, #520]	; (8002d04 <shell+0x60c>)
 8002afc:	f005 ff14 	bl	8008928 <puts>
				radio_dir = 0.0;
 8002b00:	463b      	mov	r3, r7
 8002b02:	f04f 0200 	mov.w	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
				for(i=0;i<nb_lectures;i++)
 8002b10:	2300      	movs	r3, #0
 8002b12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002b16:	e024      	b.n	8002b62 <shell+0x46a>
				{
					radio_dir_get(&radio_dir);
 8002b18:	463b      	mov	r3, r7
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fb7e 	bl	800221c <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fbd0 	bl	80022c8 <radio_throttle_get>
					printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 8002b28:	463b      	mov	r3, r7
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fd3b 	bl	80005a8 <__aeabi_f2d>
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd34 	bl	80005a8 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	e9cd 2300 	strd	r2, r3, [sp]
 8002b48:	4622      	mov	r2, r4
 8002b4a:	462b      	mov	r3, r5
 8002b4c:	486e      	ldr	r0, [pc, #440]	; (8002d08 <shell+0x610>)
 8002b4e:	f005 fe65 	bl	800881c <iprintf>

					// Rafraichissement de la radio toutes les 16 ms env.
					HAL_Delay(16);
 8002b52:	2010      	movs	r0, #16
 8002b54:	f000 fe92 	bl	800387c <HAL_Delay>
				for(i=0;i<nb_lectures;i++)
 8002b58:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002b62:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbd4      	blt.n	8002b18 <shell+0x420>
 8002b6e:	e5e3      	b.n	8002738 <shell+0x40>
				}
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : radio_get <nb_lectures=1>\r\n");
 8002b70:	4866      	ldr	r0, [pc, #408]	; (8002d0c <shell+0x614>)
 8002b72:	f005 fed9 	bl	8008928 <puts>
 8002b76:	e5df      	b.n	8002738 <shell+0x40>
		} else
		if(strcmp(tab_args[0], "vehicule_throttle_set") == 0)
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4964      	ldr	r1, [pc, #400]	; (8002d10 <shell+0x618>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fb45 	bl	8000210 <strcmp>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d12f      	bne.n	8002bec <shell+0x4f4>
		{
			if(num_args==2)
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d127      	bne.n	8002be4 <shell+0x4ec>
			{
				float valeur = atof(tab_args[1]);
 8002b94:	f107 0308 	add.w	r3, r7, #8
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 f989 	bl	8007eb2 <atof>
 8002ba0:	ec53 2b10 	vmov	r2, r3, d0
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fe f84e 	bl	8000c48 <__aeabi_d2f>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				if((valeur >= -10.0) && (valeur <= 10.0))
 8002bb2:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8002bb6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc2:	f2c0 809b 	blt.w	8002cfc <shell+0x604>
 8002bc6:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8002bca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	f200 8091 	bhi.w	8002cfc <shell+0x604>
					vehicule_throttle_set(valeur);
 8002bda:	ed97 0a42 	vldr	s0, [r7, #264]	; 0x108
 8002bde:	f7ff fc0f 	bl	8002400 <vehicule_throttle_set>
 8002be2:	e5a9      	b.n	8002738 <shell+0x40>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 8002be4:	484b      	ldr	r0, [pc, #300]	; (8002d14 <shell+0x61c>)
 8002be6:	f005 fe9f 	bl	8008928 <puts>
 8002bea:	e5a5      	b.n	8002738 <shell+0x40>
		} else
		if(strcmp(tab_args[0], "vehicule_dir_set") == 0)
 8002bec:	f107 0308 	add.w	r3, r7, #8
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4949      	ldr	r1, [pc, #292]	; (8002d18 <shell+0x620>)
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fb0b 	bl	8000210 <strcmp>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d136      	bne.n	8002c6e <shell+0x576>
		{
			if(num_args==2)
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d12e      	bne.n	8002c66 <shell+0x56e>
			{
				float valeur = atof(tab_args[1]);
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f005 f94f 	bl	8007eb2 <atof>
 8002c14:	ec53 2b10 	vmov	r2, r3, d0
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fe f814 	bl	8000c48 <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
				printf("%f\r\n", valeur);
 8002c26:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8002c2a:	f7fd fcbd 	bl	80005a8 <__aeabi_f2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	483a      	ldr	r0, [pc, #232]	; (8002d1c <shell+0x624>)
 8002c34:	f005 fdf2 	bl	800881c <iprintf>

				if((valeur >= -45.0) && (valeur <= 45.0))
 8002c38:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8002c3c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002d20 <shell+0x628>
 8002c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	db58      	blt.n	8002cfc <shell+0x604>
 8002c4a:	edd7 7a43 	vldr	s15, [r7, #268]	; 0x10c
 8002c4e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002d24 <shell+0x62c>
 8002c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5a:	d84f      	bhi.n	8002cfc <shell+0x604>
					vehicule_dir_set(valeur);
 8002c5c:	ed97 0a43 	vldr	s0, [r7, #268]	; 0x10c
 8002c60:	f7ff fb88 	bl	8002374 <vehicule_dir_set>
 8002c64:	e568      	b.n	8002738 <shell+0x40>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_dir_set <-45.0 ... 45.0>\r\n");
 8002c66:	4830      	ldr	r0, [pc, #192]	; (8002d28 <shell+0x630>)
 8002c68:	f005 fe5e 	bl	8008928 <puts>
 8002c6c:	e564      	b.n	8002738 <shell+0x40>
//				printf(".\r\n");
//			}
//			else
//				printf("Parametres incorrects. \r\nSyntaxe : gyro_variance\r\n");
//		} else
        if(strcmp(tab_args[0], "reset") == 0)
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	492d      	ldr	r1, [pc, #180]	; (8002d2c <shell+0x634>)
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd faca 	bl	8000210 <strcmp>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <shell+0x58e>
        {
            // Reset
            NVIC_SystemReset();
 8002c82:	f7ff fbff 	bl	8002484 <__NVIC_SystemReset>
        } else
        if(strcmp(tab_args[0], "help") == 0)
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4928      	ldr	r1, [pc, #160]	; (8002d30 <shell+0x638>)
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fabe 	bl	8000210 <strcmp>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d12d      	bne.n	8002cf6 <shell+0x5fe>
        {
            // Help
            printf("Liste des commandes :\r\n");
 8002c9a:	4826      	ldr	r0, [pc, #152]	; (8002d34 <shell+0x63c>)
 8002c9c:	f005 fe44 	bl	8008928 <puts>
            printf("- hw_led <on/off> <led0/led1/led2/led3>\r\n");
 8002ca0:	4825      	ldr	r0, [pc, #148]	; (8002d38 <shell+0x640>)
 8002ca2:	f005 fe41 	bl	8008928 <puts>
            printf("         permet d'allumer ou d'eteindre l'une des 4 leds.\r\n");
 8002ca6:	4825      	ldr	r0, [pc, #148]	; (8002d3c <shell+0x644>)
 8002ca8:	f005 fe3e 	bl	8008928 <puts>
            printf("- hw_buttons\r\n");
 8002cac:	4824      	ldr	r0, [pc, #144]	; (8002d40 <shell+0x648>)
 8002cae:	f005 fe3b 	bl	8008928 <puts>
            printf("         permet d'afficher l'etat des boutons.\r\n");
 8002cb2:	4824      	ldr	r0, [pc, #144]	; (8002d44 <shell+0x64c>)
 8002cb4:	f005 fe38 	bl	8008928 <puts>
			printf("- params_restore\r\n");
 8002cb8:	4823      	ldr	r0, [pc, #140]	; (8002d48 <shell+0x650>)
 8002cba:	f005 fe35 	bl	8008928 <puts>
            printf("         permet de charger les parametres depuis la Flash Interne.\r\n");
 8002cbe:	4823      	ldr	r0, [pc, #140]	; (8002d4c <shell+0x654>)
 8002cc0:	f005 fe32 	bl	8008928 <puts>
            printf("- params_show\r\n");
 8002cc4:	4822      	ldr	r0, [pc, #136]	; (8002d50 <shell+0x658>)
 8002cc6:	f005 fe2f 	bl	8008928 <puts>
            printf("         permet d'afficher les parametres courants\r\n");
 8002cca:	4822      	ldr	r0, [pc, #136]	; (8002d54 <shell+0x65c>)
 8002ccc:	f005 fe2c 	bl	8008928 <puts>
            printf("- params_modify\r\n");
 8002cd0:	4821      	ldr	r0, [pc, #132]	; (8002d58 <shell+0x660>)
 8002cd2:	f005 fe29 	bl	8008928 <puts>
            printf("         permet de modifier les parametres courants\r\n");
 8002cd6:	4821      	ldr	r0, [pc, #132]	; (8002d5c <shell+0x664>)
 8002cd8:	f005 fe26 	bl	8008928 <puts>
            printf("- reset\r\n");
 8002cdc:	4820      	ldr	r0, [pc, #128]	; (8002d60 <shell+0x668>)
 8002cde:	f005 fe23 	bl	8008928 <puts>
            printf("         permet de reseter le robot.\r\n");
 8002ce2:	4820      	ldr	r0, [pc, #128]	; (8002d64 <shell+0x66c>)
 8002ce4:	f005 fe20 	bl	8008928 <puts>
            printf("- version\r\n");
 8002ce8:	481f      	ldr	r0, [pc, #124]	; (8002d68 <shell+0x670>)
 8002cea:	f005 fe1d 	bl	8008928 <puts>
            printf("         permet d'obtenir la version logicielle.\r\n");
 8002cee:	481f      	ldr	r0, [pc, #124]	; (8002d6c <shell+0x674>)
 8002cf0:	f005 fe1a 	bl	8008928 <puts>
 8002cf4:	e520      	b.n	8002738 <shell+0x40>
        } else
        {
            printf("Commande inconnue !\r\n");
 8002cf6:	481e      	ldr	r0, [pc, #120]	; (8002d70 <shell+0x678>)
 8002cf8:	f005 fe16 	bl	8008928 <puts>
        printf("%s", PROMPT);
 8002cfc:	e51c      	b.n	8002738 <shell+0x40>
 8002cfe:	bf00      	nop
 8002d00:	0800c680 	.word	0x0800c680
 8002d04:	0800c68c 	.word	0x0800c68c
 8002d08:	0800c6b8 	.word	0x0800c6b8
 8002d0c:	0800c6c8 	.word	0x0800c6c8
 8002d10:	0800c708 	.word	0x0800c708
 8002d14:	0800c720 	.word	0x0800c720
 8002d18:	0800c76c 	.word	0x0800c76c
 8002d1c:	0800c780 	.word	0x0800c780
 8002d20:	c2340000 	.word	0xc2340000
 8002d24:	42340000 	.word	0x42340000
 8002d28:	0800c788 	.word	0x0800c788
 8002d2c:	0800c7d0 	.word	0x0800c7d0
 8002d30:	0800c7d8 	.word	0x0800c7d8
 8002d34:	0800c7e0 	.word	0x0800c7e0
 8002d38:	0800c7f8 	.word	0x0800c7f8
 8002d3c:	0800c824 	.word	0x0800c824
 8002d40:	0800c860 	.word	0x0800c860
 8002d44:	0800c870 	.word	0x0800c870
 8002d48:	0800c8a0 	.word	0x0800c8a0
 8002d4c:	0800c8b4 	.word	0x0800c8b4
 8002d50:	0800c8f8 	.word	0x0800c8f8
 8002d54:	0800c908 	.word	0x0800c908
 8002d58:	0800c93c 	.word	0x0800c93c
 8002d5c:	0800c950 	.word	0x0800c950
 8002d60:	0800c988 	.word	0x0800c988
 8002d64:	0800c994 	.word	0x0800c994
 8002d68:	0800c9bc 	.word	0x0800c9bc
 8002d6c:	0800c9c8 	.word	0x0800c9c8
 8002d70:	0800c9fc 	.word	0x0800c9fc

08002d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HAL_MspInit+0x44>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <HAL_MspInit+0x44>)
 8002d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_MspInit+0x44>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	607b      	str	r3, [r7, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HAL_MspInit+0x44>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <HAL_MspInit+0x44>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_MspInit+0x44>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800

08002dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08e      	sub	sp, #56	; 0x38
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	; (8002f08 <HAL_ADC_MspInit+0x14c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d13c      	bne.n	8002e58 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dde:	4b4b      	ldr	r3, [pc, #300]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	4a4a      	ldr	r2, [pc, #296]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dea:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	623b      	str	r3, [r7, #32]
 8002df4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	4b45      	ldr	r3, [pc, #276]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a44      	ldr	r2, [pc, #272]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a3e      	ldr	r2, [pc, #248]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b3c      	ldr	r3, [pc, #240]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
 8002e24:	69bb      	ldr	r3, [r7, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = qtr_ch8_Pin|qtr_ch7_Pin|qtr_ch6_Pin|qtr_ch5_Pin
 8002e26:	233f      	movs	r3, #63	; 0x3f
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
                          |qtr_ch4_Pin|qtr_ch3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e36:	4619      	mov	r1, r3
 8002e38:	4835      	ldr	r0, [pc, #212]	; (8002f10 <HAL_ADC_MspInit+0x154>)
 8002e3a:	f001 f8dd 	bl	8003ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = qtr_ch2_Pin|qtr_ch1_Pin;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e42:	2303      	movs	r3, #3
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4830      	ldr	r0, [pc, #192]	; (8002f14 <HAL_ADC_MspInit+0x158>)
 8002e52:	f001 f8d1 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e56:	e053      	b.n	8002f00 <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2e      	ldr	r2, [pc, #184]	; (8002f18 <HAL_ADC_MspInit+0x15c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d124      	bne.n	8002eac <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002e62:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6e:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Vbatt_Pin|Vesc_Pin;
 8002e92:	2390      	movs	r3, #144	; 0x90
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e96:	2303      	movs	r3, #3
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	481d      	ldr	r0, [pc, #116]	; (8002f1c <HAL_ADC_MspInit+0x160>)
 8002ea6:	f001 f8a7 	bl	8003ff8 <HAL_GPIO_Init>
}
 8002eaa:	e029      	b.n	8002f00 <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <HAL_ADC_MspInit+0x164>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d124      	bne.n	8002f00 <HAL_ADC_MspInit+0x144>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002ebc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002ed4:	f043 0320 	orr.w	r3, r3, #32
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_ADC_MspInit+0x150>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	60bb      	str	r3, [r7, #8]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = qtr_ch16_Pin|qtr_ch15_Pin|qtr_ch14_Pin|qtr_ch13_Pin
 8002ee6:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002eec:	2303      	movs	r3, #3
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480a      	ldr	r0, [pc, #40]	; (8002f24 <HAL_ADC_MspInit+0x168>)
 8002efc:	f001 f87c 	bl	8003ff8 <HAL_GPIO_Init>
}
 8002f00:	bf00      	nop
 8002f02:	3738      	adds	r7, #56	; 0x38
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40012000 	.word	0x40012000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40012100 	.word	0x40012100
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40012200 	.word	0x40012200
 8002f24:	40021400 	.word	0x40021400

08002f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08a      	sub	sp, #40	; 0x28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
 8002f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a17      	ldr	r2, [pc, #92]	; (8002fa4 <HAL_I2C_MspInit+0x7c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d127      	bne.n	8002f9a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a16      	ldr	r2, [pc, #88]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f62:	23c0      	movs	r3, #192	; 0xc0
 8002f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f66:	2312      	movs	r3, #18
 8002f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f72:	2304      	movs	r3, #4
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	480b      	ldr	r0, [pc, #44]	; (8002fac <HAL_I2C_MspInit+0x84>)
 8002f7e:	f001 f83b 	bl	8003ff8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a08      	ldr	r2, [pc, #32]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_I2C_MspInit+0x80>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40005400 	.word	0x40005400
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020400 	.word	0x40020400

08002fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b092      	sub	sp, #72	; 0x48
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a77      	ldr	r2, [pc, #476]	; (80031ac <HAL_TIM_Base_MspInit+0x1fc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10c      	bne.n	8002fec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fd2:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a76      	ldr	r2, [pc, #472]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b74      	ldr	r3, [pc, #464]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002fea:	e0da      	b.n	80031a2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM2)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d130      	bne.n	8003058 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ff6:	4b6e      	ldr	r3, [pc, #440]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a6d      	ldr	r2, [pc, #436]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b6b      	ldr	r3, [pc, #428]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300e:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a67      	ldr	r2, [pc, #412]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b65      	ldr	r3, [pc, #404]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = SpeedIn_Pin;
 8003026:	2320      	movs	r3, #32
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003036:	2301      	movs	r3, #1
 8003038:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedIn_GPIO_Port, &GPIO_InitStruct);
 800303a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800303e:	4619      	mov	r1, r3
 8003040:	485c      	ldr	r0, [pc, #368]	; (80031b4 <HAL_TIM_Base_MspInit+0x204>)
 8003042:	f000 ffd9 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	201c      	movs	r0, #28
 800304c:	f000 ff9d 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003050:	201c      	movs	r0, #28
 8003052:	f000 ffb6 	bl	8003fc2 <HAL_NVIC_EnableIRQ>
}
 8003056:	e0a4      	b.n	80031a2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM3)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a56      	ldr	r2, [pc, #344]	; (80031b8 <HAL_TIM_Base_MspInit+0x208>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d130      	bne.n	80030c4 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003062:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b4d      	ldr	r3, [pc, #308]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b4a      	ldr	r3, [pc, #296]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = DirIn_Pin;
 8003092:	2340      	movs	r3, #64	; 0x40
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030a2:	2302      	movs	r3, #2
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DirIn_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030aa:	4619      	mov	r1, r3
 80030ac:	4841      	ldr	r0, [pc, #260]	; (80031b4 <HAL_TIM_Base_MspInit+0x204>)
 80030ae:	f000 ffa3 	bl	8003ff8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030b2:	2200      	movs	r2, #0
 80030b4:	2100      	movs	r1, #0
 80030b6:	201d      	movs	r0, #29
 80030b8:	f000 ff67 	bl	8003f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030bc:	201d      	movs	r0, #29
 80030be:	f000 ff80 	bl	8003fc2 <HAL_NVIC_EnableIRQ>
}
 80030c2:	e06e      	b.n	80031a2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM4)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a3c      	ldr	r2, [pc, #240]	; (80031bc <HAL_TIM_Base_MspInit+0x20c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d129      	bne.n	8003122 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a37      	ldr	r2, [pc, #220]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030e6:	4b32      	ldr	r3, [pc, #200]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	4a31      	ldr	r2, [pc, #196]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 80030ec:	f043 0308 	orr.w	r3, r3, #8
 80030f0:	6313      	str	r3, [r2, #48]	; 0x30
 80030f2:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SpareIn_Pin;
 80030fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310c:	2300      	movs	r3, #0
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003110:	2302      	movs	r3, #2
 8003112:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpareIn_GPIO_Port, &GPIO_InitStruct);
 8003114:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003118:	4619      	mov	r1, r3
 800311a:	4829      	ldr	r0, [pc, #164]	; (80031c0 <HAL_TIM_Base_MspInit+0x210>)
 800311c:	f000 ff6c 	bl	8003ff8 <HAL_GPIO_Init>
}
 8003120:	e03f      	b.n	80031a2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <HAL_TIM_Base_MspInit+0x214>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10c      	bne.n	8003146 <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800312e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003132:	f043 0302 	orr.w	r3, r3, #2
 8003136:	6453      	str	r3, [r2, #68]	; 0x44
 8003138:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800313a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	697b      	ldr	r3, [r7, #20]
}
 8003144:	e02d      	b.n	80031a2 <HAL_TIM_Base_MspInit+0x1f2>
  else if(htim_base->Instance==TIM12)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_TIM_Base_MspInit+0x218>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d128      	bne.n	80031a2 <HAL_TIM_Base_MspInit+0x1f2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800315a:	6413      	str	r3, [r2, #64]	; 0x40
 800315c:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 800316e:	f043 0302 	orr.w	r3, r3, #2
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_TIM_Base_MspInit+0x200>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SpeedSensor_Pin;
 8003180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003184:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003186:	2302      	movs	r3, #2
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318a:	2300      	movs	r3, #0
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2300      	movs	r3, #0
 8003190:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003192:	2309      	movs	r3, #9
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedSensor_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800319a:	4619      	mov	r1, r3
 800319c:	480b      	ldr	r0, [pc, #44]	; (80031cc <HAL_TIM_Base_MspInit+0x21c>)
 800319e:	f000 ff2b 	bl	8003ff8 <HAL_GPIO_Init>
}
 80031a2:	bf00      	nop
 80031a4:	3748      	adds	r7, #72	; 0x48
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40020000 	.word	0x40020000
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800
 80031c0:	40020c00 	.word	0x40020c00
 80031c4:	40010400 	.word	0x40010400
 80031c8:	40001800 	.word	0x40001800
 80031cc:	40020400 	.word	0x40020400

080031d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a11      	ldr	r2, [pc, #68]	; (8003234 <HAL_TIM_MspPostInit+0x64>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d11c      	bne.n	800322c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_TIM_MspPostInit+0x68>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <HAL_TIM_MspPostInit+0x68>)
 80031f8:	f043 0310 	orr.w	r3, r3, #16
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_TIM_MspPostInit+0x68>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SpeedOut_Pin|DirOut_Pin|SpareOut_Pin;
 800320a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800320e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003210:	2302      	movs	r3, #2
 8003212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800321c:	2301      	movs	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	4619      	mov	r1, r3
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <HAL_TIM_MspPostInit+0x6c>)
 8003228:	f000 fee6 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800322c:	bf00      	nop
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40010000 	.word	0x40010000
 8003238:	40023800 	.word	0x40023800
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b096      	sub	sp, #88	; 0x58
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a98      	ldr	r2, [pc, #608]	; (80034c0 <HAL_UART_MspInit+0x280>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d128      	bne.n	80032b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003262:	4b98      	ldr	r3, [pc, #608]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a97      	ldr	r2, [pc, #604]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b95      	ldr	r3, [pc, #596]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003276:	643b      	str	r3, [r7, #64]	; 0x40
 8003278:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	4b92      	ldr	r3, [pc, #584]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a91      	ldr	r2, [pc, #580]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b8f      	ldr	r3, [pc, #572]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = lid1_txd_Pin|lid1_rxd_Pin;
 8003292:	2303      	movs	r3, #3
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329e:	2303      	movs	r3, #3
 80032a0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80032a2:	2308      	movs	r3, #8
 80032a4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032aa:	4619      	mov	r1, r3
 80032ac:	4886      	ldr	r0, [pc, #536]	; (80034c8 <HAL_UART_MspInit+0x288>)
 80032ae:	f000 fea3 	bl	8003ff8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032b2:	e149      	b.n	8003548 <HAL_UART_MspInit+0x308>
  else if(huart->Instance==UART5)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a84      	ldr	r2, [pc, #528]	; (80034cc <HAL_UART_MspInit+0x28c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d145      	bne.n	800334a <HAL_UART_MspInit+0x10a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80032be:	4b81      	ldr	r3, [pc, #516]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a80      	ldr	r2, [pc, #512]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b7e      	ldr	r3, [pc, #504]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d6:	4b7b      	ldr	r3, [pc, #492]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b78      	ldr	r3, [pc, #480]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ee:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a74      	ldr	r2, [pc, #464]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032f4:	f043 0308 	orr.w	r3, r3, #8
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b72      	ldr	r3, [pc, #456]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
 8003304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = lid5_txd_Pin;
 8003306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003318:	2308      	movs	r3, #8
 800331a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_txd_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003320:	4619      	mov	r1, r3
 8003322:	486b      	ldr	r0, [pc, #428]	; (80034d0 <HAL_UART_MspInit+0x290>)
 8003324:	f000 fe68 	bl	8003ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = lid5_rxd_Pin;
 8003328:	2304      	movs	r3, #4
 800332a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003338:	2308      	movs	r3, #8
 800333a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_rxd_GPIO_Port, &GPIO_InitStruct);
 800333c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003340:	4619      	mov	r1, r3
 8003342:	4864      	ldr	r0, [pc, #400]	; (80034d4 <HAL_UART_MspInit+0x294>)
 8003344:	f000 fe58 	bl	8003ff8 <HAL_GPIO_Init>
}
 8003348:	e0fe      	b.n	8003548 <HAL_UART_MspInit+0x308>
  else if(huart->Instance==UART7)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a62      	ldr	r2, [pc, #392]	; (80034d8 <HAL_UART_MspInit+0x298>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d129      	bne.n	80033a8 <HAL_UART_MspInit+0x168>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003354:	4b5b      	ldr	r3, [pc, #364]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	4a5a      	ldr	r2, [pc, #360]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800335a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800335e:	6413      	str	r3, [r2, #64]	; 0x40
 8003360:	4b58      	ldr	r3, [pc, #352]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800336c:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4a54      	ldr	r2, [pc, #336]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003372:	f043 0310 	orr.w	r3, r3, #16
 8003376:	6313      	str	r3, [r2, #48]	; 0x30
 8003378:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	62bb      	str	r3, [r7, #40]	; 0x28
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = lid2_rxd_Pin|lid2_txd_Pin;
 8003384:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003388:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800338a:	2302      	movs	r3, #2
 800338c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338e:	2300      	movs	r3, #0
 8003390:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003392:	2303      	movs	r3, #3
 8003394:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003396:	2308      	movs	r3, #8
 8003398:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800339a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800339e:	4619      	mov	r1, r3
 80033a0:	484e      	ldr	r0, [pc, #312]	; (80034dc <HAL_UART_MspInit+0x29c>)
 80033a2:	f000 fe29 	bl	8003ff8 <HAL_GPIO_Init>
}
 80033a6:	e0cf      	b.n	8003548 <HAL_UART_MspInit+0x308>
  else if(huart->Instance==UART8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a4c      	ldr	r2, [pc, #304]	; (80034e0 <HAL_UART_MspInit+0x2a0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d128      	bne.n	8003404 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_UART8_CLK_ENABLE();
 80033b2:	4b44      	ldr	r3, [pc, #272]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a43      	ldr	r2, [pc, #268]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80033b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b41      	ldr	r3, [pc, #260]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ca:	4b3e      	ldr	r3, [pc, #248]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a3d      	ldr	r2, [pc, #244]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80033d0:	f043 0310 	orr.w	r3, r3, #16
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_UART_MspInit+0x284>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = lid6_rxd_Pin|lid6_txd_Pin;
 80033e2:	2303      	movs	r3, #3
 80033e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ee:	2303      	movs	r3, #3
 80033f0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80033f2:	2308      	movs	r3, #8
 80033f4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033fa:	4619      	mov	r1, r3
 80033fc:	4837      	ldr	r0, [pc, #220]	; (80034dc <HAL_UART_MspInit+0x29c>)
 80033fe:	f000 fdfb 	bl	8003ff8 <HAL_GPIO_Init>
}
 8003402:	e0a1      	b.n	8003548 <HAL_UART_MspInit+0x308>
  else if(huart->Instance==USART1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a36      	ldr	r2, [pc, #216]	; (80034e4 <HAL_UART_MspInit+0x2a4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d129      	bne.n	8003462 <HAL_UART_MspInit+0x222>
    __HAL_RCC_USART1_CLK_ENABLE();
 800340e:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003414:	f043 0310 	orr.w	r3, r3, #16
 8003418:	6453      	str	r3, [r2, #68]	; 0x44
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	61fb      	str	r3, [r7, #28]
 8003424:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003426:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6313      	str	r3, [r2, #48]	; 0x30
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = lid4_txd_Pin|lid4_rxd_Pin;
 800343e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003442:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344c:	2303      	movs	r3, #3
 800344e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003450:	2307      	movs	r3, #7
 8003452:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003458:	4619      	mov	r1, r3
 800345a:	481b      	ldr	r0, [pc, #108]	; (80034c8 <HAL_UART_MspInit+0x288>)
 800345c:	f000 fdcc 	bl	8003ff8 <HAL_GPIO_Init>
}
 8003460:	e072      	b.n	8003548 <HAL_UART_MspInit+0x308>
  else if(huart->Instance==USART2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_UART_MspInit+0x2a8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d13f      	bne.n	80034ec <HAL_UART_MspInit+0x2ac>
    __HAL_RCC_USART2_CLK_ENABLE();
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003476:	6413      	str	r3, [r2, #64]	; 0x40
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_UART_MspInit+0x284>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6313      	str	r3, [r2, #48]	; 0x30
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_UART_MspInit+0x284>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = tele_txd_Pin|tele_rxd_Pin;
 800349c:	230c      	movs	r3, #12
 800349e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034ac:	2307      	movs	r3, #7
 80034ae:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80034b4:	4619      	mov	r1, r3
 80034b6:	4804      	ldr	r0, [pc, #16]	; (80034c8 <HAL_UART_MspInit+0x288>)
 80034b8:	f000 fd9e 	bl	8003ff8 <HAL_GPIO_Init>
}
 80034bc:	e044      	b.n	8003548 <HAL_UART_MspInit+0x308>
 80034be:	bf00      	nop
 80034c0:	40004c00 	.word	0x40004c00
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40020000 	.word	0x40020000
 80034cc:	40005000 	.word	0x40005000
 80034d0:	40020800 	.word	0x40020800
 80034d4:	40020c00 	.word	0x40020c00
 80034d8:	40007800 	.word	0x40007800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40007c00 	.word	0x40007c00
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a17      	ldr	r2, [pc, #92]	; (8003550 <HAL_UART_MspInit+0x310>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d128      	bne.n	8003548 <HAL_UART_MspInit+0x308>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034f6:	4b17      	ldr	r3, [pc, #92]	; (8003554 <HAL_UART_MspInit+0x314>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_UART_MspInit+0x314>)
 80034fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b14      	ldr	r3, [pc, #80]	; (8003554 <HAL_UART_MspInit+0x314>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_UART_MspInit+0x314>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a10      	ldr	r2, [pc, #64]	; (8003554 <HAL_UART_MspInit+0x314>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <HAL_UART_MspInit+0x314>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	60bb      	str	r3, [r7, #8]
 8003524:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = lid3_txd_Pin|lid3_rxd_Pin;
 8003526:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800352a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003538:	2307      	movs	r3, #7
 800353a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003540:	4619      	mov	r1, r3
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <HAL_UART_MspInit+0x318>)
 8003544:	f000 fd58 	bl	8003ff8 <HAL_GPIO_Init>
}
 8003548:	bf00      	nop
 800354a:	3758      	adds	r7, #88	; 0x58
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40004800 	.word	0x40004800
 8003554:	40023800 	.word	0x40023800
 8003558:	40020400 	.word	0x40020400

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <NMI_Handler+0x4>

08003562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <HardFault_Handler+0x4>

08003568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <MemManage_Handler+0x4>

0800356e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <BusFault_Handler+0x4>

08003574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <UsageFault_Handler+0x4>

0800357a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a8:	f000 f948 	bl	800383c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <TIM2_IRQHandler+0x10>)
 80035b6:	f002 fc3d 	bl	8005e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200007b4 	.word	0x200007b4

080035c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <TIM3_IRQHandler+0x10>)
 80035ca:	f002 fc33 	bl	8005e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000047c 	.word	0x2000047c

080035d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
	return 1;
 80035dc:	2301      	movs	r3, #1
}
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <_kill>:

int _kill(int pid, int sig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035f2:	f004 fc65 	bl	8007ec0 <__errno>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2216      	movs	r2, #22
 80035fa:	601a      	str	r2, [r3, #0]
	return -1;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <_exit>:

void _exit (int status)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ffe7 	bl	80035e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800361a:	e7fe      	b.n	800361a <_exit+0x12>

0800361c <_read>:
}

// Modif Nicolas
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
	*ptr = __io_getchar();
 8003628:	f7fd fd26 	bl	8001078 <__io_getchar>
 800362c:	4603      	mov	r3, r0
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	701a      	strb	r2, [r3, #0]

	return 1;
 8003634:	2301      	movs	r3, #1
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_write>:
//
//return len;
//}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b086      	sub	sp, #24
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e009      	b.n	8003664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	1c5a      	adds	r2, r3, #1
 8003654:	60ba      	str	r2, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd fcf7 	bl	800104c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	dbf1      	blt.n	8003650 <_write+0x12>
	}
	return len;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_close>:

int _close(int file)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
	return -1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800369e:	605a      	str	r2, [r3, #4]
	return 0;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_isatty>:

int _isatty(int file)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
	return 1;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	return 0;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <_sbrk+0x5c>)
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <_sbrk+0x60>)
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <_sbrk+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <_sbrk+0x64>)
 80036fe:	4a12      	ldr	r2, [pc, #72]	; (8003748 <_sbrk+0x68>)
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003702:	4b10      	ldr	r3, [pc, #64]	; (8003744 <_sbrk+0x64>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4413      	add	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003710:	f004 fbd6 	bl	8007ec0 <__errno>
 8003714:	4603      	mov	r3, r0
 8003716:	220c      	movs	r2, #12
 8003718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	e009      	b.n	8003734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003720:	4b08      	ldr	r3, [pc, #32]	; (8003744 <_sbrk+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <_sbrk+0x64>)
 8003730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20050000 	.word	0x20050000
 8003740:	00000400 	.word	0x00000400
 8003744:	2000023c 	.word	0x2000023c
 8003748:	200009e8 	.word	0x200009e8

0800374c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <SystemInit+0x20>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	4a05      	ldr	r2, [pc, #20]	; (800376c <SystemInit+0x20>)
 8003758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800375c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003774:	480d      	ldr	r0, [pc, #52]	; (80037ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003776:	490e      	ldr	r1, [pc, #56]	; (80037b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003778:	4a0e      	ldr	r2, [pc, #56]	; (80037b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800377c:	e002      	b.n	8003784 <LoopCopyDataInit>

0800377e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800377e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003782:	3304      	adds	r3, #4

08003784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003788:	d3f9      	bcc.n	800377e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800378c:	4c0b      	ldr	r4, [pc, #44]	; (80037bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800378e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003790:	e001      	b.n	8003796 <LoopFillZerobss>

08003792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003794:	3204      	adds	r2, #4

08003796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003798:	d3fb      	bcc.n	8003792 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800379a:	f7ff ffd7 	bl	800374c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800379e:	f004 fba7 	bl	8007ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a2:	f7fd fc87 	bl	80010b4 <main>
  bx  lr    
 80037a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037a8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80037ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80037b4:	0800cf50 	.word	0x0800cf50
  ldr r2, =_sbss
 80037b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037bc:	200009e8 	.word	0x200009e8

080037c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c0:	e7fe      	b.n	80037c0 <ADC_IRQHandler>

080037c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c6:	2003      	movs	r0, #3
 80037c8:	f000 fbd4 	bl	8003f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037cc:	200f      	movs	r0, #15
 80037ce:	f000 f805 	bl	80037dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037d2:	f7ff facf 	bl	8002d74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037e4:	4b12      	ldr	r3, [pc, #72]	; (8003830 <HAL_InitTick+0x54>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_InitTick+0x58>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80037f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fbef 	bl	8003fde <HAL_SYSTICK_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e00e      	b.n	8003828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b0f      	cmp	r3, #15
 800380e:	d80a      	bhi.n	8003826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003810:	2200      	movs	r2, #0
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	f04f 30ff 	mov.w	r0, #4294967295
 8003818:	f000 fbb7 	bl	8003f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800381c:	4a06      	ldr	r2, [pc, #24]	; (8003838 <HAL_InitTick+0x5c>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000000 	.word	0x20000000
 8003834:	20000008 	.word	0x20000008
 8003838:	20000004 	.word	0x20000004

0800383c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_IncTick+0x20>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_IncTick+0x24>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4413      	add	r3, r2
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <HAL_IncTick+0x24>)
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000008 	.word	0x20000008
 8003860:	200009d4 	.word	0x200009d4

08003864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  return uwTick;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_GetTick+0x14>)
 800386a:	681b      	ldr	r3, [r3, #0]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	200009d4 	.word	0x200009d4

0800387c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7ff ffee 	bl	8003864 <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d005      	beq.n	80038a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <HAL_Delay+0x44>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4413      	add	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038a2:	bf00      	nop
 80038a4:	f7ff ffde 	bl	8003864 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d8f7      	bhi.n	80038a4 <HAL_Delay+0x28>
  {
  }
}
 80038b4:	bf00      	nop
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000008 	.word	0x20000008

080038c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e031      	b.n	800393e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fa6a 	bl	8002dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_ADC_Init+0x84>)
 8003908:	4013      	ands	r3, r2
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f964 	bl	8003be0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
 800392e:	e001      	b.n	8003934 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	ffffeefd 	.word	0xffffeefd

0800394c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x1c>
 8003964:	2302      	movs	r3, #2
 8003966:	e12a      	b.n	8003bbe <HAL_ADC_ConfigChannel+0x272>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b09      	cmp	r3, #9
 8003976:	d93a      	bls.n	80039ee <HAL_ADC_ConfigChannel+0xa2>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003980:	d035      	beq.n	80039ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68d9      	ldr	r1, [r3, #12]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	4613      	mov	r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4413      	add	r3, r2
 8003996:	3b1e      	subs	r3, #30
 8003998:	2207      	movs	r2, #7
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	400a      	ands	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a87      	ldr	r2, [pc, #540]	; (8003bcc <HAL_ADC_ConfigChannel+0x280>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10a      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68d9      	ldr	r1, [r3, #12]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	061a      	lsls	r2, r3, #24
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039c6:	e035      	b.n	8003a34 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4618      	mov	r0, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4403      	add	r3, r0
 80039e0:	3b1e      	subs	r3, #30
 80039e2:	409a      	lsls	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039ec:	e022      	b.n	8003a34 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6919      	ldr	r1, [r3, #16]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	4613      	mov	r3, r2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	4413      	add	r3, r2
 8003a02:	2207      	movs	r2, #7
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	400a      	ands	r2, r1
 8003a10:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6919      	ldr	r1, [r3, #16]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4618      	mov	r0, r3
 8003a24:	4603      	mov	r3, r0
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	4403      	add	r3, r0
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b06      	cmp	r3, #6
 8003a3a:	d824      	bhi.n	8003a86 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3b05      	subs	r3, #5
 8003a4e:	221f      	movs	r2, #31
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43da      	mvns	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	3b05      	subs	r3, #5
 8003a78:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	635a      	str	r2, [r3, #52]	; 0x34
 8003a84:	e04c      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d824      	bhi.n	8003ad8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3b23      	subs	r3, #35	; 0x23
 8003aa0:	221f      	movs	r2, #31
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	400a      	ands	r2, r1
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4618      	mov	r0, r3
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3b23      	subs	r3, #35	; 0x23
 8003aca:	fa00 f203 	lsl.w	r2, r0, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ad6:	e023      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	3b41      	subs	r3, #65	; 0x41
 8003aea:	221f      	movs	r2, #31
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43da      	mvns	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	400a      	ands	r2, r1
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	4618      	mov	r0, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	3b41      	subs	r3, #65	; 0x41
 8003b14:	fa00 f203 	lsl.w	r2, r0, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <HAL_ADC_ConfigChannel+0x284>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d10a      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x1f4>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b32:	d105      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003b34:	4b27      	ldr	r3, [pc, #156]	; (8003bd4 <HAL_ADC_ConfigChannel+0x288>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <HAL_ADC_ConfigChannel+0x288>)
 8003b3a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003b3e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_ADC_ConfigChannel+0x284>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d109      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x212>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b12      	cmp	r3, #18
 8003b50:	d105      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003b52:	4b20      	ldr	r3, [pc, #128]	; (8003bd4 <HAL_ADC_ConfigChannel+0x288>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_ADC_ConfigChannel+0x288>)
 8003b58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <HAL_ADC_ConfigChannel+0x284>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d125      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x268>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_ADC_ConfigChannel+0x280>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <HAL_ADC_ConfigChannel+0x22e>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b11      	cmp	r3, #17
 8003b78:	d11c      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b7a:	4b16      	ldr	r3, [pc, #88]	; (8003bd4 <HAL_ADC_ConfigChannel+0x288>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <HAL_ADC_ConfigChannel+0x288>)
 8003b80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <HAL_ADC_ConfigChannel+0x280>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d111      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_ADC_ConfigChannel+0x28c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_ADC_ConfigChannel+0x290>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0c9a      	lsrs	r2, r3, #18
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ba6:	e002      	b.n	8003bae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	10000012 	.word	0x10000012
 8003bd0:	40012000 	.word	0x40012000
 8003bd4:	40012300 	.word	0x40012300
 8003bd8:	20000000 	.word	0x20000000
 8003bdc:	431bde83 	.word	0x431bde83

08003be0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003be8:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <ADC_Init+0x1ec>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a77      	ldr	r2, [pc, #476]	; (8003dcc <ADC_Init+0x1ec>)
 8003bee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003bf2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003bf4:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <ADC_Init+0x1ec>)
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4973      	ldr	r1, [pc, #460]	; (8003dcc <ADC_Init+0x1ec>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	021a      	lsls	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6859      	ldr	r1, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6899      	ldr	r1, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <ADC_Init+0x1f0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6899      	ldr	r1, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6899      	ldr	r1, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	e00f      	b.n	8003cda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0202 	bic.w	r2, r2, #2
 8003ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6899      	ldr	r1, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	005a      	lsls	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	3b01      	subs	r3, #1
 8003d34:	035a      	lsls	r2, r3, #13
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	e007      	b.n	8003d50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	051a      	lsls	r2, r3, #20
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6899      	ldr	r1, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d92:	025a      	lsls	r2, r3, #9
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6899      	ldr	r1, [r3, #8]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	029a      	lsls	r2, r3, #10
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	609a      	str	r2, [r3, #8]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	40012300 	.word	0x40012300
 8003dd0:	0f000001 	.word	0x0f000001

08003dd4 <__NVIC_SetPriorityGrouping>:
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <__NVIC_SetPriorityGrouping+0x40>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003df0:	4013      	ands	r3, r2
 8003df2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <__NVIC_SetPriorityGrouping+0x44>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e02:	4a04      	ldr	r2, [pc, #16]	; (8003e14 <__NVIC_SetPriorityGrouping+0x40>)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	60d3      	str	r3, [r2, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00
 8003e18:	05fa0000 	.word	0x05fa0000

08003e1c <__NVIC_GetPriorityGrouping>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <__NVIC_GetPriorityGrouping+0x18>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 0307 	and.w	r3, r3, #7
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <__NVIC_EnableIRQ>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	db0b      	blt.n	8003e62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	f003 021f 	and.w	r2, r3, #31
 8003e50:	4907      	ldr	r1, [pc, #28]	; (8003e70 <__NVIC_EnableIRQ+0x38>)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	2001      	movs	r0, #1
 8003e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_SetPriority>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	db0a      	blt.n	8003e9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	490c      	ldr	r1, [pc, #48]	; (8003ec0 <__NVIC_SetPriority+0x4c>)
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	b2d2      	uxtb	r2, r2
 8003e96:	440b      	add	r3, r1
 8003e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e9c:	e00a      	b.n	8003eb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4908      	ldr	r1, [pc, #32]	; (8003ec4 <__NVIC_SetPriority+0x50>)
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3b04      	subs	r3, #4
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	b2d2      	uxtb	r2, r2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	761a      	strb	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000e100 	.word	0xe000e100
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <NVIC_EncodePriority>:
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f1c3 0307 	rsb	r3, r3, #7
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	bf28      	it	cs
 8003ee6:	2304      	movcs	r3, #4
 8003ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	3304      	adds	r3, #4
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d902      	bls.n	8003ef8 <NVIC_EncodePriority+0x30>
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3b03      	subs	r3, #3
 8003ef6:	e000      	b.n	8003efa <NVIC_EncodePriority+0x32>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43da      	mvns	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f10:	f04f 31ff 	mov.w	r1, #4294967295
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1a:	43d9      	mvns	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f20:	4313      	orrs	r3, r2
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3724      	adds	r7, #36	; 0x24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f40:	d301      	bcc.n	8003f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f42:	2301      	movs	r3, #1
 8003f44:	e00f      	b.n	8003f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <SysTick_Config+0x40>)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f4e:	210f      	movs	r1, #15
 8003f50:	f04f 30ff 	mov.w	r0, #4294967295
 8003f54:	f7ff ff8e 	bl	8003e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <SysTick_Config+0x40>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f5e:	4b04      	ldr	r3, [pc, #16]	; (8003f70 <SysTick_Config+0x40>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	e000e010 	.word	0xe000e010

08003f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff29 	bl	8003dd4 <__NVIC_SetPriorityGrouping>
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	4603      	mov	r3, r0
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f9c:	f7ff ff3e 	bl	8003e1c <__NVIC_GetPriorityGrouping>
 8003fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68b9      	ldr	r1, [r7, #8]
 8003fa6:	6978      	ldr	r0, [r7, #20]
 8003fa8:	f7ff ff8e 	bl	8003ec8 <NVIC_EncodePriority>
 8003fac:	4602      	mov	r2, r0
 8003fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff5d 	bl	8003e74 <__NVIC_SetPriority>
}
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ff31 	bl	8003e38 <__NVIC_EnableIRQ>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff ffa2 	bl	8003f30 <SysTick_Config>
 8003fec:	4603      	mov	r3, r0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	e175      	b.n	8004304 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	429a      	cmp	r2, r3
 8004032:	f040 8164 	bne.w	80042fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d00b      	beq.n	8004056 <HAL_GPIO_Init+0x5e>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d007      	beq.n	8004056 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800404a:	2b11      	cmp	r3, #17
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b12      	cmp	r3, #18
 8004054:	d130      	bne.n	80040b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4313      	orrs	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800408c:	2201      	movs	r2, #1
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 0201 	and.w	r2, r3, #1
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	2203      	movs	r2, #3
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x100>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b12      	cmp	r3, #18
 80040f6:	d123      	bne.n	8004140 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	08da      	lsrs	r2, r3, #3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3208      	adds	r2, #8
 8004100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	220f      	movs	r2, #15
 8004110:	fa02 f303 	lsl.w	r3, r2, r3
 8004114:	43db      	mvns	r3, r3
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4013      	ands	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	691a      	ldr	r2, [r3, #16]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	08da      	lsrs	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3208      	adds	r2, #8
 800413a:	69b9      	ldr	r1, [r7, #24]
 800413c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	2203      	movs	r2, #3
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0203 	and.w	r2, r3, #3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4313      	orrs	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80be 	beq.w	80042fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004182:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_GPIO_Init+0x324>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_GPIO_Init+0x324>)
 8004188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800418c:	6453      	str	r3, [r2, #68]	; 0x44
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_GPIO_Init+0x324>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800419a:	4a61      	ldr	r2, [pc, #388]	; (8004320 <HAL_GPIO_Init+0x328>)
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	220f      	movs	r2, #15
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a58      	ldr	r2, [pc, #352]	; (8004324 <HAL_GPIO_Init+0x32c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d037      	beq.n	8004236 <HAL_GPIO_Init+0x23e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a57      	ldr	r2, [pc, #348]	; (8004328 <HAL_GPIO_Init+0x330>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d031      	beq.n	8004232 <HAL_GPIO_Init+0x23a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a56      	ldr	r2, [pc, #344]	; (800432c <HAL_GPIO_Init+0x334>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d02b      	beq.n	800422e <HAL_GPIO_Init+0x236>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a55      	ldr	r2, [pc, #340]	; (8004330 <HAL_GPIO_Init+0x338>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d025      	beq.n	800422a <HAL_GPIO_Init+0x232>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a54      	ldr	r2, [pc, #336]	; (8004334 <HAL_GPIO_Init+0x33c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d01f      	beq.n	8004226 <HAL_GPIO_Init+0x22e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a53      	ldr	r2, [pc, #332]	; (8004338 <HAL_GPIO_Init+0x340>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d019      	beq.n	8004222 <HAL_GPIO_Init+0x22a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a52      	ldr	r2, [pc, #328]	; (800433c <HAL_GPIO_Init+0x344>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_GPIO_Init+0x226>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a51      	ldr	r2, [pc, #324]	; (8004340 <HAL_GPIO_Init+0x348>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00d      	beq.n	800421a <HAL_GPIO_Init+0x222>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a50      	ldr	r2, [pc, #320]	; (8004344 <HAL_GPIO_Init+0x34c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <HAL_GPIO_Init+0x21e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a4f      	ldr	r2, [pc, #316]	; (8004348 <HAL_GPIO_Init+0x350>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d101      	bne.n	8004212 <HAL_GPIO_Init+0x21a>
 800420e:	2309      	movs	r3, #9
 8004210:	e012      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004212:	230a      	movs	r3, #10
 8004214:	e010      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004216:	2308      	movs	r3, #8
 8004218:	e00e      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800421a:	2307      	movs	r3, #7
 800421c:	e00c      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800421e:	2306      	movs	r3, #6
 8004220:	e00a      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004222:	2305      	movs	r3, #5
 8004224:	e008      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004226:	2304      	movs	r3, #4
 8004228:	e006      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800422a:	2303      	movs	r3, #3
 800422c:	e004      	b.n	8004238 <HAL_GPIO_Init+0x240>
 800422e:	2302      	movs	r3, #2
 8004230:	e002      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <HAL_GPIO_Init+0x240>
 8004236:	2300      	movs	r3, #0
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	f002 0203 	and.w	r2, r2, #3
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	4093      	lsls	r3, r2
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004248:	4935      	ldr	r1, [pc, #212]	; (8004320 <HAL_GPIO_Init+0x328>)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	3302      	adds	r3, #2
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <HAL_GPIO_Init+0x354>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	43db      	mvns	r3, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800427a:	4a34      	ldr	r2, [pc, #208]	; (800434c <HAL_GPIO_Init+0x354>)
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004280:	4b32      	ldr	r3, [pc, #200]	; (800434c <HAL_GPIO_Init+0x354>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	43db      	mvns	r3, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4013      	ands	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a4:	4a29      	ldr	r2, [pc, #164]	; (800434c <HAL_GPIO_Init+0x354>)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_GPIO_Init+0x354>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4013      	ands	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ce:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_GPIO_Init+0x354>)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_GPIO_Init+0x354>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	43db      	mvns	r3, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	4013      	ands	r3, r2
 80042e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_GPIO_Init+0x354>)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3301      	adds	r3, #1
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	f67f ae86 	bls.w	8004018 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	3724      	adds	r7, #36	; 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	40013800 	.word	0x40013800
 8004324:	40020000 	.word	0x40020000
 8004328:	40020400 	.word	0x40020400
 800432c:	40020800 	.word	0x40020800
 8004330:	40020c00 	.word	0x40020c00
 8004334:	40021000 	.word	0x40021000
 8004338:	40021400 	.word	0x40021400
 800433c:	40021800 	.word	0x40021800
 8004340:	40021c00 	.word	0x40021c00
 8004344:	40022000 	.word	0x40022000
 8004348:	40022400 	.word	0x40022400
 800434c:	40013c00 	.word	0x40013c00

08004350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	887b      	ldrh	r3, [r7, #2]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
 800436c:	e001      	b.n	8004372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	807b      	strh	r3, [r7, #2]
 800438c:	4613      	mov	r3, r2
 800438e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004390:	787b      	ldrb	r3, [r7, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800439c:	e003      	b.n	80043a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800439e:	887b      	ldrh	r3, [r7, #2]
 80043a0:	041a      	lsls	r2, r3, #16
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	619a      	str	r2, [r3, #24]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07f      	b.n	80044c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fe fda4 	bl	8002f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2224      	movs	r2, #36	; 0x24
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d107      	bne.n	800442e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	e006      	b.n	800443c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800443a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d104      	bne.n	800444e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800444c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HAL_I2C_Init+0x11c>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800446c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	ea42 0103 	orr.w	r1, r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1a      	ldr	r2, [r3, #32]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	02008000 	.word	0x02008000

080044d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d138      	bne.n	800455c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e032      	b.n	800455e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	; 0x24
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 0201 	bic.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6819      	ldr	r1, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2220      	movs	r2, #32
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800456a:	b480      	push	{r7}
 800456c:	b085      	sub	sp, #20
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b20      	cmp	r3, #32
 800457e:	d139      	bne.n	80045f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800458a:	2302      	movs	r3, #2
 800458c:	e033      	b.n	80045f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2224      	movs	r2, #36	; 0x24
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0201 	bic.w	r2, r2, #1
 80045ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2220      	movs	r2, #32
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800460e:	4b23      	ldr	r3, [pc, #140]	; (800469c <HAL_PWREx_EnableOverDrive+0x98>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <HAL_PWREx_EnableOverDrive+0x98>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	; 0x40
 800461a:	4b20      	ldr	r3, [pc, #128]	; (800469c <HAL_PWREx_EnableOverDrive+0x98>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800462c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004630:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004632:	f7ff f917 	bl	8003864 <HAL_GetTick>
 8004636:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004638:	e009      	b.n	800464e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800463a:	f7ff f913 	bl	8003864 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004648:	d901      	bls.n	800464e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e022      	b.n	8004694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465a:	d1ee      	bne.n	800463a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800465c:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004668:	f7ff f8fc 	bl	8003864 <HAL_GetTick>
 800466c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800466e:	e009      	b.n	8004684 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004670:	f7ff f8f8 	bl	8003864 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800467e:	d901      	bls.n	8004684 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e007      	b.n	8004694 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004690:	d1ee      	bne.n	8004670 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40023800 	.word	0x40023800
 80046a0:	40007000 	.word	0x40007000

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e291      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8087 	beq.w	80047d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	4b96      	ldr	r3, [pc, #600]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d00c      	beq.n	80046ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d4:	4b93      	ldr	r3, [pc, #588]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 030c 	and.w	r3, r3, #12
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d112      	bne.n	8004706 <HAL_RCC_OscConfig+0x62>
 80046e0:	4b90      	ldr	r3, [pc, #576]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ec:	d10b      	bne.n	8004706 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ee:	4b8d      	ldr	r3, [pc, #564]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d06c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x130>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d168      	bne.n	80047d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e26b      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d106      	bne.n	800471e <HAL_RCC_OscConfig+0x7a>
 8004710:	4b84      	ldr	r3, [pc, #528]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a83      	ldr	r2, [pc, #524]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e02e      	b.n	800477c <HAL_RCC_OscConfig+0xd8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0x9c>
 8004726:	4b7f      	ldr	r3, [pc, #508]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a7e      	ldr	r2, [pc, #504]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800472c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b7c      	ldr	r3, [pc, #496]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7b      	ldr	r2, [pc, #492]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e01d      	b.n	800477c <HAL_RCC_OscConfig+0xd8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0xc0>
 800474a:	4b76      	ldr	r3, [pc, #472]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a75      	ldr	r2, [pc, #468]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b73      	ldr	r3, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a72      	ldr	r2, [pc, #456]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	e00b      	b.n	800477c <HAL_RCC_OscConfig+0xd8>
 8004764:	4b6f      	ldr	r3, [pc, #444]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a6e      	ldr	r2, [pc, #440]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800476a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a6b      	ldr	r2, [pc, #428]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800477a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d013      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7ff f86e 	bl	8003864 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7ff f86a 	bl	8003864 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e21f      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b61      	ldr	r3, [pc, #388]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7ff f85a 	bl	8003864 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b4:	f7ff f856 	bl	8003864 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b64      	cmp	r3, #100	; 0x64
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e20b      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047c6:	4b57      	ldr	r3, [pc, #348]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x110>
 80047d2:	e000      	b.n	80047d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d069      	beq.n	80048b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e2:	4b50      	ldr	r3, [pc, #320]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b4d      	ldr	r3, [pc, #308]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d11c      	bne.n	8004834 <HAL_RCC_OscConfig+0x190>
 80047fa:	4b4a      	ldr	r3, [pc, #296]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d116      	bne.n	8004834 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x17a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d001      	beq.n	800481e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e1df      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	493d      	ldr	r1, [pc, #244]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800482e:	4313      	orrs	r3, r2
 8004830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004832:	e040      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d023      	beq.n	8004884 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800483c:	4b39      	ldr	r3, [pc, #228]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a38      	ldr	r2, [pc, #224]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7ff f80c 	bl	8003864 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004850:	f7ff f808 	bl	8003864 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1bd      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	4b30      	ldr	r3, [pc, #192]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b2d      	ldr	r3, [pc, #180]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4929      	ldr	r1, [pc, #164]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
 8004882:	e018      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a26      	ldr	r2, [pc, #152]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fe ffe8 	bl	8003864 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fe ffe4 	bl	8003864 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e199      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048aa:	4b1e      	ldr	r3, [pc, #120]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0302 	and.w	r3, r3, #2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f0      	bne.n	8004898 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d038      	beq.n	8004934 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d019      	beq.n	80048fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ce:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d6:	f7fe ffc5 	bl	8003864 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048de:	f7fe ffc1 	bl	8003864 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e176      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 80048f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x23a>
 80048fc:	e01a      	b.n	8004934 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <HAL_RCC_OscConfig+0x280>)
 8004904:	f023 0301 	bic.w	r3, r3, #1
 8004908:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800490a:	f7fe ffab 	bl	8003864 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004912:	f7fe ffa7 	bl	8003864 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	2b02      	cmp	r3, #2
 800491e:	d903      	bls.n	8004928 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e15c      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
 8004924:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b91      	ldr	r3, [pc, #580]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a4 	beq.w	8004a8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004942:	4b8b      	ldr	r3, [pc, #556]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800494e:	4b88      	ldr	r3, [pc, #544]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a87      	ldr	r2, [pc, #540]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b85      	ldr	r3, [pc, #532]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800496a:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d118      	bne.n	80049a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004976:	4b7f      	ldr	r3, [pc, #508]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a7e      	ldr	r2, [pc, #504]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004982:	f7fe ff6f 	bl	8003864 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fe ff6b 	bl	8003864 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b64      	cmp	r3, #100	; 0x64
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e120      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800499c:	4b75      	ldr	r3, [pc, #468]	; (8004b74 <HAL_RCC_OscConfig+0x4d0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x31a>
 80049b0:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a6e      	ldr	r2, [pc, #440]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	e02d      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x33c>
 80049c6:	4b6a      	ldr	r3, [pc, #424]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a69      	ldr	r2, [pc, #420]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
 80049d2:	4b67      	ldr	r3, [pc, #412]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a66      	ldr	r2, [pc, #408]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
 80049de:	e01c      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCC_OscConfig+0x35e>
 80049e8:	4b61      	ldr	r3, [pc, #388]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ec:	4a60      	ldr	r2, [pc, #384]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049ee:	f043 0304 	orr.w	r3, r3, #4
 80049f2:	6713      	str	r3, [r2, #112]	; 0x70
 80049f4:	4b5e      	ldr	r3, [pc, #376]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f8:	4a5d      	ldr	r2, [pc, #372]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004a00:	e00b      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
 8004a02:	4b5b      	ldr	r3, [pc, #364]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a5a      	ldr	r2, [pc, #360]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	4b58      	ldr	r3, [pc, #352]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a12:	4a57      	ldr	r2, [pc, #348]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a14:	f023 0304 	bic.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d015      	beq.n	8004a4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fe ff1f 	bl	8003864 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fe ff1b 	bl	8003864 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e0ce      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	4b4b      	ldr	r3, [pc, #300]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0ee      	beq.n	8004a2a <HAL_RCC_OscConfig+0x386>
 8004a4c:	e014      	b.n	8004a78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4e:	f7fe ff09 	bl	8003864 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a54:	e00a      	b.n	8004a6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a56:	f7fe ff05 	bl	8003864 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e0b8      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	4b40      	ldr	r3, [pc, #256]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ee      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7e:	4b3c      	ldr	r3, [pc, #240]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a3b      	ldr	r2, [pc, #236]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80a4 	beq.w	8004bdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a94:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d06b      	beq.n	8004b78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d149      	bne.n	8004b3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa8:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a30      	ldr	r2, [pc, #192]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fed6 	bl	8003864 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004abc:	f7fe fed2 	bl	8003864 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e087      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69da      	ldr	r2, [r3, #28]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	019b      	lsls	r3, r3, #6
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	085b      	lsrs	r3, r3, #1
 8004af2:	3b01      	subs	r3, #1
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	061b      	lsls	r3, r3, #24
 8004afe:	4313      	orrs	r3, r2
 8004b00:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b14:	f7fe fea6 	bl	8003864 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1c:	f7fe fea2 	bl	8003864 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e057      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2e:	4b10      	ldr	r3, [pc, #64]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f0      	beq.n	8004b1c <HAL_RCC_OscConfig+0x478>
 8004b3a:	e04f      	b.n	8004bdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0b      	ldr	r2, [pc, #44]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe fe8c 	bl	8003864 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fe fe88 	bl	8003864 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e03d      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	4b03      	ldr	r3, [pc, #12]	; (8004b70 <HAL_RCC_OscConfig+0x4cc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x4ac>
 8004b6e:	e035      	b.n	8004bdc <HAL_RCC_OscConfig+0x538>
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004b78:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <HAL_RCC_OscConfig+0x544>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d028      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d121      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d11a      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ba8:	4013      	ands	r3, r2
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d111      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800

08004bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0d0      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d910      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 020f 	bic.w	r2, r3, #15
 8004c1a:	4965      	ldr	r1, [pc, #404]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b63      	ldr	r3, [pc, #396]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0b8      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c4c:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a58      	ldr	r2, [pc, #352]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c64:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a52      	ldr	r2, [pc, #328]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	494d      	ldr	r1, [pc, #308]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d040      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d115      	bne.n	8004cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	4b41      	ldr	r3, [pc, #260]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d109      	bne.n	8004cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e073      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbe:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e06b      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cce:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f023 0203 	bic.w	r2, r3, #3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4936      	ldr	r1, [pc, #216]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce0:	f7fe fdc0 	bl	8003864 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	e00a      	b.n	8004cfe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce8:	f7fe fdbc 	bl	8003864 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e053      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	4b2d      	ldr	r3, [pc, #180]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 020c 	and.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d1eb      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d10:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d210      	bcs.n	8004d40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f023 020f 	bic.w	r2, r3, #15
 8004d26:	4922      	ldr	r1, [pc, #136]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e032      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4916      	ldr	r1, [pc, #88]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	490e      	ldr	r1, [pc, #56]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d7e:	f000 f821 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8004d82:	4602      	mov	r2, r0
 8004d84:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <HAL_RCC_ClockConfig+0x1c8>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	490a      	ldr	r1, [pc, #40]	; (8004db8 <HAL_RCC_ClockConfig+0x1cc>)
 8004d90:	5ccb      	ldrb	r3, [r1, r3]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <HAL_RCC_ClockConfig+0x1d0>)
 8004d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d9a:	4b09      	ldr	r3, [pc, #36]	; (8004dc0 <HAL_RCC_ClockConfig+0x1d4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd1c 	bl	80037dc <HAL_InitTick>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023c00 	.word	0x40023c00
 8004db4:	40023800 	.word	0x40023800
 8004db8:	0800ca14 	.word	0x0800ca14
 8004dbc:	20000000 	.word	0x20000000
 8004dc0:	20000004 	.word	0x20000004

08004dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc4:	b5b0      	push	{r4, r5, r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6079      	str	r1, [r7, #4]
 8004dce:	2100      	movs	r1, #0
 8004dd0:	60f9      	str	r1, [r7, #12]
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dda:	4952      	ldr	r1, [pc, #328]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ddc:	6889      	ldr	r1, [r1, #8]
 8004dde:	f001 010c 	and.w	r1, r1, #12
 8004de2:	2908      	cmp	r1, #8
 8004de4:	d00d      	beq.n	8004e02 <HAL_RCC_GetSysClockFreq+0x3e>
 8004de6:	2908      	cmp	r1, #8
 8004de8:	f200 8094 	bhi.w	8004f14 <HAL_RCC_GetSysClockFreq+0x150>
 8004dec:	2900      	cmp	r1, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x32>
 8004df0:	2904      	cmp	r1, #4
 8004df2:	d003      	beq.n	8004dfc <HAL_RCC_GetSysClockFreq+0x38>
 8004df4:	e08e      	b.n	8004f14 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8004df8:	60bb      	str	r3, [r7, #8]
      break;
 8004dfa:	e08e      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8004dfe:	60bb      	str	r3, [r7, #8]
      break;
 8004e00:	e08b      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e02:	4948      	ldr	r1, [pc, #288]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e04:	6849      	ldr	r1, [r1, #4]
 8004e06:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004e0a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004e0c:	4945      	ldr	r1, [pc, #276]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e0e:	6849      	ldr	r1, [r1, #4]
 8004e10:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004e14:	2900      	cmp	r1, #0
 8004e16:	d024      	beq.n	8004e62 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e18:	4942      	ldr	r1, [pc, #264]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e1a:	6849      	ldr	r1, [r1, #4]
 8004e1c:	0989      	lsrs	r1, r1, #6
 8004e1e:	4608      	mov	r0, r1
 8004e20:	f04f 0100 	mov.w	r1, #0
 8004e24:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004e28:	f04f 0500 	mov.w	r5, #0
 8004e2c:	ea00 0204 	and.w	r2, r0, r4
 8004e30:	ea01 0305 	and.w	r3, r1, r5
 8004e34:	493d      	ldr	r1, [pc, #244]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8004e36:	fb01 f003 	mul.w	r0, r1, r3
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	fb01 f102 	mul.w	r1, r1, r2
 8004e40:	1844      	adds	r4, r0, r1
 8004e42:	493a      	ldr	r1, [pc, #232]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x168>)
 8004e44:	fba2 0101 	umull	r0, r1, r2, r1
 8004e48:	1863      	adds	r3, r4, r1
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	f7fb ff48 	bl	8000ce8 <__aeabi_uldivmod>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e04a      	b.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e62:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	ea02 0400 	and.w	r4, r2, r0
 8004e7a:	ea03 0501 	and.w	r5, r3, r1
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4629      	mov	r1, r5
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	014b      	lsls	r3, r1, #5
 8004e8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e90:	0142      	lsls	r2, r0, #5
 8004e92:	4610      	mov	r0, r2
 8004e94:	4619      	mov	r1, r3
 8004e96:	1b00      	subs	r0, r0, r4
 8004e98:	eb61 0105 	sbc.w	r1, r1, r5
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	018b      	lsls	r3, r1, #6
 8004ea6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eaa:	0182      	lsls	r2, r0, #6
 8004eac:	1a12      	subs	r2, r2, r0
 8004eae:	eb63 0301 	sbc.w	r3, r3, r1
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f04f 0100 	mov.w	r1, #0
 8004eba:	00d9      	lsls	r1, r3, #3
 8004ebc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ec0:	00d0      	lsls	r0, r2, #3
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	1912      	adds	r2, r2, r4
 8004ec8:	eb45 0303 	adc.w	r3, r5, r3
 8004ecc:	f04f 0000 	mov.w	r0, #0
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	0299      	lsls	r1, r3, #10
 8004ed6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eda:	0290      	lsls	r0, r2, #10
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f7fb fefc 	bl	8000ce8 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
      break;
 8004f12:	e002      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f16:	60bb      	str	r3, [r7, #8]
      break;
 8004f18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bdb0      	pop	{r4, r5, r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	00f42400 	.word	0x00f42400
 8004f2c:	017d7840 	.word	0x017d7840

08004f30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000000 	.word	0x20000000

08004f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f4c:	f7ff fff0 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0a9b      	lsrs	r3, r3, #10
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4903      	ldr	r1, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800ca24 	.word	0x0800ca24

08004f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f74:	f7ff ffdc 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0b5b      	lsrs	r3, r3, #13
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4903      	ldr	r1, [pc, #12]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40023800 	.word	0x40023800
 8004f94:	0800ca24 	.word	0x0800ca24

08004f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fc0:	4b69      	ldr	r3, [pc, #420]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a68      	ldr	r2, [pc, #416]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fca:	6093      	str	r3, [r2, #8]
 8004fcc:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	4964      	ldr	r1, [pc, #400]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff2:	4b5d      	ldr	r3, [pc, #372]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005000:	4959      	ldr	r1, [pc, #356]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005010:	d101      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800501e:	2301      	movs	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800502e:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005034:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	494a      	ldr	r1, [pc, #296]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504c:	d101      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 808b 	beq.w	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	4b3a      	ldr	r3, [pc, #232]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	4a39      	ldr	r2, [pc, #228]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6413      	str	r3, [r2, #64]	; 0x40
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005094:	4b35      	ldr	r3, [pc, #212]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a34      	ldr	r2, [pc, #208]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fe fbe0 	bl	8003864 <HAL_GetTick>
 80050a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fe fbdc 	bl	8003864 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e357      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d035      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d02e      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e4:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005104:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d114      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fe fba4 	bl	8003864 <HAL_GetTick>
 800511c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	e00a      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005120:	f7fe fba0 	bl	8003864 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e319      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ee      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514e:	d111      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800515e:	400b      	ands	r3, r1
 8005160:	4901      	ldr	r1, [pc, #4]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
 8005166:	e00b      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005168:	40023800 	.word	0x40023800
 800516c:	40007000 	.word	0x40007000
 8005170:	0ffffcff 	.word	0x0ffffcff
 8005174:	4bb1      	ldr	r3, [pc, #708]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4ab0      	ldr	r2, [pc, #704]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800517a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800517e:	6093      	str	r3, [r2, #8]
 8005180:	4bae      	ldr	r3, [pc, #696]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	49ab      	ldr	r1, [pc, #684]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800519e:	4ba7      	ldr	r3, [pc, #668]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a4:	4aa5      	ldr	r2, [pc, #660]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051ae:	4ba3      	ldr	r3, [pc, #652]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	49a0      	ldr	r1, [pc, #640]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051cc:	4b9b      	ldr	r3, [pc, #620]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051da:	4998      	ldr	r1, [pc, #608]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ee:	4b93      	ldr	r3, [pc, #588]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fc:	498f      	ldr	r1, [pc, #572]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005210:	4b8a      	ldr	r3, [pc, #552]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521e:	4987      	ldr	r1, [pc, #540]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005232:	4b82      	ldr	r3, [pc, #520]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	497e      	ldr	r1, [pc, #504]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005254:	4b79      	ldr	r3, [pc, #484]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f023 0203 	bic.w	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	4976      	ldr	r1, [pc, #472]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005276:	4b71      	ldr	r3, [pc, #452]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527c:	f023 020c 	bic.w	r2, r3, #12
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	496d      	ldr	r1, [pc, #436]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005298:	4b68      	ldr	r3, [pc, #416]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	4965      	ldr	r1, [pc, #404]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052ba:	4b60      	ldr	r3, [pc, #384]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c8:	495c      	ldr	r1, [pc, #368]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052dc:	4b57      	ldr	r3, [pc, #348]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	4954      	ldr	r1, [pc, #336]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052fe:	4b4f      	ldr	r3, [pc, #316]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	494b      	ldr	r1, [pc, #300]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005320:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532e:	4943      	ldr	r1, [pc, #268]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005342:	4b3e      	ldr	r3, [pc, #248]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	493a      	ldr	r1, [pc, #232]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005364:	4b35      	ldr	r3, [pc, #212]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005372:	4932      	ldr	r1, [pc, #200]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d011      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005386:	4b2d      	ldr	r3, [pc, #180]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005394:	4929      	ldr	r1, [pc, #164]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a4:	d101      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c6:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d4:	4919      	ldr	r1, [pc, #100]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e8:	4b14      	ldr	r3, [pc, #80]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f8:	4910      	ldr	r1, [pc, #64]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d006      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80d9 	beq.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005414:	4b09      	ldr	r3, [pc, #36]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a08      	ldr	r2, [pc, #32]	; (800543c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800541a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800541e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fe fa20 	bl	8003864 <HAL_GetTick>
 8005424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005426:	e00b      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005428:	f7fe fa1c 	bl	8003864 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d904      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e197      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005440:	4b6c      	ldr	r3, [pc, #432]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1ed      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d021      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11d      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005460:	4b64      	ldr	r3, [pc, #400]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800546e:	4b61      	ldr	r3, [pc, #388]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005474:	0e1b      	lsrs	r3, r3, #24
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	019a      	lsls	r2, r3, #6
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	071b      	lsls	r3, r3, #28
 8005494:	4957      	ldr	r1, [pc, #348]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d02e      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c6:	d129      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054c8:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ce:	0c1b      	lsrs	r3, r3, #16
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054d6:	4b47      	ldr	r3, [pc, #284]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054dc:	0f1b      	lsrs	r3, r3, #28
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	019a      	lsls	r2, r3, #6
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	431a      	orrs	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	071b      	lsls	r3, r3, #28
 80054fc:	493d      	ldr	r1, [pc, #244]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005504:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550a:	f023 021f 	bic.w	r2, r3, #31
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	3b01      	subs	r3, #1
 8005514:	4937      	ldr	r1, [pc, #220]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005536:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553c:	0f1b      	lsrs	r3, r3, #28
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	019a      	lsls	r2, r3, #6
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	431a      	orrs	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	071b      	lsls	r3, r3, #28
 800555c:	4925      	ldr	r1, [pc, #148]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d011      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	019a      	lsls	r2, r3, #6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	071b      	lsls	r3, r3, #28
 800558c:	4919      	ldr	r1, [pc, #100]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800559a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800559e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a0:	f7fe f960 	bl	8003864 <HAL_GetTick>
 80055a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a8:	f7fe f95c 	bl	8003864 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0d7      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f040 80cd 	bne.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055da:	f7fe f943 	bl	8003864 <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055e2:	f7fe f93f 	bl	8003864 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b64      	cmp	r3, #100	; 0x64
 80055ee:	d903      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ba      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80055f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055f8:	4b5e      	ldr	r3, [pc, #376]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005604:	d0ed      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02e      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d12a      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800562e:	4b51      	ldr	r3, [pc, #324]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800563c:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	0f1b      	lsrs	r3, r3, #28
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	019a      	lsls	r2, r3, #6
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	061b      	lsls	r3, r3, #24
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	4944      	ldr	r1, [pc, #272]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800566a:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	493d      	ldr	r1, [pc, #244]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d022      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005698:	d11d      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800569a:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	0e1b      	lsrs	r3, r3, #24
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	0f1b      	lsrs	r3, r3, #28
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	019a      	lsls	r2, r3, #6
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	431a      	orrs	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	061b      	lsls	r3, r3, #24
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	071b      	lsls	r3, r3, #28
 80056ce:	4929      	ldr	r1, [pc, #164]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d028      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	0e1b      	lsrs	r3, r3, #24
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056f0:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	0c1b      	lsrs	r3, r3, #16
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4917      	ldr	r1, [pc, #92]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4911      	ldr	r1, [pc, #68]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800573a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005740:	f7fe f890 	bl	8003864 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005748:	f7fe f88c 	bl	8003864 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e007      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005766:	d1ef      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800

08005778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e049      	b.n	800581e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fd fc06 	bl	8002fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3304      	adds	r3, #4
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f000 ff74 	bl	80066a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e049      	b.n	80058cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d106      	bne.n	8005852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f841 	bl	80058d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f000 ff1d 	bl	80066a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_TIM_PWM_Start+0x24>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	e03c      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b04      	cmp	r3, #4
 8005910:	d109      	bne.n	8005926 <HAL_TIM_PWM_Start+0x3e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e02f      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d109      	bne.n	8005940 <HAL_TIM_PWM_Start+0x58>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e022      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d109      	bne.n	800595a <HAL_TIM_PWM_Start+0x72>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e015      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b10      	cmp	r3, #16
 800595e:	d109      	bne.n	8005974 <HAL_TIM_PWM_Start+0x8c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e008      	b.n	8005986 <HAL_TIM_PWM_Start+0x9e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b01      	cmp	r3, #1
 800597e:	bf14      	ite	ne
 8005980:	2301      	movne	r3, #1
 8005982:	2300      	moveq	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e092      	b.n	8005ab4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xb6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800599c:	e023      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0xc6>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	e01b      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0xd6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059bc:	e013      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b0c      	cmp	r3, #12
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_PWM_Start+0xe6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059cc:	e00b      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b10      	cmp	r3, #16
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0xf6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059dc:	e003      	b.n	80059e6 <HAL_TIM_PWM_Start+0xfe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2202      	movs	r2, #2
 80059e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	6839      	ldr	r1, [r7, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 fbaa 	bl	8007148 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a30      	ldr	r2, [pc, #192]	; (8005abc <HAL_TIM_PWM_Start+0x1d4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x120>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <HAL_TIM_PWM_Start+0x1d8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_TIM_PWM_Start+0x124>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_TIM_PWM_Start+0x126>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d007      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a25      	ldr	r2, [pc, #148]	; (8005abc <HAL_TIM_PWM_Start+0x1d4>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d022      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a34:	d01d      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <HAL_TIM_PWM_Start+0x1dc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d018      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <HAL_TIM_PWM_Start+0x1e0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d013      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1f      	ldr	r2, [pc, #124]	; (8005acc <HAL_TIM_PWM_Start+0x1e4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00e      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_TIM_PWM_Start+0x1d8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d009      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <HAL_TIM_PWM_Start+0x1e8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d004      	beq.n	8005a72 <HAL_TIM_PWM_Start+0x18a>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a19      	ldr	r2, [pc, #100]	; (8005ad4 <HAL_TIM_PWM_Start+0x1ec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d115      	bne.n	8005a9e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <HAL_TIM_PWM_Start+0x1f0>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b06      	cmp	r3, #6
 8005a82:	d015      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x1c8>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8a:	d011      	beq.n	8005ab0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	e008      	b.n	8005ab0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f042 0201 	orr.w	r2, r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	e000      	b.n	8005ab2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	40010400 	.word	0x40010400
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40001800 	.word	0x40001800
 8005ad8:	00010007 	.word	0x00010007

08005adc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e049      	b.n	8005b82 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f841 	bl	8005b8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	f000 fdc2 	bl	80066a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <HAL_TIM_IC_Start_IT+0x1a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e023      	b.n	8005c02 <HAL_TIM_IC_Start_IT+0x62>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d104      	bne.n	8005bca <HAL_TIM_IC_Start_IT+0x2a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	e01b      	b.n	8005c02 <HAL_TIM_IC_Start_IT+0x62>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d104      	bne.n	8005bda <HAL_TIM_IC_Start_IT+0x3a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	e013      	b.n	8005c02 <HAL_TIM_IC_Start_IT+0x62>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b0c      	cmp	r3, #12
 8005bde:	d104      	bne.n	8005bea <HAL_TIM_IC_Start_IT+0x4a>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	e00b      	b.n	8005c02 <HAL_TIM_IC_Start_IT+0x62>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b10      	cmp	r3, #16
 8005bee:	d104      	bne.n	8005bfa <HAL_TIM_IC_Start_IT+0x5a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	e003      	b.n	8005c02 <HAL_TIM_IC_Start_IT+0x62>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_TIM_IC_Start_IT+0x74>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e013      	b.n	8005c3c <HAL_TIM_IC_Start_IT+0x9c>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d104      	bne.n	8005c24 <HAL_TIM_IC_Start_IT+0x84>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	e00b      	b.n	8005c3c <HAL_TIM_IC_Start_IT+0x9c>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d104      	bne.n	8005c34 <HAL_TIM_IC_Start_IT+0x94>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	e003      	b.n	8005c3c <HAL_TIM_IC_Start_IT+0x9c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d102      	bne.n	8005c4a <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d001      	beq.n	8005c4e <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0dd      	b.n	8005e0a <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_IC_Start_IT+0xbe>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c5c:	e023      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x106>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d104      	bne.n	8005c6e <HAL_TIM_IC_Start_IT+0xce>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c6c:	e01b      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x106>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_IC_Start_IT+0xde>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c7c:	e013      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x106>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b0c      	cmp	r3, #12
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_IC_Start_IT+0xee>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x106>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b10      	cmp	r3, #16
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_IC_Start_IT+0xfe>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c9c:	e003      	b.n	8005ca6 <HAL_TIM_IC_Start_IT+0x106>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_IC_Start_IT+0x116>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb4:	e013      	b.n	8005cde <HAL_TIM_IC_Start_IT+0x13e>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_IC_Start_IT+0x126>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cc4:	e00b      	b.n	8005cde <HAL_TIM_IC_Start_IT+0x13e>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_IC_Start_IT+0x136>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cd4:	e003      	b.n	8005cde <HAL_TIM_IC_Start_IT+0x13e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d841      	bhi.n	8005d68 <HAL_TIM_IC_Start_IT+0x1c8>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_TIM_IC_Start_IT+0x14c>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d69 	.word	0x08005d69
 8005cf4:	08005d69 	.word	0x08005d69
 8005cf8:	08005d69 	.word	0x08005d69
 8005cfc:	08005d33 	.word	0x08005d33
 8005d00:	08005d69 	.word	0x08005d69
 8005d04:	08005d69 	.word	0x08005d69
 8005d08:	08005d69 	.word	0x08005d69
 8005d0c:	08005d45 	.word	0x08005d45
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d69 	.word	0x08005d69
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	08005d57 	.word	0x08005d57
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0202 	orr.w	r2, r2, #2
 8005d2e:	60da      	str	r2, [r3, #12]
      break;
 8005d30:	e01b      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f042 0204 	orr.w	r2, r2, #4
 8005d40:	60da      	str	r2, [r3, #12]
      break;
 8005d42:	e012      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0208 	orr.w	r2, r2, #8
 8005d52:	60da      	str	r2, [r3, #12]
      break;
 8005d54:	e009      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0210 	orr.w	r2, r2, #16
 8005d64:	60da      	str	r2, [r3, #12]
      break;
 8005d66:	e000      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8005d68:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 f9e8 	bl	8007148 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a25      	ldr	r2, [pc, #148]	; (8005e14 <HAL_TIM_IC_Start_IT+0x274>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d022      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8a:	d01d      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a21      	ldr	r2, [pc, #132]	; (8005e18 <HAL_TIM_IC_Start_IT+0x278>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d018      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a20      	ldr	r2, [pc, #128]	; (8005e1c <HAL_TIM_IC_Start_IT+0x27c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d013      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1e      	ldr	r2, [pc, #120]	; (8005e20 <HAL_TIM_IC_Start_IT+0x280>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00e      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1d      	ldr	r2, [pc, #116]	; (8005e24 <HAL_TIM_IC_Start_IT+0x284>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d009      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <HAL_TIM_IC_Start_IT+0x288>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d004      	beq.n	8005dc8 <HAL_TIM_IC_Start_IT+0x228>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1a      	ldr	r2, [pc, #104]	; (8005e2c <HAL_TIM_IC_Start_IT+0x28c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d115      	bne.n	8005df4 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	4b18      	ldr	r3, [pc, #96]	; (8005e30 <HAL_TIM_IC_Start_IT+0x290>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d015      	beq.n	8005e06 <HAL_TIM_IC_Start_IT+0x266>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de0:	d011      	beq.n	8005e06 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0201 	orr.w	r2, r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df2:	e008      	b.n	8005e06 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	40010000 	.word	0x40010000
 8005e18:	40000400 	.word	0x40000400
 8005e1c:	40000800 	.word	0x40000800
 8005e20:	40000c00 	.word	0x40000c00
 8005e24:	40010400 	.word	0x40010400
 8005e28:	40014000 	.word	0x40014000
 8005e2c:	40001800 	.word	0x40001800
 8005e30:	00010007 	.word	0x00010007

08005e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d122      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d11b      	bne.n	8005e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f06f 0202 	mvn.w	r2, #2
 8005e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fc f97e 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8005e7c:	e005      	b.n	8005e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fbf2 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fbf9 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d122      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d11b      	bne.n	8005ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f06f 0204 	mvn.w	r2, #4
 8005eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fc f954 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8005ed0:	e005      	b.n	8005ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fbc8 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fbcf 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d122      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	f003 0308 	and.w	r3, r3, #8
 8005efc:	2b08      	cmp	r3, #8
 8005efe:	d11b      	bne.n	8005f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f06f 0208 	mvn.w	r2, #8
 8005f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2204      	movs	r2, #4
 8005f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fc f92a 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8005f24:	e005      	b.n	8005f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fb9e 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 fba5 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d122      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0310 	and.w	r3, r3, #16
 8005f50:	2b10      	cmp	r3, #16
 8005f52:	d11b      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0210 	mvn.w	r2, #16
 8005f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2208      	movs	r2, #8
 8005f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fc f900 	bl	8002178 <HAL_TIM_IC_CaptureCallback>
 8005f78:	e005      	b.n	8005f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fb74 	bl	8006668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fb7b 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d10e      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d107      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0201 	mvn.w	r2, #1
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fb4e 	bl	8006654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d10e      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd0:	2b80      	cmp	r3, #128	; 0x80
 8005fd2:	d107      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f001 f9ee 	bl	80073c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff2:	d10e      	bne.n	8006012 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffe:	2b80      	cmp	r3, #128	; 0x80
 8006000:	d107      	bne.n	8006012 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800600a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f9e1 	bl	80073d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601c:	2b40      	cmp	r3, #64	; 0x40
 800601e:	d10e      	bne.n	800603e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d107      	bne.n	800603e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb29 	bl	8006690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	f003 0320 	and.w	r3, r3, #32
 8006048:	2b20      	cmp	r3, #32
 800604a:	d10e      	bne.n	800606a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b20      	cmp	r3, #32
 8006058:	d107      	bne.n	800606a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f06f 0220 	mvn.w	r2, #32
 8006062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 f9a1 	bl	80073ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606a:	bf00      	nop
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_TIM_IC_ConfigChannel+0x1a>
 8006088:	2302      	movs	r3, #2
 800608a:	e082      	b.n	8006192 <HAL_TIM_IC_ConfigChannel+0x120>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d11b      	bne.n	80060d2 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6819      	ldr	r1, [r3, #0]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f000 fe89 	bl	8006dc0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 020c 	bic.w	r2, r2, #12
 80060bc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6999      	ldr	r1, [r3, #24]
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	689a      	ldr	r2, [r3, #8]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	619a      	str	r2, [r3, #24]
 80060d0:	e05a      	b.n	8006188 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d11c      	bne.n	8006112 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6819      	ldr	r1, [r3, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f000 ff0d 	bl	8006f06 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060fa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6999      	ldr	r1, [r3, #24]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	619a      	str	r2, [r3, #24]
 8006110:	e03a      	b.n	8006188 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d11b      	bne.n	8006150 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	6819      	ldr	r1, [r3, #0]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f000 ff5a 	bl	8006fe0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 020c 	bic.w	r2, r2, #12
 800613a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69d9      	ldr	r1, [r3, #28]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	61da      	str	r2, [r3, #28]
 800614e:	e01b      	b.n	8006188 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6818      	ldr	r0, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	6819      	ldr	r1, [r3, #0]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f000 ff7a 	bl	8007058 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69da      	ldr	r2, [r3, #28]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006172:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	69d9      	ldr	r1, [r3, #28]
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	021a      	lsls	r2, r3, #8
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0fd      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b14      	cmp	r3, #20
 80061c2:	f200 80f0 	bhi.w	80063a6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	08006221 	.word	0x08006221
 80061d0:	080063a7 	.word	0x080063a7
 80061d4:	080063a7 	.word	0x080063a7
 80061d8:	080063a7 	.word	0x080063a7
 80061dc:	08006261 	.word	0x08006261
 80061e0:	080063a7 	.word	0x080063a7
 80061e4:	080063a7 	.word	0x080063a7
 80061e8:	080063a7 	.word	0x080063a7
 80061ec:	080062a3 	.word	0x080062a3
 80061f0:	080063a7 	.word	0x080063a7
 80061f4:	080063a7 	.word	0x080063a7
 80061f8:	080063a7 	.word	0x080063a7
 80061fc:	080062e3 	.word	0x080062e3
 8006200:	080063a7 	.word	0x080063a7
 8006204:	080063a7 	.word	0x080063a7
 8006208:	080063a7 	.word	0x080063a7
 800620c:	08006325 	.word	0x08006325
 8006210:	080063a7 	.word	0x080063a7
 8006214:	080063a7 	.word	0x080063a7
 8006218:	080063a7 	.word	0x080063a7
 800621c:	08006365 	.word	0x08006365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68b9      	ldr	r1, [r7, #8]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fadc 	bl	80067e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0208 	orr.w	r2, r2, #8
 800623a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0204 	bic.w	r2, r2, #4
 800624a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6999      	ldr	r1, [r3, #24]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	619a      	str	r2, [r3, #24]
      break;
 800625e:	e0a3      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fb2e 	bl	80068c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	021a      	lsls	r2, r3, #8
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	619a      	str	r2, [r3, #24]
      break;
 80062a0:	e082      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68b9      	ldr	r1, [r7, #8]
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fb85 	bl	80069b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0208 	orr.w	r2, r2, #8
 80062bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0204 	bic.w	r2, r2, #4
 80062cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69d9      	ldr	r1, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	61da      	str	r2, [r3, #28]
      break;
 80062e0:	e062      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fbdb 	bl	8006aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	021a      	lsls	r2, r3, #8
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	61da      	str	r2, [r3, #28]
      break;
 8006322:	e041      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fc12 	bl	8006b54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0208 	orr.w	r2, r2, #8
 800633e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0204 	bic.w	r2, r2, #4
 800634e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006362:	e021      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fc44 	bl	8006bf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063a4:	e000      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80063a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop

080063bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_TIM_ConfigClockSource+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0b3      	b.n	800653c <HAL_TIM_ConfigClockSource+0x180>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4b55      	ldr	r3, [pc, #340]	; (8006544 <HAL_TIM_ConfigClockSource+0x188>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640c:	d03e      	beq.n	800648c <HAL_TIM_ConfigClockSource+0xd0>
 800640e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006412:	f200 8087 	bhi.w	8006524 <HAL_TIM_ConfigClockSource+0x168>
 8006416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641a:	f000 8085 	beq.w	8006528 <HAL_TIM_ConfigClockSource+0x16c>
 800641e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006422:	d87f      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 8006424:	2b70      	cmp	r3, #112	; 0x70
 8006426:	d01a      	beq.n	800645e <HAL_TIM_ConfigClockSource+0xa2>
 8006428:	2b70      	cmp	r3, #112	; 0x70
 800642a:	d87b      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 800642c:	2b60      	cmp	r3, #96	; 0x60
 800642e:	d050      	beq.n	80064d2 <HAL_TIM_ConfigClockSource+0x116>
 8006430:	2b60      	cmp	r3, #96	; 0x60
 8006432:	d877      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 8006434:	2b50      	cmp	r3, #80	; 0x50
 8006436:	d03c      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0xf6>
 8006438:	2b50      	cmp	r3, #80	; 0x50
 800643a:	d873      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 800643c:	2b40      	cmp	r3, #64	; 0x40
 800643e:	d058      	beq.n	80064f2 <HAL_TIM_ConfigClockSource+0x136>
 8006440:	2b40      	cmp	r3, #64	; 0x40
 8006442:	d86f      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 8006444:	2b30      	cmp	r3, #48	; 0x30
 8006446:	d064      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x156>
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d86b      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 800644c:	2b20      	cmp	r3, #32
 800644e:	d060      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x156>
 8006450:	2b20      	cmp	r3, #32
 8006452:	d867      	bhi.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05c      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x156>
 8006458:	2b10      	cmp	r3, #16
 800645a:	d05a      	beq.n	8006512 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800645c:	e062      	b.n	8006524 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	6899      	ldr	r1, [r3, #8]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f000 fe4b 	bl	8007108 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006480:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	609a      	str	r2, [r3, #8]
      break;
 800648a:	e04e      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	6899      	ldr	r1, [r3, #8]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f000 fe34 	bl	8007108 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064ae:	609a      	str	r2, [r3, #8]
      break;
 80064b0:	e03b      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	461a      	mov	r2, r3
 80064c0:	f000 fcf2 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2150      	movs	r1, #80	; 0x50
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fe01 	bl	80070d2 <TIM_ITRx_SetConfig>
      break;
 80064d0:	e02b      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	6859      	ldr	r1, [r3, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	461a      	mov	r2, r3
 80064e0:	f000 fd4e 	bl	8006f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2160      	movs	r1, #96	; 0x60
 80064ea:	4618      	mov	r0, r3
 80064ec:	f000 fdf1 	bl	80070d2 <TIM_ITRx_SetConfig>
      break;
 80064f0:	e01b      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6859      	ldr	r1, [r3, #4]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	461a      	mov	r2, r3
 8006500:	f000 fcd2 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2140      	movs	r1, #64	; 0x40
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fde1 	bl	80070d2 <TIM_ITRx_SetConfig>
      break;
 8006510:	e00b      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f000 fdd8 	bl	80070d2 <TIM_ITRx_SetConfig>
        break;
 8006522:	e002      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006524:	bf00      	nop
 8006526:	e000      	b.n	800652a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006528:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	fffeff88 	.word	0xfffeff88

08006548 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIM_SlaveConfigSynchro+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e031      	b.n	80065c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 fb94 	bl	8006ca0 <TIM_SlaveTimer_SetConfig>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e018      	b.n	80065c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d831      	bhi.n	8006644 <HAL_TIM_ReadCapturedValue+0x78>
 80065e0:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	08006645 	.word	0x08006645
 80065f0:	08006645 	.word	0x08006645
 80065f4:	08006645 	.word	0x08006645
 80065f8:	08006627 	.word	0x08006627
 80065fc:	08006645 	.word	0x08006645
 8006600:	08006645 	.word	0x08006645
 8006604:	08006645 	.word	0x08006645
 8006608:	08006631 	.word	0x08006631
 800660c:	08006645 	.word	0x08006645
 8006610:	08006645 	.word	0x08006645
 8006614:	08006645 	.word	0x08006645
 8006618:	0800663b 	.word	0x0800663b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006622:	60fb      	str	r3, [r7, #12]

      break;
 8006624:	e00f      	b.n	8006646 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	60fb      	str	r3, [r7, #12]

      break;
 800662e:	e00a      	b.n	8006646 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006636:	60fb      	str	r3, [r7, #12]

      break;
 8006638:	e005      	b.n	8006646 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	60fb      	str	r3, [r7, #12]

      break;
 8006642:	e000      	b.n	8006646 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006644:	bf00      	nop
  }

  return tmpreg;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a40      	ldr	r2, [pc, #256]	; (80067b8 <TIM_Base_SetConfig+0x114>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c2:	d00f      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3d      	ldr	r2, [pc, #244]	; (80067bc <TIM_Base_SetConfig+0x118>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3c      	ldr	r2, [pc, #240]	; (80067c0 <TIM_Base_SetConfig+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a3b      	ldr	r2, [pc, #236]	; (80067c4 <TIM_Base_SetConfig+0x120>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a3a      	ldr	r2, [pc, #232]	; (80067c8 <TIM_Base_SetConfig+0x124>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d108      	bne.n	80066f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2f      	ldr	r2, [pc, #188]	; (80067b8 <TIM_Base_SetConfig+0x114>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d02b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006704:	d027      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <TIM_Base_SetConfig+0x118>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d023      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2b      	ldr	r2, [pc, #172]	; (80067c0 <TIM_Base_SetConfig+0x11c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <TIM_Base_SetConfig+0x120>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a29      	ldr	r2, [pc, #164]	; (80067c8 <TIM_Base_SetConfig+0x124>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d017      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a28      	ldr	r2, [pc, #160]	; (80067cc <TIM_Base_SetConfig+0x128>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a27      	ldr	r2, [pc, #156]	; (80067d0 <TIM_Base_SetConfig+0x12c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <TIM_Base_SetConfig+0x130>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <TIM_Base_SetConfig+0x134>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a24      	ldr	r2, [pc, #144]	; (80067dc <TIM_Base_SetConfig+0x138>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a23      	ldr	r2, [pc, #140]	; (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <TIM_Base_SetConfig+0x114>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0xf8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a0c      	ldr	r2, [pc, #48]	; (80067c8 <TIM_Base_SetConfig+0x124>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d103      	bne.n	80067a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	615a      	str	r2, [r3, #20]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800
 80067d8:	40001800 	.word	0x40001800
 80067dc:	40001c00 	.word	0x40001c00
 80067e0:	40002000 	.word	0x40002000

080067e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b087      	sub	sp, #28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4b2b      	ldr	r3, [pc, #172]	; (80068bc <TIM_OC1_SetConfig+0xd8>)
 8006810:	4013      	ands	r3, r2
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0303 	bic.w	r3, r3, #3
 800681a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	f023 0302 	bic.w	r3, r3, #2
 800682c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a21      	ldr	r2, [pc, #132]	; (80068c0 <TIM_OC1_SetConfig+0xdc>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC1_SetConfig+0x64>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a20      	ldr	r2, [pc, #128]	; (80068c4 <TIM_OC1_SetConfig+0xe0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10c      	bne.n	8006862 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0308 	bic.w	r3, r3, #8
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 0304 	bic.w	r3, r3, #4
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <TIM_OC1_SetConfig+0xdc>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d003      	beq.n	8006872 <TIM_OC1_SetConfig+0x8e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a15      	ldr	r2, [pc, #84]	; (80068c4 <TIM_OC1_SetConfig+0xe0>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d111      	bne.n	8006896 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	621a      	str	r2, [r3, #32]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	fffeff8f 	.word	0xfffeff8f
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40010400 	.word	0x40010400

080068c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0210 	bic.w	r2, r3, #16
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4b2e      	ldr	r3, [pc, #184]	; (80069ac <TIM_OC2_SetConfig+0xe4>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f023 0320 	bic.w	r3, r3, #32
 8006912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <TIM_OC2_SetConfig+0xe8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_OC2_SetConfig+0x68>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <TIM_OC2_SetConfig+0xec>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10d      	bne.n	800694c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800694a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a18      	ldr	r2, [pc, #96]	; (80069b0 <TIM_OC2_SetConfig+0xe8>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC2_SetConfig+0x94>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <TIM_OC2_SetConfig+0xec>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d113      	bne.n	8006984 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	feff8fff 	.word	0xfeff8fff
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40010400 	.word	0x40010400

080069b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4b2d      	ldr	r3, [pc, #180]	; (8006a98 <TIM_OC3_SetConfig+0xe0>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a22      	ldr	r2, [pc, #136]	; (8006a9c <TIM_OC3_SetConfig+0xe4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC3_SetConfig+0x66>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a21      	ldr	r2, [pc, #132]	; (8006aa0 <TIM_OC3_SetConfig+0xe8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d10d      	bne.n	8006a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <TIM_OC3_SetConfig+0xe4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_OC3_SetConfig+0x92>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <TIM_OC3_SetConfig+0xe8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d113      	bne.n	8006a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	621a      	str	r2, [r3, #32]
}
 8006a8c:	bf00      	nop
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	fffeff8f 	.word	0xfffeff8f
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40010400 	.word	0x40010400

08006aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4b1e      	ldr	r3, [pc, #120]	; (8006b48 <TIM_OC4_SetConfig+0xa4>)
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	031b      	lsls	r3, r3, #12
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a13      	ldr	r2, [pc, #76]	; (8006b4c <TIM_OC4_SetConfig+0xa8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_OC4_SetConfig+0x68>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a12      	ldr	r2, [pc, #72]	; (8006b50 <TIM_OC4_SetConfig+0xac>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d109      	bne.n	8006b20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	feff8fff 	.word	0xfeff8fff
 8006b4c:	40010000 	.word	0x40010000
 8006b50:	40010400 	.word	0x40010400

08006b54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <TIM_OC5_SetConfig+0x98>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a12      	ldr	r2, [pc, #72]	; (8006bf0 <TIM_OC5_SetConfig+0x9c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d003      	beq.n	8006bb2 <TIM_OC5_SetConfig+0x5e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a11      	ldr	r2, [pc, #68]	; (8006bf4 <TIM_OC5_SetConfig+0xa0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d109      	bne.n	8006bc6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	021b      	lsls	r3, r3, #8
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	621a      	str	r2, [r3, #32]
}
 8006be0:	bf00      	nop
 8006be2:	371c      	adds	r7, #28
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	fffeff8f 	.word	0xfffeff8f
 8006bf0:	40010000 	.word	0x40010000
 8006bf4:	40010400 	.word	0x40010400

08006bf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <TIM_OC6_SetConfig+0x9c>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	051b      	lsls	r3, r3, #20
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a13      	ldr	r2, [pc, #76]	; (8006c98 <TIM_OC6_SetConfig+0xa0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC6_SetConfig+0x60>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a12      	ldr	r2, [pc, #72]	; (8006c9c <TIM_OC6_SetConfig+0xa4>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d109      	bne.n	8006c6c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	029b      	lsls	r3, r3, #10
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	621a      	str	r2, [r3, #32]
}
 8006c86:	bf00      	nop
 8006c88:	371c      	adds	r7, #28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	feff8fff 	.word	0xfeff8fff
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400

08006ca0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4b3d      	ldr	r3, [pc, #244]	; (8006dbc <TIM_SlaveTimer_SetConfig+0x11c>)
 8006cc8:	4013      	ands	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	2b70      	cmp	r3, #112	; 0x70
 8006ce4:	d01a      	beq.n	8006d1c <TIM_SlaveTimer_SetConfig+0x7c>
 8006ce6:	2b70      	cmp	r3, #112	; 0x70
 8006ce8:	d860      	bhi.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
 8006cea:	2b60      	cmp	r3, #96	; 0x60
 8006cec:	d054      	beq.n	8006d98 <TIM_SlaveTimer_SetConfig+0xf8>
 8006cee:	2b60      	cmp	r3, #96	; 0x60
 8006cf0:	d85c      	bhi.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
 8006cf2:	2b50      	cmp	r3, #80	; 0x50
 8006cf4:	d046      	beq.n	8006d84 <TIM_SlaveTimer_SetConfig+0xe4>
 8006cf6:	2b50      	cmp	r3, #80	; 0x50
 8006cf8:	d858      	bhi.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
 8006cfa:	2b40      	cmp	r3, #64	; 0x40
 8006cfc:	d019      	beq.n	8006d32 <TIM_SlaveTimer_SetConfig+0x92>
 8006cfe:	2b40      	cmp	r3, #64	; 0x40
 8006d00:	d854      	bhi.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
 8006d02:	2b30      	cmp	r3, #48	; 0x30
 8006d04:	d054      	beq.n	8006db0 <TIM_SlaveTimer_SetConfig+0x110>
 8006d06:	2b30      	cmp	r3, #48	; 0x30
 8006d08:	d850      	bhi.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d050      	beq.n	8006db0 <TIM_SlaveTimer_SetConfig+0x110>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d84c      	bhi.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d04c      	beq.n	8006db0 <TIM_SlaveTimer_SetConfig+0x110>
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d04a      	beq.n	8006db0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006d1a:	e047      	b.n	8006dac <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68d9      	ldr	r1, [r3, #12]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f000 f9ec 	bl	8007108 <TIM_ETR_SetConfig>
      break;
 8006d30:	e03f      	b.n	8006db2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d101      	bne.n	8006d3e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e03a      	b.n	8006db4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a1a      	ldr	r2, [r3, #32]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0201 	bic.w	r2, r2, #1
 8006d54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d64:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	621a      	str	r2, [r3, #32]
      break;
 8006d82:	e016      	b.n	8006db2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6899      	ldr	r1, [r3, #8]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	461a      	mov	r2, r3
 8006d92:	f000 f889 	bl	8006ea8 <TIM_TI1_ConfigInputStage>
      break;
 8006d96:	e00c      	b.n	8006db2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	6899      	ldr	r1, [r3, #8]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	461a      	mov	r2, r3
 8006da6:	f000 f8eb 	bl	8006f80 <TIM_TI2_ConfigInputStage>
      break;
 8006daa:	e002      	b.n	8006db2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006dac:	bf00      	nop
 8006dae:	e000      	b.n	8006db2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006db0:	bf00      	nop
  }
  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	fffefff8 	.word	0xfffefff8

08006dc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
 8006dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4a28      	ldr	r2, [pc, #160]	; (8006e8c <TIM_TI1_SetConfig+0xcc>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d01b      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df4:	d017      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a25      	ldr	r2, [pc, #148]	; (8006e90 <TIM_TI1_SetConfig+0xd0>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4a24      	ldr	r2, [pc, #144]	; (8006e94 <TIM_TI1_SetConfig+0xd4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00f      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4a23      	ldr	r2, [pc, #140]	; (8006e98 <TIM_TI1_SetConfig+0xd8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00b      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a22      	ldr	r2, [pc, #136]	; (8006e9c <TIM_TI1_SetConfig+0xdc>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a21      	ldr	r2, [pc, #132]	; (8006ea0 <TIM_TI1_SetConfig+0xe0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_TI1_SetConfig+0x66>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <TIM_TI1_SetConfig+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d101      	bne.n	8006e2a <TIM_TI1_SetConfig+0x6a>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <TIM_TI1_SetConfig+0x6c>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0303 	bic.w	r3, r3, #3
 8006e36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	e003      	b.n	8006e4a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f043 0301 	orr.w	r3, r3, #1
 8006e48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f023 030a 	bic.w	r3, r3, #10
 8006e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f003 030a 	and.w	r3, r3, #10
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800
 8006e98:	40000c00 	.word	0x40000c00
 8006e9c:	40010400 	.word	0x40010400
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40001800 	.word	0x40001800

08006ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0201 	bic.w	r2, r3, #1
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	011b      	lsls	r3, r3, #4
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 030a 	bic.w	r3, r3, #10
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	621a      	str	r2, [r3, #32]
}
 8006efa:	bf00      	nop
 8006efc:	371c      	adds	r7, #28
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b087      	sub	sp, #28
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f023 0210 	bic.w	r2, r3, #16
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	021b      	lsls	r3, r3, #8
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	031b      	lsls	r3, r3, #12
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f023 0210 	bic.w	r2, r3, #16
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	031b      	lsls	r3, r3, #12
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	69db      	ldr	r3, [r3, #28]
 8006ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	011b      	lsls	r3, r3, #4
 8007022:	b2db      	uxtb	r3, r3
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007030:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	621a      	str	r2, [r3, #32]
}
 800704c:	bf00      	nop
 800704e:	371c      	adds	r7, #28
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007096:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	031b      	lsls	r3, r3, #12
 800709c:	b29b      	uxth	r3, r3
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80070aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	031b      	lsls	r3, r3, #12
 80070b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	697a      	ldr	r2, [r7, #20]
 80070be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	621a      	str	r2, [r3, #32]
}
 80070c6:	bf00      	nop
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f043 0307 	orr.w	r3, r3, #7
 80070f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	609a      	str	r2, [r3, #8]
}
 80070fc:	bf00      	nop
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	021a      	lsls	r2, r3, #8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	431a      	orrs	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4313      	orrs	r3, r2
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	609a      	str	r2, [r3, #8]
}
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2201      	movs	r2, #1
 800715c:	fa02 f303 	lsl.w	r3, r2, r3
 8007160:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	43db      	mvns	r3, r3
 800716a:	401a      	ands	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1a      	ldr	r2, [r3, #32]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	fa01 f303 	lsl.w	r3, r1, r3
 8007180:	431a      	orrs	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	621a      	str	r2, [r3, #32]
}
 8007186:	bf00      	nop
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
	...

08007194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e06d      	b.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a30      	ldr	r2, [pc, #192]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d004      	beq.n	80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a2f      	ldr	r2, [pc, #188]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d108      	bne.n	80071f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a20      	ldr	r2, [pc, #128]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d022      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d01d      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a1d      	ldr	r2, [pc, #116]	; (800729c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d018      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1c      	ldr	r2, [pc, #112]	; (80072a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1a      	ldr	r2, [pc, #104]	; (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00e      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a16      	ldr	r2, [pc, #88]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a15      	ldr	r2, [pc, #84]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d10c      	bne.n	8007276 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007262:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	4313      	orrs	r3, r2
 800726c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	40010000 	.word	0x40010000
 8007298:	40010400 	.word	0x40010400
 800729c:	40000400 	.word	0x40000400
 80072a0:	40000800 	.word	0x40000800
 80072a4:	40000c00 	.word	0x40000c00
 80072a8:	40014000 	.word	0x40014000
 80072ac:	40001800 	.word	0x40001800

080072b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e065      	b.n	8007398 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	695b      	ldr	r3, [r3, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	041b      	lsls	r3, r3, #16
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d004      	beq.n	800735a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d115      	bne.n	8007386 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	051b      	lsls	r3, r3, #20
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	40010000 	.word	0x40010000
 80073a8:	40010400 	.word	0x40010400

080073ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e040      	b.n	800747c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d106      	bne.n	8007410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f7fb ff18 	bl	8003240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2224      	movs	r2, #36	; 0x24
 8007414:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f990 	bl	800774c <UART_SetConfig>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e022      	b.n	800747c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fbe6 	bl	8007c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689a      	ldr	r2, [r3, #8]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f042 0201 	orr.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc6d 	bl	8007d54 <UART_CheckIdleState>
 800747a:	4603      	mov	r3, r0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3708      	adds	r7, #8
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	4613      	mov	r3, r2
 8007492:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007498:	2b20      	cmp	r3, #32
 800749a:	f040 8081 	bne.w	80075a0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <HAL_UART_Transmit+0x26>
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d101      	bne.n	80074ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e079      	b.n	80075a2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_UART_Transmit+0x38>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e072      	b.n	80075a2 <HAL_UART_Transmit+0x11e>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2221      	movs	r2, #33	; 0x21
 80074d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074d2:	f7fc f9c7 	bl	8003864 <HAL_GetTick>
 80074d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f0:	d108      	bne.n	8007504 <HAL_UART_Transmit+0x80>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e003      	b.n	800750c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007514:	e02c      	b.n	8007570 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2200      	movs	r2, #0
 800751e:	2180      	movs	r1, #128	; 0x80
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f000 fc4a 	bl	8007dba <UART_WaitOnFlagUntilTimeout>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e038      	b.n	80075a2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007544:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	3302      	adds	r3, #2
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	e007      	b.n	800755e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	3301      	adds	r3, #1
 800755c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007564:	b29b      	uxth	r3, r3
 8007566:	3b01      	subs	r3, #1
 8007568:	b29a      	uxth	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007576:	b29b      	uxth	r3, r3
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1cc      	bne.n	8007516 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2200      	movs	r2, #0
 8007584:	2140      	movs	r1, #64	; 0x40
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 fc17 	bl	8007dba <UART_WaitOnFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e005      	b.n	80075a2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80075a0:	2302      	movs	r3, #2
  }
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b08a      	sub	sp, #40	; 0x28
 80075ae:	af02      	add	r7, sp, #8
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075be:	2b20      	cmp	r3, #32
 80075c0:	f040 80be 	bne.w	8007740 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_UART_Receive+0x26>
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0b6      	b.n	8007742 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Receive+0x38>
 80075de:	2302      	movs	r3, #2
 80075e0:	e0af      	b.n	8007742 <HAL_UART_Receive+0x198>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2222      	movs	r2, #34	; 0x22
 80075f6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075fe:	f7fc f931 	bl	8003864 <HAL_GetTick>
 8007602:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	88fa      	ldrh	r2, [r7, #6]
 8007608:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761c:	d10e      	bne.n	800763c <HAL_UART_Receive+0x92>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <HAL_UART_Receive+0x88>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f240 12ff 	movw	r2, #511	; 0x1ff
 800762c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007630:	e02d      	b.n	800768e <HAL_UART_Receive+0xe4>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800763a:	e028      	b.n	800768e <HAL_UART_Receive+0xe4>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <HAL_UART_Receive+0xb6>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <HAL_UART_Receive+0xac>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	22ff      	movs	r2, #255	; 0xff
 8007650:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007654:	e01b      	b.n	800768e <HAL_UART_Receive+0xe4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	227f      	movs	r2, #127	; 0x7f
 800765a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800765e:	e016      	b.n	800768e <HAL_UART_Receive+0xe4>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007668:	d10d      	bne.n	8007686 <HAL_UART_Receive+0xdc>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d104      	bne.n	800767c <HAL_UART_Receive+0xd2>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	227f      	movs	r2, #127	; 0x7f
 8007676:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800767a:	e008      	b.n	800768e <HAL_UART_Receive+0xe4>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	223f      	movs	r2, #63	; 0x3f
 8007680:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007684:	e003      	b.n	800768e <HAL_UART_Receive+0xe4>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007694:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769e:	d108      	bne.n	80076b2 <HAL_UART_Receive+0x108>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d104      	bne.n	80076b2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	e003      	b.n	80076ba <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80076c2:	e032      	b.n	800772a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2200      	movs	r2, #0
 80076cc:	2120      	movs	r1, #32
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fb73 	bl	8007dba <UART_WaitOnFlagUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e031      	b.n	8007742 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10c      	bne.n	80076fe <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	8a7b      	ldrh	r3, [r7, #18]
 80076ee:	4013      	ands	r3, r2
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	3302      	adds	r3, #2
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	e00c      	b.n	8007718 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	b2da      	uxtb	r2, r3
 8007706:	8a7b      	ldrh	r3, [r7, #18]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	4013      	ands	r3, r2
 800770c:	b2da      	uxtb	r2, r3
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	3301      	adds	r3, #1
 8007716:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1c6      	bne.n	80076c4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	431a      	orrs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	431a      	orrs	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	69db      	ldr	r3, [r3, #28]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4ba7      	ldr	r3, [pc, #668]	; (8007a14 <UART_SetConfig+0x2c8>)
 8007778:	4013      	ands	r3, r2
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6812      	ldr	r2, [r2, #0]
 800777e:	6979      	ldr	r1, [r7, #20]
 8007780:	430b      	orrs	r3, r1
 8007782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a95      	ldr	r2, [pc, #596]	; (8007a18 <UART_SetConfig+0x2cc>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d120      	bne.n	800780a <UART_SetConfig+0xbe>
 80077c8:	4b94      	ldr	r3, [pc, #592]	; (8007a1c <UART_SetConfig+0x2d0>)
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d816      	bhi.n	8007804 <UART_SetConfig+0xb8>
 80077d6:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <UART_SetConfig+0x90>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	080077ed 	.word	0x080077ed
 80077e0:	080077f9 	.word	0x080077f9
 80077e4:	080077f3 	.word	0x080077f3
 80077e8:	080077ff 	.word	0x080077ff
 80077ec:	2301      	movs	r3, #1
 80077ee:	77fb      	strb	r3, [r7, #31]
 80077f0:	e14f      	b.n	8007a92 <UART_SetConfig+0x346>
 80077f2:	2302      	movs	r3, #2
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e14c      	b.n	8007a92 <UART_SetConfig+0x346>
 80077f8:	2304      	movs	r3, #4
 80077fa:	77fb      	strb	r3, [r7, #31]
 80077fc:	e149      	b.n	8007a92 <UART_SetConfig+0x346>
 80077fe:	2308      	movs	r3, #8
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	e146      	b.n	8007a92 <UART_SetConfig+0x346>
 8007804:	2310      	movs	r3, #16
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e143      	b.n	8007a92 <UART_SetConfig+0x346>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a84      	ldr	r2, [pc, #528]	; (8007a20 <UART_SetConfig+0x2d4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d132      	bne.n	800787a <UART_SetConfig+0x12e>
 8007814:	4b81      	ldr	r3, [pc, #516]	; (8007a1c <UART_SetConfig+0x2d0>)
 8007816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	2b0c      	cmp	r3, #12
 8007820:	d828      	bhi.n	8007874 <UART_SetConfig+0x128>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <UART_SetConfig+0xdc>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	0800785d 	.word	0x0800785d
 800782c:	08007875 	.word	0x08007875
 8007830:	08007875 	.word	0x08007875
 8007834:	08007875 	.word	0x08007875
 8007838:	08007869 	.word	0x08007869
 800783c:	08007875 	.word	0x08007875
 8007840:	08007875 	.word	0x08007875
 8007844:	08007875 	.word	0x08007875
 8007848:	08007863 	.word	0x08007863
 800784c:	08007875 	.word	0x08007875
 8007850:	08007875 	.word	0x08007875
 8007854:	08007875 	.word	0x08007875
 8007858:	0800786f 	.word	0x0800786f
 800785c:	2300      	movs	r3, #0
 800785e:	77fb      	strb	r3, [r7, #31]
 8007860:	e117      	b.n	8007a92 <UART_SetConfig+0x346>
 8007862:	2302      	movs	r3, #2
 8007864:	77fb      	strb	r3, [r7, #31]
 8007866:	e114      	b.n	8007a92 <UART_SetConfig+0x346>
 8007868:	2304      	movs	r3, #4
 800786a:	77fb      	strb	r3, [r7, #31]
 800786c:	e111      	b.n	8007a92 <UART_SetConfig+0x346>
 800786e:	2308      	movs	r3, #8
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e10e      	b.n	8007a92 <UART_SetConfig+0x346>
 8007874:	2310      	movs	r3, #16
 8007876:	77fb      	strb	r3, [r7, #31]
 8007878:	e10b      	b.n	8007a92 <UART_SetConfig+0x346>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a69      	ldr	r2, [pc, #420]	; (8007a24 <UART_SetConfig+0x2d8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d120      	bne.n	80078c6 <UART_SetConfig+0x17a>
 8007884:	4b65      	ldr	r3, [pc, #404]	; (8007a1c <UART_SetConfig+0x2d0>)
 8007886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800788a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800788e:	2b30      	cmp	r3, #48	; 0x30
 8007890:	d013      	beq.n	80078ba <UART_SetConfig+0x16e>
 8007892:	2b30      	cmp	r3, #48	; 0x30
 8007894:	d814      	bhi.n	80078c0 <UART_SetConfig+0x174>
 8007896:	2b20      	cmp	r3, #32
 8007898:	d009      	beq.n	80078ae <UART_SetConfig+0x162>
 800789a:	2b20      	cmp	r3, #32
 800789c:	d810      	bhi.n	80078c0 <UART_SetConfig+0x174>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <UART_SetConfig+0x15c>
 80078a2:	2b10      	cmp	r3, #16
 80078a4:	d006      	beq.n	80078b4 <UART_SetConfig+0x168>
 80078a6:	e00b      	b.n	80078c0 <UART_SetConfig+0x174>
 80078a8:	2300      	movs	r3, #0
 80078aa:	77fb      	strb	r3, [r7, #31]
 80078ac:	e0f1      	b.n	8007a92 <UART_SetConfig+0x346>
 80078ae:	2302      	movs	r3, #2
 80078b0:	77fb      	strb	r3, [r7, #31]
 80078b2:	e0ee      	b.n	8007a92 <UART_SetConfig+0x346>
 80078b4:	2304      	movs	r3, #4
 80078b6:	77fb      	strb	r3, [r7, #31]
 80078b8:	e0eb      	b.n	8007a92 <UART_SetConfig+0x346>
 80078ba:	2308      	movs	r3, #8
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	e0e8      	b.n	8007a92 <UART_SetConfig+0x346>
 80078c0:	2310      	movs	r3, #16
 80078c2:	77fb      	strb	r3, [r7, #31]
 80078c4:	e0e5      	b.n	8007a92 <UART_SetConfig+0x346>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a57      	ldr	r2, [pc, #348]	; (8007a28 <UART_SetConfig+0x2dc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d120      	bne.n	8007912 <UART_SetConfig+0x1c6>
 80078d0:	4b52      	ldr	r3, [pc, #328]	; (8007a1c <UART_SetConfig+0x2d0>)
 80078d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078da:	2bc0      	cmp	r3, #192	; 0xc0
 80078dc:	d013      	beq.n	8007906 <UART_SetConfig+0x1ba>
 80078de:	2bc0      	cmp	r3, #192	; 0xc0
 80078e0:	d814      	bhi.n	800790c <UART_SetConfig+0x1c0>
 80078e2:	2b80      	cmp	r3, #128	; 0x80
 80078e4:	d009      	beq.n	80078fa <UART_SetConfig+0x1ae>
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d810      	bhi.n	800790c <UART_SetConfig+0x1c0>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <UART_SetConfig+0x1a8>
 80078ee:	2b40      	cmp	r3, #64	; 0x40
 80078f0:	d006      	beq.n	8007900 <UART_SetConfig+0x1b4>
 80078f2:	e00b      	b.n	800790c <UART_SetConfig+0x1c0>
 80078f4:	2300      	movs	r3, #0
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e0cb      	b.n	8007a92 <UART_SetConfig+0x346>
 80078fa:	2302      	movs	r3, #2
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e0c8      	b.n	8007a92 <UART_SetConfig+0x346>
 8007900:	2304      	movs	r3, #4
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e0c5      	b.n	8007a92 <UART_SetConfig+0x346>
 8007906:	2308      	movs	r3, #8
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e0c2      	b.n	8007a92 <UART_SetConfig+0x346>
 800790c:	2310      	movs	r3, #16
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e0bf      	b.n	8007a92 <UART_SetConfig+0x346>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a45      	ldr	r2, [pc, #276]	; (8007a2c <UART_SetConfig+0x2e0>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d125      	bne.n	8007968 <UART_SetConfig+0x21c>
 800791c:	4b3f      	ldr	r3, [pc, #252]	; (8007a1c <UART_SetConfig+0x2d0>)
 800791e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800792a:	d017      	beq.n	800795c <UART_SetConfig+0x210>
 800792c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007930:	d817      	bhi.n	8007962 <UART_SetConfig+0x216>
 8007932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007936:	d00b      	beq.n	8007950 <UART_SetConfig+0x204>
 8007938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793c:	d811      	bhi.n	8007962 <UART_SetConfig+0x216>
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <UART_SetConfig+0x1fe>
 8007942:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007946:	d006      	beq.n	8007956 <UART_SetConfig+0x20a>
 8007948:	e00b      	b.n	8007962 <UART_SetConfig+0x216>
 800794a:	2300      	movs	r3, #0
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e0a0      	b.n	8007a92 <UART_SetConfig+0x346>
 8007950:	2302      	movs	r3, #2
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e09d      	b.n	8007a92 <UART_SetConfig+0x346>
 8007956:	2304      	movs	r3, #4
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e09a      	b.n	8007a92 <UART_SetConfig+0x346>
 800795c:	2308      	movs	r3, #8
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e097      	b.n	8007a92 <UART_SetConfig+0x346>
 8007962:	2310      	movs	r3, #16
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e094      	b.n	8007a92 <UART_SetConfig+0x346>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a30      	ldr	r2, [pc, #192]	; (8007a30 <UART_SetConfig+0x2e4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d125      	bne.n	80079be <UART_SetConfig+0x272>
 8007972:	4b2a      	ldr	r3, [pc, #168]	; (8007a1c <UART_SetConfig+0x2d0>)
 8007974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007978:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800797c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007980:	d017      	beq.n	80079b2 <UART_SetConfig+0x266>
 8007982:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007986:	d817      	bhi.n	80079b8 <UART_SetConfig+0x26c>
 8007988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800798c:	d00b      	beq.n	80079a6 <UART_SetConfig+0x25a>
 800798e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007992:	d811      	bhi.n	80079b8 <UART_SetConfig+0x26c>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d003      	beq.n	80079a0 <UART_SetConfig+0x254>
 8007998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800799c:	d006      	beq.n	80079ac <UART_SetConfig+0x260>
 800799e:	e00b      	b.n	80079b8 <UART_SetConfig+0x26c>
 80079a0:	2301      	movs	r3, #1
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e075      	b.n	8007a92 <UART_SetConfig+0x346>
 80079a6:	2302      	movs	r3, #2
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e072      	b.n	8007a92 <UART_SetConfig+0x346>
 80079ac:	2304      	movs	r3, #4
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e06f      	b.n	8007a92 <UART_SetConfig+0x346>
 80079b2:	2308      	movs	r3, #8
 80079b4:	77fb      	strb	r3, [r7, #31]
 80079b6:	e06c      	b.n	8007a92 <UART_SetConfig+0x346>
 80079b8:	2310      	movs	r3, #16
 80079ba:	77fb      	strb	r3, [r7, #31]
 80079bc:	e069      	b.n	8007a92 <UART_SetConfig+0x346>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1c      	ldr	r2, [pc, #112]	; (8007a34 <UART_SetConfig+0x2e8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d137      	bne.n	8007a38 <UART_SetConfig+0x2ec>
 80079c8:	4b14      	ldr	r3, [pc, #80]	; (8007a1c <UART_SetConfig+0x2d0>)
 80079ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079d6:	d017      	beq.n	8007a08 <UART_SetConfig+0x2bc>
 80079d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079dc:	d817      	bhi.n	8007a0e <UART_SetConfig+0x2c2>
 80079de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e2:	d00b      	beq.n	80079fc <UART_SetConfig+0x2b0>
 80079e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e8:	d811      	bhi.n	8007a0e <UART_SetConfig+0x2c2>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <UART_SetConfig+0x2aa>
 80079ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079f2:	d006      	beq.n	8007a02 <UART_SetConfig+0x2b6>
 80079f4:	e00b      	b.n	8007a0e <UART_SetConfig+0x2c2>
 80079f6:	2300      	movs	r3, #0
 80079f8:	77fb      	strb	r3, [r7, #31]
 80079fa:	e04a      	b.n	8007a92 <UART_SetConfig+0x346>
 80079fc:	2302      	movs	r3, #2
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e047      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a02:	2304      	movs	r3, #4
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e044      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a08:	2308      	movs	r3, #8
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e041      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a0e:	2310      	movs	r3, #16
 8007a10:	77fb      	strb	r3, [r7, #31]
 8007a12:	e03e      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a14:	efff69f3 	.word	0xefff69f3
 8007a18:	40011000 	.word	0x40011000
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	40004400 	.word	0x40004400
 8007a24:	40004800 	.word	0x40004800
 8007a28:	40004c00 	.word	0x40004c00
 8007a2c:	40005000 	.word	0x40005000
 8007a30:	40011400 	.word	0x40011400
 8007a34:	40007800 	.word	0x40007800
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a71      	ldr	r2, [pc, #452]	; (8007c04 <UART_SetConfig+0x4b8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d125      	bne.n	8007a8e <UART_SetConfig+0x342>
 8007a42:	4b71      	ldr	r3, [pc, #452]	; (8007c08 <UART_SetConfig+0x4bc>)
 8007a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a50:	d017      	beq.n	8007a82 <UART_SetConfig+0x336>
 8007a52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a56:	d817      	bhi.n	8007a88 <UART_SetConfig+0x33c>
 8007a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5c:	d00b      	beq.n	8007a76 <UART_SetConfig+0x32a>
 8007a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a62:	d811      	bhi.n	8007a88 <UART_SetConfig+0x33c>
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <UART_SetConfig+0x324>
 8007a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a6c:	d006      	beq.n	8007a7c <UART_SetConfig+0x330>
 8007a6e:	e00b      	b.n	8007a88 <UART_SetConfig+0x33c>
 8007a70:	2300      	movs	r3, #0
 8007a72:	77fb      	strb	r3, [r7, #31]
 8007a74:	e00d      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a76:	2302      	movs	r3, #2
 8007a78:	77fb      	strb	r3, [r7, #31]
 8007a7a:	e00a      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	77fb      	strb	r3, [r7, #31]
 8007a80:	e007      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a82:	2308      	movs	r3, #8
 8007a84:	77fb      	strb	r3, [r7, #31]
 8007a86:	e004      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a88:	2310      	movs	r3, #16
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e001      	b.n	8007a92 <UART_SetConfig+0x346>
 8007a8e:	2310      	movs	r3, #16
 8007a90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a9a:	d15b      	bne.n	8007b54 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8007a9c:	7ffb      	ldrb	r3, [r7, #31]
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d827      	bhi.n	8007af2 <UART_SetConfig+0x3a6>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <UART_SetConfig+0x35c>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007add 	.word	0x08007add
 8007ab4:	08007af3 	.word	0x08007af3
 8007ab8:	08007ae3 	.word	0x08007ae3
 8007abc:	08007af3 	.word	0x08007af3
 8007ac0:	08007af3 	.word	0x08007af3
 8007ac4:	08007af3 	.word	0x08007af3
 8007ac8:	08007aeb 	.word	0x08007aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007acc:	f7fd fa3c 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8007ad0:	61b8      	str	r0, [r7, #24]
        break;
 8007ad2:	e013      	b.n	8007afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad4:	f7fd fa4c 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8007ad8:	61b8      	str	r0, [r7, #24]
        break;
 8007ada:	e00f      	b.n	8007afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007adc:	4b4b      	ldr	r3, [pc, #300]	; (8007c0c <UART_SetConfig+0x4c0>)
 8007ade:	61bb      	str	r3, [r7, #24]
        break;
 8007ae0:	e00c      	b.n	8007afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ae2:	f7fd f96f 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8007ae6:	61b8      	str	r0, [r7, #24]
        break;
 8007ae8:	e008      	b.n	8007afc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aee:	61bb      	str	r3, [r7, #24]
        break;
 8007af0:	e004      	b.n	8007afc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	77bb      	strb	r3, [r7, #30]
        break;
 8007afa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d074      	beq.n	8007bec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	005a      	lsls	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	2b0f      	cmp	r3, #15
 8007b1e:	d916      	bls.n	8007b4e <UART_SetConfig+0x402>
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b26:	d212      	bcs.n	8007b4e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f023 030f 	bic.w	r3, r3, #15
 8007b30:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	085b      	lsrs	r3, r3, #1
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	89fb      	ldrh	r3, [r7, #14]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	89fa      	ldrh	r2, [r7, #14]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	e04e      	b.n	8007bec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	77bb      	strb	r3, [r7, #30]
 8007b52:	e04b      	b.n	8007bec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b54:	7ffb      	ldrb	r3, [r7, #31]
 8007b56:	2b08      	cmp	r3, #8
 8007b58:	d827      	bhi.n	8007baa <UART_SetConfig+0x45e>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0x414>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b8d 	.word	0x08007b8d
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	08007bab 	.word	0x08007bab
 8007b70:	08007b9b 	.word	0x08007b9b
 8007b74:	08007bab 	.word	0x08007bab
 8007b78:	08007bab 	.word	0x08007bab
 8007b7c:	08007bab 	.word	0x08007bab
 8007b80:	08007ba3 	.word	0x08007ba3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b84:	f7fd f9e0 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8007b88:	61b8      	str	r0, [r7, #24]
        break;
 8007b8a:	e013      	b.n	8007bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b8c:	f7fd f9f0 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 8007b90:	61b8      	str	r0, [r7, #24]
        break;
 8007b92:	e00f      	b.n	8007bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <UART_SetConfig+0x4c0>)
 8007b96:	61bb      	str	r3, [r7, #24]
        break;
 8007b98:	e00c      	b.n	8007bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b9a:	f7fd f913 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8007b9e:	61b8      	str	r0, [r7, #24]
        break;
 8007ba0:	e008      	b.n	8007bb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba6:	61bb      	str	r3, [r7, #24]
        break;
 8007ba8:	e004      	b.n	8007bb4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	77bb      	strb	r3, [r7, #30]
        break;
 8007bb2:	bf00      	nop
    }

    if (pclk != 0U)
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d018      	beq.n	8007bec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	085a      	lsrs	r2, r3, #1
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	441a      	add	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b0f      	cmp	r3, #15
 8007bd4:	d908      	bls.n	8007be8 <UART_SetConfig+0x49c>
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bdc:	d204      	bcs.n	8007be8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	60da      	str	r2, [r3, #12]
 8007be6:	e001      	b.n	8007bec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007bf8:	7fbb      	ldrb	r3, [r7, #30]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40007c00 	.word	0x40007c00
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	00f42400 	.word	0x00f42400

08007c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01a      	beq.n	8007d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d0e:	d10a      	bne.n	8007d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	605a      	str	r2, [r3, #4]
  }
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d64:	f7fb fd7e 	bl	8003864 <HAL_GetTick>
 8007d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d10e      	bne.n	8007d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f817 	bl	8007dba <UART_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e00d      	b.n	8007db2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	60b9      	str	r1, [r7, #8]
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dca:	e05e      	b.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d05a      	beq.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd4:	f7fb fd46 	bl	8003864 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d302      	bcc.n	8007dea <UART_WaitOnFlagUntilTimeout+0x30>
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d11b      	bne.n	8007e22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007df8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2220      	movs	r2, #32
 8007e14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e043      	b.n	8007eaa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d02c      	beq.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3e:	d124      	bne.n	8007e8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0201 	bic.w	r2, r2, #1
 8007e68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2220      	movs	r2, #32
 8007e74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e00f      	b.n	8007eaa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	69da      	ldr	r2, [r3, #28]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	4013      	ands	r3, r2
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	bf0c      	ite	eq
 8007e9a:	2301      	moveq	r3, #1
 8007e9c:	2300      	movne	r3, #0
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d091      	beq.n	8007dcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <atof>:
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	f001 bb6e 	b.w	8009594 <strtod>

08007eb8 <atoi>:
 8007eb8:	220a      	movs	r2, #10
 8007eba:	2100      	movs	r1, #0
 8007ebc:	f001 bc56 	b.w	800976c <strtol>

08007ec0 <__errno>:
 8007ec0:	4b01      	ldr	r3, [pc, #4]	; (8007ec8 <__errno+0x8>)
 8007ec2:	6818      	ldr	r0, [r3, #0]
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	2000000c 	.word	0x2000000c

08007ecc <getchar>:
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <getchar+0x20>)
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	681c      	ldr	r4, [r3, #0]
 8007ed2:	b124      	cbz	r4, 8007ede <getchar+0x12>
 8007ed4:	69a3      	ldr	r3, [r4, #24]
 8007ed6:	b913      	cbnz	r3, 8007ede <getchar+0x12>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f002 fcd5 	bl	800a888 <__sinit>
 8007ede:	6861      	ldr	r1, [r4, #4]
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ee6:	f003 b90b 	b.w	800b100 <_getc_r>
 8007eea:	bf00      	nop
 8007eec:	2000000c 	.word	0x2000000c

08007ef0 <__libc_init_array>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	4d0d      	ldr	r5, [pc, #52]	; (8007f28 <__libc_init_array+0x38>)
 8007ef4:	4c0d      	ldr	r4, [pc, #52]	; (8007f2c <__libc_init_array+0x3c>)
 8007ef6:	1b64      	subs	r4, r4, r5
 8007ef8:	10a4      	asrs	r4, r4, #2
 8007efa:	2600      	movs	r6, #0
 8007efc:	42a6      	cmp	r6, r4
 8007efe:	d109      	bne.n	8007f14 <__libc_init_array+0x24>
 8007f00:	4d0b      	ldr	r5, [pc, #44]	; (8007f30 <__libc_init_array+0x40>)
 8007f02:	4c0c      	ldr	r4, [pc, #48]	; (8007f34 <__libc_init_array+0x44>)
 8007f04:	f004 fa9a 	bl	800c43c <_init>
 8007f08:	1b64      	subs	r4, r4, r5
 8007f0a:	10a4      	asrs	r4, r4, #2
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	42a6      	cmp	r6, r4
 8007f10:	d105      	bne.n	8007f1e <__libc_init_array+0x2e>
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f18:	4798      	blx	r3
 8007f1a:	3601      	adds	r6, #1
 8007f1c:	e7ee      	b.n	8007efc <__libc_init_array+0xc>
 8007f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f22:	4798      	blx	r3
 8007f24:	3601      	adds	r6, #1
 8007f26:	e7f2      	b.n	8007f0e <__libc_init_array+0x1e>
 8007f28:	0800cf48 	.word	0x0800cf48
 8007f2c:	0800cf48 	.word	0x0800cf48
 8007f30:	0800cf48 	.word	0x0800cf48
 8007f34:	0800cf4c 	.word	0x0800cf4c

08007f38 <memset>:
 8007f38:	4402      	add	r2, r0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d100      	bne.n	8007f42 <memset+0xa>
 8007f40:	4770      	bx	lr
 8007f42:	f803 1b01 	strb.w	r1, [r3], #1
 8007f46:	e7f9      	b.n	8007f3c <memset+0x4>

08007f48 <__cvt>:
 8007f48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	ec55 4b10 	vmov	r4, r5, d0
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	460e      	mov	r6, r1
 8007f54:	4619      	mov	r1, r3
 8007f56:	462b      	mov	r3, r5
 8007f58:	bfbb      	ittet	lt
 8007f5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007f5e:	461d      	movlt	r5, r3
 8007f60:	2300      	movge	r3, #0
 8007f62:	232d      	movlt	r3, #45	; 0x2d
 8007f64:	700b      	strb	r3, [r1, #0]
 8007f66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f6c:	4691      	mov	r9, r2
 8007f6e:	f023 0820 	bic.w	r8, r3, #32
 8007f72:	bfbc      	itt	lt
 8007f74:	4622      	movlt	r2, r4
 8007f76:	4614      	movlt	r4, r2
 8007f78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f7c:	d005      	beq.n	8007f8a <__cvt+0x42>
 8007f7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f82:	d100      	bne.n	8007f86 <__cvt+0x3e>
 8007f84:	3601      	adds	r6, #1
 8007f86:	2102      	movs	r1, #2
 8007f88:	e000      	b.n	8007f8c <__cvt+0x44>
 8007f8a:	2103      	movs	r1, #3
 8007f8c:	ab03      	add	r3, sp, #12
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	ab02      	add	r3, sp, #8
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	ec45 4b10 	vmov	d0, r4, r5
 8007f98:	4653      	mov	r3, sl
 8007f9a:	4632      	mov	r2, r6
 8007f9c:	f001 fd5c 	bl	8009a58 <_dtoa_r>
 8007fa0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fa4:	4607      	mov	r7, r0
 8007fa6:	d102      	bne.n	8007fae <__cvt+0x66>
 8007fa8:	f019 0f01 	tst.w	r9, #1
 8007fac:	d022      	beq.n	8007ff4 <__cvt+0xac>
 8007fae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fb2:	eb07 0906 	add.w	r9, r7, r6
 8007fb6:	d110      	bne.n	8007fda <__cvt+0x92>
 8007fb8:	783b      	ldrb	r3, [r7, #0]
 8007fba:	2b30      	cmp	r3, #48	; 0x30
 8007fbc:	d10a      	bne.n	8007fd4 <__cvt+0x8c>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7f8 fdaf 	bl	8000b28 <__aeabi_dcmpeq>
 8007fca:	b918      	cbnz	r0, 8007fd4 <__cvt+0x8c>
 8007fcc:	f1c6 0601 	rsb	r6, r6, #1
 8007fd0:	f8ca 6000 	str.w	r6, [sl]
 8007fd4:	f8da 3000 	ldr.w	r3, [sl]
 8007fd8:	4499      	add	r9, r3
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	f7f8 fda1 	bl	8000b28 <__aeabi_dcmpeq>
 8007fe6:	b108      	cbz	r0, 8007fec <__cvt+0xa4>
 8007fe8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007fec:	2230      	movs	r2, #48	; 0x30
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	454b      	cmp	r3, r9
 8007ff2:	d307      	bcc.n	8008004 <__cvt+0xbc>
 8007ff4:	9b03      	ldr	r3, [sp, #12]
 8007ff6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ff8:	1bdb      	subs	r3, r3, r7
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	b004      	add	sp, #16
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	1c59      	adds	r1, r3, #1
 8008006:	9103      	str	r1, [sp, #12]
 8008008:	701a      	strb	r2, [r3, #0]
 800800a:	e7f0      	b.n	8007fee <__cvt+0xa6>

0800800c <__exponent>:
 800800c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800800e:	4603      	mov	r3, r0
 8008010:	2900      	cmp	r1, #0
 8008012:	bfb8      	it	lt
 8008014:	4249      	neglt	r1, r1
 8008016:	f803 2b02 	strb.w	r2, [r3], #2
 800801a:	bfb4      	ite	lt
 800801c:	222d      	movlt	r2, #45	; 0x2d
 800801e:	222b      	movge	r2, #43	; 0x2b
 8008020:	2909      	cmp	r1, #9
 8008022:	7042      	strb	r2, [r0, #1]
 8008024:	dd2a      	ble.n	800807c <__exponent+0x70>
 8008026:	f10d 0407 	add.w	r4, sp, #7
 800802a:	46a4      	mov	ip, r4
 800802c:	270a      	movs	r7, #10
 800802e:	46a6      	mov	lr, r4
 8008030:	460a      	mov	r2, r1
 8008032:	fb91 f6f7 	sdiv	r6, r1, r7
 8008036:	fb07 1516 	mls	r5, r7, r6, r1
 800803a:	3530      	adds	r5, #48	; 0x30
 800803c:	2a63      	cmp	r2, #99	; 0x63
 800803e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008042:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008046:	4631      	mov	r1, r6
 8008048:	dcf1      	bgt.n	800802e <__exponent+0x22>
 800804a:	3130      	adds	r1, #48	; 0x30
 800804c:	f1ae 0502 	sub.w	r5, lr, #2
 8008050:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008054:	1c44      	adds	r4, r0, #1
 8008056:	4629      	mov	r1, r5
 8008058:	4561      	cmp	r1, ip
 800805a:	d30a      	bcc.n	8008072 <__exponent+0x66>
 800805c:	f10d 0209 	add.w	r2, sp, #9
 8008060:	eba2 020e 	sub.w	r2, r2, lr
 8008064:	4565      	cmp	r5, ip
 8008066:	bf88      	it	hi
 8008068:	2200      	movhi	r2, #0
 800806a:	4413      	add	r3, r2
 800806c:	1a18      	subs	r0, r3, r0
 800806e:	b003      	add	sp, #12
 8008070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008076:	f804 2f01 	strb.w	r2, [r4, #1]!
 800807a:	e7ed      	b.n	8008058 <__exponent+0x4c>
 800807c:	2330      	movs	r3, #48	; 0x30
 800807e:	3130      	adds	r1, #48	; 0x30
 8008080:	7083      	strb	r3, [r0, #2]
 8008082:	70c1      	strb	r1, [r0, #3]
 8008084:	1d03      	adds	r3, r0, #4
 8008086:	e7f1      	b.n	800806c <__exponent+0x60>

08008088 <_printf_float>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	ed2d 8b02 	vpush	{d8}
 8008090:	b08d      	sub	sp, #52	; 0x34
 8008092:	460c      	mov	r4, r1
 8008094:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008098:	4616      	mov	r6, r2
 800809a:	461f      	mov	r7, r3
 800809c:	4605      	mov	r5, r0
 800809e:	f003 f86f 	bl	800b180 <_localeconv_r>
 80080a2:	f8d0 a000 	ldr.w	sl, [r0]
 80080a6:	4650      	mov	r0, sl
 80080a8:	f7f8 f8bc 	bl	8000224 <strlen>
 80080ac:	2300      	movs	r3, #0
 80080ae:	930a      	str	r3, [sp, #40]	; 0x28
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	f8d8 3000 	ldr.w	r3, [r8]
 80080b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80080bc:	3307      	adds	r3, #7
 80080be:	f023 0307 	bic.w	r3, r3, #7
 80080c2:	f103 0208 	add.w	r2, r3, #8
 80080c6:	f8c8 2000 	str.w	r2, [r8]
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080da:	9307      	str	r3, [sp, #28]
 80080dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80080e0:	ee08 0a10 	vmov	s16, r0
 80080e4:	4b9f      	ldr	r3, [pc, #636]	; (8008364 <_printf_float+0x2dc>)
 80080e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	f7f8 fd4d 	bl	8000b8c <__aeabi_dcmpun>
 80080f2:	bb88      	cbnz	r0, 8008158 <_printf_float+0xd0>
 80080f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080f8:	4b9a      	ldr	r3, [pc, #616]	; (8008364 <_printf_float+0x2dc>)
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	f7f8 fd27 	bl	8000b50 <__aeabi_dcmple>
 8008102:	bb48      	cbnz	r0, 8008158 <_printf_float+0xd0>
 8008104:	2200      	movs	r2, #0
 8008106:	2300      	movs	r3, #0
 8008108:	4640      	mov	r0, r8
 800810a:	4649      	mov	r1, r9
 800810c:	f7f8 fd16 	bl	8000b3c <__aeabi_dcmplt>
 8008110:	b110      	cbz	r0, 8008118 <_printf_float+0x90>
 8008112:	232d      	movs	r3, #45	; 0x2d
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008118:	4b93      	ldr	r3, [pc, #588]	; (8008368 <_printf_float+0x2e0>)
 800811a:	4894      	ldr	r0, [pc, #592]	; (800836c <_printf_float+0x2e4>)
 800811c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008120:	bf94      	ite	ls
 8008122:	4698      	movls	r8, r3
 8008124:	4680      	movhi	r8, r0
 8008126:	2303      	movs	r3, #3
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	9b05      	ldr	r3, [sp, #20]
 800812c:	f023 0204 	bic.w	r2, r3, #4
 8008130:	6022      	str	r2, [r4, #0]
 8008132:	f04f 0900 	mov.w	r9, #0
 8008136:	9700      	str	r7, [sp, #0]
 8008138:	4633      	mov	r3, r6
 800813a:	aa0b      	add	r2, sp, #44	; 0x2c
 800813c:	4621      	mov	r1, r4
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f9d8 	bl	80084f4 <_printf_common>
 8008144:	3001      	adds	r0, #1
 8008146:	f040 8090 	bne.w	800826a <_printf_float+0x1e2>
 800814a:	f04f 30ff 	mov.w	r0, #4294967295
 800814e:	b00d      	add	sp, #52	; 0x34
 8008150:	ecbd 8b02 	vpop	{d8}
 8008154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008158:	4642      	mov	r2, r8
 800815a:	464b      	mov	r3, r9
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fd14 	bl	8000b8c <__aeabi_dcmpun>
 8008164:	b140      	cbz	r0, 8008178 <_printf_float+0xf0>
 8008166:	464b      	mov	r3, r9
 8008168:	2b00      	cmp	r3, #0
 800816a:	bfbc      	itt	lt
 800816c:	232d      	movlt	r3, #45	; 0x2d
 800816e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008172:	487f      	ldr	r0, [pc, #508]	; (8008370 <_printf_float+0x2e8>)
 8008174:	4b7f      	ldr	r3, [pc, #508]	; (8008374 <_printf_float+0x2ec>)
 8008176:	e7d1      	b.n	800811c <_printf_float+0x94>
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800817e:	9206      	str	r2, [sp, #24]
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	d13f      	bne.n	8008204 <_printf_float+0x17c>
 8008184:	2306      	movs	r3, #6
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	6861      	ldr	r1, [r4, #4]
 800818c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008190:	2300      	movs	r3, #0
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	ab0a      	add	r3, sp, #40	; 0x28
 8008196:	e9cd b301 	strd	fp, r3, [sp, #4]
 800819a:	ab09      	add	r3, sp, #36	; 0x24
 800819c:	ec49 8b10 	vmov	d0, r8, r9
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff fecd 	bl	8007f48 <__cvt>
 80081ae:	9b06      	ldr	r3, [sp, #24]
 80081b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b2:	2b47      	cmp	r3, #71	; 0x47
 80081b4:	4680      	mov	r8, r0
 80081b6:	d108      	bne.n	80081ca <_printf_float+0x142>
 80081b8:	1cc8      	adds	r0, r1, #3
 80081ba:	db02      	blt.n	80081c2 <_printf_float+0x13a>
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	4299      	cmp	r1, r3
 80081c0:	dd41      	ble.n	8008246 <_printf_float+0x1be>
 80081c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80081c6:	fa5f fb8b 	uxtb.w	fp, fp
 80081ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081ce:	d820      	bhi.n	8008212 <_printf_float+0x18a>
 80081d0:	3901      	subs	r1, #1
 80081d2:	465a      	mov	r2, fp
 80081d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081d8:	9109      	str	r1, [sp, #36]	; 0x24
 80081da:	f7ff ff17 	bl	800800c <__exponent>
 80081de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e0:	1813      	adds	r3, r2, r0
 80081e2:	2a01      	cmp	r2, #1
 80081e4:	4681      	mov	r9, r0
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	dc02      	bgt.n	80081f0 <_printf_float+0x168>
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	07d2      	lsls	r2, r2, #31
 80081ee:	d501      	bpl.n	80081f4 <_printf_float+0x16c>
 80081f0:	3301      	adds	r3, #1
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d09c      	beq.n	8008136 <_printf_float+0xae>
 80081fc:	232d      	movs	r3, #45	; 0x2d
 80081fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008202:	e798      	b.n	8008136 <_printf_float+0xae>
 8008204:	9a06      	ldr	r2, [sp, #24]
 8008206:	2a47      	cmp	r2, #71	; 0x47
 8008208:	d1be      	bne.n	8008188 <_printf_float+0x100>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1bc      	bne.n	8008188 <_printf_float+0x100>
 800820e:	2301      	movs	r3, #1
 8008210:	e7b9      	b.n	8008186 <_printf_float+0xfe>
 8008212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008216:	d118      	bne.n	800824a <_printf_float+0x1c2>
 8008218:	2900      	cmp	r1, #0
 800821a:	6863      	ldr	r3, [r4, #4]
 800821c:	dd0b      	ble.n	8008236 <_printf_float+0x1ae>
 800821e:	6121      	str	r1, [r4, #16]
 8008220:	b913      	cbnz	r3, 8008228 <_printf_float+0x1a0>
 8008222:	6822      	ldr	r2, [r4, #0]
 8008224:	07d0      	lsls	r0, r2, #31
 8008226:	d502      	bpl.n	800822e <_printf_float+0x1a6>
 8008228:	3301      	adds	r3, #1
 800822a:	440b      	add	r3, r1
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008230:	f04f 0900 	mov.w	r9, #0
 8008234:	e7de      	b.n	80081f4 <_printf_float+0x16c>
 8008236:	b913      	cbnz	r3, 800823e <_printf_float+0x1b6>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	07d2      	lsls	r2, r2, #31
 800823c:	d501      	bpl.n	8008242 <_printf_float+0x1ba>
 800823e:	3302      	adds	r3, #2
 8008240:	e7f4      	b.n	800822c <_printf_float+0x1a4>
 8008242:	2301      	movs	r3, #1
 8008244:	e7f2      	b.n	800822c <_printf_float+0x1a4>
 8008246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800824a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824c:	4299      	cmp	r1, r3
 800824e:	db05      	blt.n	800825c <_printf_float+0x1d4>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	6121      	str	r1, [r4, #16]
 8008254:	07d8      	lsls	r0, r3, #31
 8008256:	d5ea      	bpl.n	800822e <_printf_float+0x1a6>
 8008258:	1c4b      	adds	r3, r1, #1
 800825a:	e7e7      	b.n	800822c <_printf_float+0x1a4>
 800825c:	2900      	cmp	r1, #0
 800825e:	bfd4      	ite	le
 8008260:	f1c1 0202 	rsble	r2, r1, #2
 8008264:	2201      	movgt	r2, #1
 8008266:	4413      	add	r3, r2
 8008268:	e7e0      	b.n	800822c <_printf_float+0x1a4>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	055a      	lsls	r2, r3, #21
 800826e:	d407      	bmi.n	8008280 <_printf_float+0x1f8>
 8008270:	6923      	ldr	r3, [r4, #16]
 8008272:	4642      	mov	r2, r8
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	d12c      	bne.n	80082d8 <_printf_float+0x250>
 800827e:	e764      	b.n	800814a <_printf_float+0xc2>
 8008280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008284:	f240 80e0 	bls.w	8008448 <_printf_float+0x3c0>
 8008288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800828c:	2200      	movs	r2, #0
 800828e:	2300      	movs	r3, #0
 8008290:	f7f8 fc4a 	bl	8000b28 <__aeabi_dcmpeq>
 8008294:	2800      	cmp	r0, #0
 8008296:	d034      	beq.n	8008302 <_printf_float+0x27a>
 8008298:	4a37      	ldr	r2, [pc, #220]	; (8008378 <_printf_float+0x2f0>)
 800829a:	2301      	movs	r3, #1
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f af51 	beq.w	800814a <_printf_float+0xc2>
 80082a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ac:	429a      	cmp	r2, r3
 80082ae:	db02      	blt.n	80082b6 <_printf_float+0x22e>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	07d8      	lsls	r0, r3, #31
 80082b4:	d510      	bpl.n	80082d8 <_printf_float+0x250>
 80082b6:	ee18 3a10 	vmov	r3, s16
 80082ba:	4652      	mov	r2, sl
 80082bc:	4631      	mov	r1, r6
 80082be:	4628      	mov	r0, r5
 80082c0:	47b8      	blx	r7
 80082c2:	3001      	adds	r0, #1
 80082c4:	f43f af41 	beq.w	800814a <_printf_float+0xc2>
 80082c8:	f04f 0800 	mov.w	r8, #0
 80082cc:	f104 091a 	add.w	r9, r4, #26
 80082d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d2:	3b01      	subs	r3, #1
 80082d4:	4543      	cmp	r3, r8
 80082d6:	dc09      	bgt.n	80082ec <_printf_float+0x264>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	f100 8105 	bmi.w	80084ea <_printf_float+0x462>
 80082e0:	68e0      	ldr	r0, [r4, #12]
 80082e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e4:	4298      	cmp	r0, r3
 80082e6:	bfb8      	it	lt
 80082e8:	4618      	movlt	r0, r3
 80082ea:	e730      	b.n	800814e <_printf_float+0xc6>
 80082ec:	2301      	movs	r3, #1
 80082ee:	464a      	mov	r2, r9
 80082f0:	4631      	mov	r1, r6
 80082f2:	4628      	mov	r0, r5
 80082f4:	47b8      	blx	r7
 80082f6:	3001      	adds	r0, #1
 80082f8:	f43f af27 	beq.w	800814a <_printf_float+0xc2>
 80082fc:	f108 0801 	add.w	r8, r8, #1
 8008300:	e7e6      	b.n	80082d0 <_printf_float+0x248>
 8008302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	dc39      	bgt.n	800837c <_printf_float+0x2f4>
 8008308:	4a1b      	ldr	r2, [pc, #108]	; (8008378 <_printf_float+0x2f0>)
 800830a:	2301      	movs	r3, #1
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af19 	beq.w	800814a <_printf_float+0xc2>
 8008318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800831c:	4313      	orrs	r3, r2
 800831e:	d102      	bne.n	8008326 <_printf_float+0x29e>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	07d9      	lsls	r1, r3, #31
 8008324:	d5d8      	bpl.n	80082d8 <_printf_float+0x250>
 8008326:	ee18 3a10 	vmov	r3, s16
 800832a:	4652      	mov	r2, sl
 800832c:	4631      	mov	r1, r6
 800832e:	4628      	mov	r0, r5
 8008330:	47b8      	blx	r7
 8008332:	3001      	adds	r0, #1
 8008334:	f43f af09 	beq.w	800814a <_printf_float+0xc2>
 8008338:	f04f 0900 	mov.w	r9, #0
 800833c:	f104 0a1a 	add.w	sl, r4, #26
 8008340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008342:	425b      	negs	r3, r3
 8008344:	454b      	cmp	r3, r9
 8008346:	dc01      	bgt.n	800834c <_printf_float+0x2c4>
 8008348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800834a:	e792      	b.n	8008272 <_printf_float+0x1ea>
 800834c:	2301      	movs	r3, #1
 800834e:	4652      	mov	r2, sl
 8008350:	4631      	mov	r1, r6
 8008352:	4628      	mov	r0, r5
 8008354:	47b8      	blx	r7
 8008356:	3001      	adds	r0, #1
 8008358:	f43f aef7 	beq.w	800814a <_printf_float+0xc2>
 800835c:	f109 0901 	add.w	r9, r9, #1
 8008360:	e7ee      	b.n	8008340 <_printf_float+0x2b8>
 8008362:	bf00      	nop
 8008364:	7fefffff 	.word	0x7fefffff
 8008368:	0800ca30 	.word	0x0800ca30
 800836c:	0800ca34 	.word	0x0800ca34
 8008370:	0800ca3c 	.word	0x0800ca3c
 8008374:	0800ca38 	.word	0x0800ca38
 8008378:	0800ca40 	.word	0x0800ca40
 800837c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800837e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008380:	429a      	cmp	r2, r3
 8008382:	bfa8      	it	ge
 8008384:	461a      	movge	r2, r3
 8008386:	2a00      	cmp	r2, #0
 8008388:	4691      	mov	r9, r2
 800838a:	dc37      	bgt.n	80083fc <_printf_float+0x374>
 800838c:	f04f 0b00 	mov.w	fp, #0
 8008390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008394:	f104 021a 	add.w	r2, r4, #26
 8008398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	eba3 0309 	sub.w	r3, r3, r9
 80083a0:	455b      	cmp	r3, fp
 80083a2:	dc33      	bgt.n	800840c <_printf_float+0x384>
 80083a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083a8:	429a      	cmp	r2, r3
 80083aa:	db3b      	blt.n	8008424 <_printf_float+0x39c>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	07da      	lsls	r2, r3, #31
 80083b0:	d438      	bmi.n	8008424 <_printf_float+0x39c>
 80083b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083b4:	9b05      	ldr	r3, [sp, #20]
 80083b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	eba2 0901 	sub.w	r9, r2, r1
 80083be:	4599      	cmp	r9, r3
 80083c0:	bfa8      	it	ge
 80083c2:	4699      	movge	r9, r3
 80083c4:	f1b9 0f00 	cmp.w	r9, #0
 80083c8:	dc35      	bgt.n	8008436 <_printf_float+0x3ae>
 80083ca:	f04f 0800 	mov.w	r8, #0
 80083ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083d2:	f104 0a1a 	add.w	sl, r4, #26
 80083d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083da:	1a9b      	subs	r3, r3, r2
 80083dc:	eba3 0309 	sub.w	r3, r3, r9
 80083e0:	4543      	cmp	r3, r8
 80083e2:	f77f af79 	ble.w	80082d8 <_printf_float+0x250>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4652      	mov	r2, sl
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f aeaa 	beq.w	800814a <_printf_float+0xc2>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	e7ec      	b.n	80083d6 <_printf_float+0x34e>
 80083fc:	4613      	mov	r3, r2
 80083fe:	4631      	mov	r1, r6
 8008400:	4642      	mov	r2, r8
 8008402:	4628      	mov	r0, r5
 8008404:	47b8      	blx	r7
 8008406:	3001      	adds	r0, #1
 8008408:	d1c0      	bne.n	800838c <_printf_float+0x304>
 800840a:	e69e      	b.n	800814a <_printf_float+0xc2>
 800840c:	2301      	movs	r3, #1
 800840e:	4631      	mov	r1, r6
 8008410:	4628      	mov	r0, r5
 8008412:	9205      	str	r2, [sp, #20]
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	f43f ae97 	beq.w	800814a <_printf_float+0xc2>
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	f10b 0b01 	add.w	fp, fp, #1
 8008422:	e7b9      	b.n	8008398 <_printf_float+0x310>
 8008424:	ee18 3a10 	vmov	r3, s16
 8008428:	4652      	mov	r2, sl
 800842a:	4631      	mov	r1, r6
 800842c:	4628      	mov	r0, r5
 800842e:	47b8      	blx	r7
 8008430:	3001      	adds	r0, #1
 8008432:	d1be      	bne.n	80083b2 <_printf_float+0x32a>
 8008434:	e689      	b.n	800814a <_printf_float+0xc2>
 8008436:	9a05      	ldr	r2, [sp, #20]
 8008438:	464b      	mov	r3, r9
 800843a:	4442      	add	r2, r8
 800843c:	4631      	mov	r1, r6
 800843e:	4628      	mov	r0, r5
 8008440:	47b8      	blx	r7
 8008442:	3001      	adds	r0, #1
 8008444:	d1c1      	bne.n	80083ca <_printf_float+0x342>
 8008446:	e680      	b.n	800814a <_printf_float+0xc2>
 8008448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800844a:	2a01      	cmp	r2, #1
 800844c:	dc01      	bgt.n	8008452 <_printf_float+0x3ca>
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d538      	bpl.n	80084c4 <_printf_float+0x43c>
 8008452:	2301      	movs	r3, #1
 8008454:	4642      	mov	r2, r8
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f ae74 	beq.w	800814a <_printf_float+0xc2>
 8008462:	ee18 3a10 	vmov	r3, s16
 8008466:	4652      	mov	r2, sl
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f ae6b 	beq.w	800814a <_printf_float+0xc2>
 8008474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	f7f8 fb54 	bl	8000b28 <__aeabi_dcmpeq>
 8008480:	b9d8      	cbnz	r0, 80084ba <_printf_float+0x432>
 8008482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008484:	f108 0201 	add.w	r2, r8, #1
 8008488:	3b01      	subs	r3, #1
 800848a:	4631      	mov	r1, r6
 800848c:	4628      	mov	r0, r5
 800848e:	47b8      	blx	r7
 8008490:	3001      	adds	r0, #1
 8008492:	d10e      	bne.n	80084b2 <_printf_float+0x42a>
 8008494:	e659      	b.n	800814a <_printf_float+0xc2>
 8008496:	2301      	movs	r3, #1
 8008498:	4652      	mov	r2, sl
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	f43f ae52 	beq.w	800814a <_printf_float+0xc2>
 80084a6:	f108 0801 	add.w	r8, r8, #1
 80084aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ac:	3b01      	subs	r3, #1
 80084ae:	4543      	cmp	r3, r8
 80084b0:	dcf1      	bgt.n	8008496 <_printf_float+0x40e>
 80084b2:	464b      	mov	r3, r9
 80084b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084b8:	e6dc      	b.n	8008274 <_printf_float+0x1ec>
 80084ba:	f04f 0800 	mov.w	r8, #0
 80084be:	f104 0a1a 	add.w	sl, r4, #26
 80084c2:	e7f2      	b.n	80084aa <_printf_float+0x422>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4642      	mov	r2, r8
 80084c8:	e7df      	b.n	800848a <_printf_float+0x402>
 80084ca:	2301      	movs	r3, #1
 80084cc:	464a      	mov	r2, r9
 80084ce:	4631      	mov	r1, r6
 80084d0:	4628      	mov	r0, r5
 80084d2:	47b8      	blx	r7
 80084d4:	3001      	adds	r0, #1
 80084d6:	f43f ae38 	beq.w	800814a <_printf_float+0xc2>
 80084da:	f108 0801 	add.w	r8, r8, #1
 80084de:	68e3      	ldr	r3, [r4, #12]
 80084e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80084e2:	1a5b      	subs	r3, r3, r1
 80084e4:	4543      	cmp	r3, r8
 80084e6:	dcf0      	bgt.n	80084ca <_printf_float+0x442>
 80084e8:	e6fa      	b.n	80082e0 <_printf_float+0x258>
 80084ea:	f04f 0800 	mov.w	r8, #0
 80084ee:	f104 0919 	add.w	r9, r4, #25
 80084f2:	e7f4      	b.n	80084de <_printf_float+0x456>

080084f4 <_printf_common>:
 80084f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	4616      	mov	r6, r2
 80084fa:	4699      	mov	r9, r3
 80084fc:	688a      	ldr	r2, [r1, #8]
 80084fe:	690b      	ldr	r3, [r1, #16]
 8008500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008504:	4293      	cmp	r3, r2
 8008506:	bfb8      	it	lt
 8008508:	4613      	movlt	r3, r2
 800850a:	6033      	str	r3, [r6, #0]
 800850c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008510:	4607      	mov	r7, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b10a      	cbz	r2, 800851a <_printf_common+0x26>
 8008516:	3301      	adds	r3, #1
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	0699      	lsls	r1, r3, #26
 800851e:	bf42      	ittt	mi
 8008520:	6833      	ldrmi	r3, [r6, #0]
 8008522:	3302      	addmi	r3, #2
 8008524:	6033      	strmi	r3, [r6, #0]
 8008526:	6825      	ldr	r5, [r4, #0]
 8008528:	f015 0506 	ands.w	r5, r5, #6
 800852c:	d106      	bne.n	800853c <_printf_common+0x48>
 800852e:	f104 0a19 	add.w	sl, r4, #25
 8008532:	68e3      	ldr	r3, [r4, #12]
 8008534:	6832      	ldr	r2, [r6, #0]
 8008536:	1a9b      	subs	r3, r3, r2
 8008538:	42ab      	cmp	r3, r5
 800853a:	dc26      	bgt.n	800858a <_printf_common+0x96>
 800853c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008540:	1e13      	subs	r3, r2, #0
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	bf18      	it	ne
 8008546:	2301      	movne	r3, #1
 8008548:	0692      	lsls	r2, r2, #26
 800854a:	d42b      	bmi.n	80085a4 <_printf_common+0xb0>
 800854c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008550:	4649      	mov	r1, r9
 8008552:	4638      	mov	r0, r7
 8008554:	47c0      	blx	r8
 8008556:	3001      	adds	r0, #1
 8008558:	d01e      	beq.n	8008598 <_printf_common+0xa4>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	68e5      	ldr	r5, [r4, #12]
 800855e:	6832      	ldr	r2, [r6, #0]
 8008560:	f003 0306 	and.w	r3, r3, #6
 8008564:	2b04      	cmp	r3, #4
 8008566:	bf08      	it	eq
 8008568:	1aad      	subeq	r5, r5, r2
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	bf0c      	ite	eq
 8008570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008574:	2500      	movne	r5, #0
 8008576:	4293      	cmp	r3, r2
 8008578:	bfc4      	itt	gt
 800857a:	1a9b      	subgt	r3, r3, r2
 800857c:	18ed      	addgt	r5, r5, r3
 800857e:	2600      	movs	r6, #0
 8008580:	341a      	adds	r4, #26
 8008582:	42b5      	cmp	r5, r6
 8008584:	d11a      	bne.n	80085bc <_printf_common+0xc8>
 8008586:	2000      	movs	r0, #0
 8008588:	e008      	b.n	800859c <_printf_common+0xa8>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4649      	mov	r1, r9
 8008590:	4638      	mov	r0, r7
 8008592:	47c0      	blx	r8
 8008594:	3001      	adds	r0, #1
 8008596:	d103      	bne.n	80085a0 <_printf_common+0xac>
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	3501      	adds	r5, #1
 80085a2:	e7c6      	b.n	8008532 <_printf_common+0x3e>
 80085a4:	18e1      	adds	r1, r4, r3
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	2030      	movs	r0, #48	; 0x30
 80085aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085ae:	4422      	add	r2, r4
 80085b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085b8:	3302      	adds	r3, #2
 80085ba:	e7c7      	b.n	800854c <_printf_common+0x58>
 80085bc:	2301      	movs	r3, #1
 80085be:	4622      	mov	r2, r4
 80085c0:	4649      	mov	r1, r9
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c0      	blx	r8
 80085c6:	3001      	adds	r0, #1
 80085c8:	d0e6      	beq.n	8008598 <_printf_common+0xa4>
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7d9      	b.n	8008582 <_printf_common+0x8e>
	...

080085d0 <_printf_i>:
 80085d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d4:	460c      	mov	r4, r1
 80085d6:	4691      	mov	r9, r2
 80085d8:	7e27      	ldrb	r7, [r4, #24]
 80085da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085dc:	2f78      	cmp	r7, #120	; 0x78
 80085de:	4680      	mov	r8, r0
 80085e0:	469a      	mov	sl, r3
 80085e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085e6:	d807      	bhi.n	80085f8 <_printf_i+0x28>
 80085e8:	2f62      	cmp	r7, #98	; 0x62
 80085ea:	d80a      	bhi.n	8008602 <_printf_i+0x32>
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	f000 80d8 	beq.w	80087a2 <_printf_i+0x1d2>
 80085f2:	2f58      	cmp	r7, #88	; 0x58
 80085f4:	f000 80a3 	beq.w	800873e <_printf_i+0x16e>
 80085f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008600:	e03a      	b.n	8008678 <_printf_i+0xa8>
 8008602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008606:	2b15      	cmp	r3, #21
 8008608:	d8f6      	bhi.n	80085f8 <_printf_i+0x28>
 800860a:	a001      	add	r0, pc, #4	; (adr r0, 8008610 <_printf_i+0x40>)
 800860c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008610:	08008669 	.word	0x08008669
 8008614:	0800867d 	.word	0x0800867d
 8008618:	080085f9 	.word	0x080085f9
 800861c:	080085f9 	.word	0x080085f9
 8008620:	080085f9 	.word	0x080085f9
 8008624:	080085f9 	.word	0x080085f9
 8008628:	0800867d 	.word	0x0800867d
 800862c:	080085f9 	.word	0x080085f9
 8008630:	080085f9 	.word	0x080085f9
 8008634:	080085f9 	.word	0x080085f9
 8008638:	080085f9 	.word	0x080085f9
 800863c:	08008789 	.word	0x08008789
 8008640:	080086ad 	.word	0x080086ad
 8008644:	0800876b 	.word	0x0800876b
 8008648:	080085f9 	.word	0x080085f9
 800864c:	080085f9 	.word	0x080085f9
 8008650:	080087ab 	.word	0x080087ab
 8008654:	080085f9 	.word	0x080085f9
 8008658:	080086ad 	.word	0x080086ad
 800865c:	080085f9 	.word	0x080085f9
 8008660:	080085f9 	.word	0x080085f9
 8008664:	08008773 	.word	0x08008773
 8008668:	680b      	ldr	r3, [r1, #0]
 800866a:	1d1a      	adds	r2, r3, #4
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	600a      	str	r2, [r1, #0]
 8008670:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008678:	2301      	movs	r3, #1
 800867a:	e0a3      	b.n	80087c4 <_printf_i+0x1f4>
 800867c:	6825      	ldr	r5, [r4, #0]
 800867e:	6808      	ldr	r0, [r1, #0]
 8008680:	062e      	lsls	r6, r5, #24
 8008682:	f100 0304 	add.w	r3, r0, #4
 8008686:	d50a      	bpl.n	800869e <_printf_i+0xce>
 8008688:	6805      	ldr	r5, [r0, #0]
 800868a:	600b      	str	r3, [r1, #0]
 800868c:	2d00      	cmp	r5, #0
 800868e:	da03      	bge.n	8008698 <_printf_i+0xc8>
 8008690:	232d      	movs	r3, #45	; 0x2d
 8008692:	426d      	negs	r5, r5
 8008694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008698:	485e      	ldr	r0, [pc, #376]	; (8008814 <_printf_i+0x244>)
 800869a:	230a      	movs	r3, #10
 800869c:	e019      	b.n	80086d2 <_printf_i+0x102>
 800869e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086a2:	6805      	ldr	r5, [r0, #0]
 80086a4:	600b      	str	r3, [r1, #0]
 80086a6:	bf18      	it	ne
 80086a8:	b22d      	sxthne	r5, r5
 80086aa:	e7ef      	b.n	800868c <_printf_i+0xbc>
 80086ac:	680b      	ldr	r3, [r1, #0]
 80086ae:	6825      	ldr	r5, [r4, #0]
 80086b0:	1d18      	adds	r0, r3, #4
 80086b2:	6008      	str	r0, [r1, #0]
 80086b4:	0628      	lsls	r0, r5, #24
 80086b6:	d501      	bpl.n	80086bc <_printf_i+0xec>
 80086b8:	681d      	ldr	r5, [r3, #0]
 80086ba:	e002      	b.n	80086c2 <_printf_i+0xf2>
 80086bc:	0669      	lsls	r1, r5, #25
 80086be:	d5fb      	bpl.n	80086b8 <_printf_i+0xe8>
 80086c0:	881d      	ldrh	r5, [r3, #0]
 80086c2:	4854      	ldr	r0, [pc, #336]	; (8008814 <_printf_i+0x244>)
 80086c4:	2f6f      	cmp	r7, #111	; 0x6f
 80086c6:	bf0c      	ite	eq
 80086c8:	2308      	moveq	r3, #8
 80086ca:	230a      	movne	r3, #10
 80086cc:	2100      	movs	r1, #0
 80086ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086d2:	6866      	ldr	r6, [r4, #4]
 80086d4:	60a6      	str	r6, [r4, #8]
 80086d6:	2e00      	cmp	r6, #0
 80086d8:	bfa2      	ittt	ge
 80086da:	6821      	ldrge	r1, [r4, #0]
 80086dc:	f021 0104 	bicge.w	r1, r1, #4
 80086e0:	6021      	strge	r1, [r4, #0]
 80086e2:	b90d      	cbnz	r5, 80086e8 <_printf_i+0x118>
 80086e4:	2e00      	cmp	r6, #0
 80086e6:	d04d      	beq.n	8008784 <_printf_i+0x1b4>
 80086e8:	4616      	mov	r6, r2
 80086ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ee:	fb03 5711 	mls	r7, r3, r1, r5
 80086f2:	5dc7      	ldrb	r7, [r0, r7]
 80086f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086f8:	462f      	mov	r7, r5
 80086fa:	42bb      	cmp	r3, r7
 80086fc:	460d      	mov	r5, r1
 80086fe:	d9f4      	bls.n	80086ea <_printf_i+0x11a>
 8008700:	2b08      	cmp	r3, #8
 8008702:	d10b      	bne.n	800871c <_printf_i+0x14c>
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	07df      	lsls	r7, r3, #31
 8008708:	d508      	bpl.n	800871c <_printf_i+0x14c>
 800870a:	6923      	ldr	r3, [r4, #16]
 800870c:	6861      	ldr	r1, [r4, #4]
 800870e:	4299      	cmp	r1, r3
 8008710:	bfde      	ittt	le
 8008712:	2330      	movle	r3, #48	; 0x30
 8008714:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008718:	f106 36ff 	addle.w	r6, r6, #4294967295
 800871c:	1b92      	subs	r2, r2, r6
 800871e:	6122      	str	r2, [r4, #16]
 8008720:	f8cd a000 	str.w	sl, [sp]
 8008724:	464b      	mov	r3, r9
 8008726:	aa03      	add	r2, sp, #12
 8008728:	4621      	mov	r1, r4
 800872a:	4640      	mov	r0, r8
 800872c:	f7ff fee2 	bl	80084f4 <_printf_common>
 8008730:	3001      	adds	r0, #1
 8008732:	d14c      	bne.n	80087ce <_printf_i+0x1fe>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	b004      	add	sp, #16
 800873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873e:	4835      	ldr	r0, [pc, #212]	; (8008814 <_printf_i+0x244>)
 8008740:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	680e      	ldr	r6, [r1, #0]
 8008748:	061f      	lsls	r7, r3, #24
 800874a:	f856 5b04 	ldr.w	r5, [r6], #4
 800874e:	600e      	str	r6, [r1, #0]
 8008750:	d514      	bpl.n	800877c <_printf_i+0x1ac>
 8008752:	07d9      	lsls	r1, r3, #31
 8008754:	bf44      	itt	mi
 8008756:	f043 0320 	orrmi.w	r3, r3, #32
 800875a:	6023      	strmi	r3, [r4, #0]
 800875c:	b91d      	cbnz	r5, 8008766 <_printf_i+0x196>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	f023 0320 	bic.w	r3, r3, #32
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	2310      	movs	r3, #16
 8008768:	e7b0      	b.n	80086cc <_printf_i+0xfc>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	f043 0320 	orr.w	r3, r3, #32
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	2378      	movs	r3, #120	; 0x78
 8008774:	4828      	ldr	r0, [pc, #160]	; (8008818 <_printf_i+0x248>)
 8008776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800877a:	e7e3      	b.n	8008744 <_printf_i+0x174>
 800877c:	065e      	lsls	r6, r3, #25
 800877e:	bf48      	it	mi
 8008780:	b2ad      	uxthmi	r5, r5
 8008782:	e7e6      	b.n	8008752 <_printf_i+0x182>
 8008784:	4616      	mov	r6, r2
 8008786:	e7bb      	b.n	8008700 <_printf_i+0x130>
 8008788:	680b      	ldr	r3, [r1, #0]
 800878a:	6826      	ldr	r6, [r4, #0]
 800878c:	6960      	ldr	r0, [r4, #20]
 800878e:	1d1d      	adds	r5, r3, #4
 8008790:	600d      	str	r5, [r1, #0]
 8008792:	0635      	lsls	r5, r6, #24
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	d501      	bpl.n	800879c <_printf_i+0x1cc>
 8008798:	6018      	str	r0, [r3, #0]
 800879a:	e002      	b.n	80087a2 <_printf_i+0x1d2>
 800879c:	0671      	lsls	r1, r6, #25
 800879e:	d5fb      	bpl.n	8008798 <_printf_i+0x1c8>
 80087a0:	8018      	strh	r0, [r3, #0]
 80087a2:	2300      	movs	r3, #0
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	4616      	mov	r6, r2
 80087a8:	e7ba      	b.n	8008720 <_printf_i+0x150>
 80087aa:	680b      	ldr	r3, [r1, #0]
 80087ac:	1d1a      	adds	r2, r3, #4
 80087ae:	600a      	str	r2, [r1, #0]
 80087b0:	681e      	ldr	r6, [r3, #0]
 80087b2:	6862      	ldr	r2, [r4, #4]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7f7 fd42 	bl	8000240 <memchr>
 80087bc:	b108      	cbz	r0, 80087c2 <_printf_i+0x1f2>
 80087be:	1b80      	subs	r0, r0, r6
 80087c0:	6060      	str	r0, [r4, #4]
 80087c2:	6863      	ldr	r3, [r4, #4]
 80087c4:	6123      	str	r3, [r4, #16]
 80087c6:	2300      	movs	r3, #0
 80087c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087cc:	e7a8      	b.n	8008720 <_printf_i+0x150>
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	4632      	mov	r2, r6
 80087d2:	4649      	mov	r1, r9
 80087d4:	4640      	mov	r0, r8
 80087d6:	47d0      	blx	sl
 80087d8:	3001      	adds	r0, #1
 80087da:	d0ab      	beq.n	8008734 <_printf_i+0x164>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	079b      	lsls	r3, r3, #30
 80087e0:	d413      	bmi.n	800880a <_printf_i+0x23a>
 80087e2:	68e0      	ldr	r0, [r4, #12]
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	4298      	cmp	r0, r3
 80087e8:	bfb8      	it	lt
 80087ea:	4618      	movlt	r0, r3
 80087ec:	e7a4      	b.n	8008738 <_printf_i+0x168>
 80087ee:	2301      	movs	r3, #1
 80087f0:	4632      	mov	r2, r6
 80087f2:	4649      	mov	r1, r9
 80087f4:	4640      	mov	r0, r8
 80087f6:	47d0      	blx	sl
 80087f8:	3001      	adds	r0, #1
 80087fa:	d09b      	beq.n	8008734 <_printf_i+0x164>
 80087fc:	3501      	adds	r5, #1
 80087fe:	68e3      	ldr	r3, [r4, #12]
 8008800:	9903      	ldr	r1, [sp, #12]
 8008802:	1a5b      	subs	r3, r3, r1
 8008804:	42ab      	cmp	r3, r5
 8008806:	dcf2      	bgt.n	80087ee <_printf_i+0x21e>
 8008808:	e7eb      	b.n	80087e2 <_printf_i+0x212>
 800880a:	2500      	movs	r5, #0
 800880c:	f104 0619 	add.w	r6, r4, #25
 8008810:	e7f5      	b.n	80087fe <_printf_i+0x22e>
 8008812:	bf00      	nop
 8008814:	0800ca42 	.word	0x0800ca42
 8008818:	0800ca53 	.word	0x0800ca53

0800881c <iprintf>:
 800881c:	b40f      	push	{r0, r1, r2, r3}
 800881e:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <iprintf+0x2c>)
 8008820:	b513      	push	{r0, r1, r4, lr}
 8008822:	681c      	ldr	r4, [r3, #0]
 8008824:	b124      	cbz	r4, 8008830 <iprintf+0x14>
 8008826:	69a3      	ldr	r3, [r4, #24]
 8008828:	b913      	cbnz	r3, 8008830 <iprintf+0x14>
 800882a:	4620      	mov	r0, r4
 800882c:	f002 f82c 	bl	800a888 <__sinit>
 8008830:	ab05      	add	r3, sp, #20
 8008832:	9a04      	ldr	r2, [sp, #16]
 8008834:	68a1      	ldr	r1, [r4, #8]
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	4620      	mov	r0, r4
 800883a:	f003 fad3 	bl	800bde4 <_vfiprintf_r>
 800883e:	b002      	add	sp, #8
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	b004      	add	sp, #16
 8008846:	4770      	bx	lr
 8008848:	2000000c 	.word	0x2000000c

0800884c <_puts_r>:
 800884c:	b570      	push	{r4, r5, r6, lr}
 800884e:	460e      	mov	r6, r1
 8008850:	4605      	mov	r5, r0
 8008852:	b118      	cbz	r0, 800885c <_puts_r+0x10>
 8008854:	6983      	ldr	r3, [r0, #24]
 8008856:	b90b      	cbnz	r3, 800885c <_puts_r+0x10>
 8008858:	f002 f816 	bl	800a888 <__sinit>
 800885c:	69ab      	ldr	r3, [r5, #24]
 800885e:	68ac      	ldr	r4, [r5, #8]
 8008860:	b913      	cbnz	r3, 8008868 <_puts_r+0x1c>
 8008862:	4628      	mov	r0, r5
 8008864:	f002 f810 	bl	800a888 <__sinit>
 8008868:	4b2c      	ldr	r3, [pc, #176]	; (800891c <_puts_r+0xd0>)
 800886a:	429c      	cmp	r4, r3
 800886c:	d120      	bne.n	80088b0 <_puts_r+0x64>
 800886e:	686c      	ldr	r4, [r5, #4]
 8008870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008872:	07db      	lsls	r3, r3, #31
 8008874:	d405      	bmi.n	8008882 <_puts_r+0x36>
 8008876:	89a3      	ldrh	r3, [r4, #12]
 8008878:	0598      	lsls	r0, r3, #22
 800887a:	d402      	bmi.n	8008882 <_puts_r+0x36>
 800887c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887e:	f002 fc84 	bl	800b18a <__retarget_lock_acquire_recursive>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	0719      	lsls	r1, r3, #28
 8008886:	d51d      	bpl.n	80088c4 <_puts_r+0x78>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	b1db      	cbz	r3, 80088c4 <_puts_r+0x78>
 800888c:	3e01      	subs	r6, #1
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008894:	3b01      	subs	r3, #1
 8008896:	60a3      	str	r3, [r4, #8]
 8008898:	bb39      	cbnz	r1, 80088ea <_puts_r+0x9e>
 800889a:	2b00      	cmp	r3, #0
 800889c:	da38      	bge.n	8008910 <_puts_r+0xc4>
 800889e:	4622      	mov	r2, r4
 80088a0:	210a      	movs	r1, #10
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 ff6c 	bl	8009780 <__swbuf_r>
 80088a8:	3001      	adds	r0, #1
 80088aa:	d011      	beq.n	80088d0 <_puts_r+0x84>
 80088ac:	250a      	movs	r5, #10
 80088ae:	e011      	b.n	80088d4 <_puts_r+0x88>
 80088b0:	4b1b      	ldr	r3, [pc, #108]	; (8008920 <_puts_r+0xd4>)
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d101      	bne.n	80088ba <_puts_r+0x6e>
 80088b6:	68ac      	ldr	r4, [r5, #8]
 80088b8:	e7da      	b.n	8008870 <_puts_r+0x24>
 80088ba:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <_puts_r+0xd8>)
 80088bc:	429c      	cmp	r4, r3
 80088be:	bf08      	it	eq
 80088c0:	68ec      	ldreq	r4, [r5, #12]
 80088c2:	e7d5      	b.n	8008870 <_puts_r+0x24>
 80088c4:	4621      	mov	r1, r4
 80088c6:	4628      	mov	r0, r5
 80088c8:	f000 ffac 	bl	8009824 <__swsetup_r>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d0dd      	beq.n	800888c <_puts_r+0x40>
 80088d0:	f04f 35ff 	mov.w	r5, #4294967295
 80088d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088d6:	07da      	lsls	r2, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_puts_r+0x9a>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_puts_r+0x9a>
 80088e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e2:	f002 fc53 	bl	800b18c <__retarget_lock_release_recursive>
 80088e6:	4628      	mov	r0, r5
 80088e8:	bd70      	pop	{r4, r5, r6, pc}
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da04      	bge.n	80088f8 <_puts_r+0xac>
 80088ee:	69a2      	ldr	r2, [r4, #24]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	dc06      	bgt.n	8008902 <_puts_r+0xb6>
 80088f4:	290a      	cmp	r1, #10
 80088f6:	d004      	beq.n	8008902 <_puts_r+0xb6>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	6022      	str	r2, [r4, #0]
 80088fe:	7019      	strb	r1, [r3, #0]
 8008900:	e7c5      	b.n	800888e <_puts_r+0x42>
 8008902:	4622      	mov	r2, r4
 8008904:	4628      	mov	r0, r5
 8008906:	f000 ff3b 	bl	8009780 <__swbuf_r>
 800890a:	3001      	adds	r0, #1
 800890c:	d1bf      	bne.n	800888e <_puts_r+0x42>
 800890e:	e7df      	b.n	80088d0 <_puts_r+0x84>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	250a      	movs	r5, #10
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	701d      	strb	r5, [r3, #0]
 800891a:	e7db      	b.n	80088d4 <_puts_r+0x88>
 800891c:	0800cd0c 	.word	0x0800cd0c
 8008920:	0800cd2c 	.word	0x0800cd2c
 8008924:	0800ccec 	.word	0x0800ccec

08008928 <puts>:
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <puts+0xc>)
 800892a:	4601      	mov	r1, r0
 800892c:	6818      	ldr	r0, [r3, #0]
 800892e:	f7ff bf8d 	b.w	800884c <_puts_r>
 8008932:	bf00      	nop
 8008934:	2000000c 	.word	0x2000000c

08008938 <strcpy>:
 8008938:	4603      	mov	r3, r0
 800893a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800893e:	f803 2b01 	strb.w	r2, [r3], #1
 8008942:	2a00      	cmp	r2, #0
 8008944:	d1f9      	bne.n	800893a <strcpy+0x2>
 8008946:	4770      	bx	lr

08008948 <sulp>:
 8008948:	b570      	push	{r4, r5, r6, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	460d      	mov	r5, r1
 800894e:	ec45 4b10 	vmov	d0, r4, r5
 8008952:	4616      	mov	r6, r2
 8008954:	f003 f814 	bl	800b980 <__ulp>
 8008958:	ec51 0b10 	vmov	r0, r1, d0
 800895c:	b17e      	cbz	r6, 800897e <sulp+0x36>
 800895e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008962:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008966:	2b00      	cmp	r3, #0
 8008968:	dd09      	ble.n	800897e <sulp+0x36>
 800896a:	051b      	lsls	r3, r3, #20
 800896c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008970:	2400      	movs	r4, #0
 8008972:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008976:	4622      	mov	r2, r4
 8008978:	462b      	mov	r3, r5
 800897a:	f7f7 fe6d 	bl	8000658 <__aeabi_dmul>
 800897e:	bd70      	pop	{r4, r5, r6, pc}

08008980 <_strtod_l>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	b0a3      	sub	sp, #140	; 0x8c
 8008986:	461f      	mov	r7, r3
 8008988:	2300      	movs	r3, #0
 800898a:	931e      	str	r3, [sp, #120]	; 0x78
 800898c:	4ba4      	ldr	r3, [pc, #656]	; (8008c20 <_strtod_l+0x2a0>)
 800898e:	9219      	str	r2, [sp, #100]	; 0x64
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	9307      	str	r3, [sp, #28]
 8008994:	4604      	mov	r4, r0
 8008996:	4618      	mov	r0, r3
 8008998:	4688      	mov	r8, r1
 800899a:	f7f7 fc43 	bl	8000224 <strlen>
 800899e:	f04f 0a00 	mov.w	sl, #0
 80089a2:	4605      	mov	r5, r0
 80089a4:	f04f 0b00 	mov.w	fp, #0
 80089a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80089ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	2a2b      	cmp	r2, #43	; 0x2b
 80089b2:	d04c      	beq.n	8008a4e <_strtod_l+0xce>
 80089b4:	d839      	bhi.n	8008a2a <_strtod_l+0xaa>
 80089b6:	2a0d      	cmp	r2, #13
 80089b8:	d832      	bhi.n	8008a20 <_strtod_l+0xa0>
 80089ba:	2a08      	cmp	r2, #8
 80089bc:	d832      	bhi.n	8008a24 <_strtod_l+0xa4>
 80089be:	2a00      	cmp	r2, #0
 80089c0:	d03c      	beq.n	8008a3c <_strtod_l+0xbc>
 80089c2:	2300      	movs	r3, #0
 80089c4:	930e      	str	r3, [sp, #56]	; 0x38
 80089c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80089c8:	7833      	ldrb	r3, [r6, #0]
 80089ca:	2b30      	cmp	r3, #48	; 0x30
 80089cc:	f040 80b4 	bne.w	8008b38 <_strtod_l+0x1b8>
 80089d0:	7873      	ldrb	r3, [r6, #1]
 80089d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80089d6:	2b58      	cmp	r3, #88	; 0x58
 80089d8:	d16c      	bne.n	8008ab4 <_strtod_l+0x134>
 80089da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089dc:	9301      	str	r3, [sp, #4]
 80089de:	ab1e      	add	r3, sp, #120	; 0x78
 80089e0:	9702      	str	r7, [sp, #8]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	4a8f      	ldr	r2, [pc, #572]	; (8008c24 <_strtod_l+0x2a4>)
 80089e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80089e8:	a91d      	add	r1, sp, #116	; 0x74
 80089ea:	4620      	mov	r0, r4
 80089ec:	f002 f880 	bl	800aaf0 <__gethex>
 80089f0:	f010 0707 	ands.w	r7, r0, #7
 80089f4:	4605      	mov	r5, r0
 80089f6:	d005      	beq.n	8008a04 <_strtod_l+0x84>
 80089f8:	2f06      	cmp	r7, #6
 80089fa:	d12a      	bne.n	8008a52 <_strtod_l+0xd2>
 80089fc:	3601      	adds	r6, #1
 80089fe:	2300      	movs	r3, #0
 8008a00:	961d      	str	r6, [sp, #116]	; 0x74
 8008a02:	930e      	str	r3, [sp, #56]	; 0x38
 8008a04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f040 8596 	bne.w	8009538 <_strtod_l+0xbb8>
 8008a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0e:	b1db      	cbz	r3, 8008a48 <_strtod_l+0xc8>
 8008a10:	4652      	mov	r2, sl
 8008a12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a16:	ec43 2b10 	vmov	d0, r2, r3
 8008a1a:	b023      	add	sp, #140	; 0x8c
 8008a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a20:	2a20      	cmp	r2, #32
 8008a22:	d1ce      	bne.n	80089c2 <_strtod_l+0x42>
 8008a24:	3301      	adds	r3, #1
 8008a26:	931d      	str	r3, [sp, #116]	; 0x74
 8008a28:	e7c0      	b.n	80089ac <_strtod_l+0x2c>
 8008a2a:	2a2d      	cmp	r2, #45	; 0x2d
 8008a2c:	d1c9      	bne.n	80089c2 <_strtod_l+0x42>
 8008a2e:	2201      	movs	r2, #1
 8008a30:	920e      	str	r2, [sp, #56]	; 0x38
 8008a32:	1c5a      	adds	r2, r3, #1
 8008a34:	921d      	str	r2, [sp, #116]	; 0x74
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1c4      	bne.n	80089c6 <_strtod_l+0x46>
 8008a3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a3e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f040 8576 	bne.w	8009534 <_strtod_l+0xbb4>
 8008a48:	4652      	mov	r2, sl
 8008a4a:	465b      	mov	r3, fp
 8008a4c:	e7e3      	b.n	8008a16 <_strtod_l+0x96>
 8008a4e:	2200      	movs	r2, #0
 8008a50:	e7ee      	b.n	8008a30 <_strtod_l+0xb0>
 8008a52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a54:	b13a      	cbz	r2, 8008a66 <_strtod_l+0xe6>
 8008a56:	2135      	movs	r1, #53	; 0x35
 8008a58:	a820      	add	r0, sp, #128	; 0x80
 8008a5a:	f003 f89c 	bl	800bb96 <__copybits>
 8008a5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a60:	4620      	mov	r0, r4
 8008a62:	f002 fc61 	bl	800b328 <_Bfree>
 8008a66:	3f01      	subs	r7, #1
 8008a68:	2f05      	cmp	r7, #5
 8008a6a:	d807      	bhi.n	8008a7c <_strtod_l+0xfc>
 8008a6c:	e8df f007 	tbb	[pc, r7]
 8008a70:	1d180b0e 	.word	0x1d180b0e
 8008a74:	030e      	.short	0x030e
 8008a76:	f04f 0b00 	mov.w	fp, #0
 8008a7a:	46da      	mov	sl, fp
 8008a7c:	0728      	lsls	r0, r5, #28
 8008a7e:	d5c1      	bpl.n	8008a04 <_strtod_l+0x84>
 8008a80:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a84:	e7be      	b.n	8008a04 <_strtod_l+0x84>
 8008a86:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008a8a:	e7f7      	b.n	8008a7c <_strtod_l+0xfc>
 8008a8c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008a90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a9e:	e7ed      	b.n	8008a7c <_strtod_l+0xfc>
 8008aa0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008c28 <_strtod_l+0x2a8>
 8008aa4:	f04f 0a00 	mov.w	sl, #0
 8008aa8:	e7e8      	b.n	8008a7c <_strtod_l+0xfc>
 8008aaa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008aae:	f04f 3aff 	mov.w	sl, #4294967295
 8008ab2:	e7e3      	b.n	8008a7c <_strtod_l+0xfc>
 8008ab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ab6:	1c5a      	adds	r2, r3, #1
 8008ab8:	921d      	str	r2, [sp, #116]	; 0x74
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b30      	cmp	r3, #48	; 0x30
 8008abe:	d0f9      	beq.n	8008ab4 <_strtod_l+0x134>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d09f      	beq.n	8008a04 <_strtod_l+0x84>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	f04f 0900 	mov.w	r9, #0
 8008aca:	9304      	str	r3, [sp, #16]
 8008acc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ace:	930a      	str	r3, [sp, #40]	; 0x28
 8008ad0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008ad4:	464f      	mov	r7, r9
 8008ad6:	220a      	movs	r2, #10
 8008ad8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008ada:	7806      	ldrb	r6, [r0, #0]
 8008adc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008ae0:	b2d9      	uxtb	r1, r3
 8008ae2:	2909      	cmp	r1, #9
 8008ae4:	d92a      	bls.n	8008b3c <_strtod_l+0x1bc>
 8008ae6:	9907      	ldr	r1, [sp, #28]
 8008ae8:	462a      	mov	r2, r5
 8008aea:	f003 fb34 	bl	800c156 <strncmp>
 8008aee:	b398      	cbz	r0, 8008b58 <_strtod_l+0x1d8>
 8008af0:	2000      	movs	r0, #0
 8008af2:	4633      	mov	r3, r6
 8008af4:	463d      	mov	r5, r7
 8008af6:	9007      	str	r0, [sp, #28]
 8008af8:	4602      	mov	r2, r0
 8008afa:	2b65      	cmp	r3, #101	; 0x65
 8008afc:	d001      	beq.n	8008b02 <_strtod_l+0x182>
 8008afe:	2b45      	cmp	r3, #69	; 0x45
 8008b00:	d118      	bne.n	8008b34 <_strtod_l+0x1b4>
 8008b02:	b91d      	cbnz	r5, 8008b0c <_strtod_l+0x18c>
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	4303      	orrs	r3, r0
 8008b08:	d098      	beq.n	8008a3c <_strtod_l+0xbc>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008b10:	f108 0301 	add.w	r3, r8, #1
 8008b14:	931d      	str	r3, [sp, #116]	; 0x74
 8008b16:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008b1a:	2b2b      	cmp	r3, #43	; 0x2b
 8008b1c:	d075      	beq.n	8008c0a <_strtod_l+0x28a>
 8008b1e:	2b2d      	cmp	r3, #45	; 0x2d
 8008b20:	d07b      	beq.n	8008c1a <_strtod_l+0x29a>
 8008b22:	f04f 0c00 	mov.w	ip, #0
 8008b26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b2a:	2909      	cmp	r1, #9
 8008b2c:	f240 8082 	bls.w	8008c34 <_strtod_l+0x2b4>
 8008b30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008b34:	2600      	movs	r6, #0
 8008b36:	e09d      	b.n	8008c74 <_strtod_l+0x2f4>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	e7c4      	b.n	8008ac6 <_strtod_l+0x146>
 8008b3c:	2f08      	cmp	r7, #8
 8008b3e:	bfd8      	it	le
 8008b40:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008b42:	f100 0001 	add.w	r0, r0, #1
 8008b46:	bfda      	itte	le
 8008b48:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b4c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008b4e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b52:	3701      	adds	r7, #1
 8008b54:	901d      	str	r0, [sp, #116]	; 0x74
 8008b56:	e7bf      	b.n	8008ad8 <_strtod_l+0x158>
 8008b58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b5a:	195a      	adds	r2, r3, r5
 8008b5c:	921d      	str	r2, [sp, #116]	; 0x74
 8008b5e:	5d5b      	ldrb	r3, [r3, r5]
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	d037      	beq.n	8008bd4 <_strtod_l+0x254>
 8008b64:	9007      	str	r0, [sp, #28]
 8008b66:	463d      	mov	r5, r7
 8008b68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b6c:	2a09      	cmp	r2, #9
 8008b6e:	d912      	bls.n	8008b96 <_strtod_l+0x216>
 8008b70:	2201      	movs	r2, #1
 8008b72:	e7c2      	b.n	8008afa <_strtod_l+0x17a>
 8008b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	921d      	str	r2, [sp, #116]	; 0x74
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	2b30      	cmp	r3, #48	; 0x30
 8008b80:	d0f8      	beq.n	8008b74 <_strtod_l+0x1f4>
 8008b82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b86:	2a08      	cmp	r2, #8
 8008b88:	f200 84db 	bhi.w	8009542 <_strtod_l+0xbc2>
 8008b8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b8e:	9007      	str	r0, [sp, #28]
 8008b90:	2000      	movs	r0, #0
 8008b92:	920a      	str	r2, [sp, #40]	; 0x28
 8008b94:	4605      	mov	r5, r0
 8008b96:	3b30      	subs	r3, #48	; 0x30
 8008b98:	f100 0201 	add.w	r2, r0, #1
 8008b9c:	d014      	beq.n	8008bc8 <_strtod_l+0x248>
 8008b9e:	9907      	ldr	r1, [sp, #28]
 8008ba0:	4411      	add	r1, r2
 8008ba2:	9107      	str	r1, [sp, #28]
 8008ba4:	462a      	mov	r2, r5
 8008ba6:	eb00 0e05 	add.w	lr, r0, r5
 8008baa:	210a      	movs	r1, #10
 8008bac:	4572      	cmp	r2, lr
 8008bae:	d113      	bne.n	8008bd8 <_strtod_l+0x258>
 8008bb0:	182a      	adds	r2, r5, r0
 8008bb2:	2a08      	cmp	r2, #8
 8008bb4:	f105 0501 	add.w	r5, r5, #1
 8008bb8:	4405      	add	r5, r0
 8008bba:	dc1c      	bgt.n	8008bf6 <_strtod_l+0x276>
 8008bbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bbe:	220a      	movs	r2, #10
 8008bc0:	fb02 3301 	mla	r3, r2, r1, r3
 8008bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bca:	1c59      	adds	r1, r3, #1
 8008bcc:	911d      	str	r1, [sp, #116]	; 0x74
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	e7c9      	b.n	8008b68 <_strtod_l+0x1e8>
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	e7d2      	b.n	8008b7e <_strtod_l+0x1fe>
 8008bd8:	2a08      	cmp	r2, #8
 8008bda:	dc04      	bgt.n	8008be6 <_strtod_l+0x266>
 8008bdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bde:	434e      	muls	r6, r1
 8008be0:	9609      	str	r6, [sp, #36]	; 0x24
 8008be2:	3201      	adds	r2, #1
 8008be4:	e7e2      	b.n	8008bac <_strtod_l+0x22c>
 8008be6:	f102 0c01 	add.w	ip, r2, #1
 8008bea:	f1bc 0f10 	cmp.w	ip, #16
 8008bee:	bfd8      	it	le
 8008bf0:	fb01 f909 	mulle.w	r9, r1, r9
 8008bf4:	e7f5      	b.n	8008be2 <_strtod_l+0x262>
 8008bf6:	2d10      	cmp	r5, #16
 8008bf8:	bfdc      	itt	le
 8008bfa:	220a      	movle	r2, #10
 8008bfc:	fb02 3909 	mlale	r9, r2, r9, r3
 8008c00:	e7e1      	b.n	8008bc6 <_strtod_l+0x246>
 8008c02:	2300      	movs	r3, #0
 8008c04:	9307      	str	r3, [sp, #28]
 8008c06:	2201      	movs	r2, #1
 8008c08:	e77c      	b.n	8008b04 <_strtod_l+0x184>
 8008c0a:	f04f 0c00 	mov.w	ip, #0
 8008c0e:	f108 0302 	add.w	r3, r8, #2
 8008c12:	931d      	str	r3, [sp, #116]	; 0x74
 8008c14:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008c18:	e785      	b.n	8008b26 <_strtod_l+0x1a6>
 8008c1a:	f04f 0c01 	mov.w	ip, #1
 8008c1e:	e7f6      	b.n	8008c0e <_strtod_l+0x28e>
 8008c20:	0800cdb8 	.word	0x0800cdb8
 8008c24:	0800ca64 	.word	0x0800ca64
 8008c28:	7ff00000 	.word	0x7ff00000
 8008c2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c2e:	1c59      	adds	r1, r3, #1
 8008c30:	911d      	str	r1, [sp, #116]	; 0x74
 8008c32:	785b      	ldrb	r3, [r3, #1]
 8008c34:	2b30      	cmp	r3, #48	; 0x30
 8008c36:	d0f9      	beq.n	8008c2c <_strtod_l+0x2ac>
 8008c38:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008c3c:	2908      	cmp	r1, #8
 8008c3e:	f63f af79 	bhi.w	8008b34 <_strtod_l+0x1b4>
 8008c42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008c46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c48:	9308      	str	r3, [sp, #32]
 8008c4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c4c:	1c59      	adds	r1, r3, #1
 8008c4e:	911d      	str	r1, [sp, #116]	; 0x74
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008c56:	2e09      	cmp	r6, #9
 8008c58:	d937      	bls.n	8008cca <_strtod_l+0x34a>
 8008c5a:	9e08      	ldr	r6, [sp, #32]
 8008c5c:	1b89      	subs	r1, r1, r6
 8008c5e:	2908      	cmp	r1, #8
 8008c60:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c64:	dc02      	bgt.n	8008c6c <_strtod_l+0x2ec>
 8008c66:	4576      	cmp	r6, lr
 8008c68:	bfa8      	it	ge
 8008c6a:	4676      	movge	r6, lr
 8008c6c:	f1bc 0f00 	cmp.w	ip, #0
 8008c70:	d000      	beq.n	8008c74 <_strtod_l+0x2f4>
 8008c72:	4276      	negs	r6, r6
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	d14f      	bne.n	8008d18 <_strtod_l+0x398>
 8008c78:	9904      	ldr	r1, [sp, #16]
 8008c7a:	4301      	orrs	r1, r0
 8008c7c:	f47f aec2 	bne.w	8008a04 <_strtod_l+0x84>
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	f47f aedb 	bne.w	8008a3c <_strtod_l+0xbc>
 8008c86:	2b69      	cmp	r3, #105	; 0x69
 8008c88:	d027      	beq.n	8008cda <_strtod_l+0x35a>
 8008c8a:	dc24      	bgt.n	8008cd6 <_strtod_l+0x356>
 8008c8c:	2b49      	cmp	r3, #73	; 0x49
 8008c8e:	d024      	beq.n	8008cda <_strtod_l+0x35a>
 8008c90:	2b4e      	cmp	r3, #78	; 0x4e
 8008c92:	f47f aed3 	bne.w	8008a3c <_strtod_l+0xbc>
 8008c96:	499e      	ldr	r1, [pc, #632]	; (8008f10 <_strtod_l+0x590>)
 8008c98:	a81d      	add	r0, sp, #116	; 0x74
 8008c9a:	f002 f981 	bl	800afa0 <__match>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f43f aecc 	beq.w	8008a3c <_strtod_l+0xbc>
 8008ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b28      	cmp	r3, #40	; 0x28
 8008caa:	d12d      	bne.n	8008d08 <_strtod_l+0x388>
 8008cac:	4999      	ldr	r1, [pc, #612]	; (8008f14 <_strtod_l+0x594>)
 8008cae:	aa20      	add	r2, sp, #128	; 0x80
 8008cb0:	a81d      	add	r0, sp, #116	; 0x74
 8008cb2:	f002 f989 	bl	800afc8 <__hexnan>
 8008cb6:	2805      	cmp	r0, #5
 8008cb8:	d126      	bne.n	8008d08 <_strtod_l+0x388>
 8008cba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cbc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008cc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008cc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008cc8:	e69c      	b.n	8008a04 <_strtod_l+0x84>
 8008cca:	210a      	movs	r1, #10
 8008ccc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008cd0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008cd4:	e7b9      	b.n	8008c4a <_strtod_l+0x2ca>
 8008cd6:	2b6e      	cmp	r3, #110	; 0x6e
 8008cd8:	e7db      	b.n	8008c92 <_strtod_l+0x312>
 8008cda:	498f      	ldr	r1, [pc, #572]	; (8008f18 <_strtod_l+0x598>)
 8008cdc:	a81d      	add	r0, sp, #116	; 0x74
 8008cde:	f002 f95f 	bl	800afa0 <__match>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f43f aeaa 	beq.w	8008a3c <_strtod_l+0xbc>
 8008ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cea:	498c      	ldr	r1, [pc, #560]	; (8008f1c <_strtod_l+0x59c>)
 8008cec:	3b01      	subs	r3, #1
 8008cee:	a81d      	add	r0, sp, #116	; 0x74
 8008cf0:	931d      	str	r3, [sp, #116]	; 0x74
 8008cf2:	f002 f955 	bl	800afa0 <__match>
 8008cf6:	b910      	cbnz	r0, 8008cfe <_strtod_l+0x37e>
 8008cf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	931d      	str	r3, [sp, #116]	; 0x74
 8008cfe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008f2c <_strtod_l+0x5ac>
 8008d02:	f04f 0a00 	mov.w	sl, #0
 8008d06:	e67d      	b.n	8008a04 <_strtod_l+0x84>
 8008d08:	4885      	ldr	r0, [pc, #532]	; (8008f20 <_strtod_l+0x5a0>)
 8008d0a:	f003 f9c9 	bl	800c0a0 <nan>
 8008d0e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008d12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008d16:	e675      	b.n	8008a04 <_strtod_l+0x84>
 8008d18:	9b07      	ldr	r3, [sp, #28]
 8008d1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d1c:	1af3      	subs	r3, r6, r3
 8008d1e:	2f00      	cmp	r7, #0
 8008d20:	bf08      	it	eq
 8008d22:	462f      	moveq	r7, r5
 8008d24:	2d10      	cmp	r5, #16
 8008d26:	9308      	str	r3, [sp, #32]
 8008d28:	46a8      	mov	r8, r5
 8008d2a:	bfa8      	it	ge
 8008d2c:	f04f 0810 	movge.w	r8, #16
 8008d30:	f7f7 fc18 	bl	8000564 <__aeabi_ui2d>
 8008d34:	2d09      	cmp	r5, #9
 8008d36:	4682      	mov	sl, r0
 8008d38:	468b      	mov	fp, r1
 8008d3a:	dd13      	ble.n	8008d64 <_strtod_l+0x3e4>
 8008d3c:	4b79      	ldr	r3, [pc, #484]	; (8008f24 <_strtod_l+0x5a4>)
 8008d3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d46:	f7f7 fc87 	bl	8000658 <__aeabi_dmul>
 8008d4a:	4682      	mov	sl, r0
 8008d4c:	4648      	mov	r0, r9
 8008d4e:	468b      	mov	fp, r1
 8008d50:	f7f7 fc08 	bl	8000564 <__aeabi_ui2d>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4650      	mov	r0, sl
 8008d5a:	4659      	mov	r1, fp
 8008d5c:	f7f7 fac6 	bl	80002ec <__adddf3>
 8008d60:	4682      	mov	sl, r0
 8008d62:	468b      	mov	fp, r1
 8008d64:	2d0f      	cmp	r5, #15
 8008d66:	dc38      	bgt.n	8008dda <_strtod_l+0x45a>
 8008d68:	9b08      	ldr	r3, [sp, #32]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f43f ae4a 	beq.w	8008a04 <_strtod_l+0x84>
 8008d70:	dd24      	ble.n	8008dbc <_strtod_l+0x43c>
 8008d72:	2b16      	cmp	r3, #22
 8008d74:	dc0b      	bgt.n	8008d8e <_strtod_l+0x40e>
 8008d76:	4d6b      	ldr	r5, [pc, #428]	; (8008f24 <_strtod_l+0x5a4>)
 8008d78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008d7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008d80:	4652      	mov	r2, sl
 8008d82:	465b      	mov	r3, fp
 8008d84:	f7f7 fc68 	bl	8000658 <__aeabi_dmul>
 8008d88:	4682      	mov	sl, r0
 8008d8a:	468b      	mov	fp, r1
 8008d8c:	e63a      	b.n	8008a04 <_strtod_l+0x84>
 8008d8e:	9a08      	ldr	r2, [sp, #32]
 8008d90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d94:	4293      	cmp	r3, r2
 8008d96:	db20      	blt.n	8008dda <_strtod_l+0x45a>
 8008d98:	4c62      	ldr	r4, [pc, #392]	; (8008f24 <_strtod_l+0x5a4>)
 8008d9a:	f1c5 050f 	rsb	r5, r5, #15
 8008d9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008da2:	4652      	mov	r2, sl
 8008da4:	465b      	mov	r3, fp
 8008da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008daa:	f7f7 fc55 	bl	8000658 <__aeabi_dmul>
 8008dae:	9b08      	ldr	r3, [sp, #32]
 8008db0:	1b5d      	subs	r5, r3, r5
 8008db2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008db6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008dba:	e7e3      	b.n	8008d84 <_strtod_l+0x404>
 8008dbc:	9b08      	ldr	r3, [sp, #32]
 8008dbe:	3316      	adds	r3, #22
 8008dc0:	db0b      	blt.n	8008dda <_strtod_l+0x45a>
 8008dc2:	9b07      	ldr	r3, [sp, #28]
 8008dc4:	4a57      	ldr	r2, [pc, #348]	; (8008f24 <_strtod_l+0x5a4>)
 8008dc6:	1b9e      	subs	r6, r3, r6
 8008dc8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	4659      	mov	r1, fp
 8008dd4:	f7f7 fd6a 	bl	80008ac <__aeabi_ddiv>
 8008dd8:	e7d6      	b.n	8008d88 <_strtod_l+0x408>
 8008dda:	9b08      	ldr	r3, [sp, #32]
 8008ddc:	eba5 0808 	sub.w	r8, r5, r8
 8008de0:	4498      	add	r8, r3
 8008de2:	f1b8 0f00 	cmp.w	r8, #0
 8008de6:	dd71      	ble.n	8008ecc <_strtod_l+0x54c>
 8008de8:	f018 030f 	ands.w	r3, r8, #15
 8008dec:	d00a      	beq.n	8008e04 <_strtod_l+0x484>
 8008dee:	494d      	ldr	r1, [pc, #308]	; (8008f24 <_strtod_l+0x5a4>)
 8008df0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008df4:	4652      	mov	r2, sl
 8008df6:	465b      	mov	r3, fp
 8008df8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dfc:	f7f7 fc2c 	bl	8000658 <__aeabi_dmul>
 8008e00:	4682      	mov	sl, r0
 8008e02:	468b      	mov	fp, r1
 8008e04:	f038 080f 	bics.w	r8, r8, #15
 8008e08:	d04d      	beq.n	8008ea6 <_strtod_l+0x526>
 8008e0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008e0e:	dd22      	ble.n	8008e56 <_strtod_l+0x4d6>
 8008e10:	2500      	movs	r5, #0
 8008e12:	462e      	mov	r6, r5
 8008e14:	9509      	str	r5, [sp, #36]	; 0x24
 8008e16:	9507      	str	r5, [sp, #28]
 8008e18:	2322      	movs	r3, #34	; 0x22
 8008e1a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008f2c <_strtod_l+0x5ac>
 8008e1e:	6023      	str	r3, [r4, #0]
 8008e20:	f04f 0a00 	mov.w	sl, #0
 8008e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f43f adec 	beq.w	8008a04 <_strtod_l+0x84>
 8008e2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f002 fa7a 	bl	800b328 <_Bfree>
 8008e34:	9907      	ldr	r1, [sp, #28]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f002 fa76 	bl	800b328 <_Bfree>
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f002 fa72 	bl	800b328 <_Bfree>
 8008e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e46:	4620      	mov	r0, r4
 8008e48:	f002 fa6e 	bl	800b328 <_Bfree>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4620      	mov	r0, r4
 8008e50:	f002 fa6a 	bl	800b328 <_Bfree>
 8008e54:	e5d6      	b.n	8008a04 <_strtod_l+0x84>
 8008e56:	2300      	movs	r3, #0
 8008e58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	4659      	mov	r1, fp
 8008e60:	4699      	mov	r9, r3
 8008e62:	f1b8 0f01 	cmp.w	r8, #1
 8008e66:	dc21      	bgt.n	8008eac <_strtod_l+0x52c>
 8008e68:	b10b      	cbz	r3, 8008e6e <_strtod_l+0x4ee>
 8008e6a:	4682      	mov	sl, r0
 8008e6c:	468b      	mov	fp, r1
 8008e6e:	4b2e      	ldr	r3, [pc, #184]	; (8008f28 <_strtod_l+0x5a8>)
 8008e70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e74:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e78:	4652      	mov	r2, sl
 8008e7a:	465b      	mov	r3, fp
 8008e7c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e80:	f7f7 fbea 	bl	8000658 <__aeabi_dmul>
 8008e84:	4b29      	ldr	r3, [pc, #164]	; (8008f2c <_strtod_l+0x5ac>)
 8008e86:	460a      	mov	r2, r1
 8008e88:	400b      	ands	r3, r1
 8008e8a:	4929      	ldr	r1, [pc, #164]	; (8008f30 <_strtod_l+0x5b0>)
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	4682      	mov	sl, r0
 8008e90:	d8be      	bhi.n	8008e10 <_strtod_l+0x490>
 8008e92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e96:	428b      	cmp	r3, r1
 8008e98:	bf86      	itte	hi
 8008e9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008f34 <_strtod_l+0x5b4>
 8008e9e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ea2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9304      	str	r3, [sp, #16]
 8008eaa:	e081      	b.n	8008fb0 <_strtod_l+0x630>
 8008eac:	f018 0f01 	tst.w	r8, #1
 8008eb0:	d007      	beq.n	8008ec2 <_strtod_l+0x542>
 8008eb2:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <_strtod_l+0x5a8>)
 8008eb4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebc:	f7f7 fbcc 	bl	8000658 <__aeabi_dmul>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	f109 0901 	add.w	r9, r9, #1
 8008ec6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008eca:	e7ca      	b.n	8008e62 <_strtod_l+0x4e2>
 8008ecc:	d0eb      	beq.n	8008ea6 <_strtod_l+0x526>
 8008ece:	f1c8 0800 	rsb	r8, r8, #0
 8008ed2:	f018 020f 	ands.w	r2, r8, #15
 8008ed6:	d00a      	beq.n	8008eee <_strtod_l+0x56e>
 8008ed8:	4b12      	ldr	r3, [pc, #72]	; (8008f24 <_strtod_l+0x5a4>)
 8008eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ede:	4650      	mov	r0, sl
 8008ee0:	4659      	mov	r1, fp
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 fce1 	bl	80008ac <__aeabi_ddiv>
 8008eea:	4682      	mov	sl, r0
 8008eec:	468b      	mov	fp, r1
 8008eee:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ef2:	d0d8      	beq.n	8008ea6 <_strtod_l+0x526>
 8008ef4:	f1b8 0f1f 	cmp.w	r8, #31
 8008ef8:	dd1e      	ble.n	8008f38 <_strtod_l+0x5b8>
 8008efa:	2500      	movs	r5, #0
 8008efc:	462e      	mov	r6, r5
 8008efe:	9509      	str	r5, [sp, #36]	; 0x24
 8008f00:	9507      	str	r5, [sp, #28]
 8008f02:	2322      	movs	r3, #34	; 0x22
 8008f04:	f04f 0a00 	mov.w	sl, #0
 8008f08:	f04f 0b00 	mov.w	fp, #0
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	e789      	b.n	8008e24 <_strtod_l+0x4a4>
 8008f10:	0800ca3d 	.word	0x0800ca3d
 8008f14:	0800ca78 	.word	0x0800ca78
 8008f18:	0800ca35 	.word	0x0800ca35
 8008f1c:	0800cc70 	.word	0x0800cc70
 8008f20:	0800cb6b 	.word	0x0800cb6b
 8008f24:	0800ce58 	.word	0x0800ce58
 8008f28:	0800ce30 	.word	0x0800ce30
 8008f2c:	7ff00000 	.word	0x7ff00000
 8008f30:	7ca00000 	.word	0x7ca00000
 8008f34:	7fefffff 	.word	0x7fefffff
 8008f38:	f018 0310 	ands.w	r3, r8, #16
 8008f3c:	bf18      	it	ne
 8008f3e:	236a      	movne	r3, #106	; 0x6a
 8008f40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80092f8 <_strtod_l+0x978>
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	4650      	mov	r0, sl
 8008f48:	4659      	mov	r1, fp
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	f018 0f01 	tst.w	r8, #1
 8008f50:	d004      	beq.n	8008f5c <_strtod_l+0x5dc>
 8008f52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f56:	f7f7 fb7f 	bl	8000658 <__aeabi_dmul>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f60:	f109 0908 	add.w	r9, r9, #8
 8008f64:	d1f2      	bne.n	8008f4c <_strtod_l+0x5cc>
 8008f66:	b10b      	cbz	r3, 8008f6c <_strtod_l+0x5ec>
 8008f68:	4682      	mov	sl, r0
 8008f6a:	468b      	mov	fp, r1
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	b1bb      	cbz	r3, 8008fa0 <_strtod_l+0x620>
 8008f70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	dd10      	ble.n	8008fa0 <_strtod_l+0x620>
 8008f7e:	2b1f      	cmp	r3, #31
 8008f80:	f340 8128 	ble.w	80091d4 <_strtod_l+0x854>
 8008f84:	2b34      	cmp	r3, #52	; 0x34
 8008f86:	bfde      	ittt	le
 8008f88:	3b20      	suble	r3, #32
 8008f8a:	f04f 32ff 	movle.w	r2, #4294967295
 8008f8e:	fa02 f303 	lslle.w	r3, r2, r3
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	bfcc      	ite	gt
 8008f98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f9c:	ea03 0b01 	andle.w	fp, r3, r1
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	4650      	mov	r0, sl
 8008fa6:	4659      	mov	r1, fp
 8008fa8:	f7f7 fdbe 	bl	8000b28 <__aeabi_dcmpeq>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	d1a4      	bne.n	8008efa <_strtod_l+0x57a>
 8008fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008fb6:	462b      	mov	r3, r5
 8008fb8:	463a      	mov	r2, r7
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f002 fa20 	bl	800b400 <__s2b>
 8008fc0:	9009      	str	r0, [sp, #36]	; 0x24
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f43f af24 	beq.w	8008e10 <_strtod_l+0x490>
 8008fc8:	9b07      	ldr	r3, [sp, #28]
 8008fca:	1b9e      	subs	r6, r3, r6
 8008fcc:	9b08      	ldr	r3, [sp, #32]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	bfb4      	ite	lt
 8008fd2:	4633      	movlt	r3, r6
 8008fd4:	2300      	movge	r3, #0
 8008fd6:	9310      	str	r3, [sp, #64]	; 0x40
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	2500      	movs	r5, #0
 8008fdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008fe0:	9318      	str	r3, [sp, #96]	; 0x60
 8008fe2:	462e      	mov	r6, r5
 8008fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	6859      	ldr	r1, [r3, #4]
 8008fea:	f002 f95d 	bl	800b2a8 <_Balloc>
 8008fee:	9007      	str	r0, [sp, #28]
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	f43f af11 	beq.w	8008e18 <_strtod_l+0x498>
 8008ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff8:	691a      	ldr	r2, [r3, #16]
 8008ffa:	3202      	adds	r2, #2
 8008ffc:	f103 010c 	add.w	r1, r3, #12
 8009000:	0092      	lsls	r2, r2, #2
 8009002:	300c      	adds	r0, #12
 8009004:	f002 f942 	bl	800b28c <memcpy>
 8009008:	ec4b ab10 	vmov	d0, sl, fp
 800900c:	aa20      	add	r2, sp, #128	; 0x80
 800900e:	a91f      	add	r1, sp, #124	; 0x7c
 8009010:	4620      	mov	r0, r4
 8009012:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009016:	f002 fd2f 	bl	800ba78 <__d2b>
 800901a:	901e      	str	r0, [sp, #120]	; 0x78
 800901c:	2800      	cmp	r0, #0
 800901e:	f43f aefb 	beq.w	8008e18 <_strtod_l+0x498>
 8009022:	2101      	movs	r1, #1
 8009024:	4620      	mov	r0, r4
 8009026:	f002 fa85 	bl	800b534 <__i2b>
 800902a:	4606      	mov	r6, r0
 800902c:	2800      	cmp	r0, #0
 800902e:	f43f aef3 	beq.w	8008e18 <_strtod_l+0x498>
 8009032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009034:	9904      	ldr	r1, [sp, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	bfab      	itete	ge
 800903a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800903c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800903e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009040:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009044:	bfac      	ite	ge
 8009046:	eb03 0902 	addge.w	r9, r3, r2
 800904a:	1ad7      	sublt	r7, r2, r3
 800904c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800904e:	eba3 0801 	sub.w	r8, r3, r1
 8009052:	4490      	add	r8, r2
 8009054:	4ba3      	ldr	r3, [pc, #652]	; (80092e4 <_strtod_l+0x964>)
 8009056:	f108 38ff 	add.w	r8, r8, #4294967295
 800905a:	4598      	cmp	r8, r3
 800905c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009060:	f280 80cc 	bge.w	80091fc <_strtod_l+0x87c>
 8009064:	eba3 0308 	sub.w	r3, r3, r8
 8009068:	2b1f      	cmp	r3, #31
 800906a:	eba2 0203 	sub.w	r2, r2, r3
 800906e:	f04f 0101 	mov.w	r1, #1
 8009072:	f300 80b6 	bgt.w	80091e2 <_strtod_l+0x862>
 8009076:	fa01 f303 	lsl.w	r3, r1, r3
 800907a:	9311      	str	r3, [sp, #68]	; 0x44
 800907c:	2300      	movs	r3, #0
 800907e:	930c      	str	r3, [sp, #48]	; 0x30
 8009080:	eb09 0802 	add.w	r8, r9, r2
 8009084:	9b04      	ldr	r3, [sp, #16]
 8009086:	45c1      	cmp	r9, r8
 8009088:	4417      	add	r7, r2
 800908a:	441f      	add	r7, r3
 800908c:	464b      	mov	r3, r9
 800908e:	bfa8      	it	ge
 8009090:	4643      	movge	r3, r8
 8009092:	42bb      	cmp	r3, r7
 8009094:	bfa8      	it	ge
 8009096:	463b      	movge	r3, r7
 8009098:	2b00      	cmp	r3, #0
 800909a:	bfc2      	ittt	gt
 800909c:	eba8 0803 	subgt.w	r8, r8, r3
 80090a0:	1aff      	subgt	r7, r7, r3
 80090a2:	eba9 0903 	subgt.w	r9, r9, r3
 80090a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	dd17      	ble.n	80090dc <_strtod_l+0x75c>
 80090ac:	4631      	mov	r1, r6
 80090ae:	461a      	mov	r2, r3
 80090b0:	4620      	mov	r0, r4
 80090b2:	f002 fafb 	bl	800b6ac <__pow5mult>
 80090b6:	4606      	mov	r6, r0
 80090b8:	2800      	cmp	r0, #0
 80090ba:	f43f aead 	beq.w	8008e18 <_strtod_l+0x498>
 80090be:	4601      	mov	r1, r0
 80090c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80090c2:	4620      	mov	r0, r4
 80090c4:	f002 fa4c 	bl	800b560 <__multiply>
 80090c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f aea4 	beq.w	8008e18 <_strtod_l+0x498>
 80090d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090d2:	4620      	mov	r0, r4
 80090d4:	f002 f928 	bl	800b328 <_Bfree>
 80090d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090da:	931e      	str	r3, [sp, #120]	; 0x78
 80090dc:	f1b8 0f00 	cmp.w	r8, #0
 80090e0:	f300 8091 	bgt.w	8009206 <_strtod_l+0x886>
 80090e4:	9b08      	ldr	r3, [sp, #32]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	dd08      	ble.n	80090fc <_strtod_l+0x77c>
 80090ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80090ec:	9907      	ldr	r1, [sp, #28]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f002 fadc 	bl	800b6ac <__pow5mult>
 80090f4:	9007      	str	r0, [sp, #28]
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f43f ae8e 	beq.w	8008e18 <_strtod_l+0x498>
 80090fc:	2f00      	cmp	r7, #0
 80090fe:	dd08      	ble.n	8009112 <_strtod_l+0x792>
 8009100:	9907      	ldr	r1, [sp, #28]
 8009102:	463a      	mov	r2, r7
 8009104:	4620      	mov	r0, r4
 8009106:	f002 fb2b 	bl	800b760 <__lshift>
 800910a:	9007      	str	r0, [sp, #28]
 800910c:	2800      	cmp	r0, #0
 800910e:	f43f ae83 	beq.w	8008e18 <_strtod_l+0x498>
 8009112:	f1b9 0f00 	cmp.w	r9, #0
 8009116:	dd08      	ble.n	800912a <_strtod_l+0x7aa>
 8009118:	4631      	mov	r1, r6
 800911a:	464a      	mov	r2, r9
 800911c:	4620      	mov	r0, r4
 800911e:	f002 fb1f 	bl	800b760 <__lshift>
 8009122:	4606      	mov	r6, r0
 8009124:	2800      	cmp	r0, #0
 8009126:	f43f ae77 	beq.w	8008e18 <_strtod_l+0x498>
 800912a:	9a07      	ldr	r2, [sp, #28]
 800912c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800912e:	4620      	mov	r0, r4
 8009130:	f002 fb9e 	bl	800b870 <__mdiff>
 8009134:	4605      	mov	r5, r0
 8009136:	2800      	cmp	r0, #0
 8009138:	f43f ae6e 	beq.w	8008e18 <_strtod_l+0x498>
 800913c:	68c3      	ldr	r3, [r0, #12]
 800913e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009140:	2300      	movs	r3, #0
 8009142:	60c3      	str	r3, [r0, #12]
 8009144:	4631      	mov	r1, r6
 8009146:	f002 fb77 	bl	800b838 <__mcmp>
 800914a:	2800      	cmp	r0, #0
 800914c:	da65      	bge.n	800921a <_strtod_l+0x89a>
 800914e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009150:	ea53 030a 	orrs.w	r3, r3, sl
 8009154:	f040 8087 	bne.w	8009266 <_strtod_l+0x8e6>
 8009158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800915c:	2b00      	cmp	r3, #0
 800915e:	f040 8082 	bne.w	8009266 <_strtod_l+0x8e6>
 8009162:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009166:	0d1b      	lsrs	r3, r3, #20
 8009168:	051b      	lsls	r3, r3, #20
 800916a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800916e:	d97a      	bls.n	8009266 <_strtod_l+0x8e6>
 8009170:	696b      	ldr	r3, [r5, #20]
 8009172:	b913      	cbnz	r3, 800917a <_strtod_l+0x7fa>
 8009174:	692b      	ldr	r3, [r5, #16]
 8009176:	2b01      	cmp	r3, #1
 8009178:	dd75      	ble.n	8009266 <_strtod_l+0x8e6>
 800917a:	4629      	mov	r1, r5
 800917c:	2201      	movs	r2, #1
 800917e:	4620      	mov	r0, r4
 8009180:	f002 faee 	bl	800b760 <__lshift>
 8009184:	4631      	mov	r1, r6
 8009186:	4605      	mov	r5, r0
 8009188:	f002 fb56 	bl	800b838 <__mcmp>
 800918c:	2800      	cmp	r0, #0
 800918e:	dd6a      	ble.n	8009266 <_strtod_l+0x8e6>
 8009190:	9904      	ldr	r1, [sp, #16]
 8009192:	4a55      	ldr	r2, [pc, #340]	; (80092e8 <_strtod_l+0x968>)
 8009194:	465b      	mov	r3, fp
 8009196:	2900      	cmp	r1, #0
 8009198:	f000 8085 	beq.w	80092a6 <_strtod_l+0x926>
 800919c:	ea02 010b 	and.w	r1, r2, fp
 80091a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80091a4:	dc7f      	bgt.n	80092a6 <_strtod_l+0x926>
 80091a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80091aa:	f77f aeaa 	ble.w	8008f02 <_strtod_l+0x582>
 80091ae:	4a4f      	ldr	r2, [pc, #316]	; (80092ec <_strtod_l+0x96c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80091b6:	4650      	mov	r0, sl
 80091b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80091bc:	4659      	mov	r1, fp
 80091be:	f7f7 fa4b 	bl	8000658 <__aeabi_dmul>
 80091c2:	460b      	mov	r3, r1
 80091c4:	4303      	orrs	r3, r0
 80091c6:	bf08      	it	eq
 80091c8:	2322      	moveq	r3, #34	; 0x22
 80091ca:	4682      	mov	sl, r0
 80091cc:	468b      	mov	fp, r1
 80091ce:	bf08      	it	eq
 80091d0:	6023      	streq	r3, [r4, #0]
 80091d2:	e62b      	b.n	8008e2c <_strtod_l+0x4ac>
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295
 80091d8:	fa02 f303 	lsl.w	r3, r2, r3
 80091dc:	ea03 0a0a 	and.w	sl, r3, sl
 80091e0:	e6de      	b.n	8008fa0 <_strtod_l+0x620>
 80091e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80091e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80091ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80091ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091f2:	fa01 f308 	lsl.w	r3, r1, r8
 80091f6:	930c      	str	r3, [sp, #48]	; 0x30
 80091f8:	9111      	str	r1, [sp, #68]	; 0x44
 80091fa:	e741      	b.n	8009080 <_strtod_l+0x700>
 80091fc:	2300      	movs	r3, #0
 80091fe:	930c      	str	r3, [sp, #48]	; 0x30
 8009200:	2301      	movs	r3, #1
 8009202:	9311      	str	r3, [sp, #68]	; 0x44
 8009204:	e73c      	b.n	8009080 <_strtod_l+0x700>
 8009206:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009208:	4642      	mov	r2, r8
 800920a:	4620      	mov	r0, r4
 800920c:	f002 faa8 	bl	800b760 <__lshift>
 8009210:	901e      	str	r0, [sp, #120]	; 0x78
 8009212:	2800      	cmp	r0, #0
 8009214:	f47f af66 	bne.w	80090e4 <_strtod_l+0x764>
 8009218:	e5fe      	b.n	8008e18 <_strtod_l+0x498>
 800921a:	465f      	mov	r7, fp
 800921c:	d16e      	bne.n	80092fc <_strtod_l+0x97c>
 800921e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009224:	b342      	cbz	r2, 8009278 <_strtod_l+0x8f8>
 8009226:	4a32      	ldr	r2, [pc, #200]	; (80092f0 <_strtod_l+0x970>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d128      	bne.n	800927e <_strtod_l+0x8fe>
 800922c:	9b04      	ldr	r3, [sp, #16]
 800922e:	4650      	mov	r0, sl
 8009230:	b1eb      	cbz	r3, 800926e <_strtod_l+0x8ee>
 8009232:	4a2d      	ldr	r2, [pc, #180]	; (80092e8 <_strtod_l+0x968>)
 8009234:	403a      	ands	r2, r7
 8009236:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800923a:	f04f 31ff 	mov.w	r1, #4294967295
 800923e:	d819      	bhi.n	8009274 <_strtod_l+0x8f4>
 8009240:	0d12      	lsrs	r2, r2, #20
 8009242:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009246:	fa01 f303 	lsl.w	r3, r1, r3
 800924a:	4298      	cmp	r0, r3
 800924c:	d117      	bne.n	800927e <_strtod_l+0x8fe>
 800924e:	4b29      	ldr	r3, [pc, #164]	; (80092f4 <_strtod_l+0x974>)
 8009250:	429f      	cmp	r7, r3
 8009252:	d102      	bne.n	800925a <_strtod_l+0x8da>
 8009254:	3001      	adds	r0, #1
 8009256:	f43f addf 	beq.w	8008e18 <_strtod_l+0x498>
 800925a:	4b23      	ldr	r3, [pc, #140]	; (80092e8 <_strtod_l+0x968>)
 800925c:	403b      	ands	r3, r7
 800925e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009262:	f04f 0a00 	mov.w	sl, #0
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1a0      	bne.n	80091ae <_strtod_l+0x82e>
 800926c:	e5de      	b.n	8008e2c <_strtod_l+0x4ac>
 800926e:	f04f 33ff 	mov.w	r3, #4294967295
 8009272:	e7ea      	b.n	800924a <_strtod_l+0x8ca>
 8009274:	460b      	mov	r3, r1
 8009276:	e7e8      	b.n	800924a <_strtod_l+0x8ca>
 8009278:	ea53 030a 	orrs.w	r3, r3, sl
 800927c:	d088      	beq.n	8009190 <_strtod_l+0x810>
 800927e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009280:	b1db      	cbz	r3, 80092ba <_strtod_l+0x93a>
 8009282:	423b      	tst	r3, r7
 8009284:	d0ef      	beq.n	8009266 <_strtod_l+0x8e6>
 8009286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009288:	9a04      	ldr	r2, [sp, #16]
 800928a:	4650      	mov	r0, sl
 800928c:	4659      	mov	r1, fp
 800928e:	b1c3      	cbz	r3, 80092c2 <_strtod_l+0x942>
 8009290:	f7ff fb5a 	bl	8008948 <sulp>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800929c:	f7f7 f826 	bl	80002ec <__adddf3>
 80092a0:	4682      	mov	sl, r0
 80092a2:	468b      	mov	fp, r1
 80092a4:	e7df      	b.n	8009266 <_strtod_l+0x8e6>
 80092a6:	4013      	ands	r3, r2
 80092a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80092ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80092b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092b4:	f04f 3aff 	mov.w	sl, #4294967295
 80092b8:	e7d5      	b.n	8009266 <_strtod_l+0x8e6>
 80092ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092bc:	ea13 0f0a 	tst.w	r3, sl
 80092c0:	e7e0      	b.n	8009284 <_strtod_l+0x904>
 80092c2:	f7ff fb41 	bl	8008948 <sulp>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092ce:	f7f7 f80b 	bl	80002e8 <__aeabi_dsub>
 80092d2:	2200      	movs	r2, #0
 80092d4:	2300      	movs	r3, #0
 80092d6:	4682      	mov	sl, r0
 80092d8:	468b      	mov	fp, r1
 80092da:	f7f7 fc25 	bl	8000b28 <__aeabi_dcmpeq>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d0c1      	beq.n	8009266 <_strtod_l+0x8e6>
 80092e2:	e60e      	b.n	8008f02 <_strtod_l+0x582>
 80092e4:	fffffc02 	.word	0xfffffc02
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	39500000 	.word	0x39500000
 80092f0:	000fffff 	.word	0x000fffff
 80092f4:	7fefffff 	.word	0x7fefffff
 80092f8:	0800ca90 	.word	0x0800ca90
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	f002 fc16 	bl	800bb30 <__ratio>
 8009304:	ec59 8b10 	vmov	r8, r9, d0
 8009308:	ee10 0a10 	vmov	r0, s0
 800930c:	2200      	movs	r2, #0
 800930e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009312:	4649      	mov	r1, r9
 8009314:	f7f7 fc1c 	bl	8000b50 <__aeabi_dcmple>
 8009318:	2800      	cmp	r0, #0
 800931a:	d07c      	beq.n	8009416 <_strtod_l+0xa96>
 800931c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d04c      	beq.n	80093bc <_strtod_l+0xa3c>
 8009322:	4b95      	ldr	r3, [pc, #596]	; (8009578 <_strtod_l+0xbf8>)
 8009324:	2200      	movs	r2, #0
 8009326:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800932a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009578 <_strtod_l+0xbf8>
 800932e:	f04f 0800 	mov.w	r8, #0
 8009332:	4b92      	ldr	r3, [pc, #584]	; (800957c <_strtod_l+0xbfc>)
 8009334:	403b      	ands	r3, r7
 8009336:	9311      	str	r3, [sp, #68]	; 0x44
 8009338:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800933a:	4b91      	ldr	r3, [pc, #580]	; (8009580 <_strtod_l+0xc00>)
 800933c:	429a      	cmp	r2, r3
 800933e:	f040 80b2 	bne.w	80094a6 <_strtod_l+0xb26>
 8009342:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800934a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800934e:	ec4b ab10 	vmov	d0, sl, fp
 8009352:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009356:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800935a:	f002 fb11 	bl	800b980 <__ulp>
 800935e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009362:	ec53 2b10 	vmov	r2, r3, d0
 8009366:	f7f7 f977 	bl	8000658 <__aeabi_dmul>
 800936a:	4652      	mov	r2, sl
 800936c:	465b      	mov	r3, fp
 800936e:	f7f6 ffbd 	bl	80002ec <__adddf3>
 8009372:	460b      	mov	r3, r1
 8009374:	4981      	ldr	r1, [pc, #516]	; (800957c <_strtod_l+0xbfc>)
 8009376:	4a83      	ldr	r2, [pc, #524]	; (8009584 <_strtod_l+0xc04>)
 8009378:	4019      	ands	r1, r3
 800937a:	4291      	cmp	r1, r2
 800937c:	4682      	mov	sl, r0
 800937e:	d95e      	bls.n	800943e <_strtod_l+0xabe>
 8009380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009382:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009386:	4293      	cmp	r3, r2
 8009388:	d103      	bne.n	8009392 <_strtod_l+0xa12>
 800938a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800938c:	3301      	adds	r3, #1
 800938e:	f43f ad43 	beq.w	8008e18 <_strtod_l+0x498>
 8009392:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009590 <_strtod_l+0xc10>
 8009396:	f04f 3aff 	mov.w	sl, #4294967295
 800939a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800939c:	4620      	mov	r0, r4
 800939e:	f001 ffc3 	bl	800b328 <_Bfree>
 80093a2:	9907      	ldr	r1, [sp, #28]
 80093a4:	4620      	mov	r0, r4
 80093a6:	f001 ffbf 	bl	800b328 <_Bfree>
 80093aa:	4631      	mov	r1, r6
 80093ac:	4620      	mov	r0, r4
 80093ae:	f001 ffbb 	bl	800b328 <_Bfree>
 80093b2:	4629      	mov	r1, r5
 80093b4:	4620      	mov	r0, r4
 80093b6:	f001 ffb7 	bl	800b328 <_Bfree>
 80093ba:	e613      	b.n	8008fe4 <_strtod_l+0x664>
 80093bc:	f1ba 0f00 	cmp.w	sl, #0
 80093c0:	d11b      	bne.n	80093fa <_strtod_l+0xa7a>
 80093c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093c6:	b9f3      	cbnz	r3, 8009406 <_strtod_l+0xa86>
 80093c8:	4b6b      	ldr	r3, [pc, #428]	; (8009578 <_strtod_l+0xbf8>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f7 fbb4 	bl	8000b3c <__aeabi_dcmplt>
 80093d4:	b9d0      	cbnz	r0, 800940c <_strtod_l+0xa8c>
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	4b6b      	ldr	r3, [pc, #428]	; (8009588 <_strtod_l+0xc08>)
 80093dc:	2200      	movs	r2, #0
 80093de:	f7f7 f93b 	bl	8000658 <__aeabi_dmul>
 80093e2:	4680      	mov	r8, r0
 80093e4:	4689      	mov	r9, r1
 80093e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093ea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80093ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80093f0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80093f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093f8:	e79b      	b.n	8009332 <_strtod_l+0x9b2>
 80093fa:	f1ba 0f01 	cmp.w	sl, #1
 80093fe:	d102      	bne.n	8009406 <_strtod_l+0xa86>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f43f ad7e 	beq.w	8008f02 <_strtod_l+0x582>
 8009406:	4b61      	ldr	r3, [pc, #388]	; (800958c <_strtod_l+0xc0c>)
 8009408:	2200      	movs	r2, #0
 800940a:	e78c      	b.n	8009326 <_strtod_l+0x9a6>
 800940c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009588 <_strtod_l+0xc08>
 8009410:	f04f 0800 	mov.w	r8, #0
 8009414:	e7e7      	b.n	80093e6 <_strtod_l+0xa66>
 8009416:	4b5c      	ldr	r3, [pc, #368]	; (8009588 <_strtod_l+0xc08>)
 8009418:	4640      	mov	r0, r8
 800941a:	4649      	mov	r1, r9
 800941c:	2200      	movs	r2, #0
 800941e:	f7f7 f91b 	bl	8000658 <__aeabi_dmul>
 8009422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	b933      	cbnz	r3, 8009438 <_strtod_l+0xab8>
 800942a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800942e:	9012      	str	r0, [sp, #72]	; 0x48
 8009430:	9313      	str	r3, [sp, #76]	; 0x4c
 8009432:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009436:	e7dd      	b.n	80093f4 <_strtod_l+0xa74>
 8009438:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800943c:	e7f9      	b.n	8009432 <_strtod_l+0xab2>
 800943e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009442:	9b04      	ldr	r3, [sp, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1a8      	bne.n	800939a <_strtod_l+0xa1a>
 8009448:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800944c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800944e:	0d1b      	lsrs	r3, r3, #20
 8009450:	051b      	lsls	r3, r3, #20
 8009452:	429a      	cmp	r2, r3
 8009454:	d1a1      	bne.n	800939a <_strtod_l+0xa1a>
 8009456:	4640      	mov	r0, r8
 8009458:	4649      	mov	r1, r9
 800945a:	f7f7 fc5d 	bl	8000d18 <__aeabi_d2lz>
 800945e:	f7f7 f8cd 	bl	80005fc <__aeabi_l2d>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f6 ff3d 	bl	80002e8 <__aeabi_dsub>
 800946e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009470:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009474:	ea43 030a 	orr.w	r3, r3, sl
 8009478:	4313      	orrs	r3, r2
 800947a:	4680      	mov	r8, r0
 800947c:	4689      	mov	r9, r1
 800947e:	d053      	beq.n	8009528 <_strtod_l+0xba8>
 8009480:	a335      	add	r3, pc, #212	; (adr r3, 8009558 <_strtod_l+0xbd8>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f7 fb59 	bl	8000b3c <__aeabi_dcmplt>
 800948a:	2800      	cmp	r0, #0
 800948c:	f47f acce 	bne.w	8008e2c <_strtod_l+0x4ac>
 8009490:	a333      	add	r3, pc, #204	; (adr r3, 8009560 <_strtod_l+0xbe0>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	4640      	mov	r0, r8
 8009498:	4649      	mov	r1, r9
 800949a:	f7f7 fb6d 	bl	8000b78 <__aeabi_dcmpgt>
 800949e:	2800      	cmp	r0, #0
 80094a0:	f43f af7b 	beq.w	800939a <_strtod_l+0xa1a>
 80094a4:	e4c2      	b.n	8008e2c <_strtod_l+0x4ac>
 80094a6:	9b04      	ldr	r3, [sp, #16]
 80094a8:	b333      	cbz	r3, 80094f8 <_strtod_l+0xb78>
 80094aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094b0:	d822      	bhi.n	80094f8 <_strtod_l+0xb78>
 80094b2:	a32d      	add	r3, pc, #180	; (adr r3, 8009568 <_strtod_l+0xbe8>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f7 fb48 	bl	8000b50 <__aeabi_dcmple>
 80094c0:	b1a0      	cbz	r0, 80094ec <_strtod_l+0xb6c>
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	f7f7 fb9f 	bl	8000c08 <__aeabi_d2uiz>
 80094ca:	2801      	cmp	r0, #1
 80094cc:	bf38      	it	cc
 80094ce:	2001      	movcc	r0, #1
 80094d0:	f7f7 f848 	bl	8000564 <__aeabi_ui2d>
 80094d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094d6:	4680      	mov	r8, r0
 80094d8:	4689      	mov	r9, r1
 80094da:	bb13      	cbnz	r3, 8009522 <_strtod_l+0xba2>
 80094dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094e0:	9014      	str	r0, [sp, #80]	; 0x50
 80094e2:	9315      	str	r3, [sp, #84]	; 0x54
 80094e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80094e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80094ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	930d      	str	r3, [sp, #52]	; 0x34
 80094f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009500:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009504:	f002 fa3c 	bl	800b980 <__ulp>
 8009508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800950c:	ec53 2b10 	vmov	r2, r3, d0
 8009510:	f7f7 f8a2 	bl	8000658 <__aeabi_dmul>
 8009514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009518:	f7f6 fee8 	bl	80002ec <__adddf3>
 800951c:	4682      	mov	sl, r0
 800951e:	468b      	mov	fp, r1
 8009520:	e78f      	b.n	8009442 <_strtod_l+0xac2>
 8009522:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009526:	e7dd      	b.n	80094e4 <_strtod_l+0xb64>
 8009528:	a311      	add	r3, pc, #68	; (adr r3, 8009570 <_strtod_l+0xbf0>)
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f7f7 fb05 	bl	8000b3c <__aeabi_dcmplt>
 8009532:	e7b4      	b.n	800949e <_strtod_l+0xb1e>
 8009534:	2300      	movs	r3, #0
 8009536:	930e      	str	r3, [sp, #56]	; 0x38
 8009538:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800953a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	f7ff ba65 	b.w	8008a0c <_strtod_l+0x8c>
 8009542:	2b65      	cmp	r3, #101	; 0x65
 8009544:	f43f ab5d 	beq.w	8008c02 <_strtod_l+0x282>
 8009548:	2b45      	cmp	r3, #69	; 0x45
 800954a:	f43f ab5a 	beq.w	8008c02 <_strtod_l+0x282>
 800954e:	2201      	movs	r2, #1
 8009550:	f7ff bb92 	b.w	8008c78 <_strtod_l+0x2f8>
 8009554:	f3af 8000 	nop.w
 8009558:	94a03595 	.word	0x94a03595
 800955c:	3fdfffff 	.word	0x3fdfffff
 8009560:	35afe535 	.word	0x35afe535
 8009564:	3fe00000 	.word	0x3fe00000
 8009568:	ffc00000 	.word	0xffc00000
 800956c:	41dfffff 	.word	0x41dfffff
 8009570:	94a03595 	.word	0x94a03595
 8009574:	3fcfffff 	.word	0x3fcfffff
 8009578:	3ff00000 	.word	0x3ff00000
 800957c:	7ff00000 	.word	0x7ff00000
 8009580:	7fe00000 	.word	0x7fe00000
 8009584:	7c9fffff 	.word	0x7c9fffff
 8009588:	3fe00000 	.word	0x3fe00000
 800958c:	bff00000 	.word	0xbff00000
 8009590:	7fefffff 	.word	0x7fefffff

08009594 <strtod>:
 8009594:	460a      	mov	r2, r1
 8009596:	4601      	mov	r1, r0
 8009598:	4802      	ldr	r0, [pc, #8]	; (80095a4 <strtod+0x10>)
 800959a:	4b03      	ldr	r3, [pc, #12]	; (80095a8 <strtod+0x14>)
 800959c:	6800      	ldr	r0, [r0, #0]
 800959e:	f7ff b9ef 	b.w	8008980 <_strtod_l>
 80095a2:	bf00      	nop
 80095a4:	2000000c 	.word	0x2000000c
 80095a8:	20000074 	.word	0x20000074

080095ac <strtok>:
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <strtok+0x5c>)
 80095ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095b0:	681e      	ldr	r6, [r3, #0]
 80095b2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80095b4:	4605      	mov	r5, r0
 80095b6:	b9fc      	cbnz	r4, 80095f8 <strtok+0x4c>
 80095b8:	2050      	movs	r0, #80	; 0x50
 80095ba:	9101      	str	r1, [sp, #4]
 80095bc:	f001 fe4c 	bl	800b258 <malloc>
 80095c0:	9901      	ldr	r1, [sp, #4]
 80095c2:	65b0      	str	r0, [r6, #88]	; 0x58
 80095c4:	4602      	mov	r2, r0
 80095c6:	b920      	cbnz	r0, 80095d2 <strtok+0x26>
 80095c8:	4b10      	ldr	r3, [pc, #64]	; (800960c <strtok+0x60>)
 80095ca:	4811      	ldr	r0, [pc, #68]	; (8009610 <strtok+0x64>)
 80095cc:	2157      	movs	r1, #87	; 0x57
 80095ce:	f000 f997 	bl	8009900 <__assert_func>
 80095d2:	e9c0 4400 	strd	r4, r4, [r0]
 80095d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80095da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80095de:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80095e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80095e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80095ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80095ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80095f2:	6184      	str	r4, [r0, #24]
 80095f4:	7704      	strb	r4, [r0, #28]
 80095f6:	6244      	str	r4, [r0, #36]	; 0x24
 80095f8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80095fa:	2301      	movs	r3, #1
 80095fc:	4628      	mov	r0, r5
 80095fe:	b002      	add	sp, #8
 8009600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009604:	f000 b806 	b.w	8009614 <__strtok_r>
 8009608:	2000000c 	.word	0x2000000c
 800960c:	0800cab8 	.word	0x0800cab8
 8009610:	0800cacf 	.word	0x0800cacf

08009614 <__strtok_r>:
 8009614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009616:	b908      	cbnz	r0, 800961c <__strtok_r+0x8>
 8009618:	6810      	ldr	r0, [r2, #0]
 800961a:	b188      	cbz	r0, 8009640 <__strtok_r+0x2c>
 800961c:	4604      	mov	r4, r0
 800961e:	4620      	mov	r0, r4
 8009620:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009624:	460f      	mov	r7, r1
 8009626:	f817 6b01 	ldrb.w	r6, [r7], #1
 800962a:	b91e      	cbnz	r6, 8009634 <__strtok_r+0x20>
 800962c:	b965      	cbnz	r5, 8009648 <__strtok_r+0x34>
 800962e:	6015      	str	r5, [r2, #0]
 8009630:	4628      	mov	r0, r5
 8009632:	e005      	b.n	8009640 <__strtok_r+0x2c>
 8009634:	42b5      	cmp	r5, r6
 8009636:	d1f6      	bne.n	8009626 <__strtok_r+0x12>
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f0      	bne.n	800961e <__strtok_r+0xa>
 800963c:	6014      	str	r4, [r2, #0]
 800963e:	7003      	strb	r3, [r0, #0]
 8009640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009642:	461c      	mov	r4, r3
 8009644:	e00c      	b.n	8009660 <__strtok_r+0x4c>
 8009646:	b915      	cbnz	r5, 800964e <__strtok_r+0x3a>
 8009648:	f814 3b01 	ldrb.w	r3, [r4], #1
 800964c:	460e      	mov	r6, r1
 800964e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009652:	42ab      	cmp	r3, r5
 8009654:	d1f7      	bne.n	8009646 <__strtok_r+0x32>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0f3      	beq.n	8009642 <__strtok_r+0x2e>
 800965a:	2300      	movs	r3, #0
 800965c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009660:	6014      	str	r4, [r2, #0]
 8009662:	e7ed      	b.n	8009640 <__strtok_r+0x2c>

08009664 <_strtol_l.isra.0>:
 8009664:	2b01      	cmp	r3, #1
 8009666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966a:	d001      	beq.n	8009670 <_strtol_l.isra.0+0xc>
 800966c:	2b24      	cmp	r3, #36	; 0x24
 800966e:	d906      	bls.n	800967e <_strtol_l.isra.0+0x1a>
 8009670:	f7fe fc26 	bl	8007ec0 <__errno>
 8009674:	2316      	movs	r3, #22
 8009676:	6003      	str	r3, [r0, #0]
 8009678:	2000      	movs	r0, #0
 800967a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967e:	4f3a      	ldr	r7, [pc, #232]	; (8009768 <_strtol_l.isra.0+0x104>)
 8009680:	468e      	mov	lr, r1
 8009682:	4676      	mov	r6, lr
 8009684:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009688:	5de5      	ldrb	r5, [r4, r7]
 800968a:	f015 0508 	ands.w	r5, r5, #8
 800968e:	d1f8      	bne.n	8009682 <_strtol_l.isra.0+0x1e>
 8009690:	2c2d      	cmp	r4, #45	; 0x2d
 8009692:	d134      	bne.n	80096fe <_strtol_l.isra.0+0x9a>
 8009694:	f89e 4000 	ldrb.w	r4, [lr]
 8009698:	f04f 0801 	mov.w	r8, #1
 800969c:	f106 0e02 	add.w	lr, r6, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d05c      	beq.n	800975e <_strtol_l.isra.0+0xfa>
 80096a4:	2b10      	cmp	r3, #16
 80096a6:	d10c      	bne.n	80096c2 <_strtol_l.isra.0+0x5e>
 80096a8:	2c30      	cmp	r4, #48	; 0x30
 80096aa:	d10a      	bne.n	80096c2 <_strtol_l.isra.0+0x5e>
 80096ac:	f89e 4000 	ldrb.w	r4, [lr]
 80096b0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096b4:	2c58      	cmp	r4, #88	; 0x58
 80096b6:	d14d      	bne.n	8009754 <_strtol_l.isra.0+0xf0>
 80096b8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80096bc:	2310      	movs	r3, #16
 80096be:	f10e 0e02 	add.w	lr, lr, #2
 80096c2:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80096c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096ca:	2600      	movs	r6, #0
 80096cc:	fbbc f9f3 	udiv	r9, ip, r3
 80096d0:	4635      	mov	r5, r6
 80096d2:	fb03 ca19 	mls	sl, r3, r9, ip
 80096d6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80096da:	2f09      	cmp	r7, #9
 80096dc:	d818      	bhi.n	8009710 <_strtol_l.isra.0+0xac>
 80096de:	463c      	mov	r4, r7
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	dd24      	ble.n	800972e <_strtol_l.isra.0+0xca>
 80096e4:	2e00      	cmp	r6, #0
 80096e6:	db1f      	blt.n	8009728 <_strtol_l.isra.0+0xc4>
 80096e8:	45a9      	cmp	r9, r5
 80096ea:	d31d      	bcc.n	8009728 <_strtol_l.isra.0+0xc4>
 80096ec:	d101      	bne.n	80096f2 <_strtol_l.isra.0+0x8e>
 80096ee:	45a2      	cmp	sl, r4
 80096f0:	db1a      	blt.n	8009728 <_strtol_l.isra.0+0xc4>
 80096f2:	fb05 4503 	mla	r5, r5, r3, r4
 80096f6:	2601      	movs	r6, #1
 80096f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80096fc:	e7eb      	b.n	80096d6 <_strtol_l.isra.0+0x72>
 80096fe:	2c2b      	cmp	r4, #43	; 0x2b
 8009700:	bf08      	it	eq
 8009702:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009706:	46a8      	mov	r8, r5
 8009708:	bf08      	it	eq
 800970a:	f106 0e02 	addeq.w	lr, r6, #2
 800970e:	e7c7      	b.n	80096a0 <_strtol_l.isra.0+0x3c>
 8009710:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009714:	2f19      	cmp	r7, #25
 8009716:	d801      	bhi.n	800971c <_strtol_l.isra.0+0xb8>
 8009718:	3c37      	subs	r4, #55	; 0x37
 800971a:	e7e1      	b.n	80096e0 <_strtol_l.isra.0+0x7c>
 800971c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009720:	2f19      	cmp	r7, #25
 8009722:	d804      	bhi.n	800972e <_strtol_l.isra.0+0xca>
 8009724:	3c57      	subs	r4, #87	; 0x57
 8009726:	e7db      	b.n	80096e0 <_strtol_l.isra.0+0x7c>
 8009728:	f04f 36ff 	mov.w	r6, #4294967295
 800972c:	e7e4      	b.n	80096f8 <_strtol_l.isra.0+0x94>
 800972e:	2e00      	cmp	r6, #0
 8009730:	da05      	bge.n	800973e <_strtol_l.isra.0+0xda>
 8009732:	2322      	movs	r3, #34	; 0x22
 8009734:	6003      	str	r3, [r0, #0]
 8009736:	4665      	mov	r5, ip
 8009738:	b942      	cbnz	r2, 800974c <_strtol_l.isra.0+0xe8>
 800973a:	4628      	mov	r0, r5
 800973c:	e79d      	b.n	800967a <_strtol_l.isra.0+0x16>
 800973e:	f1b8 0f00 	cmp.w	r8, #0
 8009742:	d000      	beq.n	8009746 <_strtol_l.isra.0+0xe2>
 8009744:	426d      	negs	r5, r5
 8009746:	2a00      	cmp	r2, #0
 8009748:	d0f7      	beq.n	800973a <_strtol_l.isra.0+0xd6>
 800974a:	b10e      	cbz	r6, 8009750 <_strtol_l.isra.0+0xec>
 800974c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009750:	6011      	str	r1, [r2, #0]
 8009752:	e7f2      	b.n	800973a <_strtol_l.isra.0+0xd6>
 8009754:	2430      	movs	r4, #48	; 0x30
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1b3      	bne.n	80096c2 <_strtol_l.isra.0+0x5e>
 800975a:	2308      	movs	r3, #8
 800975c:	e7b1      	b.n	80096c2 <_strtol_l.isra.0+0x5e>
 800975e:	2c30      	cmp	r4, #48	; 0x30
 8009760:	d0a4      	beq.n	80096ac <_strtol_l.isra.0+0x48>
 8009762:	230a      	movs	r3, #10
 8009764:	e7ad      	b.n	80096c2 <_strtol_l.isra.0+0x5e>
 8009766:	bf00      	nop
 8009768:	0800cb6d 	.word	0x0800cb6d

0800976c <strtol>:
 800976c:	4613      	mov	r3, r2
 800976e:	460a      	mov	r2, r1
 8009770:	4601      	mov	r1, r0
 8009772:	4802      	ldr	r0, [pc, #8]	; (800977c <strtol+0x10>)
 8009774:	6800      	ldr	r0, [r0, #0]
 8009776:	f7ff bf75 	b.w	8009664 <_strtol_l.isra.0>
 800977a:	bf00      	nop
 800977c:	2000000c 	.word	0x2000000c

08009780 <__swbuf_r>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	460e      	mov	r6, r1
 8009784:	4614      	mov	r4, r2
 8009786:	4605      	mov	r5, r0
 8009788:	b118      	cbz	r0, 8009792 <__swbuf_r+0x12>
 800978a:	6983      	ldr	r3, [r0, #24]
 800978c:	b90b      	cbnz	r3, 8009792 <__swbuf_r+0x12>
 800978e:	f001 f87b 	bl	800a888 <__sinit>
 8009792:	4b21      	ldr	r3, [pc, #132]	; (8009818 <__swbuf_r+0x98>)
 8009794:	429c      	cmp	r4, r3
 8009796:	d12b      	bne.n	80097f0 <__swbuf_r+0x70>
 8009798:	686c      	ldr	r4, [r5, #4]
 800979a:	69a3      	ldr	r3, [r4, #24]
 800979c:	60a3      	str	r3, [r4, #8]
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	071a      	lsls	r2, r3, #28
 80097a2:	d52f      	bpl.n	8009804 <__swbuf_r+0x84>
 80097a4:	6923      	ldr	r3, [r4, #16]
 80097a6:	b36b      	cbz	r3, 8009804 <__swbuf_r+0x84>
 80097a8:	6923      	ldr	r3, [r4, #16]
 80097aa:	6820      	ldr	r0, [r4, #0]
 80097ac:	1ac0      	subs	r0, r0, r3
 80097ae:	6963      	ldr	r3, [r4, #20]
 80097b0:	b2f6      	uxtb	r6, r6
 80097b2:	4283      	cmp	r3, r0
 80097b4:	4637      	mov	r7, r6
 80097b6:	dc04      	bgt.n	80097c2 <__swbuf_r+0x42>
 80097b8:	4621      	mov	r1, r4
 80097ba:	4628      	mov	r0, r5
 80097bc:	f000 ffbe 	bl	800a73c <_fflush_r>
 80097c0:	bb30      	cbnz	r0, 8009810 <__swbuf_r+0x90>
 80097c2:	68a3      	ldr	r3, [r4, #8]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	60a3      	str	r3, [r4, #8]
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	701e      	strb	r6, [r3, #0]
 80097d0:	6963      	ldr	r3, [r4, #20]
 80097d2:	3001      	adds	r0, #1
 80097d4:	4283      	cmp	r3, r0
 80097d6:	d004      	beq.n	80097e2 <__swbuf_r+0x62>
 80097d8:	89a3      	ldrh	r3, [r4, #12]
 80097da:	07db      	lsls	r3, r3, #31
 80097dc:	d506      	bpl.n	80097ec <__swbuf_r+0x6c>
 80097de:	2e0a      	cmp	r6, #10
 80097e0:	d104      	bne.n	80097ec <__swbuf_r+0x6c>
 80097e2:	4621      	mov	r1, r4
 80097e4:	4628      	mov	r0, r5
 80097e6:	f000 ffa9 	bl	800a73c <_fflush_r>
 80097ea:	b988      	cbnz	r0, 8009810 <__swbuf_r+0x90>
 80097ec:	4638      	mov	r0, r7
 80097ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f0:	4b0a      	ldr	r3, [pc, #40]	; (800981c <__swbuf_r+0x9c>)
 80097f2:	429c      	cmp	r4, r3
 80097f4:	d101      	bne.n	80097fa <__swbuf_r+0x7a>
 80097f6:	68ac      	ldr	r4, [r5, #8]
 80097f8:	e7cf      	b.n	800979a <__swbuf_r+0x1a>
 80097fa:	4b09      	ldr	r3, [pc, #36]	; (8009820 <__swbuf_r+0xa0>)
 80097fc:	429c      	cmp	r4, r3
 80097fe:	bf08      	it	eq
 8009800:	68ec      	ldreq	r4, [r5, #12]
 8009802:	e7ca      	b.n	800979a <__swbuf_r+0x1a>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f000 f80c 	bl	8009824 <__swsetup_r>
 800980c:	2800      	cmp	r0, #0
 800980e:	d0cb      	beq.n	80097a8 <__swbuf_r+0x28>
 8009810:	f04f 37ff 	mov.w	r7, #4294967295
 8009814:	e7ea      	b.n	80097ec <__swbuf_r+0x6c>
 8009816:	bf00      	nop
 8009818:	0800cd0c 	.word	0x0800cd0c
 800981c:	0800cd2c 	.word	0x0800cd2c
 8009820:	0800ccec 	.word	0x0800ccec

08009824 <__swsetup_r>:
 8009824:	4b32      	ldr	r3, [pc, #200]	; (80098f0 <__swsetup_r+0xcc>)
 8009826:	b570      	push	{r4, r5, r6, lr}
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	4606      	mov	r6, r0
 800982c:	460c      	mov	r4, r1
 800982e:	b125      	cbz	r5, 800983a <__swsetup_r+0x16>
 8009830:	69ab      	ldr	r3, [r5, #24]
 8009832:	b913      	cbnz	r3, 800983a <__swsetup_r+0x16>
 8009834:	4628      	mov	r0, r5
 8009836:	f001 f827 	bl	800a888 <__sinit>
 800983a:	4b2e      	ldr	r3, [pc, #184]	; (80098f4 <__swsetup_r+0xd0>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d10f      	bne.n	8009860 <__swsetup_r+0x3c>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009848:	0719      	lsls	r1, r3, #28
 800984a:	d42c      	bmi.n	80098a6 <__swsetup_r+0x82>
 800984c:	06dd      	lsls	r5, r3, #27
 800984e:	d411      	bmi.n	8009874 <__swsetup_r+0x50>
 8009850:	2309      	movs	r3, #9
 8009852:	6033      	str	r3, [r6, #0]
 8009854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009858:	81a3      	strh	r3, [r4, #12]
 800985a:	f04f 30ff 	mov.w	r0, #4294967295
 800985e:	e03e      	b.n	80098de <__swsetup_r+0xba>
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <__swsetup_r+0xd4>)
 8009862:	429c      	cmp	r4, r3
 8009864:	d101      	bne.n	800986a <__swsetup_r+0x46>
 8009866:	68ac      	ldr	r4, [r5, #8]
 8009868:	e7eb      	b.n	8009842 <__swsetup_r+0x1e>
 800986a:	4b24      	ldr	r3, [pc, #144]	; (80098fc <__swsetup_r+0xd8>)
 800986c:	429c      	cmp	r4, r3
 800986e:	bf08      	it	eq
 8009870:	68ec      	ldreq	r4, [r5, #12]
 8009872:	e7e6      	b.n	8009842 <__swsetup_r+0x1e>
 8009874:	0758      	lsls	r0, r3, #29
 8009876:	d512      	bpl.n	800989e <__swsetup_r+0x7a>
 8009878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800987a:	b141      	cbz	r1, 800988e <__swsetup_r+0x6a>
 800987c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009880:	4299      	cmp	r1, r3
 8009882:	d002      	beq.n	800988a <__swsetup_r+0x66>
 8009884:	4630      	mov	r0, r6
 8009886:	f002 f9d9 	bl	800bc3c <_free_r>
 800988a:	2300      	movs	r3, #0
 800988c:	6363      	str	r3, [r4, #52]	; 0x34
 800988e:	89a3      	ldrh	r3, [r4, #12]
 8009890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	2300      	movs	r3, #0
 8009898:	6063      	str	r3, [r4, #4]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	89a3      	ldrh	r3, [r4, #12]
 80098a0:	f043 0308 	orr.w	r3, r3, #8
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	b94b      	cbnz	r3, 80098be <__swsetup_r+0x9a>
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098b4:	d003      	beq.n	80098be <__swsetup_r+0x9a>
 80098b6:	4621      	mov	r1, r4
 80098b8:	4630      	mov	r0, r6
 80098ba:	f001 fc8d 	bl	800b1d8 <__smakebuf_r>
 80098be:	89a0      	ldrh	r0, [r4, #12]
 80098c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098c4:	f010 0301 	ands.w	r3, r0, #1
 80098c8:	d00a      	beq.n	80098e0 <__swsetup_r+0xbc>
 80098ca:	2300      	movs	r3, #0
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	6963      	ldr	r3, [r4, #20]
 80098d0:	425b      	negs	r3, r3
 80098d2:	61a3      	str	r3, [r4, #24]
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	b943      	cbnz	r3, 80098ea <__swsetup_r+0xc6>
 80098d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098dc:	d1ba      	bne.n	8009854 <__swsetup_r+0x30>
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	0781      	lsls	r1, r0, #30
 80098e2:	bf58      	it	pl
 80098e4:	6963      	ldrpl	r3, [r4, #20]
 80098e6:	60a3      	str	r3, [r4, #8]
 80098e8:	e7f4      	b.n	80098d4 <__swsetup_r+0xb0>
 80098ea:	2000      	movs	r0, #0
 80098ec:	e7f7      	b.n	80098de <__swsetup_r+0xba>
 80098ee:	bf00      	nop
 80098f0:	2000000c 	.word	0x2000000c
 80098f4:	0800cd0c 	.word	0x0800cd0c
 80098f8:	0800cd2c 	.word	0x0800cd2c
 80098fc:	0800ccec 	.word	0x0800ccec

08009900 <__assert_func>:
 8009900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009902:	4614      	mov	r4, r2
 8009904:	461a      	mov	r2, r3
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <__assert_func+0x2c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	68d8      	ldr	r0, [r3, #12]
 800990e:	b14c      	cbz	r4, 8009924 <__assert_func+0x24>
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <__assert_func+0x30>)
 8009912:	9100      	str	r1, [sp, #0]
 8009914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009918:	4906      	ldr	r1, [pc, #24]	; (8009934 <__assert_func+0x34>)
 800991a:	462b      	mov	r3, r5
 800991c:	f001 f832 	bl	800a984 <fiprintf>
 8009920:	f002 fc4a 	bl	800c1b8 <abort>
 8009924:	4b04      	ldr	r3, [pc, #16]	; (8009938 <__assert_func+0x38>)
 8009926:	461c      	mov	r4, r3
 8009928:	e7f3      	b.n	8009912 <__assert_func+0x12>
 800992a:	bf00      	nop
 800992c:	2000000c 	.word	0x2000000c
 8009930:	0800cb30 	.word	0x0800cb30
 8009934:	0800cb3d 	.word	0x0800cb3d
 8009938:	0800cb6b 	.word	0x0800cb6b

0800993c <quorem>:
 800993c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009940:	6903      	ldr	r3, [r0, #16]
 8009942:	690c      	ldr	r4, [r1, #16]
 8009944:	42a3      	cmp	r3, r4
 8009946:	4607      	mov	r7, r0
 8009948:	f2c0 8081 	blt.w	8009a4e <quorem+0x112>
 800994c:	3c01      	subs	r4, #1
 800994e:	f101 0814 	add.w	r8, r1, #20
 8009952:	f100 0514 	add.w	r5, r0, #20
 8009956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800995a:	9301      	str	r3, [sp, #4]
 800995c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009960:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009964:	3301      	adds	r3, #1
 8009966:	429a      	cmp	r2, r3
 8009968:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800996c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009970:	fbb2 f6f3 	udiv	r6, r2, r3
 8009974:	d331      	bcc.n	80099da <quorem+0x9e>
 8009976:	f04f 0e00 	mov.w	lr, #0
 800997a:	4640      	mov	r0, r8
 800997c:	46ac      	mov	ip, r5
 800997e:	46f2      	mov	sl, lr
 8009980:	f850 2b04 	ldr.w	r2, [r0], #4
 8009984:	b293      	uxth	r3, r2
 8009986:	fb06 e303 	mla	r3, r6, r3, lr
 800998a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800998e:	b29b      	uxth	r3, r3
 8009990:	ebaa 0303 	sub.w	r3, sl, r3
 8009994:	0c12      	lsrs	r2, r2, #16
 8009996:	f8dc a000 	ldr.w	sl, [ip]
 800999a:	fb06 e202 	mla	r2, r6, r2, lr
 800999e:	fa13 f38a 	uxtah	r3, r3, sl
 80099a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099a6:	fa1f fa82 	uxth.w	sl, r2
 80099aa:	f8dc 2000 	ldr.w	r2, [ip]
 80099ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80099b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099bc:	4581      	cmp	r9, r0
 80099be:	f84c 3b04 	str.w	r3, [ip], #4
 80099c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099c6:	d2db      	bcs.n	8009980 <quorem+0x44>
 80099c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80099cc:	b92b      	cbnz	r3, 80099da <quorem+0x9e>
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	3b04      	subs	r3, #4
 80099d2:	429d      	cmp	r5, r3
 80099d4:	461a      	mov	r2, r3
 80099d6:	d32e      	bcc.n	8009a36 <quorem+0xfa>
 80099d8:	613c      	str	r4, [r7, #16]
 80099da:	4638      	mov	r0, r7
 80099dc:	f001 ff2c 	bl	800b838 <__mcmp>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	db24      	blt.n	8009a2e <quorem+0xf2>
 80099e4:	3601      	adds	r6, #1
 80099e6:	4628      	mov	r0, r5
 80099e8:	f04f 0c00 	mov.w	ip, #0
 80099ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80099f0:	f8d0 e000 	ldr.w	lr, [r0]
 80099f4:	b293      	uxth	r3, r2
 80099f6:	ebac 0303 	sub.w	r3, ip, r3
 80099fa:	0c12      	lsrs	r2, r2, #16
 80099fc:	fa13 f38e 	uxtah	r3, r3, lr
 8009a00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a0e:	45c1      	cmp	r9, r8
 8009a10:	f840 3b04 	str.w	r3, [r0], #4
 8009a14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a18:	d2e8      	bcs.n	80099ec <quorem+0xb0>
 8009a1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a22:	b922      	cbnz	r2, 8009a2e <quorem+0xf2>
 8009a24:	3b04      	subs	r3, #4
 8009a26:	429d      	cmp	r5, r3
 8009a28:	461a      	mov	r2, r3
 8009a2a:	d30a      	bcc.n	8009a42 <quorem+0x106>
 8009a2c:	613c      	str	r4, [r7, #16]
 8009a2e:	4630      	mov	r0, r6
 8009a30:	b003      	add	sp, #12
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	6812      	ldr	r2, [r2, #0]
 8009a38:	3b04      	subs	r3, #4
 8009a3a:	2a00      	cmp	r2, #0
 8009a3c:	d1cc      	bne.n	80099d8 <quorem+0x9c>
 8009a3e:	3c01      	subs	r4, #1
 8009a40:	e7c7      	b.n	80099d2 <quorem+0x96>
 8009a42:	6812      	ldr	r2, [r2, #0]
 8009a44:	3b04      	subs	r3, #4
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d1f0      	bne.n	8009a2c <quorem+0xf0>
 8009a4a:	3c01      	subs	r4, #1
 8009a4c:	e7eb      	b.n	8009a26 <quorem+0xea>
 8009a4e:	2000      	movs	r0, #0
 8009a50:	e7ee      	b.n	8009a30 <quorem+0xf4>
 8009a52:	0000      	movs	r0, r0
 8009a54:	0000      	movs	r0, r0
	...

08009a58 <_dtoa_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	ed2d 8b02 	vpush	{d8}
 8009a60:	ec57 6b10 	vmov	r6, r7, d0
 8009a64:	b095      	sub	sp, #84	; 0x54
 8009a66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a6c:	9105      	str	r1, [sp, #20]
 8009a6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009a72:	4604      	mov	r4, r0
 8009a74:	9209      	str	r2, [sp, #36]	; 0x24
 8009a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a78:	b975      	cbnz	r5, 8009a98 <_dtoa_r+0x40>
 8009a7a:	2010      	movs	r0, #16
 8009a7c:	f001 fbec 	bl	800b258 <malloc>
 8009a80:	4602      	mov	r2, r0
 8009a82:	6260      	str	r0, [r4, #36]	; 0x24
 8009a84:	b920      	cbnz	r0, 8009a90 <_dtoa_r+0x38>
 8009a86:	4bb2      	ldr	r3, [pc, #712]	; (8009d50 <_dtoa_r+0x2f8>)
 8009a88:	21ea      	movs	r1, #234	; 0xea
 8009a8a:	48b2      	ldr	r0, [pc, #712]	; (8009d54 <_dtoa_r+0x2fc>)
 8009a8c:	f7ff ff38 	bl	8009900 <__assert_func>
 8009a90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a94:	6005      	str	r5, [r0, #0]
 8009a96:	60c5      	str	r5, [r0, #12]
 8009a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a9a:	6819      	ldr	r1, [r3, #0]
 8009a9c:	b151      	cbz	r1, 8009ab4 <_dtoa_r+0x5c>
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	604a      	str	r2, [r1, #4]
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	4093      	lsls	r3, r2
 8009aa6:	608b      	str	r3, [r1, #8]
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 fc3d 	bl	800b328 <_Bfree>
 8009aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	1e3b      	subs	r3, r7, #0
 8009ab6:	bfb9      	ittee	lt
 8009ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009abc:	9303      	strlt	r3, [sp, #12]
 8009abe:	2300      	movge	r3, #0
 8009ac0:	f8c8 3000 	strge.w	r3, [r8]
 8009ac4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ac8:	4ba3      	ldr	r3, [pc, #652]	; (8009d58 <_dtoa_r+0x300>)
 8009aca:	bfbc      	itt	lt
 8009acc:	2201      	movlt	r2, #1
 8009ace:	f8c8 2000 	strlt.w	r2, [r8]
 8009ad2:	ea33 0309 	bics.w	r3, r3, r9
 8009ad6:	d11b      	bne.n	8009b10 <_dtoa_r+0xb8>
 8009ad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ada:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ae4:	4333      	orrs	r3, r6
 8009ae6:	f000 857a 	beq.w	800a5de <_dtoa_r+0xb86>
 8009aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aec:	b963      	cbnz	r3, 8009b08 <_dtoa_r+0xb0>
 8009aee:	4b9b      	ldr	r3, [pc, #620]	; (8009d5c <_dtoa_r+0x304>)
 8009af0:	e024      	b.n	8009b3c <_dtoa_r+0xe4>
 8009af2:	4b9b      	ldr	r3, [pc, #620]	; (8009d60 <_dtoa_r+0x308>)
 8009af4:	9300      	str	r3, [sp, #0]
 8009af6:	3308      	adds	r3, #8
 8009af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	9800      	ldr	r0, [sp, #0]
 8009afe:	b015      	add	sp, #84	; 0x54
 8009b00:	ecbd 8b02 	vpop	{d8}
 8009b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b08:	4b94      	ldr	r3, [pc, #592]	; (8009d5c <_dtoa_r+0x304>)
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	3303      	adds	r3, #3
 8009b0e:	e7f3      	b.n	8009af8 <_dtoa_r+0xa0>
 8009b10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	ec51 0b17 	vmov	r0, r1, d7
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009b20:	f7f7 f802 	bl	8000b28 <__aeabi_dcmpeq>
 8009b24:	4680      	mov	r8, r0
 8009b26:	b158      	cbz	r0, 8009b40 <_dtoa_r+0xe8>
 8009b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 8551 	beq.w	800a5d8 <_dtoa_r+0xb80>
 8009b36:	488b      	ldr	r0, [pc, #556]	; (8009d64 <_dtoa_r+0x30c>)
 8009b38:	6018      	str	r0, [r3, #0]
 8009b3a:	1e43      	subs	r3, r0, #1
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	e7dd      	b.n	8009afc <_dtoa_r+0xa4>
 8009b40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009b44:	aa12      	add	r2, sp, #72	; 0x48
 8009b46:	a913      	add	r1, sp, #76	; 0x4c
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f001 ff95 	bl	800ba78 <__d2b>
 8009b4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009b52:	4683      	mov	fp, r0
 8009b54:	2d00      	cmp	r5, #0
 8009b56:	d07c      	beq.n	8009c52 <_dtoa_r+0x1fa>
 8009b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009b5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009b66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b72:	4b7d      	ldr	r3, [pc, #500]	; (8009d68 <_dtoa_r+0x310>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	4630      	mov	r0, r6
 8009b78:	4639      	mov	r1, r7
 8009b7a:	f7f6 fbb5 	bl	80002e8 <__aeabi_dsub>
 8009b7e:	a36e      	add	r3, pc, #440	; (adr r3, 8009d38 <_dtoa_r+0x2e0>)
 8009b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b84:	f7f6 fd68 	bl	8000658 <__aeabi_dmul>
 8009b88:	a36d      	add	r3, pc, #436	; (adr r3, 8009d40 <_dtoa_r+0x2e8>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fbad 	bl	80002ec <__adddf3>
 8009b92:	4606      	mov	r6, r0
 8009b94:	4628      	mov	r0, r5
 8009b96:	460f      	mov	r7, r1
 8009b98:	f7f6 fcf4 	bl	8000584 <__aeabi_i2d>
 8009b9c:	a36a      	add	r3, pc, #424	; (adr r3, 8009d48 <_dtoa_r+0x2f0>)
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f7f6 fd59 	bl	8000658 <__aeabi_dmul>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4630      	mov	r0, r6
 8009bac:	4639      	mov	r1, r7
 8009bae:	f7f6 fb9d 	bl	80002ec <__adddf3>
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	460f      	mov	r7, r1
 8009bb6:	f7f6 ffff 	bl	8000bb8 <__aeabi_d2iz>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	4682      	mov	sl, r0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f7f6 ffba 	bl	8000b3c <__aeabi_dcmplt>
 8009bc8:	b148      	cbz	r0, 8009bde <_dtoa_r+0x186>
 8009bca:	4650      	mov	r0, sl
 8009bcc:	f7f6 fcda 	bl	8000584 <__aeabi_i2d>
 8009bd0:	4632      	mov	r2, r6
 8009bd2:	463b      	mov	r3, r7
 8009bd4:	f7f6 ffa8 	bl	8000b28 <__aeabi_dcmpeq>
 8009bd8:	b908      	cbnz	r0, 8009bde <_dtoa_r+0x186>
 8009bda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bde:	f1ba 0f16 	cmp.w	sl, #22
 8009be2:	d854      	bhi.n	8009c8e <_dtoa_r+0x236>
 8009be4:	4b61      	ldr	r3, [pc, #388]	; (8009d6c <_dtoa_r+0x314>)
 8009be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bf2:	f7f6 ffa3 	bl	8000b3c <__aeabi_dcmplt>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	d04b      	beq.n	8009c92 <_dtoa_r+0x23a>
 8009bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bfe:	2300      	movs	r3, #0
 8009c00:	930e      	str	r3, [sp, #56]	; 0x38
 8009c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c04:	1b5d      	subs	r5, r3, r5
 8009c06:	1e6b      	subs	r3, r5, #1
 8009c08:	9304      	str	r3, [sp, #16]
 8009c0a:	bf43      	ittte	mi
 8009c0c:	2300      	movmi	r3, #0
 8009c0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009c12:	9304      	strmi	r3, [sp, #16]
 8009c14:	f04f 0800 	movpl.w	r8, #0
 8009c18:	f1ba 0f00 	cmp.w	sl, #0
 8009c1c:	db3b      	blt.n	8009c96 <_dtoa_r+0x23e>
 8009c1e:	9b04      	ldr	r3, [sp, #16]
 8009c20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009c24:	4453      	add	r3, sl
 8009c26:	9304      	str	r3, [sp, #16]
 8009c28:	2300      	movs	r3, #0
 8009c2a:	9306      	str	r3, [sp, #24]
 8009c2c:	9b05      	ldr	r3, [sp, #20]
 8009c2e:	2b09      	cmp	r3, #9
 8009c30:	d869      	bhi.n	8009d06 <_dtoa_r+0x2ae>
 8009c32:	2b05      	cmp	r3, #5
 8009c34:	bfc4      	itt	gt
 8009c36:	3b04      	subgt	r3, #4
 8009c38:	9305      	strgt	r3, [sp, #20]
 8009c3a:	9b05      	ldr	r3, [sp, #20]
 8009c3c:	f1a3 0302 	sub.w	r3, r3, #2
 8009c40:	bfcc      	ite	gt
 8009c42:	2500      	movgt	r5, #0
 8009c44:	2501      	movle	r5, #1
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d869      	bhi.n	8009d1e <_dtoa_r+0x2c6>
 8009c4a:	e8df f003 	tbb	[pc, r3]
 8009c4e:	4e2c      	.short	0x4e2c
 8009c50:	5a4c      	.short	0x5a4c
 8009c52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009c56:	441d      	add	r5, r3
 8009c58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c5c:	2b20      	cmp	r3, #32
 8009c5e:	bfc1      	itttt	gt
 8009c60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c68:	fa09 f303 	lslgt.w	r3, r9, r3
 8009c6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c70:	bfda      	itte	le
 8009c72:	f1c3 0320 	rsble	r3, r3, #32
 8009c76:	fa06 f003 	lslle.w	r0, r6, r3
 8009c7a:	4318      	orrgt	r0, r3
 8009c7c:	f7f6 fc72 	bl	8000564 <__aeabi_ui2d>
 8009c80:	2301      	movs	r3, #1
 8009c82:	4606      	mov	r6, r0
 8009c84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c88:	3d01      	subs	r5, #1
 8009c8a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c8c:	e771      	b.n	8009b72 <_dtoa_r+0x11a>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e7b6      	b.n	8009c00 <_dtoa_r+0x1a8>
 8009c92:	900e      	str	r0, [sp, #56]	; 0x38
 8009c94:	e7b5      	b.n	8009c02 <_dtoa_r+0x1aa>
 8009c96:	f1ca 0300 	rsb	r3, sl, #0
 8009c9a:	9306      	str	r3, [sp, #24]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	eba8 080a 	sub.w	r8, r8, sl
 8009ca2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ca4:	e7c2      	b.n	8009c2c <_dtoa_r+0x1d4>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	9308      	str	r3, [sp, #32]
 8009caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dc39      	bgt.n	8009d24 <_dtoa_r+0x2cc>
 8009cb0:	f04f 0901 	mov.w	r9, #1
 8009cb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009cb8:	464b      	mov	r3, r9
 8009cba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009cbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6042      	str	r2, [r0, #4]
 8009cc4:	2204      	movs	r2, #4
 8009cc6:	f102 0614 	add.w	r6, r2, #20
 8009cca:	429e      	cmp	r6, r3
 8009ccc:	6841      	ldr	r1, [r0, #4]
 8009cce:	d92f      	bls.n	8009d30 <_dtoa_r+0x2d8>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f001 fae9 	bl	800b2a8 <_Balloc>
 8009cd6:	9000      	str	r0, [sp, #0]
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d14b      	bne.n	8009d74 <_dtoa_r+0x31c>
 8009cdc:	4b24      	ldr	r3, [pc, #144]	; (8009d70 <_dtoa_r+0x318>)
 8009cde:	4602      	mov	r2, r0
 8009ce0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ce4:	e6d1      	b.n	8009a8a <_dtoa_r+0x32>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e7de      	b.n	8009ca8 <_dtoa_r+0x250>
 8009cea:	2300      	movs	r3, #0
 8009cec:	9308      	str	r3, [sp, #32]
 8009cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cf0:	eb0a 0903 	add.w	r9, sl, r3
 8009cf4:	f109 0301 	add.w	r3, r9, #1
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	bfb8      	it	lt
 8009cfe:	2301      	movlt	r3, #1
 8009d00:	e7dd      	b.n	8009cbe <_dtoa_r+0x266>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e7f2      	b.n	8009cec <_dtoa_r+0x294>
 8009d06:	2501      	movs	r5, #1
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9305      	str	r3, [sp, #20]
 8009d0c:	9508      	str	r5, [sp, #32]
 8009d0e:	f04f 39ff 	mov.w	r9, #4294967295
 8009d12:	2200      	movs	r2, #0
 8009d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d18:	2312      	movs	r3, #18
 8009d1a:	9209      	str	r2, [sp, #36]	; 0x24
 8009d1c:	e7cf      	b.n	8009cbe <_dtoa_r+0x266>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	9308      	str	r3, [sp, #32]
 8009d22:	e7f4      	b.n	8009d0e <_dtoa_r+0x2b6>
 8009d24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009d28:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	e7c6      	b.n	8009cbe <_dtoa_r+0x266>
 8009d30:	3101      	adds	r1, #1
 8009d32:	6041      	str	r1, [r0, #4]
 8009d34:	0052      	lsls	r2, r2, #1
 8009d36:	e7c6      	b.n	8009cc6 <_dtoa_r+0x26e>
 8009d38:	636f4361 	.word	0x636f4361
 8009d3c:	3fd287a7 	.word	0x3fd287a7
 8009d40:	8b60c8b3 	.word	0x8b60c8b3
 8009d44:	3fc68a28 	.word	0x3fc68a28
 8009d48:	509f79fb 	.word	0x509f79fb
 8009d4c:	3fd34413 	.word	0x3fd34413
 8009d50:	0800cab8 	.word	0x0800cab8
 8009d54:	0800cc7a 	.word	0x0800cc7a
 8009d58:	7ff00000 	.word	0x7ff00000
 8009d5c:	0800cc76 	.word	0x0800cc76
 8009d60:	0800cc6d 	.word	0x0800cc6d
 8009d64:	0800ca41 	.word	0x0800ca41
 8009d68:	3ff80000 	.word	0x3ff80000
 8009d6c:	0800ce58 	.word	0x0800ce58
 8009d70:	0800ccd9 	.word	0x0800ccd9
 8009d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d76:	9a00      	ldr	r2, [sp, #0]
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	2b0e      	cmp	r3, #14
 8009d7e:	f200 80ad 	bhi.w	8009edc <_dtoa_r+0x484>
 8009d82:	2d00      	cmp	r5, #0
 8009d84:	f000 80aa 	beq.w	8009edc <_dtoa_r+0x484>
 8009d88:	f1ba 0f00 	cmp.w	sl, #0
 8009d8c:	dd36      	ble.n	8009dfc <_dtoa_r+0x3a4>
 8009d8e:	4ac3      	ldr	r2, [pc, #780]	; (800a09c <_dtoa_r+0x644>)
 8009d90:	f00a 030f 	and.w	r3, sl, #15
 8009d94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d98:	ed93 7b00 	vldr	d7, [r3]
 8009d9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009da0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009da4:	eeb0 8a47 	vmov.f32	s16, s14
 8009da8:	eef0 8a67 	vmov.f32	s17, s15
 8009dac:	d016      	beq.n	8009ddc <_dtoa_r+0x384>
 8009dae:	4bbc      	ldr	r3, [pc, #752]	; (800a0a0 <_dtoa_r+0x648>)
 8009db0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009db4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009db8:	f7f6 fd78 	bl	80008ac <__aeabi_ddiv>
 8009dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc0:	f007 070f 	and.w	r7, r7, #15
 8009dc4:	2503      	movs	r5, #3
 8009dc6:	4eb6      	ldr	r6, [pc, #728]	; (800a0a0 <_dtoa_r+0x648>)
 8009dc8:	b957      	cbnz	r7, 8009de0 <_dtoa_r+0x388>
 8009dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dce:	ec53 2b18 	vmov	r2, r3, d8
 8009dd2:	f7f6 fd6b 	bl	80008ac <__aeabi_ddiv>
 8009dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dda:	e029      	b.n	8009e30 <_dtoa_r+0x3d8>
 8009ddc:	2502      	movs	r5, #2
 8009dde:	e7f2      	b.n	8009dc6 <_dtoa_r+0x36e>
 8009de0:	07f9      	lsls	r1, r7, #31
 8009de2:	d508      	bpl.n	8009df6 <_dtoa_r+0x39e>
 8009de4:	ec51 0b18 	vmov	r0, r1, d8
 8009de8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009dec:	f7f6 fc34 	bl	8000658 <__aeabi_dmul>
 8009df0:	ec41 0b18 	vmov	d8, r0, r1
 8009df4:	3501      	adds	r5, #1
 8009df6:	107f      	asrs	r7, r7, #1
 8009df8:	3608      	adds	r6, #8
 8009dfa:	e7e5      	b.n	8009dc8 <_dtoa_r+0x370>
 8009dfc:	f000 80a6 	beq.w	8009f4c <_dtoa_r+0x4f4>
 8009e00:	f1ca 0600 	rsb	r6, sl, #0
 8009e04:	4ba5      	ldr	r3, [pc, #660]	; (800a09c <_dtoa_r+0x644>)
 8009e06:	4fa6      	ldr	r7, [pc, #664]	; (800a0a0 <_dtoa_r+0x648>)
 8009e08:	f006 020f 	and.w	r2, r6, #15
 8009e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e18:	f7f6 fc1e 	bl	8000658 <__aeabi_dmul>
 8009e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e20:	1136      	asrs	r6, r6, #4
 8009e22:	2300      	movs	r3, #0
 8009e24:	2502      	movs	r5, #2
 8009e26:	2e00      	cmp	r6, #0
 8009e28:	f040 8085 	bne.w	8009f36 <_dtoa_r+0x4de>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1d2      	bne.n	8009dd6 <_dtoa_r+0x37e>
 8009e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 808c 	beq.w	8009f50 <_dtoa_r+0x4f8>
 8009e38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e3c:	4b99      	ldr	r3, [pc, #612]	; (800a0a4 <_dtoa_r+0x64c>)
 8009e3e:	2200      	movs	r2, #0
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fe7a 	bl	8000b3c <__aeabi_dcmplt>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f000 8081 	beq.w	8009f50 <_dtoa_r+0x4f8>
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d07d      	beq.n	8009f50 <_dtoa_r+0x4f8>
 8009e54:	f1b9 0f00 	cmp.w	r9, #0
 8009e58:	dd3c      	ble.n	8009ed4 <_dtoa_r+0x47c>
 8009e5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e5e:	9307      	str	r3, [sp, #28]
 8009e60:	2200      	movs	r2, #0
 8009e62:	4b91      	ldr	r3, [pc, #580]	; (800a0a8 <_dtoa_r+0x650>)
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fbf6 	bl	8000658 <__aeabi_dmul>
 8009e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e70:	3501      	adds	r5, #1
 8009e72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009e76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	f7f6 fb82 	bl	8000584 <__aeabi_i2d>
 8009e80:	4632      	mov	r2, r6
 8009e82:	463b      	mov	r3, r7
 8009e84:	f7f6 fbe8 	bl	8000658 <__aeabi_dmul>
 8009e88:	4b88      	ldr	r3, [pc, #544]	; (800a0ac <_dtoa_r+0x654>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f7f6 fa2e 	bl	80002ec <__adddf3>
 8009e90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d15c      	bne.n	8009f5a <_dtoa_r+0x502>
 8009ea0:	4b83      	ldr	r3, [pc, #524]	; (800a0b0 <_dtoa_r+0x658>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	4639      	mov	r1, r7
 8009ea8:	f7f6 fa1e 	bl	80002e8 <__aeabi_dsub>
 8009eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	460f      	mov	r7, r1
 8009eb4:	f7f6 fe60 	bl	8000b78 <__aeabi_dcmpgt>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	f040 8296 	bne.w	800a3ea <_dtoa_r+0x992>
 8009ebe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7f6 fe37 	bl	8000b3c <__aeabi_dcmplt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f040 8288 	bne.w	800a3e4 <_dtoa_r+0x98c>
 8009ed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ed8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	f2c0 8158 	blt.w	800a194 <_dtoa_r+0x73c>
 8009ee4:	f1ba 0f0e 	cmp.w	sl, #14
 8009ee8:	f300 8154 	bgt.w	800a194 <_dtoa_r+0x73c>
 8009eec:	4b6b      	ldr	r3, [pc, #428]	; (800a09c <_dtoa_r+0x644>)
 8009eee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ef2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f280 80e3 	bge.w	800a0c4 <_dtoa_r+0x66c>
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f300 80df 	bgt.w	800a0c4 <_dtoa_r+0x66c>
 8009f06:	f040 826d 	bne.w	800a3e4 <_dtoa_r+0x98c>
 8009f0a:	4b69      	ldr	r3, [pc, #420]	; (800a0b0 <_dtoa_r+0x658>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4640      	mov	r0, r8
 8009f10:	4649      	mov	r1, r9
 8009f12:	f7f6 fba1 	bl	8000658 <__aeabi_dmul>
 8009f16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f1a:	f7f6 fe23 	bl	8000b64 <__aeabi_dcmpge>
 8009f1e:	9e01      	ldr	r6, [sp, #4]
 8009f20:	4637      	mov	r7, r6
 8009f22:	2800      	cmp	r0, #0
 8009f24:	f040 8243 	bne.w	800a3ae <_dtoa_r+0x956>
 8009f28:	9d00      	ldr	r5, [sp, #0]
 8009f2a:	2331      	movs	r3, #49	; 0x31
 8009f2c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f30:	f10a 0a01 	add.w	sl, sl, #1
 8009f34:	e23f      	b.n	800a3b6 <_dtoa_r+0x95e>
 8009f36:	07f2      	lsls	r2, r6, #31
 8009f38:	d505      	bpl.n	8009f46 <_dtoa_r+0x4ee>
 8009f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f3e:	f7f6 fb8b 	bl	8000658 <__aeabi_dmul>
 8009f42:	3501      	adds	r5, #1
 8009f44:	2301      	movs	r3, #1
 8009f46:	1076      	asrs	r6, r6, #1
 8009f48:	3708      	adds	r7, #8
 8009f4a:	e76c      	b.n	8009e26 <_dtoa_r+0x3ce>
 8009f4c:	2502      	movs	r5, #2
 8009f4e:	e76f      	b.n	8009e30 <_dtoa_r+0x3d8>
 8009f50:	9b01      	ldr	r3, [sp, #4]
 8009f52:	f8cd a01c 	str.w	sl, [sp, #28]
 8009f56:	930c      	str	r3, [sp, #48]	; 0x30
 8009f58:	e78d      	b.n	8009e76 <_dtoa_r+0x41e>
 8009f5a:	9900      	ldr	r1, [sp, #0]
 8009f5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009f5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f60:	4b4e      	ldr	r3, [pc, #312]	; (800a09c <_dtoa_r+0x644>)
 8009f62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f66:	4401      	add	r1, r0
 8009f68:	9102      	str	r1, [sp, #8]
 8009f6a:	9908      	ldr	r1, [sp, #32]
 8009f6c:	eeb0 8a47 	vmov.f32	s16, s14
 8009f70:	eef0 8a67 	vmov.f32	s17, s15
 8009f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	d045      	beq.n	800a00c <_dtoa_r+0x5b4>
 8009f80:	494c      	ldr	r1, [pc, #304]	; (800a0b4 <_dtoa_r+0x65c>)
 8009f82:	2000      	movs	r0, #0
 8009f84:	f7f6 fc92 	bl	80008ac <__aeabi_ddiv>
 8009f88:	ec53 2b18 	vmov	r2, r3, d8
 8009f8c:	f7f6 f9ac 	bl	80002e8 <__aeabi_dsub>
 8009f90:	9d00      	ldr	r5, [sp, #0]
 8009f92:	ec41 0b18 	vmov	d8, r0, r1
 8009f96:	4639      	mov	r1, r7
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7f6 fe0d 	bl	8000bb8 <__aeabi_d2iz>
 8009f9e:	900c      	str	r0, [sp, #48]	; 0x30
 8009fa0:	f7f6 faf0 	bl	8000584 <__aeabi_i2d>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4630      	mov	r0, r6
 8009faa:	4639      	mov	r1, r7
 8009fac:	f7f6 f99c 	bl	80002e8 <__aeabi_dsub>
 8009fb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb2:	3330      	adds	r3, #48	; 0x30
 8009fb4:	f805 3b01 	strb.w	r3, [r5], #1
 8009fb8:	ec53 2b18 	vmov	r2, r3, d8
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	460f      	mov	r7, r1
 8009fc0:	f7f6 fdbc 	bl	8000b3c <__aeabi_dcmplt>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d165      	bne.n	800a094 <_dtoa_r+0x63c>
 8009fc8:	4632      	mov	r2, r6
 8009fca:	463b      	mov	r3, r7
 8009fcc:	4935      	ldr	r1, [pc, #212]	; (800a0a4 <_dtoa_r+0x64c>)
 8009fce:	2000      	movs	r0, #0
 8009fd0:	f7f6 f98a 	bl	80002e8 <__aeabi_dsub>
 8009fd4:	ec53 2b18 	vmov	r2, r3, d8
 8009fd8:	f7f6 fdb0 	bl	8000b3c <__aeabi_dcmplt>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	f040 80b9 	bne.w	800a154 <_dtoa_r+0x6fc>
 8009fe2:	9b02      	ldr	r3, [sp, #8]
 8009fe4:	429d      	cmp	r5, r3
 8009fe6:	f43f af75 	beq.w	8009ed4 <_dtoa_r+0x47c>
 8009fea:	4b2f      	ldr	r3, [pc, #188]	; (800a0a8 <_dtoa_r+0x650>)
 8009fec:	ec51 0b18 	vmov	r0, r1, d8
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7f6 fb31 	bl	8000658 <__aeabi_dmul>
 8009ff6:	4b2c      	ldr	r3, [pc, #176]	; (800a0a8 <_dtoa_r+0x650>)
 8009ff8:	ec41 0b18 	vmov	d8, r0, r1
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	4630      	mov	r0, r6
 800a000:	4639      	mov	r1, r7
 800a002:	f7f6 fb29 	bl	8000658 <__aeabi_dmul>
 800a006:	4606      	mov	r6, r0
 800a008:	460f      	mov	r7, r1
 800a00a:	e7c4      	b.n	8009f96 <_dtoa_r+0x53e>
 800a00c:	ec51 0b17 	vmov	r0, r1, d7
 800a010:	f7f6 fb22 	bl	8000658 <__aeabi_dmul>
 800a014:	9b02      	ldr	r3, [sp, #8]
 800a016:	9d00      	ldr	r5, [sp, #0]
 800a018:	930c      	str	r3, [sp, #48]	; 0x30
 800a01a:	ec41 0b18 	vmov	d8, r0, r1
 800a01e:	4639      	mov	r1, r7
 800a020:	4630      	mov	r0, r6
 800a022:	f7f6 fdc9 	bl	8000bb8 <__aeabi_d2iz>
 800a026:	9011      	str	r0, [sp, #68]	; 0x44
 800a028:	f7f6 faac 	bl	8000584 <__aeabi_i2d>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 f958 	bl	80002e8 <__aeabi_dsub>
 800a038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a03a:	3330      	adds	r3, #48	; 0x30
 800a03c:	f805 3b01 	strb.w	r3, [r5], #1
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	429d      	cmp	r5, r3
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	d134      	bne.n	800a0b8 <_dtoa_r+0x660>
 800a04e:	4b19      	ldr	r3, [pc, #100]	; (800a0b4 <_dtoa_r+0x65c>)
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 f94a 	bl	80002ec <__adddf3>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 fd8a 	bl	8000b78 <__aeabi_dcmpgt>
 800a064:	2800      	cmp	r0, #0
 800a066:	d175      	bne.n	800a154 <_dtoa_r+0x6fc>
 800a068:	ec53 2b18 	vmov	r2, r3, d8
 800a06c:	4911      	ldr	r1, [pc, #68]	; (800a0b4 <_dtoa_r+0x65c>)
 800a06e:	2000      	movs	r0, #0
 800a070:	f7f6 f93a 	bl	80002e8 <__aeabi_dsub>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 fd5e 	bl	8000b3c <__aeabi_dcmplt>
 800a080:	2800      	cmp	r0, #0
 800a082:	f43f af27 	beq.w	8009ed4 <_dtoa_r+0x47c>
 800a086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a088:	1e6b      	subs	r3, r5, #1
 800a08a:	930c      	str	r3, [sp, #48]	; 0x30
 800a08c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a090:	2b30      	cmp	r3, #48	; 0x30
 800a092:	d0f8      	beq.n	800a086 <_dtoa_r+0x62e>
 800a094:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a098:	e04a      	b.n	800a130 <_dtoa_r+0x6d8>
 800a09a:	bf00      	nop
 800a09c:	0800ce58 	.word	0x0800ce58
 800a0a0:	0800ce30 	.word	0x0800ce30
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	40240000 	.word	0x40240000
 800a0ac:	401c0000 	.word	0x401c0000
 800a0b0:	40140000 	.word	0x40140000
 800a0b4:	3fe00000 	.word	0x3fe00000
 800a0b8:	4baf      	ldr	r3, [pc, #700]	; (800a378 <_dtoa_r+0x920>)
 800a0ba:	f7f6 facd 	bl	8000658 <__aeabi_dmul>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	460f      	mov	r7, r1
 800a0c2:	e7ac      	b.n	800a01e <_dtoa_r+0x5c6>
 800a0c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0c8:	9d00      	ldr	r5, [sp, #0]
 800a0ca:	4642      	mov	r2, r8
 800a0cc:	464b      	mov	r3, r9
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	f7f6 fbeb 	bl	80008ac <__aeabi_ddiv>
 800a0d6:	f7f6 fd6f 	bl	8000bb8 <__aeabi_d2iz>
 800a0da:	9002      	str	r0, [sp, #8]
 800a0dc:	f7f6 fa52 	bl	8000584 <__aeabi_i2d>
 800a0e0:	4642      	mov	r2, r8
 800a0e2:	464b      	mov	r3, r9
 800a0e4:	f7f6 fab8 	bl	8000658 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	f7f6 f8fa 	bl	80002e8 <__aeabi_dsub>
 800a0f4:	9e02      	ldr	r6, [sp, #8]
 800a0f6:	9f01      	ldr	r7, [sp, #4]
 800a0f8:	3630      	adds	r6, #48	; 0x30
 800a0fa:	f805 6b01 	strb.w	r6, [r5], #1
 800a0fe:	9e00      	ldr	r6, [sp, #0]
 800a100:	1bae      	subs	r6, r5, r6
 800a102:	42b7      	cmp	r7, r6
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	d137      	bne.n	800a17a <_dtoa_r+0x722>
 800a10a:	f7f6 f8ef 	bl	80002ec <__adddf3>
 800a10e:	4642      	mov	r2, r8
 800a110:	464b      	mov	r3, r9
 800a112:	4606      	mov	r6, r0
 800a114:	460f      	mov	r7, r1
 800a116:	f7f6 fd2f 	bl	8000b78 <__aeabi_dcmpgt>
 800a11a:	b9c8      	cbnz	r0, 800a150 <_dtoa_r+0x6f8>
 800a11c:	4642      	mov	r2, r8
 800a11e:	464b      	mov	r3, r9
 800a120:	4630      	mov	r0, r6
 800a122:	4639      	mov	r1, r7
 800a124:	f7f6 fd00 	bl	8000b28 <__aeabi_dcmpeq>
 800a128:	b110      	cbz	r0, 800a130 <_dtoa_r+0x6d8>
 800a12a:	9b02      	ldr	r3, [sp, #8]
 800a12c:	07d9      	lsls	r1, r3, #31
 800a12e:	d40f      	bmi.n	800a150 <_dtoa_r+0x6f8>
 800a130:	4620      	mov	r0, r4
 800a132:	4659      	mov	r1, fp
 800a134:	f001 f8f8 	bl	800b328 <_Bfree>
 800a138:	2300      	movs	r3, #0
 800a13a:	702b      	strb	r3, [r5, #0]
 800a13c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a13e:	f10a 0001 	add.w	r0, sl, #1
 800a142:	6018      	str	r0, [r3, #0]
 800a144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a146:	2b00      	cmp	r3, #0
 800a148:	f43f acd8 	beq.w	8009afc <_dtoa_r+0xa4>
 800a14c:	601d      	str	r5, [r3, #0]
 800a14e:	e4d5      	b.n	8009afc <_dtoa_r+0xa4>
 800a150:	f8cd a01c 	str.w	sl, [sp, #28]
 800a154:	462b      	mov	r3, r5
 800a156:	461d      	mov	r5, r3
 800a158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a15c:	2a39      	cmp	r2, #57	; 0x39
 800a15e:	d108      	bne.n	800a172 <_dtoa_r+0x71a>
 800a160:	9a00      	ldr	r2, [sp, #0]
 800a162:	429a      	cmp	r2, r3
 800a164:	d1f7      	bne.n	800a156 <_dtoa_r+0x6fe>
 800a166:	9a07      	ldr	r2, [sp, #28]
 800a168:	9900      	ldr	r1, [sp, #0]
 800a16a:	3201      	adds	r2, #1
 800a16c:	9207      	str	r2, [sp, #28]
 800a16e:	2230      	movs	r2, #48	; 0x30
 800a170:	700a      	strb	r2, [r1, #0]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	3201      	adds	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	e78c      	b.n	800a094 <_dtoa_r+0x63c>
 800a17a:	4b7f      	ldr	r3, [pc, #508]	; (800a378 <_dtoa_r+0x920>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	f7f6 fa6b 	bl	8000658 <__aeabi_dmul>
 800a182:	2200      	movs	r2, #0
 800a184:	2300      	movs	r3, #0
 800a186:	4606      	mov	r6, r0
 800a188:	460f      	mov	r7, r1
 800a18a:	f7f6 fccd 	bl	8000b28 <__aeabi_dcmpeq>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d09b      	beq.n	800a0ca <_dtoa_r+0x672>
 800a192:	e7cd      	b.n	800a130 <_dtoa_r+0x6d8>
 800a194:	9a08      	ldr	r2, [sp, #32]
 800a196:	2a00      	cmp	r2, #0
 800a198:	f000 80c4 	beq.w	800a324 <_dtoa_r+0x8cc>
 800a19c:	9a05      	ldr	r2, [sp, #20]
 800a19e:	2a01      	cmp	r2, #1
 800a1a0:	f300 80a8 	bgt.w	800a2f4 <_dtoa_r+0x89c>
 800a1a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	f000 80a0 	beq.w	800a2ec <_dtoa_r+0x894>
 800a1ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1b0:	9e06      	ldr	r6, [sp, #24]
 800a1b2:	4645      	mov	r5, r8
 800a1b4:	9a04      	ldr	r2, [sp, #16]
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	441a      	add	r2, r3
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	4498      	add	r8, r3
 800a1be:	9204      	str	r2, [sp, #16]
 800a1c0:	f001 f9b8 	bl	800b534 <__i2b>
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	2d00      	cmp	r5, #0
 800a1c8:	dd0b      	ble.n	800a1e2 <_dtoa_r+0x78a>
 800a1ca:	9b04      	ldr	r3, [sp, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	dd08      	ble.n	800a1e2 <_dtoa_r+0x78a>
 800a1d0:	42ab      	cmp	r3, r5
 800a1d2:	9a04      	ldr	r2, [sp, #16]
 800a1d4:	bfa8      	it	ge
 800a1d6:	462b      	movge	r3, r5
 800a1d8:	eba8 0803 	sub.w	r8, r8, r3
 800a1dc:	1aed      	subs	r5, r5, r3
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	9b06      	ldr	r3, [sp, #24]
 800a1e4:	b1fb      	cbz	r3, 800a226 <_dtoa_r+0x7ce>
 800a1e6:	9b08      	ldr	r3, [sp, #32]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 809f 	beq.w	800a32c <_dtoa_r+0x8d4>
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	dd11      	ble.n	800a216 <_dtoa_r+0x7be>
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f001 fa58 	bl	800b6ac <__pow5mult>
 800a1fc:	465a      	mov	r2, fp
 800a1fe:	4601      	mov	r1, r0
 800a200:	4607      	mov	r7, r0
 800a202:	4620      	mov	r0, r4
 800a204:	f001 f9ac 	bl	800b560 <__multiply>
 800a208:	4659      	mov	r1, fp
 800a20a:	9007      	str	r0, [sp, #28]
 800a20c:	4620      	mov	r0, r4
 800a20e:	f001 f88b 	bl	800b328 <_Bfree>
 800a212:	9b07      	ldr	r3, [sp, #28]
 800a214:	469b      	mov	fp, r3
 800a216:	9b06      	ldr	r3, [sp, #24]
 800a218:	1b9a      	subs	r2, r3, r6
 800a21a:	d004      	beq.n	800a226 <_dtoa_r+0x7ce>
 800a21c:	4659      	mov	r1, fp
 800a21e:	4620      	mov	r0, r4
 800a220:	f001 fa44 	bl	800b6ac <__pow5mult>
 800a224:	4683      	mov	fp, r0
 800a226:	2101      	movs	r1, #1
 800a228:	4620      	mov	r0, r4
 800a22a:	f001 f983 	bl	800b534 <__i2b>
 800a22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a230:	2b00      	cmp	r3, #0
 800a232:	4606      	mov	r6, r0
 800a234:	dd7c      	ble.n	800a330 <_dtoa_r+0x8d8>
 800a236:	461a      	mov	r2, r3
 800a238:	4601      	mov	r1, r0
 800a23a:	4620      	mov	r0, r4
 800a23c:	f001 fa36 	bl	800b6ac <__pow5mult>
 800a240:	9b05      	ldr	r3, [sp, #20]
 800a242:	2b01      	cmp	r3, #1
 800a244:	4606      	mov	r6, r0
 800a246:	dd76      	ble.n	800a336 <_dtoa_r+0x8de>
 800a248:	2300      	movs	r3, #0
 800a24a:	9306      	str	r3, [sp, #24]
 800a24c:	6933      	ldr	r3, [r6, #16]
 800a24e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a252:	6918      	ldr	r0, [r3, #16]
 800a254:	f001 f91e 	bl	800b494 <__hi0bits>
 800a258:	f1c0 0020 	rsb	r0, r0, #32
 800a25c:	9b04      	ldr	r3, [sp, #16]
 800a25e:	4418      	add	r0, r3
 800a260:	f010 001f 	ands.w	r0, r0, #31
 800a264:	f000 8086 	beq.w	800a374 <_dtoa_r+0x91c>
 800a268:	f1c0 0320 	rsb	r3, r0, #32
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	dd7f      	ble.n	800a370 <_dtoa_r+0x918>
 800a270:	f1c0 001c 	rsb	r0, r0, #28
 800a274:	9b04      	ldr	r3, [sp, #16]
 800a276:	4403      	add	r3, r0
 800a278:	4480      	add	r8, r0
 800a27a:	4405      	add	r5, r0
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	f1b8 0f00 	cmp.w	r8, #0
 800a282:	dd05      	ble.n	800a290 <_dtoa_r+0x838>
 800a284:	4659      	mov	r1, fp
 800a286:	4642      	mov	r2, r8
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 fa69 	bl	800b760 <__lshift>
 800a28e:	4683      	mov	fp, r0
 800a290:	9b04      	ldr	r3, [sp, #16]
 800a292:	2b00      	cmp	r3, #0
 800a294:	dd05      	ble.n	800a2a2 <_dtoa_r+0x84a>
 800a296:	4631      	mov	r1, r6
 800a298:	461a      	mov	r2, r3
 800a29a:	4620      	mov	r0, r4
 800a29c:	f001 fa60 	bl	800b760 <__lshift>
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d069      	beq.n	800a37c <_dtoa_r+0x924>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4658      	mov	r0, fp
 800a2ac:	f001 fac4 	bl	800b838 <__mcmp>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	da63      	bge.n	800a37c <_dtoa_r+0x924>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4659      	mov	r1, fp
 800a2b8:	220a      	movs	r2, #10
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	f001 f856 	bl	800b36c <__multadd>
 800a2c0:	9b08      	ldr	r3, [sp, #32]
 800a2c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2c6:	4683      	mov	fp, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 818f 	beq.w	800a5ec <_dtoa_r+0xb94>
 800a2ce:	4639      	mov	r1, r7
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	220a      	movs	r2, #10
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f001 f849 	bl	800b36c <__multadd>
 800a2da:	f1b9 0f00 	cmp.w	r9, #0
 800a2de:	4607      	mov	r7, r0
 800a2e0:	f300 808e 	bgt.w	800a400 <_dtoa_r+0x9a8>
 800a2e4:	9b05      	ldr	r3, [sp, #20]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	dc50      	bgt.n	800a38c <_dtoa_r+0x934>
 800a2ea:	e089      	b.n	800a400 <_dtoa_r+0x9a8>
 800a2ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2f2:	e75d      	b.n	800a1b0 <_dtoa_r+0x758>
 800a2f4:	9b01      	ldr	r3, [sp, #4]
 800a2f6:	1e5e      	subs	r6, r3, #1
 800a2f8:	9b06      	ldr	r3, [sp, #24]
 800a2fa:	42b3      	cmp	r3, r6
 800a2fc:	bfbf      	itttt	lt
 800a2fe:	9b06      	ldrlt	r3, [sp, #24]
 800a300:	9606      	strlt	r6, [sp, #24]
 800a302:	1af2      	sublt	r2, r6, r3
 800a304:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a306:	bfb6      	itet	lt
 800a308:	189b      	addlt	r3, r3, r2
 800a30a:	1b9e      	subge	r6, r3, r6
 800a30c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	bfb8      	it	lt
 800a312:	2600      	movlt	r6, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	bfb5      	itete	lt
 800a318:	eba8 0503 	sublt.w	r5, r8, r3
 800a31c:	9b01      	ldrge	r3, [sp, #4]
 800a31e:	2300      	movlt	r3, #0
 800a320:	4645      	movge	r5, r8
 800a322:	e747      	b.n	800a1b4 <_dtoa_r+0x75c>
 800a324:	9e06      	ldr	r6, [sp, #24]
 800a326:	9f08      	ldr	r7, [sp, #32]
 800a328:	4645      	mov	r5, r8
 800a32a:	e74c      	b.n	800a1c6 <_dtoa_r+0x76e>
 800a32c:	9a06      	ldr	r2, [sp, #24]
 800a32e:	e775      	b.n	800a21c <_dtoa_r+0x7c4>
 800a330:	9b05      	ldr	r3, [sp, #20]
 800a332:	2b01      	cmp	r3, #1
 800a334:	dc18      	bgt.n	800a368 <_dtoa_r+0x910>
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	b9b3      	cbnz	r3, 800a368 <_dtoa_r+0x910>
 800a33a:	9b03      	ldr	r3, [sp, #12]
 800a33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a340:	b9a3      	cbnz	r3, 800a36c <_dtoa_r+0x914>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a348:	0d1b      	lsrs	r3, r3, #20
 800a34a:	051b      	lsls	r3, r3, #20
 800a34c:	b12b      	cbz	r3, 800a35a <_dtoa_r+0x902>
 800a34e:	9b04      	ldr	r3, [sp, #16]
 800a350:	3301      	adds	r3, #1
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	f108 0801 	add.w	r8, r8, #1
 800a358:	2301      	movs	r3, #1
 800a35a:	9306      	str	r3, [sp, #24]
 800a35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f47f af74 	bne.w	800a24c <_dtoa_r+0x7f4>
 800a364:	2001      	movs	r0, #1
 800a366:	e779      	b.n	800a25c <_dtoa_r+0x804>
 800a368:	2300      	movs	r3, #0
 800a36a:	e7f6      	b.n	800a35a <_dtoa_r+0x902>
 800a36c:	9b02      	ldr	r3, [sp, #8]
 800a36e:	e7f4      	b.n	800a35a <_dtoa_r+0x902>
 800a370:	d085      	beq.n	800a27e <_dtoa_r+0x826>
 800a372:	4618      	mov	r0, r3
 800a374:	301c      	adds	r0, #28
 800a376:	e77d      	b.n	800a274 <_dtoa_r+0x81c>
 800a378:	40240000 	.word	0x40240000
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	dc38      	bgt.n	800a3f4 <_dtoa_r+0x99c>
 800a382:	9b05      	ldr	r3, [sp, #20]
 800a384:	2b02      	cmp	r3, #2
 800a386:	dd35      	ble.n	800a3f4 <_dtoa_r+0x99c>
 800a388:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a38c:	f1b9 0f00 	cmp.w	r9, #0
 800a390:	d10d      	bne.n	800a3ae <_dtoa_r+0x956>
 800a392:	4631      	mov	r1, r6
 800a394:	464b      	mov	r3, r9
 800a396:	2205      	movs	r2, #5
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 ffe7 	bl	800b36c <__multadd>
 800a39e:	4601      	mov	r1, r0
 800a3a0:	4606      	mov	r6, r0
 800a3a2:	4658      	mov	r0, fp
 800a3a4:	f001 fa48 	bl	800b838 <__mcmp>
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	f73f adbd 	bgt.w	8009f28 <_dtoa_r+0x4d0>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	9d00      	ldr	r5, [sp, #0]
 800a3b2:	ea6f 0a03 	mvn.w	sl, r3
 800a3b6:	f04f 0800 	mov.w	r8, #0
 800a3ba:	4631      	mov	r1, r6
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f000 ffb3 	bl	800b328 <_Bfree>
 800a3c2:	2f00      	cmp	r7, #0
 800a3c4:	f43f aeb4 	beq.w	800a130 <_dtoa_r+0x6d8>
 800a3c8:	f1b8 0f00 	cmp.w	r8, #0
 800a3cc:	d005      	beq.n	800a3da <_dtoa_r+0x982>
 800a3ce:	45b8      	cmp	r8, r7
 800a3d0:	d003      	beq.n	800a3da <_dtoa_r+0x982>
 800a3d2:	4641      	mov	r1, r8
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 ffa7 	bl	800b328 <_Bfree>
 800a3da:	4639      	mov	r1, r7
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 ffa3 	bl	800b328 <_Bfree>
 800a3e2:	e6a5      	b.n	800a130 <_dtoa_r+0x6d8>
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	4637      	mov	r7, r6
 800a3e8:	e7e1      	b.n	800a3ae <_dtoa_r+0x956>
 800a3ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a3ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a3f0:	4637      	mov	r7, r6
 800a3f2:	e599      	b.n	8009f28 <_dtoa_r+0x4d0>
 800a3f4:	9b08      	ldr	r3, [sp, #32]
 800a3f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 80fd 	beq.w	800a5fa <_dtoa_r+0xba2>
 800a400:	2d00      	cmp	r5, #0
 800a402:	dd05      	ble.n	800a410 <_dtoa_r+0x9b8>
 800a404:	4639      	mov	r1, r7
 800a406:	462a      	mov	r2, r5
 800a408:	4620      	mov	r0, r4
 800a40a:	f001 f9a9 	bl	800b760 <__lshift>
 800a40e:	4607      	mov	r7, r0
 800a410:	9b06      	ldr	r3, [sp, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d05c      	beq.n	800a4d0 <_dtoa_r+0xa78>
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4620      	mov	r0, r4
 800a41a:	f000 ff45 	bl	800b2a8 <_Balloc>
 800a41e:	4605      	mov	r5, r0
 800a420:	b928      	cbnz	r0, 800a42e <_dtoa_r+0x9d6>
 800a422:	4b80      	ldr	r3, [pc, #512]	; (800a624 <_dtoa_r+0xbcc>)
 800a424:	4602      	mov	r2, r0
 800a426:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a42a:	f7ff bb2e 	b.w	8009a8a <_dtoa_r+0x32>
 800a42e:	693a      	ldr	r2, [r7, #16]
 800a430:	3202      	adds	r2, #2
 800a432:	0092      	lsls	r2, r2, #2
 800a434:	f107 010c 	add.w	r1, r7, #12
 800a438:	300c      	adds	r0, #12
 800a43a:	f000 ff27 	bl	800b28c <memcpy>
 800a43e:	2201      	movs	r2, #1
 800a440:	4629      	mov	r1, r5
 800a442:	4620      	mov	r0, r4
 800a444:	f001 f98c 	bl	800b760 <__lshift>
 800a448:	9b00      	ldr	r3, [sp, #0]
 800a44a:	3301      	adds	r3, #1
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	444b      	add	r3, r9
 800a452:	9307      	str	r3, [sp, #28]
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	46b8      	mov	r8, r7
 800a45c:	9306      	str	r3, [sp, #24]
 800a45e:	4607      	mov	r7, r0
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	4631      	mov	r1, r6
 800a464:	3b01      	subs	r3, #1
 800a466:	4658      	mov	r0, fp
 800a468:	9302      	str	r3, [sp, #8]
 800a46a:	f7ff fa67 	bl	800993c <quorem>
 800a46e:	4603      	mov	r3, r0
 800a470:	3330      	adds	r3, #48	; 0x30
 800a472:	9004      	str	r0, [sp, #16]
 800a474:	4641      	mov	r1, r8
 800a476:	4658      	mov	r0, fp
 800a478:	9308      	str	r3, [sp, #32]
 800a47a:	f001 f9dd 	bl	800b838 <__mcmp>
 800a47e:	463a      	mov	r2, r7
 800a480:	4681      	mov	r9, r0
 800a482:	4631      	mov	r1, r6
 800a484:	4620      	mov	r0, r4
 800a486:	f001 f9f3 	bl	800b870 <__mdiff>
 800a48a:	68c2      	ldr	r2, [r0, #12]
 800a48c:	9b08      	ldr	r3, [sp, #32]
 800a48e:	4605      	mov	r5, r0
 800a490:	bb02      	cbnz	r2, 800a4d4 <_dtoa_r+0xa7c>
 800a492:	4601      	mov	r1, r0
 800a494:	4658      	mov	r0, fp
 800a496:	f001 f9cf 	bl	800b838 <__mcmp>
 800a49a:	9b08      	ldr	r3, [sp, #32]
 800a49c:	4602      	mov	r2, r0
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a4a6:	f000 ff3f 	bl	800b328 <_Bfree>
 800a4aa:	9b05      	ldr	r3, [sp, #20]
 800a4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ae:	9d01      	ldr	r5, [sp, #4]
 800a4b0:	ea43 0102 	orr.w	r1, r3, r2
 800a4b4:	9b06      	ldr	r3, [sp, #24]
 800a4b6:	430b      	orrs	r3, r1
 800a4b8:	9b08      	ldr	r3, [sp, #32]
 800a4ba:	d10d      	bne.n	800a4d8 <_dtoa_r+0xa80>
 800a4bc:	2b39      	cmp	r3, #57	; 0x39
 800a4be:	d029      	beq.n	800a514 <_dtoa_r+0xabc>
 800a4c0:	f1b9 0f00 	cmp.w	r9, #0
 800a4c4:	dd01      	ble.n	800a4ca <_dtoa_r+0xa72>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	3331      	adds	r3, #49	; 0x31
 800a4ca:	9a02      	ldr	r2, [sp, #8]
 800a4cc:	7013      	strb	r3, [r2, #0]
 800a4ce:	e774      	b.n	800a3ba <_dtoa_r+0x962>
 800a4d0:	4638      	mov	r0, r7
 800a4d2:	e7b9      	b.n	800a448 <_dtoa_r+0x9f0>
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	e7e2      	b.n	800a49e <_dtoa_r+0xa46>
 800a4d8:	f1b9 0f00 	cmp.w	r9, #0
 800a4dc:	db06      	blt.n	800a4ec <_dtoa_r+0xa94>
 800a4de:	9905      	ldr	r1, [sp, #20]
 800a4e0:	ea41 0909 	orr.w	r9, r1, r9
 800a4e4:	9906      	ldr	r1, [sp, #24]
 800a4e6:	ea59 0101 	orrs.w	r1, r9, r1
 800a4ea:	d120      	bne.n	800a52e <_dtoa_r+0xad6>
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	ddec      	ble.n	800a4ca <_dtoa_r+0xa72>
 800a4f0:	4659      	mov	r1, fp
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	9301      	str	r3, [sp, #4]
 800a4f8:	f001 f932 	bl	800b760 <__lshift>
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4683      	mov	fp, r0
 800a500:	f001 f99a 	bl	800b838 <__mcmp>
 800a504:	2800      	cmp	r0, #0
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	dc02      	bgt.n	800a510 <_dtoa_r+0xab8>
 800a50a:	d1de      	bne.n	800a4ca <_dtoa_r+0xa72>
 800a50c:	07da      	lsls	r2, r3, #31
 800a50e:	d5dc      	bpl.n	800a4ca <_dtoa_r+0xa72>
 800a510:	2b39      	cmp	r3, #57	; 0x39
 800a512:	d1d8      	bne.n	800a4c6 <_dtoa_r+0xa6e>
 800a514:	9a02      	ldr	r2, [sp, #8]
 800a516:	2339      	movs	r3, #57	; 0x39
 800a518:	7013      	strb	r3, [r2, #0]
 800a51a:	462b      	mov	r3, r5
 800a51c:	461d      	mov	r5, r3
 800a51e:	3b01      	subs	r3, #1
 800a520:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a524:	2a39      	cmp	r2, #57	; 0x39
 800a526:	d050      	beq.n	800a5ca <_dtoa_r+0xb72>
 800a528:	3201      	adds	r2, #1
 800a52a:	701a      	strb	r2, [r3, #0]
 800a52c:	e745      	b.n	800a3ba <_dtoa_r+0x962>
 800a52e:	2a00      	cmp	r2, #0
 800a530:	dd03      	ble.n	800a53a <_dtoa_r+0xae2>
 800a532:	2b39      	cmp	r3, #57	; 0x39
 800a534:	d0ee      	beq.n	800a514 <_dtoa_r+0xabc>
 800a536:	3301      	adds	r3, #1
 800a538:	e7c7      	b.n	800a4ca <_dtoa_r+0xa72>
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	9907      	ldr	r1, [sp, #28]
 800a53e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a542:	428a      	cmp	r2, r1
 800a544:	d02a      	beq.n	800a59c <_dtoa_r+0xb44>
 800a546:	4659      	mov	r1, fp
 800a548:	2300      	movs	r3, #0
 800a54a:	220a      	movs	r2, #10
 800a54c:	4620      	mov	r0, r4
 800a54e:	f000 ff0d 	bl	800b36c <__multadd>
 800a552:	45b8      	cmp	r8, r7
 800a554:	4683      	mov	fp, r0
 800a556:	f04f 0300 	mov.w	r3, #0
 800a55a:	f04f 020a 	mov.w	r2, #10
 800a55e:	4641      	mov	r1, r8
 800a560:	4620      	mov	r0, r4
 800a562:	d107      	bne.n	800a574 <_dtoa_r+0xb1c>
 800a564:	f000 ff02 	bl	800b36c <__multadd>
 800a568:	4680      	mov	r8, r0
 800a56a:	4607      	mov	r7, r0
 800a56c:	9b01      	ldr	r3, [sp, #4]
 800a56e:	3301      	adds	r3, #1
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	e775      	b.n	800a460 <_dtoa_r+0xa08>
 800a574:	f000 fefa 	bl	800b36c <__multadd>
 800a578:	4639      	mov	r1, r7
 800a57a:	4680      	mov	r8, r0
 800a57c:	2300      	movs	r3, #0
 800a57e:	220a      	movs	r2, #10
 800a580:	4620      	mov	r0, r4
 800a582:	f000 fef3 	bl	800b36c <__multadd>
 800a586:	4607      	mov	r7, r0
 800a588:	e7f0      	b.n	800a56c <_dtoa_r+0xb14>
 800a58a:	f1b9 0f00 	cmp.w	r9, #0
 800a58e:	9a00      	ldr	r2, [sp, #0]
 800a590:	bfcc      	ite	gt
 800a592:	464d      	movgt	r5, r9
 800a594:	2501      	movle	r5, #1
 800a596:	4415      	add	r5, r2
 800a598:	f04f 0800 	mov.w	r8, #0
 800a59c:	4659      	mov	r1, fp
 800a59e:	2201      	movs	r2, #1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	f001 f8dc 	bl	800b760 <__lshift>
 800a5a8:	4631      	mov	r1, r6
 800a5aa:	4683      	mov	fp, r0
 800a5ac:	f001 f944 	bl	800b838 <__mcmp>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	dcb2      	bgt.n	800a51a <_dtoa_r+0xac2>
 800a5b4:	d102      	bne.n	800a5bc <_dtoa_r+0xb64>
 800a5b6:	9b01      	ldr	r3, [sp, #4]
 800a5b8:	07db      	lsls	r3, r3, #31
 800a5ba:	d4ae      	bmi.n	800a51a <_dtoa_r+0xac2>
 800a5bc:	462b      	mov	r3, r5
 800a5be:	461d      	mov	r5, r3
 800a5c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5c4:	2a30      	cmp	r2, #48	; 0x30
 800a5c6:	d0fa      	beq.n	800a5be <_dtoa_r+0xb66>
 800a5c8:	e6f7      	b.n	800a3ba <_dtoa_r+0x962>
 800a5ca:	9a00      	ldr	r2, [sp, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d1a5      	bne.n	800a51c <_dtoa_r+0xac4>
 800a5d0:	f10a 0a01 	add.w	sl, sl, #1
 800a5d4:	2331      	movs	r3, #49	; 0x31
 800a5d6:	e779      	b.n	800a4cc <_dtoa_r+0xa74>
 800a5d8:	4b13      	ldr	r3, [pc, #76]	; (800a628 <_dtoa_r+0xbd0>)
 800a5da:	f7ff baaf 	b.w	8009b3c <_dtoa_r+0xe4>
 800a5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f47f aa86 	bne.w	8009af2 <_dtoa_r+0x9a>
 800a5e6:	4b11      	ldr	r3, [pc, #68]	; (800a62c <_dtoa_r+0xbd4>)
 800a5e8:	f7ff baa8 	b.w	8009b3c <_dtoa_r+0xe4>
 800a5ec:	f1b9 0f00 	cmp.w	r9, #0
 800a5f0:	dc03      	bgt.n	800a5fa <_dtoa_r+0xba2>
 800a5f2:	9b05      	ldr	r3, [sp, #20]
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	f73f aec9 	bgt.w	800a38c <_dtoa_r+0x934>
 800a5fa:	9d00      	ldr	r5, [sp, #0]
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4658      	mov	r0, fp
 800a600:	f7ff f99c 	bl	800993c <quorem>
 800a604:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a608:	f805 3b01 	strb.w	r3, [r5], #1
 800a60c:	9a00      	ldr	r2, [sp, #0]
 800a60e:	1aaa      	subs	r2, r5, r2
 800a610:	4591      	cmp	r9, r2
 800a612:	ddba      	ble.n	800a58a <_dtoa_r+0xb32>
 800a614:	4659      	mov	r1, fp
 800a616:	2300      	movs	r3, #0
 800a618:	220a      	movs	r2, #10
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fea6 	bl	800b36c <__multadd>
 800a620:	4683      	mov	fp, r0
 800a622:	e7eb      	b.n	800a5fc <_dtoa_r+0xba4>
 800a624:	0800ccd9 	.word	0x0800ccd9
 800a628:	0800ca40 	.word	0x0800ca40
 800a62c:	0800cc6d 	.word	0x0800cc6d

0800a630 <__sflush_r>:
 800a630:	898a      	ldrh	r2, [r1, #12]
 800a632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a636:	4605      	mov	r5, r0
 800a638:	0710      	lsls	r0, r2, #28
 800a63a:	460c      	mov	r4, r1
 800a63c:	d458      	bmi.n	800a6f0 <__sflush_r+0xc0>
 800a63e:	684b      	ldr	r3, [r1, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc05      	bgt.n	800a650 <__sflush_r+0x20>
 800a644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	dc02      	bgt.n	800a650 <__sflush_r+0x20>
 800a64a:	2000      	movs	r0, #0
 800a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a652:	2e00      	cmp	r6, #0
 800a654:	d0f9      	beq.n	800a64a <__sflush_r+0x1a>
 800a656:	2300      	movs	r3, #0
 800a658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a65c:	682f      	ldr	r7, [r5, #0]
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	d032      	beq.n	800a6c8 <__sflush_r+0x98>
 800a662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	075a      	lsls	r2, r3, #29
 800a668:	d505      	bpl.n	800a676 <__sflush_r+0x46>
 800a66a:	6863      	ldr	r3, [r4, #4]
 800a66c:	1ac0      	subs	r0, r0, r3
 800a66e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a670:	b10b      	cbz	r3, 800a676 <__sflush_r+0x46>
 800a672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a674:	1ac0      	subs	r0, r0, r3
 800a676:	2300      	movs	r3, #0
 800a678:	4602      	mov	r2, r0
 800a67a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a67c:	6a21      	ldr	r1, [r4, #32]
 800a67e:	4628      	mov	r0, r5
 800a680:	47b0      	blx	r6
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	d106      	bne.n	800a696 <__sflush_r+0x66>
 800a688:	6829      	ldr	r1, [r5, #0]
 800a68a:	291d      	cmp	r1, #29
 800a68c:	d82c      	bhi.n	800a6e8 <__sflush_r+0xb8>
 800a68e:	4a2a      	ldr	r2, [pc, #168]	; (800a738 <__sflush_r+0x108>)
 800a690:	40ca      	lsrs	r2, r1
 800a692:	07d6      	lsls	r6, r2, #31
 800a694:	d528      	bpl.n	800a6e8 <__sflush_r+0xb8>
 800a696:	2200      	movs	r2, #0
 800a698:	6062      	str	r2, [r4, #4]
 800a69a:	04d9      	lsls	r1, r3, #19
 800a69c:	6922      	ldr	r2, [r4, #16]
 800a69e:	6022      	str	r2, [r4, #0]
 800a6a0:	d504      	bpl.n	800a6ac <__sflush_r+0x7c>
 800a6a2:	1c42      	adds	r2, r0, #1
 800a6a4:	d101      	bne.n	800a6aa <__sflush_r+0x7a>
 800a6a6:	682b      	ldr	r3, [r5, #0]
 800a6a8:	b903      	cbnz	r3, 800a6ac <__sflush_r+0x7c>
 800a6aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ae:	602f      	str	r7, [r5, #0]
 800a6b0:	2900      	cmp	r1, #0
 800a6b2:	d0ca      	beq.n	800a64a <__sflush_r+0x1a>
 800a6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6b8:	4299      	cmp	r1, r3
 800a6ba:	d002      	beq.n	800a6c2 <__sflush_r+0x92>
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f001 fabd 	bl	800bc3c <_free_r>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a6c6:	e7c1      	b.n	800a64c <__sflush_r+0x1c>
 800a6c8:	6a21      	ldr	r1, [r4, #32]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	47b0      	blx	r6
 800a6d0:	1c41      	adds	r1, r0, #1
 800a6d2:	d1c7      	bne.n	800a664 <__sflush_r+0x34>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0c4      	beq.n	800a664 <__sflush_r+0x34>
 800a6da:	2b1d      	cmp	r3, #29
 800a6dc:	d001      	beq.n	800a6e2 <__sflush_r+0xb2>
 800a6de:	2b16      	cmp	r3, #22
 800a6e0:	d101      	bne.n	800a6e6 <__sflush_r+0xb6>
 800a6e2:	602f      	str	r7, [r5, #0]
 800a6e4:	e7b1      	b.n	800a64a <__sflush_r+0x1a>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	e7ad      	b.n	800a64c <__sflush_r+0x1c>
 800a6f0:	690f      	ldr	r7, [r1, #16]
 800a6f2:	2f00      	cmp	r7, #0
 800a6f4:	d0a9      	beq.n	800a64a <__sflush_r+0x1a>
 800a6f6:	0793      	lsls	r3, r2, #30
 800a6f8:	680e      	ldr	r6, [r1, #0]
 800a6fa:	bf08      	it	eq
 800a6fc:	694b      	ldreq	r3, [r1, #20]
 800a6fe:	600f      	str	r7, [r1, #0]
 800a700:	bf18      	it	ne
 800a702:	2300      	movne	r3, #0
 800a704:	eba6 0807 	sub.w	r8, r6, r7
 800a708:	608b      	str	r3, [r1, #8]
 800a70a:	f1b8 0f00 	cmp.w	r8, #0
 800a70e:	dd9c      	ble.n	800a64a <__sflush_r+0x1a>
 800a710:	6a21      	ldr	r1, [r4, #32]
 800a712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a714:	4643      	mov	r3, r8
 800a716:	463a      	mov	r2, r7
 800a718:	4628      	mov	r0, r5
 800a71a:	47b0      	blx	r6
 800a71c:	2800      	cmp	r0, #0
 800a71e:	dc06      	bgt.n	800a72e <__sflush_r+0xfe>
 800a720:	89a3      	ldrh	r3, [r4, #12]
 800a722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a726:	81a3      	strh	r3, [r4, #12]
 800a728:	f04f 30ff 	mov.w	r0, #4294967295
 800a72c:	e78e      	b.n	800a64c <__sflush_r+0x1c>
 800a72e:	4407      	add	r7, r0
 800a730:	eba8 0800 	sub.w	r8, r8, r0
 800a734:	e7e9      	b.n	800a70a <__sflush_r+0xda>
 800a736:	bf00      	nop
 800a738:	20400001 	.word	0x20400001

0800a73c <_fflush_r>:
 800a73c:	b538      	push	{r3, r4, r5, lr}
 800a73e:	690b      	ldr	r3, [r1, #16]
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	b913      	cbnz	r3, 800a74c <_fflush_r+0x10>
 800a746:	2500      	movs	r5, #0
 800a748:	4628      	mov	r0, r5
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	b118      	cbz	r0, 800a756 <_fflush_r+0x1a>
 800a74e:	6983      	ldr	r3, [r0, #24]
 800a750:	b90b      	cbnz	r3, 800a756 <_fflush_r+0x1a>
 800a752:	f000 f899 	bl	800a888 <__sinit>
 800a756:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <_fflush_r+0x6c>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	d11b      	bne.n	800a794 <_fflush_r+0x58>
 800a75c:	686c      	ldr	r4, [r5, #4]
 800a75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d0ef      	beq.n	800a746 <_fflush_r+0xa>
 800a766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a768:	07d0      	lsls	r0, r2, #31
 800a76a:	d404      	bmi.n	800a776 <_fflush_r+0x3a>
 800a76c:	0599      	lsls	r1, r3, #22
 800a76e:	d402      	bmi.n	800a776 <_fflush_r+0x3a>
 800a770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a772:	f000 fd0a 	bl	800b18a <__retarget_lock_acquire_recursive>
 800a776:	4628      	mov	r0, r5
 800a778:	4621      	mov	r1, r4
 800a77a:	f7ff ff59 	bl	800a630 <__sflush_r>
 800a77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a780:	07da      	lsls	r2, r3, #31
 800a782:	4605      	mov	r5, r0
 800a784:	d4e0      	bmi.n	800a748 <_fflush_r+0xc>
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	059b      	lsls	r3, r3, #22
 800a78a:	d4dd      	bmi.n	800a748 <_fflush_r+0xc>
 800a78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a78e:	f000 fcfd 	bl	800b18c <__retarget_lock_release_recursive>
 800a792:	e7d9      	b.n	800a748 <_fflush_r+0xc>
 800a794:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <_fflush_r+0x70>)
 800a796:	429c      	cmp	r4, r3
 800a798:	d101      	bne.n	800a79e <_fflush_r+0x62>
 800a79a:	68ac      	ldr	r4, [r5, #8]
 800a79c:	e7df      	b.n	800a75e <_fflush_r+0x22>
 800a79e:	4b04      	ldr	r3, [pc, #16]	; (800a7b0 <_fflush_r+0x74>)
 800a7a0:	429c      	cmp	r4, r3
 800a7a2:	bf08      	it	eq
 800a7a4:	68ec      	ldreq	r4, [r5, #12]
 800a7a6:	e7da      	b.n	800a75e <_fflush_r+0x22>
 800a7a8:	0800cd0c 	.word	0x0800cd0c
 800a7ac:	0800cd2c 	.word	0x0800cd2c
 800a7b0:	0800ccec 	.word	0x0800ccec

0800a7b4 <fflush>:
 800a7b4:	4601      	mov	r1, r0
 800a7b6:	b920      	cbnz	r0, 800a7c2 <fflush+0xe>
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <fflush+0x18>)
 800a7ba:	4905      	ldr	r1, [pc, #20]	; (800a7d0 <fflush+0x1c>)
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	f000 b910 	b.w	800a9e2 <_fwalk_reent>
 800a7c2:	4b04      	ldr	r3, [pc, #16]	; (800a7d4 <fflush+0x20>)
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f7ff bfb9 	b.w	800a73c <_fflush_r>
 800a7ca:	bf00      	nop
 800a7cc:	0800ca2c 	.word	0x0800ca2c
 800a7d0:	0800a73d 	.word	0x0800a73d
 800a7d4:	2000000c 	.word	0x2000000c

0800a7d8 <std>:
 800a7d8:	2300      	movs	r3, #0
 800a7da:	b510      	push	{r4, lr}
 800a7dc:	4604      	mov	r4, r0
 800a7de:	e9c0 3300 	strd	r3, r3, [r0]
 800a7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7e6:	6083      	str	r3, [r0, #8]
 800a7e8:	8181      	strh	r1, [r0, #12]
 800a7ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a7ec:	81c2      	strh	r2, [r0, #14]
 800a7ee:	6183      	str	r3, [r0, #24]
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	2208      	movs	r2, #8
 800a7f4:	305c      	adds	r0, #92	; 0x5c
 800a7f6:	f7fd fb9f 	bl	8007f38 <memset>
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <std+0x38>)
 800a7fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x3c>)
 800a800:	62a3      	str	r3, [r4, #40]	; 0x28
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <std+0x40>)
 800a804:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <std+0x44>)
 800a808:	6224      	str	r4, [r4, #32]
 800a80a:	6323      	str	r3, [r4, #48]	; 0x30
 800a80c:	bd10      	pop	{r4, pc}
 800a80e:	bf00      	nop
 800a810:	0800c0d1 	.word	0x0800c0d1
 800a814:	0800c0f3 	.word	0x0800c0f3
 800a818:	0800c12b 	.word	0x0800c12b
 800a81c:	0800c14f 	.word	0x0800c14f

0800a820 <_cleanup_r>:
 800a820:	4901      	ldr	r1, [pc, #4]	; (800a828 <_cleanup_r+0x8>)
 800a822:	f000 b8de 	b.w	800a9e2 <_fwalk_reent>
 800a826:	bf00      	nop
 800a828:	0800a73d 	.word	0x0800a73d

0800a82c <__sfmoreglue>:
 800a82c:	b570      	push	{r4, r5, r6, lr}
 800a82e:	1e4a      	subs	r2, r1, #1
 800a830:	2568      	movs	r5, #104	; 0x68
 800a832:	4355      	muls	r5, r2
 800a834:	460e      	mov	r6, r1
 800a836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a83a:	f001 fa4f 	bl	800bcdc <_malloc_r>
 800a83e:	4604      	mov	r4, r0
 800a840:	b140      	cbz	r0, 800a854 <__sfmoreglue+0x28>
 800a842:	2100      	movs	r1, #0
 800a844:	e9c0 1600 	strd	r1, r6, [r0]
 800a848:	300c      	adds	r0, #12
 800a84a:	60a0      	str	r0, [r4, #8]
 800a84c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a850:	f7fd fb72 	bl	8007f38 <memset>
 800a854:	4620      	mov	r0, r4
 800a856:	bd70      	pop	{r4, r5, r6, pc}

0800a858 <__sfp_lock_acquire>:
 800a858:	4801      	ldr	r0, [pc, #4]	; (800a860 <__sfp_lock_acquire+0x8>)
 800a85a:	f000 bc96 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800a85e:	bf00      	nop
 800a860:	200009e0 	.word	0x200009e0

0800a864 <__sfp_lock_release>:
 800a864:	4801      	ldr	r0, [pc, #4]	; (800a86c <__sfp_lock_release+0x8>)
 800a866:	f000 bc91 	b.w	800b18c <__retarget_lock_release_recursive>
 800a86a:	bf00      	nop
 800a86c:	200009e0 	.word	0x200009e0

0800a870 <__sinit_lock_acquire>:
 800a870:	4801      	ldr	r0, [pc, #4]	; (800a878 <__sinit_lock_acquire+0x8>)
 800a872:	f000 bc8a 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	200009db 	.word	0x200009db

0800a87c <__sinit_lock_release>:
 800a87c:	4801      	ldr	r0, [pc, #4]	; (800a884 <__sinit_lock_release+0x8>)
 800a87e:	f000 bc85 	b.w	800b18c <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	200009db 	.word	0x200009db

0800a888 <__sinit>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4604      	mov	r4, r0
 800a88c:	f7ff fff0 	bl	800a870 <__sinit_lock_acquire>
 800a890:	69a3      	ldr	r3, [r4, #24]
 800a892:	b11b      	cbz	r3, 800a89c <__sinit+0x14>
 800a894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a898:	f7ff bff0 	b.w	800a87c <__sinit_lock_release>
 800a89c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a8a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a8a2:	4b13      	ldr	r3, [pc, #76]	; (800a8f0 <__sinit+0x68>)
 800a8a4:	4a13      	ldr	r2, [pc, #76]	; (800a8f4 <__sinit+0x6c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8aa:	42a3      	cmp	r3, r4
 800a8ac:	bf04      	itt	eq
 800a8ae:	2301      	moveq	r3, #1
 800a8b0:	61a3      	streq	r3, [r4, #24]
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f820 	bl	800a8f8 <__sfp>
 800a8b8:	6060      	str	r0, [r4, #4]
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 f81c 	bl	800a8f8 <__sfp>
 800a8c0:	60a0      	str	r0, [r4, #8]
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 f818 	bl	800a8f8 <__sfp>
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	60e0      	str	r0, [r4, #12]
 800a8cc:	2104      	movs	r1, #4
 800a8ce:	6860      	ldr	r0, [r4, #4]
 800a8d0:	f7ff ff82 	bl	800a7d8 <std>
 800a8d4:	68a0      	ldr	r0, [r4, #8]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	2109      	movs	r1, #9
 800a8da:	f7ff ff7d 	bl	800a7d8 <std>
 800a8de:	68e0      	ldr	r0, [r4, #12]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	2112      	movs	r1, #18
 800a8e4:	f7ff ff78 	bl	800a7d8 <std>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	61a3      	str	r3, [r4, #24]
 800a8ec:	e7d2      	b.n	800a894 <__sinit+0xc>
 800a8ee:	bf00      	nop
 800a8f0:	0800ca2c 	.word	0x0800ca2c
 800a8f4:	0800a821 	.word	0x0800a821

0800a8f8 <__sfp>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	f7ff ffac 	bl	800a858 <__sfp_lock_acquire>
 800a900:	4b1e      	ldr	r3, [pc, #120]	; (800a97c <__sfp+0x84>)
 800a902:	681e      	ldr	r6, [r3, #0]
 800a904:	69b3      	ldr	r3, [r6, #24]
 800a906:	b913      	cbnz	r3, 800a90e <__sfp+0x16>
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff ffbd 	bl	800a888 <__sinit>
 800a90e:	3648      	adds	r6, #72	; 0x48
 800a910:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a914:	3b01      	subs	r3, #1
 800a916:	d503      	bpl.n	800a920 <__sfp+0x28>
 800a918:	6833      	ldr	r3, [r6, #0]
 800a91a:	b30b      	cbz	r3, 800a960 <__sfp+0x68>
 800a91c:	6836      	ldr	r6, [r6, #0]
 800a91e:	e7f7      	b.n	800a910 <__sfp+0x18>
 800a920:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a924:	b9d5      	cbnz	r5, 800a95c <__sfp+0x64>
 800a926:	4b16      	ldr	r3, [pc, #88]	; (800a980 <__sfp+0x88>)
 800a928:	60e3      	str	r3, [r4, #12]
 800a92a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a92e:	6665      	str	r5, [r4, #100]	; 0x64
 800a930:	f000 fc2a 	bl	800b188 <__retarget_lock_init_recursive>
 800a934:	f7ff ff96 	bl	800a864 <__sfp_lock_release>
 800a938:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a93c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a940:	6025      	str	r5, [r4, #0]
 800a942:	61a5      	str	r5, [r4, #24]
 800a944:	2208      	movs	r2, #8
 800a946:	4629      	mov	r1, r5
 800a948:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a94c:	f7fd faf4 	bl	8007f38 <memset>
 800a950:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a954:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a958:	4620      	mov	r0, r4
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95c:	3468      	adds	r4, #104	; 0x68
 800a95e:	e7d9      	b.n	800a914 <__sfp+0x1c>
 800a960:	2104      	movs	r1, #4
 800a962:	4638      	mov	r0, r7
 800a964:	f7ff ff62 	bl	800a82c <__sfmoreglue>
 800a968:	4604      	mov	r4, r0
 800a96a:	6030      	str	r0, [r6, #0]
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d1d5      	bne.n	800a91c <__sfp+0x24>
 800a970:	f7ff ff78 	bl	800a864 <__sfp_lock_release>
 800a974:	230c      	movs	r3, #12
 800a976:	603b      	str	r3, [r7, #0]
 800a978:	e7ee      	b.n	800a958 <__sfp+0x60>
 800a97a:	bf00      	nop
 800a97c:	0800ca2c 	.word	0x0800ca2c
 800a980:	ffff0001 	.word	0xffff0001

0800a984 <fiprintf>:
 800a984:	b40e      	push	{r1, r2, r3}
 800a986:	b503      	push	{r0, r1, lr}
 800a988:	4601      	mov	r1, r0
 800a98a:	ab03      	add	r3, sp, #12
 800a98c:	4805      	ldr	r0, [pc, #20]	; (800a9a4 <fiprintf+0x20>)
 800a98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a992:	6800      	ldr	r0, [r0, #0]
 800a994:	9301      	str	r3, [sp, #4]
 800a996:	f001 fa25 	bl	800bde4 <_vfiprintf_r>
 800a99a:	b002      	add	sp, #8
 800a99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9a0:	b003      	add	sp, #12
 800a9a2:	4770      	bx	lr
 800a9a4:	2000000c 	.word	0x2000000c

0800a9a8 <_fwalk>:
 800a9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ac:	460f      	mov	r7, r1
 800a9ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800a9b8:	f1b8 0801 	subs.w	r8, r8, #1
 800a9bc:	d505      	bpl.n	800a9ca <_fwalk+0x22>
 800a9be:	6824      	ldr	r4, [r4, #0]
 800a9c0:	2c00      	cmp	r4, #0
 800a9c2:	d1f7      	bne.n	800a9b4 <_fwalk+0xc>
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d906      	bls.n	800a9de <_fwalk+0x36>
 800a9d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	d002      	beq.n	800a9de <_fwalk+0x36>
 800a9d8:	4628      	mov	r0, r5
 800a9da:	47b8      	blx	r7
 800a9dc:	4306      	orrs	r6, r0
 800a9de:	3568      	adds	r5, #104	; 0x68
 800a9e0:	e7ea      	b.n	800a9b8 <_fwalk+0x10>

0800a9e2 <_fwalk_reent>:
 800a9e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	4688      	mov	r8, r1
 800a9ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9ee:	2700      	movs	r7, #0
 800a9f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9f4:	f1b9 0901 	subs.w	r9, r9, #1
 800a9f8:	d505      	bpl.n	800aa06 <_fwalk_reent+0x24>
 800a9fa:	6824      	ldr	r4, [r4, #0]
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	d1f7      	bne.n	800a9f0 <_fwalk_reent+0xe>
 800aa00:	4638      	mov	r0, r7
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d907      	bls.n	800aa1c <_fwalk_reent+0x3a>
 800aa0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa10:	3301      	adds	r3, #1
 800aa12:	d003      	beq.n	800aa1c <_fwalk_reent+0x3a>
 800aa14:	4629      	mov	r1, r5
 800aa16:	4630      	mov	r0, r6
 800aa18:	47c0      	blx	r8
 800aa1a:	4307      	orrs	r7, r0
 800aa1c:	3568      	adds	r5, #104	; 0x68
 800aa1e:	e7e9      	b.n	800a9f4 <_fwalk_reent+0x12>

0800aa20 <rshift>:
 800aa20:	6903      	ldr	r3, [r0, #16]
 800aa22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aa26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aa2e:	f100 0414 	add.w	r4, r0, #20
 800aa32:	dd45      	ble.n	800aac0 <rshift+0xa0>
 800aa34:	f011 011f 	ands.w	r1, r1, #31
 800aa38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aa3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aa40:	d10c      	bne.n	800aa5c <rshift+0x3c>
 800aa42:	f100 0710 	add.w	r7, r0, #16
 800aa46:	4629      	mov	r1, r5
 800aa48:	42b1      	cmp	r1, r6
 800aa4a:	d334      	bcc.n	800aab6 <rshift+0x96>
 800aa4c:	1a9b      	subs	r3, r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	1eea      	subs	r2, r5, #3
 800aa52:	4296      	cmp	r6, r2
 800aa54:	bf38      	it	cc
 800aa56:	2300      	movcc	r3, #0
 800aa58:	4423      	add	r3, r4
 800aa5a:	e015      	b.n	800aa88 <rshift+0x68>
 800aa5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aa60:	f1c1 0820 	rsb	r8, r1, #32
 800aa64:	40cf      	lsrs	r7, r1
 800aa66:	f105 0e04 	add.w	lr, r5, #4
 800aa6a:	46a1      	mov	r9, r4
 800aa6c:	4576      	cmp	r6, lr
 800aa6e:	46f4      	mov	ip, lr
 800aa70:	d815      	bhi.n	800aa9e <rshift+0x7e>
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	009a      	lsls	r2, r3, #2
 800aa76:	3a04      	subs	r2, #4
 800aa78:	3501      	adds	r5, #1
 800aa7a:	42ae      	cmp	r6, r5
 800aa7c:	bf38      	it	cc
 800aa7e:	2200      	movcc	r2, #0
 800aa80:	18a3      	adds	r3, r4, r2
 800aa82:	50a7      	str	r7, [r4, r2]
 800aa84:	b107      	cbz	r7, 800aa88 <rshift+0x68>
 800aa86:	3304      	adds	r3, #4
 800aa88:	1b1a      	subs	r2, r3, r4
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa90:	bf08      	it	eq
 800aa92:	2300      	moveq	r3, #0
 800aa94:	6102      	str	r2, [r0, #16]
 800aa96:	bf08      	it	eq
 800aa98:	6143      	streq	r3, [r0, #20]
 800aa9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa9e:	f8dc c000 	ldr.w	ip, [ip]
 800aaa2:	fa0c fc08 	lsl.w	ip, ip, r8
 800aaa6:	ea4c 0707 	orr.w	r7, ip, r7
 800aaaa:	f849 7b04 	str.w	r7, [r9], #4
 800aaae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aab2:	40cf      	lsrs	r7, r1
 800aab4:	e7da      	b.n	800aa6c <rshift+0x4c>
 800aab6:	f851 cb04 	ldr.w	ip, [r1], #4
 800aaba:	f847 cf04 	str.w	ip, [r7, #4]!
 800aabe:	e7c3      	b.n	800aa48 <rshift+0x28>
 800aac0:	4623      	mov	r3, r4
 800aac2:	e7e1      	b.n	800aa88 <rshift+0x68>

0800aac4 <__hexdig_fun>:
 800aac4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aac8:	2b09      	cmp	r3, #9
 800aaca:	d802      	bhi.n	800aad2 <__hexdig_fun+0xe>
 800aacc:	3820      	subs	r0, #32
 800aace:	b2c0      	uxtb	r0, r0
 800aad0:	4770      	bx	lr
 800aad2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aad6:	2b05      	cmp	r3, #5
 800aad8:	d801      	bhi.n	800aade <__hexdig_fun+0x1a>
 800aada:	3847      	subs	r0, #71	; 0x47
 800aadc:	e7f7      	b.n	800aace <__hexdig_fun+0xa>
 800aade:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aae2:	2b05      	cmp	r3, #5
 800aae4:	d801      	bhi.n	800aaea <__hexdig_fun+0x26>
 800aae6:	3827      	subs	r0, #39	; 0x27
 800aae8:	e7f1      	b.n	800aace <__hexdig_fun+0xa>
 800aaea:	2000      	movs	r0, #0
 800aaec:	4770      	bx	lr
	...

0800aaf0 <__gethex>:
 800aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	ed2d 8b02 	vpush	{d8}
 800aaf8:	b089      	sub	sp, #36	; 0x24
 800aafa:	ee08 0a10 	vmov	s16, r0
 800aafe:	9304      	str	r3, [sp, #16]
 800ab00:	4bbc      	ldr	r3, [pc, #752]	; (800adf4 <__gethex+0x304>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	4618      	mov	r0, r3
 800ab08:	468b      	mov	fp, r1
 800ab0a:	4690      	mov	r8, r2
 800ab0c:	f7f5 fb8a 	bl	8000224 <strlen>
 800ab10:	9b01      	ldr	r3, [sp, #4]
 800ab12:	f8db 2000 	ldr.w	r2, [fp]
 800ab16:	4403      	add	r3, r0
 800ab18:	4682      	mov	sl, r0
 800ab1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ab1e:	9305      	str	r3, [sp, #20]
 800ab20:	1c93      	adds	r3, r2, #2
 800ab22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ab26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ab2a:	32fe      	adds	r2, #254	; 0xfe
 800ab2c:	18d1      	adds	r1, r2, r3
 800ab2e:	461f      	mov	r7, r3
 800ab30:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab34:	9100      	str	r1, [sp, #0]
 800ab36:	2830      	cmp	r0, #48	; 0x30
 800ab38:	d0f8      	beq.n	800ab2c <__gethex+0x3c>
 800ab3a:	f7ff ffc3 	bl	800aac4 <__hexdig_fun>
 800ab3e:	4604      	mov	r4, r0
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d13a      	bne.n	800abba <__gethex+0xca>
 800ab44:	9901      	ldr	r1, [sp, #4]
 800ab46:	4652      	mov	r2, sl
 800ab48:	4638      	mov	r0, r7
 800ab4a:	f001 fb04 	bl	800c156 <strncmp>
 800ab4e:	4605      	mov	r5, r0
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d168      	bne.n	800ac26 <__gethex+0x136>
 800ab54:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ab58:	eb07 060a 	add.w	r6, r7, sl
 800ab5c:	f7ff ffb2 	bl	800aac4 <__hexdig_fun>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d062      	beq.n	800ac2a <__gethex+0x13a>
 800ab64:	4633      	mov	r3, r6
 800ab66:	7818      	ldrb	r0, [r3, #0]
 800ab68:	2830      	cmp	r0, #48	; 0x30
 800ab6a:	461f      	mov	r7, r3
 800ab6c:	f103 0301 	add.w	r3, r3, #1
 800ab70:	d0f9      	beq.n	800ab66 <__gethex+0x76>
 800ab72:	f7ff ffa7 	bl	800aac4 <__hexdig_fun>
 800ab76:	2301      	movs	r3, #1
 800ab78:	fab0 f480 	clz	r4, r0
 800ab7c:	0964      	lsrs	r4, r4, #5
 800ab7e:	4635      	mov	r5, r6
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	463a      	mov	r2, r7
 800ab84:	4616      	mov	r6, r2
 800ab86:	3201      	adds	r2, #1
 800ab88:	7830      	ldrb	r0, [r6, #0]
 800ab8a:	f7ff ff9b 	bl	800aac4 <__hexdig_fun>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1f8      	bne.n	800ab84 <__gethex+0x94>
 800ab92:	9901      	ldr	r1, [sp, #4]
 800ab94:	4652      	mov	r2, sl
 800ab96:	4630      	mov	r0, r6
 800ab98:	f001 fadd 	bl	800c156 <strncmp>
 800ab9c:	b980      	cbnz	r0, 800abc0 <__gethex+0xd0>
 800ab9e:	b94d      	cbnz	r5, 800abb4 <__gethex+0xc4>
 800aba0:	eb06 050a 	add.w	r5, r6, sl
 800aba4:	462a      	mov	r2, r5
 800aba6:	4616      	mov	r6, r2
 800aba8:	3201      	adds	r2, #1
 800abaa:	7830      	ldrb	r0, [r6, #0]
 800abac:	f7ff ff8a 	bl	800aac4 <__hexdig_fun>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d1f8      	bne.n	800aba6 <__gethex+0xb6>
 800abb4:	1bad      	subs	r5, r5, r6
 800abb6:	00ad      	lsls	r5, r5, #2
 800abb8:	e004      	b.n	800abc4 <__gethex+0xd4>
 800abba:	2400      	movs	r4, #0
 800abbc:	4625      	mov	r5, r4
 800abbe:	e7e0      	b.n	800ab82 <__gethex+0x92>
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	d1f7      	bne.n	800abb4 <__gethex+0xc4>
 800abc4:	7833      	ldrb	r3, [r6, #0]
 800abc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800abca:	2b50      	cmp	r3, #80	; 0x50
 800abcc:	d13b      	bne.n	800ac46 <__gethex+0x156>
 800abce:	7873      	ldrb	r3, [r6, #1]
 800abd0:	2b2b      	cmp	r3, #43	; 0x2b
 800abd2:	d02c      	beq.n	800ac2e <__gethex+0x13e>
 800abd4:	2b2d      	cmp	r3, #45	; 0x2d
 800abd6:	d02e      	beq.n	800ac36 <__gethex+0x146>
 800abd8:	1c71      	adds	r1, r6, #1
 800abda:	f04f 0900 	mov.w	r9, #0
 800abde:	7808      	ldrb	r0, [r1, #0]
 800abe0:	f7ff ff70 	bl	800aac4 <__hexdig_fun>
 800abe4:	1e43      	subs	r3, r0, #1
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b18      	cmp	r3, #24
 800abea:	d82c      	bhi.n	800ac46 <__gethex+0x156>
 800abec:	f1a0 0210 	sub.w	r2, r0, #16
 800abf0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800abf4:	f7ff ff66 	bl	800aac4 <__hexdig_fun>
 800abf8:	1e43      	subs	r3, r0, #1
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b18      	cmp	r3, #24
 800abfe:	d91d      	bls.n	800ac3c <__gethex+0x14c>
 800ac00:	f1b9 0f00 	cmp.w	r9, #0
 800ac04:	d000      	beq.n	800ac08 <__gethex+0x118>
 800ac06:	4252      	negs	r2, r2
 800ac08:	4415      	add	r5, r2
 800ac0a:	f8cb 1000 	str.w	r1, [fp]
 800ac0e:	b1e4      	cbz	r4, 800ac4a <__gethex+0x15a>
 800ac10:	9b00      	ldr	r3, [sp, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bf14      	ite	ne
 800ac16:	2700      	movne	r7, #0
 800ac18:	2706      	moveq	r7, #6
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	b009      	add	sp, #36	; 0x24
 800ac1e:	ecbd 8b02 	vpop	{d8}
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	463e      	mov	r6, r7
 800ac28:	4625      	mov	r5, r4
 800ac2a:	2401      	movs	r4, #1
 800ac2c:	e7ca      	b.n	800abc4 <__gethex+0xd4>
 800ac2e:	f04f 0900 	mov.w	r9, #0
 800ac32:	1cb1      	adds	r1, r6, #2
 800ac34:	e7d3      	b.n	800abde <__gethex+0xee>
 800ac36:	f04f 0901 	mov.w	r9, #1
 800ac3a:	e7fa      	b.n	800ac32 <__gethex+0x142>
 800ac3c:	230a      	movs	r3, #10
 800ac3e:	fb03 0202 	mla	r2, r3, r2, r0
 800ac42:	3a10      	subs	r2, #16
 800ac44:	e7d4      	b.n	800abf0 <__gethex+0x100>
 800ac46:	4631      	mov	r1, r6
 800ac48:	e7df      	b.n	800ac0a <__gethex+0x11a>
 800ac4a:	1bf3      	subs	r3, r6, r7
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	4621      	mov	r1, r4
 800ac50:	2b07      	cmp	r3, #7
 800ac52:	dc0b      	bgt.n	800ac6c <__gethex+0x17c>
 800ac54:	ee18 0a10 	vmov	r0, s16
 800ac58:	f000 fb26 	bl	800b2a8 <_Balloc>
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	b940      	cbnz	r0, 800ac72 <__gethex+0x182>
 800ac60:	4b65      	ldr	r3, [pc, #404]	; (800adf8 <__gethex+0x308>)
 800ac62:	4602      	mov	r2, r0
 800ac64:	21de      	movs	r1, #222	; 0xde
 800ac66:	4865      	ldr	r0, [pc, #404]	; (800adfc <__gethex+0x30c>)
 800ac68:	f7fe fe4a 	bl	8009900 <__assert_func>
 800ac6c:	3101      	adds	r1, #1
 800ac6e:	105b      	asrs	r3, r3, #1
 800ac70:	e7ee      	b.n	800ac50 <__gethex+0x160>
 800ac72:	f100 0914 	add.w	r9, r0, #20
 800ac76:	f04f 0b00 	mov.w	fp, #0
 800ac7a:	f1ca 0301 	rsb	r3, sl, #1
 800ac7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac82:	f8cd b000 	str.w	fp, [sp]
 800ac86:	9306      	str	r3, [sp, #24]
 800ac88:	42b7      	cmp	r7, r6
 800ac8a:	d340      	bcc.n	800ad0e <__gethex+0x21e>
 800ac8c:	9802      	ldr	r0, [sp, #8]
 800ac8e:	9b00      	ldr	r3, [sp, #0]
 800ac90:	f840 3b04 	str.w	r3, [r0], #4
 800ac94:	eba0 0009 	sub.w	r0, r0, r9
 800ac98:	1080      	asrs	r0, r0, #2
 800ac9a:	0146      	lsls	r6, r0, #5
 800ac9c:	6120      	str	r0, [r4, #16]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fbf8 	bl	800b494 <__hi0bits>
 800aca4:	1a30      	subs	r0, r6, r0
 800aca6:	f8d8 6000 	ldr.w	r6, [r8]
 800acaa:	42b0      	cmp	r0, r6
 800acac:	dd63      	ble.n	800ad76 <__gethex+0x286>
 800acae:	1b87      	subs	r7, r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 ff92 	bl	800bbdc <__any_on>
 800acb8:	4682      	mov	sl, r0
 800acba:	b1a8      	cbz	r0, 800ace8 <__gethex+0x1f8>
 800acbc:	1e7b      	subs	r3, r7, #1
 800acbe:	1159      	asrs	r1, r3, #5
 800acc0:	f003 021f 	and.w	r2, r3, #31
 800acc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800acc8:	f04f 0a01 	mov.w	sl, #1
 800accc:	fa0a f202 	lsl.w	r2, sl, r2
 800acd0:	420a      	tst	r2, r1
 800acd2:	d009      	beq.n	800ace8 <__gethex+0x1f8>
 800acd4:	4553      	cmp	r3, sl
 800acd6:	dd05      	ble.n	800ace4 <__gethex+0x1f4>
 800acd8:	1eb9      	subs	r1, r7, #2
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 ff7e 	bl	800bbdc <__any_on>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d145      	bne.n	800ad70 <__gethex+0x280>
 800ace4:	f04f 0a02 	mov.w	sl, #2
 800ace8:	4639      	mov	r1, r7
 800acea:	4620      	mov	r0, r4
 800acec:	f7ff fe98 	bl	800aa20 <rshift>
 800acf0:	443d      	add	r5, r7
 800acf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800acf6:	42ab      	cmp	r3, r5
 800acf8:	da4c      	bge.n	800ad94 <__gethex+0x2a4>
 800acfa:	ee18 0a10 	vmov	r0, s16
 800acfe:	4621      	mov	r1, r4
 800ad00:	f000 fb12 	bl	800b328 <_Bfree>
 800ad04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad06:	2300      	movs	r3, #0
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	27a3      	movs	r7, #163	; 0xa3
 800ad0c:	e785      	b.n	800ac1a <__gethex+0x12a>
 800ad0e:	1e73      	subs	r3, r6, #1
 800ad10:	9a05      	ldr	r2, [sp, #20]
 800ad12:	9303      	str	r3, [sp, #12]
 800ad14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d019      	beq.n	800ad50 <__gethex+0x260>
 800ad1c:	f1bb 0f20 	cmp.w	fp, #32
 800ad20:	d107      	bne.n	800ad32 <__gethex+0x242>
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	9a00      	ldr	r2, [sp, #0]
 800ad26:	f843 2b04 	str.w	r2, [r3], #4
 800ad2a:	9302      	str	r3, [sp, #8]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	469b      	mov	fp, r3
 800ad32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ad36:	f7ff fec5 	bl	800aac4 <__hexdig_fun>
 800ad3a:	9b00      	ldr	r3, [sp, #0]
 800ad3c:	f000 000f 	and.w	r0, r0, #15
 800ad40:	fa00 f00b 	lsl.w	r0, r0, fp
 800ad44:	4303      	orrs	r3, r0
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	f10b 0b04 	add.w	fp, fp, #4
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	e00d      	b.n	800ad6c <__gethex+0x27c>
 800ad50:	9b03      	ldr	r3, [sp, #12]
 800ad52:	9a06      	ldr	r2, [sp, #24]
 800ad54:	4413      	add	r3, r2
 800ad56:	42bb      	cmp	r3, r7
 800ad58:	d3e0      	bcc.n	800ad1c <__gethex+0x22c>
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	9901      	ldr	r1, [sp, #4]
 800ad5e:	9307      	str	r3, [sp, #28]
 800ad60:	4652      	mov	r2, sl
 800ad62:	f001 f9f8 	bl	800c156 <strncmp>
 800ad66:	9b07      	ldr	r3, [sp, #28]
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	d1d7      	bne.n	800ad1c <__gethex+0x22c>
 800ad6c:	461e      	mov	r6, r3
 800ad6e:	e78b      	b.n	800ac88 <__gethex+0x198>
 800ad70:	f04f 0a03 	mov.w	sl, #3
 800ad74:	e7b8      	b.n	800ace8 <__gethex+0x1f8>
 800ad76:	da0a      	bge.n	800ad8e <__gethex+0x29e>
 800ad78:	1a37      	subs	r7, r6, r0
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	ee18 0a10 	vmov	r0, s16
 800ad80:	463a      	mov	r2, r7
 800ad82:	f000 fced 	bl	800b760 <__lshift>
 800ad86:	1bed      	subs	r5, r5, r7
 800ad88:	4604      	mov	r4, r0
 800ad8a:	f100 0914 	add.w	r9, r0, #20
 800ad8e:	f04f 0a00 	mov.w	sl, #0
 800ad92:	e7ae      	b.n	800acf2 <__gethex+0x202>
 800ad94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ad98:	42a8      	cmp	r0, r5
 800ad9a:	dd72      	ble.n	800ae82 <__gethex+0x392>
 800ad9c:	1b45      	subs	r5, r0, r5
 800ad9e:	42ae      	cmp	r6, r5
 800ada0:	dc36      	bgt.n	800ae10 <__gethex+0x320>
 800ada2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d02a      	beq.n	800ae00 <__gethex+0x310>
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d02c      	beq.n	800ae08 <__gethex+0x318>
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d115      	bne.n	800adde <__gethex+0x2ee>
 800adb2:	42ae      	cmp	r6, r5
 800adb4:	d113      	bne.n	800adde <__gethex+0x2ee>
 800adb6:	2e01      	cmp	r6, #1
 800adb8:	d10b      	bne.n	800add2 <__gethex+0x2e2>
 800adba:	9a04      	ldr	r2, [sp, #16]
 800adbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	2301      	movs	r3, #1
 800adc4:	6123      	str	r3, [r4, #16]
 800adc6:	f8c9 3000 	str.w	r3, [r9]
 800adca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adcc:	2762      	movs	r7, #98	; 0x62
 800adce:	601c      	str	r4, [r3, #0]
 800add0:	e723      	b.n	800ac1a <__gethex+0x12a>
 800add2:	1e71      	subs	r1, r6, #1
 800add4:	4620      	mov	r0, r4
 800add6:	f000 ff01 	bl	800bbdc <__any_on>
 800adda:	2800      	cmp	r0, #0
 800addc:	d1ed      	bne.n	800adba <__gethex+0x2ca>
 800adde:	ee18 0a10 	vmov	r0, s16
 800ade2:	4621      	mov	r1, r4
 800ade4:	f000 faa0 	bl	800b328 <_Bfree>
 800ade8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adea:	2300      	movs	r3, #0
 800adec:	6013      	str	r3, [r2, #0]
 800adee:	2750      	movs	r7, #80	; 0x50
 800adf0:	e713      	b.n	800ac1a <__gethex+0x12a>
 800adf2:	bf00      	nop
 800adf4:	0800cdb8 	.word	0x0800cdb8
 800adf8:	0800ccd9 	.word	0x0800ccd9
 800adfc:	0800cd4c 	.word	0x0800cd4c
 800ae00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1eb      	bne.n	800adde <__gethex+0x2ee>
 800ae06:	e7d8      	b.n	800adba <__gethex+0x2ca>
 800ae08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1d5      	bne.n	800adba <__gethex+0x2ca>
 800ae0e:	e7e6      	b.n	800adde <__gethex+0x2ee>
 800ae10:	1e6f      	subs	r7, r5, #1
 800ae12:	f1ba 0f00 	cmp.w	sl, #0
 800ae16:	d131      	bne.n	800ae7c <__gethex+0x38c>
 800ae18:	b127      	cbz	r7, 800ae24 <__gethex+0x334>
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f000 fedd 	bl	800bbdc <__any_on>
 800ae22:	4682      	mov	sl, r0
 800ae24:	117b      	asrs	r3, r7, #5
 800ae26:	2101      	movs	r1, #1
 800ae28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ae2c:	f007 071f 	and.w	r7, r7, #31
 800ae30:	fa01 f707 	lsl.w	r7, r1, r7
 800ae34:	421f      	tst	r7, r3
 800ae36:	4629      	mov	r1, r5
 800ae38:	4620      	mov	r0, r4
 800ae3a:	bf18      	it	ne
 800ae3c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ae40:	1b76      	subs	r6, r6, r5
 800ae42:	f7ff fded 	bl	800aa20 <rshift>
 800ae46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ae4a:	2702      	movs	r7, #2
 800ae4c:	f1ba 0f00 	cmp.w	sl, #0
 800ae50:	d048      	beq.n	800aee4 <__gethex+0x3f4>
 800ae52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d015      	beq.n	800ae86 <__gethex+0x396>
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d017      	beq.n	800ae8e <__gethex+0x39e>
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d109      	bne.n	800ae76 <__gethex+0x386>
 800ae62:	f01a 0f02 	tst.w	sl, #2
 800ae66:	d006      	beq.n	800ae76 <__gethex+0x386>
 800ae68:	f8d9 0000 	ldr.w	r0, [r9]
 800ae6c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ae70:	f01a 0f01 	tst.w	sl, #1
 800ae74:	d10e      	bne.n	800ae94 <__gethex+0x3a4>
 800ae76:	f047 0710 	orr.w	r7, r7, #16
 800ae7a:	e033      	b.n	800aee4 <__gethex+0x3f4>
 800ae7c:	f04f 0a01 	mov.w	sl, #1
 800ae80:	e7d0      	b.n	800ae24 <__gethex+0x334>
 800ae82:	2701      	movs	r7, #1
 800ae84:	e7e2      	b.n	800ae4c <__gethex+0x35c>
 800ae86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae88:	f1c3 0301 	rsb	r3, r3, #1
 800ae8c:	9315      	str	r3, [sp, #84]	; 0x54
 800ae8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d0f0      	beq.n	800ae76 <__gethex+0x386>
 800ae94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ae98:	f104 0314 	add.w	r3, r4, #20
 800ae9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aea0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aea4:	f04f 0c00 	mov.w	ip, #0
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aeb2:	d01c      	beq.n	800aeee <__gethex+0x3fe>
 800aeb4:	3201      	adds	r2, #1
 800aeb6:	6002      	str	r2, [r0, #0]
 800aeb8:	2f02      	cmp	r7, #2
 800aeba:	f104 0314 	add.w	r3, r4, #20
 800aebe:	d13f      	bne.n	800af40 <__gethex+0x450>
 800aec0:	f8d8 2000 	ldr.w	r2, [r8]
 800aec4:	3a01      	subs	r2, #1
 800aec6:	42b2      	cmp	r2, r6
 800aec8:	d10a      	bne.n	800aee0 <__gethex+0x3f0>
 800aeca:	1171      	asrs	r1, r6, #5
 800aecc:	2201      	movs	r2, #1
 800aece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aed2:	f006 061f 	and.w	r6, r6, #31
 800aed6:	fa02 f606 	lsl.w	r6, r2, r6
 800aeda:	421e      	tst	r6, r3
 800aedc:	bf18      	it	ne
 800aede:	4617      	movne	r7, r2
 800aee0:	f047 0720 	orr.w	r7, r7, #32
 800aee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aee6:	601c      	str	r4, [r3, #0]
 800aee8:	9b04      	ldr	r3, [sp, #16]
 800aeea:	601d      	str	r5, [r3, #0]
 800aeec:	e695      	b.n	800ac1a <__gethex+0x12a>
 800aeee:	4299      	cmp	r1, r3
 800aef0:	f843 cc04 	str.w	ip, [r3, #-4]
 800aef4:	d8d8      	bhi.n	800aea8 <__gethex+0x3b8>
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	459b      	cmp	fp, r3
 800aefa:	db19      	blt.n	800af30 <__gethex+0x440>
 800aefc:	6861      	ldr	r1, [r4, #4]
 800aefe:	ee18 0a10 	vmov	r0, s16
 800af02:	3101      	adds	r1, #1
 800af04:	f000 f9d0 	bl	800b2a8 <_Balloc>
 800af08:	4681      	mov	r9, r0
 800af0a:	b918      	cbnz	r0, 800af14 <__gethex+0x424>
 800af0c:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <__gethex+0x488>)
 800af0e:	4602      	mov	r2, r0
 800af10:	2184      	movs	r1, #132	; 0x84
 800af12:	e6a8      	b.n	800ac66 <__gethex+0x176>
 800af14:	6922      	ldr	r2, [r4, #16]
 800af16:	3202      	adds	r2, #2
 800af18:	f104 010c 	add.w	r1, r4, #12
 800af1c:	0092      	lsls	r2, r2, #2
 800af1e:	300c      	adds	r0, #12
 800af20:	f000 f9b4 	bl	800b28c <memcpy>
 800af24:	4621      	mov	r1, r4
 800af26:	ee18 0a10 	vmov	r0, s16
 800af2a:	f000 f9fd 	bl	800b328 <_Bfree>
 800af2e:	464c      	mov	r4, r9
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800af38:	6122      	str	r2, [r4, #16]
 800af3a:	2201      	movs	r2, #1
 800af3c:	615a      	str	r2, [r3, #20]
 800af3e:	e7bb      	b.n	800aeb8 <__gethex+0x3c8>
 800af40:	6922      	ldr	r2, [r4, #16]
 800af42:	455a      	cmp	r2, fp
 800af44:	dd0b      	ble.n	800af5e <__gethex+0x46e>
 800af46:	2101      	movs	r1, #1
 800af48:	4620      	mov	r0, r4
 800af4a:	f7ff fd69 	bl	800aa20 <rshift>
 800af4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af52:	3501      	adds	r5, #1
 800af54:	42ab      	cmp	r3, r5
 800af56:	f6ff aed0 	blt.w	800acfa <__gethex+0x20a>
 800af5a:	2701      	movs	r7, #1
 800af5c:	e7c0      	b.n	800aee0 <__gethex+0x3f0>
 800af5e:	f016 061f 	ands.w	r6, r6, #31
 800af62:	d0fa      	beq.n	800af5a <__gethex+0x46a>
 800af64:	449a      	add	sl, r3
 800af66:	f1c6 0620 	rsb	r6, r6, #32
 800af6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800af6e:	f000 fa91 	bl	800b494 <__hi0bits>
 800af72:	42b0      	cmp	r0, r6
 800af74:	dbe7      	blt.n	800af46 <__gethex+0x456>
 800af76:	e7f0      	b.n	800af5a <__gethex+0x46a>
 800af78:	0800ccd9 	.word	0x0800ccd9

0800af7c <L_shift>:
 800af7c:	f1c2 0208 	rsb	r2, r2, #8
 800af80:	0092      	lsls	r2, r2, #2
 800af82:	b570      	push	{r4, r5, r6, lr}
 800af84:	f1c2 0620 	rsb	r6, r2, #32
 800af88:	6843      	ldr	r3, [r0, #4]
 800af8a:	6804      	ldr	r4, [r0, #0]
 800af8c:	fa03 f506 	lsl.w	r5, r3, r6
 800af90:	432c      	orrs	r4, r5
 800af92:	40d3      	lsrs	r3, r2
 800af94:	6004      	str	r4, [r0, #0]
 800af96:	f840 3f04 	str.w	r3, [r0, #4]!
 800af9a:	4288      	cmp	r0, r1
 800af9c:	d3f4      	bcc.n	800af88 <L_shift+0xc>
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <__match>:
 800afa0:	b530      	push	{r4, r5, lr}
 800afa2:	6803      	ldr	r3, [r0, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afaa:	b914      	cbnz	r4, 800afb2 <__match+0x12>
 800afac:	6003      	str	r3, [r0, #0]
 800afae:	2001      	movs	r0, #1
 800afb0:	bd30      	pop	{r4, r5, pc}
 800afb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800afba:	2d19      	cmp	r5, #25
 800afbc:	bf98      	it	ls
 800afbe:	3220      	addls	r2, #32
 800afc0:	42a2      	cmp	r2, r4
 800afc2:	d0f0      	beq.n	800afa6 <__match+0x6>
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7f3      	b.n	800afb0 <__match+0x10>

0800afc8 <__hexnan>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	680b      	ldr	r3, [r1, #0]
 800afce:	6801      	ldr	r1, [r0, #0]
 800afd0:	115e      	asrs	r6, r3, #5
 800afd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800afd6:	f013 031f 	ands.w	r3, r3, #31
 800afda:	b087      	sub	sp, #28
 800afdc:	bf18      	it	ne
 800afde:	3604      	addne	r6, #4
 800afe0:	2500      	movs	r5, #0
 800afe2:	1f37      	subs	r7, r6, #4
 800afe4:	4682      	mov	sl, r0
 800afe6:	4690      	mov	r8, r2
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	f846 5c04 	str.w	r5, [r6, #-4]
 800afee:	46b9      	mov	r9, r7
 800aff0:	463c      	mov	r4, r7
 800aff2:	9502      	str	r5, [sp, #8]
 800aff4:	46ab      	mov	fp, r5
 800aff6:	784a      	ldrb	r2, [r1, #1]
 800aff8:	1c4b      	adds	r3, r1, #1
 800affa:	9303      	str	r3, [sp, #12]
 800affc:	b342      	cbz	r2, 800b050 <__hexnan+0x88>
 800affe:	4610      	mov	r0, r2
 800b000:	9105      	str	r1, [sp, #20]
 800b002:	9204      	str	r2, [sp, #16]
 800b004:	f7ff fd5e 	bl	800aac4 <__hexdig_fun>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d14f      	bne.n	800b0ac <__hexnan+0xe4>
 800b00c:	9a04      	ldr	r2, [sp, #16]
 800b00e:	9905      	ldr	r1, [sp, #20]
 800b010:	2a20      	cmp	r2, #32
 800b012:	d818      	bhi.n	800b046 <__hexnan+0x7e>
 800b014:	9b02      	ldr	r3, [sp, #8]
 800b016:	459b      	cmp	fp, r3
 800b018:	dd13      	ble.n	800b042 <__hexnan+0x7a>
 800b01a:	454c      	cmp	r4, r9
 800b01c:	d206      	bcs.n	800b02c <__hexnan+0x64>
 800b01e:	2d07      	cmp	r5, #7
 800b020:	dc04      	bgt.n	800b02c <__hexnan+0x64>
 800b022:	462a      	mov	r2, r5
 800b024:	4649      	mov	r1, r9
 800b026:	4620      	mov	r0, r4
 800b028:	f7ff ffa8 	bl	800af7c <L_shift>
 800b02c:	4544      	cmp	r4, r8
 800b02e:	d950      	bls.n	800b0d2 <__hexnan+0x10a>
 800b030:	2300      	movs	r3, #0
 800b032:	f1a4 0904 	sub.w	r9, r4, #4
 800b036:	f844 3c04 	str.w	r3, [r4, #-4]
 800b03a:	f8cd b008 	str.w	fp, [sp, #8]
 800b03e:	464c      	mov	r4, r9
 800b040:	461d      	mov	r5, r3
 800b042:	9903      	ldr	r1, [sp, #12]
 800b044:	e7d7      	b.n	800aff6 <__hexnan+0x2e>
 800b046:	2a29      	cmp	r2, #41	; 0x29
 800b048:	d156      	bne.n	800b0f8 <__hexnan+0x130>
 800b04a:	3102      	adds	r1, #2
 800b04c:	f8ca 1000 	str.w	r1, [sl]
 800b050:	f1bb 0f00 	cmp.w	fp, #0
 800b054:	d050      	beq.n	800b0f8 <__hexnan+0x130>
 800b056:	454c      	cmp	r4, r9
 800b058:	d206      	bcs.n	800b068 <__hexnan+0xa0>
 800b05a:	2d07      	cmp	r5, #7
 800b05c:	dc04      	bgt.n	800b068 <__hexnan+0xa0>
 800b05e:	462a      	mov	r2, r5
 800b060:	4649      	mov	r1, r9
 800b062:	4620      	mov	r0, r4
 800b064:	f7ff ff8a 	bl	800af7c <L_shift>
 800b068:	4544      	cmp	r4, r8
 800b06a:	d934      	bls.n	800b0d6 <__hexnan+0x10e>
 800b06c:	f1a8 0204 	sub.w	r2, r8, #4
 800b070:	4623      	mov	r3, r4
 800b072:	f853 1b04 	ldr.w	r1, [r3], #4
 800b076:	f842 1f04 	str.w	r1, [r2, #4]!
 800b07a:	429f      	cmp	r7, r3
 800b07c:	d2f9      	bcs.n	800b072 <__hexnan+0xaa>
 800b07e:	1b3b      	subs	r3, r7, r4
 800b080:	f023 0303 	bic.w	r3, r3, #3
 800b084:	3304      	adds	r3, #4
 800b086:	3401      	adds	r4, #1
 800b088:	3e03      	subs	r6, #3
 800b08a:	42b4      	cmp	r4, r6
 800b08c:	bf88      	it	hi
 800b08e:	2304      	movhi	r3, #4
 800b090:	4443      	add	r3, r8
 800b092:	2200      	movs	r2, #0
 800b094:	f843 2b04 	str.w	r2, [r3], #4
 800b098:	429f      	cmp	r7, r3
 800b09a:	d2fb      	bcs.n	800b094 <__hexnan+0xcc>
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	b91b      	cbnz	r3, 800b0a8 <__hexnan+0xe0>
 800b0a0:	4547      	cmp	r7, r8
 800b0a2:	d127      	bne.n	800b0f4 <__hexnan+0x12c>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	2005      	movs	r0, #5
 800b0aa:	e026      	b.n	800b0fa <__hexnan+0x132>
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	2d08      	cmp	r5, #8
 800b0b0:	f10b 0b01 	add.w	fp, fp, #1
 800b0b4:	dd06      	ble.n	800b0c4 <__hexnan+0xfc>
 800b0b6:	4544      	cmp	r4, r8
 800b0b8:	d9c3      	bls.n	800b042 <__hexnan+0x7a>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0c0:	2501      	movs	r5, #1
 800b0c2:	3c04      	subs	r4, #4
 800b0c4:	6822      	ldr	r2, [r4, #0]
 800b0c6:	f000 000f 	and.w	r0, r0, #15
 800b0ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b0ce:	6022      	str	r2, [r4, #0]
 800b0d0:	e7b7      	b.n	800b042 <__hexnan+0x7a>
 800b0d2:	2508      	movs	r5, #8
 800b0d4:	e7b5      	b.n	800b042 <__hexnan+0x7a>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d0df      	beq.n	800b09c <__hexnan+0xd4>
 800b0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e0:	f1c3 0320 	rsb	r3, r3, #32
 800b0e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b0ec:	401a      	ands	r2, r3
 800b0ee:	f846 2c04 	str.w	r2, [r6, #-4]
 800b0f2:	e7d3      	b.n	800b09c <__hexnan+0xd4>
 800b0f4:	3f04      	subs	r7, #4
 800b0f6:	e7d1      	b.n	800b09c <__hexnan+0xd4>
 800b0f8:	2004      	movs	r0, #4
 800b0fa:	b007      	add	sp, #28
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b100 <_getc_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	460c      	mov	r4, r1
 800b104:	4605      	mov	r5, r0
 800b106:	b118      	cbz	r0, 800b110 <_getc_r+0x10>
 800b108:	6983      	ldr	r3, [r0, #24]
 800b10a:	b90b      	cbnz	r3, 800b110 <_getc_r+0x10>
 800b10c:	f7ff fbbc 	bl	800a888 <__sinit>
 800b110:	4b18      	ldr	r3, [pc, #96]	; (800b174 <_getc_r+0x74>)
 800b112:	429c      	cmp	r4, r3
 800b114:	d11e      	bne.n	800b154 <_getc_r+0x54>
 800b116:	686c      	ldr	r4, [r5, #4]
 800b118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b11a:	07d8      	lsls	r0, r3, #31
 800b11c:	d405      	bmi.n	800b12a <_getc_r+0x2a>
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	0599      	lsls	r1, r3, #22
 800b122:	d402      	bmi.n	800b12a <_getc_r+0x2a>
 800b124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b126:	f000 f830 	bl	800b18a <__retarget_lock_acquire_recursive>
 800b12a:	6863      	ldr	r3, [r4, #4]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	6063      	str	r3, [r4, #4]
 800b132:	da19      	bge.n	800b168 <_getc_r+0x68>
 800b134:	4628      	mov	r0, r5
 800b136:	4621      	mov	r1, r4
 800b138:	f000 ff84 	bl	800c044 <__srget_r>
 800b13c:	4605      	mov	r5, r0
 800b13e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b140:	07da      	lsls	r2, r3, #31
 800b142:	d405      	bmi.n	800b150 <_getc_r+0x50>
 800b144:	89a3      	ldrh	r3, [r4, #12]
 800b146:	059b      	lsls	r3, r3, #22
 800b148:	d402      	bmi.n	800b150 <_getc_r+0x50>
 800b14a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b14c:	f000 f81e 	bl	800b18c <__retarget_lock_release_recursive>
 800b150:	4628      	mov	r0, r5
 800b152:	bd38      	pop	{r3, r4, r5, pc}
 800b154:	4b08      	ldr	r3, [pc, #32]	; (800b178 <_getc_r+0x78>)
 800b156:	429c      	cmp	r4, r3
 800b158:	d101      	bne.n	800b15e <_getc_r+0x5e>
 800b15a:	68ac      	ldr	r4, [r5, #8]
 800b15c:	e7dc      	b.n	800b118 <_getc_r+0x18>
 800b15e:	4b07      	ldr	r3, [pc, #28]	; (800b17c <_getc_r+0x7c>)
 800b160:	429c      	cmp	r4, r3
 800b162:	bf08      	it	eq
 800b164:	68ec      	ldreq	r4, [r5, #12]
 800b166:	e7d7      	b.n	800b118 <_getc_r+0x18>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	6022      	str	r2, [r4, #0]
 800b16e:	781d      	ldrb	r5, [r3, #0]
 800b170:	e7e5      	b.n	800b13e <_getc_r+0x3e>
 800b172:	bf00      	nop
 800b174:	0800cd0c 	.word	0x0800cd0c
 800b178:	0800cd2c 	.word	0x0800cd2c
 800b17c:	0800ccec 	.word	0x0800ccec

0800b180 <_localeconv_r>:
 800b180:	4800      	ldr	r0, [pc, #0]	; (800b184 <_localeconv_r+0x4>)
 800b182:	4770      	bx	lr
 800b184:	20000164 	.word	0x20000164

0800b188 <__retarget_lock_init_recursive>:
 800b188:	4770      	bx	lr

0800b18a <__retarget_lock_acquire_recursive>:
 800b18a:	4770      	bx	lr

0800b18c <__retarget_lock_release_recursive>:
 800b18c:	4770      	bx	lr

0800b18e <__swhatbuf_r>:
 800b18e:	b570      	push	{r4, r5, r6, lr}
 800b190:	460e      	mov	r6, r1
 800b192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b196:	2900      	cmp	r1, #0
 800b198:	b096      	sub	sp, #88	; 0x58
 800b19a:	4614      	mov	r4, r2
 800b19c:	461d      	mov	r5, r3
 800b19e:	da07      	bge.n	800b1b0 <__swhatbuf_r+0x22>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	89b3      	ldrh	r3, [r6, #12]
 800b1a6:	061a      	lsls	r2, r3, #24
 800b1a8:	d410      	bmi.n	800b1cc <__swhatbuf_r+0x3e>
 800b1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1ae:	e00e      	b.n	800b1ce <__swhatbuf_r+0x40>
 800b1b0:	466a      	mov	r2, sp
 800b1b2:	f001 f819 	bl	800c1e8 <_fstat_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	dbf2      	blt.n	800b1a0 <__swhatbuf_r+0x12>
 800b1ba:	9a01      	ldr	r2, [sp, #4]
 800b1bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b1c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b1c4:	425a      	negs	r2, r3
 800b1c6:	415a      	adcs	r2, r3
 800b1c8:	602a      	str	r2, [r5, #0]
 800b1ca:	e7ee      	b.n	800b1aa <__swhatbuf_r+0x1c>
 800b1cc:	2340      	movs	r3, #64	; 0x40
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	b016      	add	sp, #88	; 0x58
 800b1d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1d8 <__smakebuf_r>:
 800b1d8:	898b      	ldrh	r3, [r1, #12]
 800b1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1dc:	079d      	lsls	r5, r3, #30
 800b1de:	4606      	mov	r6, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	d507      	bpl.n	800b1f4 <__smakebuf_r+0x1c>
 800b1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1e8:	6023      	str	r3, [r4, #0]
 800b1ea:	6123      	str	r3, [r4, #16]
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	6163      	str	r3, [r4, #20]
 800b1f0:	b002      	add	sp, #8
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	ab01      	add	r3, sp, #4
 800b1f6:	466a      	mov	r2, sp
 800b1f8:	f7ff ffc9 	bl	800b18e <__swhatbuf_r>
 800b1fc:	9900      	ldr	r1, [sp, #0]
 800b1fe:	4605      	mov	r5, r0
 800b200:	4630      	mov	r0, r6
 800b202:	f000 fd6b 	bl	800bcdc <_malloc_r>
 800b206:	b948      	cbnz	r0, 800b21c <__smakebuf_r+0x44>
 800b208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20c:	059a      	lsls	r2, r3, #22
 800b20e:	d4ef      	bmi.n	800b1f0 <__smakebuf_r+0x18>
 800b210:	f023 0303 	bic.w	r3, r3, #3
 800b214:	f043 0302 	orr.w	r3, r3, #2
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	e7e3      	b.n	800b1e4 <__smakebuf_r+0xc>
 800b21c:	4b0d      	ldr	r3, [pc, #52]	; (800b254 <__smakebuf_r+0x7c>)
 800b21e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b220:	89a3      	ldrh	r3, [r4, #12]
 800b222:	6020      	str	r0, [r4, #0]
 800b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	9b00      	ldr	r3, [sp, #0]
 800b22c:	6163      	str	r3, [r4, #20]
 800b22e:	9b01      	ldr	r3, [sp, #4]
 800b230:	6120      	str	r0, [r4, #16]
 800b232:	b15b      	cbz	r3, 800b24c <__smakebuf_r+0x74>
 800b234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b238:	4630      	mov	r0, r6
 800b23a:	f000 ffe7 	bl	800c20c <_isatty_r>
 800b23e:	b128      	cbz	r0, 800b24c <__smakebuf_r+0x74>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	f023 0303 	bic.w	r3, r3, #3
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	81a3      	strh	r3, [r4, #12]
 800b24c:	89a0      	ldrh	r0, [r4, #12]
 800b24e:	4305      	orrs	r5, r0
 800b250:	81a5      	strh	r5, [r4, #12]
 800b252:	e7cd      	b.n	800b1f0 <__smakebuf_r+0x18>
 800b254:	0800a821 	.word	0x0800a821

0800b258 <malloc>:
 800b258:	4b02      	ldr	r3, [pc, #8]	; (800b264 <malloc+0xc>)
 800b25a:	4601      	mov	r1, r0
 800b25c:	6818      	ldr	r0, [r3, #0]
 800b25e:	f000 bd3d 	b.w	800bcdc <_malloc_r>
 800b262:	bf00      	nop
 800b264:	2000000c 	.word	0x2000000c

0800b268 <__ascii_mbtowc>:
 800b268:	b082      	sub	sp, #8
 800b26a:	b901      	cbnz	r1, 800b26e <__ascii_mbtowc+0x6>
 800b26c:	a901      	add	r1, sp, #4
 800b26e:	b142      	cbz	r2, 800b282 <__ascii_mbtowc+0x1a>
 800b270:	b14b      	cbz	r3, 800b286 <__ascii_mbtowc+0x1e>
 800b272:	7813      	ldrb	r3, [r2, #0]
 800b274:	600b      	str	r3, [r1, #0]
 800b276:	7812      	ldrb	r2, [r2, #0]
 800b278:	1e10      	subs	r0, r2, #0
 800b27a:	bf18      	it	ne
 800b27c:	2001      	movne	r0, #1
 800b27e:	b002      	add	sp, #8
 800b280:	4770      	bx	lr
 800b282:	4610      	mov	r0, r2
 800b284:	e7fb      	b.n	800b27e <__ascii_mbtowc+0x16>
 800b286:	f06f 0001 	mvn.w	r0, #1
 800b28a:	e7f8      	b.n	800b27e <__ascii_mbtowc+0x16>

0800b28c <memcpy>:
 800b28c:	440a      	add	r2, r1
 800b28e:	4291      	cmp	r1, r2
 800b290:	f100 33ff 	add.w	r3, r0, #4294967295
 800b294:	d100      	bne.n	800b298 <memcpy+0xc>
 800b296:	4770      	bx	lr
 800b298:	b510      	push	{r4, lr}
 800b29a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b29e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2a2:	4291      	cmp	r1, r2
 800b2a4:	d1f9      	bne.n	800b29a <memcpy+0xe>
 800b2a6:	bd10      	pop	{r4, pc}

0800b2a8 <_Balloc>:
 800b2a8:	b570      	push	{r4, r5, r6, lr}
 800b2aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	b976      	cbnz	r6, 800b2d0 <_Balloc+0x28>
 800b2b2:	2010      	movs	r0, #16
 800b2b4:	f7ff ffd0 	bl	800b258 <malloc>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	6260      	str	r0, [r4, #36]	; 0x24
 800b2bc:	b920      	cbnz	r0, 800b2c8 <_Balloc+0x20>
 800b2be:	4b18      	ldr	r3, [pc, #96]	; (800b320 <_Balloc+0x78>)
 800b2c0:	4818      	ldr	r0, [pc, #96]	; (800b324 <_Balloc+0x7c>)
 800b2c2:	2166      	movs	r1, #102	; 0x66
 800b2c4:	f7fe fb1c 	bl	8009900 <__assert_func>
 800b2c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2cc:	6006      	str	r6, [r0, #0]
 800b2ce:	60c6      	str	r6, [r0, #12]
 800b2d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2d2:	68f3      	ldr	r3, [r6, #12]
 800b2d4:	b183      	cbz	r3, 800b2f8 <_Balloc+0x50>
 800b2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2de:	b9b8      	cbnz	r0, 800b310 <_Balloc+0x68>
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2e6:	1d72      	adds	r2, r6, #5
 800b2e8:	0092      	lsls	r2, r2, #2
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fc97 	bl	800bc1e <_calloc_r>
 800b2f0:	b160      	cbz	r0, 800b30c <_Balloc+0x64>
 800b2f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2f6:	e00e      	b.n	800b316 <_Balloc+0x6e>
 800b2f8:	2221      	movs	r2, #33	; 0x21
 800b2fa:	2104      	movs	r1, #4
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f000 fc8e 	bl	800bc1e <_calloc_r>
 800b302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b304:	60f0      	str	r0, [r6, #12]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1e4      	bne.n	800b2d6 <_Balloc+0x2e>
 800b30c:	2000      	movs	r0, #0
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	6802      	ldr	r2, [r0, #0]
 800b312:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b316:	2300      	movs	r3, #0
 800b318:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b31c:	e7f7      	b.n	800b30e <_Balloc+0x66>
 800b31e:	bf00      	nop
 800b320:	0800cab8 	.word	0x0800cab8
 800b324:	0800cdcc 	.word	0x0800cdcc

0800b328 <_Bfree>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b32c:	4605      	mov	r5, r0
 800b32e:	460c      	mov	r4, r1
 800b330:	b976      	cbnz	r6, 800b350 <_Bfree+0x28>
 800b332:	2010      	movs	r0, #16
 800b334:	f7ff ff90 	bl	800b258 <malloc>
 800b338:	4602      	mov	r2, r0
 800b33a:	6268      	str	r0, [r5, #36]	; 0x24
 800b33c:	b920      	cbnz	r0, 800b348 <_Bfree+0x20>
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <_Bfree+0x3c>)
 800b340:	4809      	ldr	r0, [pc, #36]	; (800b368 <_Bfree+0x40>)
 800b342:	218a      	movs	r1, #138	; 0x8a
 800b344:	f7fe fadc 	bl	8009900 <__assert_func>
 800b348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b34c:	6006      	str	r6, [r0, #0]
 800b34e:	60c6      	str	r6, [r0, #12]
 800b350:	b13c      	cbz	r4, 800b362 <_Bfree+0x3a>
 800b352:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b354:	6862      	ldr	r2, [r4, #4]
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b35c:	6021      	str	r1, [r4, #0]
 800b35e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b362:	bd70      	pop	{r4, r5, r6, pc}
 800b364:	0800cab8 	.word	0x0800cab8
 800b368:	0800cdcc 	.word	0x0800cdcc

0800b36c <__multadd>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	690e      	ldr	r6, [r1, #16]
 800b372:	4607      	mov	r7, r0
 800b374:	4698      	mov	r8, r3
 800b376:	460c      	mov	r4, r1
 800b378:	f101 0014 	add.w	r0, r1, #20
 800b37c:	2300      	movs	r3, #0
 800b37e:	6805      	ldr	r5, [r0, #0]
 800b380:	b2a9      	uxth	r1, r5
 800b382:	fb02 8101 	mla	r1, r2, r1, r8
 800b386:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b38a:	0c2d      	lsrs	r5, r5, #16
 800b38c:	fb02 c505 	mla	r5, r2, r5, ip
 800b390:	b289      	uxth	r1, r1
 800b392:	3301      	adds	r3, #1
 800b394:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b398:	429e      	cmp	r6, r3
 800b39a:	f840 1b04 	str.w	r1, [r0], #4
 800b39e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b3a2:	dcec      	bgt.n	800b37e <__multadd+0x12>
 800b3a4:	f1b8 0f00 	cmp.w	r8, #0
 800b3a8:	d022      	beq.n	800b3f0 <__multadd+0x84>
 800b3aa:	68a3      	ldr	r3, [r4, #8]
 800b3ac:	42b3      	cmp	r3, r6
 800b3ae:	dc19      	bgt.n	800b3e4 <__multadd+0x78>
 800b3b0:	6861      	ldr	r1, [r4, #4]
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	3101      	adds	r1, #1
 800b3b6:	f7ff ff77 	bl	800b2a8 <_Balloc>
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	b928      	cbnz	r0, 800b3ca <__multadd+0x5e>
 800b3be:	4602      	mov	r2, r0
 800b3c0:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <__multadd+0x8c>)
 800b3c2:	480e      	ldr	r0, [pc, #56]	; (800b3fc <__multadd+0x90>)
 800b3c4:	21b5      	movs	r1, #181	; 0xb5
 800b3c6:	f7fe fa9b 	bl	8009900 <__assert_func>
 800b3ca:	6922      	ldr	r2, [r4, #16]
 800b3cc:	3202      	adds	r2, #2
 800b3ce:	f104 010c 	add.w	r1, r4, #12
 800b3d2:	0092      	lsls	r2, r2, #2
 800b3d4:	300c      	adds	r0, #12
 800b3d6:	f7ff ff59 	bl	800b28c <memcpy>
 800b3da:	4621      	mov	r1, r4
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f7ff ffa3 	bl	800b328 <_Bfree>
 800b3e2:	462c      	mov	r4, r5
 800b3e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b3e8:	3601      	adds	r6, #1
 800b3ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800b3ee:	6126      	str	r6, [r4, #16]
 800b3f0:	4620      	mov	r0, r4
 800b3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f6:	bf00      	nop
 800b3f8:	0800ccd9 	.word	0x0800ccd9
 800b3fc:	0800cdcc 	.word	0x0800cdcc

0800b400 <__s2b>:
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	4615      	mov	r5, r2
 800b408:	461f      	mov	r7, r3
 800b40a:	2209      	movs	r2, #9
 800b40c:	3308      	adds	r3, #8
 800b40e:	4606      	mov	r6, r0
 800b410:	fb93 f3f2 	sdiv	r3, r3, r2
 800b414:	2100      	movs	r1, #0
 800b416:	2201      	movs	r2, #1
 800b418:	429a      	cmp	r2, r3
 800b41a:	db09      	blt.n	800b430 <__s2b+0x30>
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff ff43 	bl	800b2a8 <_Balloc>
 800b422:	b940      	cbnz	r0, 800b436 <__s2b+0x36>
 800b424:	4602      	mov	r2, r0
 800b426:	4b19      	ldr	r3, [pc, #100]	; (800b48c <__s2b+0x8c>)
 800b428:	4819      	ldr	r0, [pc, #100]	; (800b490 <__s2b+0x90>)
 800b42a:	21ce      	movs	r1, #206	; 0xce
 800b42c:	f7fe fa68 	bl	8009900 <__assert_func>
 800b430:	0052      	lsls	r2, r2, #1
 800b432:	3101      	adds	r1, #1
 800b434:	e7f0      	b.n	800b418 <__s2b+0x18>
 800b436:	9b08      	ldr	r3, [sp, #32]
 800b438:	6143      	str	r3, [r0, #20]
 800b43a:	2d09      	cmp	r5, #9
 800b43c:	f04f 0301 	mov.w	r3, #1
 800b440:	6103      	str	r3, [r0, #16]
 800b442:	dd16      	ble.n	800b472 <__s2b+0x72>
 800b444:	f104 0909 	add.w	r9, r4, #9
 800b448:	46c8      	mov	r8, r9
 800b44a:	442c      	add	r4, r5
 800b44c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b450:	4601      	mov	r1, r0
 800b452:	3b30      	subs	r3, #48	; 0x30
 800b454:	220a      	movs	r2, #10
 800b456:	4630      	mov	r0, r6
 800b458:	f7ff ff88 	bl	800b36c <__multadd>
 800b45c:	45a0      	cmp	r8, r4
 800b45e:	d1f5      	bne.n	800b44c <__s2b+0x4c>
 800b460:	f1a5 0408 	sub.w	r4, r5, #8
 800b464:	444c      	add	r4, r9
 800b466:	1b2d      	subs	r5, r5, r4
 800b468:	1963      	adds	r3, r4, r5
 800b46a:	42bb      	cmp	r3, r7
 800b46c:	db04      	blt.n	800b478 <__s2b+0x78>
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	340a      	adds	r4, #10
 800b474:	2509      	movs	r5, #9
 800b476:	e7f6      	b.n	800b466 <__s2b+0x66>
 800b478:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b47c:	4601      	mov	r1, r0
 800b47e:	3b30      	subs	r3, #48	; 0x30
 800b480:	220a      	movs	r2, #10
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ff72 	bl	800b36c <__multadd>
 800b488:	e7ee      	b.n	800b468 <__s2b+0x68>
 800b48a:	bf00      	nop
 800b48c:	0800ccd9 	.word	0x0800ccd9
 800b490:	0800cdcc 	.word	0x0800cdcc

0800b494 <__hi0bits>:
 800b494:	0c03      	lsrs	r3, r0, #16
 800b496:	041b      	lsls	r3, r3, #16
 800b498:	b9d3      	cbnz	r3, 800b4d0 <__hi0bits+0x3c>
 800b49a:	0400      	lsls	r0, r0, #16
 800b49c:	2310      	movs	r3, #16
 800b49e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4a2:	bf04      	itt	eq
 800b4a4:	0200      	lsleq	r0, r0, #8
 800b4a6:	3308      	addeq	r3, #8
 800b4a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4ac:	bf04      	itt	eq
 800b4ae:	0100      	lsleq	r0, r0, #4
 800b4b0:	3304      	addeq	r3, #4
 800b4b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4b6:	bf04      	itt	eq
 800b4b8:	0080      	lsleq	r0, r0, #2
 800b4ba:	3302      	addeq	r3, #2
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	db05      	blt.n	800b4cc <__hi0bits+0x38>
 800b4c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4c4:	f103 0301 	add.w	r3, r3, #1
 800b4c8:	bf08      	it	eq
 800b4ca:	2320      	moveq	r3, #32
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	4770      	bx	lr
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	e7e4      	b.n	800b49e <__hi0bits+0xa>

0800b4d4 <__lo0bits>:
 800b4d4:	6803      	ldr	r3, [r0, #0]
 800b4d6:	f013 0207 	ands.w	r2, r3, #7
 800b4da:	4601      	mov	r1, r0
 800b4dc:	d00b      	beq.n	800b4f6 <__lo0bits+0x22>
 800b4de:	07da      	lsls	r2, r3, #31
 800b4e0:	d424      	bmi.n	800b52c <__lo0bits+0x58>
 800b4e2:	0798      	lsls	r0, r3, #30
 800b4e4:	bf49      	itett	mi
 800b4e6:	085b      	lsrmi	r3, r3, #1
 800b4e8:	089b      	lsrpl	r3, r3, #2
 800b4ea:	2001      	movmi	r0, #1
 800b4ec:	600b      	strmi	r3, [r1, #0]
 800b4ee:	bf5c      	itt	pl
 800b4f0:	600b      	strpl	r3, [r1, #0]
 800b4f2:	2002      	movpl	r0, #2
 800b4f4:	4770      	bx	lr
 800b4f6:	b298      	uxth	r0, r3
 800b4f8:	b9b0      	cbnz	r0, 800b528 <__lo0bits+0x54>
 800b4fa:	0c1b      	lsrs	r3, r3, #16
 800b4fc:	2010      	movs	r0, #16
 800b4fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b502:	bf04      	itt	eq
 800b504:	0a1b      	lsreq	r3, r3, #8
 800b506:	3008      	addeq	r0, #8
 800b508:	071a      	lsls	r2, r3, #28
 800b50a:	bf04      	itt	eq
 800b50c:	091b      	lsreq	r3, r3, #4
 800b50e:	3004      	addeq	r0, #4
 800b510:	079a      	lsls	r2, r3, #30
 800b512:	bf04      	itt	eq
 800b514:	089b      	lsreq	r3, r3, #2
 800b516:	3002      	addeq	r0, #2
 800b518:	07da      	lsls	r2, r3, #31
 800b51a:	d403      	bmi.n	800b524 <__lo0bits+0x50>
 800b51c:	085b      	lsrs	r3, r3, #1
 800b51e:	f100 0001 	add.w	r0, r0, #1
 800b522:	d005      	beq.n	800b530 <__lo0bits+0x5c>
 800b524:	600b      	str	r3, [r1, #0]
 800b526:	4770      	bx	lr
 800b528:	4610      	mov	r0, r2
 800b52a:	e7e8      	b.n	800b4fe <__lo0bits+0x2a>
 800b52c:	2000      	movs	r0, #0
 800b52e:	4770      	bx	lr
 800b530:	2020      	movs	r0, #32
 800b532:	4770      	bx	lr

0800b534 <__i2b>:
 800b534:	b510      	push	{r4, lr}
 800b536:	460c      	mov	r4, r1
 800b538:	2101      	movs	r1, #1
 800b53a:	f7ff feb5 	bl	800b2a8 <_Balloc>
 800b53e:	4602      	mov	r2, r0
 800b540:	b928      	cbnz	r0, 800b54e <__i2b+0x1a>
 800b542:	4b05      	ldr	r3, [pc, #20]	; (800b558 <__i2b+0x24>)
 800b544:	4805      	ldr	r0, [pc, #20]	; (800b55c <__i2b+0x28>)
 800b546:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b54a:	f7fe f9d9 	bl	8009900 <__assert_func>
 800b54e:	2301      	movs	r3, #1
 800b550:	6144      	str	r4, [r0, #20]
 800b552:	6103      	str	r3, [r0, #16]
 800b554:	bd10      	pop	{r4, pc}
 800b556:	bf00      	nop
 800b558:	0800ccd9 	.word	0x0800ccd9
 800b55c:	0800cdcc 	.word	0x0800cdcc

0800b560 <__multiply>:
 800b560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b564:	4614      	mov	r4, r2
 800b566:	690a      	ldr	r2, [r1, #16]
 800b568:	6923      	ldr	r3, [r4, #16]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	bfb8      	it	lt
 800b56e:	460b      	movlt	r3, r1
 800b570:	460d      	mov	r5, r1
 800b572:	bfbc      	itt	lt
 800b574:	4625      	movlt	r5, r4
 800b576:	461c      	movlt	r4, r3
 800b578:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b57c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b580:	68ab      	ldr	r3, [r5, #8]
 800b582:	6869      	ldr	r1, [r5, #4]
 800b584:	eb0a 0709 	add.w	r7, sl, r9
 800b588:	42bb      	cmp	r3, r7
 800b58a:	b085      	sub	sp, #20
 800b58c:	bfb8      	it	lt
 800b58e:	3101      	addlt	r1, #1
 800b590:	f7ff fe8a 	bl	800b2a8 <_Balloc>
 800b594:	b930      	cbnz	r0, 800b5a4 <__multiply+0x44>
 800b596:	4602      	mov	r2, r0
 800b598:	4b42      	ldr	r3, [pc, #264]	; (800b6a4 <__multiply+0x144>)
 800b59a:	4843      	ldr	r0, [pc, #268]	; (800b6a8 <__multiply+0x148>)
 800b59c:	f240 115d 	movw	r1, #349	; 0x15d
 800b5a0:	f7fe f9ae 	bl	8009900 <__assert_func>
 800b5a4:	f100 0614 	add.w	r6, r0, #20
 800b5a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b5ac:	4633      	mov	r3, r6
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	4543      	cmp	r3, r8
 800b5b2:	d31e      	bcc.n	800b5f2 <__multiply+0x92>
 800b5b4:	f105 0c14 	add.w	ip, r5, #20
 800b5b8:	f104 0314 	add.w	r3, r4, #20
 800b5bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b5c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b5c4:	9202      	str	r2, [sp, #8]
 800b5c6:	ebac 0205 	sub.w	r2, ip, r5
 800b5ca:	3a15      	subs	r2, #21
 800b5cc:	f022 0203 	bic.w	r2, r2, #3
 800b5d0:	3204      	adds	r2, #4
 800b5d2:	f105 0115 	add.w	r1, r5, #21
 800b5d6:	458c      	cmp	ip, r1
 800b5d8:	bf38      	it	cc
 800b5da:	2204      	movcc	r2, #4
 800b5dc:	9201      	str	r2, [sp, #4]
 800b5de:	9a02      	ldr	r2, [sp, #8]
 800b5e0:	9303      	str	r3, [sp, #12]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d808      	bhi.n	800b5f8 <__multiply+0x98>
 800b5e6:	2f00      	cmp	r7, #0
 800b5e8:	dc55      	bgt.n	800b696 <__multiply+0x136>
 800b5ea:	6107      	str	r7, [r0, #16]
 800b5ec:	b005      	add	sp, #20
 800b5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f2:	f843 2b04 	str.w	r2, [r3], #4
 800b5f6:	e7db      	b.n	800b5b0 <__multiply+0x50>
 800b5f8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5fc:	f1ba 0f00 	cmp.w	sl, #0
 800b600:	d020      	beq.n	800b644 <__multiply+0xe4>
 800b602:	f105 0e14 	add.w	lr, r5, #20
 800b606:	46b1      	mov	r9, r6
 800b608:	2200      	movs	r2, #0
 800b60a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b60e:	f8d9 b000 	ldr.w	fp, [r9]
 800b612:	b2a1      	uxth	r1, r4
 800b614:	fa1f fb8b 	uxth.w	fp, fp
 800b618:	fb0a b101 	mla	r1, sl, r1, fp
 800b61c:	4411      	add	r1, r2
 800b61e:	f8d9 2000 	ldr.w	r2, [r9]
 800b622:	0c24      	lsrs	r4, r4, #16
 800b624:	0c12      	lsrs	r2, r2, #16
 800b626:	fb0a 2404 	mla	r4, sl, r4, r2
 800b62a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b62e:	b289      	uxth	r1, r1
 800b630:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b634:	45f4      	cmp	ip, lr
 800b636:	f849 1b04 	str.w	r1, [r9], #4
 800b63a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b63e:	d8e4      	bhi.n	800b60a <__multiply+0xaa>
 800b640:	9901      	ldr	r1, [sp, #4]
 800b642:	5072      	str	r2, [r6, r1]
 800b644:	9a03      	ldr	r2, [sp, #12]
 800b646:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b64a:	3304      	adds	r3, #4
 800b64c:	f1b9 0f00 	cmp.w	r9, #0
 800b650:	d01f      	beq.n	800b692 <__multiply+0x132>
 800b652:	6834      	ldr	r4, [r6, #0]
 800b654:	f105 0114 	add.w	r1, r5, #20
 800b658:	46b6      	mov	lr, r6
 800b65a:	f04f 0a00 	mov.w	sl, #0
 800b65e:	880a      	ldrh	r2, [r1, #0]
 800b660:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b664:	fb09 b202 	mla	r2, r9, r2, fp
 800b668:	4492      	add	sl, r2
 800b66a:	b2a4      	uxth	r4, r4
 800b66c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b670:	f84e 4b04 	str.w	r4, [lr], #4
 800b674:	f851 4b04 	ldr.w	r4, [r1], #4
 800b678:	f8be 2000 	ldrh.w	r2, [lr]
 800b67c:	0c24      	lsrs	r4, r4, #16
 800b67e:	fb09 2404 	mla	r4, r9, r4, r2
 800b682:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b686:	458c      	cmp	ip, r1
 800b688:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b68c:	d8e7      	bhi.n	800b65e <__multiply+0xfe>
 800b68e:	9a01      	ldr	r2, [sp, #4]
 800b690:	50b4      	str	r4, [r6, r2]
 800b692:	3604      	adds	r6, #4
 800b694:	e7a3      	b.n	800b5de <__multiply+0x7e>
 800b696:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1a5      	bne.n	800b5ea <__multiply+0x8a>
 800b69e:	3f01      	subs	r7, #1
 800b6a0:	e7a1      	b.n	800b5e6 <__multiply+0x86>
 800b6a2:	bf00      	nop
 800b6a4:	0800ccd9 	.word	0x0800ccd9
 800b6a8:	0800cdcc 	.word	0x0800cdcc

0800b6ac <__pow5mult>:
 800b6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	4615      	mov	r5, r2
 800b6b2:	f012 0203 	ands.w	r2, r2, #3
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	460f      	mov	r7, r1
 800b6ba:	d007      	beq.n	800b6cc <__pow5mult+0x20>
 800b6bc:	4c25      	ldr	r4, [pc, #148]	; (800b754 <__pow5mult+0xa8>)
 800b6be:	3a01      	subs	r2, #1
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6c6:	f7ff fe51 	bl	800b36c <__multadd>
 800b6ca:	4607      	mov	r7, r0
 800b6cc:	10ad      	asrs	r5, r5, #2
 800b6ce:	d03d      	beq.n	800b74c <__pow5mult+0xa0>
 800b6d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6d2:	b97c      	cbnz	r4, 800b6f4 <__pow5mult+0x48>
 800b6d4:	2010      	movs	r0, #16
 800b6d6:	f7ff fdbf 	bl	800b258 <malloc>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	6270      	str	r0, [r6, #36]	; 0x24
 800b6de:	b928      	cbnz	r0, 800b6ec <__pow5mult+0x40>
 800b6e0:	4b1d      	ldr	r3, [pc, #116]	; (800b758 <__pow5mult+0xac>)
 800b6e2:	481e      	ldr	r0, [pc, #120]	; (800b75c <__pow5mult+0xb0>)
 800b6e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6e8:	f7fe f90a 	bl	8009900 <__assert_func>
 800b6ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6f0:	6004      	str	r4, [r0, #0]
 800b6f2:	60c4      	str	r4, [r0, #12]
 800b6f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6fc:	b94c      	cbnz	r4, 800b712 <__pow5mult+0x66>
 800b6fe:	f240 2171 	movw	r1, #625	; 0x271
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ff16 	bl	800b534 <__i2b>
 800b708:	2300      	movs	r3, #0
 800b70a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b70e:	4604      	mov	r4, r0
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	f04f 0900 	mov.w	r9, #0
 800b716:	07eb      	lsls	r3, r5, #31
 800b718:	d50a      	bpl.n	800b730 <__pow5mult+0x84>
 800b71a:	4639      	mov	r1, r7
 800b71c:	4622      	mov	r2, r4
 800b71e:	4630      	mov	r0, r6
 800b720:	f7ff ff1e 	bl	800b560 <__multiply>
 800b724:	4639      	mov	r1, r7
 800b726:	4680      	mov	r8, r0
 800b728:	4630      	mov	r0, r6
 800b72a:	f7ff fdfd 	bl	800b328 <_Bfree>
 800b72e:	4647      	mov	r7, r8
 800b730:	106d      	asrs	r5, r5, #1
 800b732:	d00b      	beq.n	800b74c <__pow5mult+0xa0>
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	b938      	cbnz	r0, 800b748 <__pow5mult+0x9c>
 800b738:	4622      	mov	r2, r4
 800b73a:	4621      	mov	r1, r4
 800b73c:	4630      	mov	r0, r6
 800b73e:	f7ff ff0f 	bl	800b560 <__multiply>
 800b742:	6020      	str	r0, [r4, #0]
 800b744:	f8c0 9000 	str.w	r9, [r0]
 800b748:	4604      	mov	r4, r0
 800b74a:	e7e4      	b.n	800b716 <__pow5mult+0x6a>
 800b74c:	4638      	mov	r0, r7
 800b74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b752:	bf00      	nop
 800b754:	0800cf20 	.word	0x0800cf20
 800b758:	0800cab8 	.word	0x0800cab8
 800b75c:	0800cdcc 	.word	0x0800cdcc

0800b760 <__lshift>:
 800b760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b764:	460c      	mov	r4, r1
 800b766:	6849      	ldr	r1, [r1, #4]
 800b768:	6923      	ldr	r3, [r4, #16]
 800b76a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b76e:	68a3      	ldr	r3, [r4, #8]
 800b770:	4607      	mov	r7, r0
 800b772:	4691      	mov	r9, r2
 800b774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b778:	f108 0601 	add.w	r6, r8, #1
 800b77c:	42b3      	cmp	r3, r6
 800b77e:	db0b      	blt.n	800b798 <__lshift+0x38>
 800b780:	4638      	mov	r0, r7
 800b782:	f7ff fd91 	bl	800b2a8 <_Balloc>
 800b786:	4605      	mov	r5, r0
 800b788:	b948      	cbnz	r0, 800b79e <__lshift+0x3e>
 800b78a:	4602      	mov	r2, r0
 800b78c:	4b28      	ldr	r3, [pc, #160]	; (800b830 <__lshift+0xd0>)
 800b78e:	4829      	ldr	r0, [pc, #164]	; (800b834 <__lshift+0xd4>)
 800b790:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b794:	f7fe f8b4 	bl	8009900 <__assert_func>
 800b798:	3101      	adds	r1, #1
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	e7ee      	b.n	800b77c <__lshift+0x1c>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f100 0114 	add.w	r1, r0, #20
 800b7a4:	f100 0210 	add.w	r2, r0, #16
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	4553      	cmp	r3, sl
 800b7ac:	db33      	blt.n	800b816 <__lshift+0xb6>
 800b7ae:	6920      	ldr	r0, [r4, #16]
 800b7b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7b4:	f104 0314 	add.w	r3, r4, #20
 800b7b8:	f019 091f 	ands.w	r9, r9, #31
 800b7bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7c4:	d02b      	beq.n	800b81e <__lshift+0xbe>
 800b7c6:	f1c9 0e20 	rsb	lr, r9, #32
 800b7ca:	468a      	mov	sl, r1
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	6818      	ldr	r0, [r3, #0]
 800b7d0:	fa00 f009 	lsl.w	r0, r0, r9
 800b7d4:	4302      	orrs	r2, r0
 800b7d6:	f84a 2b04 	str.w	r2, [sl], #4
 800b7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7de:	459c      	cmp	ip, r3
 800b7e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7e4:	d8f3      	bhi.n	800b7ce <__lshift+0x6e>
 800b7e6:	ebac 0304 	sub.w	r3, ip, r4
 800b7ea:	3b15      	subs	r3, #21
 800b7ec:	f023 0303 	bic.w	r3, r3, #3
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	f104 0015 	add.w	r0, r4, #21
 800b7f6:	4584      	cmp	ip, r0
 800b7f8:	bf38      	it	cc
 800b7fa:	2304      	movcc	r3, #4
 800b7fc:	50ca      	str	r2, [r1, r3]
 800b7fe:	b10a      	cbz	r2, 800b804 <__lshift+0xa4>
 800b800:	f108 0602 	add.w	r6, r8, #2
 800b804:	3e01      	subs	r6, #1
 800b806:	4638      	mov	r0, r7
 800b808:	612e      	str	r6, [r5, #16]
 800b80a:	4621      	mov	r1, r4
 800b80c:	f7ff fd8c 	bl	800b328 <_Bfree>
 800b810:	4628      	mov	r0, r5
 800b812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b816:	f842 0f04 	str.w	r0, [r2, #4]!
 800b81a:	3301      	adds	r3, #1
 800b81c:	e7c5      	b.n	800b7aa <__lshift+0x4a>
 800b81e:	3904      	subs	r1, #4
 800b820:	f853 2b04 	ldr.w	r2, [r3], #4
 800b824:	f841 2f04 	str.w	r2, [r1, #4]!
 800b828:	459c      	cmp	ip, r3
 800b82a:	d8f9      	bhi.n	800b820 <__lshift+0xc0>
 800b82c:	e7ea      	b.n	800b804 <__lshift+0xa4>
 800b82e:	bf00      	nop
 800b830:	0800ccd9 	.word	0x0800ccd9
 800b834:	0800cdcc 	.word	0x0800cdcc

0800b838 <__mcmp>:
 800b838:	b530      	push	{r4, r5, lr}
 800b83a:	6902      	ldr	r2, [r0, #16]
 800b83c:	690c      	ldr	r4, [r1, #16]
 800b83e:	1b12      	subs	r2, r2, r4
 800b840:	d10e      	bne.n	800b860 <__mcmp+0x28>
 800b842:	f100 0314 	add.w	r3, r0, #20
 800b846:	3114      	adds	r1, #20
 800b848:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b84c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b850:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b854:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b858:	42a5      	cmp	r5, r4
 800b85a:	d003      	beq.n	800b864 <__mcmp+0x2c>
 800b85c:	d305      	bcc.n	800b86a <__mcmp+0x32>
 800b85e:	2201      	movs	r2, #1
 800b860:	4610      	mov	r0, r2
 800b862:	bd30      	pop	{r4, r5, pc}
 800b864:	4283      	cmp	r3, r0
 800b866:	d3f3      	bcc.n	800b850 <__mcmp+0x18>
 800b868:	e7fa      	b.n	800b860 <__mcmp+0x28>
 800b86a:	f04f 32ff 	mov.w	r2, #4294967295
 800b86e:	e7f7      	b.n	800b860 <__mcmp+0x28>

0800b870 <__mdiff>:
 800b870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	460c      	mov	r4, r1
 800b876:	4606      	mov	r6, r0
 800b878:	4611      	mov	r1, r2
 800b87a:	4620      	mov	r0, r4
 800b87c:	4617      	mov	r7, r2
 800b87e:	f7ff ffdb 	bl	800b838 <__mcmp>
 800b882:	1e05      	subs	r5, r0, #0
 800b884:	d110      	bne.n	800b8a8 <__mdiff+0x38>
 800b886:	4629      	mov	r1, r5
 800b888:	4630      	mov	r0, r6
 800b88a:	f7ff fd0d 	bl	800b2a8 <_Balloc>
 800b88e:	b930      	cbnz	r0, 800b89e <__mdiff+0x2e>
 800b890:	4b39      	ldr	r3, [pc, #228]	; (800b978 <__mdiff+0x108>)
 800b892:	4602      	mov	r2, r0
 800b894:	f240 2132 	movw	r1, #562	; 0x232
 800b898:	4838      	ldr	r0, [pc, #224]	; (800b97c <__mdiff+0x10c>)
 800b89a:	f7fe f831 	bl	8009900 <__assert_func>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	bfa4      	itt	ge
 800b8aa:	463b      	movge	r3, r7
 800b8ac:	4627      	movge	r7, r4
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	bfa6      	itte	ge
 800b8b4:	461c      	movge	r4, r3
 800b8b6:	2500      	movge	r5, #0
 800b8b8:	2501      	movlt	r5, #1
 800b8ba:	f7ff fcf5 	bl	800b2a8 <_Balloc>
 800b8be:	b920      	cbnz	r0, 800b8ca <__mdiff+0x5a>
 800b8c0:	4b2d      	ldr	r3, [pc, #180]	; (800b978 <__mdiff+0x108>)
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8c8:	e7e6      	b.n	800b898 <__mdiff+0x28>
 800b8ca:	693e      	ldr	r6, [r7, #16]
 800b8cc:	60c5      	str	r5, [r0, #12]
 800b8ce:	6925      	ldr	r5, [r4, #16]
 800b8d0:	f107 0114 	add.w	r1, r7, #20
 800b8d4:	f104 0914 	add.w	r9, r4, #20
 800b8d8:	f100 0e14 	add.w	lr, r0, #20
 800b8dc:	f107 0210 	add.w	r2, r7, #16
 800b8e0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b8e4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b8e8:	46f2      	mov	sl, lr
 800b8ea:	2700      	movs	r7, #0
 800b8ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8f4:	fa1f f883 	uxth.w	r8, r3
 800b8f8:	fa17 f78b 	uxtah	r7, r7, fp
 800b8fc:	0c1b      	lsrs	r3, r3, #16
 800b8fe:	eba7 0808 	sub.w	r8, r7, r8
 800b902:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b906:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b90a:	fa1f f888 	uxth.w	r8, r8
 800b90e:	141f      	asrs	r7, r3, #16
 800b910:	454d      	cmp	r5, r9
 800b912:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b916:	f84a 3b04 	str.w	r3, [sl], #4
 800b91a:	d8e7      	bhi.n	800b8ec <__mdiff+0x7c>
 800b91c:	1b2b      	subs	r3, r5, r4
 800b91e:	3b15      	subs	r3, #21
 800b920:	f023 0303 	bic.w	r3, r3, #3
 800b924:	3304      	adds	r3, #4
 800b926:	3415      	adds	r4, #21
 800b928:	42a5      	cmp	r5, r4
 800b92a:	bf38      	it	cc
 800b92c:	2304      	movcc	r3, #4
 800b92e:	4419      	add	r1, r3
 800b930:	4473      	add	r3, lr
 800b932:	469e      	mov	lr, r3
 800b934:	460d      	mov	r5, r1
 800b936:	4565      	cmp	r5, ip
 800b938:	d30e      	bcc.n	800b958 <__mdiff+0xe8>
 800b93a:	f10c 0203 	add.w	r2, ip, #3
 800b93e:	1a52      	subs	r2, r2, r1
 800b940:	f022 0203 	bic.w	r2, r2, #3
 800b944:	3903      	subs	r1, #3
 800b946:	458c      	cmp	ip, r1
 800b948:	bf38      	it	cc
 800b94a:	2200      	movcc	r2, #0
 800b94c:	441a      	add	r2, r3
 800b94e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b952:	b17b      	cbz	r3, 800b974 <__mdiff+0x104>
 800b954:	6106      	str	r6, [r0, #16]
 800b956:	e7a5      	b.n	800b8a4 <__mdiff+0x34>
 800b958:	f855 8b04 	ldr.w	r8, [r5], #4
 800b95c:	fa17 f488 	uxtah	r4, r7, r8
 800b960:	1422      	asrs	r2, r4, #16
 800b962:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b966:	b2a4      	uxth	r4, r4
 800b968:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b96c:	f84e 4b04 	str.w	r4, [lr], #4
 800b970:	1417      	asrs	r7, r2, #16
 800b972:	e7e0      	b.n	800b936 <__mdiff+0xc6>
 800b974:	3e01      	subs	r6, #1
 800b976:	e7ea      	b.n	800b94e <__mdiff+0xde>
 800b978:	0800ccd9 	.word	0x0800ccd9
 800b97c:	0800cdcc 	.word	0x0800cdcc

0800b980 <__ulp>:
 800b980:	b082      	sub	sp, #8
 800b982:	ed8d 0b00 	vstr	d0, [sp]
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	4912      	ldr	r1, [pc, #72]	; (800b9d4 <__ulp+0x54>)
 800b98a:	4019      	ands	r1, r3
 800b98c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b990:	2900      	cmp	r1, #0
 800b992:	dd05      	ble.n	800b9a0 <__ulp+0x20>
 800b994:	2200      	movs	r2, #0
 800b996:	460b      	mov	r3, r1
 800b998:	ec43 2b10 	vmov	d0, r2, r3
 800b99c:	b002      	add	sp, #8
 800b99e:	4770      	bx	lr
 800b9a0:	4249      	negs	r1, r1
 800b9a2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b9a6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b9aa:	f04f 0200 	mov.w	r2, #0
 800b9ae:	f04f 0300 	mov.w	r3, #0
 800b9b2:	da04      	bge.n	800b9be <__ulp+0x3e>
 800b9b4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b9b8:	fa41 f300 	asr.w	r3, r1, r0
 800b9bc:	e7ec      	b.n	800b998 <__ulp+0x18>
 800b9be:	f1a0 0114 	sub.w	r1, r0, #20
 800b9c2:	291e      	cmp	r1, #30
 800b9c4:	bfda      	itte	le
 800b9c6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b9ca:	fa20 f101 	lsrle.w	r1, r0, r1
 800b9ce:	2101      	movgt	r1, #1
 800b9d0:	460a      	mov	r2, r1
 800b9d2:	e7e1      	b.n	800b998 <__ulp+0x18>
 800b9d4:	7ff00000 	.word	0x7ff00000

0800b9d8 <__b2d>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	6905      	ldr	r5, [r0, #16]
 800b9dc:	f100 0714 	add.w	r7, r0, #20
 800b9e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b9e4:	1f2e      	subs	r6, r5, #4
 800b9e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f7ff fd52 	bl	800b494 <__hi0bits>
 800b9f0:	f1c0 0320 	rsb	r3, r0, #32
 800b9f4:	280a      	cmp	r0, #10
 800b9f6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ba74 <__b2d+0x9c>
 800b9fa:	600b      	str	r3, [r1, #0]
 800b9fc:	dc14      	bgt.n	800ba28 <__b2d+0x50>
 800b9fe:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba02:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba06:	42b7      	cmp	r7, r6
 800ba08:	ea41 030c 	orr.w	r3, r1, ip
 800ba0c:	bf34      	ite	cc
 800ba0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba12:	2100      	movcs	r1, #0
 800ba14:	3015      	adds	r0, #21
 800ba16:	fa04 f000 	lsl.w	r0, r4, r0
 800ba1a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ba1e:	ea40 0201 	orr.w	r2, r0, r1
 800ba22:	ec43 2b10 	vmov	d0, r2, r3
 800ba26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba28:	42b7      	cmp	r7, r6
 800ba2a:	bf3a      	itte	cc
 800ba2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba30:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba34:	2100      	movcs	r1, #0
 800ba36:	380b      	subs	r0, #11
 800ba38:	d017      	beq.n	800ba6a <__b2d+0x92>
 800ba3a:	f1c0 0c20 	rsb	ip, r0, #32
 800ba3e:	fa04 f500 	lsl.w	r5, r4, r0
 800ba42:	42be      	cmp	r6, r7
 800ba44:	fa21 f40c 	lsr.w	r4, r1, ip
 800ba48:	ea45 0504 	orr.w	r5, r5, r4
 800ba4c:	bf8c      	ite	hi
 800ba4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ba52:	2400      	movls	r4, #0
 800ba54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ba58:	fa01 f000 	lsl.w	r0, r1, r0
 800ba5c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ba60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba64:	ea40 0204 	orr.w	r2, r0, r4
 800ba68:	e7db      	b.n	800ba22 <__b2d+0x4a>
 800ba6a:	ea44 030c 	orr.w	r3, r4, ip
 800ba6e:	460a      	mov	r2, r1
 800ba70:	e7d7      	b.n	800ba22 <__b2d+0x4a>
 800ba72:	bf00      	nop
 800ba74:	3ff00000 	.word	0x3ff00000

0800ba78 <__d2b>:
 800ba78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba7c:	4689      	mov	r9, r1
 800ba7e:	2101      	movs	r1, #1
 800ba80:	ec57 6b10 	vmov	r6, r7, d0
 800ba84:	4690      	mov	r8, r2
 800ba86:	f7ff fc0f 	bl	800b2a8 <_Balloc>
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b930      	cbnz	r0, 800ba9c <__d2b+0x24>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	4b25      	ldr	r3, [pc, #148]	; (800bb28 <__d2b+0xb0>)
 800ba92:	4826      	ldr	r0, [pc, #152]	; (800bb2c <__d2b+0xb4>)
 800ba94:	f240 310a 	movw	r1, #778	; 0x30a
 800ba98:	f7fd ff32 	bl	8009900 <__assert_func>
 800ba9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800baa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800baa4:	bb35      	cbnz	r5, 800baf4 <__d2b+0x7c>
 800baa6:	2e00      	cmp	r6, #0
 800baa8:	9301      	str	r3, [sp, #4]
 800baaa:	d028      	beq.n	800bafe <__d2b+0x86>
 800baac:	4668      	mov	r0, sp
 800baae:	9600      	str	r6, [sp, #0]
 800bab0:	f7ff fd10 	bl	800b4d4 <__lo0bits>
 800bab4:	9900      	ldr	r1, [sp, #0]
 800bab6:	b300      	cbz	r0, 800bafa <__d2b+0x82>
 800bab8:	9a01      	ldr	r2, [sp, #4]
 800baba:	f1c0 0320 	rsb	r3, r0, #32
 800babe:	fa02 f303 	lsl.w	r3, r2, r3
 800bac2:	430b      	orrs	r3, r1
 800bac4:	40c2      	lsrs	r2, r0
 800bac6:	6163      	str	r3, [r4, #20]
 800bac8:	9201      	str	r2, [sp, #4]
 800baca:	9b01      	ldr	r3, [sp, #4]
 800bacc:	61a3      	str	r3, [r4, #24]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bf14      	ite	ne
 800bad2:	2202      	movne	r2, #2
 800bad4:	2201      	moveq	r2, #1
 800bad6:	6122      	str	r2, [r4, #16]
 800bad8:	b1d5      	cbz	r5, 800bb10 <__d2b+0x98>
 800bada:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bade:	4405      	add	r5, r0
 800bae0:	f8c9 5000 	str.w	r5, [r9]
 800bae4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bae8:	f8c8 0000 	str.w	r0, [r8]
 800baec:	4620      	mov	r0, r4
 800baee:	b003      	add	sp, #12
 800baf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baf8:	e7d5      	b.n	800baa6 <__d2b+0x2e>
 800bafa:	6161      	str	r1, [r4, #20]
 800bafc:	e7e5      	b.n	800baca <__d2b+0x52>
 800bafe:	a801      	add	r0, sp, #4
 800bb00:	f7ff fce8 	bl	800b4d4 <__lo0bits>
 800bb04:	9b01      	ldr	r3, [sp, #4]
 800bb06:	6163      	str	r3, [r4, #20]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	6122      	str	r2, [r4, #16]
 800bb0c:	3020      	adds	r0, #32
 800bb0e:	e7e3      	b.n	800bad8 <__d2b+0x60>
 800bb10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb18:	f8c9 0000 	str.w	r0, [r9]
 800bb1c:	6918      	ldr	r0, [r3, #16]
 800bb1e:	f7ff fcb9 	bl	800b494 <__hi0bits>
 800bb22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb26:	e7df      	b.n	800bae8 <__d2b+0x70>
 800bb28:	0800ccd9 	.word	0x0800ccd9
 800bb2c:	0800cdcc 	.word	0x0800cdcc

0800bb30 <__ratio>:
 800bb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb34:	4688      	mov	r8, r1
 800bb36:	4669      	mov	r1, sp
 800bb38:	4681      	mov	r9, r0
 800bb3a:	f7ff ff4d 	bl	800b9d8 <__b2d>
 800bb3e:	a901      	add	r1, sp, #4
 800bb40:	4640      	mov	r0, r8
 800bb42:	ec55 4b10 	vmov	r4, r5, d0
 800bb46:	f7ff ff47 	bl	800b9d8 <__b2d>
 800bb4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb52:	eba3 0c02 	sub.w	ip, r3, r2
 800bb56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb5a:	1a9b      	subs	r3, r3, r2
 800bb5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb60:	ec51 0b10 	vmov	r0, r1, d0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bfd6      	itet	le
 800bb68:	460a      	movle	r2, r1
 800bb6a:	462a      	movgt	r2, r5
 800bb6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb70:	468b      	mov	fp, r1
 800bb72:	462f      	mov	r7, r5
 800bb74:	bfd4      	ite	le
 800bb76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bb7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bb7e:	4620      	mov	r0, r4
 800bb80:	ee10 2a10 	vmov	r2, s0
 800bb84:	465b      	mov	r3, fp
 800bb86:	4639      	mov	r1, r7
 800bb88:	f7f4 fe90 	bl	80008ac <__aeabi_ddiv>
 800bb8c:	ec41 0b10 	vmov	d0, r0, r1
 800bb90:	b003      	add	sp, #12
 800bb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb96 <__copybits>:
 800bb96:	3901      	subs	r1, #1
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	1149      	asrs	r1, r1, #5
 800bb9c:	6914      	ldr	r4, [r2, #16]
 800bb9e:	3101      	adds	r1, #1
 800bba0:	f102 0314 	add.w	r3, r2, #20
 800bba4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bba8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bbac:	1f05      	subs	r5, r0, #4
 800bbae:	42a3      	cmp	r3, r4
 800bbb0:	d30c      	bcc.n	800bbcc <__copybits+0x36>
 800bbb2:	1aa3      	subs	r3, r4, r2
 800bbb4:	3b11      	subs	r3, #17
 800bbb6:	f023 0303 	bic.w	r3, r3, #3
 800bbba:	3211      	adds	r2, #17
 800bbbc:	42a2      	cmp	r2, r4
 800bbbe:	bf88      	it	hi
 800bbc0:	2300      	movhi	r3, #0
 800bbc2:	4418      	add	r0, r3
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	4288      	cmp	r0, r1
 800bbc8:	d305      	bcc.n	800bbd6 <__copybits+0x40>
 800bbca:	bd70      	pop	{r4, r5, r6, pc}
 800bbcc:	f853 6b04 	ldr.w	r6, [r3], #4
 800bbd0:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbd4:	e7eb      	b.n	800bbae <__copybits+0x18>
 800bbd6:	f840 3b04 	str.w	r3, [r0], #4
 800bbda:	e7f4      	b.n	800bbc6 <__copybits+0x30>

0800bbdc <__any_on>:
 800bbdc:	f100 0214 	add.w	r2, r0, #20
 800bbe0:	6900      	ldr	r0, [r0, #16]
 800bbe2:	114b      	asrs	r3, r1, #5
 800bbe4:	4298      	cmp	r0, r3
 800bbe6:	b510      	push	{r4, lr}
 800bbe8:	db11      	blt.n	800bc0e <__any_on+0x32>
 800bbea:	dd0a      	ble.n	800bc02 <__any_on+0x26>
 800bbec:	f011 011f 	ands.w	r1, r1, #31
 800bbf0:	d007      	beq.n	800bc02 <__any_on+0x26>
 800bbf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bbf6:	fa24 f001 	lsr.w	r0, r4, r1
 800bbfa:	fa00 f101 	lsl.w	r1, r0, r1
 800bbfe:	428c      	cmp	r4, r1
 800bc00:	d10b      	bne.n	800bc1a <__any_on+0x3e>
 800bc02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d803      	bhi.n	800bc12 <__any_on+0x36>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	bd10      	pop	{r4, pc}
 800bc0e:	4603      	mov	r3, r0
 800bc10:	e7f7      	b.n	800bc02 <__any_on+0x26>
 800bc12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc16:	2900      	cmp	r1, #0
 800bc18:	d0f5      	beq.n	800bc06 <__any_on+0x2a>
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	e7f6      	b.n	800bc0c <__any_on+0x30>

0800bc1e <_calloc_r>:
 800bc1e:	b513      	push	{r0, r1, r4, lr}
 800bc20:	434a      	muls	r2, r1
 800bc22:	4611      	mov	r1, r2
 800bc24:	9201      	str	r2, [sp, #4]
 800bc26:	f000 f859 	bl	800bcdc <_malloc_r>
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	b118      	cbz	r0, 800bc36 <_calloc_r+0x18>
 800bc2e:	9a01      	ldr	r2, [sp, #4]
 800bc30:	2100      	movs	r1, #0
 800bc32:	f7fc f981 	bl	8007f38 <memset>
 800bc36:	4620      	mov	r0, r4
 800bc38:	b002      	add	sp, #8
 800bc3a:	bd10      	pop	{r4, pc}

0800bc3c <_free_r>:
 800bc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	d048      	beq.n	800bcd4 <_free_r+0x98>
 800bc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc46:	9001      	str	r0, [sp, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc4e:	bfb8      	it	lt
 800bc50:	18e4      	addlt	r4, r4, r3
 800bc52:	f000 fafd 	bl	800c250 <__malloc_lock>
 800bc56:	4a20      	ldr	r2, [pc, #128]	; (800bcd8 <_free_r+0x9c>)
 800bc58:	9801      	ldr	r0, [sp, #4]
 800bc5a:	6813      	ldr	r3, [r2, #0]
 800bc5c:	4615      	mov	r5, r2
 800bc5e:	b933      	cbnz	r3, 800bc6e <_free_r+0x32>
 800bc60:	6063      	str	r3, [r4, #4]
 800bc62:	6014      	str	r4, [r2, #0]
 800bc64:	b003      	add	sp, #12
 800bc66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc6a:	f000 baf7 	b.w	800c25c <__malloc_unlock>
 800bc6e:	42a3      	cmp	r3, r4
 800bc70:	d90b      	bls.n	800bc8a <_free_r+0x4e>
 800bc72:	6821      	ldr	r1, [r4, #0]
 800bc74:	1862      	adds	r2, r4, r1
 800bc76:	4293      	cmp	r3, r2
 800bc78:	bf04      	itt	eq
 800bc7a:	681a      	ldreq	r2, [r3, #0]
 800bc7c:	685b      	ldreq	r3, [r3, #4]
 800bc7e:	6063      	str	r3, [r4, #4]
 800bc80:	bf04      	itt	eq
 800bc82:	1852      	addeq	r2, r2, r1
 800bc84:	6022      	streq	r2, [r4, #0]
 800bc86:	602c      	str	r4, [r5, #0]
 800bc88:	e7ec      	b.n	800bc64 <_free_r+0x28>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	b10b      	cbz	r3, 800bc94 <_free_r+0x58>
 800bc90:	42a3      	cmp	r3, r4
 800bc92:	d9fa      	bls.n	800bc8a <_free_r+0x4e>
 800bc94:	6811      	ldr	r1, [r2, #0]
 800bc96:	1855      	adds	r5, r2, r1
 800bc98:	42a5      	cmp	r5, r4
 800bc9a:	d10b      	bne.n	800bcb4 <_free_r+0x78>
 800bc9c:	6824      	ldr	r4, [r4, #0]
 800bc9e:	4421      	add	r1, r4
 800bca0:	1854      	adds	r4, r2, r1
 800bca2:	42a3      	cmp	r3, r4
 800bca4:	6011      	str	r1, [r2, #0]
 800bca6:	d1dd      	bne.n	800bc64 <_free_r+0x28>
 800bca8:	681c      	ldr	r4, [r3, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	6053      	str	r3, [r2, #4]
 800bcae:	4421      	add	r1, r4
 800bcb0:	6011      	str	r1, [r2, #0]
 800bcb2:	e7d7      	b.n	800bc64 <_free_r+0x28>
 800bcb4:	d902      	bls.n	800bcbc <_free_r+0x80>
 800bcb6:	230c      	movs	r3, #12
 800bcb8:	6003      	str	r3, [r0, #0]
 800bcba:	e7d3      	b.n	800bc64 <_free_r+0x28>
 800bcbc:	6825      	ldr	r5, [r4, #0]
 800bcbe:	1961      	adds	r1, r4, r5
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	bf04      	itt	eq
 800bcc4:	6819      	ldreq	r1, [r3, #0]
 800bcc6:	685b      	ldreq	r3, [r3, #4]
 800bcc8:	6063      	str	r3, [r4, #4]
 800bcca:	bf04      	itt	eq
 800bccc:	1949      	addeq	r1, r1, r5
 800bcce:	6021      	streq	r1, [r4, #0]
 800bcd0:	6054      	str	r4, [r2, #4]
 800bcd2:	e7c7      	b.n	800bc64 <_free_r+0x28>
 800bcd4:	b003      	add	sp, #12
 800bcd6:	bd30      	pop	{r4, r5, pc}
 800bcd8:	20000240 	.word	0x20000240

0800bcdc <_malloc_r>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	1ccd      	adds	r5, r1, #3
 800bce0:	f025 0503 	bic.w	r5, r5, #3
 800bce4:	3508      	adds	r5, #8
 800bce6:	2d0c      	cmp	r5, #12
 800bce8:	bf38      	it	cc
 800bcea:	250c      	movcc	r5, #12
 800bcec:	2d00      	cmp	r5, #0
 800bcee:	4606      	mov	r6, r0
 800bcf0:	db01      	blt.n	800bcf6 <_malloc_r+0x1a>
 800bcf2:	42a9      	cmp	r1, r5
 800bcf4:	d903      	bls.n	800bcfe <_malloc_r+0x22>
 800bcf6:	230c      	movs	r3, #12
 800bcf8:	6033      	str	r3, [r6, #0]
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcfe:	f000 faa7 	bl	800c250 <__malloc_lock>
 800bd02:	4921      	ldr	r1, [pc, #132]	; (800bd88 <_malloc_r+0xac>)
 800bd04:	680a      	ldr	r2, [r1, #0]
 800bd06:	4614      	mov	r4, r2
 800bd08:	b99c      	cbnz	r4, 800bd32 <_malloc_r+0x56>
 800bd0a:	4f20      	ldr	r7, [pc, #128]	; (800bd8c <_malloc_r+0xb0>)
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	b923      	cbnz	r3, 800bd1a <_malloc_r+0x3e>
 800bd10:	4621      	mov	r1, r4
 800bd12:	4630      	mov	r0, r6
 800bd14:	f000 f9cc 	bl	800c0b0 <_sbrk_r>
 800bd18:	6038      	str	r0, [r7, #0]
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f000 f9c7 	bl	800c0b0 <_sbrk_r>
 800bd22:	1c43      	adds	r3, r0, #1
 800bd24:	d123      	bne.n	800bd6e <_malloc_r+0x92>
 800bd26:	230c      	movs	r3, #12
 800bd28:	6033      	str	r3, [r6, #0]
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f000 fa96 	bl	800c25c <__malloc_unlock>
 800bd30:	e7e3      	b.n	800bcfa <_malloc_r+0x1e>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	1b5b      	subs	r3, r3, r5
 800bd36:	d417      	bmi.n	800bd68 <_malloc_r+0x8c>
 800bd38:	2b0b      	cmp	r3, #11
 800bd3a:	d903      	bls.n	800bd44 <_malloc_r+0x68>
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	441c      	add	r4, r3
 800bd40:	6025      	str	r5, [r4, #0]
 800bd42:	e004      	b.n	800bd4e <_malloc_r+0x72>
 800bd44:	6863      	ldr	r3, [r4, #4]
 800bd46:	42a2      	cmp	r2, r4
 800bd48:	bf0c      	ite	eq
 800bd4a:	600b      	streq	r3, [r1, #0]
 800bd4c:	6053      	strne	r3, [r2, #4]
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 fa84 	bl	800c25c <__malloc_unlock>
 800bd54:	f104 000b 	add.w	r0, r4, #11
 800bd58:	1d23      	adds	r3, r4, #4
 800bd5a:	f020 0007 	bic.w	r0, r0, #7
 800bd5e:	1ac2      	subs	r2, r0, r3
 800bd60:	d0cc      	beq.n	800bcfc <_malloc_r+0x20>
 800bd62:	1a1b      	subs	r3, r3, r0
 800bd64:	50a3      	str	r3, [r4, r2]
 800bd66:	e7c9      	b.n	800bcfc <_malloc_r+0x20>
 800bd68:	4622      	mov	r2, r4
 800bd6a:	6864      	ldr	r4, [r4, #4]
 800bd6c:	e7cc      	b.n	800bd08 <_malloc_r+0x2c>
 800bd6e:	1cc4      	adds	r4, r0, #3
 800bd70:	f024 0403 	bic.w	r4, r4, #3
 800bd74:	42a0      	cmp	r0, r4
 800bd76:	d0e3      	beq.n	800bd40 <_malloc_r+0x64>
 800bd78:	1a21      	subs	r1, r4, r0
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 f998 	bl	800c0b0 <_sbrk_r>
 800bd80:	3001      	adds	r0, #1
 800bd82:	d1dd      	bne.n	800bd40 <_malloc_r+0x64>
 800bd84:	e7cf      	b.n	800bd26 <_malloc_r+0x4a>
 800bd86:	bf00      	nop
 800bd88:	20000240 	.word	0x20000240
 800bd8c:	20000244 	.word	0x20000244

0800bd90 <__sfputc_r>:
 800bd90:	6893      	ldr	r3, [r2, #8]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	b410      	push	{r4}
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	da08      	bge.n	800bdae <__sfputc_r+0x1e>
 800bd9c:	6994      	ldr	r4, [r2, #24]
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db01      	blt.n	800bda6 <__sfputc_r+0x16>
 800bda2:	290a      	cmp	r1, #10
 800bda4:	d103      	bne.n	800bdae <__sfputc_r+0x1e>
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	f7fd bce9 	b.w	8009780 <__swbuf_r>
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	1c58      	adds	r0, r3, #1
 800bdb2:	6010      	str	r0, [r2, #0]
 800bdb4:	7019      	strb	r1, [r3, #0]
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <__sfputs_r>:
 800bdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	18d5      	adds	r5, r2, r3
 800bdc8:	42ac      	cmp	r4, r5
 800bdca:	d101      	bne.n	800bdd0 <__sfputs_r+0x12>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e007      	b.n	800bde0 <__sfputs_r+0x22>
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffda 	bl	800bd90 <__sfputc_r>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d1f3      	bne.n	800bdc8 <__sfputs_r+0xa>
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460d      	mov	r5, r1
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4614      	mov	r4, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f7fe fd46 	bl	800a888 <__sinit>
 800bdfc:	4b89      	ldr	r3, [pc, #548]	; (800c024 <_vfiprintf_r+0x240>)
 800bdfe:	429d      	cmp	r5, r3
 800be00:	d11b      	bne.n	800be3a <_vfiprintf_r+0x56>
 800be02:	6875      	ldr	r5, [r6, #4]
 800be04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	d405      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be12:	f7ff f9ba 	bl	800b18a <__retarget_lock_acquire_recursive>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	071b      	lsls	r3, r3, #28
 800be1a:	d501      	bpl.n	800be20 <_vfiprintf_r+0x3c>
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	b9eb      	cbnz	r3, 800be5c <_vfiprintf_r+0x78>
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f7fd fcfe 	bl	8009824 <__swsetup_r>
 800be28:	b1c0      	cbz	r0, 800be5c <_vfiprintf_r+0x78>
 800be2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2c:	07dc      	lsls	r4, r3, #31
 800be2e:	d50e      	bpl.n	800be4e <_vfiprintf_r+0x6a>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	b01d      	add	sp, #116	; 0x74
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	4b7b      	ldr	r3, [pc, #492]	; (800c028 <_vfiprintf_r+0x244>)
 800be3c:	429d      	cmp	r5, r3
 800be3e:	d101      	bne.n	800be44 <_vfiprintf_r+0x60>
 800be40:	68b5      	ldr	r5, [r6, #8]
 800be42:	e7df      	b.n	800be04 <_vfiprintf_r+0x20>
 800be44:	4b79      	ldr	r3, [pc, #484]	; (800c02c <_vfiprintf_r+0x248>)
 800be46:	429d      	cmp	r5, r3
 800be48:	bf08      	it	eq
 800be4a:	68f5      	ldreq	r5, [r6, #12]
 800be4c:	e7da      	b.n	800be04 <_vfiprintf_r+0x20>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	0598      	lsls	r0, r3, #22
 800be52:	d4ed      	bmi.n	800be30 <_vfiprintf_r+0x4c>
 800be54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be56:	f7ff f999 	bl	800b18c <__retarget_lock_release_recursive>
 800be5a:	e7e9      	b.n	800be30 <_vfiprintf_r+0x4c>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	2320      	movs	r3, #32
 800be62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be66:	f8cd 800c 	str.w	r8, [sp, #12]
 800be6a:	2330      	movs	r3, #48	; 0x30
 800be6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c030 <_vfiprintf_r+0x24c>
 800be70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be74:	f04f 0901 	mov.w	r9, #1
 800be78:	4623      	mov	r3, r4
 800be7a:	469a      	mov	sl, r3
 800be7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be80:	b10a      	cbz	r2, 800be86 <_vfiprintf_r+0xa2>
 800be82:	2a25      	cmp	r2, #37	; 0x25
 800be84:	d1f9      	bne.n	800be7a <_vfiprintf_r+0x96>
 800be86:	ebba 0b04 	subs.w	fp, sl, r4
 800be8a:	d00b      	beq.n	800bea4 <_vfiprintf_r+0xc0>
 800be8c:	465b      	mov	r3, fp
 800be8e:	4622      	mov	r2, r4
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff93 	bl	800bdbe <__sfputs_r>
 800be98:	3001      	adds	r0, #1
 800be9a:	f000 80aa 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800be9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea0:	445a      	add	r2, fp
 800bea2:	9209      	str	r2, [sp, #36]	; 0x24
 800bea4:	f89a 3000 	ldrb.w	r3, [sl]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80a2 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800beae:	2300      	movs	r3, #0
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb8:	f10a 0a01 	add.w	sl, sl, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec4:	931a      	str	r3, [sp, #104]	; 0x68
 800bec6:	4654      	mov	r4, sl
 800bec8:	2205      	movs	r2, #5
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4858      	ldr	r0, [pc, #352]	; (800c030 <_vfiprintf_r+0x24c>)
 800bed0:	f7f4 f9b6 	bl	8000240 <memchr>
 800bed4:	9a04      	ldr	r2, [sp, #16]
 800bed6:	b9d8      	cbnz	r0, 800bf10 <_vfiprintf_r+0x12c>
 800bed8:	06d1      	lsls	r1, r2, #27
 800beda:	bf44      	itt	mi
 800bedc:	2320      	movmi	r3, #32
 800bede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee2:	0713      	lsls	r3, r2, #28
 800bee4:	bf44      	itt	mi
 800bee6:	232b      	movmi	r3, #43	; 0x2b
 800bee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b2a      	cmp	r3, #42	; 0x2a
 800bef2:	d015      	beq.n	800bf20 <_vfiprintf_r+0x13c>
 800bef4:	9a07      	ldr	r2, [sp, #28]
 800bef6:	4654      	mov	r4, sl
 800bef8:	2000      	movs	r0, #0
 800befa:	f04f 0c0a 	mov.w	ip, #10
 800befe:	4621      	mov	r1, r4
 800bf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf04:	3b30      	subs	r3, #48	; 0x30
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d94e      	bls.n	800bfa8 <_vfiprintf_r+0x1c4>
 800bf0a:	b1b0      	cbz	r0, 800bf3a <_vfiprintf_r+0x156>
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	e014      	b.n	800bf3a <_vfiprintf_r+0x156>
 800bf10:	eba0 0308 	sub.w	r3, r0, r8
 800bf14:	fa09 f303 	lsl.w	r3, r9, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	46a2      	mov	sl, r4
 800bf1e:	e7d2      	b.n	800bec6 <_vfiprintf_r+0xe2>
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	1d19      	adds	r1, r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	9103      	str	r1, [sp, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bfbb      	ittet	lt
 800bf2c:	425b      	neglt	r3, r3
 800bf2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf32:	9307      	strge	r3, [sp, #28]
 800bf34:	9307      	strlt	r3, [sp, #28]
 800bf36:	bfb8      	it	lt
 800bf38:	9204      	strlt	r2, [sp, #16]
 800bf3a:	7823      	ldrb	r3, [r4, #0]
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d10c      	bne.n	800bf5a <_vfiprintf_r+0x176>
 800bf40:	7863      	ldrb	r3, [r4, #1]
 800bf42:	2b2a      	cmp	r3, #42	; 0x2a
 800bf44:	d135      	bne.n	800bfb2 <_vfiprintf_r+0x1ce>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	9203      	str	r2, [sp, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfb8      	it	lt
 800bf52:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf56:	3402      	adds	r4, #2
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c040 <_vfiprintf_r+0x25c>
 800bf5e:	7821      	ldrb	r1, [r4, #0]
 800bf60:	2203      	movs	r2, #3
 800bf62:	4650      	mov	r0, sl
 800bf64:	f7f4 f96c 	bl	8000240 <memchr>
 800bf68:	b140      	cbz	r0, 800bf7c <_vfiprintf_r+0x198>
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	eba0 000a 	sub.w	r0, r0, sl
 800bf70:	fa03 f000 	lsl.w	r0, r3, r0
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	4303      	orrs	r3, r0
 800bf78:	3401      	adds	r4, #1
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf80:	482c      	ldr	r0, [pc, #176]	; (800c034 <_vfiprintf_r+0x250>)
 800bf82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf86:	2206      	movs	r2, #6
 800bf88:	f7f4 f95a 	bl	8000240 <memchr>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d03f      	beq.n	800c010 <_vfiprintf_r+0x22c>
 800bf90:	4b29      	ldr	r3, [pc, #164]	; (800c038 <_vfiprintf_r+0x254>)
 800bf92:	bb1b      	cbnz	r3, 800bfdc <_vfiprintf_r+0x1f8>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	3307      	adds	r3, #7
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	9303      	str	r3, [sp, #12]
 800bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa2:	443b      	add	r3, r7
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	e767      	b.n	800be78 <_vfiprintf_r+0x94>
 800bfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfac:	460c      	mov	r4, r1
 800bfae:	2001      	movs	r0, #1
 800bfb0:	e7a5      	b.n	800befe <_vfiprintf_r+0x11a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	3401      	adds	r4, #1
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f04f 0c0a 	mov.w	ip, #10
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc4:	3a30      	subs	r2, #48	; 0x30
 800bfc6:	2a09      	cmp	r2, #9
 800bfc8:	d903      	bls.n	800bfd2 <_vfiprintf_r+0x1ee>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0c5      	beq.n	800bf5a <_vfiprintf_r+0x176>
 800bfce:	9105      	str	r1, [sp, #20]
 800bfd0:	e7c3      	b.n	800bf5a <_vfiprintf_r+0x176>
 800bfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e7f0      	b.n	800bfbe <_vfiprintf_r+0x1da>
 800bfdc:	ab03      	add	r3, sp, #12
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	462a      	mov	r2, r5
 800bfe2:	4b16      	ldr	r3, [pc, #88]	; (800c03c <_vfiprintf_r+0x258>)
 800bfe4:	a904      	add	r1, sp, #16
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7fc f84e 	bl	8008088 <_printf_float>
 800bfec:	4607      	mov	r7, r0
 800bfee:	1c78      	adds	r0, r7, #1
 800bff0:	d1d6      	bne.n	800bfa0 <_vfiprintf_r+0x1bc>
 800bff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d405      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bff8:	89ab      	ldrh	r3, [r5, #12]
 800bffa:	059a      	lsls	r2, r3, #22
 800bffc:	d402      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c000:	f7ff f8c4 	bl	800b18c <__retarget_lock_release_recursive>
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	065b      	lsls	r3, r3, #25
 800c008:	f53f af12 	bmi.w	800be30 <_vfiprintf_r+0x4c>
 800c00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00e:	e711      	b.n	800be34 <_vfiprintf_r+0x50>
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	462a      	mov	r2, r5
 800c016:	4b09      	ldr	r3, [pc, #36]	; (800c03c <_vfiprintf_r+0x258>)
 800c018:	a904      	add	r1, sp, #16
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7fc fad8 	bl	80085d0 <_printf_i>
 800c020:	e7e4      	b.n	800bfec <_vfiprintf_r+0x208>
 800c022:	bf00      	nop
 800c024:	0800cd0c 	.word	0x0800cd0c
 800c028:	0800cd2c 	.word	0x0800cd2c
 800c02c:	0800ccec 	.word	0x0800ccec
 800c030:	0800cf2c 	.word	0x0800cf2c
 800c034:	0800cf36 	.word	0x0800cf36
 800c038:	08008089 	.word	0x08008089
 800c03c:	0800bdbf 	.word	0x0800bdbf
 800c040:	0800cf32 	.word	0x0800cf32

0800c044 <__srget_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	4605      	mov	r5, r0
 800c04a:	b118      	cbz	r0, 800c054 <__srget_r+0x10>
 800c04c:	6983      	ldr	r3, [r0, #24]
 800c04e:	b90b      	cbnz	r3, 800c054 <__srget_r+0x10>
 800c050:	f7fe fc1a 	bl	800a888 <__sinit>
 800c054:	4b0e      	ldr	r3, [pc, #56]	; (800c090 <__srget_r+0x4c>)
 800c056:	429c      	cmp	r4, r3
 800c058:	d10d      	bne.n	800c076 <__srget_r+0x32>
 800c05a:	686c      	ldr	r4, [r5, #4]
 800c05c:	4621      	mov	r1, r4
 800c05e:	4628      	mov	r0, r5
 800c060:	f000 f91e 	bl	800c2a0 <__srefill_r>
 800c064:	b988      	cbnz	r0, 800c08a <__srget_r+0x46>
 800c066:	6863      	ldr	r3, [r4, #4]
 800c068:	3b01      	subs	r3, #1
 800c06a:	6063      	str	r3, [r4, #4]
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	6022      	str	r2, [r4, #0]
 800c072:	7818      	ldrb	r0, [r3, #0]
 800c074:	bd38      	pop	{r3, r4, r5, pc}
 800c076:	4b07      	ldr	r3, [pc, #28]	; (800c094 <__srget_r+0x50>)
 800c078:	429c      	cmp	r4, r3
 800c07a:	d101      	bne.n	800c080 <__srget_r+0x3c>
 800c07c:	68ac      	ldr	r4, [r5, #8]
 800c07e:	e7ed      	b.n	800c05c <__srget_r+0x18>
 800c080:	4b05      	ldr	r3, [pc, #20]	; (800c098 <__srget_r+0x54>)
 800c082:	429c      	cmp	r4, r3
 800c084:	bf08      	it	eq
 800c086:	68ec      	ldreq	r4, [r5, #12]
 800c088:	e7e8      	b.n	800c05c <__srget_r+0x18>
 800c08a:	f04f 30ff 	mov.w	r0, #4294967295
 800c08e:	e7f1      	b.n	800c074 <__srget_r+0x30>
 800c090:	0800cd0c 	.word	0x0800cd0c
 800c094:	0800cd2c 	.word	0x0800cd2c
 800c098:	0800ccec 	.word	0x0800ccec
 800c09c:	00000000 	.word	0x00000000

0800c0a0 <nan>:
 800c0a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c0a8 <nan+0x8>
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	7ff80000 	.word	0x7ff80000

0800c0b0 <_sbrk_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d06      	ldr	r5, [pc, #24]	; (800c0cc <_sbrk_r+0x1c>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	f7f7 fb10 	bl	80036e0 <_sbrk>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_sbrk_r+0x1a>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_sbrk_r+0x1a>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	200009e4 	.word	0x200009e4

0800c0d0 <__sread>:
 800c0d0:	b510      	push	{r4, lr}
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d8:	f000 f8c6 	bl	800c268 <_read_r>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	bfab      	itete	ge
 800c0e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0e2:	89a3      	ldrhlt	r3, [r4, #12]
 800c0e4:	181b      	addge	r3, r3, r0
 800c0e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0ea:	bfac      	ite	ge
 800c0ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0ee:	81a3      	strhlt	r3, [r4, #12]
 800c0f0:	bd10      	pop	{r4, pc}

0800c0f2 <__swrite>:
 800c0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f6:	461f      	mov	r7, r3
 800c0f8:	898b      	ldrh	r3, [r1, #12]
 800c0fa:	05db      	lsls	r3, r3, #23
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	460c      	mov	r4, r1
 800c100:	4616      	mov	r6, r2
 800c102:	d505      	bpl.n	800c110 <__swrite+0x1e>
 800c104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c108:	2302      	movs	r3, #2
 800c10a:	2200      	movs	r2, #0
 800c10c:	f000 f88e 	bl	800c22c <_lseek_r>
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c116:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	4632      	mov	r2, r6
 800c11e:	463b      	mov	r3, r7
 800c120:	4628      	mov	r0, r5
 800c122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c126:	f000 b835 	b.w	800c194 <_write_r>

0800c12a <__sseek>:
 800c12a:	b510      	push	{r4, lr}
 800c12c:	460c      	mov	r4, r1
 800c12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c132:	f000 f87b 	bl	800c22c <_lseek_r>
 800c136:	1c43      	adds	r3, r0, #1
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	bf15      	itete	ne
 800c13c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c13e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c142:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c146:	81a3      	strheq	r3, [r4, #12]
 800c148:	bf18      	it	ne
 800c14a:	81a3      	strhne	r3, [r4, #12]
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <__sclose>:
 800c14e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c152:	f000 b839 	b.w	800c1c8 <_close_r>

0800c156 <strncmp>:
 800c156:	b510      	push	{r4, lr}
 800c158:	b16a      	cbz	r2, 800c176 <strncmp+0x20>
 800c15a:	3901      	subs	r1, #1
 800c15c:	1884      	adds	r4, r0, r2
 800c15e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c162:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c166:	4293      	cmp	r3, r2
 800c168:	d103      	bne.n	800c172 <strncmp+0x1c>
 800c16a:	42a0      	cmp	r0, r4
 800c16c:	d001      	beq.n	800c172 <strncmp+0x1c>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d1f5      	bne.n	800c15e <strncmp+0x8>
 800c172:	1a98      	subs	r0, r3, r2
 800c174:	bd10      	pop	{r4, pc}
 800c176:	4610      	mov	r0, r2
 800c178:	e7fc      	b.n	800c174 <strncmp+0x1e>

0800c17a <__ascii_wctomb>:
 800c17a:	b149      	cbz	r1, 800c190 <__ascii_wctomb+0x16>
 800c17c:	2aff      	cmp	r2, #255	; 0xff
 800c17e:	bf85      	ittet	hi
 800c180:	238a      	movhi	r3, #138	; 0x8a
 800c182:	6003      	strhi	r3, [r0, #0]
 800c184:	700a      	strbls	r2, [r1, #0]
 800c186:	f04f 30ff 	movhi.w	r0, #4294967295
 800c18a:	bf98      	it	ls
 800c18c:	2001      	movls	r0, #1
 800c18e:	4770      	bx	lr
 800c190:	4608      	mov	r0, r1
 800c192:	4770      	bx	lr

0800c194 <_write_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	; (800c1b4 <_write_r+0x20>)
 800c198:	4604      	mov	r4, r0
 800c19a:	4608      	mov	r0, r1
 800c19c:	4611      	mov	r1, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	602a      	str	r2, [r5, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f7f7 fa4b 	bl	800363e <_write>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_write_r+0x1e>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_write_r+0x1e>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	200009e4 	.word	0x200009e4

0800c1b8 <abort>:
 800c1b8:	b508      	push	{r3, lr}
 800c1ba:	2006      	movs	r0, #6
 800c1bc:	f000 f922 	bl	800c404 <raise>
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	f7f7 fa21 	bl	8003608 <_exit>
	...

0800c1c8 <_close_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	; (800c1e4 <_close_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f7 fa4f 	bl	8003676 <_close>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_close_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_close_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	200009e4 	.word	0x200009e4

0800c1e8 <_fstat_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	; (800c208 <_fstat_r+0x20>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	f7f7 fa4a 	bl	800368e <_fstat>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d102      	bne.n	800c204 <_fstat_r+0x1c>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	b103      	cbz	r3, 800c204 <_fstat_r+0x1c>
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	200009e4 	.word	0x200009e4

0800c20c <_isatty_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d06      	ldr	r5, [pc, #24]	; (800c228 <_isatty_r+0x1c>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f7 fa49 	bl	80036ae <_isatty>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_isatty_r+0x1a>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_isatty_r+0x1a>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	200009e4 	.word	0x200009e4

0800c22c <_lseek_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	; (800c24c <_lseek_r+0x20>)
 800c230:	4604      	mov	r4, r0
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	2200      	movs	r2, #0
 800c238:	602a      	str	r2, [r5, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7f7 fa42 	bl	80036c4 <_lseek>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_lseek_r+0x1e>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_lseek_r+0x1e>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	200009e4 	.word	0x200009e4

0800c250 <__malloc_lock>:
 800c250:	4801      	ldr	r0, [pc, #4]	; (800c258 <__malloc_lock+0x8>)
 800c252:	f7fe bf9a 	b.w	800b18a <__retarget_lock_acquire_recursive>
 800c256:	bf00      	nop
 800c258:	200009dc 	.word	0x200009dc

0800c25c <__malloc_unlock>:
 800c25c:	4801      	ldr	r0, [pc, #4]	; (800c264 <__malloc_unlock+0x8>)
 800c25e:	f7fe bf95 	b.w	800b18c <__retarget_lock_release_recursive>
 800c262:	bf00      	nop
 800c264:	200009dc 	.word	0x200009dc

0800c268 <_read_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d07      	ldr	r5, [pc, #28]	; (800c288 <_read_r+0x20>)
 800c26c:	4604      	mov	r4, r0
 800c26e:	4608      	mov	r0, r1
 800c270:	4611      	mov	r1, r2
 800c272:	2200      	movs	r2, #0
 800c274:	602a      	str	r2, [r5, #0]
 800c276:	461a      	mov	r2, r3
 800c278:	f7f7 f9d0 	bl	800361c <_read>
 800c27c:	1c43      	adds	r3, r0, #1
 800c27e:	d102      	bne.n	800c286 <_read_r+0x1e>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	b103      	cbz	r3, 800c286 <_read_r+0x1e>
 800c284:	6023      	str	r3, [r4, #0]
 800c286:	bd38      	pop	{r3, r4, r5, pc}
 800c288:	200009e4 	.word	0x200009e4

0800c28c <lflush>:
 800c28c:	8983      	ldrh	r3, [r0, #12]
 800c28e:	f003 0309 	and.w	r3, r3, #9
 800c292:	2b09      	cmp	r3, #9
 800c294:	d101      	bne.n	800c29a <lflush+0xe>
 800c296:	f7fe ba8d 	b.w	800a7b4 <fflush>
 800c29a:	2000      	movs	r0, #0
 800c29c:	4770      	bx	lr
	...

0800c2a0 <__srefill_r>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	460c      	mov	r4, r1
 800c2a4:	4605      	mov	r5, r0
 800c2a6:	b118      	cbz	r0, 800c2b0 <__srefill_r+0x10>
 800c2a8:	6983      	ldr	r3, [r0, #24]
 800c2aa:	b90b      	cbnz	r3, 800c2b0 <__srefill_r+0x10>
 800c2ac:	f7fe faec 	bl	800a888 <__sinit>
 800c2b0:	4b3b      	ldr	r3, [pc, #236]	; (800c3a0 <__srefill_r+0x100>)
 800c2b2:	429c      	cmp	r4, r3
 800c2b4:	d10a      	bne.n	800c2cc <__srefill_r+0x2c>
 800c2b6:	686c      	ldr	r4, [r5, #4]
 800c2b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	069e      	lsls	r6, r3, #26
 800c2c4:	d50c      	bpl.n	800c2e0 <__srefill_r+0x40>
 800c2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ca:	e066      	b.n	800c39a <__srefill_r+0xfa>
 800c2cc:	4b35      	ldr	r3, [pc, #212]	; (800c3a4 <__srefill_r+0x104>)
 800c2ce:	429c      	cmp	r4, r3
 800c2d0:	d101      	bne.n	800c2d6 <__srefill_r+0x36>
 800c2d2:	68ac      	ldr	r4, [r5, #8]
 800c2d4:	e7f0      	b.n	800c2b8 <__srefill_r+0x18>
 800c2d6:	4b34      	ldr	r3, [pc, #208]	; (800c3a8 <__srefill_r+0x108>)
 800c2d8:	429c      	cmp	r4, r3
 800c2da:	bf08      	it	eq
 800c2dc:	68ec      	ldreq	r4, [r5, #12]
 800c2de:	e7eb      	b.n	800c2b8 <__srefill_r+0x18>
 800c2e0:	0758      	lsls	r0, r3, #29
 800c2e2:	d448      	bmi.n	800c376 <__srefill_r+0xd6>
 800c2e4:	06d9      	lsls	r1, r3, #27
 800c2e6:	d405      	bmi.n	800c2f4 <__srefill_r+0x54>
 800c2e8:	2309      	movs	r3, #9
 800c2ea:	602b      	str	r3, [r5, #0]
 800c2ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2f0:	81a3      	strh	r3, [r4, #12]
 800c2f2:	e7e8      	b.n	800c2c6 <__srefill_r+0x26>
 800c2f4:	071a      	lsls	r2, r3, #28
 800c2f6:	d50b      	bpl.n	800c310 <__srefill_r+0x70>
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4628      	mov	r0, r5
 800c2fc:	f7fe fa1e 	bl	800a73c <_fflush_r>
 800c300:	2800      	cmp	r0, #0
 800c302:	d1e0      	bne.n	800c2c6 <__srefill_r+0x26>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	60a0      	str	r0, [r4, #8]
 800c308:	f023 0308 	bic.w	r3, r3, #8
 800c30c:	81a3      	strh	r3, [r4, #12]
 800c30e:	61a0      	str	r0, [r4, #24]
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f043 0304 	orr.w	r3, r3, #4
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	b91b      	cbnz	r3, 800c324 <__srefill_r+0x84>
 800c31c:	4621      	mov	r1, r4
 800c31e:	4628      	mov	r0, r5
 800c320:	f7fe ff5a 	bl	800b1d8 <__smakebuf_r>
 800c324:	89a6      	ldrh	r6, [r4, #12]
 800c326:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800c32a:	07b3      	lsls	r3, r6, #30
 800c32c:	d00f      	beq.n	800c34e <__srefill_r+0xae>
 800c32e:	2301      	movs	r3, #1
 800c330:	81a3      	strh	r3, [r4, #12]
 800c332:	4b1e      	ldr	r3, [pc, #120]	; (800c3ac <__srefill_r+0x10c>)
 800c334:	491e      	ldr	r1, [pc, #120]	; (800c3b0 <__srefill_r+0x110>)
 800c336:	6818      	ldr	r0, [r3, #0]
 800c338:	f006 0609 	and.w	r6, r6, #9
 800c33c:	f7fe fb34 	bl	800a9a8 <_fwalk>
 800c340:	2e09      	cmp	r6, #9
 800c342:	81a7      	strh	r7, [r4, #12]
 800c344:	d103      	bne.n	800c34e <__srefill_r+0xae>
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f7fe f971 	bl	800a630 <__sflush_r>
 800c34e:	6922      	ldr	r2, [r4, #16]
 800c350:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c352:	6963      	ldr	r3, [r4, #20]
 800c354:	6a21      	ldr	r1, [r4, #32]
 800c356:	6022      	str	r2, [r4, #0]
 800c358:	4628      	mov	r0, r5
 800c35a:	47b0      	blx	r6
 800c35c:	2800      	cmp	r0, #0
 800c35e:	6060      	str	r0, [r4, #4]
 800c360:	dc1c      	bgt.n	800c39c <__srefill_r+0xfc>
 800c362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c366:	bf17      	itett	ne
 800c368:	2200      	movne	r2, #0
 800c36a:	f043 0320 	orreq.w	r3, r3, #32
 800c36e:	6062      	strne	r2, [r4, #4]
 800c370:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800c374:	e7bc      	b.n	800c2f0 <__srefill_r+0x50>
 800c376:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c378:	2900      	cmp	r1, #0
 800c37a:	d0cd      	beq.n	800c318 <__srefill_r+0x78>
 800c37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c380:	4299      	cmp	r1, r3
 800c382:	d002      	beq.n	800c38a <__srefill_r+0xea>
 800c384:	4628      	mov	r0, r5
 800c386:	f7ff fc59 	bl	800bc3c <_free_r>
 800c38a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c38c:	6063      	str	r3, [r4, #4]
 800c38e:	2000      	movs	r0, #0
 800c390:	6360      	str	r0, [r4, #52]	; 0x34
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0c0      	beq.n	800c318 <__srefill_r+0x78>
 800c396:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39c:	2000      	movs	r0, #0
 800c39e:	e7fc      	b.n	800c39a <__srefill_r+0xfa>
 800c3a0:	0800cd0c 	.word	0x0800cd0c
 800c3a4:	0800cd2c 	.word	0x0800cd2c
 800c3a8:	0800ccec 	.word	0x0800ccec
 800c3ac:	0800ca2c 	.word	0x0800ca2c
 800c3b0:	0800c28d 	.word	0x0800c28d

0800c3b4 <_raise_r>:
 800c3b4:	291f      	cmp	r1, #31
 800c3b6:	b538      	push	{r3, r4, r5, lr}
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	460d      	mov	r5, r1
 800c3bc:	d904      	bls.n	800c3c8 <_raise_r+0x14>
 800c3be:	2316      	movs	r3, #22
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c6:	bd38      	pop	{r3, r4, r5, pc}
 800c3c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3ca:	b112      	cbz	r2, 800c3d2 <_raise_r+0x1e>
 800c3cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3d0:	b94b      	cbnz	r3, 800c3e6 <_raise_r+0x32>
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 f830 	bl	800c438 <_getpid_r>
 800c3d8:	462a      	mov	r2, r5
 800c3da:	4601      	mov	r1, r0
 800c3dc:	4620      	mov	r0, r4
 800c3de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3e2:	f000 b817 	b.w	800c414 <_kill_r>
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d00a      	beq.n	800c400 <_raise_r+0x4c>
 800c3ea:	1c59      	adds	r1, r3, #1
 800c3ec:	d103      	bne.n	800c3f6 <_raise_r+0x42>
 800c3ee:	2316      	movs	r3, #22
 800c3f0:	6003      	str	r3, [r0, #0]
 800c3f2:	2001      	movs	r0, #1
 800c3f4:	e7e7      	b.n	800c3c6 <_raise_r+0x12>
 800c3f6:	2400      	movs	r4, #0
 800c3f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	4798      	blx	r3
 800c400:	2000      	movs	r0, #0
 800c402:	e7e0      	b.n	800c3c6 <_raise_r+0x12>

0800c404 <raise>:
 800c404:	4b02      	ldr	r3, [pc, #8]	; (800c410 <raise+0xc>)
 800c406:	4601      	mov	r1, r0
 800c408:	6818      	ldr	r0, [r3, #0]
 800c40a:	f7ff bfd3 	b.w	800c3b4 <_raise_r>
 800c40e:	bf00      	nop
 800c410:	2000000c 	.word	0x2000000c

0800c414 <_kill_r>:
 800c414:	b538      	push	{r3, r4, r5, lr}
 800c416:	4d07      	ldr	r5, [pc, #28]	; (800c434 <_kill_r+0x20>)
 800c418:	2300      	movs	r3, #0
 800c41a:	4604      	mov	r4, r0
 800c41c:	4608      	mov	r0, r1
 800c41e:	4611      	mov	r1, r2
 800c420:	602b      	str	r3, [r5, #0]
 800c422:	f7f7 f8e1 	bl	80035e8 <_kill>
 800c426:	1c43      	adds	r3, r0, #1
 800c428:	d102      	bne.n	800c430 <_kill_r+0x1c>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	b103      	cbz	r3, 800c430 <_kill_r+0x1c>
 800c42e:	6023      	str	r3, [r4, #0]
 800c430:	bd38      	pop	{r3, r4, r5, pc}
 800c432:	bf00      	nop
 800c434:	200009e4 	.word	0x200009e4

0800c438 <_getpid_r>:
 800c438:	f7f7 b8ce 	b.w	80035d8 <_getpid>

0800c43c <_init>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	bf00      	nop
 800c440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c442:	bc08      	pop	{r3}
 800c444:	469e      	mov	lr, r3
 800c446:	4770      	bx	lr

0800c448 <_fini>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	bf00      	nop
 800c44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44e:	bc08      	pop	{r3}
 800c450:	469e      	mov	lr, r3
 800c452:	4770      	bx	lr
