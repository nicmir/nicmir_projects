
TRR2021_Roulant_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010214  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  080103e8  080103e8  000203e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011200  08011200  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08011200  08011200  00021200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011208  08011208  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011208  08011208  00021208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801120c  0801120c  0002120c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08011210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  20000200  08011410  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d5c  08011410  00030d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d1e  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d6  00000000  00000000  00049f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0004d328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  0004e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295fc  00000000  00000000  0004f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ba9  00000000  00000000  00078fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fba91  00000000  00000000  00091b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018d626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c68  00000000  00000000  0018d67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080103cc 	.word	0x080103cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080103cc 	.word	0x080103cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <gyro_read_8bit_register>:
uint8_t gyro_read_8bit_register(
		uint8_t device_address,
		uint8_t register_address,
		HAL_StatusTypeDef * res
	)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af02      	add	r7, sp, #8
 8001052:	4603      	mov	r3, r0
 8001054:	603a      	str	r2, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	460b      	mov	r3, r1
 800105a:	71bb      	strb	r3, [r7, #6]
	// send the register address to I2C device
	*res = HAL_I2C_Master_Transmit(&hi2c1, device_address << 1, &register_address , 1, 10);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	b29b      	uxth	r3, r3
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	b299      	uxth	r1, r3
 8001064:	1dba      	adds	r2, r7, #6
 8001066:	230a      	movs	r3, #10
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	4814      	ldr	r0, [pc, #80]	; (80010c0 <gyro_read_8bit_register+0x74>)
 800106e:	f005 fa45 	bl	80064fc <HAL_I2C_Master_Transmit>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	701a      	strb	r2, [r3, #0]
	if(*res==HAL_OK)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d119      	bne.n	80010b6 <gyro_read_8bit_register+0x6a>
	{
		uint8_t data = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	73fb      	strb	r3, [r7, #15]
		// read the register value from I2C device
		*res = HAL_I2C_Master_Receive(&hi2c1, device_address << 1, &data, 1, 10);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	b29b      	uxth	r3, r3
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	b299      	uxth	r1, r3
 800108e:	f107 020f 	add.w	r2, r7, #15
 8001092:	230a      	movs	r3, #10
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <gyro_read_8bit_register+0x74>)
 800109a:	f005 fb23 	bl	80066e4 <HAL_I2C_Master_Receive>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	701a      	strb	r2, [r3, #0]
		if(*res==HAL_OK)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <gyro_read_8bit_register+0x66>
		{
			// return the register value
			return data;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	e002      	b.n	80010b8 <gyro_read_8bit_register+0x6c>
		}
		else
		{
			return 0xFF;
 80010b2:	23ff      	movs	r3, #255	; 0xff
 80010b4:	e000      	b.n	80010b8 <gyro_read_8bit_register+0x6c>
		}
	}
	else
	{
		return 0xFF;
 80010b6:	23ff      	movs	r3, #255	; 0xff
	}
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200004d8 	.word	0x200004d8

080010c4 <gyro_write_8bit_register>:
		uint8_t device_address,
		uint8_t register_address,
		uint8_t data,
		HAL_StatusTypeDef * res
	)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	460b      	mov	r3, r1
 80010d2:	71bb      	strb	r3, [r7, #6]
 80010d4:	4613      	mov	r3, r2
 80010d6:	717b      	strb	r3, [r7, #5]
	// send the register address and data to I2C device
	uint8_t data_buf[]= {register_address, data};
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	733b      	strb	r3, [r7, #12]
 80010dc:	797b      	ldrb	r3, [r7, #5]
 80010de:	737b      	strb	r3, [r7, #13]
	*res = HAL_I2C_Master_Transmit(&hi2c1, device_address << 1, data_buf , 2, 10);
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	b299      	uxth	r1, r3
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	230a      	movs	r3, #10
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2302      	movs	r3, #2
 80010f2:	4805      	ldr	r0, [pc, #20]	; (8001108 <gyro_write_8bit_register+0x44>)
 80010f4:	f005 fa02 	bl	80064fc <HAL_I2C_Master_Transmit>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	701a      	strb	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200004d8 	.word	0x200004d8

0800110c <gyro_init>:

// public functions ///////////////////////////////////////////////////////////

uint32_t gyro_init()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	uint8_t res_read;
	HAL_StatusTypeDef result;
	uint8_t who_am_i;

	ctx.raw_value = 0;
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <gyro_init+0xf0>)
 8001114:	2200      	movs	r2, #0
 8001116:	801a      	strh	r2, [r3, #0]
	ctx.rate = 0.0;
 8001118:	4b38      	ldr	r3, [pc, #224]	; (80011fc <gyro_init+0xf0>)
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
	ctx.bias = INIT_GYRO_BIAS;
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <gyro_init+0xf0>)
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
	ctx.heading = 0.0f;
 8001128:	4b34      	ldr	r3, [pc, #208]	; (80011fc <gyro_init+0xf0>)
 800112a:	f04f 0200 	mov.w	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
	ctx.locked = 0;
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <gyro_init+0xf0>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]

	who_am_i = gyro_read_8bit_register(GYRO_I2C_ADDRESS,WHO_AM_I_ADDRESS,&result);
 8001136:	1d7b      	adds	r3, r7, #5
 8001138:	461a      	mov	r2, r3
 800113a:	210f      	movs	r1, #15
 800113c:	206b      	movs	r0, #107	; 0x6b
 800113e:	f7ff ff85 	bl	800104c <gyro_read_8bit_register>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
	if(result != HAL_OK)
 8001146:	797b      	ldrb	r3, [r7, #5]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <gyro_init+0x44>
	{
		return GYRO_NOT_DETECTED;
 800114c:	2301      	movs	r3, #1
 800114e:	e051      	b.n	80011f4 <gyro_init+0xe8>
	}
	if(who_am_i != WHO_AM_I_VALUE)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b69      	cmp	r3, #105	; 0x69
 8001154:	d001      	beq.n	800115a <gyro_init+0x4e>
	{
		return GYRO_NOT_IDENTIFIED;
 8001156:	2302      	movs	r3, #2
 8001158:	e04c      	b.n	80011f4 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL2, CTRL2_value_init, &result);
 800115a:	1d7b      	adds	r3, r7, #5
 800115c:	2230      	movs	r2, #48	; 0x30
 800115e:	2111      	movs	r1, #17
 8001160:	206b      	movs	r0, #107	; 0x6b
 8001162:	f7ff ffaf 	bl	80010c4 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL2, &result);
 8001166:	1d7b      	adds	r3, r7, #5
 8001168:	461a      	mov	r2, r3
 800116a:	2111      	movs	r1, #17
 800116c:	206b      	movs	r0, #107	; 0x6b
 800116e:	f7ff ff6d 	bl	800104c <gyro_read_8bit_register>
 8001172:	4603      	mov	r3, r0
 8001174:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL2_value_init)
 8001176:	79bb      	ldrb	r3, [r7, #6]
 8001178:	2b30      	cmp	r3, #48	; 0x30
 800117a:	d001      	beq.n	8001180 <gyro_init+0x74>
	{
		return GYRO_SETUP_FAILURE;
 800117c:	2302      	movs	r3, #2
 800117e:	e039      	b.n	80011f4 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL3, CTRL3_value_init, &result);
 8001180:	1d7b      	adds	r3, r7, #5
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	2112      	movs	r1, #18
 8001186:	206b      	movs	r0, #107	; 0x6b
 8001188:	f7ff ff9c 	bl	80010c4 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL3, &result);
 800118c:	1d7b      	adds	r3, r7, #5
 800118e:	461a      	mov	r2, r3
 8001190:	2112      	movs	r1, #18
 8001192:	206b      	movs	r0, #107	; 0x6b
 8001194:	f7ff ff5a 	bl	800104c <gyro_read_8bit_register>
 8001198:	4603      	mov	r3, r0
 800119a:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL3_value_init)
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	2b40      	cmp	r3, #64	; 0x40
 80011a0:	d001      	beq.n	80011a6 <gyro_init+0x9a>
	{
		return GYRO_SETUP_FAILURE;
 80011a2:	2302      	movs	r3, #2
 80011a4:	e026      	b.n	80011f4 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL7, CTRL7_value_init, &result);
 80011a6:	1d7b      	adds	r3, r7, #5
 80011a8:	2243      	movs	r2, #67	; 0x43
 80011aa:	2116      	movs	r1, #22
 80011ac:	206b      	movs	r0, #107	; 0x6b
 80011ae:	f7ff ff89 	bl	80010c4 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL7, &result);
 80011b2:	1d7b      	adds	r3, r7, #5
 80011b4:	461a      	mov	r2, r3
 80011b6:	2116      	movs	r1, #22
 80011b8:	206b      	movs	r0, #107	; 0x6b
 80011ba:	f7ff ff47 	bl	800104c <gyro_read_8bit_register>
 80011be:	4603      	mov	r3, r0
 80011c0:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL7_value_init)
 80011c2:	79bb      	ldrb	r3, [r7, #6]
 80011c4:	2b43      	cmp	r3, #67	; 0x43
 80011c6:	d001      	beq.n	80011cc <gyro_init+0xc0>
	{
		return GYRO_SETUP_FAILURE;
 80011c8:	2302      	movs	r3, #2
 80011ca:	e013      	b.n	80011f4 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL10, CTRL10_value_init, &result);
 80011cc:	1d7b      	adds	r3, r7, #5
 80011ce:	2220      	movs	r2, #32
 80011d0:	2119      	movs	r1, #25
 80011d2:	206b      	movs	r0, #107	; 0x6b
 80011d4:	f7ff ff76 	bl	80010c4 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL10, &result);
 80011d8:	1d7b      	adds	r3, r7, #5
 80011da:	461a      	mov	r2, r3
 80011dc:	2119      	movs	r1, #25
 80011de:	206b      	movs	r0, #107	; 0x6b
 80011e0:	f7ff ff34 	bl	800104c <gyro_read_8bit_register>
 80011e4:	4603      	mov	r3, r0
 80011e6:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL10_value_init)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b20      	cmp	r3, #32
 80011ec:	d001      	beq.n	80011f2 <gyro_init+0xe6>
	{
		return GYRO_SETUP_FAILURE;
 80011ee:	2302      	movs	r3, #2
 80011f0:	e000      	b.n	80011f4 <gyro_init+0xe8>
	}
	return GYRO_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000021c 	.word	0x2000021c

08001200 <gyro_update>:

void gyro_update(float duration_s)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef result;
	// TODO : burst read (16bits)
	uint8_t res_read_H = gyro_read_8bit_register(GYRO_I2C_ADDRESS, OUT_Z_H, &result);
 800120a:	f107 030d 	add.w	r3, r7, #13
 800120e:	461a      	mov	r2, r3
 8001210:	2127      	movs	r1, #39	; 0x27
 8001212:	206b      	movs	r0, #107	; 0x6b
 8001214:	f7ff ff1a 	bl	800104c <gyro_read_8bit_register>
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
	uint8_t res_read_L = gyro_read_8bit_register(GYRO_I2C_ADDRESS, OUT_Z_L, &result);
 800121c:	f107 030d 	add.w	r3, r7, #13
 8001220:	461a      	mov	r2, r3
 8001222:	2126      	movs	r1, #38	; 0x26
 8001224:	206b      	movs	r0, #107	; 0x6b
 8001226:	f7ff ff11 	bl	800104c <gyro_read_8bit_register>
 800122a:	4603      	mov	r3, r0
 800122c:	73bb      	strb	r3, [r7, #14]
	ctx.raw_value = ((uint16_t)(res_read_H) << 8) + (uint16_t) res_read_L;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	b29b      	uxth	r3, r3
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b29a      	uxth	r2, r3
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	b29b      	uxth	r3, r3
 800123a:	4413      	add	r3, r2
 800123c:	b29b      	uxth	r3, r3
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <gyro_update+0xc0>)
 8001242:	801a      	strh	r2, [r3, #0]
	ctx.rate = (float)(ctx.raw_value*ANGULAR_RATE_SENSITIVITY_245*GYRO_SENSITIVITY_CORRECTION);
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <gyro_update+0xc0>)
 8001246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f99a 	bl	8000584 <__aeabi_i2d>
 8001250:	a317      	add	r3, pc, #92	; (adr r3, 80012b0 <gyro_update+0xb0>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff f9ff 	bl	8000658 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	a315      	add	r3, pc, #84	; (adr r3, 80012b8 <gyro_update+0xb8>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9f6 	bl	8000658 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fce8 	bl	8000c48 <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <gyro_update+0xc0>)
 800127c:	6053      	str	r3, [r2, #4]
	ctx.heading += (ctx.rate - ctx.bias)*duration_s;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <gyro_update+0xc0>)
 8001280:	ed93 7a03 	vldr	s14, [r3, #12]
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <gyro_update+0xc0>)
 8001286:	edd3 6a01 	vldr	s13, [r3, #4]
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <gyro_update+0xc0>)
 800128c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001290:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001294:	edd7 7a01 	vldr	s15, [r7, #4]
 8001298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <gyro_update+0xc0>)
 80012a2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	1eb851ec 	.word	0x1eb851ec
 80012b4:	3f81eb85 	.word	0x3f81eb85
 80012b8:	00000000 	.word	0x00000000
 80012bc:	3fef5c29 	.word	0x3fef5c29
 80012c0:	2000021c 	.word	0x2000021c

080012c4 <gyro_get_dps>:

float gyro_get_dps()
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
	return ctx.rate- ctx.bias;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <gyro_get_dps+0x20>)
 80012ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <gyro_get_dps+0x20>)
 80012d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	2000021c 	.word	0x2000021c

080012e8 <gyro_reset_heading>:

void gyro_reset_heading()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	ctx.heading = 0.0F;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <gyro_reset_heading+0x18>)
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	60da      	str	r2, [r3, #12]
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	2000021c 	.word	0x2000021c

08001304 <gyro_get_heading>:

float gyro_get_heading()
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	return ctx.heading;
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <gyro_get_heading+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	ee07 3a90 	vmov	s15, r3
}
 8001310:	eeb0 0a67 	vmov.f32	s0, s15
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	2000021c 	.word	0x2000021c

08001320 <gyro_is_calibrated>:

bool gyro_is_calibrated()
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	return ctx.locked >= 128;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <gyro_is_calibrated+0x1c>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b7f      	cmp	r3, #127	; 0x7f
 800132a:	bf8c      	ite	hi
 800132c:	2301      	movhi	r3, #1
 800132e:	2300      	movls	r3, #0
 8001330:	b2db      	uxtb	r3, r3
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	2000021c 	.word	0x2000021c

08001340 <gyro_auto_calibrate>:
float alpha_mean_update = 0.01;
float alpha_variance_update = 0.05;
float alpha_bias_update = 0.01;

void gyro_auto_calibrate(float duration_s)
{
 8001340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	ed87 0a01 	vstr	s0, [r7, #4]
	gyro_update(duration_s);
 800134c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001350:	f7ff ff56 	bl	8001200 <gyro_update>
	// update mean and variance
	mean = alpha_mean_update *ctx.rate + (1.0-alpha_mean_update) * mean;
 8001354:	4b6e      	ldr	r3, [pc, #440]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 8001356:	ed93 7a01 	vldr	s14, [r3, #4]
 800135a:	4b6e      	ldr	r3, [pc, #440]	; (8001514 <gyro_auto_calibrate+0x1d4>)
 800135c:	edd3 7a00 	vldr	s15, [r3]
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001364:	ee17 0a90 	vmov	r0, s15
 8001368:	f7ff f91e 	bl	80005a8 <__aeabi_f2d>
 800136c:	4604      	mov	r4, r0
 800136e:	460d      	mov	r5, r1
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <gyro_auto_calibrate+0x1d4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f917 	bl	80005a8 <__aeabi_f2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	f04f 0000 	mov.w	r0, #0
 8001382:	4965      	ldr	r1, [pc, #404]	; (8001518 <gyro_auto_calibrate+0x1d8>)
 8001384:	f7fe ffb0 	bl	80002e8 <__aeabi_dsub>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4690      	mov	r8, r2
 800138e:	4699      	mov	r9, r3
 8001390:	4b62      	ldr	r3, [pc, #392]	; (800151c <gyro_auto_calibrate+0x1dc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f907 	bl	80005a8 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4640      	mov	r0, r8
 80013a0:	4649      	mov	r1, r9
 80013a2:	f7ff f959 	bl	8000658 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7fe ff9d 	bl	80002ec <__adddf3>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	4610      	mov	r0, r2
 80013b8:	4619      	mov	r1, r3
 80013ba:	f7ff fc45 	bl	8000c48 <__aeabi_d2f>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a56      	ldr	r2, [pc, #344]	; (800151c <gyro_auto_calibrate+0x1dc>)
 80013c2:	6013      	str	r3, [r2, #0]
	variance = alpha_variance_update * pow( ctx.rate-mean,2)  + (1.0-alpha_variance_update) * variance;
 80013c4:	4b56      	ldr	r3, [pc, #344]	; (8001520 <gyro_auto_calibrate+0x1e0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f8ed 	bl	80005a8 <__aeabi_f2d>
 80013ce:	4604      	mov	r4, r0
 80013d0:	460d      	mov	r5, r1
 80013d2:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 80013d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <gyro_auto_calibrate+0x1dc>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e2:	ee17 0a90 	vmov	r0, s15
 80013e6:	f7ff f8df 	bl	80005a8 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001508 <gyro_auto_calibrate+0x1c8>
 80013f2:	ec43 2b10 	vmov	d0, r2, r3
 80013f6:	f00e f841 	bl	800f47c <pow>
 80013fa:	ec53 2b10 	vmov	r2, r3, d0
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7ff f929 	bl	8000658 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	4b44      	ldr	r3, [pc, #272]	; (8001520 <gyro_auto_calibrate+0x1e0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8c8 	bl	80005a8 <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	493d      	ldr	r1, [pc, #244]	; (8001518 <gyro_auto_calibrate+0x1d8>)
 8001422:	f7fe ff61 	bl	80002e8 <__aeabi_dsub>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4690      	mov	r8, r2
 800142c:	4699      	mov	r9, r3
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <gyro_auto_calibrate+0x1e4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f8b8 	bl	80005a8 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4640      	mov	r0, r8
 800143e:	4649      	mov	r1, r9
 8001440:	f7ff f90a 	bl	8000658 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe ff4e 	bl	80002ec <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fbf6 	bl	8000c48 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a31      	ldr	r2, [pc, #196]	; (8001524 <gyro_auto_calibrate+0x1e4>)
 8001460:	6013      	str	r3, [r2, #0]
	// if mean stable, update bias
	if(variance<GYRO_AUTOCAL_VARIANCE_THRESHOLD)
 8001462:	4b30      	ldr	r3, [pc, #192]	; (8001524 <gyro_auto_calibrate+0x1e4>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001528 <gyro_auto_calibrate+0x1e8>
 800146c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d400      	bmi.n	8001478 <gyro_auto_calibrate+0x138>
				(int32_t)(ctx.bias*1000.0),
				(int32_t)(ctx.heading),
				(int32_t)(gyro_get_dps()*1000.0)
								  );
#endif
}
 8001476:	e041      	b.n	80014fc <gyro_auto_calibrate+0x1bc>
		ctx.bias = alpha_bias_update*mean + (1.0-alpha_bias_update)* ctx.bias;
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <gyro_auto_calibrate+0x1ec>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <gyro_auto_calibrate+0x1dc>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001488:	ee17 0a90 	vmov	r0, s15
 800148c:	f7ff f88c 	bl	80005a8 <__aeabi_f2d>
 8001490:	4604      	mov	r4, r0
 8001492:	460d      	mov	r5, r1
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <gyro_auto_calibrate+0x1ec>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f885 	bl	80005a8 <__aeabi_f2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	491c      	ldr	r1, [pc, #112]	; (8001518 <gyro_auto_calibrate+0x1d8>)
 80014a8:	f7fe ff1e 	bl	80002e8 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4690      	mov	r8, r2
 80014b2:	4699      	mov	r9, r3
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f875 	bl	80005a8 <__aeabi_f2d>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4640      	mov	r0, r8
 80014c4:	4649      	mov	r1, r9
 80014c6:	f7ff f8c7 	bl	8000658 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4620      	mov	r0, r4
 80014d0:	4629      	mov	r1, r5
 80014d2:	f7fe ff0b 	bl	80002ec <__adddf3>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fbb3 	bl	8000c48 <__aeabi_d2f>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 80014e6:	6093      	str	r3, [r2, #8]
		if(ctx.locked<1024)
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014f0:	d204      	bcs.n	80014fc <gyro_auto_calibrate+0x1bc>
			++ctx.locked;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <gyro_auto_calibrate+0x1d0>)
 80014fa:	6113      	str	r3, [r2, #16]
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001506:	bf00      	nop
 8001508:	00000000 	.word	0x00000000
 800150c:	40000000 	.word	0x40000000
 8001510:	2000021c 	.word	0x2000021c
 8001514:	20000000 	.word	0x20000000
 8001518:	3ff00000 	.word	0x3ff00000
 800151c:	20000230 	.word	0x20000230
 8001520:	20000004 	.word	0x20000004
 8001524:	20000234 	.word	0x20000234
 8001528:	3d23d70a 	.word	0x3d23d70a
 800152c:	20000008 	.word	0x20000008

08001530 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

	uint8_t ch8=ch;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	b2db      	uxtb	r3, r3
 800153c:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2,(uint8_t *)&ch8,1,HAL_MAX_DELAY);
 800153e:	f107 010f 	add.w	r1, r7, #15
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	2201      	movs	r2, #1
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <__io_putchar+0x28>)
 800154a:	f008 fb79 	bl	8009c40 <HAL_UART_Transmit>

	return ch;
 800154e:	687b      	ldr	r3, [r7, #4]

}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200009cc 	.word	0x200009cc

0800155c <__io_getchar>:

int __io_getchar()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

	int ch8;
	HAL_StatusTypeDef retour;

	ch8 = ' ';
 8001562:	2320      	movs	r3, #32
 8001564:	603b      	str	r3, [r7, #0]

	do {
		retour = HAL_UART_Receive(&huart2,(uint8_t*)&ch8,1,HAL_MAX_DELAY);
 8001566:	4639      	mov	r1, r7
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	2201      	movs	r2, #1
 800156e:	4809      	ldr	r0, [pc, #36]	; (8001594 <__io_getchar+0x38>)
 8001570:	f008 fbf9 	bl	8009d66 <HAL_UART_Receive>
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
		//delay_ms(1);
	} while(retour != HAL_OK);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1f3      	bne.n	8001566 <__io_getchar+0xa>

		if(retour != HAL_OK)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d002      	beq.n	800158a <__io_getchar+0x2e>
			ch8 = -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	603b      	str	r3, [r7, #0]

return ch8;
 800158a:	683b      	ldr	r3, [r7, #0]

}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200009cc 	.word	0x200009cc

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159e:	f003 fd1a 	bl	8004fd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a2:	f000 f8ff 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a6:	f000 ffe3 	bl	8002570 <MX_GPIO_Init>
  MX_DMA_Init();
 80015aa:	f000 ffa3 	bl	80024f4 <MX_DMA_Init>
  MX_I2C1_Init();
 80015ae:	f000 fa8d 	bl	8001acc <MX_I2C1_Init>
  MX_TIM1_Init();
 80015b2:	f000 facb 	bl	8001b4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80015b6:	f000 fb93 	bl	8001ce0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015ba:	f000 fc2f 	bl	8001e1c <MX_TIM3_Init>
  MX_TIM4_Init();
 80015be:	f000 fccb 	bl	8001f58 <MX_TIM4_Init>
  MX_TIM8_Init();
 80015c2:	f000 fd67 	bl	8002094 <MX_TIM8_Init>
  MX_UART4_Init();
 80015c6:	f000 fe41 	bl	800224c <MX_UART4_Init>
  MX_UART5_Init();
 80015ca:	f000 fe6f 	bl	80022ac <MX_UART5_Init>
  MX_UART7_Init();
 80015ce:	f000 fea1 	bl	8002314 <MX_UART7_Init>
  MX_UART8_Init();
 80015d2:	f000 fecf 	bl	8002374 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80015d6:	f000 fefd 	bl	80023d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015da:	f000 ff2b 	bl	8002434 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015de:	f000 ff59 	bl	8002494 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80015e2:	f000 f97d 	bl	80018e0 <MX_ADC1_Init>
  MX_ADC3_Init();
 80015e6:	f000 fa1f 	bl	8001a28 <MX_ADC3_Init>
  MX_ADC2_Init();
 80015ea:	f000 f9cb 	bl	8001984 <MX_ADC2_Init>
  MX_TIM12_Init();
 80015ee:	f000 fda5 	bl	800213c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  printf("+++++++ Buggy TRR 2022 Roulant +++++++\r\n");
 80015f2:	4865      	ldr	r0, [pc, #404]	; (8001788 <main+0x1f0>)
 80015f4:	f00a f970 	bl	800b8d8 <puts>

  // Initialisation des Lidars
  tfminiplus_init();
 80015f8:	f003 fba2 	bl	8004d40 <tfminiplus_init>

  // Initialisation de la gestion radio et commande vehicule
  init_radio_commandes();
 80015fc:	f001 fbb2 	bl	8002d64 <init_radio_commandes>

  // Récupération des parametres de conf

  // Gyro
  if(gyro_init() == GYRO_OK)
 8001600:	f7ff fd84 	bl	800110c <gyro_init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d124      	bne.n	8001654 <main+0xbc>
  {
	  last_time_gyro = HAL_GetTick();
 800160a:	f003 fd35 	bl	8005078 <HAL_GetTick>
 800160e:	6178      	str	r0, [r7, #20]
	  while(gyro_is_calibrated())
 8001610:	e012      	b.n	8001638 <main+0xa0>
	  {
		  HAL_Delay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f003 fd3c 	bl	8005090 <HAL_Delay>
		  current_time = HAL_GetTick();
 8001618:	f003 fd2e 	bl	8005078 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]
		  gyro_auto_calibrate(current_time - last_time_gyro);
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	f7ff fe86 	bl	8001340 <gyro_auto_calibrate>
		  last_time_gyro = current_time;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	617b      	str	r3, [r7, #20]
	  while(gyro_is_calibrated())
 8001638:	f7ff fe72 	bl	8001320 <gyro_is_calibrated>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1e7      	bne.n	8001612 <main+0x7a>
	  }
	  printf("Gyro calibrated\r\n");
 8001642:	4852      	ldr	r0, [pc, #328]	; (800178c <main+0x1f4>)
 8001644:	f00a f948 	bl	800b8d8 <puts>
	  gUpdateGyro = 1;
 8001648:	4b51      	ldr	r3, [pc, #324]	; (8001790 <main+0x1f8>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
	  gyro_reset_heading();
 800164e:	f7ff fe4b 	bl	80012e8 <gyro_reset_heading>
 8001652:	e002      	b.n	800165a <main+0xc2>
  }
  else
	  printf("Erreur d'initialisation du Gyro\r\n");
 8001654:	484f      	ldr	r0, [pc, #316]	; (8001794 <main+0x1fc>)
 8001656:	f00a f93f 	bl	800b8d8 <puts>

  temps_appui_boutonext1 = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	827b      	strh	r3, [r7, #18]
  temps_appui_boutonext2 = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	823b      	strh	r3, [r7, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin)==GPIO_PIN_RESET)
 8001662:	2110      	movs	r1, #16
 8001664:	484c      	ldr	r0, [pc, #304]	; (8001798 <main+0x200>)
 8001666:	f004 fe87 	bl	8006378 <HAL_GPIO_ReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d103      	bne.n	8001678 <main+0xe0>
		  temps_appui_boutonext1 += 10; // La durée d'appui du bouton est allongée de 10 ms
 8001670:	8a7b      	ldrh	r3, [r7, #18]
 8001672:	330a      	adds	r3, #10
 8001674:	827b      	strh	r3, [r7, #18]
 8001676:	e001      	b.n	800167c <main+0xe4>
	  else
		  temps_appui_boutonext1 = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	827b      	strh	r3, [r7, #18]
	  if(HAL_GPIO_ReadPin(boutonExt2_GPIO_Port, boutonExt2_Pin)==GPIO_PIN_RESET)
 800167c:	2120      	movs	r1, #32
 800167e:	4846      	ldr	r0, [pc, #280]	; (8001798 <main+0x200>)
 8001680:	f004 fe7a 	bl	8006378 <HAL_GPIO_ReadPin>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d103      	bne.n	8001692 <main+0xfa>
		  temps_appui_boutonext2 += 10; // La durée d'appui du bouton est allongée de 10 ms
 800168a:	8a3b      	ldrh	r3, [r7, #16]
 800168c:	330a      	adds	r3, #10
 800168e:	823b      	strh	r3, [r7, #16]
 8001690:	e001      	b.n	8001696 <main+0xfe>
	  else
		  temps_appui_boutonext2 = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	823b      	strh	r3, [r7, #16]

	  switch(etat_automate_principal)
 8001696:	4b41      	ldr	r3, [pc, #260]	; (800179c <main+0x204>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d055      	beq.n	800174a <main+0x1b2>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	dc69      	bgt.n	8001776 <main+0x1de>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <main+0x114>
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d036      	beq.n	8001718 <main+0x180>
 80016aa:	e064      	b.n	8001776 <main+0x1de>
	  {
	  case automate_principal_radio :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led verte
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b2:	483b      	ldr	r0, [pc, #236]	; (80017a0 <main+0x208>)
 80016b4:	f004 fe78 	bl	80063a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	4836      	ldr	r0, [pc, #216]	; (8001798 <main+0x200>)
 80016be:	f004 fe73 	bl	80063a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	4834      	ldr	r0, [pc, #208]	; (8001798 <main+0x200>)
 80016c8:	f004 fe6e 	bl	80063a8 <HAL_GPIO_WritePin>

		  if(temps_appui_boutonext1 > 1000)
 80016cc:	8a7b      	ldrh	r3, [r7, #18]
 80016ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016d2:	d903      	bls.n	80016dc <main+0x144>
			  etat_automate_principal = automate_principal_autonome;
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <main+0x204>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
				radio_dir_get(&direction);
				radio_throttle_get(&throttle);
				vehicule_dir_set(direction);
				vehicule_throttle_set(throttle);
		  }
		  break;
 80016da:	e051      	b.n	8001780 <main+0x1e8>
		  else if(temps_appui_boutonext2 > 1000)
 80016dc:	8a3b      	ldrh	r3, [r7, #16]
 80016de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e2:	d903      	bls.n	80016ec <main+0x154>
			  etat_automate_principal = automate_principal_shell;
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <main+0x204>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	701a      	strb	r2, [r3, #0]
		  break;
 80016ea:	e049      	b.n	8001780 <main+0x1e8>
				radio_dir_get(&direction);
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 f8ff 	bl	80028f4 <radio_dir_get>
				radio_throttle_get(&throttle);
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 f951 	bl	80029a0 <radio_throttle_get>
				vehicule_dir_set(direction);
 80016fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	f001 faa9 	bl	8002c5c <vehicule_dir_set>
				vehicule_throttle_set(throttle);
 800170a:	edd7 7a01 	vldr	s15, [r7, #4]
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	f001 fae5 	bl	8002ce0 <vehicule_throttle_set>
		  break;
 8001716:	e033      	b.n	8001780 <main+0x1e8>
	  case automate_principal_autonome :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led rouge
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171e:	4820      	ldr	r0, [pc, #128]	; (80017a0 <main+0x208>)
 8001720:	f004 fe42 	bl	80063a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001724:	2201      	movs	r2, #1
 8001726:	2180      	movs	r1, #128	; 0x80
 8001728:	481b      	ldr	r0, [pc, #108]	; (8001798 <main+0x200>)
 800172a:	f004 fe3d 	bl	80063a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	4819      	ldr	r0, [pc, #100]	; (8001798 <main+0x200>)
 8001734:	f004 fe38 	bl	80063a8 <HAL_GPIO_WritePin>

		  if(radio_isThereCommand() != 0)
 8001738:	f001 f988 	bl	8002a4c <radio_isThereCommand>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d01d      	beq.n	800177e <main+0x1e6>
			  etat_automate_principal = automate_principal_radio;
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <main+0x204>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
//		  else
//		  {
//			  // Appel de l'automate automatique
//		  }
		  break;
 8001748:	e019      	b.n	800177e <main+0x1e6>
	  case automate_principal_shell :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led bleue
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <main+0x208>)
 8001752:	f004 fe29 	bl	80063a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	480f      	ldr	r0, [pc, #60]	; (8001798 <main+0x200>)
 800175c:	f004 fe24 	bl	80063a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <main+0x200>)
 8001766:	f004 fe1f 	bl	80063a8 <HAL_GPIO_WritePin>

		  // Lancement du shell
		  shell();
 800176a:	f001 fcbf 	bl	80030ec <shell>

		  etat_automate_principal = automate_principal_radio;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <main+0x204>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
		  break;
 8001774:	e004      	b.n	8001780 <main+0x1e8>
	  default :
		  etat_automate_principal = automate_principal_radio;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <main+0x204>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
		  break;
 800177c:	e000      	b.n	8001780 <main+0x1e8>
		  break;
 800177e:	bf00      	nop

	  }

	  // Iteration de l'automate principale toutes les 10 ms.
	  HAL_Delay(10);
 8001780:	200a      	movs	r0, #10
 8001782:	f003 fc85 	bl	8005090 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin)==GPIO_PIN_RESET)
 8001786:	e76c      	b.n	8001662 <main+0xca>
 8001788:	080103e8 	.word	0x080103e8
 800178c:	08010410 	.word	0x08010410
 8001790:	2000027c 	.word	0x2000027c
 8001794:	08010424 	.word	0x08010424
 8001798:	40020c00 	.word	0x40020c00
 800179c:	20000828 	.word	0x20000828
 80017a0:	40021800 	.word	0x40021800

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0b4      	sub	sp, #208	; 0xd0
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017ae:	2230      	movs	r2, #48	; 0x30
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f009 fb82 	bl	800aebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c8:	f107 0308 	add.w	r3, r7, #8
 80017cc:	2284      	movs	r2, #132	; 0x84
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f009 fb73 	bl	800aebc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <SystemClock_Config+0x134>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a3f      	ldr	r2, [pc, #252]	; (80018d8 <SystemClock_Config+0x134>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <SystemClock_Config+0x134>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <SystemClock_Config+0x138>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a3a      	ldr	r2, [pc, #232]	; (80018dc <SystemClock_Config+0x138>)
 80017f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <SystemClock_Config+0x138>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001806:	2302      	movs	r3, #2
 8001808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001812:	2310      	movs	r3, #16
 8001814:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001818:	2302      	movs	r3, #2
 800181a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800181e:	2300      	movs	r3, #0
 8001820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001824:	2308      	movs	r3, #8
 8001826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 800182a:	23d8      	movs	r3, #216	; 0xd8
 800182c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001830:	2302      	movs	r3, #2
 8001832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001840:	4618      	mov	r0, r3
 8001842:	f005 fb0d 	bl	8006e60 <HAL_RCC_OscConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800184c:	f000 ffba 	bl	80027c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001850:	f005 fab6 	bl	8006dc0 <HAL_PWREx_EnableOverDrive>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800185a:	f000 ffb3 	bl	80027c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185e:	230f      	movs	r3, #15
 8001860:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001864:	2302      	movs	r3, #2
 8001866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001870:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001880:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001884:	2107      	movs	r1, #7
 8001886:	4618      	mov	r0, r3
 8001888:	f005 fd8e 	bl	80073a8 <HAL_RCC_ClockConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001892:	f000 ff97 	bl	80027c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001896:	f247 73c0 	movw	r3, #30656	; 0x77c0
 800189a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800189c:	2300      	movs	r3, #0
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018a4:	2300      	movs	r3, #0
 80018a6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 80018b4:	2300      	movs	r3, #0
 80018b6:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018bc:	f107 0308 	add.w	r3, r7, #8
 80018c0:	4618      	mov	r0, r3
 80018c2:	f005 ff47 	bl	8007754 <HAL_RCCEx_PeriphCLKConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80018cc:	f000 ff7a 	bl	80027c4 <Error_Handler>
  }
}
 80018d0:	bf00      	nop
 80018d2:	37d0      	adds	r7, #208	; 0xd0
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40007000 	.word	0x40007000

080018e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <MX_ADC1_Init+0x98>)
 80018f4:	4a21      	ldr	r2, [pc, #132]	; (800197c <MX_ADC1_Init+0x9c>)
 80018f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018f8:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <MX_ADC1_Init+0x98>)
 80018fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <MX_ADC1_Init+0x98>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <MX_ADC1_Init+0x98>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <MX_ADC1_Init+0x98>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <MX_ADC1_Init+0x98>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <MX_ADC1_Init+0x98>)
 800191c:	2200      	movs	r2, #0
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <MX_ADC1_Init+0x98>)
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <MX_ADC1_Init+0xa0>)
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_ADC1_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <MX_ADC1_Init+0x98>)
 800192e:	2201      	movs	r2, #1
 8001930:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_ADC1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_ADC1_Init+0x98>)
 800193c:	2201      	movs	r2, #1
 800193e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <MX_ADC1_Init+0x98>)
 8001942:	f003 fbc9 	bl	80050d8 <HAL_ADC_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800194c:	f000 ff3a 	bl	80027c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001950:	230f      	movs	r3, #15
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001954:	2301      	movs	r3, #1
 8001956:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800195c:	463b      	mov	r3, r7
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_ADC1_Init+0x98>)
 8001962:	f003 fbfd 	bl	8005160 <HAL_ADC_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800196c:	f000 ff2a 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000654 	.word	0x20000654
 800197c:	40012000 	.word	0x40012000
 8001980:	0f000001 	.word	0x0f000001

08001984 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800198a:	463b      	mov	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_ADC2_Init+0x98>)
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <MX_ADC2_Init+0x9c>)
 800199a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <MX_ADC2_Init+0x98>)
 800199e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019c4:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <MX_ADC2_Init+0xa0>)
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_ADC2_Init+0x98>)
 80019e6:	f003 fb77 	bl	80050d8 <HAL_ADC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80019f0:	f000 fee8 	bl	80027c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019f4:	2307      	movs	r3, #7
 80019f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_ADC2_Init+0x98>)
 8001a06:	f003 fbab 	bl	8005160 <HAL_ADC_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001a10:	f000 fed8 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000490 	.word	0x20000490
 8001a20:	40012100 	.word	0x40012100
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <MX_ADC3_Init+0x9c>)
 8001a3e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a46:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <MX_ADC3_Init+0xa0>)
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001a8a:	f003 fb25 	bl	80050d8 <HAL_ADC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001a94:	f000 fe96 	bl	80027c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001a98:	230f      	movs	r3, #15
 8001a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <MX_ADC3_Init+0x98>)
 8001aaa:	f003 fb59 	bl	8005160 <HAL_ADC_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ab4:	f000 fe86 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200006fc 	.word	0x200006fc
 8001ac4:	40012200 	.word	0x40012200
 8001ac8:	0f000001 	.word	0x0f000001

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_I2C1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <MX_I2C1_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b06:	480e      	ldr	r0, [pc, #56]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b08:	f004 fc68 	bl	80063dc <HAL_I2C_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b12:	f000 fe57 	bl	80027c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b16:	2100      	movs	r1, #0
 8001b18:	4809      	ldr	r0, [pc, #36]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b1a:	f005 f8b9 	bl	8006c90 <HAL_I2CEx_ConfigAnalogFilter>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b24:	f000 fe4e 	bl	80027c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b2c:	f005 f8fb 	bl	8006d26 <HAL_I2CEx_ConfigDigitalFilter>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 fe45 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200004d8 	.word	0x200004d8
 8001b44:	40005400 	.word	0x40005400
 8001b48:	20404768 	.word	0x20404768

08001b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b09a      	sub	sp, #104	; 0x68
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	222c      	movs	r2, #44	; 0x2c
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f009 f998 	bl	800aebc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001b8e:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <MX_TIM1_Init+0x190>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 8001b92:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001b94:	22d8      	movs	r2, #216	; 0xd8
 8001b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001b9e:	4b4e      	ldr	r3, [pc, #312]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001ba0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb8:	4847      	ldr	r0, [pc, #284]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001bba:	f006 f9bb 	bl	8007f34 <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f000 fdfe 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4840      	ldr	r0, [pc, #256]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001bd6:	f006 ffcf 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001be0:	f000 fdf0 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001be4:	483c      	ldr	r0, [pc, #240]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001be6:	f006 f9fc 	bl	8007fe2 <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001bf0:	f000 fde8 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c04:	4619      	mov	r1, r3
 8001c06:	4834      	ldr	r0, [pc, #208]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001c08:	f007 fea2 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c12:	f000 fdd7 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	; 0x60
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8001c1a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c20:	2300      	movs	r3, #0
 8001c22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c24:	2300      	movs	r3, #0
 8001c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c38:	2200      	movs	r2, #0
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4826      	ldr	r0, [pc, #152]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001c3e:	f006 fe8b 	bl	8008958 <HAL_TIM_PWM_ConfigChannel>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001c48:	f000 fdbc 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8001c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c56:	2204      	movs	r2, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481f      	ldr	r0, [pc, #124]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001c5c:	f006 fe7c 	bl	8008958 <HAL_TIM_PWM_ConfigChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001c66:	f000 fdad 	bl	80027c4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c72:	2208      	movs	r2, #8
 8001c74:	4619      	mov	r1, r3
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001c78:	f006 fe6e 	bl	8008958 <HAL_TIM_PWM_ConfigChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001c82:	f000 fd9f 	bl	80027c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001cbc:	f007 fed6 	bl	8009a6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8001cc6:	f000 fd7d 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cca:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_TIM1_Init+0x18c>)
 8001ccc:	f002 f906 	bl	8003edc <HAL_TIM_MspPostInit>

}
 8001cd0:	bf00      	nop
 8001cd2:	3768      	adds	r7, #104	; 0x68
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	2000082c 	.word	0x2000082c
 8001cdc:	40010000 	.word	0x40010000

08001ce0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b090      	sub	sp, #64	; 0x40
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 8001d24:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d26:	226c      	movs	r2, #108	; 0x6c
 8001d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001d30:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d44:	4834      	ldr	r0, [pc, #208]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d46:	f006 f8f5 	bl	8007f34 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d50:	f000 fd38 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d5e:	4619      	mov	r1, r3
 8001d60:	482d      	ldr	r0, [pc, #180]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d62:	f006 ff09 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d6c:	f000 fd2a 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d70:	4829      	ldr	r0, [pc, #164]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d72:	f006 fa91 	bl	8008298 <HAL_TIM_IC_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001d7c:	f000 fd22 	bl	80027c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d80:	2304      	movs	r3, #4
 8001d82:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d84:	2350      	movs	r3, #80	; 0x50
 8001d86:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481f      	ldr	r0, [pc, #124]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001d9c:	f006 ffb2 	bl	8008d04 <HAL_TIM_SlaveConfigSynchro>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001da6:	f000 fd0d 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dae:	2301      	movs	r3, #1
 8001db0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4815      	ldr	r0, [pc, #84]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001dc4:	f006 fd33 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001dce:	f000 fcf9 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	2204      	movs	r2, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001de4:	f006 fd23 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8001dee:	f000 fce9 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dfa:	463b      	mov	r3, r7
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_TIM2_Init+0x138>)
 8001e00:	f007 fda6 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001e0a:	f000 fcdb 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	3740      	adds	r7, #64	; 0x40
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000980 	.word	0x20000980

08001e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b090      	sub	sp, #64	; 0x40
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e58:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e5a:	4a3e      	ldr	r2, [pc, #248]	; (8001f54 <MX_TIM3_Init+0x138>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e60:	226c      	movs	r2, #108	; 0x6c
 8001e62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e7e:	4834      	ldr	r0, [pc, #208]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e80:	f006 f858 	bl	8007f34 <HAL_TIM_Base_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001e8a:	f000 fc9b 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e92:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e98:	4619      	mov	r1, r3
 8001e9a:	482d      	ldr	r0, [pc, #180]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001e9c:	f006 fe6c 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ea6:	f000 fc8d 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001eaa:	4829      	ldr	r0, [pc, #164]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001eac:	f006 f9f4 	bl	8008298 <HAL_TIM_IC_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001eb6:	f000 fc85 	bl	80027c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ebe:	2350      	movs	r3, #80	; 0x50
 8001ec0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	481e      	ldr	r0, [pc, #120]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001ed6:	f006 ff15 	bl	8008d04 <HAL_TIM_SlaveConfigSynchro>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001ee0:	f000 fc70 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	4814      	ldr	r0, [pc, #80]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001efe:	f006 fc96 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001f08:	f000 fc5c 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f10:	2302      	movs	r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2204      	movs	r2, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001f1e:	f006 fc86 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8001f28:	f000 fc4c 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_TIM3_Init+0x134>)
 8001f3a:	f007 fd09 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8001f44:	f000 fc3e 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	3740      	adds	r7, #64	; 0x40
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000524 	.word	0x20000524
 8001f54:	40000400 	.word	0x40000400

08001f58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b090      	sub	sp, #64	; 0x40
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <MX_TIM4_Init+0x134>)
 8001f96:	4a3e      	ldr	r2, [pc, #248]	; (8002090 <MX_TIM4_Init+0x138>)
 8001f98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8001f9a:	4b3c      	ldr	r3, [pc, #240]	; (800208c <MX_TIM4_Init+0x134>)
 8001f9c:	226c      	movs	r2, #108	; 0x6c
 8001f9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <MX_TIM4_Init+0x134>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <MX_TIM4_Init+0x134>)
 8001fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <MX_TIM4_Init+0x134>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	4b35      	ldr	r3, [pc, #212]	; (800208c <MX_TIM4_Init+0x134>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fba:	4834      	ldr	r0, [pc, #208]	; (800208c <MX_TIM4_Init+0x134>)
 8001fbc:	f005 ffba 	bl	8007f34 <HAL_TIM_Base_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001fc6:	f000 fbfd 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	482d      	ldr	r0, [pc, #180]	; (800208c <MX_TIM4_Init+0x134>)
 8001fd8:	f006 fdce 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001fe2:	f000 fbef 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001fe6:	4829      	ldr	r0, [pc, #164]	; (800208c <MX_TIM4_Init+0x134>)
 8001fe8:	f006 f956 	bl	8008298 <HAL_TIM_IC_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001ff2:	f000 fbe7 	bl	80027c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ffa:	2350      	movs	r3, #80	; 0x50
 8001ffc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	481e      	ldr	r0, [pc, #120]	; (800208c <MX_TIM4_Init+0x134>)
 8002012:	f006 fe77 	bl	8008d04 <HAL_TIM_SlaveConfigSynchro>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 800201c:	f000 fbd2 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002024:	2301      	movs	r3, #1
 8002026:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	4814      	ldr	r0, [pc, #80]	; (800208c <MX_TIM4_Init+0x134>)
 800203a:	f006 fbf8 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002044:	f000 fbbe 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002048:	2302      	movs	r3, #2
 800204a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800204c:	2302      	movs	r3, #2
 800204e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	2204      	movs	r2, #4
 8002056:	4619      	mov	r1, r3
 8002058:	480c      	ldr	r0, [pc, #48]	; (800208c <MX_TIM4_Init+0x134>)
 800205a:	f006 fbe8 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8002064:	f000 fbae 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002070:	463b      	mov	r3, r7
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_TIM4_Init+0x134>)
 8002076:	f007 fc6b 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 8002080:	f000 fba0 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002084:	bf00      	nop
 8002086:	3740      	adds	r7, #64	; 0x40
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200003c0 	.word	0x200003c0
 8002090:	40000800 	.word	0x40000800

08002094 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800209a:	f107 0310 	add.w	r3, r7, #16
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a8:	1d3b      	adds	r3, r7, #4
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020b4:	4a20      	ldr	r2, [pc, #128]	; (8002138 <MX_TIM8_Init+0xa4>)
 80020b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b16      	ldr	r3, [pc, #88]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80020de:	4815      	ldr	r0, [pc, #84]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020e0:	f005 ff28 	bl	8007f34 <HAL_TIM_Base_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80020ea:	f000 fb6b 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	4619      	mov	r1, r3
 80020fa:	480e      	ldr	r0, [pc, #56]	; (8002134 <MX_TIM8_Init+0xa0>)
 80020fc:	f006 fd3c 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002106:	f000 fb5d 	bl	80027c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <MX_TIM8_Init+0xa0>)
 800211c:	f007 fc18 	bl	8009950 <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002126:	f000 fb4d 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000374 	.word	0x20000374
 8002138:	40010400 	.word	0x40010400

0800213c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08e      	sub	sp, #56	; 0x38
 8002140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <MX_TIM12_Init+0x108>)
 800216e:	4a36      	ldr	r2, [pc, #216]	; (8002248 <MX_TIM12_Init+0x10c>)
 8002170:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 108;
 8002172:	4b34      	ldr	r3, [pc, #208]	; (8002244 <MX_TIM12_Init+0x108>)
 8002174:	226c      	movs	r2, #108	; 0x6c
 8002176:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b32      	ldr	r3, [pc, #200]	; (8002244 <MX_TIM12_Init+0x108>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800217e:	4b31      	ldr	r3, [pc, #196]	; (8002244 <MX_TIM12_Init+0x108>)
 8002180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002184:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002186:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <MX_TIM12_Init+0x108>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218c:	4b2d      	ldr	r3, [pc, #180]	; (8002244 <MX_TIM12_Init+0x108>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002192:	482c      	ldr	r0, [pc, #176]	; (8002244 <MX_TIM12_Init+0x108>)
 8002194:	f005 fece 	bl	8007f34 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 800219e:	f000 fb11 	bl	80027c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80021a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ac:	4619      	mov	r1, r3
 80021ae:	4825      	ldr	r0, [pc, #148]	; (8002244 <MX_TIM12_Init+0x108>)
 80021b0:	f006 fce2 	bl	8008b78 <HAL_TIM_ConfigClockSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 80021ba:	f000 fb03 	bl	80027c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80021be:	4821      	ldr	r0, [pc, #132]	; (8002244 <MX_TIM12_Init+0x108>)
 80021c0:	f006 f86a 	bl	8008298 <HAL_TIM_IC_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 80021ca:	f000 fafb 	bl	80027c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80021ce:	2304      	movs	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80021d2:	2350      	movs	r3, #80	; 0x50
 80021d4:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	4816      	ldr	r0, [pc, #88]	; (8002244 <MX_TIM12_Init+0x108>)
 80021ea:	f006 fd8b 	bl	8008d04 <HAL_TIM_SlaveConfigSynchro>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 80021f4:	f000 fae6 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80021f8:	2300      	movs	r3, #0
 80021fa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80021fc:	2301      	movs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_TIM12_Init+0x108>)
 8002210:	f006 fb0d 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 800221a:	f000 fad3 	bl	80027c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800221e:	2302      	movs	r3, #2
 8002220:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002222:	2302      	movs	r3, #2
 8002224:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	2204      	movs	r2, #4
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_TIM12_Init+0x108>)
 800222e:	f006 fafe 	bl	800882e <HAL_TIM_IC_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8002238:	f000 fac4 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	3738      	adds	r7, #56	; 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000ab0 	.word	0x20000ab0
 8002248:	40001800 	.word	0x40001800

0800224c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002250:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MX_UART4_Init+0x58>)
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <MX_UART4_Init+0x5c>)
 8002254:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002256:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <MX_UART4_Init+0x58>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_UART4_Init+0x58>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_UART4_Init+0x58>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_UART4_Init+0x58>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_UART4_Init+0x58>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_UART4_Init+0x58>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_UART4_Init+0x58>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_UART4_Init+0x58>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_UART4_Init+0x58>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_UART4_Init+0x58>)
 8002290:	f007 fc88 	bl	8009ba4 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800229a:	f000 fa93 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200008fc 	.word	0x200008fc
 80022a8:	40004c00 	.word	0x40004c00

080022ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80022b0:	4b16      	ldr	r3, [pc, #88]	; (800230c <MX_UART5_Init+0x60>)
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <MX_UART5_Init+0x64>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <MX_UART5_Init+0x60>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <MX_UART5_Init+0x60>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_UART5_Init+0x60>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <MX_UART5_Init+0x60>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <MX_UART5_Init+0x60>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <MX_UART5_Init+0x60>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <MX_UART5_Init+0x60>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <MX_UART5_Init+0x60>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <MX_UART5_Init+0x60>)
 80022ea:	2210      	movs	r2, #16
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80022ee:	4b07      	ldr	r3, [pc, #28]	; (800230c <MX_UART5_Init+0x60>)
 80022f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <MX_UART5_Init+0x60>)
 80022f8:	f007 fc54 	bl	8009ba4 <HAL_UART_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8002302:	f000 fa5f 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200005d0 	.word	0x200005d0
 8002310:	40005000 	.word	0x40005000

08002314 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <MX_UART7_Init+0x58>)
 800231a:	4a15      	ldr	r2, [pc, #84]	; (8002370 <MX_UART7_Init+0x5c>)
 800231c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <MX_UART7_Init+0x58>)
 8002320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002324:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <MX_UART7_Init+0x58>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <MX_UART7_Init+0x58>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <MX_UART7_Init+0x58>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <MX_UART7_Init+0x58>)
 800233a:	220c      	movs	r2, #12
 800233c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <MX_UART7_Init+0x58>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <MX_UART7_Init+0x58>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800234a:	4b08      	ldr	r3, [pc, #32]	; (800236c <MX_UART7_Init+0x58>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <MX_UART7_Init+0x58>)
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002356:	4805      	ldr	r0, [pc, #20]	; (800236c <MX_UART7_Init+0x58>)
 8002358:	f007 fc24 	bl	8009ba4 <HAL_UART_Init>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002362:	f000 fa2f 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200002f0 	.word	0x200002f0
 8002370:	40007800 	.word	0x40007800

08002374 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002378:	4b14      	ldr	r3, [pc, #80]	; (80023cc <MX_UART8_Init+0x58>)
 800237a:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <MX_UART8_Init+0x5c>)
 800237c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <MX_UART8_Init+0x58>)
 8002380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002384:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_UART8_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MX_UART8_Init+0x58>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_UART8_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_UART8_Init+0x58>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <MX_UART8_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_UART8_Init+0x58>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <MX_UART8_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_UART8_Init+0x58>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_UART8_Init+0x58>)
 80023b8:	f007 fbf4 	bl	8009ba4 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80023c2:	f000 f9ff 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000878 	.word	0x20000878
 80023d0:	40007c00 	.word	0x40007c00

080023d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <MX_USART1_UART_Init+0x5c>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <MX_USART1_UART_Init+0x58>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_USART1_UART_Init+0x58>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_USART1_UART_Init+0x58>)
 8002418:	f007 fbc4 	bl	8009ba4 <HAL_UART_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002422:	f000 f9cf 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200007a4 	.word	0x200007a4
 8002430:	40011000 	.word	0x40011000

08002434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_USART2_UART_Init+0x58>)
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <MX_USART2_UART_Init+0x5c>)
 800243c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_USART2_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_USART2_UART_Init+0x58>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_USART2_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002478:	f007 fb94 	bl	8009ba4 <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002482:	f000 f99f 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200009cc 	.word	0x200009cc
 8002490:	40004400 	.word	0x40004400

08002494 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_USART3_UART_Init+0x58>)
 800249a:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <MX_USART3_UART_Init+0x5c>)
 800249c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800249e:	4b13      	ldr	r3, [pc, #76]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_USART3_UART_Init+0x58>)
 80024d8:	f007 fb64 	bl	8009ba4 <HAL_UART_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024e2:	f000 f96f 	bl	80027c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000040c 	.word	0x2000040c
 80024f0:	40004800 	.word	0x40004800

080024f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024fa:	4b1c      	ldr	r3, [pc, #112]	; (800256c <MX_DMA_Init+0x78>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a1b      	ldr	r2, [pc, #108]	; (800256c <MX_DMA_Init+0x78>)
 8002500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <MX_DMA_Init+0x78>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	200b      	movs	r0, #11
 8002518:	f003 f941 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800251c:	200b      	movs	r0, #11
 800251e:	f003 f95a 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	200c      	movs	r0, #12
 8002528:	f003 f939 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800252c:	200c      	movs	r0, #12
 800252e:	f003 f952 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	200d      	movs	r0, #13
 8002538:	f003 f931 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800253c:	200d      	movs	r0, #13
 800253e:	f003 f94a 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	200e      	movs	r0, #14
 8002548:	f003 f929 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800254c:	200e      	movs	r0, #14
 800254e:	f003 f942 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2011      	movs	r0, #17
 8002558:	f003 f921 	bl	800579e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800255c:	2011      	movs	r0, #17
 800255e:	f003 f93a 	bl	80057d6 <HAL_NVIC_EnableIRQ>

}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08e      	sub	sp, #56	; 0x38
 8002574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002586:	4b87      	ldr	r3, [pc, #540]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a86      	ldr	r2, [pc, #536]	; (80027a4 <MX_GPIO_Init+0x234>)
 800258c:	f043 0320 	orr.w	r3, r3, #32
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800259e:	4b81      	ldr	r3, [pc, #516]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a80      	ldr	r2, [pc, #512]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b7e      	ldr	r3, [pc, #504]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b6:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	4a7a      	ldr	r2, [pc, #488]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025bc:	f043 0304 	orr.w	r3, r3, #4
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
 80025c2:	4b78      	ldr	r3, [pc, #480]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ce:	4b75      	ldr	r3, [pc, #468]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a74      	ldr	r2, [pc, #464]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a6e      	ldr	r2, [pc, #440]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <MX_GPIO_Init+0x234>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025fe:	4b69      	ldr	r3, [pc, #420]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a68      	ldr	r2, [pc, #416]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002604:	f043 0310 	orr.w	r3, r3, #16
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b66      	ldr	r3, [pc, #408]	; (80027a4 <MX_GPIO_Init+0x234>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a62      	ldr	r2, [pc, #392]	; (80027a4 <MX_GPIO_Init+0x234>)
 800261c:	f043 0308 	orr.w	r3, r3, #8
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b60      	ldr	r3, [pc, #384]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a5c      	ldr	r2, [pc, #368]	; (80027a4 <MX_GPIO_Init+0x234>)
 8002634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b5a      	ldr	r3, [pc, #360]	; (80027a4 <MX_GPIO_Init+0x234>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin, GPIO_PIN_RESET);
 8002646:	2200      	movs	r2, #0
 8002648:	2103      	movs	r1, #3
 800264a:	4857      	ldr	r0, [pc, #348]	; (80027a8 <MX_GPIO_Init+0x238>)
 800264c:	f003 feac 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin, GPIO_PIN_RESET);
 8002650:	2200      	movs	r2, #0
 8002652:	f243 0124 	movw	r1, #12324	; 0x3024
 8002656:	4855      	ldr	r0, [pc, #340]	; (80027ac <MX_GPIO_Init+0x23c>)
 8002658:	f003 fea6 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002662:	4853      	ldr	r0, [pc, #332]	; (80027b0 <MX_GPIO_Init+0x240>)
 8002664:	f003 fea0 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Spare7_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 8002668:	2200      	movs	r2, #0
 800266a:	f248 01c0 	movw	r1, #32960	; 0x80c0
 800266e:	4851      	ldr	r0, [pc, #324]	; (80027b4 <MX_GPIO_Init+0x244>)
 8002670:	f003 fe9a 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 800267a:	484f      	ldr	r0, [pc, #316]	; (80027b8 <MX_GPIO_Init+0x248>)
 800267c:	f003 fe94 	bl	80063a8 <HAL_GPIO_WritePin>
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002686:	484d      	ldr	r0, [pc, #308]	; (80027bc <MX_GPIO_Init+0x24c>)
 8002688:	f003 fe8e 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002692:	484b      	ldr	r0, [pc, #300]	; (80027c0 <MX_GPIO_Init+0x250>)
 8002694:	f003 fe88 	bl	80063a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : qtr_ctrl_odd_Pin qtr_ctrl_even_Pin */
  GPIO_InitStruct.Pin = qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin;
 8002698:	2303      	movs	r3, #3
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269c:	2301      	movs	r3, #1
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2300      	movs	r3, #0
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ac:	4619      	mov	r1, r3
 80026ae:	483e      	ldr	r0, [pc, #248]	; (80027a8 <MX_GPIO_Init+0x238>)
 80026b0:	f003 fcb6 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : lid1_pwr_en_Pin lid2_pwr_en_Pin lid3_pwr_en_Pin cmdLeds_Pin */
  GPIO_InitStruct.Pin = lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin;
 80026b4:	f243 0324 	movw	r3, #12324	; 0x3024
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ba:	2301      	movs	r3, #1
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ca:	4619      	mov	r1, r3
 80026cc:	4837      	ldr	r0, [pc, #220]	; (80027ac <MX_GPIO_Init+0x23c>)
 80026ce:	f003 fca7 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid6_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid6_pwr_en_Pin;
 80026d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d8:	2301      	movs	r3, #1
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e0:	2300      	movs	r3, #0
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid6_pwr_en_GPIO_Port, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	4831      	ldr	r0, [pc, #196]	; (80027b0 <MX_GPIO_Init+0x240>)
 80026ec:	f003 fc98 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare7_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = Spare7_Pin|led3_Pin|led2_Pin;
 80026f0:	f248 03c0 	movw	r3, #32960	; 0x80c0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026f6:	2301      	movs	r3, #1
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	482a      	ldr	r0, [pc, #168]	; (80027b4 <MX_GPIO_Init+0x244>)
 800270a:	f003 fc89 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare6_Pin Spare5_Pin Spare4_Pin Spare3_Pin
                           Spare2_Pin Spare1_Pin Spare0_Pin led1_Pin */
  GPIO_InitStruct.Pin = Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 800270e:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002714:	2301      	movs	r3, #1
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	4824      	ldr	r0, [pc, #144]	; (80027b8 <MX_GPIO_Init+0x248>)
 8002728:	f003 fc7a 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid4_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid4_pwr_en_Pin;
 800272c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid4_pwr_en_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	4619      	mov	r1, r3
 8002744:	481d      	ldr	r0, [pc, #116]	; (80027bc <MX_GPIO_Init+0x24c>)
 8002746:	f003 fc6b 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid5_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid5_pwr_en_Pin;
 800274a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid5_pwr_en_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002760:	4619      	mov	r1, r3
 8002762:	4817      	ldr	r0, [pc, #92]	; (80027c0 <MX_GPIO_Init+0x250>)
 8002764:	f003 fc5c 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : boutonExt1_Pin boutonExt2_Pin */
  GPIO_InitStruct.Pin = boutonExt1_Pin|boutonExt2_Pin;
 8002768:	2330      	movs	r3, #48	; 0x30
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002778:	4619      	mov	r1, r3
 800277a:	480e      	ldr	r0, [pc, #56]	; (80027b4 <MX_GPIO_Init+0x244>)
 800277c:	f003 fc50 	bl	8006020 <HAL_GPIO_Init>

  /*Configure GPIO pins : bouton3_Pin bouton2_Pin bouton1_Pin */
  GPIO_InitStruct.Pin = bouton3_Pin|bouton2_Pin|bouton1_Pin;
 8002780:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800278e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002792:	4619      	mov	r1, r3
 8002794:	4808      	ldr	r0, [pc, #32]	; (80027b8 <MX_GPIO_Init+0x248>)
 8002796:	f003 fc43 	bl	8006020 <HAL_GPIO_Init>

}
 800279a:	bf00      	nop
 800279c:	3738      	adds	r7, #56	; 0x38
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40021c00 	.word	0x40021c00
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40021400 	.word	0x40021400
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40020000 	.word	0x40020000
 80027c0:	40020800 	.word	0x40020800

080027c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027c8:	b672      	cpsid	i
}
 80027ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027cc:	e7fe      	b.n	80027cc <Error_Handler+0x8>
	...

080027d0 <HAL_TIM_IC_CaptureCallback>:
// Speed
static float actual_speed_ms;
static int32_t vitesse_mesuree = -1;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // Callback for PWM input catpure
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	if(htim==&htim3) // DIR from RX
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a3d      	ldr	r2, [pc, #244]	; (80028d0 <HAL_TIM_IC_CaptureCallback+0x100>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d11c      	bne.n	800281a <HAL_TIM_IC_CaptureCallback+0x4a>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7f1b      	ldrb	r3, [r3, #28]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d10c      	bne.n	8002802 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			radio_dir.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80027e8:	2100      	movs	r1, #0
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f006 facc 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a38      	ldr	r2, [pc, #224]	; (80028d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80027f4:	6053      	str	r3, [r2, #4]
			radio_dir.last_time = HAL_GetTick(); // timestamp last pulse
 80027f6:	f002 fc3f 	bl	8005078 <HAL_GetTick>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a35      	ldr	r2, [pc, #212]	; (80028d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 80027fe:	6013      	str	r3, [r2, #0]
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
		{
			vehicule_speedsensor.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
		}
	}
}
 8002800:	e062      	b.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	7f1b      	ldrb	r3, [r3, #28]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d15e      	bne.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
			radio_dir.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800280a:	2104      	movs	r1, #4
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f006 fabb 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 8002812:	4603      	mov	r3, r0
 8002814:	4a2f      	ldr	r2, [pc, #188]	; (80028d4 <HAL_TIM_IC_CaptureCallback+0x104>)
 8002816:	6093      	str	r3, [r2, #8]
}
 8002818:	e056      	b.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
	else if(htim==&htim2) // THR from RX
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d11c      	bne.n	800285c <HAL_TIM_IC_CaptureCallback+0x8c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	7f1b      	ldrb	r3, [r3, #28]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10c      	bne.n	8002844 <HAL_TIM_IC_CaptureCallback+0x74>
			radio_throttle.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800282a:	2100      	movs	r1, #0
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f006 faab 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 8002832:	4603      	mov	r3, r0
 8002834:	4a29      	ldr	r2, [pc, #164]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002836:	6053      	str	r3, [r2, #4]
			radio_throttle.last_time = HAL_GetTick(); // timestamp last pulse
 8002838:	f002 fc1e 	bl	8005078 <HAL_GetTick>
 800283c:	4603      	mov	r3, r0
 800283e:	4a27      	ldr	r2, [pc, #156]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002840:	6013      	str	r3, [r2, #0]
}
 8002842:	e041      	b.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7f1b      	ldrb	r3, [r3, #28]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d13d      	bne.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
			radio_throttle.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800284c:	2104      	movs	r1, #4
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f006 fa9a 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 8002854:	4603      	mov	r3, r0
 8002856:	4a21      	ldr	r2, [pc, #132]	; (80028dc <HAL_TIM_IC_CaptureCallback+0x10c>)
 8002858:	6093      	str	r3, [r2, #8]
}
 800285a:	e035      	b.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
	else if(htim==&htim4) // Spare - SPeedSensorAimant from vehicule
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d111      	bne.n	8002888 <HAL_TIM_IC_CaptureCallback+0xb8>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	7f1b      	ldrb	r3, [r3, #28]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d12d      	bne.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
			nb_impulsions_aimants++;
 800286c:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8002874:	6013      	str	r3, [r2, #0]
			vitesse_mesuree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002876:	2100      	movs	r1, #0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f006 fa85 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	e01f      	b.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
	else if(htim==&htim12) // SpeedSensor from vehicule
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a18      	ldr	r2, [pc, #96]	; (80028ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d11b      	bne.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	7f1b      	ldrb	r3, [r3, #28]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d10c      	bne.n	80028b2 <HAL_TIM_IC_CaptureCallback+0xe2>
			vehicule_speedsensor.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002898:	2100      	movs	r1, #0
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f006 fa74 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80028a4:	6053      	str	r3, [r2, #4]
			vehicule_speedsensor.last_time = HAL_GetTick(); // timestamp last pulse
 80028a6:	f002 fbe7 	bl	8005078 <HAL_GetTick>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	e00a      	b.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	7f1b      	ldrb	r3, [r3, #28]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d106      	bne.n	80028c8 <HAL_TIM_IC_CaptureCallback+0xf8>
			vehicule_speedsensor.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80028ba:	2104      	movs	r1, #4
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f006 fa63 	bl	8008d88 <HAL_TIM_ReadCapturedValue>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80028c6:	6093      	str	r3, [r2, #8]
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000524 	.word	0x20000524
 80028d4:	20000238 	.word	0x20000238
 80028d8:	20000980 	.word	0x20000980
 80028dc:	20000248 	.word	0x20000248
 80028e0:	200003c0 	.word	0x200003c0
 80028e4:	20000278 	.word	0x20000278
 80028e8:	20000018 	.word	0x20000018
 80028ec:	20000ab0 	.word	0x20000ab0
 80028f0:	20000268 	.word	0x20000268

080028f4 <radio_dir_get>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int radio_dir_get(float *a_pDir)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if( (HAL_GetTick() - radio_dir.last_time) > 1000)
 80028fc:	f002 fbbc 	bl	8005078 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <radio_dir_get+0xa0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800290c:	d902      	bls.n	8002914 <radio_dir_get+0x20>
		return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	e03b      	b.n	800298c <radio_dir_get+0x98>
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		if(radio_dir.duty_cycle<1000) radio_dir.duty_cycle = 1000;
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <radio_dir_get+0xa0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291c:	d203      	bcs.n	8002926 <radio_dir_get+0x32>
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <radio_dir_get+0xa0>)
 8002920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002924:	609a      	str	r2, [r3, #8]
		if(radio_dir.duty_cycle>2000) radio_dir.duty_cycle = 2000;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <radio_dir_get+0xa0>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800292e:	d903      	bls.n	8002938 <radio_dir_get+0x44>
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <radio_dir_get+0xa0>)
 8002932:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002936:	609a      	str	r2, [r3, #8]

		*a_pDir = ((float)(radio_dir.duty_cycle) - (float)(radio_dir.duty_cycle_default))*VEHICULE_DIR_MAX/500.0;
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <radio_dir_get+0xa0>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <radio_dir_get+0xa0>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002954:	ee17 0a90 	vmov	r0, s15
 8002958:	f7fd fe26 	bl	80005a8 <__aeabi_f2d>
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <radio_dir_get+0xa4>)
 8002962:	f7fd fe79 	bl	8000658 <__aeabi_dmul>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <radio_dir_get+0xa8>)
 8002974:	f7fd ff9a 	bl	80008ac <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f962 	bl	8000c48 <__aeabi_d2f>
 8002984:	4602      	mov	r2, r0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
	}
	return 0;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000238 	.word	0x20000238
 8002998:	403a0000 	.word	0x403a0000
 800299c:	407f4000 	.word	0x407f4000

080029a0 <radio_throttle_get>:

// Par convention, la vitesse est négative quand on recule.
int radio_throttle_get(float *a_pThrottle)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - radio_throttle.last_time) > 1000)
 80029a8:	f002 fb66 	bl	8005078 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <radio_throttle_get+0xa0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b8:	d902      	bls.n	80029c0 <radio_throttle_get+0x20>
		return -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
 80029be:	e03b      	b.n	8002a38 <radio_throttle_get+0x98>
	else
	{
		if(radio_throttle.duty_cycle<1000) radio_throttle.duty_cycle = 1000;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <radio_throttle_get+0xa0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c8:	d203      	bcs.n	80029d2 <radio_throttle_get+0x32>
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <radio_throttle_get+0xa0>)
 80029cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029d0:	609a      	str	r2, [r3, #8]
		if(radio_throttle.duty_cycle>2000) radio_throttle.duty_cycle = 2000;
 80029d2:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <radio_throttle_get+0xa0>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80029da:	d903      	bls.n	80029e4 <radio_throttle_get+0x44>
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <radio_throttle_get+0xa0>)
 80029de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029e2:	609a      	str	r2, [r3, #8]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		*a_pThrottle = ((float)(radio_throttle.duty_cycle) - (float)(radio_throttle.duty_cycle_default))*VEHICULE_SPEED_MAX/500.0;
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <radio_throttle_get+0xa0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <radio_throttle_get+0xa0>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a00:	ee17 0a90 	vmov	r0, s15
 8002a04:	f7fd fdd0 	bl	80005a8 <__aeabi_f2d>
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <radio_throttle_get+0xa4>)
 8002a0e:	f7fd fe23 	bl	8000658 <__aeabi_dmul>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <radio_throttle_get+0xa8>)
 8002a20:	f7fd ff44 	bl	80008ac <__aeabi_ddiv>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fe f90c 	bl	8000c48 <__aeabi_d2f>
 8002a30:	4602      	mov	r2, r0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000248 	.word	0x20000248
 8002a44:	40240000 	.word	0x40240000
 8002a48:	407f4000 	.word	0x407f4000

08002a4c <radio_isThereCommand>:

int radio_isThereCommand()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
	int retour;
	float direction, throttle;

	// La fonction sert à savoir si on arrête le pilotage automatique, alors par défaut, on considère que le robot reçoit une commande de la télécommande
	retour = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]

	// Mesure de vitesse et de direction
	radio_dir_get(&direction);
 8002a56:	f107 0308 	add.w	r3, r7, #8
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff ff4a 	bl	80028f4 <radio_dir_get>
	radio_throttle_get(&throttle);
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff9c 	bl	80029a0 <radio_throttle_get>
	if((abs(direction) < 3) && (abs(throttle) < 0.5))
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd9c 	bl	80005a8 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	ec43 2b10 	vmov	d0, r2, r3
 8002a78:	f008 f9d9 	bl	800ae2e <abs>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	dc0e      	bgt.n	8002aa0 <radio_isThereCommand+0x54>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd8f 	bl	80005a8 <__aeabi_f2d>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	ec43 2b10 	vmov	d0, r2, r3
 8002a92:	f008 f9cc 	bl	800ae2e <abs>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dc01      	bgt.n	8002aa0 <radio_isThereCommand+0x54>
		retour = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]

	return retour;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <vehicule_speed_get>:

// !!!! A travailler !!!!
int vehicule_speed_get(float *a_pSpeed)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - vehicule_speedsensor.last_time) > 1000)
 8002ab4:	f002 fae0 	bl	8005078 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <vehicule_speed_get+0x84>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac4:	d902      	bls.n	8002acc <vehicule_speed_get+0x20>
		return -1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e02c      	b.n	8002b26 <vehicule_speed_get+0x7a>
	else
	{
		if(vehicule_speedsensor.period<2000) vehicule_speedsensor.period = 2000;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <vehicule_speed_get+0x84>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ad4:	d203      	bcs.n	8002ade <vehicule_speed_get+0x32>
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <vehicule_speed_get+0x84>)
 8002ad8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002adc:	605a      	str	r2, [r3, #4]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		//*a_pSpeed = (float)(vehicule_speedsensor.period)*VEHICULE_SPEED_MAX/500.0;
		*a_pSpeed = VEHICULE_SPEED_MAX*(2000.0/(float)(vehicule_speedsensor.period));
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <vehicule_speed_get+0x84>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	ee17 0a90 	vmov	r0, s15
 8002aee:	f7fd fd5b 	bl	80005a8 <__aeabi_f2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	f04f 0000 	mov.w	r0, #0
 8002afa:	490e      	ldr	r1, [pc, #56]	; (8002b34 <vehicule_speed_get+0x88>)
 8002afc:	f7fd fed6 	bl	80008ac <__aeabi_ddiv>
 8002b00:	4602      	mov	r2, r0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <vehicule_speed_get+0x8c>)
 8002b0e:	f7fd fda3 	bl	8000658 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	f7fe f895 	bl	8000c48 <__aeabi_d2f>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000268 	.word	0x20000268
 8002b34:	409f4000 	.word	0x409f4000
 8002b38:	40240000 	.word	0x40240000
 8002b3c:	00000000 	.word	0x00000000

08002b40 <vehicule_speed_aimant_get>:

// !!!! A travailler !!!!
int vehicule_speed_aimant_get(float *a_pSpeed)
{
 8002b40:	b5b0      	push	{r4, r5, r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	// Speed computation
	*a_pSpeed =  100000.0/(magnet_count*(float)(vitesse_mesuree+1)) / gear_ratio * wheel_perimeter;
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <vehicule_speed_aimant_get+0x98>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <vehicule_speed_aimant_get+0x9c>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b60:	ee17 0a90 	vmov	r0, s15
 8002b64:	f7fd fd20 	bl	80005a8 <__aeabi_f2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	a118      	add	r1, pc, #96	; (adr r1, 8002bd0 <vehicule_speed_aimant_get+0x90>)
 8002b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b72:	f7fd fe9b 	bl	80008ac <__aeabi_ddiv>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	461d      	mov	r5, r3
 8002b7e:	4b18      	ldr	r3, [pc, #96]	; (8002be0 <vehicule_speed_aimant_get+0xa0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fd10 	bl	80005a8 <__aeabi_f2d>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f7fd fe8c 	bl	80008ac <__aeabi_ddiv>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <vehicule_speed_aimant_get+0xa4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fd fd01 	bl	80005a8 <__aeabi_f2d>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4620      	mov	r0, r4
 8002bac:	4629      	mov	r1, r5
 8002bae:	f7fd fd53 	bl	8000658 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fe f845 	bl	8000c48 <__aeabi_d2f>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	601a      	str	r2, [r3, #0]

	return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	40f86a00 	.word	0x40f86a00
 8002bd8:	20000018 	.word	0x20000018
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	20000010 	.word	0x20000010
 8002be4:	20000014 	.word	0x20000014

08002be8 <vehicule_distance_aimant_get>:

// !!!! A travailler !!!!
int vehicule_distance_aimant_get(float *a_pDistance)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	// Distance
	*a_pDistance =  ( (float)(nb_impulsions_aimants) / magnet_count ) / gear_ratio * wheel_perimeter; // m
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <vehicule_distance_aimant_get+0x48>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <vehicule_distance_aimant_get+0x4c>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <vehicule_distance_aimant_get+0x50>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <vehicule_distance_aimant_get+0x54>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000278 	.word	0x20000278
 8002c34:	2000000c 	.word	0x2000000c
 8002c38:	20000010 	.word	0x20000010
 8002c3c:	20000014 	.word	0x20000014

08002c40 <vehicule_distance_aimant_reset>:

// !!!! A travailler !!!!
int vehicule_distance_aimant_reset()
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
	nb_impulsions_aimants = 0;
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <vehicule_distance_aimant_reset+0x18>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

	return 0;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000278 	.word	0x20000278

08002c5c <vehicule_dir_set>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int vehicule_dir_set(float a_dir)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_dir>VEHICULE_DIR_MAX) || (a_dir<-VEHICULE_DIR_MAX))
 8002c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c6a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c76:	dc08      	bgt.n	8002c8a <vehicule_dir_set+0x2e>
 8002c78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c7c:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8002c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d502      	bpl.n	8002c90 <vehicule_dir_set+0x34>
		return -1;
 8002c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8e:	e01d      	b.n	8002ccc <vehicule_dir_set+0x70>
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR2 = 1500 + (int32_t)((a_dir/VEHICULE_DIR_MAX)*500.0);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fd fc89 	bl	80005a8 <__aeabi_f2d>
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	; (8002cd4 <vehicule_dir_set+0x78>)
 8002c9c:	f7fd fe06 	bl	80008ac <__aeabi_ddiv>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <vehicule_dir_set+0x7c>)
 8002cae:	f7fd fcd3 	bl	8000658 <__aeabi_dmul>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f7fd ff7d 	bl	8000bb8 <__aeabi_d2iz>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <vehicule_dir_set+0x80>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	639a      	str	r2, [r3, #56]	; 0x38
	}

	return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	403a0000 	.word	0x403a0000
 8002cd8:	407f4000 	.word	0x407f4000
 8002cdc:	2000082c 	.word	0x2000082c

08002ce0 <vehicule_throttle_set>:

// Par convention, la vitesse est négative quand on recule.
int vehicule_throttle_set(float a_throttle)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_throttle>VEHICULE_SPEED_MAX) || (a_throttle<-VEHICULE_SPEED_MAX))
 8002cea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cfa:	dc08      	bgt.n	8002d0e <vehicule_throttle_set+0x2e>
 8002cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d00:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8002d04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0c:	d502      	bpl.n	8002d14 <vehicule_throttle_set+0x34>
		return -1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d12:	e01d      	b.n	8002d50 <vehicule_throttle_set+0x70>
	else
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR1 = 1500 + (int32_t)((a_throttle/VEHICULE_SPEED_MAX)*500.0);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7fd fc47 	bl	80005a8 <__aeabi_f2d>
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <vehicule_throttle_set+0x78>)
 8002d20:	f7fd fdc4 	bl	80008ac <__aeabi_ddiv>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <vehicule_throttle_set+0x7c>)
 8002d32:	f7fd fc91 	bl	8000658 <__aeabi_dmul>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f7fd ff3b 	bl	8000bb8 <__aeabi_d2iz>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <vehicule_throttle_set+0x80>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34

	return 0;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40240000 	.word	0x40240000
 8002d5c:	407f4000 	.word	0x407f4000
 8002d60:	2000082c 	.word	0x2000082c

08002d64 <init_radio_commandes>:

void init_radio_commandes()
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	// Initialisation de toutes les structures
	radio_dir.last_time = 0;
 8002d68:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <init_radio_commandes+0xdc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
	radio_dir.period = 0;
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <init_radio_commandes+0xdc>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
	radio_dir.duty_cycle = 0;
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <init_radio_commandes+0xdc>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]

	radio_throttle.last_time = 0;
 8002d7a:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <init_radio_commandes+0xe0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
	radio_throttle.period = 0;
 8002d80:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <init_radio_commandes+0xe0>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	605a      	str	r2, [r3, #4]
	radio_throttle.duty_cycle = 0;
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <init_radio_commandes+0xe0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	609a      	str	r2, [r3, #8]

	radio_spare.last_time = 0;
 8002d8c:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <init_radio_commandes+0xe4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
	radio_spare.period = 0;
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <init_radio_commandes+0xe4>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
	radio_spare.duty_cycle = 0;
 8002d98:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <init_radio_commandes+0xe4>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]

	vehicule_speedsensor.last_time = 0;
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <init_radio_commandes+0xe8>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
	vehicule_speedsensor.period = 0;
 8002da4:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <init_radio_commandes+0xe8>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	605a      	str	r2, [r3, #4]
	vehicule_speedsensor.duty_cycle = 0;
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <init_radio_commandes+0xe8>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]

	nb_impulsions_aimants = 0;
 8002db0:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <init_radio_commandes+0xec>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]

	// Démarrage des Timers d'acquisition
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8002db6:	2100      	movs	r1, #0
 8002db8:	4826      	ldr	r0, [pc, #152]	; (8002e54 <init_radio_commandes+0xf0>)
 8002dba:	f005 facf 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	4824      	ldr	r0, [pc, #144]	; (8002e54 <init_radio_commandes+0xf0>)
 8002dc2:	f005 facb 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4823      	ldr	r0, [pc, #140]	; (8002e58 <init_radio_commandes+0xf4>)
 8002dca:	f005 fac7 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8002dce:	2104      	movs	r1, #4
 8002dd0:	4821      	ldr	r0, [pc, #132]	; (8002e58 <init_radio_commandes+0xf4>)
 8002dd2:	f005 fac3 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4820      	ldr	r0, [pc, #128]	; (8002e5c <init_radio_commandes+0xf8>)
 8002dda:	f005 fabf 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_2);
 8002dde:	2104      	movs	r1, #4
 8002de0:	481e      	ldr	r0, [pc, #120]	; (8002e5c <init_radio_commandes+0xf8>)
 8002de2:	f005 fabb 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002de6:	2100      	movs	r1, #0
 8002de8:	481d      	ldr	r0, [pc, #116]	; (8002e60 <init_radio_commandes+0xfc>)
 8002dea:	f005 fab7 	bl	800835c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002dee:	2104      	movs	r1, #4
 8002df0:	481b      	ldr	r0, [pc, #108]	; (8002e60 <init_radio_commandes+0xfc>)
 8002df2:	f005 fab3 	bl	800835c <HAL_TIM_IC_Start_IT>

	// Détermination des valeurs médianes sur la télécommande.
	// Il s'avère que lorsque l'on relache la télécommande le point milieu de la gachette de vitesse
	// et de la direction.
	// On attend une seconde puis on mesure les valeurs par défaut
	HAL_Delay(1000);
 8002df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dfa:	f002 f949 	bl	8005090 <HAL_Delay>
	radio_dir.duty_cycle_default = radio_dir.duty_cycle;
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <init_radio_commandes+0xdc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <init_radio_commandes+0xdc>)
 8002e04:	60d3      	str	r3, [r2, #12]
	radio_throttle.duty_cycle_default = radio_throttle.duty_cycle;
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <init_radio_commandes+0xe0>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <init_radio_commandes+0xe0>)
 8002e0c:	60d3      	str	r3, [r2, #12]
	// TODO : c'est moins pire, mais ce n'est pas encore génial. Il faudrai peut être prévoir une courbe en expo comme sur les télécommandes de planeur

	// Vitesse et direction à 0
	vehicule_dir_set(0.0);
 8002e0e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002e64 <init_radio_commandes+0x100>
 8002e12:	f7ff ff23 	bl	8002c5c <vehicule_dir_set>
	vehicule_throttle_set(0.0);
 8002e16:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002e64 <init_radio_commandes+0x100>
 8002e1a:	f7ff ff61 	bl	8002ce0 <vehicule_throttle_set>
	HAL_Delay(10);
 8002e1e:	200a      	movs	r0, #10
 8002e20:	f002 f936 	bl	8005090 <HAL_Delay>
	vehicule_speedsensor.duty_cycle_default = vehicule_speedsensor.duty_cycle;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <init_radio_commandes+0xe8>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a08      	ldr	r2, [pc, #32]	; (8002e4c <init_radio_commandes+0xe8>)
 8002e2a:	60d3      	str	r3, [r2, #12]

	// Démarrage du Timer de commande
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <init_radio_commandes+0x104>)
 8002e30:	f005 f938 	bl	80080a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002e34:	2104      	movs	r1, #4
 8002e36:	480c      	ldr	r0, [pc, #48]	; (8002e68 <init_radio_commandes+0x104>)
 8002e38:	f005 f934 	bl	80080a4 <HAL_TIM_PWM_Start>

}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000238 	.word	0x20000238
 8002e44:	20000248 	.word	0x20000248
 8002e48:	20000258 	.word	0x20000258
 8002e4c:	20000268 	.word	0x20000268
 8002e50:	20000278 	.word	0x20000278
 8002e54:	20000980 	.word	0x20000980
 8002e58:	20000524 	.word	0x20000524
 8002e5c:	20000ab0 	.word	0x20000ab0
 8002e60:	200003c0 	.word	0x200003c0
 8002e64:	00000000 	.word	0x00000000
 8002e68:	2000082c 	.word	0x2000082c

08002e6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e70:	f3bf 8f4f 	dsb	sy
}
 8002e74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <__NVIC_SystemReset+0x24>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002e7e:	4904      	ldr	r1, [pc, #16]	; (8002e90 <__NVIC_SystemReset+0x24>)
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__NVIC_SystemReset+0x28>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002e86:	f3bf 8f4f 	dsb	sy
}
 8002e8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002e8c:	bf00      	nop
 8002e8e:	e7fd      	b.n	8002e8c <__NVIC_SystemReset+0x20>
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	05fa0004 	.word	0x05fa0004

08002e98 <saisie_commande>:

    return nb_car_valide;
}

char *saisie_commande()
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af00      	add	r7, sp, #0
    char caractere;
	shell_etat etat;
	char *pCommandeCourante;
	unsigned int pointeur_historique;

    nb_car_valide = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
    position = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
	etat = sh_normal;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	74fb      	strb	r3, [r7, #19]

    // Caractere fin de chaine
	pointeur_historique = sh_historique.commande_courante;
 8002eaa:	4b8a      	ldr	r3, [pc, #552]	; (80030d4 <saisie_commande+0x23c>)
 8002eac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002eb0:	60bb      	str	r3, [r7, #8]
	pCommandeCourante = sh_historique.commandes[sh_historique.commande_courante];
 8002eb2:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <saisie_commande+0x23c>)
 8002eb4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002eb8:	2232      	movs	r2, #50	; 0x32
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	4a85      	ldr	r2, [pc, #532]	; (80030d4 <saisie_commande+0x23c>)
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
	pCommandeCourante[position] = 0x0;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]

    do {
        caractere = getchar();
 8002ece:	f007 ffbf 	bl	800ae50 <getchar>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]

		if(etat == sh_normal)
 8002ed6:	7cfb      	ldrb	r3, [r7, #19]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d105      	bne.n	8002ee8 <saisie_commande+0x50>
		{
			if(caractere == 0x1b)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b1b      	cmp	r3, #27
 8002ee0:	d162      	bne.n	8002fa8 <saisie_commande+0x110>
				etat = sh_fleche_en_cours;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	74fb      	strb	r3, [r7, #19]
 8002ee6:	e05f      	b.n	8002fa8 <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_en_cours)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <saisie_commande+0x68>
		{
			if(caractere == 0x5b)
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b5b      	cmp	r3, #91	; 0x5b
 8002ef2:	d102      	bne.n	8002efa <saisie_commande+0x62>
				etat = sh_fleche_confirmee;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	74fb      	strb	r3, [r7, #19]
 8002ef8:	e056      	b.n	8002fa8 <saisie_commande+0x110>
			else
				// Ce n'est pas le code pour une fleche
				// On jete le caractere 0x1b
				etat = sh_normal;
 8002efa:	2300      	movs	r3, #0
 8002efc:	74fb      	strb	r3, [r7, #19]
 8002efe:	e053      	b.n	8002fa8 <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_confirmee)
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d145      	bne.n	8002f92 <saisie_commande+0xfa>
		{
			if(caractere == 0x44)
 8002f06:	79fb      	ldrb	r3, [r7, #7]
 8002f08:	2b44      	cmp	r3, #68	; 0x44
 8002f0a:	d105      	bne.n	8002f18 <saisie_commande+0x80>
			{
				// Fleche vers la gauche
				position -=1;
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 8002f12:	2303      	movs	r3, #3
 8002f14:	74fb      	strb	r3, [r7, #19]
 8002f16:	e047      	b.n	8002fa8 <saisie_commande+0x110>
			}
			else if(caractere == 0x43)
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2b43      	cmp	r3, #67	; 0x43
 8002f1c:	d105      	bne.n	8002f2a <saisie_commande+0x92>
			{
				// Fleche vers la droite
				position +=1;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 8002f24:	2303      	movs	r3, #3
 8002f26:	74fb      	strb	r3, [r7, #19]
 8002f28:	e03e      	b.n	8002fa8 <saisie_commande+0x110>
			}
			else if(caractere == 0x41)
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b41      	cmp	r3, #65	; 0x41
 8002f2e:	d12d      	bne.n	8002f8c <saisie_commande+0xf4>
			{
				// Fleche vers le haut
				if(pointeur_historique == 0)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <saisie_commande+0xa4>
					pointeur_historique = SHELL_MAX_HISTORIQUE-1;
 8002f36:	2304      	movs	r3, #4
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	e002      	b.n	8002f42 <saisie_commande+0xaa>
				else
					pointeur_historique = pointeur_historique-1;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60bb      	str	r3, [r7, #8]
				pCommandeCourante = sh_historique.commandes[pointeur_historique];
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2232      	movs	r2, #50	; 0x32
 8002f46:	fb02 f303 	mul.w	r3, r2, r3
 8002f4a:	4a62      	ldr	r2, [pc, #392]	; (80030d4 <saisie_commande+0x23c>)
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
                printf("\r\n                                                  ");
 8002f50:	4861      	ldr	r0, [pc, #388]	; (80030d8 <saisie_commande+0x240>)
 8002f52:	f008 fc25 	bl	800b7a0 <iprintf>
				printf("\r%s%s", PROMPT, pCommandeCourante);
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4960      	ldr	r1, [pc, #384]	; (80030dc <saisie_commande+0x244>)
 8002f5a:	4861      	ldr	r0, [pc, #388]	; (80030e0 <saisie_commande+0x248>)
 8002f5c:	f008 fc20 	bl	800b7a0 <iprintf>
				position = strlen(pCommandeCourante);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7fd f95f 	bl	8000224 <strlen>
 8002f66:	4603      	mov	r3, r0
 8002f68:	61bb      	str	r3, [r7, #24]
				nb_car_valide = position;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	61fb      	str	r3, [r7, #28]
				strcpy(sh_historique.commandes[sh_historique.commande_courante], pCommandeCourante);
 8002f6e:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <saisie_commande+0x23c>)
 8002f70:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002f74:	2232      	movs	r2, #50	; 0x32
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <saisie_commande+0x23c>)
 8002f7c:	4413      	add	r3, r2
 8002f7e:	68f9      	ldr	r1, [r7, #12]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f008 fcb1 	bl	800b8e8 <strcpy>
				etat = sh_code_fleche;
 8002f86:	2303      	movs	r3, #3
 8002f88:	74fb      	strb	r3, [r7, #19]
 8002f8a:	e00d      	b.n	8002fa8 <saisie_commande+0x110>
			}
			else
				// Inconnu ou non gere
				etat = sh_normal;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	74fb      	strb	r3, [r7, #19]
 8002f90:	e00a      	b.n	8002fa8 <saisie_commande+0x110>
		}
		else if(etat == sh_code_fleche)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d107      	bne.n	8002fa8 <saisie_commande+0x110>
		{
			if(caractere == 0x1b)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	2b1b      	cmp	r3, #27
 8002f9c:	d102      	bne.n	8002fa4 <saisie_commande+0x10c>
				etat = sh_fleche_en_cours;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	74fb      	strb	r3, [r7, #19]
 8002fa2:	e001      	b.n	8002fa8 <saisie_commande+0x110>
			else
				etat = sh_normal;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	74fb      	strb	r3, [r7, #19]
		}

		if(etat == sh_normal)
 8002fa8:	7cfb      	ldrb	r3, [r7, #19]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d16b      	bne.n	8003086 <saisie_commande+0x1ee>
		{
			if(caractere == 0x08)
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d122      	bne.n	8002ffa <saisie_commande+0x162>
	        {
		        // DEL
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position-1" � la "fin de la chaine" d'une case
	            for(i=position-1; i<nb_car_valide; i++)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e00b      	b.n	8002fd4 <saisie_commande+0x13c>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	441a      	add	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	440b      	add	r3, r1
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	701a      	strb	r2, [r3, #0]
	            for(i=position-1; i<nb_car_valide; i++)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dbef      	blt.n	8002fbc <saisie_commande+0x124>

	            position -= 1;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
	            nb_car_valide -= 1;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]

                // Rafraichissement de l'affichage
                printf("\r                                                  ");
 8002fe8:	483e      	ldr	r0, [pc, #248]	; (80030e4 <saisie_commande+0x24c>)
 8002fea:	f008 fbd9 	bl	800b7a0 <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	493a      	ldr	r1, [pc, #232]	; (80030dc <saisie_commande+0x244>)
 8002ff2:	483b      	ldr	r0, [pc, #236]	; (80030e0 <saisie_commande+0x248>)
 8002ff4:	f008 fbd4 	bl	800b7a0 <iprintf>
 8002ff8:	e045      	b.n	8003086 <saisie_commande+0x1ee>
	        }
	        else if(caractere == 0x7F)
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffe:	d11e      	bne.n	800303e <saisie_commande+0x1a6>
	       {
	            // SUPPR
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=position; i<nb_car_valide; i++)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	e00b      	b.n	800301e <saisie_commande+0x186>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	3301      	adds	r3, #1
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	441a      	add	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	440b      	add	r3, r1
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	701a      	strb	r2, [r3, #0]
	            for(i=position; i<nb_car_valide; i++)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	429a      	cmp	r2, r3
 8003024:	dbef      	blt.n	8003006 <saisie_commande+0x16e>

	            nb_car_valide -= 1;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3b01      	subs	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]

	            // Rafraichissement de l'affichage
                printf("\r                                                  ");
 800302c:	482d      	ldr	r0, [pc, #180]	; (80030e4 <saisie_commande+0x24c>)
 800302e:	f008 fbb7 	bl	800b7a0 <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4929      	ldr	r1, [pc, #164]	; (80030dc <saisie_commande+0x244>)
 8003036:	482a      	ldr	r0, [pc, #168]	; (80030e0 <saisie_commande+0x248>)
 8003038:	f008 fbb2 	bl	800b7a0 <iprintf>
 800303c:	e023      	b.n	8003086 <saisie_commande+0x1ee>
	        else
	        {
	            // Pas de caractere special
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=nb_car_valide; i>=position; i--)
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e00b      	b.n	800305c <saisie_commande+0x1c4>
	                pCommandeCourante[i+1] = pCommandeCourante[i];
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	441a      	add	r2, r3
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	68f9      	ldr	r1, [r7, #12]
 8003050:	440b      	add	r3, r1
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	701a      	strb	r2, [r3, #0]
	            for(i=nb_car_valide; i>=position; i--)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	3b01      	subs	r3, #1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	daef      	bge.n	8003044 <saisie_commande+0x1ac>

	            pCommandeCourante[position++] = caractere;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	61ba      	str	r2, [r7, #24]
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	79fa      	ldrb	r2, [r7, #7]
 8003072:	701a      	strb	r2, [r3, #0]
	            if(caractere==32)
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	2b20      	cmp	r3, #32
 8003078:	d102      	bne.n	8003080 <saisie_commande+0x1e8>
	            	printf("x");
 800307a:	2078      	movs	r0, #120	; 0x78
 800307c:	f008 fba8 	bl	800b7d0 <putchar>
	            nb_car_valide++;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
	        }
		}
        // Over writing pour afficher la chaine mise � jour
        //printf("nb_car_valide = %d, position = %d\n", nb_car_valide, position);

    } while (caractere != '\n');
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b0a      	cmp	r3, #10
 800308a:	f47f af20 	bne.w	8002ece <saisie_commande+0x36>

    if(nb_car_valide >= 2)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	dd06      	ble.n	80030a2 <saisie_commande+0x20a>
    {
        pCommandeCourante[nb_car_valide-2] = 0x0;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3b02      	subs	r3, #2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	2200      	movs	r2, #0
 800309e:	701a      	strb	r2, [r3, #0]
 80030a0:	e002      	b.n	80030a8 <saisie_commande+0x210>
    }
    else
    {
        pCommandeCourante[0] = 0x0;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
    }

	sh_historique.commande_courante = (sh_historique.commande_courante + 1)%SHELL_MAX_HISTORIQUE;
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <saisie_commande+0x23c>)
 80030aa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <saisie_commande+0x250>)
 80030b2:	fb83 2301 	smull	r2, r3, r3, r1
 80030b6:	105a      	asrs	r2, r3, #1
 80030b8:	17cb      	asrs	r3, r1, #31
 80030ba:	1ad2      	subs	r2, r2, r3
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	1aca      	subs	r2, r1, r3
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <saisie_commande+0x23c>)
 80030c6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    return pCommandeCourante;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000afc 	.word	0x20000afc
 80030d8:	08010448 	.word	0x08010448
 80030dc:	08010480 	.word	0x08010480
 80030e0:	08010494 	.word	0x08010494
 80030e4:	0801049c 	.word	0x0801049c
 80030e8:	66666667 	.word	0x66666667

080030ec <shell>:
NVIC_SystemReset();

}

void shell()
{
 80030ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f0:	b0d8      	sub	sp, #352	; 0x160
 80030f2:	af06      	add	r7, sp, #24
    float distance, speed, speed_aimant;
    int32_t lidar_distance_gauche, lidar_distance_droite, lidar_distance_avant, lidar_distance_haut, lidar_rssi, lidar_temperature;
    int quitter;
	int nb_lectures;

    sh_historique.commande_courante = 0;
 80030f4:	4bc4      	ldr	r3, [pc, #784]	; (8003408 <shell+0x31c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003102:	e00d      	b.n	8003120 <shell+0x34>
        sh_historique.commandes[i][0] = '\0';
 8003104:	4ac0      	ldr	r2, [pc, #768]	; (8003408 <shell+0x31c>)
 8003106:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800310a:	2132      	movs	r1, #50	; 0x32
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 8003116:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800311a:	3301      	adds	r3, #1
 800311c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003120:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003124:	2b04      	cmp	r3, #4
 8003126:	dded      	ble.n	8003104 <shell+0x18>

    printf("\r\n");
 8003128:	48b8      	ldr	r0, [pc, #736]	; (800340c <shell+0x320>)
 800312a:	f008 fbd5 	bl	800b8d8 <puts>
    quitter = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    do {
        printf("%s", PROMPT);
 8003134:	49b6      	ldr	r1, [pc, #728]	; (8003410 <shell+0x324>)
 8003136:	48b7      	ldr	r0, [pc, #732]	; (8003414 <shell+0x328>)
 8003138:	f008 fb32 	bl	800b7a0 <iprintf>

        // Saisie de la commande
        saisie_commande();
 800313c:	f7ff feac 	bl	8002e98 <saisie_commande>
        if(sh_historique.commande_courante == 0)
 8003140:	4bb1      	ldr	r3, [pc, #708]	; (8003408 <shell+0x31c>)
 8003142:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <shell+0x6c>
        	strcpy(commande, sh_historique.commandes[SHELL_MAX_HISTORIQUE-1]);
 800314a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800314e:	49b2      	ldr	r1, [pc, #712]	; (8003418 <shell+0x32c>)
 8003150:	4618      	mov	r0, r3
 8003152:	f008 fbc9 	bl	800b8e8 <strcpy>
 8003156:	e00e      	b.n	8003176 <shell+0x8a>
        else
        	strcpy(commande, sh_historique.commandes[sh_historique.commande_courante-1]);
 8003158:	4bab      	ldr	r3, [pc, #684]	; (8003408 <shell+0x31c>)
 800315a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800315e:	3b01      	subs	r3, #1
 8003160:	2232      	movs	r2, #50	; 0x32
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	4aa8      	ldr	r2, [pc, #672]	; (8003408 <shell+0x31c>)
 8003168:	441a      	add	r2, r3
 800316a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f008 fbb9 	bl	800b8e8 <strcpy>

        printf("\r\n");
 8003176:	48a5      	ldr	r0, [pc, #660]	; (800340c <shell+0x320>)
 8003178:	f008 fbae 	bl	800b8d8 <puts>

        printf("%s\r\n", commande);
 800317c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003180:	4619      	mov	r1, r3
 8003182:	48a6      	ldr	r0, [pc, #664]	; (800341c <shell+0x330>)
 8003184:	f008 fb0c 	bl	800b7a0 <iprintf>

        // Interpretation de la commande
        num_args = 0;
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
        tab_args[num_args] = strtok(commande, " ");
 800318e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003192:	49a3      	ldr	r1, [pc, #652]	; (8003420 <shell+0x334>)
 8003194:	4618      	mov	r0, r3
 8003196:	f009 f9e1 	bl	800c55c <strtok>
 800319a:	4601      	mov	r1, r0
 800319c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a0:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 80031a8:	e00f      	b.n	80031ca <shell+0xde>
        {
            tab_args[++num_args] = strtok(NULL, " ");
 80031aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80031ae:	3301      	adds	r3, #1
 80031b0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80031b4:	499a      	ldr	r1, [pc, #616]	; (8003420 <shell+0x334>)
 80031b6:	2000      	movs	r0, #0
 80031b8:	f009 f9d0 	bl	800c55c <strtok>
 80031bc:	4601      	mov	r1, r0
 80031be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 80031ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ce:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80031d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1e7      	bne.n	80031aa <shell+0xbe>
        }

        // Shell
        if(strcmp(tab_args[0], "hw_led") == 0)
 80031da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4990      	ldr	r1, [pc, #576]	; (8003424 <shell+0x338>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f814 	bl	8000210 <strcmp>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 80ba 	bne.w	8003364 <shell+0x278>
        {
            // Led
            if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led1")==0))
 80031f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80031f4:	2b03      	cmp	r3, #3
 80031f6:	d11a      	bne.n	800322e <shell+0x142>
 80031f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	498a      	ldr	r1, [pc, #552]	; (8003428 <shell+0x33c>)
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f805 	bl	8000210 <strcmp>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d110      	bne.n	800322e <shell+0x142>
 800320c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4986      	ldr	r1, [pc, #536]	; (800342c <shell+0x340>)
 8003214:	4618      	mov	r0, r3
 8003216:	f7fc fffb 	bl	8000210 <strcmp>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <shell+0x142>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8003220:	2200      	movs	r2, #0
 8003222:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003226:	4882      	ldr	r0, [pc, #520]	; (8003430 <shell+0x344>)
 8003228:	f003 f8be 	bl	80063a8 <HAL_GPIO_WritePin>
 800322c:	e3c4      	b.n	80039b8 <shell+0x8cc>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led2")==0))
 800322e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003232:	2b03      	cmp	r3, #3
 8003234:	d119      	bne.n	800326a <shell+0x17e>
 8003236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	497a      	ldr	r1, [pc, #488]	; (8003428 <shell+0x33c>)
 800323e:	4618      	mov	r0, r3
 8003240:	f7fc ffe6 	bl	8000210 <strcmp>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <shell+0x17e>
 800324a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4978      	ldr	r1, [pc, #480]	; (8003434 <shell+0x348>)
 8003252:	4618      	mov	r0, r3
 8003254:	f7fc ffdc 	bl	8000210 <strcmp>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <shell+0x17e>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 800325e:	2200      	movs	r2, #0
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	4875      	ldr	r0, [pc, #468]	; (8003438 <shell+0x34c>)
 8003264:	f003 f8a0 	bl	80063a8 <HAL_GPIO_WritePin>
 8003268:	e3a6      	b.n	80039b8 <shell+0x8cc>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led3")==0))
 800326a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800326e:	2b03      	cmp	r3, #3
 8003270:	d119      	bne.n	80032a6 <shell+0x1ba>
 8003272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	496b      	ldr	r1, [pc, #428]	; (8003428 <shell+0x33c>)
 800327a:	4618      	mov	r0, r3
 800327c:	f7fc ffc8 	bl	8000210 <strcmp>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10f      	bne.n	80032a6 <shell+0x1ba>
 8003286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	496b      	ldr	r1, [pc, #428]	; (800343c <shell+0x350>)
 800328e:	4618      	mov	r0, r3
 8003290:	f7fc ffbe 	bl	8000210 <strcmp>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <shell+0x1ba>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 800329a:	2200      	movs	r2, #0
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	4866      	ldr	r0, [pc, #408]	; (8003438 <shell+0x34c>)
 80032a0:	f003 f882 	bl	80063a8 <HAL_GPIO_WritePin>
 80032a4:	e388      	b.n	80039b8 <shell+0x8cc>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led1")==0))
 80032a6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d11a      	bne.n	80032e4 <shell+0x1f8>
 80032ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4962      	ldr	r1, [pc, #392]	; (8003440 <shell+0x354>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fc ffaa 	bl	8000210 <strcmp>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d110      	bne.n	80032e4 <shell+0x1f8>
 80032c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	4958      	ldr	r1, [pc, #352]	; (800342c <shell+0x340>)
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fc ffa0 	bl	8000210 <strcmp>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <shell+0x1f8>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 80032d6:	2201      	movs	r2, #1
 80032d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032dc:	4854      	ldr	r0, [pc, #336]	; (8003430 <shell+0x344>)
 80032de:	f003 f863 	bl	80063a8 <HAL_GPIO_WritePin>
 80032e2:	e369      	b.n	80039b8 <shell+0x8cc>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led2")==0))
 80032e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d119      	bne.n	8003320 <shell+0x234>
 80032ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4953      	ldr	r1, [pc, #332]	; (8003440 <shell+0x354>)
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fc ff8b 	bl	8000210 <strcmp>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10f      	bne.n	8003320 <shell+0x234>
 8003300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	494b      	ldr	r1, [pc, #300]	; (8003434 <shell+0x348>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fc ff81 	bl	8000210 <strcmp>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <shell+0x234>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8003314:	2201      	movs	r2, #1
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	4847      	ldr	r0, [pc, #284]	; (8003438 <shell+0x34c>)
 800331a:	f003 f845 	bl	80063a8 <HAL_GPIO_WritePin>
 800331e:	e34b      	b.n	80039b8 <shell+0x8cc>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led3")==0))
 8003320:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003324:	2b03      	cmp	r3, #3
 8003326:	d119      	bne.n	800335c <shell+0x270>
 8003328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4944      	ldr	r1, [pc, #272]	; (8003440 <shell+0x354>)
 8003330:	4618      	mov	r0, r3
 8003332:	f7fc ff6d 	bl	8000210 <strcmp>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10f      	bne.n	800335c <shell+0x270>
 800333c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	493e      	ldr	r1, [pc, #248]	; (800343c <shell+0x350>)
 8003344:	4618      	mov	r0, r3
 8003346:	f7fc ff63 	bl	8000210 <strcmp>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <shell+0x270>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8003350:	2201      	movs	r2, #1
 8003352:	2140      	movs	r1, #64	; 0x40
 8003354:	4838      	ldr	r0, [pc, #224]	; (8003438 <shell+0x34c>)
 8003356:	f003 f827 	bl	80063a8 <HAL_GPIO_WritePin>
 800335a:	e32d      	b.n	80039b8 <shell+0x8cc>
            else
                printf("Parametres incorrects. \r\nSyntaxe : hw_led <on/off> <led1/led2/led3>\r\n");
 800335c:	4839      	ldr	r0, [pc, #228]	; (8003444 <shell+0x358>)
 800335e:	f008 fabb 	bl	800b8d8 <puts>
 8003362:	e329      	b.n	80039b8 <shell+0x8cc>
        } else
		if(strcmp(tab_args[0], "hw_buttons") == 0)
 8003364:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4937      	ldr	r1, [pc, #220]	; (8003448 <shell+0x35c>)
 800336c:	4618      	mov	r0, r3
 800336e:	f7fc ff4f 	bl	8000210 <strcmp>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d17b      	bne.n	8003470 <shell+0x384>
		{
			// Afiche l'�tat des boutons
			if(num_args==1)
 8003378:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800337c:	2b01      	cmp	r3, #1
 800337e:	d13e      	bne.n	80033fe <shell+0x312>
			{
				if(HAL_GPIO_ReadPin(bouton1_GPIO_Port, bouton1_Pin) ==  GPIO_PIN_SET)
 8003380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003384:	482a      	ldr	r0, [pc, #168]	; (8003430 <shell+0x344>)
 8003386:	f002 fff7 	bl	8006378 <HAL_GPIO_ReadPin>
 800338a:	4603      	mov	r3, r0
 800338c:	2b01      	cmp	r3, #1
 800338e:	d103      	bne.n	8003398 <shell+0x2ac>
					printf("Bouton1 opened.\r\n");
 8003390:	482e      	ldr	r0, [pc, #184]	; (800344c <shell+0x360>)
 8003392:	f008 faa1 	bl	800b8d8 <puts>
 8003396:	e002      	b.n	800339e <shell+0x2b2>
				else
					printf("Bouton1 closed.\r\n");
 8003398:	482d      	ldr	r0, [pc, #180]	; (8003450 <shell+0x364>)
 800339a:	f008 fa9d 	bl	800b8d8 <puts>
				if(HAL_GPIO_ReadPin(bouton2_GPIO_Port, bouton2_Pin) ==  GPIO_PIN_SET)
 800339e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a2:	4823      	ldr	r0, [pc, #140]	; (8003430 <shell+0x344>)
 80033a4:	f002 ffe8 	bl	8006378 <HAL_GPIO_ReadPin>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d103      	bne.n	80033b6 <shell+0x2ca>
					printf("Bouton2 opened.\r\n");
 80033ae:	4829      	ldr	r0, [pc, #164]	; (8003454 <shell+0x368>)
 80033b0:	f008 fa92 	bl	800b8d8 <puts>
 80033b4:	e002      	b.n	80033bc <shell+0x2d0>
				else
					printf("Bouton2 closed.\r\n");
 80033b6:	4828      	ldr	r0, [pc, #160]	; (8003458 <shell+0x36c>)
 80033b8:	f008 fa8e 	bl	800b8d8 <puts>
				if(HAL_GPIO_ReadPin(bouton3_GPIO_Port, bouton3_Pin) ==  GPIO_PIN_SET)
 80033bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033c0:	481b      	ldr	r0, [pc, #108]	; (8003430 <shell+0x344>)
 80033c2:	f002 ffd9 	bl	8006378 <HAL_GPIO_ReadPin>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d103      	bne.n	80033d4 <shell+0x2e8>
					printf("Bouton3 opened.\r\n");
 80033cc:	4823      	ldr	r0, [pc, #140]	; (800345c <shell+0x370>)
 80033ce:	f008 fa83 	bl	800b8d8 <puts>
 80033d2:	e002      	b.n	80033da <shell+0x2ee>
				else
					printf("Bouton3 closed.\r\n");
 80033d4:	4822      	ldr	r0, [pc, #136]	; (8003460 <shell+0x374>)
 80033d6:	f008 fa7f 	bl	800b8d8 <puts>
				if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin) ==  GPIO_PIN_SET)
 80033da:	2110      	movs	r1, #16
 80033dc:	4816      	ldr	r0, [pc, #88]	; (8003438 <shell+0x34c>)
 80033de:	f002 ffcb 	bl	8006378 <HAL_GPIO_ReadPin>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d103      	bne.n	80033f0 <shell+0x304>
					printf("BoutonExt1 opened.\r\n");
 80033e8:	481e      	ldr	r0, [pc, #120]	; (8003464 <shell+0x378>)
 80033ea:	f008 fa75 	bl	800b8d8 <puts>
 80033ee:	e002      	b.n	80033f6 <shell+0x30a>
				else
					printf("BoutonExt1 closed.\r\n");
 80033f0:	481d      	ldr	r0, [pc, #116]	; (8003468 <shell+0x37c>)
 80033f2:	f008 fa71 	bl	800b8d8 <puts>
				printf("\r\n");
 80033f6:	4805      	ldr	r0, [pc, #20]	; (800340c <shell+0x320>)
 80033f8:	f008 fa6e 	bl	800b8d8 <puts>
 80033fc:	e2dc      	b.n	80039b8 <shell+0x8cc>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : hw_buttons\r\n");
 80033fe:	481b      	ldr	r0, [pc, #108]	; (800346c <shell+0x380>)
 8003400:	f008 fa6a 	bl	800b8d8 <puts>
 8003404:	e2d8      	b.n	80039b8 <shell+0x8cc>
 8003406:	bf00      	nop
 8003408:	20000afc 	.word	0x20000afc
 800340c:	080104e8 	.word	0x080104e8
 8003410:	08010480 	.word	0x08010480
 8003414:	080104ec 	.word	0x080104ec
 8003418:	20000bc4 	.word	0x20000bc4
 800341c:	080104f0 	.word	0x080104f0
 8003420:	080104f8 	.word	0x080104f8
 8003424:	080104fc 	.word	0x080104fc
 8003428:	08010504 	.word	0x08010504
 800342c:	08010508 	.word	0x08010508
 8003430:	40021800 	.word	0x40021800
 8003434:	08010510 	.word	0x08010510
 8003438:	40020c00 	.word	0x40020c00
 800343c:	08010518 	.word	0x08010518
 8003440:	08010520 	.word	0x08010520
 8003444:	08010524 	.word	0x08010524
 8003448:	0801056c 	.word	0x0801056c
 800344c:	08010578 	.word	0x08010578
 8003450:	0801058c 	.word	0x0801058c
 8003454:	080105a0 	.word	0x080105a0
 8003458:	080105b4 	.word	0x080105b4
 800345c:	080105c8 	.word	0x080105c8
 8003460:	080105dc 	.word	0x080105dc
 8003464:	080105f0 	.word	0x080105f0
 8003468:	08010604 	.word	0x08010604
 800346c:	08010618 	.word	0x08010618
//            	paramsModify();
//            }
//            else
//                printf("Parametres incorrects. \r\nSyntaxe : params_modify\r\n");
//        } else
		if(strcmp(tab_args[0], "radio_get") == 0)
 8003470:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	49c6      	ldr	r1, [pc, #792]	; (8003790 <shell+0x6a4>)
 8003478:	4618      	mov	r0, r3
 800347a:	f7fc fec9 	bl	8000210 <strcmp>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 8084 	bne.w	800358e <shell+0x4a2>
		{
			if(num_args==1)
 8003486:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800348a:	2b01      	cmp	r3, #1
 800348c:	d12e      	bne.n	80034ec <shell+0x400>
			{
				radio_dir_get(&radio_dir);
 800348e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fa2e 	bl	80028f4 <radio_dir_get>
				radio_throttle_get(&radio_throttle);
 8003498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fa7f 	bl	80029a0 <radio_throttle_get>
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 80034a2:	48bc      	ldr	r0, [pc, #752]	; (8003794 <shell+0x6a8>)
 80034a4:	f008 fa18 	bl	800b8d8 <puts>
				radio_dir = 0.0;
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 80034b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
				printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f870 	bl	80005a8 <__aeabi_f2d>
 80034c8:	4604      	mov	r4, r0
 80034ca:	460d      	mov	r5, r1
 80034cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f868 	bl	80005a8 <__aeabi_f2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	e9cd 2300 	strd	r2, r3, [sp]
 80034e0:	4622      	mov	r2, r4
 80034e2:	462b      	mov	r3, r5
 80034e4:	48ac      	ldr	r0, [pc, #688]	; (8003798 <shell+0x6ac>)
 80034e6:	f008 f95b 	bl	800b7a0 <iprintf>
 80034ea:	e265      	b.n	80039b8 <shell+0x8cc>
			}
			else if(num_args==2)
 80034ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d148      	bne.n	8003586 <shell+0x49a>
			{
				int nb_lectures = atoi(tab_args[1]);
 80034f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f007 fc9e 	bl	800ae3c <atoi>
 8003500:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8003504:	48a3      	ldr	r0, [pc, #652]	; (8003794 <shell+0x6a8>)
 8003506:	f008 f9e7 	bl	800b8d8 <puts>
				radio_dir = 0.0;
 800350a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8003514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
				for(i=0;i<nb_lectures;i++)
 800351e:	2300      	movs	r3, #0
 8003520:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003524:	e028      	b.n	8003578 <shell+0x48c>
				{
					radio_dir_get(&radio_dir);
 8003526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff f9e2 	bl	80028f4 <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 8003530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fa33 	bl	80029a0 <radio_throttle_get>
					printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd f831 	bl	80005a8 <__aeabi_f2d>
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
 800354a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd f829 	bl	80005a8 <__aeabi_f2d>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	e9cd 2300 	strd	r2, r3, [sp]
 800355e:	4622      	mov	r2, r4
 8003560:	462b      	mov	r3, r5
 8003562:	488d      	ldr	r0, [pc, #564]	; (8003798 <shell+0x6ac>)
 8003564:	f008 f91c 	bl	800b7a0 <iprintf>

					// Rafraichissement de la radio toutes les 16 ms env.
					HAL_Delay(16);
 8003568:	2010      	movs	r0, #16
 800356a:	f001 fd91 	bl	8005090 <HAL_Delay>
				for(i=0;i<nb_lectures;i++)
 800356e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003572:	3301      	adds	r3, #1
 8003574:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003578:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800357c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003580:	429a      	cmp	r2, r3
 8003582:	dbd0      	blt.n	8003526 <shell+0x43a>
 8003584:	e218      	b.n	80039b8 <shell+0x8cc>
				}
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : radio_get <nb_lectures=1>\r\n");
 8003586:	4885      	ldr	r0, [pc, #532]	; (800379c <shell+0x6b0>)
 8003588:	f008 f9a6 	bl	800b8d8 <puts>
 800358c:	e214      	b.n	80039b8 <shell+0x8cc>
		} else
		if(strcmp(tab_args[0], "vehicule_throttle_set") == 0)
 800358e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4982      	ldr	r1, [pc, #520]	; (80037a0 <shell+0x6b4>)
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc fe3a 	bl	8000210 <strcmp>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d12f      	bne.n	8003602 <shell+0x516>
		{
			if(num_args==2)
 80035a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d127      	bne.n	80035fa <shell+0x50e>
			{
				float valeur = atof(tab_args[1]);
 80035aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f007 fc40 	bl	800ae36 <atof>
 80035b6:	ec53 2b10 	vmov	r2, r3, d0
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	f7fd fb43 	bl	8000c48 <__aeabi_d2f>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

				if((valeur >= -10.0) && (valeur <= 10.0))
 80035c8:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 80035cc:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80035d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d8:	f2c0 81ee 	blt.w	80039b8 <shell+0x8cc>
 80035dc:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 80035e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ec:	f200 81e4 	bhi.w	80039b8 <shell+0x8cc>
					vehicule_throttle_set(valeur);
 80035f0:	ed97 0a4b 	vldr	s0, [r7, #300]	; 0x12c
 80035f4:	f7ff fb74 	bl	8002ce0 <vehicule_throttle_set>
 80035f8:	e1de      	b.n	80039b8 <shell+0x8cc>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 80035fa:	486a      	ldr	r0, [pc, #424]	; (80037a4 <shell+0x6b8>)
 80035fc:	f008 f96c 	bl	800b8d8 <puts>
 8003600:	e1da      	b.n	80039b8 <shell+0x8cc>
		} else
		if(strcmp(tab_args[0], "vehicule_dir_set") == 0)
 8003602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4967      	ldr	r1, [pc, #412]	; (80037a8 <shell+0x6bc>)
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc fe00 	bl	8000210 <strcmp>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d138      	bne.n	8003688 <shell+0x59c>
		{
			if(num_args==2)
 8003616:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800361a:	2b02      	cmp	r3, #2
 800361c:	d130      	bne.n	8003680 <shell+0x594>
			{
				float valeur = atof(tab_args[1]);
 800361e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f007 fc06 	bl	800ae36 <atof>
 800362a:	ec53 2b10 	vmov	r2, r3, d0
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f7fd fb09 	bl	8000c48 <__aeabi_d2f>
 8003636:	4603      	mov	r3, r0
 8003638:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
				printf("%f\r\n", valeur);
 800363c:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8003640:	f7fc ffb2 	bl	80005a8 <__aeabi_f2d>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4858      	ldr	r0, [pc, #352]	; (80037ac <shell+0x6c0>)
 800364a:	f008 f8a9 	bl	800b7a0 <iprintf>

				if((valeur >= -26.0) && (valeur <= 26.0))
 800364e:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8003652:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8003656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	f2c0 81ab 	blt.w	80039b8 <shell+0x8cc>
 8003662:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8003666:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800366a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	f200 81a1 	bhi.w	80039b8 <shell+0x8cc>
					vehicule_dir_set(valeur);
 8003676:	ed97 0a4c 	vldr	s0, [r7, #304]	; 0x130
 800367a:	f7ff faef 	bl	8002c5c <vehicule_dir_set>
 800367e:	e19b      	b.n	80039b8 <shell+0x8cc>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_dir_set <-26.0 ... 26.0>\r\n");
 8003680:	484b      	ldr	r0, [pc, #300]	; (80037b0 <shell+0x6c4>)
 8003682:	f008 f929 	bl	800b8d8 <puts>
 8003686:	e197      	b.n	80039b8 <shell+0x8cc>
		} else
		if(strcmp(tab_args[0], "vehicule_speed_get") == 0)
 8003688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4949      	ldr	r1, [pc, #292]	; (80037b4 <shell+0x6c8>)
 8003690:	4618      	mov	r0, r3
 8003692:	f7fc fdbd 	bl	8000210 <strcmp>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	f040 8095 	bne.w	80037c8 <shell+0x6dc>
		{
			if(num_args==1)
 800369e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d16f      	bne.n	8003786 <shell+0x69a>
			{

				printf("Iteration; vitesse_cmd; distance; speed; speed_aimant\r\n");
 80036a6:	4844      	ldr	r0, [pc, #272]	; (80037b8 <shell+0x6cc>)
 80036a8:	f008 f916 	bl	800b8d8 <puts>
				nb_lectures = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				vehicule_distance_aimant_reset();
 80036b2:	f7ff fac5 	bl	8002c40 <vehicule_distance_aimant_reset>
				do {
					nb_lectures++;
 80036b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80036ba:	3301      	adds	r3, #1
 80036bc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

					vehicule_distance_aimant_get(&distance);
 80036c0:	f107 0320 	add.w	r3, r7, #32
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fa8f 	bl	8002be8 <vehicule_distance_aimant_get>
					vehicule_speed_get(&speed);
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7ff f9ec 	bl	8002aac <vehicule_speed_get>
					vehicule_speed_aimant_get(&speed_aimant);
 80036d4:	f107 0318 	add.w	r3, r7, #24
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fa31 	bl	8002b40 <vehicule_speed_aimant_get>

					// Pilotage par la télécommande
					radio_dir_get(&radio_dir);
 80036de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff f906 	bl	80028f4 <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 80036e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff f957 	bl	80029a0 <radio_throttle_get>
					vehicule_dir_set(radio_dir);
 80036f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	eeb0 0a67 	vmov.f32	s0, s15
 80036fe:	f7ff faad 	bl	8002c5c <vehicule_dir_set>
					vehicule_throttle_set(radio_throttle);
 8003702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	eeb0 0a67 	vmov.f32	s0, s15
 800370e:	f7ff fae7 	bl	8002ce0 <vehicule_throttle_set>

					printf("%d; %f; %f; %f; %f\r\n", nb_lectures, radio_throttle, distance, speed, speed_aimant);
 8003712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7fc ff45 	bl	80005a8 <__aeabi_f2d>
 800371e:	4682      	mov	sl, r0
 8003720:	468b      	mov	fp, r1
 8003722:	f107 0320 	add.w	r3, r7, #32
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fc ff3d 	bl	80005a8 <__aeabi_f2d>
 800372e:	4604      	mov	r4, r0
 8003730:	460d      	mov	r5, r1
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fc ff35 	bl	80005a8 <__aeabi_f2d>
 800373e:	4680      	mov	r8, r0
 8003740:	4689      	mov	r9, r1
 8003742:	f107 0318 	add.w	r3, r7, #24
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fc ff2d 	bl	80005a8 <__aeabi_f2d>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003756:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800375a:	e9cd 4500 	strd	r4, r5, [sp]
 800375e:	4652      	mov	r2, sl
 8003760:	465b      	mov	r3, fp
 8003762:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8003766:	4815      	ldr	r0, [pc, #84]	; (80037bc <shell+0x6d0>)
 8003768:	f008 f81a 	bl	800b7a0 <iprintf>

					HAL_Delay(10);
 800376c:	200a      	movs	r0, #10
 800376e:	f001 fc8f 	bl	8005090 <HAL_Delay>
					// Acquisition sur 10 s
				} while(nb_lectures<1000);
 8003772:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800377a:	db9c      	blt.n	80036b6 <shell+0x5ca>

				// Remise à 0 de la vitesse
				vehicule_throttle_set(0.0);
 800377c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80037c0 <shell+0x6d4>
 8003780:	f7ff faae 	bl	8002ce0 <vehicule_throttle_set>
 8003784:	e118      	b.n	80039b8 <shell+0x8cc>

			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_speed_get \r\n");
 8003786:	480f      	ldr	r0, [pc, #60]	; (80037c4 <shell+0x6d8>)
 8003788:	f008 f8a6 	bl	800b8d8 <puts>
 800378c:	e114      	b.n	80039b8 <shell+0x8cc>
 800378e:	bf00      	nop
 8003790:	08010648 	.word	0x08010648
 8003794:	08010654 	.word	0x08010654
 8003798:	08010680 	.word	0x08010680
 800379c:	08010690 	.word	0x08010690
 80037a0:	080106d0 	.word	0x080106d0
 80037a4:	080106e8 	.word	0x080106e8
 80037a8:	08010734 	.word	0x08010734
 80037ac:	08010748 	.word	0x08010748
 80037b0:	08010750 	.word	0x08010750
 80037b4:	08010798 	.word	0x08010798
 80037b8:	080107ac 	.word	0x080107ac
 80037bc:	080107e4 	.word	0x080107e4
 80037c0:	00000000 	.word	0x00000000
 80037c4:	080107fc 	.word	0x080107fc
		} else
		if(strcmp(tab_args[0], "lidar_get") == 0)
 80037c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4980      	ldr	r1, [pc, #512]	; (80039d0 <shell+0x8e4>)
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fd1d 	bl	8000210 <strcmp>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d145      	bne.n	8003868 <shell+0x77c>
		{
			if(num_args==1)
 80037dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d13d      	bne.n	8003860 <shell+0x774>
			{
				nb_lectures = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

				do {
					tfminiplus_getLastAcquisition(MINILIDAR_GAUCHE, &lidar_distance_gauche, &lidar_rssi, &lidar_temperature);
 80037ea:	463b      	mov	r3, r7
 80037ec:	1d3a      	adds	r2, r7, #4
 80037ee:	f107 0114 	add.w	r1, r7, #20
 80037f2:	2001      	movs	r0, #1
 80037f4:	f001 fa3a 	bl	8004c6c <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_DROIT, &lidar_distance_droite, &lidar_rssi, &lidar_temperature);
 80037f8:	463b      	mov	r3, r7
 80037fa:	1d3a      	adds	r2, r7, #4
 80037fc:	f107 0110 	add.w	r1, r7, #16
 8003800:	2000      	movs	r0, #0
 8003802:	f001 fa33 	bl	8004c6c <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_AVANT, &lidar_distance_avant, &lidar_rssi, &lidar_temperature);
 8003806:	463b      	mov	r3, r7
 8003808:	1d3a      	adds	r2, r7, #4
 800380a:	f107 010c 	add.w	r1, r7, #12
 800380e:	2003      	movs	r0, #3
 8003810:	f001 fa2c 	bl	8004c6c <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_HAUT, &lidar_distance_haut, &lidar_rssi, &lidar_temperature);
 8003814:	463b      	mov	r3, r7
 8003816:	1d3a      	adds	r2, r7, #4
 8003818:	f107 0108 	add.w	r1, r7, #8
 800381c:	2002      	movs	r0, #2
 800381e:	f001 fa25 	bl	8004c6c <tfminiplus_getLastAcquisition>

					printf("Gauche : %ld cm, Avant : %ld cm, Haut : %ld cm, Droit : %ld cm\r\n",
 8003822:	f107 0314 	add.w	r3, r7, #20
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f107 0310 	add.w	r3, r7, #16
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	4865      	ldr	r0, [pc, #404]	; (80039d4 <shell+0x8e8>)
 8003840:	f007 ffae 	bl	800b7a0 <iprintf>
							lidar_distance_gauche, lidar_distance_avant, lidar_distance_haut, lidar_distance_droite);

					HAL_Delay(1000);
 8003844:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003848:	f001 fc22 	bl	8005090 <HAL_Delay>
					nb_lectures++;
 800384c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003850:	3301      	adds	r3, #1
 8003852:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				}while(nb_lectures<120);
 8003856:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800385a:	2b77      	cmp	r3, #119	; 0x77
 800385c:	ddc5      	ble.n	80037ea <shell+0x6fe>
 800385e:	e0ab      	b.n	80039b8 <shell+0x8cc>

			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : lidar_get \r\n");
 8003860:	485d      	ldr	r0, [pc, #372]	; (80039d8 <shell+0x8ec>)
 8003862:	f008 f839 	bl	800b8d8 <puts>
 8003866:	e0a7      	b.n	80039b8 <shell+0x8cc>
//				printf(".\r\n");
//			}
//			else
//				printf("Parametres incorrects. \r\nSyntaxe : gyro_variance\r\n");
//		} else
		if(strcmp(tab_args[0], "gyro_heading_get") == 0)
 8003868:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	495b      	ldr	r1, [pc, #364]	; (80039dc <shell+0x8f0>)
 8003870:	4618      	mov	r0, r3
 8003872:	f7fc fccd 	bl	8000210 <strcmp>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d136      	bne.n	80038ea <shell+0x7fe>
		{
			if(num_args==1)
 800387c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003880:	2b01      	cmp	r3, #1
 8003882:	d12e      	bne.n	80038e2 <shell+0x7f6>
			{
				int nb_lectures;
				printf("Iteration; heading; dps\r\n");
 8003884:	4856      	ldr	r0, [pc, #344]	; (80039e0 <shell+0x8f4>)
 8003886:	f008 f827 	bl	800b8d8 <puts>
				nb_lectures = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				do {
					nb_lectures++;
 8003890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003894:	3301      	adds	r3, #1
 8003896:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

					printf("%d; %f; %f\r\n", nb_lectures, gyro_get_heading(), gyro_get_dps());
 800389a:	f7fd fd33 	bl	8001304 <gyro_get_heading>
 800389e:	ee10 3a10 	vmov	r3, s0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fc fe80 	bl	80005a8 <__aeabi_f2d>
 80038a8:	4604      	mov	r4, r0
 80038aa:	460d      	mov	r5, r1
 80038ac:	f7fd fd0a 	bl	80012c4 <gyro_get_dps>
 80038b0:	ee10 3a10 	vmov	r3, s0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc fe77 	bl	80005a8 <__aeabi_f2d>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	e9cd 2300 	strd	r2, r3, [sp]
 80038c2:	4622      	mov	r2, r4
 80038c4:	462b      	mov	r3, r5
 80038c6:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80038ca:	4846      	ldr	r0, [pc, #280]	; (80039e4 <shell+0x8f8>)
 80038cc:	f007 ff68 	bl	800b7a0 <iprintf>

					HAL_Delay(10);
 80038d0:	200a      	movs	r0, #10
 80038d2:	f001 fbdd 	bl	8005090 <HAL_Delay>
					// Acquisition sur 10 s
				} while(nb_lectures<1000);
 80038d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038de:	dbd7      	blt.n	8003890 <shell+0x7a4>
 80038e0:	e06a      	b.n	80039b8 <shell+0x8cc>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : gyro_heading_get \r\n");
 80038e2:	4841      	ldr	r0, [pc, #260]	; (80039e8 <shell+0x8fc>)
 80038e4:	f007 fff8 	bl	800b8d8 <puts>
 80038e8:	e066      	b.n	80039b8 <shell+0x8cc>
		} else
        if(strcmp(tab_args[0], "reset") == 0)
 80038ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	493e      	ldr	r1, [pc, #248]	; (80039ec <shell+0x900>)
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fc8c 	bl	8000210 <strcmp>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <shell+0x816>
        {
            // Reset
            NVIC_SystemReset();
 80038fe:	f7ff fab5 	bl	8002e6c <__NVIC_SystemReset>
        } else
		if(strcmp(tab_args[0], "quit") == 0)
 8003902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4939      	ldr	r1, [pc, #228]	; (80039f0 <shell+0x904>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fc fc80 	bl	8000210 <strcmp>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <shell+0x832>
		{
			// Quitter le shell
			quitter = 1;
 8003916:	2301      	movs	r3, #1
 8003918:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800391c:	e04c      	b.n	80039b8 <shell+0x8cc>
		} else
        if(strcmp(tab_args[0], "help") == 0)
 800391e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4933      	ldr	r1, [pc, #204]	; (80039f4 <shell+0x908>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7fc fc72 	bl	8000210 <strcmp>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d13f      	bne.n	80039b2 <shell+0x8c6>
        {
            // Help
            printf("Liste des commandes :\r\n");
 8003932:	4831      	ldr	r0, [pc, #196]	; (80039f8 <shell+0x90c>)
 8003934:	f007 ffd0 	bl	800b8d8 <puts>
            printf("- hw_led <on/off> <led0/led1/led2/led3>\r\n");
 8003938:	4830      	ldr	r0, [pc, #192]	; (80039fc <shell+0x910>)
 800393a:	f007 ffcd 	bl	800b8d8 <puts>
            printf("         permet d'allumer ou d'eteindre l'une des 4 leds.\r\n");
 800393e:	4830      	ldr	r0, [pc, #192]	; (8003a00 <shell+0x914>)
 8003940:	f007 ffca 	bl	800b8d8 <puts>
            printf("- hw_buttons\r\n");
 8003944:	482f      	ldr	r0, [pc, #188]	; (8003a04 <shell+0x918>)
 8003946:	f007 ffc7 	bl	800b8d8 <puts>
            printf("         permet d'afficher l'etat des boutons.\r\n");
 800394a:	482f      	ldr	r0, [pc, #188]	; (8003a08 <shell+0x91c>)
 800394c:	f007 ffc4 	bl	800b8d8 <puts>
//            printf("         permet de charger les parametres depuis la Flash Interne.\r\n");
//            printf("- params_show\r\n");
//            printf("         permet d'afficher les parametres courants\r\n");
//            printf("- params_modify\r\n");
//            printf("         permet de modifier les parametres courants\r\n");
            printf("- radio_get <nb_lectures=1>\r\n");
 8003950:	482e      	ldr	r0, [pc, #184]	; (8003a0c <shell+0x920>)
 8003952:	f007 ffc1 	bl	800b8d8 <puts>
            printf("         permet de lire les commandes provenant de la radio.\r\n");
 8003956:	482e      	ldr	r0, [pc, #184]	; (8003a10 <shell+0x924>)
 8003958:	f007 ffbe 	bl	800b8d8 <puts>
            printf("- vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 800395c:	482d      	ldr	r0, [pc, #180]	; (8003a14 <shell+0x928>)
 800395e:	f007 ffbb 	bl	800b8d8 <puts>
            printf("         permet de commander la vitesse du vehicule.\r\n");
 8003962:	482d      	ldr	r0, [pc, #180]	; (8003a18 <shell+0x92c>)
 8003964:	f007 ffb8 	bl	800b8d8 <puts>
            printf("- vehicule_dir_set <-26.0 ... 26.0>\r\n");
 8003968:	482c      	ldr	r0, [pc, #176]	; (8003a1c <shell+0x930>)
 800396a:	f007 ffb5 	bl	800b8d8 <puts>
            printf("         permet de commander la direction du vehicule.\r\n");
 800396e:	482c      	ldr	r0, [pc, #176]	; (8003a20 <shell+0x934>)
 8003970:	f007 ffb2 	bl	800b8d8 <puts>
            printf("- vehicule_speed_get\r\n");
 8003974:	482b      	ldr	r0, [pc, #172]	; (8003a24 <shell+0x938>)
 8003976:	f007 ffaf 	bl	800b8d8 <puts>
            printf("         permet de lire les capteurs de vitesses pour la calibration du capteur BEAST.\r\n");
 800397a:	482b      	ldr	r0, [pc, #172]	; (8003a28 <shell+0x93c>)
 800397c:	f007 ffac 	bl	800b8d8 <puts>
            printf("- gyro_heading\r\n");
 8003980:	482a      	ldr	r0, [pc, #168]	; (8003a2c <shell+0x940>)
 8003982:	f007 ffa9 	bl	800b8d8 <puts>
            printf("         permet de lire le cap en boucle.\r\n");
 8003986:	482a      	ldr	r0, [pc, #168]	; (8003a30 <shell+0x944>)
 8003988:	f007 ffa6 	bl	800b8d8 <puts>
            printf("- reset\r\n");
 800398c:	4829      	ldr	r0, [pc, #164]	; (8003a34 <shell+0x948>)
 800398e:	f007 ffa3 	bl	800b8d8 <puts>
            printf("         permet de reseter le robot.\r\n");
 8003992:	4829      	ldr	r0, [pc, #164]	; (8003a38 <shell+0x94c>)
 8003994:	f007 ffa0 	bl	800b8d8 <puts>
            printf("- quit\r\n");
 8003998:	4828      	ldr	r0, [pc, #160]	; (8003a3c <shell+0x950>)
 800399a:	f007 ff9d 	bl	800b8d8 <puts>
            printf("         permet de sortir du shell.\r\n");
 800399e:	4828      	ldr	r0, [pc, #160]	; (8003a40 <shell+0x954>)
 80039a0:	f007 ff9a 	bl	800b8d8 <puts>
            printf("- version\r\n");
 80039a4:	4827      	ldr	r0, [pc, #156]	; (8003a44 <shell+0x958>)
 80039a6:	f007 ff97 	bl	800b8d8 <puts>
            printf("         permet d'obtenir la version logicielle.\r\n");
 80039aa:	4827      	ldr	r0, [pc, #156]	; (8003a48 <shell+0x95c>)
 80039ac:	f007 ff94 	bl	800b8d8 <puts>
 80039b0:	e002      	b.n	80039b8 <shell+0x8cc>
        } else
        {
            printf("Commande inconnue !\r\n");
 80039b2:	4826      	ldr	r0, [pc, #152]	; (8003a4c <shell+0x960>)
 80039b4:	f007 ff90 	bl	800b8d8 <puts>
        }

    } while(quitter == 0);
 80039b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f43f abb9 	beq.w	8003134 <shell+0x48>
}
 80039c2:	bf00      	nop
 80039c4:	bf00      	nop
 80039c6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80039ca:	46bd      	mov	sp, r7
 80039cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d0:	08010834 	.word	0x08010834
 80039d4:	08010840 	.word	0x08010840
 80039d8:	08010884 	.word	0x08010884
 80039dc:	080108b4 	.word	0x080108b4
 80039e0:	080108c8 	.word	0x080108c8
 80039e4:	080108e4 	.word	0x080108e4
 80039e8:	080108f4 	.word	0x080108f4
 80039ec:	0801092c 	.word	0x0801092c
 80039f0:	08010934 	.word	0x08010934
 80039f4:	0801093c 	.word	0x0801093c
 80039f8:	08010944 	.word	0x08010944
 80039fc:	0801095c 	.word	0x0801095c
 8003a00:	08010988 	.word	0x08010988
 8003a04:	080109c4 	.word	0x080109c4
 8003a08:	080109d4 	.word	0x080109d4
 8003a0c:	08010a04 	.word	0x08010a04
 8003a10:	08010a24 	.word	0x08010a24
 8003a14:	08010a64 	.word	0x08010a64
 8003a18:	08010a90 	.word	0x08010a90
 8003a1c:	08010ac8 	.word	0x08010ac8
 8003a20:	08010af0 	.word	0x08010af0
 8003a24:	08010b28 	.word	0x08010b28
 8003a28:	08010b40 	.word	0x08010b40
 8003a2c:	08010b98 	.word	0x08010b98
 8003a30:	08010ba8 	.word	0x08010ba8
 8003a34:	08010bd4 	.word	0x08010bd4
 8003a38:	08010be0 	.word	0x08010be0
 8003a3c:	08010c08 	.word	0x08010c08
 8003a40:	08010c10 	.word	0x08010c10
 8003a44:	08010c38 	.word	0x08010c38
 8003a48:	08010c44 	.word	0x08010c44
 8003a4c:	08010c78 	.word	0x08010c78

08003a50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <HAL_MspInit+0x44>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a0e      	ldr	r2, [pc, #56]	; (8003a94 <HAL_MspInit+0x44>)
 8003a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_MspInit+0x44>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	607b      	str	r3, [r7, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_MspInit+0x44>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <HAL_MspInit+0x44>)
 8003a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_MspInit+0x44>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08e      	sub	sp, #56	; 0x38
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
 8003aac:	60da      	str	r2, [r3, #12]
 8003aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a4b      	ldr	r2, [pc, #300]	; (8003be4 <HAL_ADC_MspInit+0x14c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d13c      	bne.n	8003b34 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003aba:	4b4b      	ldr	r3, [pc, #300]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac6:	4b48      	ldr	r3, [pc, #288]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad2:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	4a44      	ldr	r2, [pc, #272]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ade:	4b42      	ldr	r3, [pc, #264]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aea:	4b3f      	ldr	r3, [pc, #252]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	4a3e      	ldr	r2, [pc, #248]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	6313      	str	r3, [r2, #48]	; 0x30
 8003af6:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	69bb      	ldr	r3, [r7, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = qtr_ch8_Pin|qtr_ch7_Pin|qtr_ch6_Pin|qtr_ch5_Pin
 8003b02:	233f      	movs	r3, #63	; 0x3f
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
                          |qtr_ch4_Pin|qtr_ch3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b06:	2303      	movs	r3, #3
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b12:	4619      	mov	r1, r3
 8003b14:	4835      	ldr	r0, [pc, #212]	; (8003bec <HAL_ADC_MspInit+0x154>)
 8003b16:	f002 fa83 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = qtr_ch2_Pin|qtr_ch1_Pin;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4830      	ldr	r0, [pc, #192]	; (8003bf0 <HAL_ADC_MspInit+0x158>)
 8003b2e:	f002 fa77 	bl	8006020 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003b32:	e053      	b.n	8003bdc <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <HAL_ADC_MspInit+0x15c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d124      	bne.n	8003b88 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b3e:	4b2a      	ldr	r3, [pc, #168]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4a29      	ldr	r2, [pc, #164]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4a:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Vbatt_Pin|Vesc_Pin;
 8003b6e:	2390      	movs	r3, #144	; 0x90
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b72:	2303      	movs	r3, #3
 8003b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b7e:	4619      	mov	r1, r3
 8003b80:	481d      	ldr	r0, [pc, #116]	; (8003bf8 <HAL_ADC_MspInit+0x160>)
 8003b82:	f002 fa4d 	bl	8006020 <HAL_GPIO_Init>
}
 8003b86:	e029      	b.n	8003bdc <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC3)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <HAL_ADC_MspInit+0x164>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d124      	bne.n	8003bdc <HAL_ADC_MspInit+0x144>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003bb0:	f043 0320 	orr.w	r3, r3, #32
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_ADC_MspInit+0x150>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = qtr_ch16_Pin|qtr_ch15_Pin|qtr_ch14_Pin|qtr_ch13_Pin
 8003bc2:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	480a      	ldr	r0, [pc, #40]	; (8003c00 <HAL_ADC_MspInit+0x168>)
 8003bd8:	f002 fa22 	bl	8006020 <HAL_GPIO_Init>
}
 8003bdc:	bf00      	nop
 8003bde:	3738      	adds	r7, #56	; 0x38
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40012000 	.word	0x40012000
 8003be8:	40023800 	.word	0x40023800
 8003bec:	40020800 	.word	0x40020800
 8003bf0:	40020400 	.word	0x40020400
 8003bf4:	40012100 	.word	0x40012100
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40012200 	.word	0x40012200
 8003c00:	40021400 	.word	0x40021400

08003c04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	f107 0314 	add.w	r3, r7, #20
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <HAL_I2C_MspInit+0x7c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d127      	bne.n	8003c76 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <HAL_I2C_MspInit+0x80>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <HAL_I2C_MspInit+0x80>)
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_I2C_MspInit+0x80>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c42:	2312      	movs	r3, #18
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c4e:	2304      	movs	r3, #4
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	480b      	ldr	r0, [pc, #44]	; (8003c88 <HAL_I2C_MspInit+0x84>)
 8003c5a:	f002 f9e1 	bl	8006020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_I2C_MspInit+0x80>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <HAL_I2C_MspInit+0x80>)
 8003c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <HAL_I2C_MspInit+0x80>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c76:	bf00      	nop
 8003c78:	3728      	adds	r7, #40	; 0x28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40005400 	.word	0x40005400
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40020400 	.word	0x40020400

08003c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b092      	sub	sp, #72	; 0x48
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a83      	ldr	r2, [pc, #524]	; (8003eb8 <HAL_TIM_Base_MspInit+0x22c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10c      	bne.n	8003cc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cae:	4b83      	ldr	r3, [pc, #524]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb2:	4a82      	ldr	r2, [pc, #520]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cba:	4b80      	ldr	r3, [pc, #512]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8003cc6:	e0f2      	b.n	8003eae <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d130      	bne.n	8003d34 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a79      	ldr	r2, [pc, #484]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b77      	ldr	r3, [pc, #476]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	4b74      	ldr	r3, [pc, #464]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a73      	ldr	r2, [pc, #460]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = SpeedIn_Pin;
 8003d02:	2320      	movs	r3, #32
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d12:	2301      	movs	r3, #1
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedIn_GPIO_Port, &GPIO_InitStruct);
 8003d16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4868      	ldr	r0, [pc, #416]	; (8003ec0 <HAL_TIM_Base_MspInit+0x234>)
 8003d1e:	f002 f97f 	bl	8006020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	201c      	movs	r0, #28
 8003d28:	f001 fd39 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d2c:	201c      	movs	r0, #28
 8003d2e:	f001 fd52 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8003d32:	e0bc      	b.n	8003eae <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a62      	ldr	r2, [pc, #392]	; (8003ec4 <HAL_TIM_Base_MspInit+0x238>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d130      	bne.n	8003da0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d3e:	4b5f      	ldr	r3, [pc, #380]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a5e      	ldr	r2, [pc, #376]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003d44:	f043 0302 	orr.w	r3, r3, #2
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b5c      	ldr	r3, [pc, #368]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	4a58      	ldr	r2, [pc, #352]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6313      	str	r3, [r2, #48]	; 0x30
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = DirIn_Pin;
 8003d6e:	2340      	movs	r3, #64	; 0x40
 8003d70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DirIn_GPIO_Port, &GPIO_InitStruct);
 8003d82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003d86:	4619      	mov	r1, r3
 8003d88:	484d      	ldr	r0, [pc, #308]	; (8003ec0 <HAL_TIM_Base_MspInit+0x234>)
 8003d8a:	f002 f949 	bl	8006020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d8e:	2200      	movs	r2, #0
 8003d90:	2100      	movs	r1, #0
 8003d92:	201d      	movs	r0, #29
 8003d94:	f001 fd03 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d98:	201d      	movs	r0, #29
 8003d9a:	f001 fd1c 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8003d9e:	e086      	b.n	8003eae <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM4)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a48      	ldr	r2, [pc, #288]	; (8003ec8 <HAL_TIM_Base_MspInit+0x23c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d131      	bne.n	8003e0e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003daa:	4b44      	ldr	r3, [pc, #272]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a43      	ldr	r2, [pc, #268]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003db0:	f043 0304 	orr.w	r3, r3, #4
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b41      	ldr	r3, [pc, #260]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 0304 	and.w	r3, r3, #4
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dc2:	4b3e      	ldr	r3, [pc, #248]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4a3d      	ldr	r2, [pc, #244]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SpareIn_Pin;
 8003dda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de0:	2302      	movs	r3, #2
 8003de2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003de4:	2301      	movs	r3, #1
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de8:	2300      	movs	r3, #0
 8003dea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dec:	2302      	movs	r3, #2
 8003dee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpareIn_GPIO_Port, &GPIO_InitStruct);
 8003df0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003df4:	4619      	mov	r1, r3
 8003df6:	4835      	ldr	r0, [pc, #212]	; (8003ecc <HAL_TIM_Base_MspInit+0x240>)
 8003df8:	f002 f912 	bl	8006020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	201e      	movs	r0, #30
 8003e02:	f001 fccc 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e06:	201e      	movs	r0, #30
 8003e08:	f001 fce5 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8003e0c:	e04f      	b.n	8003eae <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a2f      	ldr	r2, [pc, #188]	; (8003ed0 <HAL_TIM_Base_MspInit+0x244>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d114      	bne.n	8003e42 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e18:	4b28      	ldr	r3, [pc, #160]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	4a27      	ldr	r2, [pc, #156]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	6453      	str	r3, [r2, #68]	; 0x44
 8003e24:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2100      	movs	r1, #0
 8003e34:	202b      	movs	r0, #43	; 0x2b
 8003e36:	f001 fcb2 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003e3a:	202b      	movs	r0, #43	; 0x2b
 8003e3c:	f001 fccb 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8003e40:	e035      	b.n	8003eae <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM12)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <HAL_TIM_Base_MspInit+0x248>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d130      	bne.n	8003eae <HAL_TIM_Base_MspInit+0x222>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a1a      	ldr	r2, [pc, #104]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
 8003e58:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e64:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e70:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_TIM_Base_MspInit+0x230>)
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SpeedSensor_Pin;
 8003e7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e82:	2302      	movs	r3, #2
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e86:	2300      	movs	r3, #0
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003e8e:	2309      	movs	r3, #9
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedSensor_GPIO_Port, &GPIO_InitStruct);
 8003e92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e96:	4619      	mov	r1, r3
 8003e98:	480f      	ldr	r0, [pc, #60]	; (8003ed8 <HAL_TIM_Base_MspInit+0x24c>)
 8003e9a:	f002 f8c1 	bl	8006020 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	202b      	movs	r0, #43	; 0x2b
 8003ea4:	f001 fc7b 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003ea8:	202b      	movs	r0, #43	; 0x2b
 8003eaa:	f001 fc94 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8003eae:	bf00      	nop
 8003eb0:	3748      	adds	r7, #72	; 0x48
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40020000 	.word	0x40020000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40020c00 	.word	0x40020c00
 8003ed0:	40010400 	.word	0x40010400
 8003ed4:	40001800 	.word	0x40001800
 8003ed8:	40020400 	.word	0x40020400

08003edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a11      	ldr	r2, [pc, #68]	; (8003f40 <HAL_TIM_MspPostInit+0x64>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d11c      	bne.n	8003f38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003efe:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <HAL_TIM_MspPostInit+0x68>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <HAL_TIM_MspPostInit+0x68>)
 8003f04:	f043 0310 	orr.w	r3, r3, #16
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <HAL_TIM_MspPostInit+0x68>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SpeedOut_Pin|DirOut_Pin|SpareOut_Pin;
 8003f16:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8003f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f2c:	f107 030c 	add.w	r3, r7, #12
 8003f30:	4619      	mov	r1, r3
 8003f32:	4805      	ldr	r0, [pc, #20]	; (8003f48 <HAL_TIM_MspPostInit+0x6c>)
 8003f34:	f002 f874 	bl	8006020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f38:	bf00      	nop
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40021000 	.word	0x40021000

08003f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b096      	sub	sp, #88	; 0x58
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a71      	ldr	r2, [pc, #452]	; (8004130 <HAL_UART_MspInit+0x1e4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d15e      	bne.n	800402c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003f6e:	4b71      	ldr	r3, [pc, #452]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a70      	ldr	r2, [pc, #448]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8003f74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b6e      	ldr	r3, [pc, #440]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f82:	643b      	str	r3, [r7, #64]	; 0x40
 8003f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f86:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6313      	str	r3, [r2, #48]	; 0x30
 8003f92:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = lid1_txd_Pin|lid1_rxd_Pin;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003faa:	2303      	movs	r3, #3
 8003fac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003fae:	2308      	movs	r3, #8
 8003fb0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	485f      	ldr	r0, [pc, #380]	; (8004138 <HAL_UART_MspInit+0x1ec>)
 8003fba:	f002 f831 	bl	8006020 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003fbe:	4b5f      	ldr	r3, [pc, #380]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fc0:	4a5f      	ldr	r2, [pc, #380]	; (8004140 <HAL_UART_MspInit+0x1f4>)
 8003fc2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003fc4:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fca:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fcc:	4b5b      	ldr	r3, [pc, #364]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd2:	4b5a      	ldr	r3, [pc, #360]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fd8:	4b58      	ldr	r3, [pc, #352]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fde:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe0:	4b56      	ldr	r3, [pc, #344]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fe6:	4b55      	ldr	r3, [pc, #340]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ff2:	4b52      	ldr	r3, [pc, #328]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ff8:	4b50      	ldr	r3, [pc, #320]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003ffe:	484f      	ldr	r0, [pc, #316]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8004000:	f001 fc04 	bl	800580c <HAL_DMA_Init>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800400a:	f7fe fbdb 	bl	80027c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4a      	ldr	r2, [pc, #296]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8004012:	671a      	str	r2, [r3, #112]	; 0x70
 8004014:	4a49      	ldr	r2, [pc, #292]	; (800413c <HAL_UART_MspInit+0x1f0>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	2100      	movs	r1, #0
 800401e:	2034      	movs	r0, #52	; 0x34
 8004020:	f001 fbbd 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004024:	2034      	movs	r0, #52	; 0x34
 8004026:	f001 fbd6 	bl	80057d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800402a:	e231      	b.n	8004490 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==UART5)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a44      	ldr	r2, [pc, #272]	; (8004144 <HAL_UART_MspInit+0x1f8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	f040 8090 	bne.w	8004158 <HAL_UART_MspInit+0x20c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004038:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	4a3d      	ldr	r2, [pc, #244]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 800403e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004042:	6413      	str	r3, [r2, #64]	; 0x40
 8004044:	4b3b      	ldr	r3, [pc, #236]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404c:	63bb      	str	r3, [r7, #56]	; 0x38
 800404e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	4a37      	ldr	r2, [pc, #220]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6313      	str	r3, [r2, #48]	; 0x30
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	637b      	str	r3, [r7, #52]	; 0x34
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4a31      	ldr	r2, [pc, #196]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 800406e:	f043 0308 	orr.w	r3, r3, #8
 8004072:	6313      	str	r3, [r2, #48]	; 0x30
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <HAL_UART_MspInit+0x1e8>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	633b      	str	r3, [r7, #48]	; 0x30
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = lid5_txd_Pin;
 8004080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004084:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004086:	2302      	movs	r3, #2
 8004088:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800408a:	2301      	movs	r3, #1
 800408c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408e:	2303      	movs	r3, #3
 8004090:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004092:	2308      	movs	r3, #8
 8004094:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_txd_GPIO_Port, &GPIO_InitStruct);
 8004096:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800409a:	4619      	mov	r1, r3
 800409c:	482a      	ldr	r0, [pc, #168]	; (8004148 <HAL_UART_MspInit+0x1fc>)
 800409e:	f001 ffbf 	bl	8006020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = lid5_rxd_Pin;
 80040a2:	2304      	movs	r3, #4
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040aa:	2301      	movs	r3, #1
 80040ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80040b2:	2308      	movs	r3, #8
 80040b4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_rxd_GPIO_Port, &GPIO_InitStruct);
 80040b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040ba:	4619      	mov	r1, r3
 80040bc:	4823      	ldr	r0, [pc, #140]	; (800414c <HAL_UART_MspInit+0x200>)
 80040be:	f001 ffaf 	bl	8006020 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040c4:	4a23      	ldr	r2, [pc, #140]	; (8004154 <HAL_UART_MspInit+0x208>)
 80040c6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80040c8:	4b21      	ldr	r3, [pc, #132]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040ce:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040d0:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040d6:	4b1e      	ldr	r3, [pc, #120]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040d8:	2200      	movs	r2, #0
 80040da:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040dc:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e2:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040f6:	4b16      	ldr	r3, [pc, #88]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_UART_MspInit+0x204>)
 80040fe:	2200      	movs	r2, #0
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004102:	4813      	ldr	r0, [pc, #76]	; (8004150 <HAL_UART_MspInit+0x204>)
 8004104:	f001 fb82 	bl	800580c <HAL_DMA_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 800410e:	f7fe fb59 	bl	80027c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a0e      	ldr	r2, [pc, #56]	; (8004150 <HAL_UART_MspInit+0x204>)
 8004116:	671a      	str	r2, [r3, #112]	; 0x70
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <HAL_UART_MspInit+0x204>)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2100      	movs	r1, #0
 8004122:	2035      	movs	r0, #53	; 0x35
 8004124:	f001 fb3b 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004128:	2035      	movs	r0, #53	; 0x35
 800412a:	f001 fb54 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 800412e:	e1af      	b.n	8004490 <HAL_UART_MspInit+0x544>
 8004130:	40004c00 	.word	0x40004c00
 8004134:	40023800 	.word	0x40023800
 8004138:	40020000 	.word	0x40020000
 800413c:	20000290 	.word	0x20000290
 8004140:	40026040 	.word	0x40026040
 8004144:	40005000 	.word	0x40005000
 8004148:	40020800 	.word	0x40020800
 800414c:	40020c00 	.word	0x40020c00
 8004150:	20000a50 	.word	0x20000a50
 8004154:	40026010 	.word	0x40026010
  else if(huart->Instance==UART7)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a92      	ldr	r2, [pc, #584]	; (80043a8 <HAL_UART_MspInit+0x45c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	f040 808e 	bne.w	8004280 <HAL_UART_MspInit+0x334>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004164:	4b91      	ldr	r3, [pc, #580]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a90      	ldr	r2, [pc, #576]	; (80043ac <HAL_UART_MspInit+0x460>)
 800416a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
 8004170:	4b8e      	ldr	r3, [pc, #568]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800417c:	4b8b      	ldr	r3, [pc, #556]	; (80043ac <HAL_UART_MspInit+0x460>)
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	4a8a      	ldr	r2, [pc, #552]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004182:	f043 0310 	orr.w	r3, r3, #16
 8004186:	6313      	str	r3, [r2, #48]	; 0x30
 8004188:	4b88      	ldr	r3, [pc, #544]	; (80043ac <HAL_UART_MspInit+0x460>)
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = lid2_rxd_Pin|lid2_txd_Pin;
 8004194:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800419a:	2302      	movs	r3, #2
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800419e:	2301      	movs	r3, #1
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a2:	2303      	movs	r3, #3
 80041a4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80041a6:	2308      	movs	r3, #8
 80041a8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041ae:	4619      	mov	r1, r3
 80041b0:	487f      	ldr	r0, [pc, #508]	; (80043b0 <HAL_UART_MspInit+0x464>)
 80041b2:	f001 ff35 	bl	8006020 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80041b6:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041b8:	4a7f      	ldr	r2, [pc, #508]	; (80043b8 <HAL_UART_MspInit+0x46c>)
 80041ba:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80041bc:	4b7d      	ldr	r3, [pc, #500]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041be:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80041c2:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041c4:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ca:	4b7a      	ldr	r3, [pc, #488]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041d0:	4b78      	ldr	r3, [pc, #480]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041d6:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041d8:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041da:	2200      	movs	r2, #0
 80041dc:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041de:	4b75      	ldr	r3, [pc, #468]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80041e4:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041ea:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041f0:	4b70      	ldr	r3, [pc, #448]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80041f6:	486f      	ldr	r0, [pc, #444]	; (80043b4 <HAL_UART_MspInit+0x468>)
 80041f8:	f001 fb08 	bl	800580c <HAL_DMA_Init>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8004202:	f7fe fadf 	bl	80027c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a6a      	ldr	r2, [pc, #424]	; (80043b4 <HAL_UART_MspInit+0x468>)
 800420a:	671a      	str	r2, [r3, #112]	; 0x70
 800420c:	4a69      	ldr	r2, [pc, #420]	; (80043b4 <HAL_UART_MspInit+0x468>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8004212:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004214:	4a6a      	ldr	r2, [pc, #424]	; (80043c0 <HAL_UART_MspInit+0x474>)
 8004216:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8004218:	4b68      	ldr	r3, [pc, #416]	; (80043bc <HAL_UART_MspInit+0x470>)
 800421a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800421e:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004220:	4b66      	ldr	r3, [pc, #408]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004226:	4b65      	ldr	r3, [pc, #404]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004228:	2200      	movs	r2, #0
 800422a:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800422c:	4b63      	ldr	r3, [pc, #396]	; (80043bc <HAL_UART_MspInit+0x470>)
 800422e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004232:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004234:	4b61      	ldr	r3, [pc, #388]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004236:	2200      	movs	r2, #0
 8004238:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800423a:	4b60      	ldr	r3, [pc, #384]	; (80043bc <HAL_UART_MspInit+0x470>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8004240:	4b5e      	ldr	r3, [pc, #376]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004246:	4b5d      	ldr	r3, [pc, #372]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004248:	2200      	movs	r2, #0
 800424a:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800424c:	4b5b      	ldr	r3, [pc, #364]	; (80043bc <HAL_UART_MspInit+0x470>)
 800424e:	2200      	movs	r2, #0
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8004252:	485a      	ldr	r0, [pc, #360]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004254:	f001 fada 	bl	800580c <HAL_DMA_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_MspInit+0x316>
      Error_Handler();
 800425e:	f7fe fab1 	bl	80027c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a55      	ldr	r2, [pc, #340]	; (80043bc <HAL_UART_MspInit+0x470>)
 8004266:	66da      	str	r2, [r3, #108]	; 0x6c
 8004268:	4a54      	ldr	r2, [pc, #336]	; (80043bc <HAL_UART_MspInit+0x470>)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	2052      	movs	r0, #82	; 0x52
 8004274:	f001 fa93 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004278:	2052      	movs	r0, #82	; 0x52
 800427a:	f001 faac 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 800427e:	e107      	b.n	8004490 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==UART8)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a4f      	ldr	r2, [pc, #316]	; (80043c4 <HAL_UART_MspInit+0x478>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d15e      	bne.n	8004348 <HAL_UART_MspInit+0x3fc>
    __HAL_RCC_UART8_CLK_ENABLE();
 800428a:	4b48      	ldr	r3, [pc, #288]	; (80043ac <HAL_UART_MspInit+0x460>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a47      	ldr	r2, [pc, #284]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004290:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
 8004296:	4b45      	ldr	r3, [pc, #276]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042a2:	4b42      	ldr	r3, [pc, #264]	; (80043ac <HAL_UART_MspInit+0x460>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	4a41      	ldr	r2, [pc, #260]	; (80043ac <HAL_UART_MspInit+0x460>)
 80042a8:	f043 0310 	orr.w	r3, r3, #16
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30
 80042ae:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <HAL_UART_MspInit+0x460>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = lid6_rxd_Pin|lid6_txd_Pin;
 80042ba:	2303      	movs	r3, #3
 80042bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042be:	2302      	movs	r3, #2
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042c2:	2301      	movs	r3, #1
 80042c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042c6:	2303      	movs	r3, #3
 80042c8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80042ca:	2308      	movs	r3, #8
 80042cc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042d2:	4619      	mov	r1, r3
 80042d4:	4836      	ldr	r0, [pc, #216]	; (80043b0 <HAL_UART_MspInit+0x464>)
 80042d6:	f001 fea3 	bl	8006020 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 80042dc:	4a3b      	ldr	r2, [pc, #236]	; (80043cc <HAL_UART_MspInit+0x480>)
 80042de:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80042e0:	4b39      	ldr	r3, [pc, #228]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 80042e2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80042e6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042e8:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042ee:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 80042f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042fa:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042fc:	4b32      	ldr	r3, [pc, #200]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004302:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 8004304:	2200      	movs	r2, #0
 8004306:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 800430a:	2200      	movs	r2, #0
 800430c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800430e:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 8004310:	2200      	movs	r2, #0
 8004312:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004314:	4b2c      	ldr	r3, [pc, #176]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 8004316:	2200      	movs	r2, #0
 8004318:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800431a:	482b      	ldr	r0, [pc, #172]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 800431c:	f001 fa76 	bl	800580c <HAL_DMA_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_UART_MspInit+0x3de>
      Error_Handler();
 8004326:	f7fe fa4d 	bl	80027c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 800432e:	671a      	str	r2, [r3, #112]	; 0x70
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_UART_MspInit+0x47c>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004336:	2200      	movs	r2, #0
 8004338:	2100      	movs	r1, #0
 800433a:	2053      	movs	r0, #83	; 0x53
 800433c:	f001 fa2f 	bl	800579e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004340:	2053      	movs	r0, #83	; 0x53
 8004342:	f001 fa48 	bl	80057d6 <HAL_NVIC_EnableIRQ>
}
 8004346:	e0a3      	b.n	8004490 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==USART1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a20      	ldr	r2, [pc, #128]	; (80043d0 <HAL_UART_MspInit+0x484>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d142      	bne.n	80043d8 <HAL_UART_MspInit+0x48c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004352:	4b16      	ldr	r3, [pc, #88]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004358:	f043 0310 	orr.w	r3, r3, #16
 800435c:	6453      	str	r3, [r2, #68]	; 0x44
 800435e:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <HAL_UART_MspInit+0x460>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	4a0f      	ldr	r2, [pc, #60]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6313      	str	r3, [r2, #48]	; 0x30
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_UART_MspInit+0x460>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = lid4_txd_Pin|lid4_rxd_Pin;
 8004382:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004386:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004388:	2302      	movs	r3, #2
 800438a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004390:	2303      	movs	r3, #3
 8004392:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004394:	2307      	movs	r3, #7
 8004396:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004398:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800439c:	4619      	mov	r1, r3
 800439e:	480d      	ldr	r0, [pc, #52]	; (80043d4 <HAL_UART_MspInit+0x488>)
 80043a0:	f001 fe3e 	bl	8006020 <HAL_GPIO_Init>
}
 80043a4:	e074      	b.n	8004490 <HAL_UART_MspInit+0x544>
 80043a6:	bf00      	nop
 80043a8:	40007800 	.word	0x40007800
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40021000 	.word	0x40021000
 80043b4:	2000069c 	.word	0x2000069c
 80043b8:	40026058 	.word	0x40026058
 80043bc:	20000570 	.word	0x20000570
 80043c0:	40026028 	.word	0x40026028
 80043c4:	40007c00 	.word	0x40007c00
 80043c8:	20000744 	.word	0x20000744
 80043cc:	400260a0 	.word	0x400260a0
 80043d0:	40011000 	.word	0x40011000
 80043d4:	40020000 	.word	0x40020000
  else if(huart->Instance==USART2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2e      	ldr	r2, [pc, #184]	; (8004498 <HAL_UART_MspInit+0x54c>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d128      	bne.n	8004434 <HAL_UART_MspInit+0x4e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_UART_MspInit+0x550>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_UART_MspInit+0x550>)
 80043e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ec:	6413      	str	r3, [r2, #64]	; 0x40
 80043ee:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_UART_MspInit+0x550>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_UART_MspInit+0x550>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a27      	ldr	r2, [pc, #156]	; (800449c <HAL_UART_MspInit+0x550>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b25      	ldr	r3, [pc, #148]	; (800449c <HAL_UART_MspInit+0x550>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	613b      	str	r3, [r7, #16]
 8004410:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = tele_txd_Pin|tele_rxd_Pin;
 8004412:	230c      	movs	r3, #12
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2302      	movs	r3, #2
 8004418:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441e:	2300      	movs	r3, #0
 8004420:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004422:	2307      	movs	r3, #7
 8004424:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004426:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800442a:	4619      	mov	r1, r3
 800442c:	481c      	ldr	r0, [pc, #112]	; (80044a0 <HAL_UART_MspInit+0x554>)
 800442e:	f001 fdf7 	bl	8006020 <HAL_GPIO_Init>
}
 8004432:	e02d      	b.n	8004490 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==USART3)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <HAL_UART_MspInit+0x558>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d128      	bne.n	8004490 <HAL_UART_MspInit+0x544>
    __HAL_RCC_USART3_CLK_ENABLE();
 800443e:	4b17      	ldr	r3, [pc, #92]	; (800449c <HAL_UART_MspInit+0x550>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_UART_MspInit+0x550>)
 8004444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_UART_MspInit+0x550>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <HAL_UART_MspInit+0x550>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a10      	ldr	r2, [pc, #64]	; (800449c <HAL_UART_MspInit+0x550>)
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <HAL_UART_MspInit+0x550>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = lid3_txd_Pin|lid3_rxd_Pin;
 800446e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004472:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004478:	2300      	movs	r3, #0
 800447a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447c:	2303      	movs	r3, #3
 800447e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004480:	2307      	movs	r3, #7
 8004482:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004488:	4619      	mov	r1, r3
 800448a:	4807      	ldr	r0, [pc, #28]	; (80044a8 <HAL_UART_MspInit+0x55c>)
 800448c:	f001 fdc8 	bl	8006020 <HAL_GPIO_Init>
}
 8004490:	bf00      	nop
 8004492:	3758      	adds	r7, #88	; 0x58
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40004400 	.word	0x40004400
 800449c:	40023800 	.word	0x40023800
 80044a0:	40020000 	.word	0x40020000
 80044a4:	40004800 	.word	0x40004800
 80044a8:	40020400 	.word	0x40020400

080044ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044b0:	e7fe      	b.n	80044b0 <NMI_Handler+0x4>

080044b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044b6:	e7fe      	b.n	80044b6 <HardFault_Handler+0x4>

080044b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044bc:	e7fe      	b.n	80044bc <MemManage_Handler+0x4>

080044be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044be:	b480      	push	{r7}
 80044c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044c2:	e7fe      	b.n	80044c2 <BusFault_Handler+0x4>

080044c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c8:	e7fe      	b.n	80044c8 <UsageFault_Handler+0x4>

080044ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044ca:	b480      	push	{r7}
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ce:	bf00      	nop
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044dc:	bf00      	nop
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044f8:	f000 fdaa 	bl	8005050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(gUpdateGyro == 1)
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <SysTick_Handler+0x34>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10f      	bne.n	8004524 <SysTick_Handler+0x30>
  {
	  nb_tick++;
 8004504:	4b09      	ldr	r3, [pc, #36]	; (800452c <SysTick_Handler+0x38>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3301      	adds	r3, #1
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <SysTick_Handler+0x38>)
 800450c:	6013      	str	r3, [r2, #0]

	  // Update du gyro toutes les 20 ms.
	  // Pas besoin plus souvent car la fréquence de rafraichissement du gyro est de 54 Hz.
	  if(nb_tick>= 20)
 800450e:	4b07      	ldr	r3, [pc, #28]	; (800452c <SysTick_Handler+0x38>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b13      	cmp	r3, #19
 8004514:	dd06      	ble.n	8004524 <SysTick_Handler+0x30>
	  {
		  gyro_update(0.02);
 8004516:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8004530 <SysTick_Handler+0x3c>
 800451a:	f7fc fe71 	bl	8001200 <gyro_update>
		  nb_tick = 0;
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <SysTick_Handler+0x38>)
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000027c 	.word	0x2000027c
 800452c:	20000280 	.word	0x20000280
 8004530:	3ca3d70a 	.word	0x3ca3d70a

08004534 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004538:	4803      	ldr	r0, [pc, #12]	; (8004548 <DMA1_Stream0_IRQHandler+0x14>)
 800453a:	f001 fb07 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  tfminiplusIrq(MINILIDAR_DROIT);
 800453e:	2000      	movs	r0, #0
 8004540:	f000 f952 	bl	80047e8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000a50 	.word	0x20000a50

0800454c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <DMA1_Stream1_IRQHandler+0x10>)
 8004552:	f001 fafb 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000570 	.word	0x20000570

08004560 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004564:	4803      	ldr	r0, [pc, #12]	; (8004574 <DMA1_Stream2_IRQHandler+0x14>)
 8004566:	f001 faf1 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
  tfminiplusIrq(MINILIDAR_AVANT);
 800456a:	2003      	movs	r0, #3
 800456c:	f000 f93c 	bl	80047e8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000290 	.word	0x20000290

08004578 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800457c:	4803      	ldr	r0, [pc, #12]	; (800458c <DMA1_Stream3_IRQHandler+0x14>)
 800457e:	f001 fae5 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
  tfminiplusIrq(MINILIDAR_GAUCHE);
 8004582:	2001      	movs	r0, #1
 8004584:	f000 f930 	bl	80047e8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	bd80      	pop	{r7, pc}
 800458c:	2000069c 	.word	0x2000069c

08004590 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8004594:	4803      	ldr	r0, [pc, #12]	; (80045a4 <DMA1_Stream6_IRQHandler+0x14>)
 8004596:	f001 fad9 	bl	8005b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
  tfminiplusIrq(MINILIDAR_HAUT);
 800459a:	2002      	movs	r0, #2
 800459c:	f000 f924 	bl	80047e8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80045a0:	bf00      	nop
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000744 	.word	0x20000744

080045a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <TIM2_IRQHandler+0x10>)
 80045ae:	f004 f81f 	bl	80085f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20000980 	.word	0x20000980

080045bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80045c0:	4802      	ldr	r0, [pc, #8]	; (80045cc <TIM3_IRQHandler+0x10>)
 80045c2:	f004 f815 	bl	80085f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80045c6:	bf00      	nop
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000524 	.word	0x20000524

080045d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045d4:	4802      	ldr	r0, [pc, #8]	; (80045e0 <TIM4_IRQHandler+0x10>)
 80045d6:	f004 f80b 	bl	80085f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045da:	bf00      	nop
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	200003c0 	.word	0x200003c0

080045e4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80045e8:	4803      	ldr	r0, [pc, #12]	; (80045f8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80045ea:	f004 f801 	bl	80085f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80045ee:	4803      	ldr	r0, [pc, #12]	; (80045fc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80045f0:	f003 fffe 	bl	80085f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000374 	.word	0x20000374
 80045fc:	20000ab0 	.word	0x20000ab0

08004600 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004604:	4802      	ldr	r0, [pc, #8]	; (8004610 <UART4_IRQHandler+0x10>)
 8004606:	f005 fcbb 	bl	8009f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200008fc 	.word	0x200008fc

08004614 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004618:	4802      	ldr	r0, [pc, #8]	; (8004624 <UART5_IRQHandler+0x10>)
 800461a:	f005 fcb1 	bl	8009f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200005d0 	.word	0x200005d0

08004628 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800462c:	4802      	ldr	r0, [pc, #8]	; (8004638 <UART7_IRQHandler+0x10>)
 800462e:	f005 fca7 	bl	8009f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	200002f0 	.word	0x200002f0

0800463c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004640:	4802      	ldr	r0, [pc, #8]	; (800464c <UART8_IRQHandler+0x10>)
 8004642:	f005 fc9d 	bl	8009f80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000878 	.word	0x20000878

08004650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	return 1;
 8004654:	2301      	movs	r3, #1
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_kill>:

int _kill(int pid, int sig)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800466a:	f006 fbeb 	bl	800ae44 <__errno>
 800466e:	4603      	mov	r3, r0
 8004670:	2216      	movs	r2, #22
 8004672:	601a      	str	r2, [r3, #0]
	return -1;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_exit>:

void _exit (int status)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004688:	f04f 31ff 	mov.w	r1, #4294967295
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ffe7 	bl	8004660 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004692:	e7fe      	b.n	8004692 <_exit+0x12>

08004694 <_read>:
}

// Modif Nicolas
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
	*ptr = __io_getchar();
 80046a0:	f7fc ff5c 	bl	800155c <__io_getchar>
 80046a4:	4603      	mov	r3, r0
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	701a      	strb	r2, [r3, #0]

	return 1;
 80046ac:	2301      	movs	r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_write>:
//
//return len;
//}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e009      	b.n	80046dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	60ba      	str	r2, [r7, #8]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fc ff2d 	bl	8001530 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	3301      	adds	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	dbf1      	blt.n	80046c8 <_write+0x12>
	}
	return len;
 80046e4:	687b      	ldr	r3, [r7, #4]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <_close>:

int _close(int file)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
	return -1;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004716:	605a      	str	r2, [r3, #4]
	return 0;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <_isatty>:

int _isatty(int file)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
	return 1;
 800472e:	2301      	movs	r3, #1
}
 8004730:	4618      	mov	r0, r3
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
	return 0;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <_sbrk+0x5c>)
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <_sbrk+0x60>)
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800476c:	4b13      	ldr	r3, [pc, #76]	; (80047bc <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <_sbrk+0x64>)
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <_sbrk+0x68>)
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <_sbrk+0x64>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4413      	add	r3, r2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	429a      	cmp	r2, r3
 8004786:	d207      	bcs.n	8004798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004788:	f006 fb5c 	bl	800ae44 <__errno>
 800478c:	4603      	mov	r3, r0
 800478e:	220c      	movs	r2, #12
 8004790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e009      	b.n	80047ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004798:	4b08      	ldr	r3, [pc, #32]	; (80047bc <_sbrk+0x64>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <_sbrk+0x64>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	4a05      	ldr	r2, [pc, #20]	; (80047bc <_sbrk+0x64>)
 80047a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047aa:	68fb      	ldr	r3, [r7, #12]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20050000 	.word	0x20050000
 80047b8:	00000400 	.word	0x00000400
 80047bc:	20000284 	.word	0x20000284
 80047c0:	20000d60 	.word	0x20000d60

080047c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047c8:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <SystemInit+0x20>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ce:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <SystemInit+0x20>)
 80047d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047d8:	bf00      	nop
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <tfminiplusIrq>:
stMiniLidar miniLidarHaut;

// Dans la routine d'IRQ du DMA, on positionne le num�ro du capteur rattach� au DMA
// Remarque g�n�rale, plutot que de typer numCapteur en int, on pourrait mettre un enum
void tfminiplusIrq(LIDAR_ID a_numCapteur)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08c      	sub	sp, #48	; 0x30
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
	int distance, strength, temp;
	uint32_t checksum, checksum_ref;
	stMiniLidar *pLidar;

	if(a_numCapteur == MINILIDAR_DROIT)
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <tfminiplusIrq+0x16>
		pLidar = &miniLidarDroit;
 80047f8:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <tfminiplusIrq+0x25c>)
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fc:	e013      	b.n	8004826 <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_GAUCHE)
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d102      	bne.n	800480a <tfminiplusIrq+0x22>
		pLidar = &miniLidarGauche;
 8004804:	4b90      	ldr	r3, [pc, #576]	; (8004a48 <tfminiplusIrq+0x260>)
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
 8004808:	e00d      	b.n	8004826 <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_HAUT)
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d102      	bne.n	8004816 <tfminiplusIrq+0x2e>
		pLidar = &miniLidarHaut;
 8004810:	4b8e      	ldr	r3, [pc, #568]	; (8004a4c <tfminiplusIrq+0x264>)
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
 8004814:	e007      	b.n	8004826 <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_AVANT)
 8004816:	79fb      	ldrb	r3, [r7, #7]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d102      	bne.n	8004822 <tfminiplusIrq+0x3a>
		pLidar = &miniLidarAvant;
 800481c:	4b8c      	ldr	r3, [pc, #560]	; (8004a50 <tfminiplusIrq+0x268>)
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004820:	e001      	b.n	8004826 <tfminiplusIrq+0x3e>
	else
		pLidar = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	62bb      	str	r3, [r7, #40]	; 0x28
//	else if(huart == miniLidarAvant.pHuart)
//		pLidar = &miniLidarAvant;
//	else
//		pLidar = 0;

	if(pLidar != 0)
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 821b 	beq.w	8004c64 <tfminiplusIrq+0x47c>
	{
		// On v�rifie l'ent�te
		if(pLidar->serialBuffer[0] == 0x59)
 800482e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004830:	791b      	ldrb	r3, [r3, #4]
 8004832:	2b59      	cmp	r3, #89	; 0x59
 8004834:	d14a      	bne.n	80048cc <tfminiplusIrq+0xe4>
		{
			// C'est une trame de donn�e

			// On v�rifie que le deuxi�me octet est correct
			// Ce driver ne g�re que le format standard mais pas le format Pixhawk
			if(pLidar->serialBuffer[1] == 0x59)
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	795b      	ldrb	r3, [r3, #5]
 800483a:	2b59      	cmp	r3, #89	; 0x59
 800483c:	f040 820a 	bne.w	8004c54 <tfminiplusIrq+0x46c>
			{
				// On v�rifie le checksum
				checksum = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<8;i++) checksum += pLidar->serialBuffer[i];
 8004844:	2300      	movs	r3, #0
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	e00b      	b.n	8004862 <tfminiplusIrq+0x7a>
 800484a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	4413      	add	r3, r2
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	3301      	adds	r3, #1
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	2b07      	cmp	r3, #7
 8004866:	ddf0      	ble.n	800484a <tfminiplusIrq+0x62>
				checksum &= 0xFF;
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	b2db      	uxtb	r3, r3
 800486c:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[8];
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	7b1b      	ldrb	r3, [r3, #12]
 8004872:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 8004874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	f040 81eb 	bne.w	8004c54 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On constitue les valeurs r�elles
					distance = pLidar->serialBuffer[2] + (pLidar->serialBuffer[3] << 8);
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	799b      	ldrb	r3, [r3, #6]
 8004882:	461a      	mov	r2, r3
 8004884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004886:	79db      	ldrb	r3, [r3, #7]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	4413      	add	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
					strength = pLidar->serialBuffer[4] + (pLidar->serialBuffer[5] << 8);
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	7a1b      	ldrb	r3, [r3, #8]
 8004892:	461a      	mov	r2, r3
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	7a5b      	ldrb	r3, [r3, #9]
 8004898:	021b      	lsls	r3, r3, #8
 800489a:	4413      	add	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
					temp =     pLidar->serialBuffer[6] + (pLidar->serialBuffer[7] << 8);
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	7a9b      	ldrb	r3, [r3, #10]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	7adb      	ldrb	r3, [r3, #11]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	4413      	add	r3, r2
 80048ac:	60bb      	str	r3, [r7, #8]
//						pLidar->distance = distance;
//						pLidar->strength = strength;
//					}
//					// Sinon, on laisse les valeurs de distance et d'intensit� pr�c�dentes
//					pLidar->temperature = temp;
					pLidar->distance = distance;
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
					pLidar->strength = strength;
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
					pLidar->temperature = temp;
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
					pLidar->nb_irq += 1;
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
 80048ca:	e1c3      	b.n	8004c54 <tfminiplusIrq+0x46c>
				}
			}
		} else if (pLidar->serialBuffer[0] == 0x5A)
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	791b      	ldrb	r3, [r3, #4]
 80048d0:	2b5a      	cmp	r3, #90	; 0x5a
 80048d2:	f040 81bf 	bne.w	8004c54 <tfminiplusIrq+0x46c>
		{
			// C'est une trame de r�ponse � une commande
			if((pLidar->serialBuffer[1] == 0x07) &&
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	795b      	ldrb	r3, [r3, #5]
 80048da:	2b07      	cmp	r3, #7
 80048dc:	d135      	bne.n	800494a <tfminiplusIrq+0x162>
			   (pLidar->serialBuffer[2] == 0x01))
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	799b      	ldrb	r3, [r3, #6]
			if((pLidar->serialBuffer[1] == 0x07) &&
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d131      	bne.n	800494a <tfminiplusIrq+0x162>
			{
				// On v�rifie le checksum
				checksum = 0;
 80048e6:	2300      	movs	r3, #0
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<6;i++)
 80048ea:	2300      	movs	r3, #0
 80048ec:	623b      	str	r3, [r7, #32]
 80048ee:	e00b      	b.n	8004908 <tfminiplusIrq+0x120>
					checksum += pLidar->serialBuffer[i];
 80048f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	4413      	add	r3, r2
 80048f6:	3304      	adds	r3, #4
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	4413      	add	r3, r2
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<6;i++)
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	3301      	adds	r3, #1
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	2b05      	cmp	r3, #5
 800490c:	ddf0      	ble.n	80048f0 <tfminiplusIrq+0x108>
				checksum &= 0xFF;
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	b2db      	uxtb	r3, r3
 8004912:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[6];
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	7a9b      	ldrb	r3, [r3, #10]
 8004918:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 800491a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	429a      	cmp	r2, r3
 8004920:	f040 8198 	bne.w	8004c54 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re les num�ros de version
					// Format 00.V3.V2.V1
					pLidar->version = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) + (pLidar->serialBuffer[5] << 16);
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	79db      	ldrb	r3, [r3, #7]
 8004928:	461a      	mov	r2, r3
 800492a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492c:	7a1b      	ldrb	r3, [r3, #8]
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	441a      	add	r2, r3
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	7a5b      	ldrb	r3, [r3, #9]
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	441a      	add	r2, r3
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
					pLidar->semaphore++;
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 8004948:	e184      	b.n	8004c54 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	795b      	ldrb	r3, [r3, #5]
 800494e:	2b05      	cmp	r3, #5
 8004950:	d111      	bne.n	8004976 <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[2] == 0x02) &&
 8004952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004954:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004956:	2b02      	cmp	r3, #2
 8004958:	d10d      	bne.n	8004976 <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[3] == 0x00) &&
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x02) &&
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[4] == 0x60))
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8004966:	2b60      	cmp	r3, #96	; 0x60
 8004968:	d105      	bne.n	8004976 <tfminiplusIrq+0x18e>
			{
				// Le capteur va reseter
				pLidar->semaphore++;
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
 8004974:	e16e      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	795b      	ldrb	r3, [r3, #5]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d111      	bne.n	80049a2 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[2] == 0x02) &&
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004982:	2b02      	cmp	r3, #2
 8004984:	d10d      	bne.n	80049a2 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[3] == 0x01) &&
 8004986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004988:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x02) &&
 800498a:	2b01      	cmp	r3, #1
 800498c:	d109      	bne.n	80049a2 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[4] == 0x61))
 800498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004990:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8004992:	2b61      	cmp	r3, #97	; 0x61
 8004994:	d105      	bne.n	80049a2 <tfminiplusIrq+0x1ba>
			{
				// Le capteur refuse de reseter
				pLidar->semaphore++;
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	641a      	str	r2, [r3, #64]	; 0x40
 80049a0:	e158      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x06) &&
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	795b      	ldrb	r3, [r3, #5]
 80049a6:	2b06      	cmp	r3, #6
 80049a8:	d131      	bne.n	8004a0e <tfminiplusIrq+0x226>
					(pLidar->serialBuffer[2] == 0x03))
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x06) &&
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d12d      	bne.n	8004a0e <tfminiplusIrq+0x226>
			{
				// On v�rifie le checksum
				checksum = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<5;i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e00b      	b.n	80049d4 <tfminiplusIrq+0x1ec>
					checksum += pLidar->serialBuffer[i];
 80049bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	4413      	add	r3, r2
 80049c2:	3304      	adds	r3, #4
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	4413      	add	r3, r2
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<5;i++)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	ddf0      	ble.n	80049bc <tfminiplusIrq+0x1d4>
				checksum &= 0xFF;
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[5];
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	7a5b      	ldrb	r3, [r3, #9]
 80049e4:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 80049e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	f040 8132 	bne.w	8004c54 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re le Frame Rate
					pLidar->framerate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8);
 80049f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f2:	79db      	ldrb	r3, [r3, #7]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	7a1b      	ldrb	r3, [r3, #8]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	441a      	add	r2, r3
 80049fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34

					pLidar->semaphore++;
 8004a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 8004a0c:	e122      	b.n	8004c54 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	795b      	ldrb	r3, [r3, #5]
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d11e      	bne.n	8004a54 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[2] == 0x05) &&
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d11a      	bne.n	8004a54 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[3] == 0x01) &&
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d116      	bne.n	8004a54 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[4] == 0x65))
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8004a2a:	2b65      	cmp	r3, #101	; 0x65
 8004a2c:	d112      	bne.n	8004a54 <tfminiplusIrq+0x26c>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = standard_cm;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a40:	e108      	b.n	8004c54 <tfminiplusIrq+0x46c>
 8004a42:	bf00      	nop
 8004a44:	20000c00 	.word	0x20000c00
 8004a48:	20000d00 	.word	0x20000d00
 8004a4c:	20000c48 	.word	0x20000c48
 8004a50:	20000cb8 	.word	0x20000cb8
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	795b      	ldrb	r3, [r3, #5]
 8004a58:	2b05      	cmp	r3, #5
 8004a5a:	d115      	bne.n	8004a88 <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[2] == 0x05) &&
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004a60:	2b05      	cmp	r3, #5
 8004a62:	d111      	bne.n	8004a88 <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[3] == 0x02) &&
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d10d      	bne.n	8004a88 <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[4] == 0x66))
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x02) &&
 8004a70:	2b66      	cmp	r3, #102	; 0x66
 8004a72:	d109      	bne.n	8004a88 <tfminiplusIrq+0x2a0>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = pixhawk;
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
 8004a86:	e0e5      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	795b      	ldrb	r3, [r3, #5]
 8004a8c:	2b05      	cmp	r3, #5
 8004a8e:	d115      	bne.n	8004abc <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[2] == 0x05) &&
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004a94:	2b05      	cmp	r3, #5
 8004a96:	d111      	bne.n	8004abc <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[3] == 0x03) &&
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d10d      	bne.n	8004abc <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[4] == 0x67))
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x03) &&
 8004aa4:	2b67      	cmp	r3, #103	; 0x67
 8004aa6:	d109      	bne.n	8004abc <tfminiplusIrq+0x2d4>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = standard_mm;
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8004aba:	e0cb      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x08) &&
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	795b      	ldrb	r3, [r3, #5]
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d139      	bne.n	8004b38 <tfminiplusIrq+0x350>
					(pLidar->serialBuffer[2] == 0x06))
 8004ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac6:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x08) &&
 8004ac8:	2b06      	cmp	r3, #6
 8004aca:	d135      	bne.n	8004b38 <tfminiplusIrq+0x350>
			{
				// On v�rifie le checksum
				checksum = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<7;i++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	e00b      	b.n	8004aee <tfminiplusIrq+0x306>
					checksum += pLidar->serialBuffer[i];
 8004ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	4413      	add	r3, r2
 8004adc:	3304      	adds	r3, #4
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	4413      	add	r3, r2
 8004ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<7;i++)
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	3301      	adds	r3, #1
 8004aec:	61bb      	str	r3, [r7, #24]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	ddf0      	ble.n	8004ad6 <tfminiplusIrq+0x2ee>
				checksum &= 0xFF;
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[7];
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	7adb      	ldrb	r3, [r3, #11]
 8004afe:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 8004b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	f040 80a5 	bne.w	8004c54 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re le Baud Rate
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 8004b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0c:	79db      	ldrb	r3, [r3, #7]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	7a1b      	ldrb	r3, [r3, #8]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	441a      	add	r2, r3
							(pLidar->serialBuffer[5] << 16) + (pLidar->serialBuffer[6] << 24);
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	7a5b      	ldrb	r3, [r3, #9]
 8004b1c:	041b      	lsls	r3, r3, #16
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 8004b1e:	441a      	add	r2, r3
							(pLidar->serialBuffer[5] << 16) + (pLidar->serialBuffer[6] << 24);
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	7a9b      	ldrb	r3, [r3, #10]
 8004b24:	061b      	lsls	r3, r3, #24
 8004b26:	441a      	add	r2, r3
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
					pLidar->semaphore++;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 8004b36:	e08d      	b.n	8004c54 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	795b      	ldrb	r3, [r3, #5]
 8004b3c:	2b05      	cmp	r3, #5
 8004b3e:	d111      	bne.n	8004b64 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[2] == 0x07) &&
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004b44:	2b07      	cmp	r3, #7
 8004b46:	d10d      	bne.n	8004b64 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[3] == 0x00) &&
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x07) &&
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[4] == 0x66))
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8004b54:	2b66      	cmp	r3, #102	; 0x66
 8004b56:	d105      	bne.n	8004b64 <tfminiplusIrq+0x37c>
			{
				// Arr�te la g�n�ration automatique des distances
				// Les distances ne sont fournies que sur demande
				pLidar->semaphore++;
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
 8004b62:	e077      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	795b      	ldrb	r3, [r3, #5]
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d111      	bne.n	8004b90 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[2] == 0x07) &&
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004b70:	2b07      	cmp	r3, #7
 8004b72:	d10d      	bne.n	8004b90 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[3] == 0x01) &&
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x07) &&
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d109      	bne.n	8004b90 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[4] == 0x67))
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8004b80:	2b67      	cmp	r3, #103	; 0x67
 8004b82:	d105      	bne.n	8004b90 <tfminiplusIrq+0x3a8>
			{
				// D�marre la g�n�ration automatique des distances
				// Les distances sont fournies r�guli�rement. La fr�quence est fournie par le Frame Rate
				pLidar->semaphore++;
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b8e:	e061      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b92:	795b      	ldrb	r3, [r3, #5]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d11c      	bne.n	8004bd2 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[2] == 0x10) &&
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d118      	bne.n	8004bd2 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[3] == 0x00) &&
 8004ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba2:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x10) &&
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d114      	bne.n	8004bd2 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[4] == 0x6E))
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8004bac:	2b6e      	cmp	r3, #110	; 0x6e
 8004bae:	d110      	bne.n	8004bd2 <tfminiplusIrq+0x3ea>
			{
				// La demande de restauration des param�tres d'usine est accept�e
				pLidar->baudrate = 115200;
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
				pLidar->framerate = 100;
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	2264      	movs	r2, #100	; 0x64
 8004bbc:	635a      	str	r2, [r3, #52]	; 0x34
				pLidar->outputFormat = standard_cm;
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	1c5a      	adds	r2, r3, #1
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40
 8004bd0:	e040      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	795b      	ldrb	r3, [r3, #5]
 8004bd6:	2b05      	cmp	r3, #5
 8004bd8:	d111      	bne.n	8004bfe <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[2] == 0x10) &&
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d10d      	bne.n	8004bfe <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[3] == 0x01) &&
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x10) &&
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d109      	bne.n	8004bfe <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[4] == 0x6F))
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8004bee:	2b6f      	cmp	r3, #111	; 0x6f
 8004bf0:	d105      	bne.n	8004bfe <tfminiplusIrq+0x416>
			{
				// La demande de restauration des param�tres d'usine est refus�e
				pLidar->semaphore++;
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8004bfc:	e02a      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	795b      	ldrb	r3, [r3, #5]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d111      	bne.n	8004c2a <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[2] == 0x22) &&
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004c0a:	2b22      	cmp	r3, #34	; 0x22
 8004c0c:	d10d      	bne.n	8004c2a <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[3] == 0x00) &&
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x22) &&
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[4] == 0x6F))
 8004c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c18:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8004c1a:	2b6f      	cmp	r3, #111	; 0x6f
 8004c1c:	d105      	bne.n	8004c2a <tfminiplusIrq+0x442>
			{
				// La demande de sauvegarde des parametres courant est accept�e
				pLidar->semaphore++;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	641a      	str	r2, [r3, #64]	; 0x40
 8004c28:	e014      	b.n	8004c54 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	795b      	ldrb	r3, [r3, #5]
 8004c2e:	2b05      	cmp	r3, #5
 8004c30:	d110      	bne.n	8004c54 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[2] == 0x22) &&
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8004c36:	2b22      	cmp	r3, #34	; 0x22
 8004c38:	d10c      	bne.n	8004c54 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[3] == 0x01) &&
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x22) &&
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d108      	bne.n	8004c54 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[4] == 0x70))
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8004c46:	2b70      	cmp	r3, #112	; 0x70
 8004c48:	d104      	bne.n	8004c54 <tfminiplusIrq+0x46c>
			{
				// La demande de sauvegarde des parametres courant est refus�e
				pLidar->semaphore++;
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		// Sinon, c'est un format inconnu. On j�te la trame.

		// On r�arme le DMA
		HAL_UART_Receive_DMA(pLidar->pHuart, pLidar->serialBuffer, 9);
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	2209      	movs	r2, #9
 8004c5e:	4619      	mov	r1, r3
 8004c60:	f005 f951 	bl	8009f06 <HAL_UART_Receive_DMA>

	}

}
 8004c64:	bf00      	nop
 8004c66:	3730      	adds	r7, #48	; 0x30
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <tfminiplus_getLastAcquisition>:
//
//	}
//}

int tfminiplus_getLastAcquisition(LIDAR_ID a_numCapteur, int32_t *a_pDistance, int32_t *a_pStrength, int32_t *a_pTemperature)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
	int erreur;
	stMiniLidar *pLidar;

	if(a_numCapteur == MINILIDAR_DROIT)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d102      	bne.n	8004c88 <tfminiplus_getLastAcquisition+0x1c>
		pLidar = &miniLidarDroit;
 8004c82:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <tfminiplus_getLastAcquisition+0xc4>)
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e013      	b.n	8004cb0 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_GAUCHE)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <tfminiplus_getLastAcquisition+0x28>
		pLidar = &miniLidarGauche;
 8004c8e:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <tfminiplus_getLastAcquisition+0xc8>)
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	e00d      	b.n	8004cb0 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_HAUT)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d102      	bne.n	8004ca0 <tfminiplus_getLastAcquisition+0x34>
		pLidar = &miniLidarHaut;
 8004c9a:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <tfminiplus_getLastAcquisition+0xcc>)
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	e007      	b.n	8004cb0 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_AVANT)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d102      	bne.n	8004cac <tfminiplus_getLastAcquisition+0x40>
		pLidar = &miniLidarAvant;
 8004ca6:	4b25      	ldr	r3, [pc, #148]	; (8004d3c <tfminiplus_getLastAcquisition+0xd0>)
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	e001      	b.n	8004cb0 <tfminiplus_getLastAcquisition+0x44>
	else
		pLidar = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]

	if(pLidar != 0)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d031      	beq.n	8004d1a <tfminiplus_getLastAcquisition+0xae>
	{
		// On renvoie la distance mesur�e par le premier capteur
		if(pLidar->distance == -2)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	f113 0f02 	cmn.w	r3, #2
 8004cbe:	d10a      	bne.n	8004cd6 <tfminiplus_getLastAcquisition+0x6a>
		{
			*a_pDistance = -2;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f06f 0201 	mvn.w	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
			*a_pStrength = 0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
			*a_pTemperature = 0;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	e01a      	b.n	8004d0c <tfminiplus_getLastAcquisition+0xa0>
		}
		else if((pLidar->strength >= 100) && (pLidar->strength != 65535))
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	2b63      	cmp	r3, #99	; 0x63
 8004cdc:	dd12      	ble.n	8004d04 <tfminiplus_getLastAcquisition+0x98>
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00c      	beq.n	8004d04 <tfminiplus_getLastAcquisition+0x98>
		{
			*a_pDistance = pLidar->distance;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	601a      	str	r2, [r3, #0]
			*a_pStrength = pLidar->strength;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
			*a_pTemperature = pLidar->temperature;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e003      	b.n	8004d0c <tfminiplus_getLastAcquisition+0xa0>
		}
		else
		{
			*a_pDistance = -1;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f04f 32ff 	mov.w	r2, #4294967295
 8004d0a:	601a      	str	r2, [r3, #0]
		}
		erreur = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
		// En gros, le lidar envoie des captures toutes les 10 ms.
		// La valeur du strength du rayon de retour permet de savoir si la mesure est valide.
		// On peut avoir strength 250 250 10 10 10 10 10 10
		// Si le logiciel applicatif prend la mesure apr�s le deuxi�me 250, et qu'il prend la deuxi�me mesure apr�s le 4ieme 10,
		// alors le driver pourrait renvoyer la derni�re valeur valide, mais elle est tr�s ancienne.
		pLidar->distance = -2;
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	f06f 0201 	mvn.w	r2, #1
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
 8004d18:	e002      	b.n	8004d20 <tfminiplus_getLastAcquisition+0xb4>
	}
	else
		// Numero de capteur inconnu
		erreur = -1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	617b      	str	r3, [r7, #20]

	return erreur;
 8004d20:	697b      	ldr	r3, [r7, #20]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000c00 	.word	0x20000c00
 8004d34:	20000d00 	.word	0x20000d00
 8004d38:	20000c48 	.word	0x20000c48
 8004d3c:	20000cb8 	.word	0x20000cb8

08004d40 <tfminiplus_init>:

	return erreur;
}

int tfminiplus_init()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef retour;

	// Initialisation des parametres
	miniLidarDroit.pHuart = &huart5;
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <tfminiplus_init+0x204>)
 8004d48:	4a7f      	ldr	r2, [pc, #508]	; (8004f48 <tfminiplus_init+0x208>)
 8004d4a:	601a      	str	r2, [r3, #0]
	miniLidarDroit.distance = -2;
 8004d4c:	4b7d      	ldr	r3, [pc, #500]	; (8004f44 <tfminiplus_init+0x204>)
 8004d4e:	f06f 0201 	mvn.w	r2, #1
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarDroit.strength = 0;
 8004d54:	4b7b      	ldr	r3, [pc, #492]	; (8004f44 <tfminiplus_init+0x204>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarDroit.temperature = 0;
 8004d5a:	4b7a      	ldr	r3, [pc, #488]	; (8004f44 <tfminiplus_init+0x204>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarDroit.baudrate = 115200;
 8004d60:	4b78      	ldr	r3, [pc, #480]	; (8004f44 <tfminiplus_init+0x204>)
 8004d62:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d66:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarDroit.framerate = 100;
 8004d68:	4b76      	ldr	r3, [pc, #472]	; (8004f44 <tfminiplus_init+0x204>)
 8004d6a:	2264      	movs	r2, #100	; 0x64
 8004d6c:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarDroit.semaphore = 0;
 8004d6e:	4b75      	ldr	r3, [pc, #468]	; (8004f44 <tfminiplus_init+0x204>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarDroit.nb_irq = 0;
 8004d74:	4b73      	ldr	r3, [pc, #460]	; (8004f44 <tfminiplus_init+0x204>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarGauche.pHuart = &huart7;
 8004d7a:	4b74      	ldr	r3, [pc, #464]	; (8004f4c <tfminiplus_init+0x20c>)
 8004d7c:	4a74      	ldr	r2, [pc, #464]	; (8004f50 <tfminiplus_init+0x210>)
 8004d7e:	601a      	str	r2, [r3, #0]
	miniLidarGauche.distance = -2;
 8004d80:	4b72      	ldr	r3, [pc, #456]	; (8004f4c <tfminiplus_init+0x20c>)
 8004d82:	f06f 0201 	mvn.w	r2, #1
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarGauche.strength = 0;
 8004d88:	4b70      	ldr	r3, [pc, #448]	; (8004f4c <tfminiplus_init+0x20c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarGauche.temperature = 0;
 8004d8e:	4b6f      	ldr	r3, [pc, #444]	; (8004f4c <tfminiplus_init+0x20c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarGauche.baudrate = 115200;
 8004d94:	4b6d      	ldr	r3, [pc, #436]	; (8004f4c <tfminiplus_init+0x20c>)
 8004d96:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarGauche.framerate = 100;
 8004d9c:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <tfminiplus_init+0x20c>)
 8004d9e:	2264      	movs	r2, #100	; 0x64
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarGauche.semaphore = 0;
 8004da2:	4b6a      	ldr	r3, [pc, #424]	; (8004f4c <tfminiplus_init+0x20c>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarGauche.nb_irq = 0;
 8004da8:	4b68      	ldr	r3, [pc, #416]	; (8004f4c <tfminiplus_init+0x20c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarHaut.pHuart = &huart8;
 8004dae:	4b69      	ldr	r3, [pc, #420]	; (8004f54 <tfminiplus_init+0x214>)
 8004db0:	4a69      	ldr	r2, [pc, #420]	; (8004f58 <tfminiplus_init+0x218>)
 8004db2:	601a      	str	r2, [r3, #0]
	miniLidarHaut.distance = -2;
 8004db4:	4b67      	ldr	r3, [pc, #412]	; (8004f54 <tfminiplus_init+0x214>)
 8004db6:	f06f 0201 	mvn.w	r2, #1
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarHaut.strength = 0;
 8004dbc:	4b65      	ldr	r3, [pc, #404]	; (8004f54 <tfminiplus_init+0x214>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarHaut.temperature = 0;
 8004dc2:	4b64      	ldr	r3, [pc, #400]	; (8004f54 <tfminiplus_init+0x214>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarHaut.baudrate = 115200;
 8004dc8:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <tfminiplus_init+0x214>)
 8004dca:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarHaut.framerate = 100;
 8004dd0:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <tfminiplus_init+0x214>)
 8004dd2:	2264      	movs	r2, #100	; 0x64
 8004dd4:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarHaut.semaphore = 0;
 8004dd6:	4b5f      	ldr	r3, [pc, #380]	; (8004f54 <tfminiplus_init+0x214>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarHaut.nb_irq = 0;
 8004ddc:	4b5d      	ldr	r3, [pc, #372]	; (8004f54 <tfminiplus_init+0x214>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarAvant.pHuart = &huart4;
 8004de2:	4b5e      	ldr	r3, [pc, #376]	; (8004f5c <tfminiplus_init+0x21c>)
 8004de4:	4a5e      	ldr	r2, [pc, #376]	; (8004f60 <tfminiplus_init+0x220>)
 8004de6:	601a      	str	r2, [r3, #0]
	miniLidarAvant.distance = -2;
 8004de8:	4b5c      	ldr	r3, [pc, #368]	; (8004f5c <tfminiplus_init+0x21c>)
 8004dea:	f06f 0201 	mvn.w	r2, #1
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarAvant.strength = 0;
 8004df0:	4b5a      	ldr	r3, [pc, #360]	; (8004f5c <tfminiplus_init+0x21c>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarAvant.temperature = 0;
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <tfminiplus_init+0x21c>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarAvant.baudrate = 115200;
 8004dfc:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <tfminiplus_init+0x21c>)
 8004dfe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarAvant.framerate = 100;
 8004e04:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <tfminiplus_init+0x21c>)
 8004e06:	2264      	movs	r2, #100	; 0x64
 8004e08:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarAvant.semaphore = 0;
 8004e0a:	4b54      	ldr	r3, [pc, #336]	; (8004f5c <tfminiplus_init+0x21c>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarAvant.nb_irq = 0;
 8004e10:	4b52      	ldr	r3, [pc, #328]	; (8004f5c <tfminiplus_init+0x21c>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44

	// Sequence de mise sous tension pour limiter l'appel de courant
	HAL_GPIO_WritePin(lid1_pwr_en_GPIO_Port, lid1_pwr_en_Pin, GPIO_PIN_RESET);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2104      	movs	r1, #4
 8004e1a:	4852      	ldr	r0, [pc, #328]	; (8004f64 <tfminiplus_init+0x224>)
 8004e1c:	f001 fac4 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid2_pwr_en_GPIO_Port, lid2_pwr_en_Pin, GPIO_PIN_RESET);
 8004e20:	2200      	movs	r2, #0
 8004e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e26:	484f      	ldr	r0, [pc, #316]	; (8004f64 <tfminiplus_init+0x224>)
 8004e28:	f001 fabe 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid3_pwr_en_GPIO_Port, lid3_pwr_en_Pin, GPIO_PIN_RESET);
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e32:	484c      	ldr	r0, [pc, #304]	; (8004f64 <tfminiplus_init+0x224>)
 8004e34:	f001 fab8 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e3e:	484a      	ldr	r0, [pc, #296]	; (8004f68 <tfminiplus_init+0x228>)
 8004e40:	f001 fab2 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 8004e44:	2200      	movs	r2, #0
 8004e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e4a:	4848      	ldr	r0, [pc, #288]	; (8004f6c <tfminiplus_init+0x22c>)
 8004e4c:	f001 faac 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 8004e50:	2200      	movs	r2, #0
 8004e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e56:	4846      	ldr	r0, [pc, #280]	; (8004f70 <tfminiplus_init+0x230>)
 8004e58:	f001 faa6 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e60:	f000 f916 	bl	8005090 <HAL_Delay>

	HAL_GPIO_WritePin(lid1_pwr_en_GPIO_Port, lid1_pwr_en_Pin, GPIO_PIN_SET);
 8004e64:	2201      	movs	r2, #1
 8004e66:	2104      	movs	r1, #4
 8004e68:	483e      	ldr	r0, [pc, #248]	; (8004f64 <tfminiplus_init+0x224>)
 8004e6a:	f001 fa9d 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004e6e:	2064      	movs	r0, #100	; 0x64
 8004e70:	f000 f90e 	bl	8005090 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarAvant.pHuart, miniLidarAvant.serialBuffer, 26);
 8004e74:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <tfminiplus_init+0x21c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	221a      	movs	r2, #26
 8004e7a:	493e      	ldr	r1, [pc, #248]	; (8004f74 <tfminiplus_init+0x234>)
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f005 f842 	bl	8009f06 <HAL_UART_Receive_DMA>
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8004e86:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004e8a:	f000 f901 	bl	8005090 <HAL_Delay>

	HAL_GPIO_WritePin(lid2_pwr_en_GPIO_Port, lid2_pwr_en_Pin, GPIO_PIN_SET);
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e94:	4833      	ldr	r0, [pc, #204]	; (8004f64 <tfminiplus_init+0x224>)
 8004e96:	f001 fa87 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004e9a:	2064      	movs	r0, #100	; 0x64
 8004e9c:	f000 f8f8 	bl	8005090 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarGauche.pHuart, miniLidarGauche.serialBuffer, 10);
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <tfminiplus_init+0x20c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	4934      	ldr	r1, [pc, #208]	; (8004f78 <tfminiplus_init+0x238>)
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f005 f82c 	bl	8009f06 <HAL_UART_Receive_DMA>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8004eb2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004eb6:	f000 f8eb 	bl	8005090 <HAL_Delay>

	HAL_GPIO_WritePin(lid3_pwr_en_GPIO_Port, lid3_pwr_en_Pin, GPIO_PIN_SET);
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ec0:	4828      	ldr	r0, [pc, #160]	; (8004f64 <tfminiplus_init+0x224>)
 8004ec2:	f001 fa71 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004ec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eca:	f000 f8e1 	bl	8005090 <HAL_Delay>

	HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_SET);
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ed4:	4824      	ldr	r0, [pc, #144]	; (8004f68 <tfminiplus_init+0x228>)
 8004ed6:	f001 fa67 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004eda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ede:	f000 f8d7 	bl	8005090 <HAL_Delay>

	HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_SET);
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ee8:	4820      	ldr	r0, [pc, #128]	; (8004f6c <tfminiplus_init+0x22c>)
 8004eea:	f001 fa5d 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004eee:	2064      	movs	r0, #100	; 0x64
 8004ef0:	f000 f8ce 	bl	8005090 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarDroit.pHuart, miniLidarDroit.serialBuffer, 10);
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <tfminiplus_init+0x204>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	220a      	movs	r2, #10
 8004efa:	4920      	ldr	r1, [pc, #128]	; (8004f7c <tfminiplus_init+0x23c>)
 8004efc:	4618      	mov	r0, r3
 8004efe:	f005 f802 	bl	8009f06 <HAL_UART_Receive_DMA>
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8004f06:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004f0a:	f000 f8c1 	bl	8005090 <HAL_Delay>

	HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_SET);
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f14:	4816      	ldr	r0, [pc, #88]	; (8004f70 <tfminiplus_init+0x230>)
 8004f16:	f001 fa47 	bl	80063a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004f1a:	2064      	movs	r0, #100	; 0x64
 8004f1c:	f000 f8b8 	bl	8005090 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarHaut.pHuart, miniLidarHaut.serialBuffer, 26);
 8004f20:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <tfminiplus_init+0x214>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	221a      	movs	r2, #26
 8004f26:	4916      	ldr	r1, [pc, #88]	; (8004f80 <tfminiplus_init+0x240>)
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 ffec 	bl	8009f06 <HAL_UART_Receive_DMA>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8004f32:	f44f 7061 	mov.w	r0, #900	; 0x384
 8004f36:	f000 f8ab 	bl	8005090 <HAL_Delay>
//	retour += HAL_UART_Receive_DMA(miniLidarAvant.pHuart, miniLidarAvant.serialBuffer, 9);

//	retour = HAL_UART_Receive(miniLidarDroit.pHuart, miniLidarDroit.serialBuffer, 9, HAL_MAX_DELAY);
//	retour = 0;

	return retour;
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000c00 	.word	0x20000c00
 8004f48:	200005d0 	.word	0x200005d0
 8004f4c:	20000d00 	.word	0x20000d00
 8004f50:	200002f0 	.word	0x200002f0
 8004f54:	20000c48 	.word	0x20000c48
 8004f58:	20000878 	.word	0x20000878
 8004f5c:	20000cb8 	.word	0x20000cb8
 8004f60:	200008fc 	.word	0x200008fc
 8004f64:	40020400 	.word	0x40020400
 8004f68:	40020000 	.word	0x40020000
 8004f6c:	40020800 	.word	0x40020800
 8004f70:	40021400 	.word	0x40021400
 8004f74:	20000cbc 	.word	0x20000cbc
 8004f78:	20000d04 	.word	0x20000d04
 8004f7c:	20000c04 	.word	0x20000c04
 8004f80:	20000c4c 	.word	0x20000c4c

08004f84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f88:	480d      	ldr	r0, [pc, #52]	; (8004fc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f8a:	490e      	ldr	r1, [pc, #56]	; (8004fc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f8c:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f90:	e002      	b.n	8004f98 <LoopCopyDataInit>

08004f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f96:	3304      	adds	r3, #4

08004f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f9c:	d3f9      	bcc.n	8004f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f9e:	4a0b      	ldr	r2, [pc, #44]	; (8004fcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fa0:	4c0b      	ldr	r4, [pc, #44]	; (8004fd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fa4:	e001      	b.n	8004faa <LoopFillZerobss>

08004fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fa8:	3204      	adds	r2, #4

08004faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fac:	d3fb      	bcc.n	8004fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004fae:	f7ff fc09 	bl	80047c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fb2:	f005 ff5f 	bl	800ae74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fb6:	f7fc faef 	bl	8001598 <main>
  bx  lr    
 8004fba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004fbc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fc4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004fc8:	08011210 	.word	0x08011210
  ldr r2, =_sbss
 8004fcc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004fd0:	20000d5c 	.word	0x20000d5c

08004fd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fd4:	e7fe      	b.n	8004fd4 <ADC_IRQHandler>

08004fd6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fda:	2003      	movs	r0, #3
 8004fdc:	f000 fbd4 	bl	8005788 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fe0:	200f      	movs	r0, #15
 8004fe2:	f000 f805 	bl	8004ff0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004fe6:	f7fe fd33 	bl	8003a50 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ff8:	4b12      	ldr	r3, [pc, #72]	; (8005044 <HAL_InitTick+0x54>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b12      	ldr	r3, [pc, #72]	; (8005048 <HAL_InitTick+0x58>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005006:	fbb3 f3f1 	udiv	r3, r3, r1
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fbef 	bl	80057f2 <HAL_SYSTICK_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e00e      	b.n	800503c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b0f      	cmp	r3, #15
 8005022:	d80a      	bhi.n	800503a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005024:	2200      	movs	r2, #0
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	f000 fbb7 	bl	800579e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005030:	4a06      	ldr	r2, [pc, #24]	; (800504c <HAL_InitTick+0x5c>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e000      	b.n	800503c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	2000001c 	.word	0x2000001c
 8005048:	20000024 	.word	0x20000024
 800504c:	20000020 	.word	0x20000020

08005050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_IncTick+0x20>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_IncTick+0x24>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4413      	add	r3, r2
 8005060:	4a04      	ldr	r2, [pc, #16]	; (8005074 <HAL_IncTick+0x24>)
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000024 	.word	0x20000024
 8005074:	20000d48 	.word	0x20000d48

08005078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return uwTick;
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_GetTick+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000d48 	.word	0x20000d48

08005090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005098:	f7ff ffee 	bl	8005078 <HAL_GetTick>
 800509c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d005      	beq.n	80050b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <HAL_Delay+0x44>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80050b6:	bf00      	nop
 80050b8:	f7ff ffde 	bl	8005078 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d8f7      	bhi.n	80050b8 <HAL_Delay+0x28>
  {
  }
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000024 	.word	0x20000024

080050d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e031      	b.n	8005152 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fe fcce 	bl	8003a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d116      	bne.n	8005144 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <HAL_ADC_Init+0x84>)
 800511c:	4013      	ands	r3, r2
 800511e:	f043 0202 	orr.w	r2, r3, #2
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f964 	bl	80053f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	f043 0201 	orr.w	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
 8005142:	e001      	b.n	8005148 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	ffffeefd 	.word	0xffffeefd

08005160 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_ADC_ConfigChannel+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e12a      	b.n	80053d2 <HAL_ADC_ConfigChannel+0x272>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b09      	cmp	r3, #9
 800518a:	d93a      	bls.n	8005202 <HAL_ADC_ConfigChannel+0xa2>
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005194:	d035      	beq.n	8005202 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68d9      	ldr	r1, [r3, #12]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	4613      	mov	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	4413      	add	r3, r2
 80051aa:	3b1e      	subs	r3, #30
 80051ac:	2207      	movs	r2, #7
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	43da      	mvns	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	400a      	ands	r2, r1
 80051ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a87      	ldr	r2, [pc, #540]	; (80053e0 <HAL_ADC_ConfigChannel+0x280>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10a      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68d9      	ldr	r1, [r3, #12]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	061a      	lsls	r2, r3, #24
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051da:	e035      	b.n	8005248 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68d9      	ldr	r1, [r3, #12]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	4618      	mov	r0, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4403      	add	r3, r0
 80051f4:	3b1e      	subs	r3, #30
 80051f6:	409a      	lsls	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005200:	e022      	b.n	8005248 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6919      	ldr	r1, [r3, #16]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	2207      	movs	r2, #7
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43da      	mvns	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	400a      	ands	r2, r1
 8005224:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6919      	ldr	r1, [r3, #16]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	b29b      	uxth	r3, r3
 8005236:	4618      	mov	r0, r3
 8005238:	4603      	mov	r3, r0
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	4403      	add	r3, r0
 800523e:	409a      	lsls	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b06      	cmp	r3, #6
 800524e:	d824      	bhi.n	800529a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	3b05      	subs	r3, #5
 8005262:	221f      	movs	r2, #31
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	43da      	mvns	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	400a      	ands	r2, r1
 8005270:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	4618      	mov	r0, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	3b05      	subs	r3, #5
 800528c:	fa00 f203 	lsl.w	r2, r0, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	635a      	str	r2, [r3, #52]	; 0x34
 8005298:	e04c      	b.n	8005334 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d824      	bhi.n	80052ec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	3b23      	subs	r3, #35	; 0x23
 80052b4:	221f      	movs	r2, #31
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	43da      	mvns	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	400a      	ands	r2, r1
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	4618      	mov	r0, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	3b23      	subs	r3, #35	; 0x23
 80052de:	fa00 f203 	lsl.w	r2, r0, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	631a      	str	r2, [r3, #48]	; 0x30
 80052ea:	e023      	b.n	8005334 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	3b41      	subs	r3, #65	; 0x41
 80052fe:	221f      	movs	r2, #31
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	43da      	mvns	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	400a      	ands	r2, r1
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	4618      	mov	r0, r3
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	3b41      	subs	r3, #65	; 0x41
 8005328:	fa00 f203 	lsl.w	r2, r0, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a2a      	ldr	r2, [pc, #168]	; (80053e4 <HAL_ADC_ConfigChannel+0x284>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10a      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x1f4>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005346:	d105      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005348:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <HAL_ADC_ConfigChannel+0x288>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <HAL_ADC_ConfigChannel+0x288>)
 800534e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005352:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a22      	ldr	r2, [pc, #136]	; (80053e4 <HAL_ADC_ConfigChannel+0x284>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d109      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x212>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b12      	cmp	r3, #18
 8005364:	d105      	bne.n	8005372 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <HAL_ADC_ConfigChannel+0x288>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <HAL_ADC_ConfigChannel+0x288>)
 800536c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005370:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <HAL_ADC_ConfigChannel+0x284>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d125      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x268>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <HAL_ADC_ConfigChannel+0x280>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <HAL_ADC_ConfigChannel+0x22e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b11      	cmp	r3, #17
 800538c:	d11c      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <HAL_ADC_ConfigChannel+0x288>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_ADC_ConfigChannel+0x288>)
 8005394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005398:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <HAL_ADC_ConfigChannel+0x280>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d111      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_ADC_ConfigChannel+0x28c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <HAL_ADC_ConfigChannel+0x290>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	0c9a      	lsrs	r2, r3, #18
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053ba:	e002      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3b01      	subs	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f9      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	10000012 	.word	0x10000012
 80053e4:	40012000 	.word	0x40012000
 80053e8:	40012300 	.word	0x40012300
 80053ec:	2000001c 	.word	0x2000001c
 80053f0:	431bde83 	.word	0x431bde83

080053f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80053fc:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <ADC_Init+0x1ec>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4a77      	ldr	r2, [pc, #476]	; (80055e0 <ADC_Init+0x1ec>)
 8005402:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005406:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005408:	4b75      	ldr	r3, [pc, #468]	; (80055e0 <ADC_Init+0x1ec>)
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	4973      	ldr	r1, [pc, #460]	; (80055e0 <ADC_Init+0x1ec>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	021a      	lsls	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6899      	ldr	r1, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	4a58      	ldr	r2, [pc, #352]	; (80055e4 <ADC_Init+0x1f0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e00f      	b.n	80054ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0202 	bic.w	r2, r2, #2
 80054fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800553a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	3b01      	subs	r3, #1
 8005548:	035a      	lsls	r2, r3, #13
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e007      	b.n	8005564 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	3b01      	subs	r3, #1
 8005580:	051a      	lsls	r2, r3, #20
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055a6:	025a      	lsls	r2, r3, #9
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6899      	ldr	r1, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	029a      	lsls	r2, r3, #10
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012300 	.word	0x40012300
 80055e4:	0f000001 	.word	0x0f000001

080055e8 <__NVIC_SetPriorityGrouping>:
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <__NVIC_SetPriorityGrouping+0x40>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005604:	4013      	ands	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <__NVIC_SetPriorityGrouping+0x44>)
 8005612:	4313      	orrs	r3, r2
 8005614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005616:	4a04      	ldr	r2, [pc, #16]	; (8005628 <__NVIC_SetPriorityGrouping+0x40>)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	60d3      	str	r3, [r2, #12]
}
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	e000ed00 	.word	0xe000ed00
 800562c:	05fa0000 	.word	0x05fa0000

08005630 <__NVIC_GetPriorityGrouping>:
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005634:	4b04      	ldr	r3, [pc, #16]	; (8005648 <__NVIC_GetPriorityGrouping+0x18>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	f003 0307 	and.w	r3, r3, #7
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <__NVIC_EnableIRQ>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	2b00      	cmp	r3, #0
 800565c:	db0b      	blt.n	8005676 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	f003 021f 	and.w	r2, r3, #31
 8005664:	4907      	ldr	r1, [pc, #28]	; (8005684 <__NVIC_EnableIRQ+0x38>)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2001      	movs	r0, #1
 800566e:	fa00 f202 	lsl.w	r2, r0, r2
 8005672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	e000e100 	.word	0xe000e100

08005688 <__NVIC_SetPriority>:
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	6039      	str	r1, [r7, #0]
 8005692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005698:	2b00      	cmp	r3, #0
 800569a:	db0a      	blt.n	80056b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	490c      	ldr	r1, [pc, #48]	; (80056d4 <__NVIC_SetPriority+0x4c>)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	0112      	lsls	r2, r2, #4
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	440b      	add	r3, r1
 80056ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056b0:	e00a      	b.n	80056c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	4908      	ldr	r1, [pc, #32]	; (80056d8 <__NVIC_SetPriority+0x50>)
 80056b8:	79fb      	ldrb	r3, [r7, #7]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	3b04      	subs	r3, #4
 80056c0:	0112      	lsls	r2, r2, #4
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	440b      	add	r3, r1
 80056c6:	761a      	strb	r2, [r3, #24]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000e100 	.word	0xe000e100
 80056d8:	e000ed00 	.word	0xe000ed00

080056dc <NVIC_EncodePriority>:
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	; 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f1c3 0307 	rsb	r3, r3, #7
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	bf28      	it	cs
 80056fa:	2304      	movcs	r3, #4
 80056fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	3304      	adds	r3, #4
 8005702:	2b06      	cmp	r3, #6
 8005704:	d902      	bls.n	800570c <NVIC_EncodePriority+0x30>
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3b03      	subs	r3, #3
 800570a:	e000      	b.n	800570e <NVIC_EncodePriority+0x32>
 800570c:	2300      	movs	r3, #0
 800570e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43da      	mvns	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	401a      	ands	r2, r3
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005724:	f04f 31ff 	mov.w	r1, #4294967295
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	fa01 f303 	lsl.w	r3, r1, r3
 800572e:	43d9      	mvns	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005734:	4313      	orrs	r3, r2
}
 8005736:	4618      	mov	r0, r3
 8005738:	3724      	adds	r7, #36	; 0x24
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b082      	sub	sp, #8
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3b01      	subs	r3, #1
 8005750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005754:	d301      	bcc.n	800575a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005756:	2301      	movs	r3, #1
 8005758:	e00f      	b.n	800577a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800575a:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <SysTick_Config+0x40>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005762:	210f      	movs	r1, #15
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	f7ff ff8e 	bl	8005688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800576c:	4b05      	ldr	r3, [pc, #20]	; (8005784 <SysTick_Config+0x40>)
 800576e:	2200      	movs	r2, #0
 8005770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005772:	4b04      	ldr	r3, [pc, #16]	; (8005784 <SysTick_Config+0x40>)
 8005774:	2207      	movs	r2, #7
 8005776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	e000e010 	.word	0xe000e010

08005788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff ff29 	bl	80055e8 <__NVIC_SetPriorityGrouping>
}
 8005796:	bf00      	nop
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800579e:	b580      	push	{r7, lr}
 80057a0:	b086      	sub	sp, #24
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	4603      	mov	r3, r0
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057b0:	f7ff ff3e 	bl	8005630 <__NVIC_GetPriorityGrouping>
 80057b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f7ff ff8e 	bl	80056dc <NVIC_EncodePriority>
 80057c0:	4602      	mov	r2, r0
 80057c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c6:	4611      	mov	r1, r2
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ff5d 	bl	8005688 <__NVIC_SetPriority>
}
 80057ce:	bf00      	nop
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	4603      	mov	r3, r0
 80057de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff31 	bl	800564c <__NVIC_EnableIRQ>
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff ffa2 	bl	8005744 <SysTick_Config>
 8005800:	4603      	mov	r3, r0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005818:	f7ff fc2e 	bl	8005078 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e099      	b.n	800595c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005848:	e00f      	b.n	800586a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800584a:	f7ff fc15 	bl	8005078 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b05      	cmp	r3, #5
 8005856:	d908      	bls.n	800586a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2203      	movs	r2, #3
 8005862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e078      	b.n	800595c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1e8      	bne.n	800584a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4b38      	ldr	r3, [pc, #224]	; (8005964 <HAL_DMA_Init+0x158>)
 8005884:	4013      	ands	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005896:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	d107      	bne.n	80058d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	4313      	orrs	r3, r2
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0307 	bic.w	r3, r3, #7
 80058ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d117      	bne.n	800592e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00e      	beq.n	800592e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fb09 	bl	8005f28 <DMA_CheckFifoParam>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2240      	movs	r2, #64	; 0x40
 8005920:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800592a:	2301      	movs	r3, #1
 800592c:	e016      	b.n	800595c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fac0 	bl	8005ebc <DMA_CalcBaseAndBitshift>
 800593c:	4603      	mov	r3, r0
 800593e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005944:	223f      	movs	r2, #63	; 0x3f
 8005946:	409a      	lsls	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	f010803f 	.word	0xf010803f

08005968 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800597e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_DMA_Start_IT+0x26>
 800598a:	2302      	movs	r3, #2
 800598c:	e048      	b.n	8005a20 <HAL_DMA_Start_IT+0xb8>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d137      	bne.n	8005a12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 fa52 	bl	8005e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	223f      	movs	r2, #63	; 0x3f
 80059c2:	409a      	lsls	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0216 	orr.w	r2, r2, #22
 80059d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695a      	ldr	r2, [r3, #20]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0208 	orr.w	r2, r2, #8
 80059fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0201 	orr.w	r2, r2, #1
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e005      	b.n	8005a1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a36:	f7ff fb1f 	bl	8005078 <HAL_GetTick>
 8005a3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d008      	beq.n	8005a5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e052      	b.n	8005b00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0216 	bic.w	r2, r2, #22
 8005a68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <HAL_DMA_Abort+0x62>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d007      	beq.n	8005a9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0208 	bic.w	r2, r2, #8
 8005a98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005aaa:	e013      	b.n	8005ad4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aac:	f7ff fae4 	bl	8005078 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b05      	cmp	r3, #5
 8005ab8:	d90c      	bls.n	8005ad4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2203      	movs	r2, #3
 8005acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e015      	b.n	8005b00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1e4      	bne.n	8005aac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae6:	223f      	movs	r2, #63	; 0x3f
 8005ae8:	409a      	lsls	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d004      	beq.n	8005b26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2280      	movs	r2, #128	; 0x80
 8005b20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e00c      	b.n	8005b40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2205      	movs	r2, #5
 8005b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005b58:	4b92      	ldr	r3, [pc, #584]	; (8005da4 <HAL_DMA_IRQHandler+0x258>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a92      	ldr	r2, [pc, #584]	; (8005da8 <HAL_DMA_IRQHandler+0x25c>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	0a9b      	lsrs	r3, r3, #10
 8005b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b76:	2208      	movs	r2, #8
 8005b78:	409a      	lsls	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01a      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0204 	bic.w	r2, r2, #4
 8005b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	f043 0201 	orr.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d012      	beq.n	8005bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00b      	beq.n	8005bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	2201      	movs	r2, #1
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f043 0202 	orr.w	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf2:	2204      	movs	r2, #4
 8005bf4:	409a      	lsls	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0302 	and.w	r3, r3, #2
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	2204      	movs	r2, #4
 8005c12:	409a      	lsls	r2, r3
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1c:	f043 0204 	orr.w	r2, r3, #4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c28:	2210      	movs	r2, #16
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d043      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d03c      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c46:	2210      	movs	r2, #16
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d018      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d108      	bne.n	8005c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d024      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	4798      	blx	r3
 8005c7a:	e01f      	b.n	8005cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d01b      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	4798      	blx	r3
 8005c8c:	e016      	b.n	8005cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d107      	bne.n	8005cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0208 	bic.w	r2, r2, #8
 8005caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 808e 	beq.w	8005dea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8086 	beq.w	8005dea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d136      	bne.n	8005d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 0216 	bic.w	r2, r2, #22
 8005d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_DMA_IRQHandler+0x1da>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0208 	bic.w	r2, r2, #8
 8005d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d3a:	223f      	movs	r2, #63	; 0x3f
 8005d3c:	409a      	lsls	r2, r3
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d07d      	beq.n	8005e56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
        }
        return;
 8005d62:	e078      	b.n	8005e56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01c      	beq.n	8005dac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d108      	bne.n	8005d92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d030      	beq.n	8005dea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	e02b      	b.n	8005dea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d027      	beq.n	8005dea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
 8005da2:	e022      	b.n	8005dea <HAL_DMA_IRQHandler+0x29e>
 8005da4:	2000001c 	.word	0x2000001c
 8005da8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10f      	bne.n	8005dda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0210 	bic.w	r2, r2, #16
 8005dc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d032      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d022      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2205      	movs	r2, #5
 8005e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60bb      	str	r3, [r7, #8]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d307      	bcc.n	8005e32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f2      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x2ca>
 8005e30:	e000      	b.n	8005e34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005e32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
 8005e54:	e000      	b.n	8005e58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e56:	bf00      	nop
    }
  }
}
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	2b40      	cmp	r3, #64	; 0x40
 8005e8c:	d108      	bne.n	8005ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e9e:	e007      	b.n	8005eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]
}
 8005eb0:	bf00      	nop
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	3b10      	subs	r3, #16
 8005ecc:	4a13      	ldr	r2, [pc, #76]	; (8005f1c <DMA_CalcBaseAndBitshift+0x60>)
 8005ece:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed2:	091b      	lsrs	r3, r3, #4
 8005ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <DMA_CalcBaseAndBitshift+0x64>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d908      	bls.n	8005efc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <DMA_CalcBaseAndBitshift+0x68>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	659a      	str	r2, [r3, #88]	; 0x58
 8005efa:	e006      	b.n	8005f0a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <DMA_CalcBaseAndBitshift+0x68>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	aaaaaaab 	.word	0xaaaaaaab
 8005f20:	08010ca8 	.word	0x08010ca8
 8005f24:	fffffc00 	.word	0xfffffc00

08005f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11f      	bne.n	8005f82 <DMA_CheckFifoParam+0x5a>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d856      	bhi.n	8005ff6 <DMA_CheckFifoParam+0xce>
 8005f48:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <DMA_CheckFifoParam+0x28>)
 8005f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4e:	bf00      	nop
 8005f50:	08005f61 	.word	0x08005f61
 8005f54:	08005f73 	.word	0x08005f73
 8005f58:	08005f61 	.word	0x08005f61
 8005f5c:	08005ff7 	.word	0x08005ff7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d046      	beq.n	8005ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f70:	e043      	b.n	8005ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f7a:	d140      	bne.n	8005ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f80:	e03d      	b.n	8005ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8a:	d121      	bne.n	8005fd0 <DMA_CheckFifoParam+0xa8>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d837      	bhi.n	8006002 <DMA_CheckFifoParam+0xda>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <DMA_CheckFifoParam+0x70>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fa9 	.word	0x08005fa9
 8005f9c:	08005faf 	.word	0x08005faf
 8005fa0:	08005fa9 	.word	0x08005fa9
 8005fa4:	08005fc1 	.word	0x08005fc1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e030      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d025      	beq.n	8006006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fbe:	e022      	b.n	8006006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fc8:	d11f      	bne.n	800600a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fce:	e01c      	b.n	800600a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d903      	bls.n	8005fde <DMA_CheckFifoParam+0xb6>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d003      	beq.n	8005fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fdc:	e018      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e015      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00e      	beq.n	800600e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff4:	e00b      	b.n	800600e <DMA_CheckFifoParam+0xe6>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e00a      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e008      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8005ffe:	bf00      	nop
 8006000:	e006      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8006002:	bf00      	nop
 8006004:	e004      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 8006006:	bf00      	nop
 8006008:	e002      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;   
 800600a:	bf00      	nop
 800600c:	e000      	b.n	8006010 <DMA_CheckFifoParam+0xe8>
      break;
 800600e:	bf00      	nop
    }
  } 
  
  return status; 
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800602a:	2300      	movs	r3, #0
 800602c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006036:	2300      	movs	r3, #0
 8006038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800603a:	2300      	movs	r3, #0
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	e175      	b.n	800632c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006040:	2201      	movs	r2, #1
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4013      	ands	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	f040 8164 	bne.w	8006326 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d00b      	beq.n	800607e <HAL_GPIO_Init+0x5e>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d007      	beq.n	800607e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006072:	2b11      	cmp	r3, #17
 8006074:	d003      	beq.n	800607e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b12      	cmp	r3, #18
 800607c:	d130      	bne.n	80060e0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	2203      	movs	r2, #3
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43db      	mvns	r3, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4013      	ands	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060b4:	2201      	movs	r2, #1
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4013      	ands	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	091b      	lsrs	r3, r3, #4
 80060ca:	f003 0201 	and.w	r2, r3, #1
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	2203      	movs	r2, #3
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689a      	ldr	r2, [r3, #8]
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x100>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2b12      	cmp	r3, #18
 800611e:	d123      	bne.n	8006168 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	08da      	lsrs	r2, r3, #3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3208      	adds	r2, #8
 8006128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	220f      	movs	r2, #15
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4313      	orrs	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	08da      	lsrs	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3208      	adds	r2, #8
 8006162:	69b9      	ldr	r1, [r7, #24]
 8006164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	2203      	movs	r2, #3
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0203 	and.w	r2, r3, #3
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	f000 80be 	beq.w	8006326 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061aa:	4b66      	ldr	r3, [pc, #408]	; (8006344 <HAL_GPIO_Init+0x324>)
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	4a65      	ldr	r2, [pc, #404]	; (8006344 <HAL_GPIO_Init+0x324>)
 80061b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061b4:	6453      	str	r3, [r2, #68]	; 0x44
 80061b6:	4b63      	ldr	r3, [pc, #396]	; (8006344 <HAL_GPIO_Init+0x324>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061c2:	4a61      	ldr	r2, [pc, #388]	; (8006348 <HAL_GPIO_Init+0x328>)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	3302      	adds	r3, #2
 80061ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	220f      	movs	r2, #15
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	4013      	ands	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a58      	ldr	r2, [pc, #352]	; (800634c <HAL_GPIO_Init+0x32c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d037      	beq.n	800625e <HAL_GPIO_Init+0x23e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a57      	ldr	r2, [pc, #348]	; (8006350 <HAL_GPIO_Init+0x330>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d031      	beq.n	800625a <HAL_GPIO_Init+0x23a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a56      	ldr	r2, [pc, #344]	; (8006354 <HAL_GPIO_Init+0x334>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d02b      	beq.n	8006256 <HAL_GPIO_Init+0x236>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a55      	ldr	r2, [pc, #340]	; (8006358 <HAL_GPIO_Init+0x338>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d025      	beq.n	8006252 <HAL_GPIO_Init+0x232>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a54      	ldr	r2, [pc, #336]	; (800635c <HAL_GPIO_Init+0x33c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01f      	beq.n	800624e <HAL_GPIO_Init+0x22e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a53      	ldr	r2, [pc, #332]	; (8006360 <HAL_GPIO_Init+0x340>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d019      	beq.n	800624a <HAL_GPIO_Init+0x22a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a52      	ldr	r2, [pc, #328]	; (8006364 <HAL_GPIO_Init+0x344>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <HAL_GPIO_Init+0x226>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a51      	ldr	r2, [pc, #324]	; (8006368 <HAL_GPIO_Init+0x348>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00d      	beq.n	8006242 <HAL_GPIO_Init+0x222>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a50      	ldr	r2, [pc, #320]	; (800636c <HAL_GPIO_Init+0x34c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d007      	beq.n	800623e <HAL_GPIO_Init+0x21e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a4f      	ldr	r2, [pc, #316]	; (8006370 <HAL_GPIO_Init+0x350>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d101      	bne.n	800623a <HAL_GPIO_Init+0x21a>
 8006236:	2309      	movs	r3, #9
 8006238:	e012      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800623a:	230a      	movs	r3, #10
 800623c:	e010      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800623e:	2308      	movs	r3, #8
 8006240:	e00e      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006242:	2307      	movs	r3, #7
 8006244:	e00c      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006246:	2306      	movs	r3, #6
 8006248:	e00a      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800624a:	2305      	movs	r3, #5
 800624c:	e008      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800624e:	2304      	movs	r3, #4
 8006250:	e006      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006252:	2303      	movs	r3, #3
 8006254:	e004      	b.n	8006260 <HAL_GPIO_Init+0x240>
 8006256:	2302      	movs	r3, #2
 8006258:	e002      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <HAL_GPIO_Init+0x240>
 800625e:	2300      	movs	r3, #0
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	f002 0203 	and.w	r2, r2, #3
 8006266:	0092      	lsls	r2, r2, #2
 8006268:	4093      	lsls	r3, r2
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4313      	orrs	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006270:	4935      	ldr	r1, [pc, #212]	; (8006348 <HAL_GPIO_Init+0x328>)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	089b      	lsrs	r3, r3, #2
 8006276:	3302      	adds	r3, #2
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <HAL_GPIO_Init+0x354>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	43db      	mvns	r3, r3
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	4013      	ands	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062a2:	4a34      	ldr	r2, [pc, #208]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80062a8:	4b32      	ldr	r3, [pc, #200]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	4013      	ands	r3, r2
 80062b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062cc:	4a29      	ldr	r2, [pc, #164]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	43db      	mvns	r3, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4013      	ands	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062fc:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_GPIO_Init+0x354>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	43db      	mvns	r3, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006320:	4a14      	ldr	r2, [pc, #80]	; (8006374 <HAL_GPIO_Init+0x354>)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	3301      	adds	r3, #1
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	2b0f      	cmp	r3, #15
 8006330:	f67f ae86 	bls.w	8006040 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	3724      	adds	r7, #36	; 0x24
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	40013800 	.word	0x40013800
 800634c:	40020000 	.word	0x40020000
 8006350:	40020400 	.word	0x40020400
 8006354:	40020800 	.word	0x40020800
 8006358:	40020c00 	.word	0x40020c00
 800635c:	40021000 	.word	0x40021000
 8006360:	40021400 	.word	0x40021400
 8006364:	40021800 	.word	0x40021800
 8006368:	40021c00 	.word	0x40021c00
 800636c:	40022000 	.word	0x40022000
 8006370:	40022400 	.word	0x40022400
 8006374:	40013c00 	.word	0x40013c00

08006378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	887b      	ldrh	r3, [r7, #2]
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e001      	b.n	800639a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	807b      	strh	r3, [r7, #2]
 80063b4:	4613      	mov	r3, r2
 80063b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063b8:	787b      	ldrb	r3, [r7, #1]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063be:	887a      	ldrh	r2, [r7, #2]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063c4:	e003      	b.n	80063ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063c6:	887b      	ldrh	r3, [r7, #2]
 80063c8:	041a      	lsls	r2, r3, #16
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	619a      	str	r2, [r3, #24]
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
	...

080063dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e07f      	b.n	80064ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fd fbfe 	bl	8003c04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2224      	movs	r2, #36	; 0x24
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800642c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800643c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d107      	bne.n	8006456 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689a      	ldr	r2, [r3, #8]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	e006      	b.n	8006464 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006462:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d104      	bne.n	8006476 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006474:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4b1d      	ldr	r3, [pc, #116]	; (80064f8 <HAL_I2C_Init+0x11c>)
 8006482:	430b      	orrs	r3, r1
 8006484:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006494:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	ea42 0103 	orr.w	r1, r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	021a      	lsls	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	430a      	orrs	r2, r1
 80064ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	69d9      	ldr	r1, [r3, #28]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1a      	ldr	r2, [r3, #32]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	02008000 	.word	0x02008000

080064fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af02      	add	r7, sp, #8
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	461a      	mov	r2, r3
 8006508:	460b      	mov	r3, r1
 800650a:	817b      	strh	r3, [r7, #10]
 800650c:	4613      	mov	r3, r2
 800650e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b20      	cmp	r3, #32
 800651a:	f040 80da 	bne.w	80066d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <HAL_I2C_Master_Transmit+0x30>
 8006528:	2302      	movs	r3, #2
 800652a:	e0d3      	b.n	80066d4 <HAL_I2C_Master_Transmit+0x1d8>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006534:	f7fe fda0 	bl	8005078 <HAL_GetTick>
 8006538:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2319      	movs	r3, #25
 8006540:	2201      	movs	r2, #1
 8006542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f9e6 	bl	8006918 <I2C_WaitOnFlagUntilTimeout>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e0be      	b.n	80066d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2221      	movs	r2, #33	; 0x21
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2210      	movs	r2, #16
 8006562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	893a      	ldrh	r2, [r7, #8]
 8006576:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	2bff      	cmp	r3, #255	; 0xff
 8006586:	d90e      	bls.n	80065a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	22ff      	movs	r2, #255	; 0xff
 800658c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006592:	b2da      	uxtb	r2, r3
 8006594:	8979      	ldrh	r1, [r7, #10]
 8006596:	4b51      	ldr	r3, [pc, #324]	; (80066dc <HAL_I2C_Master_Transmit+0x1e0>)
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fb48 	bl	8006c34 <I2C_TransferConfig>
 80065a4:	e06c      	b.n	8006680 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	8979      	ldrh	r1, [r7, #10]
 80065b8:	4b48      	ldr	r3, [pc, #288]	; (80066dc <HAL_I2C_Master_Transmit+0x1e0>)
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fb37 	bl	8006c34 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80065c6:	e05b      	b.n	8006680 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	6a39      	ldr	r1, [r7, #32]
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 f9e3 	bl	8006998 <I2C_WaitOnTXISFlagUntilTimeout>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e07b      	b.n	80066d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	781a      	ldrb	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d034      	beq.n	8006680 <HAL_I2C_Master_Transmit+0x184>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d130      	bne.n	8006680 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	2200      	movs	r2, #0
 8006626:	2180      	movs	r1, #128	; 0x80
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f975 	bl	8006918 <I2C_WaitOnFlagUntilTimeout>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e04d      	b.n	80066d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	2bff      	cmp	r3, #255	; 0xff
 8006640:	d90e      	bls.n	8006660 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	22ff      	movs	r2, #255	; 0xff
 8006646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	b2da      	uxtb	r2, r3
 800664e:	8979      	ldrh	r1, [r7, #10]
 8006650:	2300      	movs	r3, #0
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 faeb 	bl	8006c34 <I2C_TransferConfig>
 800665e:	e00f      	b.n	8006680 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666e:	b2da      	uxtb	r2, r3
 8006670:	8979      	ldrh	r1, [r7, #10]
 8006672:	2300      	movs	r3, #0
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f000 fada 	bl	8006c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d19e      	bne.n	80065c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	6a39      	ldr	r1, [r7, #32]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f9c2 	bl	8006a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e01a      	b.n	80066d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2220      	movs	r2, #32
 80066a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6859      	ldr	r1, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80066b2:	400b      	ands	r3, r1
 80066b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	e000      	b.n	80066d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
  }
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	80002000 	.word	0x80002000
 80066e0:	fe00e800 	.word	0xfe00e800

080066e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	461a      	mov	r2, r3
 80066f0:	460b      	mov	r3, r1
 80066f2:	817b      	strh	r3, [r7, #10]
 80066f4:	4613      	mov	r3, r2
 80066f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b20      	cmp	r3, #32
 8006702:	f040 80db 	bne.w	80068bc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_I2C_Master_Receive+0x30>
 8006710:	2302      	movs	r3, #2
 8006712:	e0d4      	b.n	80068be <HAL_I2C_Master_Receive+0x1da>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800671c:	f7fe fcac 	bl	8005078 <HAL_GetTick>
 8006720:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	2319      	movs	r3, #25
 8006728:	2201      	movs	r2, #1
 800672a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8f2 	bl	8006918 <I2C_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0bf      	b.n	80068be <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2222      	movs	r2, #34	; 0x22
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2210      	movs	r2, #16
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	893a      	ldrh	r2, [r7, #8]
 800675e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800676a:	b29b      	uxth	r3, r3
 800676c:	2bff      	cmp	r3, #255	; 0xff
 800676e:	d90e      	bls.n	800678e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	22ff      	movs	r2, #255	; 0xff
 8006774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677a:	b2da      	uxtb	r2, r3
 800677c:	8979      	ldrh	r1, [r7, #10]
 800677e:	4b52      	ldr	r3, [pc, #328]	; (80068c8 <HAL_I2C_Master_Receive+0x1e4>)
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fa54 	bl	8006c34 <I2C_TransferConfig>
 800678c:	e06d      	b.n	800686a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679c:	b2da      	uxtb	r2, r3
 800679e:	8979      	ldrh	r1, [r7, #10]
 80067a0:	4b49      	ldr	r3, [pc, #292]	; (80068c8 <HAL_I2C_Master_Receive+0x1e4>)
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fa43 	bl	8006c34 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80067ae:	e05c      	b.n	800686a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	6a39      	ldr	r1, [r7, #32]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 f96b 	bl	8006a90 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e07c      	b.n	80068be <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d034      	beq.n	800686a <HAL_I2C_Master_Receive+0x186>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006804:	2b00      	cmp	r3, #0
 8006806:	d130      	bne.n	800686a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	2200      	movs	r2, #0
 8006810:	2180      	movs	r1, #128	; 0x80
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 f880 	bl	8006918 <I2C_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e04d      	b.n	80068be <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006826:	b29b      	uxth	r3, r3
 8006828:	2bff      	cmp	r3, #255	; 0xff
 800682a:	d90e      	bls.n	800684a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	22ff      	movs	r2, #255	; 0xff
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006836:	b2da      	uxtb	r2, r3
 8006838:	8979      	ldrh	r1, [r7, #10]
 800683a:	2300      	movs	r3, #0
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f9f6 	bl	8006c34 <I2C_TransferConfig>
 8006848:	e00f      	b.n	800686a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006858:	b2da      	uxtb	r2, r3
 800685a:	8979      	ldrh	r1, [r7, #10]
 800685c:	2300      	movs	r3, #0
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f9e5 	bl	8006c34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d19d      	bne.n	80067b0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	6a39      	ldr	r1, [r7, #32]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 f8cd 	bl	8006a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e01a      	b.n	80068be <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2220      	movs	r2, #32
 800688e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6859      	ldr	r1, [r3, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <HAL_I2C_Master_Receive+0x1e8>)
 800689c:	400b      	ands	r3, r1
 800689e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	80002400 	.word	0x80002400
 80068cc:	fe00e800 	.word	0xfe00e800

080068d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d103      	bne.n	80068ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2200      	movs	r2, #0
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f003 0301 	and.w	r3, r3, #1
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d007      	beq.n	800690c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0201 	orr.w	r2, r2, #1
 800690a:	619a      	str	r2, [r3, #24]
  }
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	4613      	mov	r3, r2
 8006926:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006928:	e022      	b.n	8006970 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d01e      	beq.n	8006970 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006932:	f7fe fba1 	bl	8005078 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	429a      	cmp	r2, r3
 8006940:	d302      	bcc.n	8006948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d113      	bne.n	8006970 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	f043 0220 	orr.w	r2, r3, #32
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2220      	movs	r2, #32
 8006958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e00f      	b.n	8006990 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	4013      	ands	r3, r2
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	429a      	cmp	r2, r3
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	461a      	mov	r2, r3
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	429a      	cmp	r2, r3
 800698c:	d0cd      	beq.n	800692a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069a4:	e02c      	b.n	8006a00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68b9      	ldr	r1, [r7, #8]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f8dc 	bl	8006b68 <I2C_IsAcknowledgeFailed>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e02a      	b.n	8006a10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c0:	d01e      	beq.n	8006a00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c2:	f7fe fb59 	bl	8005078 <HAL_GetTick>
 80069c6:	4602      	mov	r2, r0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	1ad3      	subs	r3, r2, r3
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d302      	bcc.n	80069d8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d113      	bne.n	8006a00 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f043 0220 	orr.w	r2, r3, #32
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2220      	movs	r2, #32
 80069e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e007      	b.n	8006a10 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d1cb      	bne.n	80069a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a24:	e028      	b.n	8006a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f89c 	bl	8006b68 <I2C_IsAcknowledgeFailed>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e026      	b.n	8006a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fe fb1d 	bl	8005078 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d113      	bne.n	8006a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a54:	f043 0220 	orr.w	r2, r3, #32
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e007      	b.n	8006a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d1cf      	bne.n	8006a26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a9c:	e055      	b.n	8006b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f860 	bl	8006b68 <I2C_IsAcknowledgeFailed>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e053      	b.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d129      	bne.n	8006b14 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d105      	bne.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e03f      	b.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6859      	ldr	r1, [r3, #4]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006aee:	400b      	ands	r3, r1
 8006af0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e022      	b.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b14:	f7fe fab0 	bl	8005078 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d302      	bcc.n	8006b2a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	f043 0220 	orr.w	r2, r3, #32
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2220      	movs	r2, #32
 8006b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e007      	b.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d1a2      	bne.n	8006a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	fe00e800 	.word	0xfe00e800

08006b68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 0310 	and.w	r3, r3, #16
 8006b7e:	2b10      	cmp	r3, #16
 8006b80:	d151      	bne.n	8006c26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b82:	e022      	b.n	8006bca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d01e      	beq.n	8006bca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b8c:	f7fe fa74 	bl	8005078 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d302      	bcc.n	8006ba2 <I2C_IsAcknowledgeFailed+0x3a>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d113      	bne.n	8006bca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba6:	f043 0220 	orr.w	r2, r3, #32
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e02e      	b.n	8006c28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b20      	cmp	r3, #32
 8006bd6:	d1d5      	bne.n	8006b84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2210      	movs	r2, #16
 8006bde:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2220      	movs	r2, #32
 8006be6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff fe71 	bl	80068d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6859      	ldr	r1, [r3, #4]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <I2C_IsAcknowledgeFailed+0xc8>)
 8006bfa:	400b      	ands	r3, r1
 8006bfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c02:	f043 0204 	orr.w	r2, r3, #4
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	fe00e800 	.word	0xfe00e800

08006c34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	607b      	str	r3, [r7, #4]
 8006c3e:	460b      	mov	r3, r1
 8006c40:	817b      	strh	r3, [r7, #10]
 8006c42:	4613      	mov	r3, r2
 8006c44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	0d5b      	lsrs	r3, r3, #21
 8006c50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <I2C_TransferConfig+0x58>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	ea02 0103 	and.w	r1, r2, r3
 8006c5e:	897b      	ldrh	r3, [r7, #10]
 8006c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c64:	7a7b      	ldrb	r3, [r7, #9]
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	431a      	orrs	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	03ff63ff 	.word	0x03ff63ff

08006c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d138      	bne.n	8006d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e032      	b.n	8006d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2224      	movs	r2, #36	; 0x24
 8006cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6819      	ldr	r1, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f042 0201 	orr.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	e000      	b.n	8006d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d18:	2302      	movs	r3, #2
  }
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d139      	bne.n	8006db0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e033      	b.n	8006db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2224      	movs	r2, #36	; 0x24
 8006d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e000      	b.n	8006db2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006db0:	2302      	movs	r3, #2
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006dca:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	4a22      	ldr	r2, [pc, #136]	; (8006e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8006dd6:	4b20      	ldr	r3, [pc, #128]	; (8006e58 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006de2:	4b1e      	ldr	r3, [pc, #120]	; (8006e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1d      	ldr	r2, [pc, #116]	; (8006e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dee:	f7fe f943 	bl	8005078 <HAL_GetTick>
 8006df2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006df4:	e009      	b.n	8006e0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006df6:	f7fe f93f 	bl	8005078 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e04:	d901      	bls.n	8006e0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e022      	b.n	8006e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006e0a:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e16:	d1ee      	bne.n	8006df6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006e18:	4b10      	ldr	r3, [pc, #64]	; (8006e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a0f      	ldr	r2, [pc, #60]	; (8006e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e24:	f7fe f928 	bl	8005078 <HAL_GetTick>
 8006e28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e2a:	e009      	b.n	8006e40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e2c:	f7fe f924 	bl	8005078 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e3a:	d901      	bls.n	8006e40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e007      	b.n	8006e50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e40:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e4c:	d1ee      	bne.n	8006e2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	40007000 	.word	0x40007000

08006e60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e291      	b.n	800739a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8087 	beq.w	8006f92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e84:	4b96      	ldr	r3, [pc, #600]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d00c      	beq.n	8006eaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e90:	4b93      	ldr	r3, [pc, #588]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 030c 	and.w	r3, r3, #12
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d112      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x62>
 8006e9c:	4b90      	ldr	r3, [pc, #576]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea8:	d10b      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eaa:	4b8d      	ldr	r3, [pc, #564]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d06c      	beq.n	8006f90 <HAL_RCC_OscConfig+0x130>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d168      	bne.n	8006f90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e26b      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eca:	d106      	bne.n	8006eda <HAL_RCC_OscConfig+0x7a>
 8006ecc:	4b84      	ldr	r3, [pc, #528]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a83      	ldr	r2, [pc, #524]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed6:	6013      	str	r3, [r2, #0]
 8006ed8:	e02e      	b.n	8006f38 <HAL_RCC_OscConfig+0xd8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10c      	bne.n	8006efc <HAL_RCC_OscConfig+0x9c>
 8006ee2:	4b7f      	ldr	r3, [pc, #508]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7e      	ldr	r2, [pc, #504]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	4b7c      	ldr	r3, [pc, #496]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a7b      	ldr	r2, [pc, #492]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ef8:	6013      	str	r3, [r2, #0]
 8006efa:	e01d      	b.n	8006f38 <HAL_RCC_OscConfig+0xd8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f04:	d10c      	bne.n	8006f20 <HAL_RCC_OscConfig+0xc0>
 8006f06:	4b76      	ldr	r3, [pc, #472]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a75      	ldr	r2, [pc, #468]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4b73      	ldr	r3, [pc, #460]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a72      	ldr	r2, [pc, #456]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e00b      	b.n	8006f38 <HAL_RCC_OscConfig+0xd8>
 8006f20:	4b6f      	ldr	r3, [pc, #444]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6e      	ldr	r2, [pc, #440]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b6c      	ldr	r3, [pc, #432]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6b      	ldr	r2, [pc, #428]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d013      	beq.n	8006f68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fe f89a 	bl	8005078 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f48:	f7fe f896 	bl	8005078 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b64      	cmp	r3, #100	; 0x64
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e21f      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	4b61      	ldr	r3, [pc, #388]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d0f0      	beq.n	8006f48 <HAL_RCC_OscConfig+0xe8>
 8006f66:	e014      	b.n	8006f92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fe f886 	bl	8005078 <HAL_GetTick>
 8006f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f6e:	e008      	b.n	8006f82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f70:	f7fe f882 	bl	8005078 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	2b64      	cmp	r3, #100	; 0x64
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e20b      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f82:	4b57      	ldr	r3, [pc, #348]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1f0      	bne.n	8006f70 <HAL_RCC_OscConfig+0x110>
 8006f8e:	e000      	b.n	8006f92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d069      	beq.n	8007072 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f9e:	4b50      	ldr	r3, [pc, #320]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00b      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006faa:	4b4d      	ldr	r3, [pc, #308]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 030c 	and.w	r3, r3, #12
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d11c      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x190>
 8006fb6:	4b4a      	ldr	r3, [pc, #296]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d116      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fc2:	4b47      	ldr	r3, [pc, #284]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0302 	and.w	r3, r3, #2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCC_OscConfig+0x17a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d001      	beq.n	8006fda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e1df      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fda:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	493d      	ldr	r1, [pc, #244]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fee:	e040      	b.n	8007072 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d023      	beq.n	8007040 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ff8:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a38      	ldr	r2, [pc, #224]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007004:	f7fe f838 	bl	8005078 <HAL_GetTick>
 8007008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700a:	e008      	b.n	800701e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800700c:	f7fe f834 	bl	8005078 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e1bd      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701e:	4b30      	ldr	r3, [pc, #192]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f0      	beq.n	800700c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800702a:	4b2d      	ldr	r3, [pc, #180]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	4929      	ldr	r1, [pc, #164]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 800703a:	4313      	orrs	r3, r2
 800703c:	600b      	str	r3, [r1, #0]
 800703e:	e018      	b.n	8007072 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007040:	4b27      	ldr	r3, [pc, #156]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704c:	f7fe f814 	bl	8005078 <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007054:	f7fe f810 	bl	8005078 <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e199      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007066:	4b1e      	ldr	r3, [pc, #120]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1f0      	bne.n	8007054 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d038      	beq.n	80070f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d019      	beq.n	80070ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007086:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 8007088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708a:	4a15      	ldr	r2, [pc, #84]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007092:	f7fd fff1 	bl	8005078 <HAL_GetTick>
 8007096:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709a:	f7fd ffed 	bl	8005078 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e176      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 80070ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0f0      	beq.n	800709a <HAL_RCC_OscConfig+0x23a>
 80070b8:	e01a      	b.n	80070f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 80070bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070be:	4a08      	ldr	r2, [pc, #32]	; (80070e0 <HAL_RCC_OscConfig+0x280>)
 80070c0:	f023 0301 	bic.w	r3, r3, #1
 80070c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070c6:	f7fd ffd7 	bl	8005078 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070cc:	e00a      	b.n	80070e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ce:	f7fd ffd3 	bl	8005078 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d903      	bls.n	80070e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e15c      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
 80070e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e4:	4b91      	ldr	r3, [pc, #580]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80070e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1ee      	bne.n	80070ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80a4 	beq.w	8007246 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070fe:	4b8b      	ldr	r3, [pc, #556]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10d      	bne.n	8007126 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800710a:	4b88      	ldr	r3, [pc, #544]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	4a87      	ldr	r2, [pc, #540]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007114:	6413      	str	r3, [r2, #64]	; 0x40
 8007116:	4b85      	ldr	r3, [pc, #532]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007122:	2301      	movs	r3, #1
 8007124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007126:	4b82      	ldr	r3, [pc, #520]	; (8007330 <HAL_RCC_OscConfig+0x4d0>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	2b00      	cmp	r3, #0
 8007130:	d118      	bne.n	8007164 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007132:	4b7f      	ldr	r3, [pc, #508]	; (8007330 <HAL_RCC_OscConfig+0x4d0>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a7e      	ldr	r2, [pc, #504]	; (8007330 <HAL_RCC_OscConfig+0x4d0>)
 8007138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800713e:	f7fd ff9b 	bl	8005078 <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007146:	f7fd ff97 	bl	8005078 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b64      	cmp	r3, #100	; 0x64
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e120      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007158:	4b75      	ldr	r3, [pc, #468]	; (8007330 <HAL_RCC_OscConfig+0x4d0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <HAL_RCC_OscConfig+0x31a>
 800716c:	4b6f      	ldr	r3, [pc, #444]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 800716e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007170:	4a6e      	ldr	r2, [pc, #440]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007172:	f043 0301 	orr.w	r3, r3, #1
 8007176:	6713      	str	r3, [r2, #112]	; 0x70
 8007178:	e02d      	b.n	80071d6 <HAL_RCC_OscConfig+0x376>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10c      	bne.n	800719c <HAL_RCC_OscConfig+0x33c>
 8007182:	4b6a      	ldr	r3, [pc, #424]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	4a69      	ldr	r2, [pc, #420]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007188:	f023 0301 	bic.w	r3, r3, #1
 800718c:	6713      	str	r3, [r2, #112]	; 0x70
 800718e:	4b67      	ldr	r3, [pc, #412]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4a66      	ldr	r2, [pc, #408]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007194:	f023 0304 	bic.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	; 0x70
 800719a:	e01c      	b.n	80071d6 <HAL_RCC_OscConfig+0x376>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b05      	cmp	r3, #5
 80071a2:	d10c      	bne.n	80071be <HAL_RCC_OscConfig+0x35e>
 80071a4:	4b61      	ldr	r3, [pc, #388]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	4a60      	ldr	r2, [pc, #384]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071aa:	f043 0304 	orr.w	r3, r3, #4
 80071ae:	6713      	str	r3, [r2, #112]	; 0x70
 80071b0:	4b5e      	ldr	r3, [pc, #376]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	4a5d      	ldr	r2, [pc, #372]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	6713      	str	r3, [r2, #112]	; 0x70
 80071bc:	e00b      	b.n	80071d6 <HAL_RCC_OscConfig+0x376>
 80071be:	4b5b      	ldr	r3, [pc, #364]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c2:	4a5a      	ldr	r2, [pc, #360]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071c4:	f023 0301 	bic.w	r3, r3, #1
 80071c8:	6713      	str	r3, [r2, #112]	; 0x70
 80071ca:	4b58      	ldr	r3, [pc, #352]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	4a57      	ldr	r2, [pc, #348]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071d0:	f023 0304 	bic.w	r3, r3, #4
 80071d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d015      	beq.n	800720a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071de:	f7fd ff4b 	bl	8005078 <HAL_GetTick>
 80071e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e4:	e00a      	b.n	80071fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e6:	f7fd ff47 	bl	8005078 <HAL_GetTick>
 80071ea:	4602      	mov	r2, r0
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	1ad3      	subs	r3, r2, r3
 80071f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d901      	bls.n	80071fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e0ce      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071fc:	4b4b      	ldr	r3, [pc, #300]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80071fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d0ee      	beq.n	80071e6 <HAL_RCC_OscConfig+0x386>
 8007208:	e014      	b.n	8007234 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720a:	f7fd ff35 	bl	8005078 <HAL_GetTick>
 800720e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007210:	e00a      	b.n	8007228 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007212:	f7fd ff31 	bl	8005078 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007220:	4293      	cmp	r3, r2
 8007222:	d901      	bls.n	8007228 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e0b8      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007228:	4b40      	ldr	r3, [pc, #256]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ee      	bne.n	8007212 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d105      	bne.n	8007246 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723a:	4b3c      	ldr	r3, [pc, #240]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	4a3b      	ldr	r2, [pc, #236]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007244:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80a4 	beq.w	8007398 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007250:	4b36      	ldr	r3, [pc, #216]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 030c 	and.w	r3, r3, #12
 8007258:	2b08      	cmp	r3, #8
 800725a:	d06b      	beq.n	8007334 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d149      	bne.n	80072f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007264:	4b31      	ldr	r3, [pc, #196]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a30      	ldr	r2, [pc, #192]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 800726a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800726e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fd ff02 	bl	8005078 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007278:	f7fd fefe 	bl	8005078 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e087      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69da      	ldr	r2, [r3, #28]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	431a      	orrs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	019b      	lsls	r3, r3, #6
 80072a6:	431a      	orrs	r2, r3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	085b      	lsrs	r3, r3, #1
 80072ae:	3b01      	subs	r3, #1
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	431a      	orrs	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	061b      	lsls	r3, r3, #24
 80072ba:	4313      	orrs	r3, r2
 80072bc:	4a1b      	ldr	r2, [pc, #108]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072c4:	4b19      	ldr	r3, [pc, #100]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d0:	f7fd fed2 	bl	8005078 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d8:	f7fd fece 	bl	8005078 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e057      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCC_OscConfig+0x478>
 80072f6:	e04f      	b.n	8007398 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072f8:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a0b      	ldr	r2, [pc, #44]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 80072fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007304:	f7fd feb8 	bl	8005078 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800730c:	f7fd feb4 	bl	8005078 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e03d      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <HAL_RCC_OscConfig+0x4cc>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f0      	bne.n	800730c <HAL_RCC_OscConfig+0x4ac>
 800732a:	e035      	b.n	8007398 <HAL_RCC_OscConfig+0x538>
 800732c:	40023800 	.word	0x40023800
 8007330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007334:	4b1b      	ldr	r3, [pc, #108]	; (80073a4 <HAL_RCC_OscConfig+0x544>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d028      	beq.n	8007394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800734c:	429a      	cmp	r2, r3
 800734e:	d121      	bne.n	8007394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800735a:	429a      	cmp	r2, r3
 800735c:	d11a      	bne.n	8007394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007364:	4013      	ands	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800736a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800736c:	4293      	cmp	r3, r2
 800736e:	d111      	bne.n	8007394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	085b      	lsrs	r3, r3, #1
 800737c:	3b01      	subs	r3, #1
 800737e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007380:	429a      	cmp	r2, r3
 8007382:	d107      	bne.n	8007394 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007390:	429a      	cmp	r2, r3
 8007392:	d001      	beq.n	8007398 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3718      	adds	r7, #24
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40023800 	.word	0x40023800

080073a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e0d0      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073c0:	4b6a      	ldr	r3, [pc, #424]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d910      	bls.n	80073f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ce:	4b67      	ldr	r3, [pc, #412]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f023 020f 	bic.w	r2, r3, #15
 80073d6:	4965      	ldr	r1, [pc, #404]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	4313      	orrs	r3, r2
 80073dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073de:	4b63      	ldr	r3, [pc, #396]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d001      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e0b8      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d020      	beq.n	800743e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007408:	4b59      	ldr	r3, [pc, #356]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	4a58      	ldr	r2, [pc, #352]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800740e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007412:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0308 	and.w	r3, r3, #8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007420:	4b53      	ldr	r3, [pc, #332]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	4a52      	ldr	r2, [pc, #328]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800742a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800742c:	4b50      	ldr	r3, [pc, #320]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	494d      	ldr	r1, [pc, #308]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800743a:	4313      	orrs	r3, r2
 800743c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d040      	beq.n	80074cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d107      	bne.n	8007462 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007452:	4b47      	ldr	r3, [pc, #284]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d115      	bne.n	800748a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e07f      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d107      	bne.n	800747a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800746a:	4b41      	ldr	r3, [pc, #260]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e073      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747a:	4b3d      	ldr	r3, [pc, #244]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e06b      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800748a:	4b39      	ldr	r3, [pc, #228]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f023 0203 	bic.w	r2, r3, #3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	4936      	ldr	r1, [pc, #216]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007498:	4313      	orrs	r3, r2
 800749a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800749c:	f7fd fdec 	bl	8005078 <HAL_GetTick>
 80074a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074a2:	e00a      	b.n	80074ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074a4:	f7fd fde8 	bl	8005078 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e053      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074ba:	4b2d      	ldr	r3, [pc, #180]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 020c 	and.w	r2, r3, #12
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d1eb      	bne.n	80074a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074cc:	4b27      	ldr	r3, [pc, #156]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d210      	bcs.n	80074fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074da:	4b24      	ldr	r3, [pc, #144]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	4922      	ldr	r1, [pc, #136]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ea:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_RCC_ClockConfig+0x1c4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d001      	beq.n	80074fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e032      	b.n	8007562 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0304 	and.w	r3, r3, #4
 8007504:	2b00      	cmp	r3, #0
 8007506:	d008      	beq.n	800751a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007508:	4b19      	ldr	r3, [pc, #100]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4916      	ldr	r1, [pc, #88]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007516:	4313      	orrs	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d009      	beq.n	800753a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007526:	4b12      	ldr	r3, [pc, #72]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	490e      	ldr	r1, [pc, #56]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007536:	4313      	orrs	r3, r2
 8007538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800753a:	f000 f821 	bl	8007580 <HAL_RCC_GetSysClockFreq>
 800753e:	4602      	mov	r2, r0
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <HAL_RCC_ClockConfig+0x1c8>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	091b      	lsrs	r3, r3, #4
 8007546:	f003 030f 	and.w	r3, r3, #15
 800754a:	490a      	ldr	r1, [pc, #40]	; (8007574 <HAL_RCC_ClockConfig+0x1cc>)
 800754c:	5ccb      	ldrb	r3, [r1, r3]
 800754e:	fa22 f303 	lsr.w	r3, r2, r3
 8007552:	4a09      	ldr	r2, [pc, #36]	; (8007578 <HAL_RCC_ClockConfig+0x1d0>)
 8007554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007556:	4b09      	ldr	r3, [pc, #36]	; (800757c <HAL_RCC_ClockConfig+0x1d4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd fd48 	bl	8004ff0 <HAL_InitTick>

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40023c00 	.word	0x40023c00
 8007570:	40023800 	.word	0x40023800
 8007574:	08010c90 	.word	0x08010c90
 8007578:	2000001c 	.word	0x2000001c
 800757c:	20000020 	.word	0x20000020

08007580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007580:	b5b0      	push	{r4, r5, r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007586:	2100      	movs	r1, #0
 8007588:	6079      	str	r1, [r7, #4]
 800758a:	2100      	movs	r1, #0
 800758c:	60f9      	str	r1, [r7, #12]
 800758e:	2100      	movs	r1, #0
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007592:	2100      	movs	r1, #0
 8007594:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007596:	4952      	ldr	r1, [pc, #328]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007598:	6889      	ldr	r1, [r1, #8]
 800759a:	f001 010c 	and.w	r1, r1, #12
 800759e:	2908      	cmp	r1, #8
 80075a0:	d00d      	beq.n	80075be <HAL_RCC_GetSysClockFreq+0x3e>
 80075a2:	2908      	cmp	r1, #8
 80075a4:	f200 8094 	bhi.w	80076d0 <HAL_RCC_GetSysClockFreq+0x150>
 80075a8:	2900      	cmp	r1, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_RCC_GetSysClockFreq+0x32>
 80075ac:	2904      	cmp	r1, #4
 80075ae:	d003      	beq.n	80075b8 <HAL_RCC_GetSysClockFreq+0x38>
 80075b0:	e08e      	b.n	80076d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075b2:	4b4c      	ldr	r3, [pc, #304]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80075b4:	60bb      	str	r3, [r7, #8]
      break;
 80075b6:	e08e      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075b8:	4b4b      	ldr	r3, [pc, #300]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80075ba:	60bb      	str	r3, [r7, #8]
      break;
 80075bc:	e08b      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075be:	4948      	ldr	r1, [pc, #288]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80075c0:	6849      	ldr	r1, [r1, #4]
 80075c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80075c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80075c8:	4945      	ldr	r1, [pc, #276]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80075ca:	6849      	ldr	r1, [r1, #4]
 80075cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80075d0:	2900      	cmp	r1, #0
 80075d2:	d024      	beq.n	800761e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075d4:	4942      	ldr	r1, [pc, #264]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80075d6:	6849      	ldr	r1, [r1, #4]
 80075d8:	0989      	lsrs	r1, r1, #6
 80075da:	4608      	mov	r0, r1
 80075dc:	f04f 0100 	mov.w	r1, #0
 80075e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80075e4:	f04f 0500 	mov.w	r5, #0
 80075e8:	ea00 0204 	and.w	r2, r0, r4
 80075ec:	ea01 0305 	and.w	r3, r1, r5
 80075f0:	493d      	ldr	r1, [pc, #244]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80075f2:	fb01 f003 	mul.w	r0, r1, r3
 80075f6:	2100      	movs	r1, #0
 80075f8:	fb01 f102 	mul.w	r1, r1, r2
 80075fc:	1844      	adds	r4, r0, r1
 80075fe:	493a      	ldr	r1, [pc, #232]	; (80076e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8007600:	fba2 0101 	umull	r0, r1, r2, r1
 8007604:	1863      	adds	r3, r4, r1
 8007606:	4619      	mov	r1, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	461a      	mov	r2, r3
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	f7f9 fb6a 	bl	8000ce8 <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4613      	mov	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	e04a      	b.n	80076b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800761e:	4b30      	ldr	r3, [pc, #192]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	099b      	lsrs	r3, r3, #6
 8007624:	461a      	mov	r2, r3
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800762e:	f04f 0100 	mov.w	r1, #0
 8007632:	ea02 0400 	and.w	r4, r2, r0
 8007636:	ea03 0501 	and.w	r5, r3, r1
 800763a:	4620      	mov	r0, r4
 800763c:	4629      	mov	r1, r5
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	014b      	lsls	r3, r1, #5
 8007648:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800764c:	0142      	lsls	r2, r0, #5
 800764e:	4610      	mov	r0, r2
 8007650:	4619      	mov	r1, r3
 8007652:	1b00      	subs	r0, r0, r4
 8007654:	eb61 0105 	sbc.w	r1, r1, r5
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	018b      	lsls	r3, r1, #6
 8007662:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007666:	0182      	lsls	r2, r0, #6
 8007668:	1a12      	subs	r2, r2, r0
 800766a:	eb63 0301 	sbc.w	r3, r3, r1
 800766e:	f04f 0000 	mov.w	r0, #0
 8007672:	f04f 0100 	mov.w	r1, #0
 8007676:	00d9      	lsls	r1, r3, #3
 8007678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800767c:	00d0      	lsls	r0, r2, #3
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	1912      	adds	r2, r2, r4
 8007684:	eb45 0303 	adc.w	r3, r5, r3
 8007688:	f04f 0000 	mov.w	r0, #0
 800768c:	f04f 0100 	mov.w	r1, #0
 8007690:	0299      	lsls	r1, r3, #10
 8007692:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007696:	0290      	lsls	r0, r2, #10
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4610      	mov	r0, r2
 800769e:	4619      	mov	r1, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	461a      	mov	r2, r3
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	f7f9 fb1e 	bl	8000ce8 <__aeabi_uldivmod>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4613      	mov	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	0c1b      	lsrs	r3, r3, #16
 80076ba:	f003 0303 	and.w	r3, r3, #3
 80076be:	3301      	adds	r3, #1
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076cc:	60bb      	str	r3, [r7, #8]
      break;
 80076ce:	e002      	b.n	80076d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80076d2:	60bb      	str	r3, [r7, #8]
      break;
 80076d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076d6:	68bb      	ldr	r3, [r7, #8]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bdb0      	pop	{r4, r5, r7, pc}
 80076e0:	40023800 	.word	0x40023800
 80076e4:	00f42400 	.word	0x00f42400
 80076e8:	017d7840 	.word	0x017d7840

080076ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <HAL_RCC_GetHCLKFreq+0x14>)
 80076f2:	681b      	ldr	r3, [r3, #0]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	2000001c 	.word	0x2000001c

08007704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007708:	f7ff fff0 	bl	80076ec <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b05      	ldr	r3, [pc, #20]	; (8007724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	0a9b      	lsrs	r3, r3, #10
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4903      	ldr	r1, [pc, #12]	; (8007728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40023800 	.word	0x40023800
 8007728:	08010ca0 	.word	0x08010ca0

0800772c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007730:	f7ff ffdc 	bl	80076ec <HAL_RCC_GetHCLKFreq>
 8007734:	4602      	mov	r2, r0
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0b5b      	lsrs	r3, r3, #13
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	4903      	ldr	r1, [pc, #12]	; (8007750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007742:	5ccb      	ldrb	r3, [r1, r3]
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40023800 	.word	0x40023800
 8007750:	08010ca0 	.word	0x08010ca0

08007754 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d012      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800777c:	4b69      	ldr	r3, [pc, #420]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	4a68      	ldr	r2, [pc, #416]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007782:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007786:	6093      	str	r3, [r2, #8]
 8007788:	4b66      	ldr	r3, [pc, #408]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007790:	4964      	ldr	r1, [pc, #400]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007792:	4313      	orrs	r3, r2
 8007794:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d017      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077ae:	4b5d      	ldr	r3, [pc, #372]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	4959      	ldr	r1, [pc, #356]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077cc:	d101      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80077ce:	2301      	movs	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80077da:	2301      	movs	r3, #1
 80077dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d017      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80077ea:	4b4e      	ldr	r3, [pc, #312]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	494a      	ldr	r1, [pc, #296]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007808:	d101      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800780a:	2301      	movs	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007816:	2301      	movs	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007826:	2301      	movs	r3, #1
 8007828:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 808b 	beq.w	800794e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007838:	4b3a      	ldr	r3, [pc, #232]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	4a39      	ldr	r2, [pc, #228]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007842:	6413      	str	r3, [r2, #64]	; 0x40
 8007844:	4b37      	ldr	r3, [pc, #220]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784c:	60bb      	str	r3, [r7, #8]
 800784e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007850:	4b35      	ldr	r3, [pc, #212]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a34      	ldr	r2, [pc, #208]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785c:	f7fd fc0c 	bl	8005078 <HAL_GetTick>
 8007860:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007862:	e008      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007864:	f7fd fc08 	bl	8005078 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b64      	cmp	r3, #100	; 0x64
 8007870:	d901      	bls.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e357      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007876:	4b2c      	ldr	r3, [pc, #176]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0f0      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007882:	4b28      	ldr	r3, [pc, #160]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d035      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	429a      	cmp	r2, r3
 800789e:	d02e      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078a0:	4b20      	ldr	r3, [pc, #128]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078aa:	4b1e      	ldr	r3, [pc, #120]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078b6:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80078c2:	4a18      	ldr	r2, [pc, #96]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078c8:	4b16      	ldr	r3, [pc, #88]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d114      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d4:	f7fd fbd0 	bl	8005078 <HAL_GetTick>
 80078d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078da:	e00a      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078dc:	f7fd fbcc 	bl	8005078 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d901      	bls.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e319      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078f2:	4b0c      	ldr	r3, [pc, #48]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0ee      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800790a:	d111      	bne.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800791a:	400b      	ands	r3, r1
 800791c:	4901      	ldr	r1, [pc, #4]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800791e:	4313      	orrs	r3, r2
 8007920:	608b      	str	r3, [r1, #8]
 8007922:	e00b      	b.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007924:	40023800 	.word	0x40023800
 8007928:	40007000 	.word	0x40007000
 800792c:	0ffffcff 	.word	0x0ffffcff
 8007930:	4bb1      	ldr	r3, [pc, #708]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4ab0      	ldr	r2, [pc, #704]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007936:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800793a:	6093      	str	r3, [r2, #8]
 800793c:	4bae      	ldr	r3, [pc, #696]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800793e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007948:	49ab      	ldr	r1, [pc, #684]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800794a:	4313      	orrs	r3, r2
 800794c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d010      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800795a:	4ba7      	ldr	r3, [pc, #668]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800795c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007960:	4aa5      	ldr	r2, [pc, #660]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007966:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800796a:	4ba3      	ldr	r3, [pc, #652]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800796c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	49a0      	ldr	r1, [pc, #640]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007976:	4313      	orrs	r3, r2
 8007978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007988:	4b9b      	ldr	r3, [pc, #620]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007996:	4998      	ldr	r1, [pc, #608]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079aa:	4b93      	ldr	r3, [pc, #588]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079b8:	498f      	ldr	r1, [pc, #572]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00a      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079cc:	4b8a      	ldr	r3, [pc, #552]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079da:	4987      	ldr	r1, [pc, #540]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079ee:	4b82      	ldr	r3, [pc, #520]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fc:	497e      	ldr	r1, [pc, #504]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00a      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007a10:	4b79      	ldr	r3, [pc, #484]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	f023 0203 	bic.w	r2, r3, #3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	4976      	ldr	r1, [pc, #472]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00a      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a32:	4b71      	ldr	r3, [pc, #452]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a38:	f023 020c 	bic.w	r2, r3, #12
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a40:	496d      	ldr	r1, [pc, #436]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00a      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a54:	4b68      	ldr	r3, [pc, #416]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a62:	4965      	ldr	r1, [pc, #404]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a76:	4b60      	ldr	r3, [pc, #384]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a84:	495c      	ldr	r1, [pc, #368]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a98:	4b57      	ldr	r3, [pc, #348]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa6:	4954      	ldr	r1, [pc, #336]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007aba:	4b4f      	ldr	r3, [pc, #316]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac8:	494b      	ldr	r1, [pc, #300]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00a      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007adc:	4b46      	ldr	r3, [pc, #280]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aea:	4943      	ldr	r1, [pc, #268]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007afe:	4b3e      	ldr	r3, [pc, #248]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0c:	493a      	ldr	r1, [pc, #232]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00a      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b20:	4b35      	ldr	r3, [pc, #212]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b2e:	4932      	ldr	r1, [pc, #200]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d011      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b42:	4b2d      	ldr	r3, [pc, #180]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b50:	4929      	ldr	r1, [pc, #164]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b60:	d101      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b82:	4b1d      	ldr	r3, [pc, #116]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b90:	4919      	ldr	r1, [pc, #100]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00b      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007ba4:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007baa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb4:	4910      	ldr	r1, [pc, #64]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d006      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80d9 	beq.w	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8007bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bdc:	f7fd fa4c 	bl	8005078 <HAL_GetTick>
 8007be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007be2:	e00b      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007be4:	f7fd fa48 	bl	8005078 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b64      	cmp	r3, #100	; 0x64
 8007bf0:	d904      	bls.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e197      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bfc:	4b6c      	ldr	r3, [pc, #432]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1ed      	bne.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d021      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11d      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c1c:	4b64      	ldr	r3, [pc, #400]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c22:	0c1b      	lsrs	r3, r3, #16
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c2a:	4b61      	ldr	r3, [pc, #388]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c30:	0e1b      	lsrs	r3, r3, #24
 8007c32:	f003 030f 	and.w	r3, r3, #15
 8007c36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	019a      	lsls	r2, r3, #6
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	431a      	orrs	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	061b      	lsls	r3, r3, #24
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	071b      	lsls	r3, r3, #28
 8007c50:	4957      	ldr	r1, [pc, #348]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d02e      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c82:	d129      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c84:	4b4a      	ldr	r3, [pc, #296]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	f003 0303 	and.w	r3, r3, #3
 8007c90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c92:	4b47      	ldr	r3, [pc, #284]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c98:	0f1b      	lsrs	r3, r3, #28
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	019a      	lsls	r2, r3, #6
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	431a      	orrs	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	061b      	lsls	r3, r3, #24
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	071b      	lsls	r3, r3, #28
 8007cb8:	493d      	ldr	r1, [pc, #244]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007cc0:	4b3b      	ldr	r3, [pc, #236]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc6:	f023 021f 	bic.w	r2, r3, #31
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	4937      	ldr	r1, [pc, #220]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d01d      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ce4:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cea:	0e1b      	lsrs	r3, r3, #24
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf8:	0f1b      	lsrs	r3, r3, #28
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	019a      	lsls	r2, r3, #6
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	041b      	lsls	r3, r3, #16
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	431a      	orrs	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	071b      	lsls	r3, r3, #28
 8007d18:	4925      	ldr	r1, [pc, #148]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d011      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	019a      	lsls	r2, r3, #6
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	041b      	lsls	r3, r3, #16
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	061b      	lsls	r3, r3, #24
 8007d40:	431a      	orrs	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	071b      	lsls	r3, r3, #28
 8007d48:	4919      	ldr	r1, [pc, #100]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d50:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a16      	ldr	r2, [pc, #88]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d5c:	f7fd f98c 	bl	8005078 <HAL_GetTick>
 8007d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d64:	f7fd f988 	bl	8005078 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	; 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e0d7      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d76:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	f040 80cd 	bne.w	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d8a:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a08      	ldr	r2, [pc, #32]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d96:	f7fd f96f 	bl	8005078 <HAL_GetTick>
 8007d9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d9c:	e00a      	b.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d9e:	f7fd f96b 	bl	8005078 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b64      	cmp	r3, #100	; 0x64
 8007daa:	d903      	bls.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e0ba      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007db0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007db4:	4b5e      	ldr	r3, [pc, #376]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dc0:	d0ed      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d003      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d009      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d02e      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d12a      	bne.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007dea:	4b51      	ldr	r3, [pc, #324]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007df8:	4b4d      	ldr	r3, [pc, #308]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfe:	0f1b      	lsrs	r3, r3, #28
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	695b      	ldr	r3, [r3, #20]
 8007e0a:	019a      	lsls	r2, r3, #6
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	041b      	lsls	r3, r3, #16
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	061b      	lsls	r3, r3, #24
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	071b      	lsls	r3, r3, #28
 8007e1e:	4944      	ldr	r1, [pc, #272]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e26:	4b42      	ldr	r3, [pc, #264]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	3b01      	subs	r3, #1
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	493d      	ldr	r1, [pc, #244]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d022      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e54:	d11d      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e56:	4b36      	ldr	r3, [pc, #216]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5c:	0e1b      	lsrs	r3, r3, #24
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007e64:	4b32      	ldr	r3, [pc, #200]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6a:	0f1b      	lsrs	r3, r3, #28
 8007e6c:	f003 0307 	and.w	r3, r3, #7
 8007e70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	019a      	lsls	r2, r3, #6
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	041b      	lsls	r3, r3, #16
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	431a      	orrs	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	071b      	lsls	r3, r3, #28
 8007e8a:	4929      	ldr	r1, [pc, #164]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0308 	and.w	r3, r3, #8
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d028      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e9e:	4b24      	ldr	r3, [pc, #144]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea4:	0e1b      	lsrs	r3, r3, #24
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007eac:	4b20      	ldr	r3, [pc, #128]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb2:	0c1b      	lsrs	r3, r3, #16
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	019a      	lsls	r2, r3, #6
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	061b      	lsls	r3, r3, #24
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	071b      	lsls	r3, r3, #28
 8007ed2:	4917      	ldr	r1, [pc, #92]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	4911      	ldr	r1, [pc, #68]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ef0:	4b0f      	ldr	r3, [pc, #60]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a0e      	ldr	r2, [pc, #56]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007efa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007efc:	f7fd f8bc 	bl	8005078 <HAL_GetTick>
 8007f00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007f04:	f7fd f8b8 	bl	8005078 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b64      	cmp	r3, #100	; 0x64
 8007f10:	d901      	bls.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e007      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f22:	d1ef      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	40023800 	.word	0x40023800

08007f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d101      	bne.n	8007f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e049      	b.n	8007fda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f7fb fe96 	bl	8003c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3304      	adds	r3, #4
 8007f70:	4619      	mov	r1, r3
 8007f72:	4610      	mov	r0, r2
 8007f74:	f000 ff74 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e049      	b.n	8008088 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d106      	bne.n	800800e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f841 	bl	8008090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f000 ff1d 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d109      	bne.n	80080c8 <HAL_TIM_PWM_Start+0x24>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	bf14      	ite	ne
 80080c0:	2301      	movne	r3, #1
 80080c2:	2300      	moveq	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	e03c      	b.n	8008142 <HAL_TIM_PWM_Start+0x9e>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d109      	bne.n	80080e2 <HAL_TIM_PWM_Start+0x3e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	bf14      	ite	ne
 80080da:	2301      	movne	r3, #1
 80080dc:	2300      	moveq	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	e02f      	b.n	8008142 <HAL_TIM_PWM_Start+0x9e>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	d109      	bne.n	80080fc <HAL_TIM_PWM_Start+0x58>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	bf14      	ite	ne
 80080f4:	2301      	movne	r3, #1
 80080f6:	2300      	moveq	r3, #0
 80080f8:	b2db      	uxtb	r3, r3
 80080fa:	e022      	b.n	8008142 <HAL_TIM_PWM_Start+0x9e>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b0c      	cmp	r3, #12
 8008100:	d109      	bne.n	8008116 <HAL_TIM_PWM_Start+0x72>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	bf14      	ite	ne
 800810e:	2301      	movne	r3, #1
 8008110:	2300      	moveq	r3, #0
 8008112:	b2db      	uxtb	r3, r3
 8008114:	e015      	b.n	8008142 <HAL_TIM_PWM_Start+0x9e>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b10      	cmp	r3, #16
 800811a:	d109      	bne.n	8008130 <HAL_TIM_PWM_Start+0x8c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b01      	cmp	r3, #1
 8008126:	bf14      	ite	ne
 8008128:	2301      	movne	r3, #1
 800812a:	2300      	moveq	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e008      	b.n	8008142 <HAL_TIM_PWM_Start+0x9e>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b01      	cmp	r3, #1
 800813a:	bf14      	ite	ne
 800813c:	2301      	movne	r3, #1
 800813e:	2300      	moveq	r3, #0
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e092      	b.n	8008270 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <HAL_TIM_PWM_Start+0xb6>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2202      	movs	r2, #2
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008158:	e023      	b.n	80081a2 <HAL_TIM_PWM_Start+0xfe>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b04      	cmp	r3, #4
 800815e:	d104      	bne.n	800816a <HAL_TIM_PWM_Start+0xc6>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008168:	e01b      	b.n	80081a2 <HAL_TIM_PWM_Start+0xfe>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b08      	cmp	r3, #8
 800816e:	d104      	bne.n	800817a <HAL_TIM_PWM_Start+0xd6>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008178:	e013      	b.n	80081a2 <HAL_TIM_PWM_Start+0xfe>
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b0c      	cmp	r3, #12
 800817e:	d104      	bne.n	800818a <HAL_TIM_PWM_Start+0xe6>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2202      	movs	r2, #2
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008188:	e00b      	b.n	80081a2 <HAL_TIM_PWM_Start+0xfe>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b10      	cmp	r3, #16
 800818e:	d104      	bne.n	800819a <HAL_TIM_PWM_Start+0xf6>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2202      	movs	r2, #2
 8008194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008198:	e003      	b.n	80081a2 <HAL_TIM_PWM_Start+0xfe>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2201      	movs	r2, #1
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 fbaa 	bl	8009904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a30      	ldr	r2, [pc, #192]	; (8008278 <HAL_TIM_PWM_Start+0x1d4>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d004      	beq.n	80081c4 <HAL_TIM_PWM_Start+0x120>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a2f      	ldr	r2, [pc, #188]	; (800827c <HAL_TIM_PWM_Start+0x1d8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d101      	bne.n	80081c8 <HAL_TIM_PWM_Start+0x124>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <HAL_TIM_PWM_Start+0x126>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d007      	beq.n	80081de <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a25      	ldr	r2, [pc, #148]	; (8008278 <HAL_TIM_PWM_Start+0x1d4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d022      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f0:	d01d      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a22      	ldr	r2, [pc, #136]	; (8008280 <HAL_TIM_PWM_Start+0x1dc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d018      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a20      	ldr	r2, [pc, #128]	; (8008284 <HAL_TIM_PWM_Start+0x1e0>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <HAL_TIM_PWM_Start+0x1e4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a19      	ldr	r2, [pc, #100]	; (800827c <HAL_TIM_PWM_Start+0x1d8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1b      	ldr	r2, [pc, #108]	; (800828c <HAL_TIM_PWM_Start+0x1e8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <HAL_TIM_PWM_Start+0x18a>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <HAL_TIM_PWM_Start+0x1ec>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d115      	bne.n	800825a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689a      	ldr	r2, [r3, #8]
 8008234:	4b17      	ldr	r3, [pc, #92]	; (8008294 <HAL_TIM_PWM_Start+0x1f0>)
 8008236:	4013      	ands	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b06      	cmp	r3, #6
 800823e:	d015      	beq.n	800826c <HAL_TIM_PWM_Start+0x1c8>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008246:	d011      	beq.n	800826c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008258:	e008      	b.n	800826c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f042 0201 	orr.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	e000      	b.n	800826e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800826c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40010000 	.word	0x40010000
 800827c:	40010400 	.word	0x40010400
 8008280:	40000400 	.word	0x40000400
 8008284:	40000800 	.word	0x40000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	40014000 	.word	0x40014000
 8008290:	40001800 	.word	0x40001800
 8008294:	00010007 	.word	0x00010007

08008298 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e049      	b.n	800833e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f841 	bl	8008346 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4610      	mov	r0, r2
 80082d8:	f000 fdc2 	bl	8008e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008346:	b480      	push	{r7}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800834e:	bf00      	nop
 8008350:	370c      	adds	r7, #12
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <HAL_TIM_IC_Start_IT+0x1a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008372:	b2db      	uxtb	r3, r3
 8008374:	e023      	b.n	80083be <HAL_TIM_IC_Start_IT+0x62>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b04      	cmp	r3, #4
 800837a:	d104      	bne.n	8008386 <HAL_TIM_IC_Start_IT+0x2a>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008382:	b2db      	uxtb	r3, r3
 8008384:	e01b      	b.n	80083be <HAL_TIM_IC_Start_IT+0x62>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d104      	bne.n	8008396 <HAL_TIM_IC_Start_IT+0x3a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008392:	b2db      	uxtb	r3, r3
 8008394:	e013      	b.n	80083be <HAL_TIM_IC_Start_IT+0x62>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b0c      	cmp	r3, #12
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_IC_Start_IT+0x4a>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	e00b      	b.n	80083be <HAL_TIM_IC_Start_IT+0x62>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b10      	cmp	r3, #16
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_IC_Start_IT+0x5a>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	e003      	b.n	80083be <HAL_TIM_IC_Start_IT+0x62>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <HAL_TIM_IC_Start_IT+0x74>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e013      	b.n	80083f8 <HAL_TIM_IC_Start_IT+0x9c>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d104      	bne.n	80083e0 <HAL_TIM_IC_Start_IT+0x84>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e00b      	b.n	80083f8 <HAL_TIM_IC_Start_IT+0x9c>
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b08      	cmp	r3, #8
 80083e4:	d104      	bne.n	80083f0 <HAL_TIM_IC_Start_IT+0x94>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	e003      	b.n	80083f8 <HAL_TIM_IC_Start_IT+0x9c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d102      	bne.n	8008406 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d001      	beq.n	800840a <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e0dd      	b.n	80085c6 <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d104      	bne.n	800841a <HAL_TIM_IC_Start_IT+0xbe>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008418:	e023      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x106>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b04      	cmp	r3, #4
 800841e:	d104      	bne.n	800842a <HAL_TIM_IC_Start_IT+0xce>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008428:	e01b      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x106>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b08      	cmp	r3, #8
 800842e:	d104      	bne.n	800843a <HAL_TIM_IC_Start_IT+0xde>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008438:	e013      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x106>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b0c      	cmp	r3, #12
 800843e:	d104      	bne.n	800844a <HAL_TIM_IC_Start_IT+0xee>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008448:	e00b      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x106>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	2b10      	cmp	r3, #16
 800844e:	d104      	bne.n	800845a <HAL_TIM_IC_Start_IT+0xfe>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008458:	e003      	b.n	8008462 <HAL_TIM_IC_Start_IT+0x106>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <HAL_TIM_IC_Start_IT+0x116>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008470:	e013      	b.n	800849a <HAL_TIM_IC_Start_IT+0x13e>
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	2b04      	cmp	r3, #4
 8008476:	d104      	bne.n	8008482 <HAL_TIM_IC_Start_IT+0x126>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008480:	e00b      	b.n	800849a <HAL_TIM_IC_Start_IT+0x13e>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b08      	cmp	r3, #8
 8008486:	d104      	bne.n	8008492 <HAL_TIM_IC_Start_IT+0x136>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008490:	e003      	b.n	800849a <HAL_TIM_IC_Start_IT+0x13e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2202      	movs	r2, #2
 8008496:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b0c      	cmp	r3, #12
 800849e:	d841      	bhi.n	8008524 <HAL_TIM_IC_Start_IT+0x1c8>
 80084a0:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <HAL_TIM_IC_Start_IT+0x14c>)
 80084a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a6:	bf00      	nop
 80084a8:	080084dd 	.word	0x080084dd
 80084ac:	08008525 	.word	0x08008525
 80084b0:	08008525 	.word	0x08008525
 80084b4:	08008525 	.word	0x08008525
 80084b8:	080084ef 	.word	0x080084ef
 80084bc:	08008525 	.word	0x08008525
 80084c0:	08008525 	.word	0x08008525
 80084c4:	08008525 	.word	0x08008525
 80084c8:	08008501 	.word	0x08008501
 80084cc:	08008525 	.word	0x08008525
 80084d0:	08008525 	.word	0x08008525
 80084d4:	08008525 	.word	0x08008525
 80084d8:	08008513 	.word	0x08008513
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0202 	orr.w	r2, r2, #2
 80084ea:	60da      	str	r2, [r3, #12]
      break;
 80084ec:	e01b      	b.n	8008526 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f042 0204 	orr.w	r2, r2, #4
 80084fc:	60da      	str	r2, [r3, #12]
      break;
 80084fe:	e012      	b.n	8008526 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0208 	orr.w	r2, r2, #8
 800850e:	60da      	str	r2, [r3, #12]
      break;
 8008510:	e009      	b.n	8008526 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0210 	orr.w	r2, r2, #16
 8008520:	60da      	str	r2, [r3, #12]
      break;
 8008522:	e000      	b.n	8008526 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8008524:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2201      	movs	r2, #1
 800852c:	6839      	ldr	r1, [r7, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f9e8 	bl	8009904 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a25      	ldr	r2, [pc, #148]	; (80085d0 <HAL_TIM_IC_Start_IT+0x274>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d022      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008546:	d01d      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a21      	ldr	r2, [pc, #132]	; (80085d4 <HAL_TIM_IC_Start_IT+0x278>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d018      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a20      	ldr	r2, [pc, #128]	; (80085d8 <HAL_TIM_IC_Start_IT+0x27c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a1e      	ldr	r2, [pc, #120]	; (80085dc <HAL_TIM_IC_Start_IT+0x280>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d00e      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a1d      	ldr	r2, [pc, #116]	; (80085e0 <HAL_TIM_IC_Start_IT+0x284>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d009      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a1b      	ldr	r2, [pc, #108]	; (80085e4 <HAL_TIM_IC_Start_IT+0x288>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d004      	beq.n	8008584 <HAL_TIM_IC_Start_IT+0x228>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a1a      	ldr	r2, [pc, #104]	; (80085e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d115      	bne.n	80085b0 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	4b18      	ldr	r3, [pc, #96]	; (80085ec <HAL_TIM_IC_Start_IT+0x290>)
 800858c:	4013      	ands	r3, r2
 800858e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b06      	cmp	r3, #6
 8008594:	d015      	beq.n	80085c2 <HAL_TIM_IC_Start_IT+0x266>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800859c:	d011      	beq.n	80085c2 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f042 0201 	orr.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085ae:	e008      	b.n	80085c2 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	e000      	b.n	80085c4 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	40010000 	.word	0x40010000
 80085d4:	40000400 	.word	0x40000400
 80085d8:	40000800 	.word	0x40000800
 80085dc:	40000c00 	.word	0x40000c00
 80085e0:	40010400 	.word	0x40010400
 80085e4:	40014000 	.word	0x40014000
 80085e8:	40001800 	.word	0x40001800
 80085ec:	00010007 	.word	0x00010007

080085f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b02      	cmp	r3, #2
 8008604:	d122      	bne.n	800864c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b02      	cmp	r3, #2
 8008612:	d11b      	bne.n	800864c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f06f 0202 	mvn.w	r2, #2
 800861c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f003 0303 	and.w	r3, r3, #3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fa f8cc 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8008638:	e005      	b.n	8008646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fbf2 	bl	8008e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fbf9 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b04      	cmp	r3, #4
 8008658:	d122      	bne.n	80086a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b04      	cmp	r3, #4
 8008666:	d11b      	bne.n	80086a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0204 	mvn.w	r2, #4
 8008670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fa f8a2 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 800868c:	e005      	b.n	800869a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fbc8 	bl	8008e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fbcf 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0308 	and.w	r3, r3, #8
 80086aa:	2b08      	cmp	r3, #8
 80086ac:	d122      	bne.n	80086f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d11b      	bne.n	80086f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f06f 0208 	mvn.w	r2, #8
 80086c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2204      	movs	r2, #4
 80086ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	f003 0303 	and.w	r3, r3, #3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f7fa f878 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 80086e0:	e005      	b.n	80086ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fb9e 	bl	8008e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fba5 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	2b10      	cmp	r3, #16
 8008700:	d122      	bne.n	8008748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b10      	cmp	r3, #16
 800870e:	d11b      	bne.n	8008748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f06f 0210 	mvn.w	r2, #16
 8008718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2208      	movs	r2, #8
 800871e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f7fa f84e 	bl	80027d0 <HAL_TIM_IC_CaptureCallback>
 8008734:	e005      	b.n	8008742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fb74 	bl	8008e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fb7b 	bl	8008e38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b01      	cmp	r3, #1
 8008754:	d10e      	bne.n	8008774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b01      	cmp	r3, #1
 8008762:	d107      	bne.n	8008774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f06f 0201 	mvn.w	r2, #1
 800876c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fb4e 	bl	8008e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877e:	2b80      	cmp	r3, #128	; 0x80
 8008780:	d10e      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878c:	2b80      	cmp	r3, #128	; 0x80
 800878e:	d107      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 f9ee 	bl	8009b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ae:	d10e      	bne.n	80087ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b80      	cmp	r3, #128	; 0x80
 80087bc:	d107      	bne.n	80087ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f9e1 	bl	8009b90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d8:	2b40      	cmp	r3, #64	; 0x40
 80087da:	d10e      	bne.n	80087fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e6:	2b40      	cmp	r3, #64	; 0x40
 80087e8:	d107      	bne.n	80087fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fb29 	bl	8008e4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	2b20      	cmp	r3, #32
 8008806:	d10e      	bne.n	8008826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b20      	cmp	r3, #32
 8008814:	d107      	bne.n	8008826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f06f 0220 	mvn.w	r2, #32
 800881e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f9a1 	bl	8009b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008844:	2302      	movs	r3, #2
 8008846:	e082      	b.n	800894e <HAL_TIM_IC_ConfigChannel+0x120>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d11b      	bne.n	800888e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6819      	ldr	r1, [r3, #0]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	685a      	ldr	r2, [r3, #4]
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f000 fe89 	bl	800957c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 020c 	bic.w	r2, r2, #12
 8008878:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6999      	ldr	r1, [r3, #24]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	619a      	str	r2, [r3, #24]
 800888c:	e05a      	b.n	8008944 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d11c      	bne.n	80088ce <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6819      	ldr	r1, [r3, #0]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	685a      	ldr	r2, [r3, #4]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f000 ff0d 	bl	80096c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80088b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6999      	ldr	r1, [r3, #24]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	021a      	lsls	r2, r3, #8
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	619a      	str	r2, [r3, #24]
 80088cc:	e03a      	b.n	8008944 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d11b      	bne.n	800890c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	6819      	ldr	r1, [r3, #0]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	685a      	ldr	r2, [r3, #4]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f000 ff5a 	bl	800979c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	69da      	ldr	r2, [r3, #28]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 020c 	bic.w	r2, r2, #12
 80088f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	69d9      	ldr	r1, [r3, #28]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	61da      	str	r2, [r3, #28]
 800890a:	e01b      	b.n	8008944 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f000 ff7a 	bl	8009814 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	69da      	ldr	r2, [r3, #28]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800892e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	69d9      	ldr	r1, [r3, #28]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	021a      	lsls	r2, r3, #8
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	430a      	orrs	r2, r1
 8008942:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800896a:	2b01      	cmp	r3, #1
 800896c:	d101      	bne.n	8008972 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800896e:	2302      	movs	r3, #2
 8008970:	e0fd      	b.n	8008b6e <HAL_TIM_PWM_ConfigChannel+0x216>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b14      	cmp	r3, #20
 800897e:	f200 80f0 	bhi.w	8008b62 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008982:	a201      	add	r2, pc, #4	; (adr r2, 8008988 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008b63 	.word	0x08008b63
 8008990:	08008b63 	.word	0x08008b63
 8008994:	08008b63 	.word	0x08008b63
 8008998:	08008a1d 	.word	0x08008a1d
 800899c:	08008b63 	.word	0x08008b63
 80089a0:	08008b63 	.word	0x08008b63
 80089a4:	08008b63 	.word	0x08008b63
 80089a8:	08008a5f 	.word	0x08008a5f
 80089ac:	08008b63 	.word	0x08008b63
 80089b0:	08008b63 	.word	0x08008b63
 80089b4:	08008b63 	.word	0x08008b63
 80089b8:	08008a9f 	.word	0x08008a9f
 80089bc:	08008b63 	.word	0x08008b63
 80089c0:	08008b63 	.word	0x08008b63
 80089c4:	08008b63 	.word	0x08008b63
 80089c8:	08008ae1 	.word	0x08008ae1
 80089cc:	08008b63 	.word	0x08008b63
 80089d0:	08008b63 	.word	0x08008b63
 80089d4:	08008b63 	.word	0x08008b63
 80089d8:	08008b21 	.word	0x08008b21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fadc 	bl	8008fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f042 0208 	orr.w	r2, r2, #8
 80089f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0204 	bic.w	r2, r2, #4
 8008a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6999      	ldr	r1, [r3, #24]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	619a      	str	r2, [r3, #24]
      break;
 8008a1a:	e0a3      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 fb2e 	bl	8009084 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6999      	ldr	r1, [r3, #24]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	021a      	lsls	r2, r3, #8
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	619a      	str	r2, [r3, #24]
      break;
 8008a5c:	e082      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68b9      	ldr	r1, [r7, #8]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 fb85 	bl	8009174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0208 	orr.w	r2, r2, #8
 8008a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69da      	ldr	r2, [r3, #28]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f022 0204 	bic.w	r2, r2, #4
 8008a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69d9      	ldr	r1, [r3, #28]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	691a      	ldr	r2, [r3, #16]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	61da      	str	r2, [r3, #28]
      break;
 8008a9c:	e062      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68b9      	ldr	r1, [r7, #8]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fbdb 	bl	8009260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69da      	ldr	r2, [r3, #28]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	69da      	ldr	r2, [r3, #28]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	69d9      	ldr	r1, [r3, #28]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	021a      	lsls	r2, r3, #8
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	61da      	str	r2, [r3, #28]
      break;
 8008ade:	e041      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68b9      	ldr	r1, [r7, #8]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fc12 	bl	8009310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0208 	orr.w	r2, r2, #8
 8008afa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0204 	bic.w	r2, r2, #4
 8008b0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	691a      	ldr	r2, [r3, #16]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b1e:	e021      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fc44 	bl	80093b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	021a      	lsls	r2, r3, #8
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b60:	e000      	b.n	8008b64 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008b62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2200      	movs	r2, #0
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop

08008b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_TIM_ConfigClockSource+0x18>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e0b3      	b.n	8008cf8 <HAL_TIM_ConfigClockSource+0x180>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4b55      	ldr	r3, [pc, #340]	; (8008d00 <HAL_TIM_ConfigClockSource+0x188>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bc8:	d03e      	beq.n	8008c48 <HAL_TIM_ConfigClockSource+0xd0>
 8008bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bce:	f200 8087 	bhi.w	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd6:	f000 8085 	beq.w	8008ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8008bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bde:	d87f      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008be0:	2b70      	cmp	r3, #112	; 0x70
 8008be2:	d01a      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0xa2>
 8008be4:	2b70      	cmp	r3, #112	; 0x70
 8008be6:	d87b      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008be8:	2b60      	cmp	r3, #96	; 0x60
 8008bea:	d050      	beq.n	8008c8e <HAL_TIM_ConfigClockSource+0x116>
 8008bec:	2b60      	cmp	r3, #96	; 0x60
 8008bee:	d877      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008bf0:	2b50      	cmp	r3, #80	; 0x50
 8008bf2:	d03c      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0xf6>
 8008bf4:	2b50      	cmp	r3, #80	; 0x50
 8008bf6:	d873      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008bf8:	2b40      	cmp	r3, #64	; 0x40
 8008bfa:	d058      	beq.n	8008cae <HAL_TIM_ConfigClockSource+0x136>
 8008bfc:	2b40      	cmp	r3, #64	; 0x40
 8008bfe:	d86f      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008c00:	2b30      	cmp	r3, #48	; 0x30
 8008c02:	d064      	beq.n	8008cce <HAL_TIM_ConfigClockSource+0x156>
 8008c04:	2b30      	cmp	r3, #48	; 0x30
 8008c06:	d86b      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d060      	beq.n	8008cce <HAL_TIM_ConfigClockSource+0x156>
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d867      	bhi.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d05c      	beq.n	8008cce <HAL_TIM_ConfigClockSource+0x156>
 8008c14:	2b10      	cmp	r3, #16
 8008c16:	d05a      	beq.n	8008cce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008c18:	e062      	b.n	8008ce0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	6899      	ldr	r1, [r3, #8]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f000 fe4b 	bl	80098c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	609a      	str	r2, [r3, #8]
      break;
 8008c46:	e04e      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	6899      	ldr	r1, [r3, #8]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f000 fe34 	bl	80098c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c6a:	609a      	str	r2, [r3, #8]
      break;
 8008c6c:	e03b      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	6859      	ldr	r1, [r3, #4]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f000 fcf2 	bl	8009664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2150      	movs	r1, #80	; 0x50
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fe01 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 8008c8c:	e02b      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	6859      	ldr	r1, [r3, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f000 fd4e 	bl	800973c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2160      	movs	r1, #96	; 0x60
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fdf1 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 8008cac:	e01b      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	6859      	ldr	r1, [r3, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f000 fcd2 	bl	8009664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2140      	movs	r1, #64	; 0x40
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fde1 	bl	800988e <TIM_ITRx_SetConfig>
      break;
 8008ccc:	e00b      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4610      	mov	r0, r2
 8008cda:	f000 fdd8 	bl	800988e <TIM_ITRx_SetConfig>
        break;
 8008cde:	e002      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008ce0:	bf00      	nop
 8008ce2:	e000      	b.n	8008ce6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008ce4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3710      	adds	r7, #16
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	fffeff88 	.word	0xfffeff88

08008d04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d101      	bne.n	8008d1c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	e031      	b.n	8008d80 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb94 	bl	800945c <TIM_SlaveTimer_SetConfig>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e018      	b.n	8008d80 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d5c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d6c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2201      	movs	r2, #1
 8008d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b0c      	cmp	r3, #12
 8008d9a:	d831      	bhi.n	8008e00 <HAL_TIM_ReadCapturedValue+0x78>
 8008d9c:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da2:	bf00      	nop
 8008da4:	08008dd9 	.word	0x08008dd9
 8008da8:	08008e01 	.word	0x08008e01
 8008dac:	08008e01 	.word	0x08008e01
 8008db0:	08008e01 	.word	0x08008e01
 8008db4:	08008de3 	.word	0x08008de3
 8008db8:	08008e01 	.word	0x08008e01
 8008dbc:	08008e01 	.word	0x08008e01
 8008dc0:	08008e01 	.word	0x08008e01
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008e01 	.word	0x08008e01
 8008dcc:	08008e01 	.word	0x08008e01
 8008dd0:	08008e01 	.word	0x08008e01
 8008dd4:	08008df7 	.word	0x08008df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dde:	60fb      	str	r3, [r7, #12]

      break;
 8008de0:	e00f      	b.n	8008e02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	60fb      	str	r3, [r7, #12]

      break;
 8008dea:	e00a      	b.n	8008e02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008df2:	60fb      	str	r3, [r7, #12]

      break;
 8008df4:	e005      	b.n	8008e02 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	60fb      	str	r3, [r7, #12]

      break;
 8008dfe:	e000      	b.n	8008e02 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008e00:	bf00      	nop
  }

  return tmpreg;
 8008e02:	68fb      	ldr	r3, [r7, #12]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a40      	ldr	r2, [pc, #256]	; (8008f74 <TIM_Base_SetConfig+0x114>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d013      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7e:	d00f      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a3d      	ldr	r2, [pc, #244]	; (8008f78 <TIM_Base_SetConfig+0x118>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00b      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a3c      	ldr	r2, [pc, #240]	; (8008f7c <TIM_Base_SetConfig+0x11c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d007      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a3b      	ldr	r2, [pc, #236]	; (8008f80 <TIM_Base_SetConfig+0x120>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_Base_SetConfig+0x40>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a3a      	ldr	r2, [pc, #232]	; (8008f84 <TIM_Base_SetConfig+0x124>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d108      	bne.n	8008eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a2f      	ldr	r2, [pc, #188]	; (8008f74 <TIM_Base_SetConfig+0x114>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d02b      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec0:	d027      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a2c      	ldr	r2, [pc, #176]	; (8008f78 <TIM_Base_SetConfig+0x118>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d023      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a2b      	ldr	r2, [pc, #172]	; (8008f7c <TIM_Base_SetConfig+0x11c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d01f      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a2a      	ldr	r2, [pc, #168]	; (8008f80 <TIM_Base_SetConfig+0x120>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d01b      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a29      	ldr	r2, [pc, #164]	; (8008f84 <TIM_Base_SetConfig+0x124>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d017      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a28      	ldr	r2, [pc, #160]	; (8008f88 <TIM_Base_SetConfig+0x128>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d013      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a27      	ldr	r2, [pc, #156]	; (8008f8c <TIM_Base_SetConfig+0x12c>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00f      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a26      	ldr	r2, [pc, #152]	; (8008f90 <TIM_Base_SetConfig+0x130>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d00b      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a25      	ldr	r2, [pc, #148]	; (8008f94 <TIM_Base_SetConfig+0x134>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d007      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	4a24      	ldr	r2, [pc, #144]	; (8008f98 <TIM_Base_SetConfig+0x138>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d003      	beq.n	8008f12 <TIM_Base_SetConfig+0xb2>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	4a23      	ldr	r2, [pc, #140]	; (8008f9c <TIM_Base_SetConfig+0x13c>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d108      	bne.n	8008f24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a0a      	ldr	r2, [pc, #40]	; (8008f74 <TIM_Base_SetConfig+0x114>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_Base_SetConfig+0xf8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a0c      	ldr	r2, [pc, #48]	; (8008f84 <TIM_Base_SetConfig+0x124>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d103      	bne.n	8008f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	615a      	str	r2, [r3, #20]
}
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	40010000 	.word	0x40010000
 8008f78:	40000400 	.word	0x40000400
 8008f7c:	40000800 	.word	0x40000800
 8008f80:	40000c00 	.word	0x40000c00
 8008f84:	40010400 	.word	0x40010400
 8008f88:	40014000 	.word	0x40014000
 8008f8c:	40014400 	.word	0x40014400
 8008f90:	40014800 	.word	0x40014800
 8008f94:	40001800 	.word	0x40001800
 8008f98:	40001c00 	.word	0x40001c00
 8008f9c:	40002000 	.word	0x40002000

08008fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	f023 0201 	bic.w	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a1b      	ldr	r3, [r3, #32]
 8008fba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4b2b      	ldr	r3, [pc, #172]	; (8009078 <TIM_OC1_SetConfig+0xd8>)
 8008fcc:	4013      	ands	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 0303 	bic.w	r3, r3, #3
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	f023 0302 	bic.w	r3, r3, #2
 8008fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a21      	ldr	r2, [pc, #132]	; (800907c <TIM_OC1_SetConfig+0xdc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_OC1_SetConfig+0x64>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a20      	ldr	r2, [pc, #128]	; (8009080 <TIM_OC1_SetConfig+0xe0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d10c      	bne.n	800901e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f023 0308 	bic.w	r3, r3, #8
 800900a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	4313      	orrs	r3, r2
 8009014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f023 0304 	bic.w	r3, r3, #4
 800901c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a16      	ldr	r2, [pc, #88]	; (800907c <TIM_OC1_SetConfig+0xdc>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d003      	beq.n	800902e <TIM_OC1_SetConfig+0x8e>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a15      	ldr	r2, [pc, #84]	; (8009080 <TIM_OC1_SetConfig+0xe0>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d111      	bne.n	8009052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800903c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	4313      	orrs	r3, r2
 8009046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	699b      	ldr	r3, [r3, #24]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	4313      	orrs	r3, r2
 8009050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	621a      	str	r2, [r3, #32]
}
 800906c:	bf00      	nop
 800906e:	371c      	adds	r7, #28
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	fffeff8f 	.word	0xfffeff8f
 800907c:	40010000 	.word	0x40010000
 8009080:	40010400 	.word	0x40010400

08009084 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f023 0210 	bic.w	r2, r3, #16
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	4b2e      	ldr	r3, [pc, #184]	; (8009168 <TIM_OC2_SetConfig+0xe4>)
 80090b0:	4013      	ands	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f023 0320 	bic.w	r3, r3, #32
 80090ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a23      	ldr	r2, [pc, #140]	; (800916c <TIM_OC2_SetConfig+0xe8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d003      	beq.n	80090ec <TIM_OC2_SetConfig+0x68>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a22      	ldr	r2, [pc, #136]	; (8009170 <TIM_OC2_SetConfig+0xec>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d10d      	bne.n	8009108 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	011b      	lsls	r3, r3, #4
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009106:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a18      	ldr	r2, [pc, #96]	; (800916c <TIM_OC2_SetConfig+0xe8>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d003      	beq.n	8009118 <TIM_OC2_SetConfig+0x94>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a17      	ldr	r2, [pc, #92]	; (8009170 <TIM_OC2_SetConfig+0xec>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d113      	bne.n	8009140 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800911e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	4313      	orrs	r3, r2
 800913e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	621a      	str	r2, [r3, #32]
}
 800915a:	bf00      	nop
 800915c:	371c      	adds	r7, #28
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	feff8fff 	.word	0xfeff8fff
 800916c:	40010000 	.word	0x40010000
 8009170:	40010400 	.word	0x40010400

08009174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	69db      	ldr	r3, [r3, #28]
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4b2d      	ldr	r3, [pc, #180]	; (8009254 <TIM_OC3_SetConfig+0xe0>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f023 0303 	bic.w	r3, r3, #3
 80091aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	021b      	lsls	r3, r3, #8
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a22      	ldr	r2, [pc, #136]	; (8009258 <TIM_OC3_SetConfig+0xe4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d003      	beq.n	80091da <TIM_OC3_SetConfig+0x66>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a21      	ldr	r2, [pc, #132]	; (800925c <TIM_OC3_SetConfig+0xe8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d10d      	bne.n	80091f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a17      	ldr	r2, [pc, #92]	; (8009258 <TIM_OC3_SetConfig+0xe4>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d003      	beq.n	8009206 <TIM_OC3_SetConfig+0x92>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a16      	ldr	r2, [pc, #88]	; (800925c <TIM_OC3_SetConfig+0xe8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d113      	bne.n	800922e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800920c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	4313      	orrs	r3, r2
 8009220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	011b      	lsls	r3, r3, #4
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	621a      	str	r2, [r3, #32]
}
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	fffeff8f 	.word	0xfffeff8f
 8009258:	40010000 	.word	0x40010000
 800925c:	40010400 	.word	0x40010400

08009260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4b1e      	ldr	r3, [pc, #120]	; (8009304 <TIM_OC4_SetConfig+0xa4>)
 800928c:	4013      	ands	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	031b      	lsls	r3, r3, #12
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a13      	ldr	r2, [pc, #76]	; (8009308 <TIM_OC4_SetConfig+0xa8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC4_SetConfig+0x68>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a12      	ldr	r2, [pc, #72]	; (800930c <TIM_OC4_SetConfig+0xac>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d109      	bne.n	80092dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	019b      	lsls	r3, r3, #6
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	feff8fff 	.word	0xfeff8fff
 8009308:	40010000 	.word	0x40010000
 800930c:	40010400 	.word	0x40010400

08009310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a1b      	ldr	r3, [r3, #32]
 800931e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <TIM_OC5_SetConfig+0x98>)
 800933c:	4013      	ands	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	4313      	orrs	r3, r2
 800935c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a12      	ldr	r2, [pc, #72]	; (80093ac <TIM_OC5_SetConfig+0x9c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d003      	beq.n	800936e <TIM_OC5_SetConfig+0x5e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a11      	ldr	r2, [pc, #68]	; (80093b0 <TIM_OC5_SetConfig+0xa0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d109      	bne.n	8009382 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009374:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	621a      	str	r2, [r3, #32]
}
 800939c:	bf00      	nop
 800939e:	371c      	adds	r7, #28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	fffeff8f 	.word	0xfffeff8f
 80093ac:	40010000 	.word	0x40010000
 80093b0:	40010400 	.word	0x40010400

080093b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4b1c      	ldr	r3, [pc, #112]	; (8009450 <TIM_OC6_SetConfig+0x9c>)
 80093e0:	4013      	ands	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	051b      	lsls	r3, r3, #20
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a13      	ldr	r2, [pc, #76]	; (8009454 <TIM_OC6_SetConfig+0xa0>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d003      	beq.n	8009414 <TIM_OC6_SetConfig+0x60>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a12      	ldr	r2, [pc, #72]	; (8009458 <TIM_OC6_SetConfig+0xa4>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d109      	bne.n	8009428 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800941a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	029b      	lsls	r3, r3, #10
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	685a      	ldr	r2, [r3, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	621a      	str	r2, [r3, #32]
}
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	feff8fff 	.word	0xfeff8fff
 8009454:	40010000 	.word	0x40010000
 8009458:	40010400 	.word	0x40010400

0800945c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009474:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	697a      	ldr	r2, [r7, #20]
 800947c:	4313      	orrs	r3, r2
 800947e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	4b3d      	ldr	r3, [pc, #244]	; (8009578 <TIM_SlaveTimer_SetConfig+0x11c>)
 8009484:	4013      	ands	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2b70      	cmp	r3, #112	; 0x70
 80094a0:	d01a      	beq.n	80094d8 <TIM_SlaveTimer_SetConfig+0x7c>
 80094a2:	2b70      	cmp	r3, #112	; 0x70
 80094a4:	d860      	bhi.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
 80094a6:	2b60      	cmp	r3, #96	; 0x60
 80094a8:	d054      	beq.n	8009554 <TIM_SlaveTimer_SetConfig+0xf8>
 80094aa:	2b60      	cmp	r3, #96	; 0x60
 80094ac:	d85c      	bhi.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
 80094ae:	2b50      	cmp	r3, #80	; 0x50
 80094b0:	d046      	beq.n	8009540 <TIM_SlaveTimer_SetConfig+0xe4>
 80094b2:	2b50      	cmp	r3, #80	; 0x50
 80094b4:	d858      	bhi.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d019      	beq.n	80094ee <TIM_SlaveTimer_SetConfig+0x92>
 80094ba:	2b40      	cmp	r3, #64	; 0x40
 80094bc:	d854      	bhi.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
 80094be:	2b30      	cmp	r3, #48	; 0x30
 80094c0:	d054      	beq.n	800956c <TIM_SlaveTimer_SetConfig+0x110>
 80094c2:	2b30      	cmp	r3, #48	; 0x30
 80094c4:	d850      	bhi.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
 80094c6:	2b20      	cmp	r3, #32
 80094c8:	d050      	beq.n	800956c <TIM_SlaveTimer_SetConfig+0x110>
 80094ca:	2b20      	cmp	r3, #32
 80094cc:	d84c      	bhi.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d04c      	beq.n	800956c <TIM_SlaveTimer_SetConfig+0x110>
 80094d2:	2b10      	cmp	r3, #16
 80094d4:	d04a      	beq.n	800956c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80094d6:	e047      	b.n	8009568 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6818      	ldr	r0, [r3, #0]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68d9      	ldr	r1, [r3, #12]
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	f000 f9ec 	bl	80098c4 <TIM_ETR_SetConfig>
      break;
 80094ec:	e03f      	b.n	800956e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	d101      	bne.n	80094fa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e03a      	b.n	8009570 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0201 	bic.w	r2, r2, #1
 8009510:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009520:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	4313      	orrs	r3, r2
 800952c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	621a      	str	r2, [r3, #32]
      break;
 800953e:	e016      	b.n	800956e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6818      	ldr	r0, [r3, #0]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	6899      	ldr	r1, [r3, #8]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	461a      	mov	r2, r3
 800954e:	f000 f889 	bl	8009664 <TIM_TI1_ConfigInputStage>
      break;
 8009552:	e00c      	b.n	800956e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6818      	ldr	r0, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	6899      	ldr	r1, [r3, #8]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	461a      	mov	r2, r3
 8009562:	f000 f8eb 	bl	800973c <TIM_TI2_ConfigInputStage>
      break;
 8009566:	e002      	b.n	800956e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009568:	bf00      	nop
 800956a:	e000      	b.n	800956e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800956c:	bf00      	nop
  }
  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	fffefff8 	.word	0xfffefff8

0800957c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800957c:	b480      	push	{r7}
 800957e:	b087      	sub	sp, #28
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
 8009588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	f023 0201 	bic.w	r2, r3, #1
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4a28      	ldr	r2, [pc, #160]	; (8009648 <TIM_TI1_SetConfig+0xcc>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d01b      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b0:	d017      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	4a25      	ldr	r2, [pc, #148]	; (800964c <TIM_TI1_SetConfig+0xd0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d013      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	4a24      	ldr	r2, [pc, #144]	; (8009650 <TIM_TI1_SetConfig+0xd4>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00f      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4a23      	ldr	r2, [pc, #140]	; (8009654 <TIM_TI1_SetConfig+0xd8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00b      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4a22      	ldr	r2, [pc, #136]	; (8009658 <TIM_TI1_SetConfig+0xdc>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d007      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4a21      	ldr	r2, [pc, #132]	; (800965c <TIM_TI1_SetConfig+0xe0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d003      	beq.n	80095e2 <TIM_TI1_SetConfig+0x66>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4a20      	ldr	r2, [pc, #128]	; (8009660 <TIM_TI1_SetConfig+0xe4>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d101      	bne.n	80095e6 <TIM_TI1_SetConfig+0x6a>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <TIM_TI1_SetConfig+0x6c>
 80095e6:	2300      	movs	r3, #0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d008      	beq.n	80095fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	e003      	b.n	8009606 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800960c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	011b      	lsls	r3, r3, #4
 8009612:	b2db      	uxtb	r3, r3
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	4313      	orrs	r3, r2
 8009618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f023 030a 	bic.w	r3, r3, #10
 8009620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	f003 030a 	and.w	r3, r3, #10
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	4313      	orrs	r3, r2
 800962c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	621a      	str	r2, [r3, #32]
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40010000 	.word	0x40010000
 800964c:	40000400 	.word	0x40000400
 8009650:	40000800 	.word	0x40000800
 8009654:	40000c00 	.word	0x40000c00
 8009658:	40010400 	.word	0x40010400
 800965c:	40014000 	.word	0x40014000
 8009660:	40001800 	.word	0x40001800

08009664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	f023 0201 	bic.w	r2, r3, #1
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	699b      	ldr	r3, [r3, #24]
 8009686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800968e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4313      	orrs	r3, r2
 8009698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	f023 030a 	bic.w	r3, r3, #10
 80096a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	697a      	ldr	r2, [r7, #20]
 80096b4:	621a      	str	r2, [r3, #32]
}
 80096b6:	bf00      	nop
 80096b8:	371c      	adds	r7, #28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b087      	sub	sp, #28
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	f023 0210 	bic.w	r2, r3, #16
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	021b      	lsls	r3, r3, #8
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	4313      	orrs	r3, r2
 80096f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009700:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	031b      	lsls	r3, r3, #12
 8009706:	b29b      	uxth	r3, r3
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	4313      	orrs	r3, r2
 800970c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009714:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	4313      	orrs	r3, r2
 8009722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	621a      	str	r2, [r3, #32]
}
 8009730:	bf00      	nop
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	f023 0210 	bic.w	r2, r3, #16
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009766:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	031b      	lsls	r3, r3, #12
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009778:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	621a      	str	r2, [r3, #32]
}
 8009790:	bf00      	nop
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
 80097a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a1b      	ldr	r3, [r3, #32]
 80097c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	f023 0303 	bic.w	r3, r3, #3
 80097c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80097ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	021b      	lsls	r3, r3, #8
 80097f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	621a      	str	r2, [r3, #32]
}
 8009808:	bf00      	nop
 800980a:	371c      	adds	r7, #28
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
 8009820:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a1b      	ldr	r3, [r3, #32]
 8009838:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009840:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	4313      	orrs	r3, r2
 800984a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009852:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	031b      	lsls	r3, r3, #12
 8009858:	b29b      	uxth	r3, r3
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009866:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	031b      	lsls	r3, r3, #12
 800986c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	693a      	ldr	r2, [r7, #16]
 8009880:	621a      	str	r2, [r3, #32]
}
 8009882:	bf00      	nop
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800988e:	b480      	push	{r7}
 8009890:	b085      	sub	sp, #20
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
 8009896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	f043 0307 	orr.w	r3, r3, #7
 80098b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68fa      	ldr	r2, [r7, #12]
 80098b6:	609a      	str	r2, [r3, #8]
}
 80098b8:	bf00      	nop
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	021a      	lsls	r2, r3, #8
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	431a      	orrs	r2, r3
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	609a      	str	r2, [r3, #8]
}
 80098f8:	bf00      	nop
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009904:	b480      	push	{r7}
 8009906:	b087      	sub	sp, #28
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f003 031f 	and.w	r3, r3, #31
 8009916:	2201      	movs	r2, #1
 8009918:	fa02 f303 	lsl.w	r3, r2, r3
 800991c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1a      	ldr	r2, [r3, #32]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	43db      	mvns	r3, r3
 8009926:	401a      	ands	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6a1a      	ldr	r2, [r3, #32]
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	fa01 f303 	lsl.w	r3, r1, r3
 800993c:	431a      	orrs	r2, r3
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	621a      	str	r2, [r3, #32]
}
 8009942:	bf00      	nop
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
	...

08009950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009964:	2302      	movs	r3, #2
 8009966:	e06d      	b.n	8009a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a30      	ldr	r2, [pc, #192]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d004      	beq.n	800999c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a2f      	ldr	r2, [pc, #188]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d108      	bne.n	80099ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	68fa      	ldr	r2, [r7, #12]
 80099bc:	4313      	orrs	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a20      	ldr	r2, [pc, #128]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d022      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099da:	d01d      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a1d      	ldr	r2, [pc, #116]	; (8009a58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d018      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a1c      	ldr	r2, [pc, #112]	; (8009a5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d013      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1a      	ldr	r2, [pc, #104]	; (8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00e      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a15      	ldr	r2, [pc, #84]	; (8009a54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d009      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a16      	ldr	r2, [pc, #88]	; (8009a64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d004      	beq.n	8009a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a15      	ldr	r2, [pc, #84]	; (8009a68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d10c      	bne.n	8009a32 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40010400 	.word	0x40010400
 8009a58:	40000400 	.word	0x40000400
 8009a5c:	40000800 	.word	0x40000800
 8009a60:	40000c00 	.word	0x40000c00
 8009a64:	40014000 	.word	0x40014000
 8009a68:	40001800 	.word	0x40001800

08009a6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e065      	b.n	8009b54 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aee:	4313      	orrs	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	041b      	lsls	r3, r3, #16
 8009afe:	4313      	orrs	r3, r2
 8009b00:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d004      	beq.n	8009b16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a14      	ldr	r2, [pc, #80]	; (8009b64 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d115      	bne.n	8009b42 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	051b      	lsls	r3, r3, #20
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40010000 	.word	0x40010000
 8009b64:	40010400 	.word	0x40010400

08009b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b083      	sub	sp, #12
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e040      	b.n	8009c38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7fa f9c0 	bl	8003f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2224      	movs	r2, #36	; 0x24
 8009bd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 0201 	bic.w	r2, r2, #1
 8009be0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fbec 	bl	800a3c0 <UART_SetConfig>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d101      	bne.n	8009bf2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e022      	b.n	8009c38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fe42 	bl	800a884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	689a      	ldr	r2, [r3, #8]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fec9 	bl	800a9c8 <UART_CheckIdleState>
 8009c36:	4603      	mov	r3, r0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	f040 8081 	bne.w	8009d5c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <HAL_UART_Transmit+0x26>
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d101      	bne.n	8009c6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e079      	b.n	8009d5e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_UART_Transmit+0x38>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e072      	b.n	8009d5e <HAL_UART_Transmit+0x11e>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2221      	movs	r2, #33	; 0x21
 8009c8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c8e:	f7fb f9f3 	bl	8005078 <HAL_GetTick>
 8009c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	88fa      	ldrh	r2, [r7, #6]
 8009c98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cac:	d108      	bne.n	8009cc0 <HAL_UART_Transmit+0x80>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d104      	bne.n	8009cc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	e003      	b.n	8009cc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009cd0:	e02c      	b.n	8009d2c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 fea6 	bl	800aa2e <UART_WaitOnFlagUntilTimeout>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d001      	beq.n	8009cec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e038      	b.n	8009d5e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10b      	bne.n	8009d0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	3302      	adds	r3, #2
 8009d06:	61bb      	str	r3, [r7, #24]
 8009d08:	e007      	b.n	8009d1a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	3301      	adds	r3, #1
 8009d18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1cc      	bne.n	8009cd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2140      	movs	r1, #64	; 0x40
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fe73 	bl	800aa2e <UART_WaitOnFlagUntilTimeout>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e005      	b.n	8009d5e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2220      	movs	r2, #32
 8009d56:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	e000      	b.n	8009d5e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009d5c:	2302      	movs	r3, #2
  }
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3720      	adds	r7, #32
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b08a      	sub	sp, #40	; 0x28
 8009d6a:	af02      	add	r7, sp, #8
 8009d6c:	60f8      	str	r0, [r7, #12]
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	603b      	str	r3, [r7, #0]
 8009d72:	4613      	mov	r3, r2
 8009d74:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	f040 80be 	bne.w	8009efc <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <HAL_UART_Receive+0x26>
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e0b6      	b.n	8009efe <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_UART_Receive+0x38>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e0af      	b.n	8009efe <HAL_UART_Receive+0x198>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2222      	movs	r2, #34	; 0x22
 8009db2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dba:	f7fb f95d 	bl	8005078 <HAL_GetTick>
 8009dbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	88fa      	ldrh	r2, [r7, #6]
 8009dc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	88fa      	ldrh	r2, [r7, #6]
 8009dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009dd8:	d10e      	bne.n	8009df8 <HAL_UART_Receive+0x92>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d105      	bne.n	8009dee <HAL_UART_Receive+0x88>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009dec:	e02d      	b.n	8009e4a <HAL_UART_Receive+0xe4>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	22ff      	movs	r2, #255	; 0xff
 8009df2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009df6:	e028      	b.n	8009e4a <HAL_UART_Receive+0xe4>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10d      	bne.n	8009e1c <HAL_UART_Receive+0xb6>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d104      	bne.n	8009e12 <HAL_UART_Receive+0xac>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	22ff      	movs	r2, #255	; 0xff
 8009e0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e10:	e01b      	b.n	8009e4a <HAL_UART_Receive+0xe4>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	227f      	movs	r2, #127	; 0x7f
 8009e16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e1a:	e016      	b.n	8009e4a <HAL_UART_Receive+0xe4>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e24:	d10d      	bne.n	8009e42 <HAL_UART_Receive+0xdc>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d104      	bne.n	8009e38 <HAL_UART_Receive+0xd2>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	227f      	movs	r2, #127	; 0x7f
 8009e32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e36:	e008      	b.n	8009e4a <HAL_UART_Receive+0xe4>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	223f      	movs	r2, #63	; 0x3f
 8009e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009e40:	e003      	b.n	8009e4a <HAL_UART_Receive+0xe4>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e50:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e5a:	d108      	bne.n	8009e6e <HAL_UART_Receive+0x108>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	691b      	ldr	r3, [r3, #16]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	61bb      	str	r3, [r7, #24]
 8009e6c:	e003      	b.n	8009e76 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e72:	2300      	movs	r3, #0
 8009e74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009e7e:	e032      	b.n	8009ee6 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2200      	movs	r2, #0
 8009e88:	2120      	movs	r1, #32
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	f000 fdcf 	bl	800aa2e <UART_WaitOnFlagUntilTimeout>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e031      	b.n	8009efe <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10c      	bne.n	8009eba <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	8a7b      	ldrh	r3, [r7, #18]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	61bb      	str	r3, [r7, #24]
 8009eb8:	e00c      	b.n	8009ed4 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	8a7b      	ldrh	r3, [r7, #18]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	3b01      	subs	r3, #1
 8009ede:	b29a      	uxth	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1c6      	bne.n	8009e80 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	e000      	b.n	8009efe <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8009efc:	2302      	movs	r3, #2
  }
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3720      	adds	r7, #32
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b084      	sub	sp, #16
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	60f8      	str	r0, [r7, #12]
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	4613      	mov	r3, r2
 8009f12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	d12c      	bne.n	8009f76 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d002      	beq.n	8009f28 <HAL_UART_Receive_DMA+0x22>
 8009f22:	88fb      	ldrh	r3, [r7, #6]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e025      	b.n	8009f78 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d101      	bne.n	8009f3a <HAL_UART_Receive_DMA+0x34>
 8009f36:	2302      	movs	r3, #2
 8009f38:	e01e      	b.n	8009f78 <HAL_UART_Receive_DMA+0x72>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d007      	beq.n	8009f66 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009f64:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f66:	88fb      	ldrh	r3, [r7, #6]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	68b9      	ldr	r1, [r7, #8]
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 fddb 	bl	800ab28 <UART_Start_Receive_DMA>
 8009f72:	4603      	mov	r3, r0
 8009f74:	e000      	b.n	8009f78 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009f76:	2302      	movs	r3, #2
  }
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3710      	adds	r7, #16
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fa0:	69fa      	ldr	r2, [r7, #28]
 8009fa2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d113      	bne.n	8009fd8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	f003 0320 	and.w	r3, r3, #32
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00e      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	f003 0320 	and.w	r3, r3, #32
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 81b9 	beq.w	800a340 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	4798      	blx	r3
      }
      return;
 8009fd6:	e1b3      	b.n	800a340 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 80e3 	beq.w	800a1a6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d105      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	4ba5      	ldr	r3, [pc, #660]	; (800a284 <HAL_UART_IRQHandler+0x304>)
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80d8 	beq.w	800a1a6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d010      	beq.n	800a022 <HAL_UART_IRQHandler+0xa2>
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00b      	beq.n	800a022 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2201      	movs	r2, #1
 800a010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a018:	f043 0201 	orr.w	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d010      	beq.n	800a04e <HAL_UART_IRQHandler+0xce>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00b      	beq.n	800a04e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2202      	movs	r2, #2
 800a03c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a044:	f043 0204 	orr.w	r2, r3, #4
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a04e:	69fb      	ldr	r3, [r7, #28]
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	2b00      	cmp	r3, #0
 800a056:	d010      	beq.n	800a07a <HAL_UART_IRQHandler+0xfa>
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00b      	beq.n	800a07a <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2204      	movs	r2, #4
 800a068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a070:	f043 0202 	orr.w	r2, r3, #2
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	f003 0308 	and.w	r3, r3, #8
 800a080:	2b00      	cmp	r3, #0
 800a082:	d015      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	f003 0320 	and.w	r3, r3, #32
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d104      	bne.n	800a098 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2208      	movs	r2, #8
 800a09e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0a6:	f043 0208 	orr.w	r2, r3, #8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d011      	beq.n	800a0de <HAL_UART_IRQHandler+0x15e>
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00c      	beq.n	800a0de <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a0cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0d4:	f043 0220 	orr.w	r2, r3, #32
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 812d 	beq.w	800a344 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	f003 0320 	and.w	r3, r3, #32
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d00c      	beq.n	800a10e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	f003 0320 	and.w	r3, r3, #32
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d007      	beq.n	800a10e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a114:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a120:	2b40      	cmp	r3, #64	; 0x40
 800a122:	d004      	beq.n	800a12e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d031      	beq.n	800a192 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fd7b 	bl	800ac2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13e:	2b40      	cmp	r3, #64	; 0x40
 800a140:	d123      	bne.n	800a18a <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a150:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a156:	2b00      	cmp	r3, #0
 800a158:	d013      	beq.n	800a182 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15e:	4a4a      	ldr	r2, [pc, #296]	; (800a288 <HAL_UART_IRQHandler+0x308>)
 800a160:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a166:	4618      	mov	r0, r3
 800a168:	f7fb fcce 	bl	8005b08 <HAL_DMA_Abort_IT>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d017      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a17c:	4610      	mov	r0, r2
 800a17e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a180:	e00f      	b.n	800a1a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f906 	bl	800a394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a188:	e00b      	b.n	800a1a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f902 	bl	800a394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a190:	e007      	b.n	800a1a2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f8fe 	bl	800a394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a1a0:	e0d0      	b.n	800a344 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1a2:	bf00      	nop
    return;
 800a1a4:	e0ce      	b.n	800a344 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	f040 80a7 	bne.w	800a2fe <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	f003 0310 	and.w	r3, r3, #16
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f000 80a1 	beq.w	800a2fe <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	f003 0310 	and.w	r3, r3, #16
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 809b 	beq.w	800a2fe <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1da:	2b40      	cmp	r3, #64	; 0x40
 800a1dc:	d156      	bne.n	800a28c <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a1e8:	893b      	ldrh	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	f000 80ac 	beq.w	800a348 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1f6:	893a      	ldrh	r2, [r7, #8]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	f080 80a5 	bcs.w	800a348 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	893a      	ldrh	r2, [r7, #8]
 800a202:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a210:	d02a      	beq.n	800a268 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a220:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0201 	bic.w	r2, r2, #1
 800a230:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a240:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2220      	movs	r2, #32
 800a246:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f022 0210 	bic.w	r2, r2, #16
 800a25c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	4618      	mov	r0, r3
 800a264:	f7fb fbe0 	bl	8005a28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a274:	b29b      	uxth	r3, r3
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	b29b      	uxth	r3, r3
 800a27a:	4619      	mov	r1, r3
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f893 	bl	800a3a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a282:	e061      	b.n	800a348 <HAL_UART_IRQHandler+0x3c8>
 800a284:	04000120 	.word	0x04000120
 800a288:	0800add1 	.word	0x0800add1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a298:	b29b      	uxth	r3, r3
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d050      	beq.n	800a34c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800a2aa:	897b      	ldrh	r3, [r7, #10]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d04d      	beq.n	800a34c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2be:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	689a      	ldr	r2, [r3, #8]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f022 0201 	bic.w	r2, r2, #1
 800a2ce:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f022 0210 	bic.w	r2, r2, #16
 800a2f0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2f2:	897b      	ldrh	r3, [r7, #10]
 800a2f4:	4619      	mov	r1, r3
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f856 	bl	800a3a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2fc:	e026      	b.n	800a34c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00d      	beq.n	800a324 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d008      	beq.n	800a324 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a316:	2b00      	cmp	r3, #0
 800a318:	d01a      	beq.n	800a350 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
    }
    return;
 800a322:	e015      	b.n	800a350 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d011      	beq.n	800a352 <HAL_UART_IRQHandler+0x3d2>
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00c      	beq.n	800a352 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fd5f 	bl	800adfc <UART_EndTransmit_IT>
    return;
 800a33e:	e008      	b.n	800a352 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a340:	bf00      	nop
 800a342:	e006      	b.n	800a352 <HAL_UART_IRQHandler+0x3d2>
    return;
 800a344:	bf00      	nop
 800a346:	e004      	b.n	800a352 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a348:	bf00      	nop
 800a34a:	e002      	b.n	800a352 <HAL_UART_IRQHandler+0x3d2>
      return;
 800a34c:	bf00      	nop
 800a34e:	e000      	b.n	800a352 <HAL_UART_IRQHandler+0x3d2>
    return;
 800a350:	bf00      	nop
  }

}
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	691b      	ldr	r3, [r3, #16]
 800a3d4:	431a      	orrs	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	431a      	orrs	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	4ba7      	ldr	r3, [pc, #668]	; (800a688 <UART_SetConfig+0x2c8>)
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	6979      	ldr	r1, [r7, #20]
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	430a      	orrs	r2, r1
 800a40c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a1b      	ldr	r3, [r3, #32]
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	430a      	orrs	r2, r1
 800a430:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a95      	ldr	r2, [pc, #596]	; (800a68c <UART_SetConfig+0x2cc>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d120      	bne.n	800a47e <UART_SetConfig+0xbe>
 800a43c:	4b94      	ldr	r3, [pc, #592]	; (800a690 <UART_SetConfig+0x2d0>)
 800a43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d816      	bhi.n	800a478 <UART_SetConfig+0xb8>
 800a44a:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <UART_SetConfig+0x90>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a461 	.word	0x0800a461
 800a454:	0800a46d 	.word	0x0800a46d
 800a458:	0800a467 	.word	0x0800a467
 800a45c:	0800a473 	.word	0x0800a473
 800a460:	2301      	movs	r3, #1
 800a462:	77fb      	strb	r3, [r7, #31]
 800a464:	e14f      	b.n	800a706 <UART_SetConfig+0x346>
 800a466:	2302      	movs	r3, #2
 800a468:	77fb      	strb	r3, [r7, #31]
 800a46a:	e14c      	b.n	800a706 <UART_SetConfig+0x346>
 800a46c:	2304      	movs	r3, #4
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e149      	b.n	800a706 <UART_SetConfig+0x346>
 800a472:	2308      	movs	r3, #8
 800a474:	77fb      	strb	r3, [r7, #31]
 800a476:	e146      	b.n	800a706 <UART_SetConfig+0x346>
 800a478:	2310      	movs	r3, #16
 800a47a:	77fb      	strb	r3, [r7, #31]
 800a47c:	e143      	b.n	800a706 <UART_SetConfig+0x346>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a84      	ldr	r2, [pc, #528]	; (800a694 <UART_SetConfig+0x2d4>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d132      	bne.n	800a4ee <UART_SetConfig+0x12e>
 800a488:	4b81      	ldr	r3, [pc, #516]	; (800a690 <UART_SetConfig+0x2d0>)
 800a48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48e:	f003 030c 	and.w	r3, r3, #12
 800a492:	2b0c      	cmp	r3, #12
 800a494:	d828      	bhi.n	800a4e8 <UART_SetConfig+0x128>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <UART_SetConfig+0xdc>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4d1 	.word	0x0800a4d1
 800a4a0:	0800a4e9 	.word	0x0800a4e9
 800a4a4:	0800a4e9 	.word	0x0800a4e9
 800a4a8:	0800a4e9 	.word	0x0800a4e9
 800a4ac:	0800a4dd 	.word	0x0800a4dd
 800a4b0:	0800a4e9 	.word	0x0800a4e9
 800a4b4:	0800a4e9 	.word	0x0800a4e9
 800a4b8:	0800a4e9 	.word	0x0800a4e9
 800a4bc:	0800a4d7 	.word	0x0800a4d7
 800a4c0:	0800a4e9 	.word	0x0800a4e9
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4e9 	.word	0x0800a4e9
 800a4cc:	0800a4e3 	.word	0x0800a4e3
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	77fb      	strb	r3, [r7, #31]
 800a4d4:	e117      	b.n	800a706 <UART_SetConfig+0x346>
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	77fb      	strb	r3, [r7, #31]
 800a4da:	e114      	b.n	800a706 <UART_SetConfig+0x346>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	77fb      	strb	r3, [r7, #31]
 800a4e0:	e111      	b.n	800a706 <UART_SetConfig+0x346>
 800a4e2:	2308      	movs	r3, #8
 800a4e4:	77fb      	strb	r3, [r7, #31]
 800a4e6:	e10e      	b.n	800a706 <UART_SetConfig+0x346>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	77fb      	strb	r3, [r7, #31]
 800a4ec:	e10b      	b.n	800a706 <UART_SetConfig+0x346>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a69      	ldr	r2, [pc, #420]	; (800a698 <UART_SetConfig+0x2d8>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d120      	bne.n	800a53a <UART_SetConfig+0x17a>
 800a4f8:	4b65      	ldr	r3, [pc, #404]	; (800a690 <UART_SetConfig+0x2d0>)
 800a4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a502:	2b30      	cmp	r3, #48	; 0x30
 800a504:	d013      	beq.n	800a52e <UART_SetConfig+0x16e>
 800a506:	2b30      	cmp	r3, #48	; 0x30
 800a508:	d814      	bhi.n	800a534 <UART_SetConfig+0x174>
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d009      	beq.n	800a522 <UART_SetConfig+0x162>
 800a50e:	2b20      	cmp	r3, #32
 800a510:	d810      	bhi.n	800a534 <UART_SetConfig+0x174>
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <UART_SetConfig+0x15c>
 800a516:	2b10      	cmp	r3, #16
 800a518:	d006      	beq.n	800a528 <UART_SetConfig+0x168>
 800a51a:	e00b      	b.n	800a534 <UART_SetConfig+0x174>
 800a51c:	2300      	movs	r3, #0
 800a51e:	77fb      	strb	r3, [r7, #31]
 800a520:	e0f1      	b.n	800a706 <UART_SetConfig+0x346>
 800a522:	2302      	movs	r3, #2
 800a524:	77fb      	strb	r3, [r7, #31]
 800a526:	e0ee      	b.n	800a706 <UART_SetConfig+0x346>
 800a528:	2304      	movs	r3, #4
 800a52a:	77fb      	strb	r3, [r7, #31]
 800a52c:	e0eb      	b.n	800a706 <UART_SetConfig+0x346>
 800a52e:	2308      	movs	r3, #8
 800a530:	77fb      	strb	r3, [r7, #31]
 800a532:	e0e8      	b.n	800a706 <UART_SetConfig+0x346>
 800a534:	2310      	movs	r3, #16
 800a536:	77fb      	strb	r3, [r7, #31]
 800a538:	e0e5      	b.n	800a706 <UART_SetConfig+0x346>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a57      	ldr	r2, [pc, #348]	; (800a69c <UART_SetConfig+0x2dc>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d120      	bne.n	800a586 <UART_SetConfig+0x1c6>
 800a544:	4b52      	ldr	r3, [pc, #328]	; (800a690 <UART_SetConfig+0x2d0>)
 800a546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a54e:	2bc0      	cmp	r3, #192	; 0xc0
 800a550:	d013      	beq.n	800a57a <UART_SetConfig+0x1ba>
 800a552:	2bc0      	cmp	r3, #192	; 0xc0
 800a554:	d814      	bhi.n	800a580 <UART_SetConfig+0x1c0>
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d009      	beq.n	800a56e <UART_SetConfig+0x1ae>
 800a55a:	2b80      	cmp	r3, #128	; 0x80
 800a55c:	d810      	bhi.n	800a580 <UART_SetConfig+0x1c0>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <UART_SetConfig+0x1a8>
 800a562:	2b40      	cmp	r3, #64	; 0x40
 800a564:	d006      	beq.n	800a574 <UART_SetConfig+0x1b4>
 800a566:	e00b      	b.n	800a580 <UART_SetConfig+0x1c0>
 800a568:	2300      	movs	r3, #0
 800a56a:	77fb      	strb	r3, [r7, #31]
 800a56c:	e0cb      	b.n	800a706 <UART_SetConfig+0x346>
 800a56e:	2302      	movs	r3, #2
 800a570:	77fb      	strb	r3, [r7, #31]
 800a572:	e0c8      	b.n	800a706 <UART_SetConfig+0x346>
 800a574:	2304      	movs	r3, #4
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e0c5      	b.n	800a706 <UART_SetConfig+0x346>
 800a57a:	2308      	movs	r3, #8
 800a57c:	77fb      	strb	r3, [r7, #31]
 800a57e:	e0c2      	b.n	800a706 <UART_SetConfig+0x346>
 800a580:	2310      	movs	r3, #16
 800a582:	77fb      	strb	r3, [r7, #31]
 800a584:	e0bf      	b.n	800a706 <UART_SetConfig+0x346>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a45      	ldr	r2, [pc, #276]	; (800a6a0 <UART_SetConfig+0x2e0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d125      	bne.n	800a5dc <UART_SetConfig+0x21c>
 800a590:	4b3f      	ldr	r3, [pc, #252]	; (800a690 <UART_SetConfig+0x2d0>)
 800a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a59a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a59e:	d017      	beq.n	800a5d0 <UART_SetConfig+0x210>
 800a5a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5a4:	d817      	bhi.n	800a5d6 <UART_SetConfig+0x216>
 800a5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5aa:	d00b      	beq.n	800a5c4 <UART_SetConfig+0x204>
 800a5ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b0:	d811      	bhi.n	800a5d6 <UART_SetConfig+0x216>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <UART_SetConfig+0x1fe>
 800a5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ba:	d006      	beq.n	800a5ca <UART_SetConfig+0x20a>
 800a5bc:	e00b      	b.n	800a5d6 <UART_SetConfig+0x216>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	77fb      	strb	r3, [r7, #31]
 800a5c2:	e0a0      	b.n	800a706 <UART_SetConfig+0x346>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	77fb      	strb	r3, [r7, #31]
 800a5c8:	e09d      	b.n	800a706 <UART_SetConfig+0x346>
 800a5ca:	2304      	movs	r3, #4
 800a5cc:	77fb      	strb	r3, [r7, #31]
 800a5ce:	e09a      	b.n	800a706 <UART_SetConfig+0x346>
 800a5d0:	2308      	movs	r3, #8
 800a5d2:	77fb      	strb	r3, [r7, #31]
 800a5d4:	e097      	b.n	800a706 <UART_SetConfig+0x346>
 800a5d6:	2310      	movs	r3, #16
 800a5d8:	77fb      	strb	r3, [r7, #31]
 800a5da:	e094      	b.n	800a706 <UART_SetConfig+0x346>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a30      	ldr	r2, [pc, #192]	; (800a6a4 <UART_SetConfig+0x2e4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d125      	bne.n	800a632 <UART_SetConfig+0x272>
 800a5e6:	4b2a      	ldr	r3, [pc, #168]	; (800a690 <UART_SetConfig+0x2d0>)
 800a5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f4:	d017      	beq.n	800a626 <UART_SetConfig+0x266>
 800a5f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5fa:	d817      	bhi.n	800a62c <UART_SetConfig+0x26c>
 800a5fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a600:	d00b      	beq.n	800a61a <UART_SetConfig+0x25a>
 800a602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a606:	d811      	bhi.n	800a62c <UART_SetConfig+0x26c>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <UART_SetConfig+0x254>
 800a60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a610:	d006      	beq.n	800a620 <UART_SetConfig+0x260>
 800a612:	e00b      	b.n	800a62c <UART_SetConfig+0x26c>
 800a614:	2301      	movs	r3, #1
 800a616:	77fb      	strb	r3, [r7, #31]
 800a618:	e075      	b.n	800a706 <UART_SetConfig+0x346>
 800a61a:	2302      	movs	r3, #2
 800a61c:	77fb      	strb	r3, [r7, #31]
 800a61e:	e072      	b.n	800a706 <UART_SetConfig+0x346>
 800a620:	2304      	movs	r3, #4
 800a622:	77fb      	strb	r3, [r7, #31]
 800a624:	e06f      	b.n	800a706 <UART_SetConfig+0x346>
 800a626:	2308      	movs	r3, #8
 800a628:	77fb      	strb	r3, [r7, #31]
 800a62a:	e06c      	b.n	800a706 <UART_SetConfig+0x346>
 800a62c:	2310      	movs	r3, #16
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	e069      	b.n	800a706 <UART_SetConfig+0x346>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a1c      	ldr	r2, [pc, #112]	; (800a6a8 <UART_SetConfig+0x2e8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d137      	bne.n	800a6ac <UART_SetConfig+0x2ec>
 800a63c:	4b14      	ldr	r3, [pc, #80]	; (800a690 <UART_SetConfig+0x2d0>)
 800a63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a642:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a64a:	d017      	beq.n	800a67c <UART_SetConfig+0x2bc>
 800a64c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a650:	d817      	bhi.n	800a682 <UART_SetConfig+0x2c2>
 800a652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a656:	d00b      	beq.n	800a670 <UART_SetConfig+0x2b0>
 800a658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a65c:	d811      	bhi.n	800a682 <UART_SetConfig+0x2c2>
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <UART_SetConfig+0x2aa>
 800a662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a666:	d006      	beq.n	800a676 <UART_SetConfig+0x2b6>
 800a668:	e00b      	b.n	800a682 <UART_SetConfig+0x2c2>
 800a66a:	2300      	movs	r3, #0
 800a66c:	77fb      	strb	r3, [r7, #31]
 800a66e:	e04a      	b.n	800a706 <UART_SetConfig+0x346>
 800a670:	2302      	movs	r3, #2
 800a672:	77fb      	strb	r3, [r7, #31]
 800a674:	e047      	b.n	800a706 <UART_SetConfig+0x346>
 800a676:	2304      	movs	r3, #4
 800a678:	77fb      	strb	r3, [r7, #31]
 800a67a:	e044      	b.n	800a706 <UART_SetConfig+0x346>
 800a67c:	2308      	movs	r3, #8
 800a67e:	77fb      	strb	r3, [r7, #31]
 800a680:	e041      	b.n	800a706 <UART_SetConfig+0x346>
 800a682:	2310      	movs	r3, #16
 800a684:	77fb      	strb	r3, [r7, #31]
 800a686:	e03e      	b.n	800a706 <UART_SetConfig+0x346>
 800a688:	efff69f3 	.word	0xefff69f3
 800a68c:	40011000 	.word	0x40011000
 800a690:	40023800 	.word	0x40023800
 800a694:	40004400 	.word	0x40004400
 800a698:	40004800 	.word	0x40004800
 800a69c:	40004c00 	.word	0x40004c00
 800a6a0:	40005000 	.word	0x40005000
 800a6a4:	40011400 	.word	0x40011400
 800a6a8:	40007800 	.word	0x40007800
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a71      	ldr	r2, [pc, #452]	; (800a878 <UART_SetConfig+0x4b8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d125      	bne.n	800a702 <UART_SetConfig+0x342>
 800a6b6:	4b71      	ldr	r3, [pc, #452]	; (800a87c <UART_SetConfig+0x4bc>)
 800a6b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6c4:	d017      	beq.n	800a6f6 <UART_SetConfig+0x336>
 800a6c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6ca:	d817      	bhi.n	800a6fc <UART_SetConfig+0x33c>
 800a6cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6d0:	d00b      	beq.n	800a6ea <UART_SetConfig+0x32a>
 800a6d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6d6:	d811      	bhi.n	800a6fc <UART_SetConfig+0x33c>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d003      	beq.n	800a6e4 <UART_SetConfig+0x324>
 800a6dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6e0:	d006      	beq.n	800a6f0 <UART_SetConfig+0x330>
 800a6e2:	e00b      	b.n	800a6fc <UART_SetConfig+0x33c>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	77fb      	strb	r3, [r7, #31]
 800a6e8:	e00d      	b.n	800a706 <UART_SetConfig+0x346>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	77fb      	strb	r3, [r7, #31]
 800a6ee:	e00a      	b.n	800a706 <UART_SetConfig+0x346>
 800a6f0:	2304      	movs	r3, #4
 800a6f2:	77fb      	strb	r3, [r7, #31]
 800a6f4:	e007      	b.n	800a706 <UART_SetConfig+0x346>
 800a6f6:	2308      	movs	r3, #8
 800a6f8:	77fb      	strb	r3, [r7, #31]
 800a6fa:	e004      	b.n	800a706 <UART_SetConfig+0x346>
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	77fb      	strb	r3, [r7, #31]
 800a700:	e001      	b.n	800a706 <UART_SetConfig+0x346>
 800a702:	2310      	movs	r3, #16
 800a704:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70e:	d15b      	bne.n	800a7c8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a710:	7ffb      	ldrb	r3, [r7, #31]
 800a712:	2b08      	cmp	r3, #8
 800a714:	d827      	bhi.n	800a766 <UART_SetConfig+0x3a6>
 800a716:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <UART_SetConfig+0x35c>)
 800a718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71c:	0800a741 	.word	0x0800a741
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a751 	.word	0x0800a751
 800a728:	0800a767 	.word	0x0800a767
 800a72c:	0800a757 	.word	0x0800a757
 800a730:	0800a767 	.word	0x0800a767
 800a734:	0800a767 	.word	0x0800a767
 800a738:	0800a767 	.word	0x0800a767
 800a73c:	0800a75f 	.word	0x0800a75f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a740:	f7fc ffe0 	bl	8007704 <HAL_RCC_GetPCLK1Freq>
 800a744:	61b8      	str	r0, [r7, #24]
        break;
 800a746:	e013      	b.n	800a770 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a748:	f7fc fff0 	bl	800772c <HAL_RCC_GetPCLK2Freq>
 800a74c:	61b8      	str	r0, [r7, #24]
        break;
 800a74e:	e00f      	b.n	800a770 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a750:	4b4b      	ldr	r3, [pc, #300]	; (800a880 <UART_SetConfig+0x4c0>)
 800a752:	61bb      	str	r3, [r7, #24]
        break;
 800a754:	e00c      	b.n	800a770 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a756:	f7fc ff13 	bl	8007580 <HAL_RCC_GetSysClockFreq>
 800a75a:	61b8      	str	r0, [r7, #24]
        break;
 800a75c:	e008      	b.n	800a770 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a762:	61bb      	str	r3, [r7, #24]
        break;
 800a764:	e004      	b.n	800a770 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	77bb      	strb	r3, [r7, #30]
        break;
 800a76e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d074      	beq.n	800a860 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	005a      	lsls	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	085b      	lsrs	r3, r3, #1
 800a780:	441a      	add	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b0f      	cmp	r3, #15
 800a792:	d916      	bls.n	800a7c2 <UART_SetConfig+0x402>
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a79a:	d212      	bcs.n	800a7c2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	f023 030f 	bic.w	r3, r3, #15
 800a7a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	085b      	lsrs	r3, r3, #1
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	89fb      	ldrh	r3, [r7, #14]
 800a7b4:	4313      	orrs	r3, r2
 800a7b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	89fa      	ldrh	r2, [r7, #14]
 800a7be:	60da      	str	r2, [r3, #12]
 800a7c0:	e04e      	b.n	800a860 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	77bb      	strb	r3, [r7, #30]
 800a7c6:	e04b      	b.n	800a860 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7c8:	7ffb      	ldrb	r3, [r7, #31]
 800a7ca:	2b08      	cmp	r3, #8
 800a7cc:	d827      	bhi.n	800a81e <UART_SetConfig+0x45e>
 800a7ce:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <UART_SetConfig+0x414>)
 800a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a801 	.word	0x0800a801
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	0800a81f 	.word	0x0800a81f
 800a7e4:	0800a80f 	.word	0x0800a80f
 800a7e8:	0800a81f 	.word	0x0800a81f
 800a7ec:	0800a81f 	.word	0x0800a81f
 800a7f0:	0800a81f 	.word	0x0800a81f
 800a7f4:	0800a817 	.word	0x0800a817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7f8:	f7fc ff84 	bl	8007704 <HAL_RCC_GetPCLK1Freq>
 800a7fc:	61b8      	str	r0, [r7, #24]
        break;
 800a7fe:	e013      	b.n	800a828 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a800:	f7fc ff94 	bl	800772c <HAL_RCC_GetPCLK2Freq>
 800a804:	61b8      	str	r0, [r7, #24]
        break;
 800a806:	e00f      	b.n	800a828 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <UART_SetConfig+0x4c0>)
 800a80a:	61bb      	str	r3, [r7, #24]
        break;
 800a80c:	e00c      	b.n	800a828 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a80e:	f7fc feb7 	bl	8007580 <HAL_RCC_GetSysClockFreq>
 800a812:	61b8      	str	r0, [r7, #24]
        break;
 800a814:	e008      	b.n	800a828 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a81a:	61bb      	str	r3, [r7, #24]
        break;
 800a81c:	e004      	b.n	800a828 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	77bb      	strb	r3, [r7, #30]
        break;
 800a826:	bf00      	nop
    }

    if (pclk != 0U)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d018      	beq.n	800a860 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	085a      	lsrs	r2, r3, #1
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	441a      	add	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a840:	b29b      	uxth	r3, r3
 800a842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2b0f      	cmp	r3, #15
 800a848:	d908      	bls.n	800a85c <UART_SetConfig+0x49c>
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a850:	d204      	bcs.n	800a85c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	60da      	str	r2, [r3, #12]
 800a85a:	e001      	b.n	800a860 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a86c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3720      	adds	r7, #32
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	40007c00 	.word	0x40007c00
 800a87c:	40023800 	.word	0x40023800
 800a880:	00f42400 	.word	0x00f42400

0800a884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00a      	beq.n	800a8ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	430a      	orrs	r2, r1
 800a934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	f003 0320 	and.w	r3, r3, #32
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01a      	beq.n	800a99a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a982:	d10a      	bne.n	800a99a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	605a      	str	r2, [r3, #4]
  }
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af02      	add	r7, sp, #8
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9d8:	f7fa fb4e 	bl	8005078 <HAL_GetTick>
 800a9dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0308 	and.w	r3, r3, #8
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d10e      	bne.n	800aa0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f817 	bl	800aa2e <UART_WaitOnFlagUntilTimeout>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e00d      	b.n	800aa26 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2220      	movs	r2, #32
 800aa14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	603b      	str	r3, [r7, #0]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa3e:	e05e      	b.n	800aafe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa46:	d05a      	beq.n	800aafe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa48:	f7fa fb16 	bl	8005078 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	69ba      	ldr	r2, [r7, #24]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d302      	bcc.n	800aa5e <UART_WaitOnFlagUntilTimeout+0x30>
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d11b      	bne.n	800aa96 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aa6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f022 0201 	bic.w	r2, r2, #1
 800aa7c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	2220      	movs	r2, #32
 800aa82:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2220      	movs	r2, #32
 800aa88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e043      	b.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d02c      	beq.n	800aafe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aab2:	d124      	bne.n	800aafe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aabc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aacc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0201 	bic.w	r2, r2, #1
 800aadc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2220      	movs	r2, #32
 800aae2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2220      	movs	r2, #32
 800aae8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aafa:	2303      	movs	r3, #3
 800aafc:	e00f      	b.n	800ab1e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	69da      	ldr	r2, [r3, #28]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	4013      	ands	r3, r2
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	bf0c      	ite	eq
 800ab0e:	2301      	moveq	r3, #1
 800ab10:	2300      	movne	r3, #0
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d091      	beq.n	800aa40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	4613      	mov	r3, r2
 800ab34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	88fa      	ldrh	r2, [r7, #6]
 800ab40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2222      	movs	r2, #34	; 0x22
 800ab50:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d02b      	beq.n	800abb2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5e:	4a25      	ldr	r2, [pc, #148]	; (800abf4 <UART_Start_Receive_DMA+0xcc>)
 800ab60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab66:	4a24      	ldr	r2, [pc, #144]	; (800abf8 <UART_Start_Receive_DMA+0xd0>)
 800ab68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6e:	4a23      	ldr	r2, [pc, #140]	; (800abfc <UART_Start_Receive_DMA+0xd4>)
 800ab70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab76:	2200      	movs	r2, #0
 800ab78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3324      	adds	r3, #36	; 0x24
 800ab84:	4619      	mov	r1, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	88fb      	ldrh	r3, [r7, #6]
 800ab8e:	f7fa feeb 	bl	8005968 <HAL_DMA_Start_IT>
 800ab92:	4603      	mov	r3, r0
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00c      	beq.n	800abb2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2210      	movs	r2, #16
 800ab9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2220      	movs	r2, #32
 800abac:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e01c      	b.n	800abec <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abc8:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f042 0201 	orr.w	r2, r2, #1
 800abd8:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	689a      	ldr	r2, [r3, #8]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abe8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	0800ac89 	.word	0x0800ac89
 800abf8:	0800ad1d 	.word	0x0800ad1d
 800abfc:	0800ad55 	.word	0x0800ad55

0800ac00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ac16:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ac1e:	bf00      	nop
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ac40:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d107      	bne.n	800ac6a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0210 	bic.w	r2, r2, #16
 800ac68:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac94:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac9e:	d02a      	beq.n	800acf6 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acb6:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689a      	ldr	r2, [r3, #8]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689a      	ldr	r2, [r3, #8]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acd6:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2220      	movs	r2, #32
 800acdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d107      	bne.n	800acf6 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f022 0210 	bic.w	r2, r2, #16
 800acf4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acfa:	2b01      	cmp	r3, #1
 800acfc:	d107      	bne.n	800ad0e <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ad04:	4619      	mov	r1, r3
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff fb4e 	bl	800a3a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad0c:	e002      	b.n	800ad14 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f7ff fb2c 	bl	800a36c <HAL_UART_RxCpltCallback>
}
 800ad14:	bf00      	nop
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d109      	bne.n	800ad46 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ad38:	085b      	lsrs	r3, r3, #1
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff fb32 	bl	800a3a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ad44:	e002      	b.n	800ad4c <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fb1a 	bl	800a380 <HAL_UART_RxHalfCpltCallback>
}
 800ad4c:	bf00      	nop
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad78:	2b80      	cmp	r3, #128	; 0x80
 800ad7a:	d109      	bne.n	800ad90 <UART_DMAError+0x3c>
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	2b21      	cmp	r3, #33	; 0x21
 800ad80:	d106      	bne.n	800ad90 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ad8a:	6978      	ldr	r0, [r7, #20]
 800ad8c:	f7ff ff38 	bl	800ac00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9a:	2b40      	cmp	r3, #64	; 0x40
 800ad9c:	d109      	bne.n	800adb2 <UART_DMAError+0x5e>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b22      	cmp	r3, #34	; 0x22
 800ada2:	d106      	bne.n	800adb2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800adac:	6978      	ldr	r0, [r7, #20]
 800adae:	f7ff ff3c 	bl	800ac2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adb8:	f043 0210 	orr.w	r2, r3, #16
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adc2:	6978      	ldr	r0, [r7, #20]
 800adc4:	f7ff fae6 	bl	800a394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adc8:	bf00      	nop
 800adca:	3718      	adds	r7, #24
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800addc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2200      	movs	r2, #0
 800adea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f7ff fad0 	bl	800a394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adf4:	bf00      	nop
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae12:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2220      	movs	r2, #32
 800ae18:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff fa99 	bl	800a358 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae26:	bf00      	nop
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <abs>:
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	bfb8      	it	lt
 800ae32:	4240      	neglt	r0, r0
 800ae34:	4770      	bx	lr

0800ae36 <atof>:
 800ae36:	2100      	movs	r1, #0
 800ae38:	f001 bb84 	b.w	800c544 <strtod>

0800ae3c <atoi>:
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	2100      	movs	r1, #0
 800ae40:	f001 bc6c 	b.w	800c71c <strtol>

0800ae44 <__errno>:
 800ae44:	4b01      	ldr	r3, [pc, #4]	; (800ae4c <__errno+0x8>)
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	20000028 	.word	0x20000028

0800ae50 <getchar>:
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <getchar+0x20>)
 800ae52:	b510      	push	{r4, lr}
 800ae54:	681c      	ldr	r4, [r3, #0]
 800ae56:	b124      	cbz	r4, 800ae62 <getchar+0x12>
 800ae58:	69a3      	ldr	r3, [r4, #24]
 800ae5a:	b913      	cbnz	r3, 800ae62 <getchar+0x12>
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f002 fceb 	bl	800d838 <__sinit>
 800ae62:	6861      	ldr	r1, [r4, #4]
 800ae64:	4620      	mov	r0, r4
 800ae66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6a:	f003 b921 	b.w	800e0b0 <_getc_r>
 800ae6e:	bf00      	nop
 800ae70:	20000028 	.word	0x20000028

0800ae74 <__libc_init_array>:
 800ae74:	b570      	push	{r4, r5, r6, lr}
 800ae76:	4d0d      	ldr	r5, [pc, #52]	; (800aeac <__libc_init_array+0x38>)
 800ae78:	4c0d      	ldr	r4, [pc, #52]	; (800aeb0 <__libc_init_array+0x3c>)
 800ae7a:	1b64      	subs	r4, r4, r5
 800ae7c:	10a4      	asrs	r4, r4, #2
 800ae7e:	2600      	movs	r6, #0
 800ae80:	42a6      	cmp	r6, r4
 800ae82:	d109      	bne.n	800ae98 <__libc_init_array+0x24>
 800ae84:	4d0b      	ldr	r5, [pc, #44]	; (800aeb4 <__libc_init_array+0x40>)
 800ae86:	4c0c      	ldr	r4, [pc, #48]	; (800aeb8 <__libc_init_array+0x44>)
 800ae88:	f005 faa0 	bl	80103cc <_init>
 800ae8c:	1b64      	subs	r4, r4, r5
 800ae8e:	10a4      	asrs	r4, r4, #2
 800ae90:	2600      	movs	r6, #0
 800ae92:	42a6      	cmp	r6, r4
 800ae94:	d105      	bne.n	800aea2 <__libc_init_array+0x2e>
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9c:	4798      	blx	r3
 800ae9e:	3601      	adds	r6, #1
 800aea0:	e7ee      	b.n	800ae80 <__libc_init_array+0xc>
 800aea2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aea6:	4798      	blx	r3
 800aea8:	3601      	adds	r6, #1
 800aeaa:	e7f2      	b.n	800ae92 <__libc_init_array+0x1e>
 800aeac:	08011208 	.word	0x08011208
 800aeb0:	08011208 	.word	0x08011208
 800aeb4:	08011208 	.word	0x08011208
 800aeb8:	0801120c 	.word	0x0801120c

0800aebc <memset>:
 800aebc:	4402      	add	r2, r0
 800aebe:	4603      	mov	r3, r0
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d100      	bne.n	800aec6 <memset+0xa>
 800aec4:	4770      	bx	lr
 800aec6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeca:	e7f9      	b.n	800aec0 <memset+0x4>

0800aecc <__cvt>:
 800aecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	ec55 4b10 	vmov	r4, r5, d0
 800aed4:	2d00      	cmp	r5, #0
 800aed6:	460e      	mov	r6, r1
 800aed8:	4619      	mov	r1, r3
 800aeda:	462b      	mov	r3, r5
 800aedc:	bfbb      	ittet	lt
 800aede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aee2:	461d      	movlt	r5, r3
 800aee4:	2300      	movge	r3, #0
 800aee6:	232d      	movlt	r3, #45	; 0x2d
 800aee8:	700b      	strb	r3, [r1, #0]
 800aeea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aef0:	4691      	mov	r9, r2
 800aef2:	f023 0820 	bic.w	r8, r3, #32
 800aef6:	bfbc      	itt	lt
 800aef8:	4622      	movlt	r2, r4
 800aefa:	4614      	movlt	r4, r2
 800aefc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af00:	d005      	beq.n	800af0e <__cvt+0x42>
 800af02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af06:	d100      	bne.n	800af0a <__cvt+0x3e>
 800af08:	3601      	adds	r6, #1
 800af0a:	2102      	movs	r1, #2
 800af0c:	e000      	b.n	800af10 <__cvt+0x44>
 800af0e:	2103      	movs	r1, #3
 800af10:	ab03      	add	r3, sp, #12
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	ab02      	add	r3, sp, #8
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	ec45 4b10 	vmov	d0, r4, r5
 800af1c:	4653      	mov	r3, sl
 800af1e:	4632      	mov	r2, r6
 800af20:	f001 fd72 	bl	800ca08 <_dtoa_r>
 800af24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af28:	4607      	mov	r7, r0
 800af2a:	d102      	bne.n	800af32 <__cvt+0x66>
 800af2c:	f019 0f01 	tst.w	r9, #1
 800af30:	d022      	beq.n	800af78 <__cvt+0xac>
 800af32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af36:	eb07 0906 	add.w	r9, r7, r6
 800af3a:	d110      	bne.n	800af5e <__cvt+0x92>
 800af3c:	783b      	ldrb	r3, [r7, #0]
 800af3e:	2b30      	cmp	r3, #48	; 0x30
 800af40:	d10a      	bne.n	800af58 <__cvt+0x8c>
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	4620      	mov	r0, r4
 800af48:	4629      	mov	r1, r5
 800af4a:	f7f5 fded 	bl	8000b28 <__aeabi_dcmpeq>
 800af4e:	b918      	cbnz	r0, 800af58 <__cvt+0x8c>
 800af50:	f1c6 0601 	rsb	r6, r6, #1
 800af54:	f8ca 6000 	str.w	r6, [sl]
 800af58:	f8da 3000 	ldr.w	r3, [sl]
 800af5c:	4499      	add	r9, r3
 800af5e:	2200      	movs	r2, #0
 800af60:	2300      	movs	r3, #0
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 fddf 	bl	8000b28 <__aeabi_dcmpeq>
 800af6a:	b108      	cbz	r0, 800af70 <__cvt+0xa4>
 800af6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800af70:	2230      	movs	r2, #48	; 0x30
 800af72:	9b03      	ldr	r3, [sp, #12]
 800af74:	454b      	cmp	r3, r9
 800af76:	d307      	bcc.n	800af88 <__cvt+0xbc>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af7c:	1bdb      	subs	r3, r3, r7
 800af7e:	4638      	mov	r0, r7
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	b004      	add	sp, #16
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	1c59      	adds	r1, r3, #1
 800af8a:	9103      	str	r1, [sp, #12]
 800af8c:	701a      	strb	r2, [r3, #0]
 800af8e:	e7f0      	b.n	800af72 <__cvt+0xa6>

0800af90 <__exponent>:
 800af90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af92:	4603      	mov	r3, r0
 800af94:	2900      	cmp	r1, #0
 800af96:	bfb8      	it	lt
 800af98:	4249      	neglt	r1, r1
 800af9a:	f803 2b02 	strb.w	r2, [r3], #2
 800af9e:	bfb4      	ite	lt
 800afa0:	222d      	movlt	r2, #45	; 0x2d
 800afa2:	222b      	movge	r2, #43	; 0x2b
 800afa4:	2909      	cmp	r1, #9
 800afa6:	7042      	strb	r2, [r0, #1]
 800afa8:	dd2a      	ble.n	800b000 <__exponent+0x70>
 800afaa:	f10d 0407 	add.w	r4, sp, #7
 800afae:	46a4      	mov	ip, r4
 800afb0:	270a      	movs	r7, #10
 800afb2:	46a6      	mov	lr, r4
 800afb4:	460a      	mov	r2, r1
 800afb6:	fb91 f6f7 	sdiv	r6, r1, r7
 800afba:	fb07 1516 	mls	r5, r7, r6, r1
 800afbe:	3530      	adds	r5, #48	; 0x30
 800afc0:	2a63      	cmp	r2, #99	; 0x63
 800afc2:	f104 34ff 	add.w	r4, r4, #4294967295
 800afc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afca:	4631      	mov	r1, r6
 800afcc:	dcf1      	bgt.n	800afb2 <__exponent+0x22>
 800afce:	3130      	adds	r1, #48	; 0x30
 800afd0:	f1ae 0502 	sub.w	r5, lr, #2
 800afd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afd8:	1c44      	adds	r4, r0, #1
 800afda:	4629      	mov	r1, r5
 800afdc:	4561      	cmp	r1, ip
 800afde:	d30a      	bcc.n	800aff6 <__exponent+0x66>
 800afe0:	f10d 0209 	add.w	r2, sp, #9
 800afe4:	eba2 020e 	sub.w	r2, r2, lr
 800afe8:	4565      	cmp	r5, ip
 800afea:	bf88      	it	hi
 800afec:	2200      	movhi	r2, #0
 800afee:	4413      	add	r3, r2
 800aff0:	1a18      	subs	r0, r3, r0
 800aff2:	b003      	add	sp, #12
 800aff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800affa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800affe:	e7ed      	b.n	800afdc <__exponent+0x4c>
 800b000:	2330      	movs	r3, #48	; 0x30
 800b002:	3130      	adds	r1, #48	; 0x30
 800b004:	7083      	strb	r3, [r0, #2]
 800b006:	70c1      	strb	r1, [r0, #3]
 800b008:	1d03      	adds	r3, r0, #4
 800b00a:	e7f1      	b.n	800aff0 <__exponent+0x60>

0800b00c <_printf_float>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	ed2d 8b02 	vpush	{d8}
 800b014:	b08d      	sub	sp, #52	; 0x34
 800b016:	460c      	mov	r4, r1
 800b018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b01c:	4616      	mov	r6, r2
 800b01e:	461f      	mov	r7, r3
 800b020:	4605      	mov	r5, r0
 800b022:	f003 f885 	bl	800e130 <_localeconv_r>
 800b026:	f8d0 a000 	ldr.w	sl, [r0]
 800b02a:	4650      	mov	r0, sl
 800b02c:	f7f5 f8fa 	bl	8000224 <strlen>
 800b030:	2300      	movs	r3, #0
 800b032:	930a      	str	r3, [sp, #40]	; 0x28
 800b034:	6823      	ldr	r3, [r4, #0]
 800b036:	9305      	str	r3, [sp, #20]
 800b038:	f8d8 3000 	ldr.w	r3, [r8]
 800b03c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b040:	3307      	adds	r3, #7
 800b042:	f023 0307 	bic.w	r3, r3, #7
 800b046:	f103 0208 	add.w	r2, r3, #8
 800b04a:	f8c8 2000 	str.w	r2, [r8]
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b056:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b05a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b05e:	9307      	str	r3, [sp, #28]
 800b060:	f8cd 8018 	str.w	r8, [sp, #24]
 800b064:	ee08 0a10 	vmov	s16, r0
 800b068:	4b9f      	ldr	r3, [pc, #636]	; (800b2e8 <_printf_float+0x2dc>)
 800b06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b06e:	f04f 32ff 	mov.w	r2, #4294967295
 800b072:	f7f5 fd8b 	bl	8000b8c <__aeabi_dcmpun>
 800b076:	bb88      	cbnz	r0, 800b0dc <_printf_float+0xd0>
 800b078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b07c:	4b9a      	ldr	r3, [pc, #616]	; (800b2e8 <_printf_float+0x2dc>)
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295
 800b082:	f7f5 fd65 	bl	8000b50 <__aeabi_dcmple>
 800b086:	bb48      	cbnz	r0, 800b0dc <_printf_float+0xd0>
 800b088:	2200      	movs	r2, #0
 800b08a:	2300      	movs	r3, #0
 800b08c:	4640      	mov	r0, r8
 800b08e:	4649      	mov	r1, r9
 800b090:	f7f5 fd54 	bl	8000b3c <__aeabi_dcmplt>
 800b094:	b110      	cbz	r0, 800b09c <_printf_float+0x90>
 800b096:	232d      	movs	r3, #45	; 0x2d
 800b098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b09c:	4b93      	ldr	r3, [pc, #588]	; (800b2ec <_printf_float+0x2e0>)
 800b09e:	4894      	ldr	r0, [pc, #592]	; (800b2f0 <_printf_float+0x2e4>)
 800b0a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0a4:	bf94      	ite	ls
 800b0a6:	4698      	movls	r8, r3
 800b0a8:	4680      	movhi	r8, r0
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	6123      	str	r3, [r4, #16]
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	f023 0204 	bic.w	r2, r3, #4
 800b0b4:	6022      	str	r2, [r4, #0]
 800b0b6:	f04f 0900 	mov.w	r9, #0
 800b0ba:	9700      	str	r7, [sp, #0]
 800b0bc:	4633      	mov	r3, r6
 800b0be:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0c0:	4621      	mov	r1, r4
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 f9d8 	bl	800b478 <_printf_common>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	f040 8090 	bne.w	800b1ee <_printf_float+0x1e2>
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d2:	b00d      	add	sp, #52	; 0x34
 800b0d4:	ecbd 8b02 	vpop	{d8}
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	4642      	mov	r2, r8
 800b0de:	464b      	mov	r3, r9
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	f7f5 fd52 	bl	8000b8c <__aeabi_dcmpun>
 800b0e8:	b140      	cbz	r0, 800b0fc <_printf_float+0xf0>
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bfbc      	itt	lt
 800b0f0:	232d      	movlt	r3, #45	; 0x2d
 800b0f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0f6:	487f      	ldr	r0, [pc, #508]	; (800b2f4 <_printf_float+0x2e8>)
 800b0f8:	4b7f      	ldr	r3, [pc, #508]	; (800b2f8 <_printf_float+0x2ec>)
 800b0fa:	e7d1      	b.n	800b0a0 <_printf_float+0x94>
 800b0fc:	6863      	ldr	r3, [r4, #4]
 800b0fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b102:	9206      	str	r2, [sp, #24]
 800b104:	1c5a      	adds	r2, r3, #1
 800b106:	d13f      	bne.n	800b188 <_printf_float+0x17c>
 800b108:	2306      	movs	r3, #6
 800b10a:	6063      	str	r3, [r4, #4]
 800b10c:	9b05      	ldr	r3, [sp, #20]
 800b10e:	6861      	ldr	r1, [r4, #4]
 800b110:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b114:	2300      	movs	r3, #0
 800b116:	9303      	str	r3, [sp, #12]
 800b118:	ab0a      	add	r3, sp, #40	; 0x28
 800b11a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b11e:	ab09      	add	r3, sp, #36	; 0x24
 800b120:	ec49 8b10 	vmov	d0, r8, r9
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	6022      	str	r2, [r4, #0]
 800b128:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b12c:	4628      	mov	r0, r5
 800b12e:	f7ff fecd 	bl	800aecc <__cvt>
 800b132:	9b06      	ldr	r3, [sp, #24]
 800b134:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b136:	2b47      	cmp	r3, #71	; 0x47
 800b138:	4680      	mov	r8, r0
 800b13a:	d108      	bne.n	800b14e <_printf_float+0x142>
 800b13c:	1cc8      	adds	r0, r1, #3
 800b13e:	db02      	blt.n	800b146 <_printf_float+0x13a>
 800b140:	6863      	ldr	r3, [r4, #4]
 800b142:	4299      	cmp	r1, r3
 800b144:	dd41      	ble.n	800b1ca <_printf_float+0x1be>
 800b146:	f1ab 0b02 	sub.w	fp, fp, #2
 800b14a:	fa5f fb8b 	uxtb.w	fp, fp
 800b14e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b152:	d820      	bhi.n	800b196 <_printf_float+0x18a>
 800b154:	3901      	subs	r1, #1
 800b156:	465a      	mov	r2, fp
 800b158:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b15c:	9109      	str	r1, [sp, #36]	; 0x24
 800b15e:	f7ff ff17 	bl	800af90 <__exponent>
 800b162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b164:	1813      	adds	r3, r2, r0
 800b166:	2a01      	cmp	r2, #1
 800b168:	4681      	mov	r9, r0
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	dc02      	bgt.n	800b174 <_printf_float+0x168>
 800b16e:	6822      	ldr	r2, [r4, #0]
 800b170:	07d2      	lsls	r2, r2, #31
 800b172:	d501      	bpl.n	800b178 <_printf_float+0x16c>
 800b174:	3301      	adds	r3, #1
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d09c      	beq.n	800b0ba <_printf_float+0xae>
 800b180:	232d      	movs	r3, #45	; 0x2d
 800b182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b186:	e798      	b.n	800b0ba <_printf_float+0xae>
 800b188:	9a06      	ldr	r2, [sp, #24]
 800b18a:	2a47      	cmp	r2, #71	; 0x47
 800b18c:	d1be      	bne.n	800b10c <_printf_float+0x100>
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1bc      	bne.n	800b10c <_printf_float+0x100>
 800b192:	2301      	movs	r3, #1
 800b194:	e7b9      	b.n	800b10a <_printf_float+0xfe>
 800b196:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b19a:	d118      	bne.n	800b1ce <_printf_float+0x1c2>
 800b19c:	2900      	cmp	r1, #0
 800b19e:	6863      	ldr	r3, [r4, #4]
 800b1a0:	dd0b      	ble.n	800b1ba <_printf_float+0x1ae>
 800b1a2:	6121      	str	r1, [r4, #16]
 800b1a4:	b913      	cbnz	r3, 800b1ac <_printf_float+0x1a0>
 800b1a6:	6822      	ldr	r2, [r4, #0]
 800b1a8:	07d0      	lsls	r0, r2, #31
 800b1aa:	d502      	bpl.n	800b1b2 <_printf_float+0x1a6>
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	440b      	add	r3, r1
 800b1b0:	6123      	str	r3, [r4, #16]
 800b1b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1b4:	f04f 0900 	mov.w	r9, #0
 800b1b8:	e7de      	b.n	800b178 <_printf_float+0x16c>
 800b1ba:	b913      	cbnz	r3, 800b1c2 <_printf_float+0x1b6>
 800b1bc:	6822      	ldr	r2, [r4, #0]
 800b1be:	07d2      	lsls	r2, r2, #31
 800b1c0:	d501      	bpl.n	800b1c6 <_printf_float+0x1ba>
 800b1c2:	3302      	adds	r3, #2
 800b1c4:	e7f4      	b.n	800b1b0 <_printf_float+0x1a4>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e7f2      	b.n	800b1b0 <_printf_float+0x1a4>
 800b1ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d0:	4299      	cmp	r1, r3
 800b1d2:	db05      	blt.n	800b1e0 <_printf_float+0x1d4>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	6121      	str	r1, [r4, #16]
 800b1d8:	07d8      	lsls	r0, r3, #31
 800b1da:	d5ea      	bpl.n	800b1b2 <_printf_float+0x1a6>
 800b1dc:	1c4b      	adds	r3, r1, #1
 800b1de:	e7e7      	b.n	800b1b0 <_printf_float+0x1a4>
 800b1e0:	2900      	cmp	r1, #0
 800b1e2:	bfd4      	ite	le
 800b1e4:	f1c1 0202 	rsble	r2, r1, #2
 800b1e8:	2201      	movgt	r2, #1
 800b1ea:	4413      	add	r3, r2
 800b1ec:	e7e0      	b.n	800b1b0 <_printf_float+0x1a4>
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	055a      	lsls	r2, r3, #21
 800b1f2:	d407      	bmi.n	800b204 <_printf_float+0x1f8>
 800b1f4:	6923      	ldr	r3, [r4, #16]
 800b1f6:	4642      	mov	r2, r8
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	47b8      	blx	r7
 800b1fe:	3001      	adds	r0, #1
 800b200:	d12c      	bne.n	800b25c <_printf_float+0x250>
 800b202:	e764      	b.n	800b0ce <_printf_float+0xc2>
 800b204:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b208:	f240 80e0 	bls.w	800b3cc <_printf_float+0x3c0>
 800b20c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b210:	2200      	movs	r2, #0
 800b212:	2300      	movs	r3, #0
 800b214:	f7f5 fc88 	bl	8000b28 <__aeabi_dcmpeq>
 800b218:	2800      	cmp	r0, #0
 800b21a:	d034      	beq.n	800b286 <_printf_float+0x27a>
 800b21c:	4a37      	ldr	r2, [pc, #220]	; (800b2fc <_printf_float+0x2f0>)
 800b21e:	2301      	movs	r3, #1
 800b220:	4631      	mov	r1, r6
 800b222:	4628      	mov	r0, r5
 800b224:	47b8      	blx	r7
 800b226:	3001      	adds	r0, #1
 800b228:	f43f af51 	beq.w	800b0ce <_printf_float+0xc2>
 800b22c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b230:	429a      	cmp	r2, r3
 800b232:	db02      	blt.n	800b23a <_printf_float+0x22e>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	07d8      	lsls	r0, r3, #31
 800b238:	d510      	bpl.n	800b25c <_printf_float+0x250>
 800b23a:	ee18 3a10 	vmov	r3, s16
 800b23e:	4652      	mov	r2, sl
 800b240:	4631      	mov	r1, r6
 800b242:	4628      	mov	r0, r5
 800b244:	47b8      	blx	r7
 800b246:	3001      	adds	r0, #1
 800b248:	f43f af41 	beq.w	800b0ce <_printf_float+0xc2>
 800b24c:	f04f 0800 	mov.w	r8, #0
 800b250:	f104 091a 	add.w	r9, r4, #26
 800b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b256:	3b01      	subs	r3, #1
 800b258:	4543      	cmp	r3, r8
 800b25a:	dc09      	bgt.n	800b270 <_printf_float+0x264>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	079b      	lsls	r3, r3, #30
 800b260:	f100 8105 	bmi.w	800b46e <_printf_float+0x462>
 800b264:	68e0      	ldr	r0, [r4, #12]
 800b266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b268:	4298      	cmp	r0, r3
 800b26a:	bfb8      	it	lt
 800b26c:	4618      	movlt	r0, r3
 800b26e:	e730      	b.n	800b0d2 <_printf_float+0xc6>
 800b270:	2301      	movs	r3, #1
 800b272:	464a      	mov	r2, r9
 800b274:	4631      	mov	r1, r6
 800b276:	4628      	mov	r0, r5
 800b278:	47b8      	blx	r7
 800b27a:	3001      	adds	r0, #1
 800b27c:	f43f af27 	beq.w	800b0ce <_printf_float+0xc2>
 800b280:	f108 0801 	add.w	r8, r8, #1
 800b284:	e7e6      	b.n	800b254 <_printf_float+0x248>
 800b286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dc39      	bgt.n	800b300 <_printf_float+0x2f4>
 800b28c:	4a1b      	ldr	r2, [pc, #108]	; (800b2fc <_printf_float+0x2f0>)
 800b28e:	2301      	movs	r3, #1
 800b290:	4631      	mov	r1, r6
 800b292:	4628      	mov	r0, r5
 800b294:	47b8      	blx	r7
 800b296:	3001      	adds	r0, #1
 800b298:	f43f af19 	beq.w	800b0ce <_printf_float+0xc2>
 800b29c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	d102      	bne.n	800b2aa <_printf_float+0x29e>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	07d9      	lsls	r1, r3, #31
 800b2a8:	d5d8      	bpl.n	800b25c <_printf_float+0x250>
 800b2aa:	ee18 3a10 	vmov	r3, s16
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f43f af09 	beq.w	800b0ce <_printf_float+0xc2>
 800b2bc:	f04f 0900 	mov.w	r9, #0
 800b2c0:	f104 0a1a 	add.w	sl, r4, #26
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c6:	425b      	negs	r3, r3
 800b2c8:	454b      	cmp	r3, r9
 800b2ca:	dc01      	bgt.n	800b2d0 <_printf_float+0x2c4>
 800b2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ce:	e792      	b.n	800b1f6 <_printf_float+0x1ea>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f aef7 	beq.w	800b0ce <_printf_float+0xc2>
 800b2e0:	f109 0901 	add.w	r9, r9, #1
 800b2e4:	e7ee      	b.n	800b2c4 <_printf_float+0x2b8>
 800b2e6:	bf00      	nop
 800b2e8:	7fefffff 	.word	0x7fefffff
 800b2ec:	08010cb4 	.word	0x08010cb4
 800b2f0:	08010cb8 	.word	0x08010cb8
 800b2f4:	08010cc0 	.word	0x08010cc0
 800b2f8:	08010cbc 	.word	0x08010cbc
 800b2fc:	08010cc4 	.word	0x08010cc4
 800b300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b304:	429a      	cmp	r2, r3
 800b306:	bfa8      	it	ge
 800b308:	461a      	movge	r2, r3
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	4691      	mov	r9, r2
 800b30e:	dc37      	bgt.n	800b380 <_printf_float+0x374>
 800b310:	f04f 0b00 	mov.w	fp, #0
 800b314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b318:	f104 021a 	add.w	r2, r4, #26
 800b31c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b31e:	9305      	str	r3, [sp, #20]
 800b320:	eba3 0309 	sub.w	r3, r3, r9
 800b324:	455b      	cmp	r3, fp
 800b326:	dc33      	bgt.n	800b390 <_printf_float+0x384>
 800b328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b32c:	429a      	cmp	r2, r3
 800b32e:	db3b      	blt.n	800b3a8 <_printf_float+0x39c>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	07da      	lsls	r2, r3, #31
 800b334:	d438      	bmi.n	800b3a8 <_printf_float+0x39c>
 800b336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b338:	9b05      	ldr	r3, [sp, #20]
 800b33a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b33c:	1ad3      	subs	r3, r2, r3
 800b33e:	eba2 0901 	sub.w	r9, r2, r1
 800b342:	4599      	cmp	r9, r3
 800b344:	bfa8      	it	ge
 800b346:	4699      	movge	r9, r3
 800b348:	f1b9 0f00 	cmp.w	r9, #0
 800b34c:	dc35      	bgt.n	800b3ba <_printf_float+0x3ae>
 800b34e:	f04f 0800 	mov.w	r8, #0
 800b352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b356:	f104 0a1a 	add.w	sl, r4, #26
 800b35a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	eba3 0309 	sub.w	r3, r3, r9
 800b364:	4543      	cmp	r3, r8
 800b366:	f77f af79 	ble.w	800b25c <_printf_float+0x250>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	f43f aeaa 	beq.w	800b0ce <_printf_float+0xc2>
 800b37a:	f108 0801 	add.w	r8, r8, #1
 800b37e:	e7ec      	b.n	800b35a <_printf_float+0x34e>
 800b380:	4613      	mov	r3, r2
 800b382:	4631      	mov	r1, r6
 800b384:	4642      	mov	r2, r8
 800b386:	4628      	mov	r0, r5
 800b388:	47b8      	blx	r7
 800b38a:	3001      	adds	r0, #1
 800b38c:	d1c0      	bne.n	800b310 <_printf_float+0x304>
 800b38e:	e69e      	b.n	800b0ce <_printf_float+0xc2>
 800b390:	2301      	movs	r3, #1
 800b392:	4631      	mov	r1, r6
 800b394:	4628      	mov	r0, r5
 800b396:	9205      	str	r2, [sp, #20]
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	f43f ae97 	beq.w	800b0ce <_printf_float+0xc2>
 800b3a0:	9a05      	ldr	r2, [sp, #20]
 800b3a2:	f10b 0b01 	add.w	fp, fp, #1
 800b3a6:	e7b9      	b.n	800b31c <_printf_float+0x310>
 800b3a8:	ee18 3a10 	vmov	r3, s16
 800b3ac:	4652      	mov	r2, sl
 800b3ae:	4631      	mov	r1, r6
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	47b8      	blx	r7
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	d1be      	bne.n	800b336 <_printf_float+0x32a>
 800b3b8:	e689      	b.n	800b0ce <_printf_float+0xc2>
 800b3ba:	9a05      	ldr	r2, [sp, #20]
 800b3bc:	464b      	mov	r3, r9
 800b3be:	4442      	add	r2, r8
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	47b8      	blx	r7
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d1c1      	bne.n	800b34e <_printf_float+0x342>
 800b3ca:	e680      	b.n	800b0ce <_printf_float+0xc2>
 800b3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ce:	2a01      	cmp	r2, #1
 800b3d0:	dc01      	bgt.n	800b3d6 <_printf_float+0x3ca>
 800b3d2:	07db      	lsls	r3, r3, #31
 800b3d4:	d538      	bpl.n	800b448 <_printf_float+0x43c>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	4642      	mov	r2, r8
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	f43f ae74 	beq.w	800b0ce <_printf_float+0xc2>
 800b3e6:	ee18 3a10 	vmov	r3, s16
 800b3ea:	4652      	mov	r2, sl
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f ae6b 	beq.w	800b0ce <_printf_float+0xc2>
 800b3f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2300      	movs	r3, #0
 800b400:	f7f5 fb92 	bl	8000b28 <__aeabi_dcmpeq>
 800b404:	b9d8      	cbnz	r0, 800b43e <_printf_float+0x432>
 800b406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b408:	f108 0201 	add.w	r2, r8, #1
 800b40c:	3b01      	subs	r3, #1
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	d10e      	bne.n	800b436 <_printf_float+0x42a>
 800b418:	e659      	b.n	800b0ce <_printf_float+0xc2>
 800b41a:	2301      	movs	r3, #1
 800b41c:	4652      	mov	r2, sl
 800b41e:	4631      	mov	r1, r6
 800b420:	4628      	mov	r0, r5
 800b422:	47b8      	blx	r7
 800b424:	3001      	adds	r0, #1
 800b426:	f43f ae52 	beq.w	800b0ce <_printf_float+0xc2>
 800b42a:	f108 0801 	add.w	r8, r8, #1
 800b42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b430:	3b01      	subs	r3, #1
 800b432:	4543      	cmp	r3, r8
 800b434:	dcf1      	bgt.n	800b41a <_printf_float+0x40e>
 800b436:	464b      	mov	r3, r9
 800b438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b43c:	e6dc      	b.n	800b1f8 <_printf_float+0x1ec>
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	f104 0a1a 	add.w	sl, r4, #26
 800b446:	e7f2      	b.n	800b42e <_printf_float+0x422>
 800b448:	2301      	movs	r3, #1
 800b44a:	4642      	mov	r2, r8
 800b44c:	e7df      	b.n	800b40e <_printf_float+0x402>
 800b44e:	2301      	movs	r3, #1
 800b450:	464a      	mov	r2, r9
 800b452:	4631      	mov	r1, r6
 800b454:	4628      	mov	r0, r5
 800b456:	47b8      	blx	r7
 800b458:	3001      	adds	r0, #1
 800b45a:	f43f ae38 	beq.w	800b0ce <_printf_float+0xc2>
 800b45e:	f108 0801 	add.w	r8, r8, #1
 800b462:	68e3      	ldr	r3, [r4, #12]
 800b464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b466:	1a5b      	subs	r3, r3, r1
 800b468:	4543      	cmp	r3, r8
 800b46a:	dcf0      	bgt.n	800b44e <_printf_float+0x442>
 800b46c:	e6fa      	b.n	800b264 <_printf_float+0x258>
 800b46e:	f04f 0800 	mov.w	r8, #0
 800b472:	f104 0919 	add.w	r9, r4, #25
 800b476:	e7f4      	b.n	800b462 <_printf_float+0x456>

0800b478 <_printf_common>:
 800b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	4616      	mov	r6, r2
 800b47e:	4699      	mov	r9, r3
 800b480:	688a      	ldr	r2, [r1, #8]
 800b482:	690b      	ldr	r3, [r1, #16]
 800b484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b488:	4293      	cmp	r3, r2
 800b48a:	bfb8      	it	lt
 800b48c:	4613      	movlt	r3, r2
 800b48e:	6033      	str	r3, [r6, #0]
 800b490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b494:	4607      	mov	r7, r0
 800b496:	460c      	mov	r4, r1
 800b498:	b10a      	cbz	r2, 800b49e <_printf_common+0x26>
 800b49a:	3301      	adds	r3, #1
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	0699      	lsls	r1, r3, #26
 800b4a2:	bf42      	ittt	mi
 800b4a4:	6833      	ldrmi	r3, [r6, #0]
 800b4a6:	3302      	addmi	r3, #2
 800b4a8:	6033      	strmi	r3, [r6, #0]
 800b4aa:	6825      	ldr	r5, [r4, #0]
 800b4ac:	f015 0506 	ands.w	r5, r5, #6
 800b4b0:	d106      	bne.n	800b4c0 <_printf_common+0x48>
 800b4b2:	f104 0a19 	add.w	sl, r4, #25
 800b4b6:	68e3      	ldr	r3, [r4, #12]
 800b4b8:	6832      	ldr	r2, [r6, #0]
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	42ab      	cmp	r3, r5
 800b4be:	dc26      	bgt.n	800b50e <_printf_common+0x96>
 800b4c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4c4:	1e13      	subs	r3, r2, #0
 800b4c6:	6822      	ldr	r2, [r4, #0]
 800b4c8:	bf18      	it	ne
 800b4ca:	2301      	movne	r3, #1
 800b4cc:	0692      	lsls	r2, r2, #26
 800b4ce:	d42b      	bmi.n	800b528 <_printf_common+0xb0>
 800b4d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	47c0      	blx	r8
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d01e      	beq.n	800b51c <_printf_common+0xa4>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	68e5      	ldr	r5, [r4, #12]
 800b4e2:	6832      	ldr	r2, [r6, #0]
 800b4e4:	f003 0306 	and.w	r3, r3, #6
 800b4e8:	2b04      	cmp	r3, #4
 800b4ea:	bf08      	it	eq
 800b4ec:	1aad      	subeq	r5, r5, r2
 800b4ee:	68a3      	ldr	r3, [r4, #8]
 800b4f0:	6922      	ldr	r2, [r4, #16]
 800b4f2:	bf0c      	ite	eq
 800b4f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4f8:	2500      	movne	r5, #0
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	bfc4      	itt	gt
 800b4fe:	1a9b      	subgt	r3, r3, r2
 800b500:	18ed      	addgt	r5, r5, r3
 800b502:	2600      	movs	r6, #0
 800b504:	341a      	adds	r4, #26
 800b506:	42b5      	cmp	r5, r6
 800b508:	d11a      	bne.n	800b540 <_printf_common+0xc8>
 800b50a:	2000      	movs	r0, #0
 800b50c:	e008      	b.n	800b520 <_printf_common+0xa8>
 800b50e:	2301      	movs	r3, #1
 800b510:	4652      	mov	r2, sl
 800b512:	4649      	mov	r1, r9
 800b514:	4638      	mov	r0, r7
 800b516:	47c0      	blx	r8
 800b518:	3001      	adds	r0, #1
 800b51a:	d103      	bne.n	800b524 <_printf_common+0xac>
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
 800b520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b524:	3501      	adds	r5, #1
 800b526:	e7c6      	b.n	800b4b6 <_printf_common+0x3e>
 800b528:	18e1      	adds	r1, r4, r3
 800b52a:	1c5a      	adds	r2, r3, #1
 800b52c:	2030      	movs	r0, #48	; 0x30
 800b52e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b532:	4422      	add	r2, r4
 800b534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b53c:	3302      	adds	r3, #2
 800b53e:	e7c7      	b.n	800b4d0 <_printf_common+0x58>
 800b540:	2301      	movs	r3, #1
 800b542:	4622      	mov	r2, r4
 800b544:	4649      	mov	r1, r9
 800b546:	4638      	mov	r0, r7
 800b548:	47c0      	blx	r8
 800b54a:	3001      	adds	r0, #1
 800b54c:	d0e6      	beq.n	800b51c <_printf_common+0xa4>
 800b54e:	3601      	adds	r6, #1
 800b550:	e7d9      	b.n	800b506 <_printf_common+0x8e>
	...

0800b554 <_printf_i>:
 800b554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b558:	460c      	mov	r4, r1
 800b55a:	4691      	mov	r9, r2
 800b55c:	7e27      	ldrb	r7, [r4, #24]
 800b55e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b560:	2f78      	cmp	r7, #120	; 0x78
 800b562:	4680      	mov	r8, r0
 800b564:	469a      	mov	sl, r3
 800b566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b56a:	d807      	bhi.n	800b57c <_printf_i+0x28>
 800b56c:	2f62      	cmp	r7, #98	; 0x62
 800b56e:	d80a      	bhi.n	800b586 <_printf_i+0x32>
 800b570:	2f00      	cmp	r7, #0
 800b572:	f000 80d8 	beq.w	800b726 <_printf_i+0x1d2>
 800b576:	2f58      	cmp	r7, #88	; 0x58
 800b578:	f000 80a3 	beq.w	800b6c2 <_printf_i+0x16e>
 800b57c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b584:	e03a      	b.n	800b5fc <_printf_i+0xa8>
 800b586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b58a:	2b15      	cmp	r3, #21
 800b58c:	d8f6      	bhi.n	800b57c <_printf_i+0x28>
 800b58e:	a001      	add	r0, pc, #4	; (adr r0, 800b594 <_printf_i+0x40>)
 800b590:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b594:	0800b5ed 	.word	0x0800b5ed
 800b598:	0800b601 	.word	0x0800b601
 800b59c:	0800b57d 	.word	0x0800b57d
 800b5a0:	0800b57d 	.word	0x0800b57d
 800b5a4:	0800b57d 	.word	0x0800b57d
 800b5a8:	0800b57d 	.word	0x0800b57d
 800b5ac:	0800b601 	.word	0x0800b601
 800b5b0:	0800b57d 	.word	0x0800b57d
 800b5b4:	0800b57d 	.word	0x0800b57d
 800b5b8:	0800b57d 	.word	0x0800b57d
 800b5bc:	0800b57d 	.word	0x0800b57d
 800b5c0:	0800b70d 	.word	0x0800b70d
 800b5c4:	0800b631 	.word	0x0800b631
 800b5c8:	0800b6ef 	.word	0x0800b6ef
 800b5cc:	0800b57d 	.word	0x0800b57d
 800b5d0:	0800b57d 	.word	0x0800b57d
 800b5d4:	0800b72f 	.word	0x0800b72f
 800b5d8:	0800b57d 	.word	0x0800b57d
 800b5dc:	0800b631 	.word	0x0800b631
 800b5e0:	0800b57d 	.word	0x0800b57d
 800b5e4:	0800b57d 	.word	0x0800b57d
 800b5e8:	0800b6f7 	.word	0x0800b6f7
 800b5ec:	680b      	ldr	r3, [r1, #0]
 800b5ee:	1d1a      	adds	r2, r3, #4
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	600a      	str	r2, [r1, #0]
 800b5f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e0a3      	b.n	800b748 <_printf_i+0x1f4>
 800b600:	6825      	ldr	r5, [r4, #0]
 800b602:	6808      	ldr	r0, [r1, #0]
 800b604:	062e      	lsls	r6, r5, #24
 800b606:	f100 0304 	add.w	r3, r0, #4
 800b60a:	d50a      	bpl.n	800b622 <_printf_i+0xce>
 800b60c:	6805      	ldr	r5, [r0, #0]
 800b60e:	600b      	str	r3, [r1, #0]
 800b610:	2d00      	cmp	r5, #0
 800b612:	da03      	bge.n	800b61c <_printf_i+0xc8>
 800b614:	232d      	movs	r3, #45	; 0x2d
 800b616:	426d      	negs	r5, r5
 800b618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b61c:	485e      	ldr	r0, [pc, #376]	; (800b798 <_printf_i+0x244>)
 800b61e:	230a      	movs	r3, #10
 800b620:	e019      	b.n	800b656 <_printf_i+0x102>
 800b622:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b626:	6805      	ldr	r5, [r0, #0]
 800b628:	600b      	str	r3, [r1, #0]
 800b62a:	bf18      	it	ne
 800b62c:	b22d      	sxthne	r5, r5
 800b62e:	e7ef      	b.n	800b610 <_printf_i+0xbc>
 800b630:	680b      	ldr	r3, [r1, #0]
 800b632:	6825      	ldr	r5, [r4, #0]
 800b634:	1d18      	adds	r0, r3, #4
 800b636:	6008      	str	r0, [r1, #0]
 800b638:	0628      	lsls	r0, r5, #24
 800b63a:	d501      	bpl.n	800b640 <_printf_i+0xec>
 800b63c:	681d      	ldr	r5, [r3, #0]
 800b63e:	e002      	b.n	800b646 <_printf_i+0xf2>
 800b640:	0669      	lsls	r1, r5, #25
 800b642:	d5fb      	bpl.n	800b63c <_printf_i+0xe8>
 800b644:	881d      	ldrh	r5, [r3, #0]
 800b646:	4854      	ldr	r0, [pc, #336]	; (800b798 <_printf_i+0x244>)
 800b648:	2f6f      	cmp	r7, #111	; 0x6f
 800b64a:	bf0c      	ite	eq
 800b64c:	2308      	moveq	r3, #8
 800b64e:	230a      	movne	r3, #10
 800b650:	2100      	movs	r1, #0
 800b652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b656:	6866      	ldr	r6, [r4, #4]
 800b658:	60a6      	str	r6, [r4, #8]
 800b65a:	2e00      	cmp	r6, #0
 800b65c:	bfa2      	ittt	ge
 800b65e:	6821      	ldrge	r1, [r4, #0]
 800b660:	f021 0104 	bicge.w	r1, r1, #4
 800b664:	6021      	strge	r1, [r4, #0]
 800b666:	b90d      	cbnz	r5, 800b66c <_printf_i+0x118>
 800b668:	2e00      	cmp	r6, #0
 800b66a:	d04d      	beq.n	800b708 <_printf_i+0x1b4>
 800b66c:	4616      	mov	r6, r2
 800b66e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b672:	fb03 5711 	mls	r7, r3, r1, r5
 800b676:	5dc7      	ldrb	r7, [r0, r7]
 800b678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b67c:	462f      	mov	r7, r5
 800b67e:	42bb      	cmp	r3, r7
 800b680:	460d      	mov	r5, r1
 800b682:	d9f4      	bls.n	800b66e <_printf_i+0x11a>
 800b684:	2b08      	cmp	r3, #8
 800b686:	d10b      	bne.n	800b6a0 <_printf_i+0x14c>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	07df      	lsls	r7, r3, #31
 800b68c:	d508      	bpl.n	800b6a0 <_printf_i+0x14c>
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	6861      	ldr	r1, [r4, #4]
 800b692:	4299      	cmp	r1, r3
 800b694:	bfde      	ittt	le
 800b696:	2330      	movle	r3, #48	; 0x30
 800b698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b69c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6a0:	1b92      	subs	r2, r2, r6
 800b6a2:	6122      	str	r2, [r4, #16]
 800b6a4:	f8cd a000 	str.w	sl, [sp]
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	aa03      	add	r2, sp, #12
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	f7ff fee2 	bl	800b478 <_printf_common>
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d14c      	bne.n	800b752 <_printf_i+0x1fe>
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	b004      	add	sp, #16
 800b6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c2:	4835      	ldr	r0, [pc, #212]	; (800b798 <_printf_i+0x244>)
 800b6c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6c8:	6823      	ldr	r3, [r4, #0]
 800b6ca:	680e      	ldr	r6, [r1, #0]
 800b6cc:	061f      	lsls	r7, r3, #24
 800b6ce:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6d2:	600e      	str	r6, [r1, #0]
 800b6d4:	d514      	bpl.n	800b700 <_printf_i+0x1ac>
 800b6d6:	07d9      	lsls	r1, r3, #31
 800b6d8:	bf44      	itt	mi
 800b6da:	f043 0320 	orrmi.w	r3, r3, #32
 800b6de:	6023      	strmi	r3, [r4, #0]
 800b6e0:	b91d      	cbnz	r5, 800b6ea <_printf_i+0x196>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	f023 0320 	bic.w	r3, r3, #32
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	2310      	movs	r3, #16
 800b6ec:	e7b0      	b.n	800b650 <_printf_i+0xfc>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	f043 0320 	orr.w	r3, r3, #32
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	2378      	movs	r3, #120	; 0x78
 800b6f8:	4828      	ldr	r0, [pc, #160]	; (800b79c <_printf_i+0x248>)
 800b6fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6fe:	e7e3      	b.n	800b6c8 <_printf_i+0x174>
 800b700:	065e      	lsls	r6, r3, #25
 800b702:	bf48      	it	mi
 800b704:	b2ad      	uxthmi	r5, r5
 800b706:	e7e6      	b.n	800b6d6 <_printf_i+0x182>
 800b708:	4616      	mov	r6, r2
 800b70a:	e7bb      	b.n	800b684 <_printf_i+0x130>
 800b70c:	680b      	ldr	r3, [r1, #0]
 800b70e:	6826      	ldr	r6, [r4, #0]
 800b710:	6960      	ldr	r0, [r4, #20]
 800b712:	1d1d      	adds	r5, r3, #4
 800b714:	600d      	str	r5, [r1, #0]
 800b716:	0635      	lsls	r5, r6, #24
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	d501      	bpl.n	800b720 <_printf_i+0x1cc>
 800b71c:	6018      	str	r0, [r3, #0]
 800b71e:	e002      	b.n	800b726 <_printf_i+0x1d2>
 800b720:	0671      	lsls	r1, r6, #25
 800b722:	d5fb      	bpl.n	800b71c <_printf_i+0x1c8>
 800b724:	8018      	strh	r0, [r3, #0]
 800b726:	2300      	movs	r3, #0
 800b728:	6123      	str	r3, [r4, #16]
 800b72a:	4616      	mov	r6, r2
 800b72c:	e7ba      	b.n	800b6a4 <_printf_i+0x150>
 800b72e:	680b      	ldr	r3, [r1, #0]
 800b730:	1d1a      	adds	r2, r3, #4
 800b732:	600a      	str	r2, [r1, #0]
 800b734:	681e      	ldr	r6, [r3, #0]
 800b736:	6862      	ldr	r2, [r4, #4]
 800b738:	2100      	movs	r1, #0
 800b73a:	4630      	mov	r0, r6
 800b73c:	f7f4 fd80 	bl	8000240 <memchr>
 800b740:	b108      	cbz	r0, 800b746 <_printf_i+0x1f2>
 800b742:	1b80      	subs	r0, r0, r6
 800b744:	6060      	str	r0, [r4, #4]
 800b746:	6863      	ldr	r3, [r4, #4]
 800b748:	6123      	str	r3, [r4, #16]
 800b74a:	2300      	movs	r3, #0
 800b74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b750:	e7a8      	b.n	800b6a4 <_printf_i+0x150>
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	4632      	mov	r2, r6
 800b756:	4649      	mov	r1, r9
 800b758:	4640      	mov	r0, r8
 800b75a:	47d0      	blx	sl
 800b75c:	3001      	adds	r0, #1
 800b75e:	d0ab      	beq.n	800b6b8 <_printf_i+0x164>
 800b760:	6823      	ldr	r3, [r4, #0]
 800b762:	079b      	lsls	r3, r3, #30
 800b764:	d413      	bmi.n	800b78e <_printf_i+0x23a>
 800b766:	68e0      	ldr	r0, [r4, #12]
 800b768:	9b03      	ldr	r3, [sp, #12]
 800b76a:	4298      	cmp	r0, r3
 800b76c:	bfb8      	it	lt
 800b76e:	4618      	movlt	r0, r3
 800b770:	e7a4      	b.n	800b6bc <_printf_i+0x168>
 800b772:	2301      	movs	r3, #1
 800b774:	4632      	mov	r2, r6
 800b776:	4649      	mov	r1, r9
 800b778:	4640      	mov	r0, r8
 800b77a:	47d0      	blx	sl
 800b77c:	3001      	adds	r0, #1
 800b77e:	d09b      	beq.n	800b6b8 <_printf_i+0x164>
 800b780:	3501      	adds	r5, #1
 800b782:	68e3      	ldr	r3, [r4, #12]
 800b784:	9903      	ldr	r1, [sp, #12]
 800b786:	1a5b      	subs	r3, r3, r1
 800b788:	42ab      	cmp	r3, r5
 800b78a:	dcf2      	bgt.n	800b772 <_printf_i+0x21e>
 800b78c:	e7eb      	b.n	800b766 <_printf_i+0x212>
 800b78e:	2500      	movs	r5, #0
 800b790:	f104 0619 	add.w	r6, r4, #25
 800b794:	e7f5      	b.n	800b782 <_printf_i+0x22e>
 800b796:	bf00      	nop
 800b798:	08010cc6 	.word	0x08010cc6
 800b79c:	08010cd7 	.word	0x08010cd7

0800b7a0 <iprintf>:
 800b7a0:	b40f      	push	{r0, r1, r2, r3}
 800b7a2:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <iprintf+0x2c>)
 800b7a4:	b513      	push	{r0, r1, r4, lr}
 800b7a6:	681c      	ldr	r4, [r3, #0]
 800b7a8:	b124      	cbz	r4, 800b7b4 <iprintf+0x14>
 800b7aa:	69a3      	ldr	r3, [r4, #24]
 800b7ac:	b913      	cbnz	r3, 800b7b4 <iprintf+0x14>
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f002 f842 	bl	800d838 <__sinit>
 800b7b4:	ab05      	add	r3, sp, #20
 800b7b6:	9a04      	ldr	r2, [sp, #16]
 800b7b8:	68a1      	ldr	r1, [r4, #8]
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f003 fae9 	bl	800ed94 <_vfiprintf_r>
 800b7c2:	b002      	add	sp, #8
 800b7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c8:	b004      	add	sp, #16
 800b7ca:	4770      	bx	lr
 800b7cc:	20000028 	.word	0x20000028

0800b7d0 <putchar>:
 800b7d0:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <putchar+0x28>)
 800b7d2:	b513      	push	{r0, r1, r4, lr}
 800b7d4:	681c      	ldr	r4, [r3, #0]
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	b134      	cbz	r4, 800b7e8 <putchar+0x18>
 800b7da:	69a3      	ldr	r3, [r4, #24]
 800b7dc:	b923      	cbnz	r3, 800b7e8 <putchar+0x18>
 800b7de:	9001      	str	r0, [sp, #4]
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	f002 f829 	bl	800d838 <__sinit>
 800b7e6:	9901      	ldr	r1, [sp, #4]
 800b7e8:	68a2      	ldr	r2, [r4, #8]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	b002      	add	sp, #8
 800b7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7f2:	f003 bbff 	b.w	800eff4 <_putc_r>
 800b7f6:	bf00      	nop
 800b7f8:	20000028 	.word	0x20000028

0800b7fc <_puts_r>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	460e      	mov	r6, r1
 800b800:	4605      	mov	r5, r0
 800b802:	b118      	cbz	r0, 800b80c <_puts_r+0x10>
 800b804:	6983      	ldr	r3, [r0, #24]
 800b806:	b90b      	cbnz	r3, 800b80c <_puts_r+0x10>
 800b808:	f002 f816 	bl	800d838 <__sinit>
 800b80c:	69ab      	ldr	r3, [r5, #24]
 800b80e:	68ac      	ldr	r4, [r5, #8]
 800b810:	b913      	cbnz	r3, 800b818 <_puts_r+0x1c>
 800b812:	4628      	mov	r0, r5
 800b814:	f002 f810 	bl	800d838 <__sinit>
 800b818:	4b2c      	ldr	r3, [pc, #176]	; (800b8cc <_puts_r+0xd0>)
 800b81a:	429c      	cmp	r4, r3
 800b81c:	d120      	bne.n	800b860 <_puts_r+0x64>
 800b81e:	686c      	ldr	r4, [r5, #4]
 800b820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b822:	07db      	lsls	r3, r3, #31
 800b824:	d405      	bmi.n	800b832 <_puts_r+0x36>
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	0598      	lsls	r0, r3, #22
 800b82a:	d402      	bmi.n	800b832 <_puts_r+0x36>
 800b82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82e:	f002 fc84 	bl	800e13a <__retarget_lock_acquire_recursive>
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	0719      	lsls	r1, r3, #28
 800b836:	d51d      	bpl.n	800b874 <_puts_r+0x78>
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	b1db      	cbz	r3, 800b874 <_puts_r+0x78>
 800b83c:	3e01      	subs	r6, #1
 800b83e:	68a3      	ldr	r3, [r4, #8]
 800b840:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b844:	3b01      	subs	r3, #1
 800b846:	60a3      	str	r3, [r4, #8]
 800b848:	bb39      	cbnz	r1, 800b89a <_puts_r+0x9e>
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	da38      	bge.n	800b8c0 <_puts_r+0xc4>
 800b84e:	4622      	mov	r2, r4
 800b850:	210a      	movs	r1, #10
 800b852:	4628      	mov	r0, r5
 800b854:	f000 ff6c 	bl	800c730 <__swbuf_r>
 800b858:	3001      	adds	r0, #1
 800b85a:	d011      	beq.n	800b880 <_puts_r+0x84>
 800b85c:	250a      	movs	r5, #10
 800b85e:	e011      	b.n	800b884 <_puts_r+0x88>
 800b860:	4b1b      	ldr	r3, [pc, #108]	; (800b8d0 <_puts_r+0xd4>)
 800b862:	429c      	cmp	r4, r3
 800b864:	d101      	bne.n	800b86a <_puts_r+0x6e>
 800b866:	68ac      	ldr	r4, [r5, #8]
 800b868:	e7da      	b.n	800b820 <_puts_r+0x24>
 800b86a:	4b1a      	ldr	r3, [pc, #104]	; (800b8d4 <_puts_r+0xd8>)
 800b86c:	429c      	cmp	r4, r3
 800b86e:	bf08      	it	eq
 800b870:	68ec      	ldreq	r4, [r5, #12]
 800b872:	e7d5      	b.n	800b820 <_puts_r+0x24>
 800b874:	4621      	mov	r1, r4
 800b876:	4628      	mov	r0, r5
 800b878:	f000 ffac 	bl	800c7d4 <__swsetup_r>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d0dd      	beq.n	800b83c <_puts_r+0x40>
 800b880:	f04f 35ff 	mov.w	r5, #4294967295
 800b884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b886:	07da      	lsls	r2, r3, #31
 800b888:	d405      	bmi.n	800b896 <_puts_r+0x9a>
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	059b      	lsls	r3, r3, #22
 800b88e:	d402      	bmi.n	800b896 <_puts_r+0x9a>
 800b890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b892:	f002 fc53 	bl	800e13c <__retarget_lock_release_recursive>
 800b896:	4628      	mov	r0, r5
 800b898:	bd70      	pop	{r4, r5, r6, pc}
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	da04      	bge.n	800b8a8 <_puts_r+0xac>
 800b89e:	69a2      	ldr	r2, [r4, #24]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	dc06      	bgt.n	800b8b2 <_puts_r+0xb6>
 800b8a4:	290a      	cmp	r1, #10
 800b8a6:	d004      	beq.n	800b8b2 <_puts_r+0xb6>
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	1c5a      	adds	r2, r3, #1
 800b8ac:	6022      	str	r2, [r4, #0]
 800b8ae:	7019      	strb	r1, [r3, #0]
 800b8b0:	e7c5      	b.n	800b83e <_puts_r+0x42>
 800b8b2:	4622      	mov	r2, r4
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 ff3b 	bl	800c730 <__swbuf_r>
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d1bf      	bne.n	800b83e <_puts_r+0x42>
 800b8be:	e7df      	b.n	800b880 <_puts_r+0x84>
 800b8c0:	6823      	ldr	r3, [r4, #0]
 800b8c2:	250a      	movs	r5, #10
 800b8c4:	1c5a      	adds	r2, r3, #1
 800b8c6:	6022      	str	r2, [r4, #0]
 800b8c8:	701d      	strb	r5, [r3, #0]
 800b8ca:	e7db      	b.n	800b884 <_puts_r+0x88>
 800b8cc:	08010f8c 	.word	0x08010f8c
 800b8d0:	08010fac 	.word	0x08010fac
 800b8d4:	08010f6c 	.word	0x08010f6c

0800b8d8 <puts>:
 800b8d8:	4b02      	ldr	r3, [pc, #8]	; (800b8e4 <puts+0xc>)
 800b8da:	4601      	mov	r1, r0
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	f7ff bf8d 	b.w	800b7fc <_puts_r>
 800b8e2:	bf00      	nop
 800b8e4:	20000028 	.word	0x20000028

0800b8e8 <strcpy>:
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8ee:	f803 2b01 	strb.w	r2, [r3], #1
 800b8f2:	2a00      	cmp	r2, #0
 800b8f4:	d1f9      	bne.n	800b8ea <strcpy+0x2>
 800b8f6:	4770      	bx	lr

0800b8f8 <sulp>:
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	460d      	mov	r5, r1
 800b8fe:	ec45 4b10 	vmov	d0, r4, r5
 800b902:	4616      	mov	r6, r2
 800b904:	f003 f814 	bl	800e930 <__ulp>
 800b908:	ec51 0b10 	vmov	r0, r1, d0
 800b90c:	b17e      	cbz	r6, 800b92e <sulp+0x36>
 800b90e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd09      	ble.n	800b92e <sulp+0x36>
 800b91a:	051b      	lsls	r3, r3, #20
 800b91c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b920:	2400      	movs	r4, #0
 800b922:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b926:	4622      	mov	r2, r4
 800b928:	462b      	mov	r3, r5
 800b92a:	f7f4 fe95 	bl	8000658 <__aeabi_dmul>
 800b92e:	bd70      	pop	{r4, r5, r6, pc}

0800b930 <_strtod_l>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	b0a3      	sub	sp, #140	; 0x8c
 800b936:	461f      	mov	r7, r3
 800b938:	2300      	movs	r3, #0
 800b93a:	931e      	str	r3, [sp, #120]	; 0x78
 800b93c:	4ba4      	ldr	r3, [pc, #656]	; (800bbd0 <_strtod_l+0x2a0>)
 800b93e:	9219      	str	r2, [sp, #100]	; 0x64
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	9307      	str	r3, [sp, #28]
 800b944:	4604      	mov	r4, r0
 800b946:	4618      	mov	r0, r3
 800b948:	4688      	mov	r8, r1
 800b94a:	f7f4 fc6b 	bl	8000224 <strlen>
 800b94e:	f04f 0a00 	mov.w	sl, #0
 800b952:	4605      	mov	r5, r0
 800b954:	f04f 0b00 	mov.w	fp, #0
 800b958:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b95c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b95e:	781a      	ldrb	r2, [r3, #0]
 800b960:	2a2b      	cmp	r2, #43	; 0x2b
 800b962:	d04c      	beq.n	800b9fe <_strtod_l+0xce>
 800b964:	d839      	bhi.n	800b9da <_strtod_l+0xaa>
 800b966:	2a0d      	cmp	r2, #13
 800b968:	d832      	bhi.n	800b9d0 <_strtod_l+0xa0>
 800b96a:	2a08      	cmp	r2, #8
 800b96c:	d832      	bhi.n	800b9d4 <_strtod_l+0xa4>
 800b96e:	2a00      	cmp	r2, #0
 800b970:	d03c      	beq.n	800b9ec <_strtod_l+0xbc>
 800b972:	2300      	movs	r3, #0
 800b974:	930e      	str	r3, [sp, #56]	; 0x38
 800b976:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b978:	7833      	ldrb	r3, [r6, #0]
 800b97a:	2b30      	cmp	r3, #48	; 0x30
 800b97c:	f040 80b4 	bne.w	800bae8 <_strtod_l+0x1b8>
 800b980:	7873      	ldrb	r3, [r6, #1]
 800b982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b986:	2b58      	cmp	r3, #88	; 0x58
 800b988:	d16c      	bne.n	800ba64 <_strtod_l+0x134>
 800b98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	ab1e      	add	r3, sp, #120	; 0x78
 800b990:	9702      	str	r7, [sp, #8]
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	4a8f      	ldr	r2, [pc, #572]	; (800bbd4 <_strtod_l+0x2a4>)
 800b996:	ab1f      	add	r3, sp, #124	; 0x7c
 800b998:	a91d      	add	r1, sp, #116	; 0x74
 800b99a:	4620      	mov	r0, r4
 800b99c:	f002 f880 	bl	800daa0 <__gethex>
 800b9a0:	f010 0707 	ands.w	r7, r0, #7
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	d005      	beq.n	800b9b4 <_strtod_l+0x84>
 800b9a8:	2f06      	cmp	r7, #6
 800b9aa:	d12a      	bne.n	800ba02 <_strtod_l+0xd2>
 800b9ac:	3601      	adds	r6, #1
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	961d      	str	r6, [sp, #116]	; 0x74
 800b9b2:	930e      	str	r3, [sp, #56]	; 0x38
 800b9b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f040 8596 	bne.w	800c4e8 <_strtod_l+0xbb8>
 800b9bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9be:	b1db      	cbz	r3, 800b9f8 <_strtod_l+0xc8>
 800b9c0:	4652      	mov	r2, sl
 800b9c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9c6:	ec43 2b10 	vmov	d0, r2, r3
 800b9ca:	b023      	add	sp, #140	; 0x8c
 800b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d0:	2a20      	cmp	r2, #32
 800b9d2:	d1ce      	bne.n	800b972 <_strtod_l+0x42>
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	931d      	str	r3, [sp, #116]	; 0x74
 800b9d8:	e7c0      	b.n	800b95c <_strtod_l+0x2c>
 800b9da:	2a2d      	cmp	r2, #45	; 0x2d
 800b9dc:	d1c9      	bne.n	800b972 <_strtod_l+0x42>
 800b9de:	2201      	movs	r2, #1
 800b9e0:	920e      	str	r2, [sp, #56]	; 0x38
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	921d      	str	r2, [sp, #116]	; 0x74
 800b9e6:	785b      	ldrb	r3, [r3, #1]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1c4      	bne.n	800b976 <_strtod_l+0x46>
 800b9ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f040 8576 	bne.w	800c4e4 <_strtod_l+0xbb4>
 800b9f8:	4652      	mov	r2, sl
 800b9fa:	465b      	mov	r3, fp
 800b9fc:	e7e3      	b.n	800b9c6 <_strtod_l+0x96>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	e7ee      	b.n	800b9e0 <_strtod_l+0xb0>
 800ba02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ba04:	b13a      	cbz	r2, 800ba16 <_strtod_l+0xe6>
 800ba06:	2135      	movs	r1, #53	; 0x35
 800ba08:	a820      	add	r0, sp, #128	; 0x80
 800ba0a:	f003 f89c 	bl	800eb46 <__copybits>
 800ba0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba10:	4620      	mov	r0, r4
 800ba12:	f002 fc61 	bl	800e2d8 <_Bfree>
 800ba16:	3f01      	subs	r7, #1
 800ba18:	2f05      	cmp	r7, #5
 800ba1a:	d807      	bhi.n	800ba2c <_strtod_l+0xfc>
 800ba1c:	e8df f007 	tbb	[pc, r7]
 800ba20:	1d180b0e 	.word	0x1d180b0e
 800ba24:	030e      	.short	0x030e
 800ba26:	f04f 0b00 	mov.w	fp, #0
 800ba2a:	46da      	mov	sl, fp
 800ba2c:	0728      	lsls	r0, r5, #28
 800ba2e:	d5c1      	bpl.n	800b9b4 <_strtod_l+0x84>
 800ba30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ba34:	e7be      	b.n	800b9b4 <_strtod_l+0x84>
 800ba36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ba3a:	e7f7      	b.n	800ba2c <_strtod_l+0xfc>
 800ba3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ba40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ba42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba4e:	e7ed      	b.n	800ba2c <_strtod_l+0xfc>
 800ba50:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bbd8 <_strtod_l+0x2a8>
 800ba54:	f04f 0a00 	mov.w	sl, #0
 800ba58:	e7e8      	b.n	800ba2c <_strtod_l+0xfc>
 800ba5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ba5e:	f04f 3aff 	mov.w	sl, #4294967295
 800ba62:	e7e3      	b.n	800ba2c <_strtod_l+0xfc>
 800ba64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba66:	1c5a      	adds	r2, r3, #1
 800ba68:	921d      	str	r2, [sp, #116]	; 0x74
 800ba6a:	785b      	ldrb	r3, [r3, #1]
 800ba6c:	2b30      	cmp	r3, #48	; 0x30
 800ba6e:	d0f9      	beq.n	800ba64 <_strtod_l+0x134>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d09f      	beq.n	800b9b4 <_strtod_l+0x84>
 800ba74:	2301      	movs	r3, #1
 800ba76:	f04f 0900 	mov.w	r9, #0
 800ba7a:	9304      	str	r3, [sp, #16]
 800ba7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ba84:	464f      	mov	r7, r9
 800ba86:	220a      	movs	r2, #10
 800ba88:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ba8a:	7806      	ldrb	r6, [r0, #0]
 800ba8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ba90:	b2d9      	uxtb	r1, r3
 800ba92:	2909      	cmp	r1, #9
 800ba94:	d92a      	bls.n	800baec <_strtod_l+0x1bc>
 800ba96:	9907      	ldr	r1, [sp, #28]
 800ba98:	462a      	mov	r2, r5
 800ba9a:	f003 fb7c 	bl	800f196 <strncmp>
 800ba9e:	b398      	cbz	r0, 800bb08 <_strtod_l+0x1d8>
 800baa0:	2000      	movs	r0, #0
 800baa2:	4633      	mov	r3, r6
 800baa4:	463d      	mov	r5, r7
 800baa6:	9007      	str	r0, [sp, #28]
 800baa8:	4602      	mov	r2, r0
 800baaa:	2b65      	cmp	r3, #101	; 0x65
 800baac:	d001      	beq.n	800bab2 <_strtod_l+0x182>
 800baae:	2b45      	cmp	r3, #69	; 0x45
 800bab0:	d118      	bne.n	800bae4 <_strtod_l+0x1b4>
 800bab2:	b91d      	cbnz	r5, 800babc <_strtod_l+0x18c>
 800bab4:	9b04      	ldr	r3, [sp, #16]
 800bab6:	4303      	orrs	r3, r0
 800bab8:	d098      	beq.n	800b9ec <_strtod_l+0xbc>
 800baba:	2500      	movs	r5, #0
 800babc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800bac0:	f108 0301 	add.w	r3, r8, #1
 800bac4:	931d      	str	r3, [sp, #116]	; 0x74
 800bac6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800baca:	2b2b      	cmp	r3, #43	; 0x2b
 800bacc:	d075      	beq.n	800bbba <_strtod_l+0x28a>
 800bace:	2b2d      	cmp	r3, #45	; 0x2d
 800bad0:	d07b      	beq.n	800bbca <_strtod_l+0x29a>
 800bad2:	f04f 0c00 	mov.w	ip, #0
 800bad6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bada:	2909      	cmp	r1, #9
 800badc:	f240 8082 	bls.w	800bbe4 <_strtod_l+0x2b4>
 800bae0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bae4:	2600      	movs	r6, #0
 800bae6:	e09d      	b.n	800bc24 <_strtod_l+0x2f4>
 800bae8:	2300      	movs	r3, #0
 800baea:	e7c4      	b.n	800ba76 <_strtod_l+0x146>
 800baec:	2f08      	cmp	r7, #8
 800baee:	bfd8      	it	le
 800baf0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800baf2:	f100 0001 	add.w	r0, r0, #1
 800baf6:	bfda      	itte	le
 800baf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800bafc:	9309      	strle	r3, [sp, #36]	; 0x24
 800bafe:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bb02:	3701      	adds	r7, #1
 800bb04:	901d      	str	r0, [sp, #116]	; 0x74
 800bb06:	e7bf      	b.n	800ba88 <_strtod_l+0x158>
 800bb08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb0a:	195a      	adds	r2, r3, r5
 800bb0c:	921d      	str	r2, [sp, #116]	; 0x74
 800bb0e:	5d5b      	ldrb	r3, [r3, r5]
 800bb10:	2f00      	cmp	r7, #0
 800bb12:	d037      	beq.n	800bb84 <_strtod_l+0x254>
 800bb14:	9007      	str	r0, [sp, #28]
 800bb16:	463d      	mov	r5, r7
 800bb18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb1c:	2a09      	cmp	r2, #9
 800bb1e:	d912      	bls.n	800bb46 <_strtod_l+0x216>
 800bb20:	2201      	movs	r2, #1
 800bb22:	e7c2      	b.n	800baaa <_strtod_l+0x17a>
 800bb24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	921d      	str	r2, [sp, #116]	; 0x74
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	2b30      	cmp	r3, #48	; 0x30
 800bb30:	d0f8      	beq.n	800bb24 <_strtod_l+0x1f4>
 800bb32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bb36:	2a08      	cmp	r2, #8
 800bb38:	f200 84db 	bhi.w	800c4f2 <_strtod_l+0xbc2>
 800bb3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bb3e:	9007      	str	r0, [sp, #28]
 800bb40:	2000      	movs	r0, #0
 800bb42:	920a      	str	r2, [sp, #40]	; 0x28
 800bb44:	4605      	mov	r5, r0
 800bb46:	3b30      	subs	r3, #48	; 0x30
 800bb48:	f100 0201 	add.w	r2, r0, #1
 800bb4c:	d014      	beq.n	800bb78 <_strtod_l+0x248>
 800bb4e:	9907      	ldr	r1, [sp, #28]
 800bb50:	4411      	add	r1, r2
 800bb52:	9107      	str	r1, [sp, #28]
 800bb54:	462a      	mov	r2, r5
 800bb56:	eb00 0e05 	add.w	lr, r0, r5
 800bb5a:	210a      	movs	r1, #10
 800bb5c:	4572      	cmp	r2, lr
 800bb5e:	d113      	bne.n	800bb88 <_strtod_l+0x258>
 800bb60:	182a      	adds	r2, r5, r0
 800bb62:	2a08      	cmp	r2, #8
 800bb64:	f105 0501 	add.w	r5, r5, #1
 800bb68:	4405      	add	r5, r0
 800bb6a:	dc1c      	bgt.n	800bba6 <_strtod_l+0x276>
 800bb6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb6e:	220a      	movs	r2, #10
 800bb70:	fb02 3301 	mla	r3, r2, r1, r3
 800bb74:	9309      	str	r3, [sp, #36]	; 0x24
 800bb76:	2200      	movs	r2, #0
 800bb78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb7a:	1c59      	adds	r1, r3, #1
 800bb7c:	911d      	str	r1, [sp, #116]	; 0x74
 800bb7e:	785b      	ldrb	r3, [r3, #1]
 800bb80:	4610      	mov	r0, r2
 800bb82:	e7c9      	b.n	800bb18 <_strtod_l+0x1e8>
 800bb84:	4638      	mov	r0, r7
 800bb86:	e7d2      	b.n	800bb2e <_strtod_l+0x1fe>
 800bb88:	2a08      	cmp	r2, #8
 800bb8a:	dc04      	bgt.n	800bb96 <_strtod_l+0x266>
 800bb8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bb8e:	434e      	muls	r6, r1
 800bb90:	9609      	str	r6, [sp, #36]	; 0x24
 800bb92:	3201      	adds	r2, #1
 800bb94:	e7e2      	b.n	800bb5c <_strtod_l+0x22c>
 800bb96:	f102 0c01 	add.w	ip, r2, #1
 800bb9a:	f1bc 0f10 	cmp.w	ip, #16
 800bb9e:	bfd8      	it	le
 800bba0:	fb01 f909 	mulle.w	r9, r1, r9
 800bba4:	e7f5      	b.n	800bb92 <_strtod_l+0x262>
 800bba6:	2d10      	cmp	r5, #16
 800bba8:	bfdc      	itt	le
 800bbaa:	220a      	movle	r2, #10
 800bbac:	fb02 3909 	mlale	r9, r2, r9, r3
 800bbb0:	e7e1      	b.n	800bb76 <_strtod_l+0x246>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9307      	str	r3, [sp, #28]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	e77c      	b.n	800bab4 <_strtod_l+0x184>
 800bbba:	f04f 0c00 	mov.w	ip, #0
 800bbbe:	f108 0302 	add.w	r3, r8, #2
 800bbc2:	931d      	str	r3, [sp, #116]	; 0x74
 800bbc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bbc8:	e785      	b.n	800bad6 <_strtod_l+0x1a6>
 800bbca:	f04f 0c01 	mov.w	ip, #1
 800bbce:	e7f6      	b.n	800bbbe <_strtod_l+0x28e>
 800bbd0:	08011038 	.word	0x08011038
 800bbd4:	08010ce8 	.word	0x08010ce8
 800bbd8:	7ff00000 	.word	0x7ff00000
 800bbdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbde:	1c59      	adds	r1, r3, #1
 800bbe0:	911d      	str	r1, [sp, #116]	; 0x74
 800bbe2:	785b      	ldrb	r3, [r3, #1]
 800bbe4:	2b30      	cmp	r3, #48	; 0x30
 800bbe6:	d0f9      	beq.n	800bbdc <_strtod_l+0x2ac>
 800bbe8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bbec:	2908      	cmp	r1, #8
 800bbee:	f63f af79 	bhi.w	800bae4 <_strtod_l+0x1b4>
 800bbf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bbf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbf8:	9308      	str	r3, [sp, #32]
 800bbfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbfc:	1c59      	adds	r1, r3, #1
 800bbfe:	911d      	str	r1, [sp, #116]	; 0x74
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800bc06:	2e09      	cmp	r6, #9
 800bc08:	d937      	bls.n	800bc7a <_strtod_l+0x34a>
 800bc0a:	9e08      	ldr	r6, [sp, #32]
 800bc0c:	1b89      	subs	r1, r1, r6
 800bc0e:	2908      	cmp	r1, #8
 800bc10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bc14:	dc02      	bgt.n	800bc1c <_strtod_l+0x2ec>
 800bc16:	4576      	cmp	r6, lr
 800bc18:	bfa8      	it	ge
 800bc1a:	4676      	movge	r6, lr
 800bc1c:	f1bc 0f00 	cmp.w	ip, #0
 800bc20:	d000      	beq.n	800bc24 <_strtod_l+0x2f4>
 800bc22:	4276      	negs	r6, r6
 800bc24:	2d00      	cmp	r5, #0
 800bc26:	d14f      	bne.n	800bcc8 <_strtod_l+0x398>
 800bc28:	9904      	ldr	r1, [sp, #16]
 800bc2a:	4301      	orrs	r1, r0
 800bc2c:	f47f aec2 	bne.w	800b9b4 <_strtod_l+0x84>
 800bc30:	2a00      	cmp	r2, #0
 800bc32:	f47f aedb 	bne.w	800b9ec <_strtod_l+0xbc>
 800bc36:	2b69      	cmp	r3, #105	; 0x69
 800bc38:	d027      	beq.n	800bc8a <_strtod_l+0x35a>
 800bc3a:	dc24      	bgt.n	800bc86 <_strtod_l+0x356>
 800bc3c:	2b49      	cmp	r3, #73	; 0x49
 800bc3e:	d024      	beq.n	800bc8a <_strtod_l+0x35a>
 800bc40:	2b4e      	cmp	r3, #78	; 0x4e
 800bc42:	f47f aed3 	bne.w	800b9ec <_strtod_l+0xbc>
 800bc46:	499e      	ldr	r1, [pc, #632]	; (800bec0 <_strtod_l+0x590>)
 800bc48:	a81d      	add	r0, sp, #116	; 0x74
 800bc4a:	f002 f981 	bl	800df50 <__match>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f aecc 	beq.w	800b9ec <_strtod_l+0xbc>
 800bc54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b28      	cmp	r3, #40	; 0x28
 800bc5a:	d12d      	bne.n	800bcb8 <_strtod_l+0x388>
 800bc5c:	4999      	ldr	r1, [pc, #612]	; (800bec4 <_strtod_l+0x594>)
 800bc5e:	aa20      	add	r2, sp, #128	; 0x80
 800bc60:	a81d      	add	r0, sp, #116	; 0x74
 800bc62:	f002 f989 	bl	800df78 <__hexnan>
 800bc66:	2805      	cmp	r0, #5
 800bc68:	d126      	bne.n	800bcb8 <_strtod_l+0x388>
 800bc6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800bc70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bc74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bc78:	e69c      	b.n	800b9b4 <_strtod_l+0x84>
 800bc7a:	210a      	movs	r1, #10
 800bc7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bc80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bc84:	e7b9      	b.n	800bbfa <_strtod_l+0x2ca>
 800bc86:	2b6e      	cmp	r3, #110	; 0x6e
 800bc88:	e7db      	b.n	800bc42 <_strtod_l+0x312>
 800bc8a:	498f      	ldr	r1, [pc, #572]	; (800bec8 <_strtod_l+0x598>)
 800bc8c:	a81d      	add	r0, sp, #116	; 0x74
 800bc8e:	f002 f95f 	bl	800df50 <__match>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f43f aeaa 	beq.w	800b9ec <_strtod_l+0xbc>
 800bc98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc9a:	498c      	ldr	r1, [pc, #560]	; (800becc <_strtod_l+0x59c>)
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	a81d      	add	r0, sp, #116	; 0x74
 800bca0:	931d      	str	r3, [sp, #116]	; 0x74
 800bca2:	f002 f955 	bl	800df50 <__match>
 800bca6:	b910      	cbnz	r0, 800bcae <_strtod_l+0x37e>
 800bca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bcaa:	3301      	adds	r3, #1
 800bcac:	931d      	str	r3, [sp, #116]	; 0x74
 800bcae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800bedc <_strtod_l+0x5ac>
 800bcb2:	f04f 0a00 	mov.w	sl, #0
 800bcb6:	e67d      	b.n	800b9b4 <_strtod_l+0x84>
 800bcb8:	4885      	ldr	r0, [pc, #532]	; (800bed0 <_strtod_l+0x5a0>)
 800bcba:	f003 fa11 	bl	800f0e0 <nan>
 800bcbe:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bcc2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bcc6:	e675      	b.n	800b9b4 <_strtod_l+0x84>
 800bcc8:	9b07      	ldr	r3, [sp, #28]
 800bcca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bccc:	1af3      	subs	r3, r6, r3
 800bcce:	2f00      	cmp	r7, #0
 800bcd0:	bf08      	it	eq
 800bcd2:	462f      	moveq	r7, r5
 800bcd4:	2d10      	cmp	r5, #16
 800bcd6:	9308      	str	r3, [sp, #32]
 800bcd8:	46a8      	mov	r8, r5
 800bcda:	bfa8      	it	ge
 800bcdc:	f04f 0810 	movge.w	r8, #16
 800bce0:	f7f4 fc40 	bl	8000564 <__aeabi_ui2d>
 800bce4:	2d09      	cmp	r5, #9
 800bce6:	4682      	mov	sl, r0
 800bce8:	468b      	mov	fp, r1
 800bcea:	dd13      	ble.n	800bd14 <_strtod_l+0x3e4>
 800bcec:	4b79      	ldr	r3, [pc, #484]	; (800bed4 <_strtod_l+0x5a4>)
 800bcee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bcf6:	f7f4 fcaf 	bl	8000658 <__aeabi_dmul>
 800bcfa:	4682      	mov	sl, r0
 800bcfc:	4648      	mov	r0, r9
 800bcfe:	468b      	mov	fp, r1
 800bd00:	f7f4 fc30 	bl	8000564 <__aeabi_ui2d>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	4650      	mov	r0, sl
 800bd0a:	4659      	mov	r1, fp
 800bd0c:	f7f4 faee 	bl	80002ec <__adddf3>
 800bd10:	4682      	mov	sl, r0
 800bd12:	468b      	mov	fp, r1
 800bd14:	2d0f      	cmp	r5, #15
 800bd16:	dc38      	bgt.n	800bd8a <_strtod_l+0x45a>
 800bd18:	9b08      	ldr	r3, [sp, #32]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f43f ae4a 	beq.w	800b9b4 <_strtod_l+0x84>
 800bd20:	dd24      	ble.n	800bd6c <_strtod_l+0x43c>
 800bd22:	2b16      	cmp	r3, #22
 800bd24:	dc0b      	bgt.n	800bd3e <_strtod_l+0x40e>
 800bd26:	4d6b      	ldr	r5, [pc, #428]	; (800bed4 <_strtod_l+0x5a4>)
 800bd28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800bd2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bd30:	4652      	mov	r2, sl
 800bd32:	465b      	mov	r3, fp
 800bd34:	f7f4 fc90 	bl	8000658 <__aeabi_dmul>
 800bd38:	4682      	mov	sl, r0
 800bd3a:	468b      	mov	fp, r1
 800bd3c:	e63a      	b.n	800b9b4 <_strtod_l+0x84>
 800bd3e:	9a08      	ldr	r2, [sp, #32]
 800bd40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bd44:	4293      	cmp	r3, r2
 800bd46:	db20      	blt.n	800bd8a <_strtod_l+0x45a>
 800bd48:	4c62      	ldr	r4, [pc, #392]	; (800bed4 <_strtod_l+0x5a4>)
 800bd4a:	f1c5 050f 	rsb	r5, r5, #15
 800bd4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd52:	4652      	mov	r2, sl
 800bd54:	465b      	mov	r3, fp
 800bd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd5a:	f7f4 fc7d 	bl	8000658 <__aeabi_dmul>
 800bd5e:	9b08      	ldr	r3, [sp, #32]
 800bd60:	1b5d      	subs	r5, r3, r5
 800bd62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bd66:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bd6a:	e7e3      	b.n	800bd34 <_strtod_l+0x404>
 800bd6c:	9b08      	ldr	r3, [sp, #32]
 800bd6e:	3316      	adds	r3, #22
 800bd70:	db0b      	blt.n	800bd8a <_strtod_l+0x45a>
 800bd72:	9b07      	ldr	r3, [sp, #28]
 800bd74:	4a57      	ldr	r2, [pc, #348]	; (800bed4 <_strtod_l+0x5a4>)
 800bd76:	1b9e      	subs	r6, r3, r6
 800bd78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bd7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd80:	4650      	mov	r0, sl
 800bd82:	4659      	mov	r1, fp
 800bd84:	f7f4 fd92 	bl	80008ac <__aeabi_ddiv>
 800bd88:	e7d6      	b.n	800bd38 <_strtod_l+0x408>
 800bd8a:	9b08      	ldr	r3, [sp, #32]
 800bd8c:	eba5 0808 	sub.w	r8, r5, r8
 800bd90:	4498      	add	r8, r3
 800bd92:	f1b8 0f00 	cmp.w	r8, #0
 800bd96:	dd71      	ble.n	800be7c <_strtod_l+0x54c>
 800bd98:	f018 030f 	ands.w	r3, r8, #15
 800bd9c:	d00a      	beq.n	800bdb4 <_strtod_l+0x484>
 800bd9e:	494d      	ldr	r1, [pc, #308]	; (800bed4 <_strtod_l+0x5a4>)
 800bda0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bda4:	4652      	mov	r2, sl
 800bda6:	465b      	mov	r3, fp
 800bda8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdac:	f7f4 fc54 	bl	8000658 <__aeabi_dmul>
 800bdb0:	4682      	mov	sl, r0
 800bdb2:	468b      	mov	fp, r1
 800bdb4:	f038 080f 	bics.w	r8, r8, #15
 800bdb8:	d04d      	beq.n	800be56 <_strtod_l+0x526>
 800bdba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bdbe:	dd22      	ble.n	800be06 <_strtod_l+0x4d6>
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	462e      	mov	r6, r5
 800bdc4:	9509      	str	r5, [sp, #36]	; 0x24
 800bdc6:	9507      	str	r5, [sp, #28]
 800bdc8:	2322      	movs	r3, #34	; 0x22
 800bdca:	f8df b110 	ldr.w	fp, [pc, #272]	; 800bedc <_strtod_l+0x5ac>
 800bdce:	6023      	str	r3, [r4, #0]
 800bdd0:	f04f 0a00 	mov.w	sl, #0
 800bdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f43f adec 	beq.w	800b9b4 <_strtod_l+0x84>
 800bddc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bdde:	4620      	mov	r0, r4
 800bde0:	f002 fa7a 	bl	800e2d8 <_Bfree>
 800bde4:	9907      	ldr	r1, [sp, #28]
 800bde6:	4620      	mov	r0, r4
 800bde8:	f002 fa76 	bl	800e2d8 <_Bfree>
 800bdec:	4631      	mov	r1, r6
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f002 fa72 	bl	800e2d8 <_Bfree>
 800bdf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f002 fa6e 	bl	800e2d8 <_Bfree>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	4620      	mov	r0, r4
 800be00:	f002 fa6a 	bl	800e2d8 <_Bfree>
 800be04:	e5d6      	b.n	800b9b4 <_strtod_l+0x84>
 800be06:	2300      	movs	r3, #0
 800be08:	ea4f 1828 	mov.w	r8, r8, asr #4
 800be0c:	4650      	mov	r0, sl
 800be0e:	4659      	mov	r1, fp
 800be10:	4699      	mov	r9, r3
 800be12:	f1b8 0f01 	cmp.w	r8, #1
 800be16:	dc21      	bgt.n	800be5c <_strtod_l+0x52c>
 800be18:	b10b      	cbz	r3, 800be1e <_strtod_l+0x4ee>
 800be1a:	4682      	mov	sl, r0
 800be1c:	468b      	mov	fp, r1
 800be1e:	4b2e      	ldr	r3, [pc, #184]	; (800bed8 <_strtod_l+0x5a8>)
 800be20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800be24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800be28:	4652      	mov	r2, sl
 800be2a:	465b      	mov	r3, fp
 800be2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800be30:	f7f4 fc12 	bl	8000658 <__aeabi_dmul>
 800be34:	4b29      	ldr	r3, [pc, #164]	; (800bedc <_strtod_l+0x5ac>)
 800be36:	460a      	mov	r2, r1
 800be38:	400b      	ands	r3, r1
 800be3a:	4929      	ldr	r1, [pc, #164]	; (800bee0 <_strtod_l+0x5b0>)
 800be3c:	428b      	cmp	r3, r1
 800be3e:	4682      	mov	sl, r0
 800be40:	d8be      	bhi.n	800bdc0 <_strtod_l+0x490>
 800be42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be46:	428b      	cmp	r3, r1
 800be48:	bf86      	itte	hi
 800be4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bee4 <_strtod_l+0x5b4>
 800be4e:	f04f 3aff 	movhi.w	sl, #4294967295
 800be52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800be56:	2300      	movs	r3, #0
 800be58:	9304      	str	r3, [sp, #16]
 800be5a:	e081      	b.n	800bf60 <_strtod_l+0x630>
 800be5c:	f018 0f01 	tst.w	r8, #1
 800be60:	d007      	beq.n	800be72 <_strtod_l+0x542>
 800be62:	4b1d      	ldr	r3, [pc, #116]	; (800bed8 <_strtod_l+0x5a8>)
 800be64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	f7f4 fbf4 	bl	8000658 <__aeabi_dmul>
 800be70:	2301      	movs	r3, #1
 800be72:	f109 0901 	add.w	r9, r9, #1
 800be76:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be7a:	e7ca      	b.n	800be12 <_strtod_l+0x4e2>
 800be7c:	d0eb      	beq.n	800be56 <_strtod_l+0x526>
 800be7e:	f1c8 0800 	rsb	r8, r8, #0
 800be82:	f018 020f 	ands.w	r2, r8, #15
 800be86:	d00a      	beq.n	800be9e <_strtod_l+0x56e>
 800be88:	4b12      	ldr	r3, [pc, #72]	; (800bed4 <_strtod_l+0x5a4>)
 800be8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be8e:	4650      	mov	r0, sl
 800be90:	4659      	mov	r1, fp
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 fd09 	bl	80008ac <__aeabi_ddiv>
 800be9a:	4682      	mov	sl, r0
 800be9c:	468b      	mov	fp, r1
 800be9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bea2:	d0d8      	beq.n	800be56 <_strtod_l+0x526>
 800bea4:	f1b8 0f1f 	cmp.w	r8, #31
 800bea8:	dd1e      	ble.n	800bee8 <_strtod_l+0x5b8>
 800beaa:	2500      	movs	r5, #0
 800beac:	462e      	mov	r6, r5
 800beae:	9509      	str	r5, [sp, #36]	; 0x24
 800beb0:	9507      	str	r5, [sp, #28]
 800beb2:	2322      	movs	r3, #34	; 0x22
 800beb4:	f04f 0a00 	mov.w	sl, #0
 800beb8:	f04f 0b00 	mov.w	fp, #0
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	e789      	b.n	800bdd4 <_strtod_l+0x4a4>
 800bec0:	08010cc1 	.word	0x08010cc1
 800bec4:	08010cfc 	.word	0x08010cfc
 800bec8:	08010cb9 	.word	0x08010cb9
 800becc:	08010ef0 	.word	0x08010ef0
 800bed0:	08010deb 	.word	0x08010deb
 800bed4:	080110d8 	.word	0x080110d8
 800bed8:	080110b0 	.word	0x080110b0
 800bedc:	7ff00000 	.word	0x7ff00000
 800bee0:	7ca00000 	.word	0x7ca00000
 800bee4:	7fefffff 	.word	0x7fefffff
 800bee8:	f018 0310 	ands.w	r3, r8, #16
 800beec:	bf18      	it	ne
 800beee:	236a      	movne	r3, #106	; 0x6a
 800bef0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c2a8 <_strtod_l+0x978>
 800bef4:	9304      	str	r3, [sp, #16]
 800bef6:	4650      	mov	r0, sl
 800bef8:	4659      	mov	r1, fp
 800befa:	2300      	movs	r3, #0
 800befc:	f018 0f01 	tst.w	r8, #1
 800bf00:	d004      	beq.n	800bf0c <_strtod_l+0x5dc>
 800bf02:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf06:	f7f4 fba7 	bl	8000658 <__aeabi_dmul>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bf10:	f109 0908 	add.w	r9, r9, #8
 800bf14:	d1f2      	bne.n	800befc <_strtod_l+0x5cc>
 800bf16:	b10b      	cbz	r3, 800bf1c <_strtod_l+0x5ec>
 800bf18:	4682      	mov	sl, r0
 800bf1a:	468b      	mov	fp, r1
 800bf1c:	9b04      	ldr	r3, [sp, #16]
 800bf1e:	b1bb      	cbz	r3, 800bf50 <_strtod_l+0x620>
 800bf20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bf24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	4659      	mov	r1, fp
 800bf2c:	dd10      	ble.n	800bf50 <_strtod_l+0x620>
 800bf2e:	2b1f      	cmp	r3, #31
 800bf30:	f340 8128 	ble.w	800c184 <_strtod_l+0x854>
 800bf34:	2b34      	cmp	r3, #52	; 0x34
 800bf36:	bfde      	ittt	le
 800bf38:	3b20      	suble	r3, #32
 800bf3a:	f04f 32ff 	movle.w	r2, #4294967295
 800bf3e:	fa02 f303 	lslle.w	r3, r2, r3
 800bf42:	f04f 0a00 	mov.w	sl, #0
 800bf46:	bfcc      	ite	gt
 800bf48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bf4c:	ea03 0b01 	andle.w	fp, r3, r1
 800bf50:	2200      	movs	r2, #0
 800bf52:	2300      	movs	r3, #0
 800bf54:	4650      	mov	r0, sl
 800bf56:	4659      	mov	r1, fp
 800bf58:	f7f4 fde6 	bl	8000b28 <__aeabi_dcmpeq>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d1a4      	bne.n	800beaa <_strtod_l+0x57a>
 800bf60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bf66:	462b      	mov	r3, r5
 800bf68:	463a      	mov	r2, r7
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f002 fa20 	bl	800e3b0 <__s2b>
 800bf70:	9009      	str	r0, [sp, #36]	; 0x24
 800bf72:	2800      	cmp	r0, #0
 800bf74:	f43f af24 	beq.w	800bdc0 <_strtod_l+0x490>
 800bf78:	9b07      	ldr	r3, [sp, #28]
 800bf7a:	1b9e      	subs	r6, r3, r6
 800bf7c:	9b08      	ldr	r3, [sp, #32]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	bfb4      	ite	lt
 800bf82:	4633      	movlt	r3, r6
 800bf84:	2300      	movge	r3, #0
 800bf86:	9310      	str	r3, [sp, #64]	; 0x40
 800bf88:	9b08      	ldr	r3, [sp, #32]
 800bf8a:	2500      	movs	r5, #0
 800bf8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bf90:	9318      	str	r3, [sp, #96]	; 0x60
 800bf92:	462e      	mov	r6, r5
 800bf94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf96:	4620      	mov	r0, r4
 800bf98:	6859      	ldr	r1, [r3, #4]
 800bf9a:	f002 f95d 	bl	800e258 <_Balloc>
 800bf9e:	9007      	str	r0, [sp, #28]
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	f43f af11 	beq.w	800bdc8 <_strtod_l+0x498>
 800bfa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa8:	691a      	ldr	r2, [r3, #16]
 800bfaa:	3202      	adds	r2, #2
 800bfac:	f103 010c 	add.w	r1, r3, #12
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	300c      	adds	r0, #12
 800bfb4:	f002 f942 	bl	800e23c <memcpy>
 800bfb8:	ec4b ab10 	vmov	d0, sl, fp
 800bfbc:	aa20      	add	r2, sp, #128	; 0x80
 800bfbe:	a91f      	add	r1, sp, #124	; 0x7c
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bfc6:	f002 fd2f 	bl	800ea28 <__d2b>
 800bfca:	901e      	str	r0, [sp, #120]	; 0x78
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	f43f aefb 	beq.w	800bdc8 <_strtod_l+0x498>
 800bfd2:	2101      	movs	r1, #1
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f002 fa85 	bl	800e4e4 <__i2b>
 800bfda:	4606      	mov	r6, r0
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f43f aef3 	beq.w	800bdc8 <_strtod_l+0x498>
 800bfe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bfe4:	9904      	ldr	r1, [sp, #16]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	bfab      	itete	ge
 800bfea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800bfec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800bfee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800bff0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800bff4:	bfac      	ite	ge
 800bff6:	eb03 0902 	addge.w	r9, r3, r2
 800bffa:	1ad7      	sublt	r7, r2, r3
 800bffc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bffe:	eba3 0801 	sub.w	r8, r3, r1
 800c002:	4490      	add	r8, r2
 800c004:	4ba3      	ldr	r3, [pc, #652]	; (800c294 <_strtod_l+0x964>)
 800c006:	f108 38ff 	add.w	r8, r8, #4294967295
 800c00a:	4598      	cmp	r8, r3
 800c00c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c010:	f280 80cc 	bge.w	800c1ac <_strtod_l+0x87c>
 800c014:	eba3 0308 	sub.w	r3, r3, r8
 800c018:	2b1f      	cmp	r3, #31
 800c01a:	eba2 0203 	sub.w	r2, r2, r3
 800c01e:	f04f 0101 	mov.w	r1, #1
 800c022:	f300 80b6 	bgt.w	800c192 <_strtod_l+0x862>
 800c026:	fa01 f303 	lsl.w	r3, r1, r3
 800c02a:	9311      	str	r3, [sp, #68]	; 0x44
 800c02c:	2300      	movs	r3, #0
 800c02e:	930c      	str	r3, [sp, #48]	; 0x30
 800c030:	eb09 0802 	add.w	r8, r9, r2
 800c034:	9b04      	ldr	r3, [sp, #16]
 800c036:	45c1      	cmp	r9, r8
 800c038:	4417      	add	r7, r2
 800c03a:	441f      	add	r7, r3
 800c03c:	464b      	mov	r3, r9
 800c03e:	bfa8      	it	ge
 800c040:	4643      	movge	r3, r8
 800c042:	42bb      	cmp	r3, r7
 800c044:	bfa8      	it	ge
 800c046:	463b      	movge	r3, r7
 800c048:	2b00      	cmp	r3, #0
 800c04a:	bfc2      	ittt	gt
 800c04c:	eba8 0803 	subgt.w	r8, r8, r3
 800c050:	1aff      	subgt	r7, r7, r3
 800c052:	eba9 0903 	subgt.w	r9, r9, r3
 800c056:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dd17      	ble.n	800c08c <_strtod_l+0x75c>
 800c05c:	4631      	mov	r1, r6
 800c05e:	461a      	mov	r2, r3
 800c060:	4620      	mov	r0, r4
 800c062:	f002 fafb 	bl	800e65c <__pow5mult>
 800c066:	4606      	mov	r6, r0
 800c068:	2800      	cmp	r0, #0
 800c06a:	f43f aead 	beq.w	800bdc8 <_strtod_l+0x498>
 800c06e:	4601      	mov	r1, r0
 800c070:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c072:	4620      	mov	r0, r4
 800c074:	f002 fa4c 	bl	800e510 <__multiply>
 800c078:	900f      	str	r0, [sp, #60]	; 0x3c
 800c07a:	2800      	cmp	r0, #0
 800c07c:	f43f aea4 	beq.w	800bdc8 <_strtod_l+0x498>
 800c080:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c082:	4620      	mov	r0, r4
 800c084:	f002 f928 	bl	800e2d8 <_Bfree>
 800c088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c08a:	931e      	str	r3, [sp, #120]	; 0x78
 800c08c:	f1b8 0f00 	cmp.w	r8, #0
 800c090:	f300 8091 	bgt.w	800c1b6 <_strtod_l+0x886>
 800c094:	9b08      	ldr	r3, [sp, #32]
 800c096:	2b00      	cmp	r3, #0
 800c098:	dd08      	ble.n	800c0ac <_strtod_l+0x77c>
 800c09a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c09c:	9907      	ldr	r1, [sp, #28]
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f002 fadc 	bl	800e65c <__pow5mult>
 800c0a4:	9007      	str	r0, [sp, #28]
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	f43f ae8e 	beq.w	800bdc8 <_strtod_l+0x498>
 800c0ac:	2f00      	cmp	r7, #0
 800c0ae:	dd08      	ble.n	800c0c2 <_strtod_l+0x792>
 800c0b0:	9907      	ldr	r1, [sp, #28]
 800c0b2:	463a      	mov	r2, r7
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f002 fb2b 	bl	800e710 <__lshift>
 800c0ba:	9007      	str	r0, [sp, #28]
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	f43f ae83 	beq.w	800bdc8 <_strtod_l+0x498>
 800c0c2:	f1b9 0f00 	cmp.w	r9, #0
 800c0c6:	dd08      	ble.n	800c0da <_strtod_l+0x7aa>
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	464a      	mov	r2, r9
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f002 fb1f 	bl	800e710 <__lshift>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f43f ae77 	beq.w	800bdc8 <_strtod_l+0x498>
 800c0da:	9a07      	ldr	r2, [sp, #28]
 800c0dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f002 fb9e 	bl	800e820 <__mdiff>
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	f43f ae6e 	beq.w	800bdc8 <_strtod_l+0x498>
 800c0ec:	68c3      	ldr	r3, [r0, #12]
 800c0ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60c3      	str	r3, [r0, #12]
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	f002 fb77 	bl	800e7e8 <__mcmp>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	da65      	bge.n	800c1ca <_strtod_l+0x89a>
 800c0fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c100:	ea53 030a 	orrs.w	r3, r3, sl
 800c104:	f040 8087 	bne.w	800c216 <_strtod_l+0x8e6>
 800c108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 8082 	bne.w	800c216 <_strtod_l+0x8e6>
 800c112:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c116:	0d1b      	lsrs	r3, r3, #20
 800c118:	051b      	lsls	r3, r3, #20
 800c11a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c11e:	d97a      	bls.n	800c216 <_strtod_l+0x8e6>
 800c120:	696b      	ldr	r3, [r5, #20]
 800c122:	b913      	cbnz	r3, 800c12a <_strtod_l+0x7fa>
 800c124:	692b      	ldr	r3, [r5, #16]
 800c126:	2b01      	cmp	r3, #1
 800c128:	dd75      	ble.n	800c216 <_strtod_l+0x8e6>
 800c12a:	4629      	mov	r1, r5
 800c12c:	2201      	movs	r2, #1
 800c12e:	4620      	mov	r0, r4
 800c130:	f002 faee 	bl	800e710 <__lshift>
 800c134:	4631      	mov	r1, r6
 800c136:	4605      	mov	r5, r0
 800c138:	f002 fb56 	bl	800e7e8 <__mcmp>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	dd6a      	ble.n	800c216 <_strtod_l+0x8e6>
 800c140:	9904      	ldr	r1, [sp, #16]
 800c142:	4a55      	ldr	r2, [pc, #340]	; (800c298 <_strtod_l+0x968>)
 800c144:	465b      	mov	r3, fp
 800c146:	2900      	cmp	r1, #0
 800c148:	f000 8085 	beq.w	800c256 <_strtod_l+0x926>
 800c14c:	ea02 010b 	and.w	r1, r2, fp
 800c150:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c154:	dc7f      	bgt.n	800c256 <_strtod_l+0x926>
 800c156:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c15a:	f77f aeaa 	ble.w	800beb2 <_strtod_l+0x582>
 800c15e:	4a4f      	ldr	r2, [pc, #316]	; (800c29c <_strtod_l+0x96c>)
 800c160:	2300      	movs	r3, #0
 800c162:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c166:	4650      	mov	r0, sl
 800c168:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c16c:	4659      	mov	r1, fp
 800c16e:	f7f4 fa73 	bl	8000658 <__aeabi_dmul>
 800c172:	460b      	mov	r3, r1
 800c174:	4303      	orrs	r3, r0
 800c176:	bf08      	it	eq
 800c178:	2322      	moveq	r3, #34	; 0x22
 800c17a:	4682      	mov	sl, r0
 800c17c:	468b      	mov	fp, r1
 800c17e:	bf08      	it	eq
 800c180:	6023      	streq	r3, [r4, #0]
 800c182:	e62b      	b.n	800bddc <_strtod_l+0x4ac>
 800c184:	f04f 32ff 	mov.w	r2, #4294967295
 800c188:	fa02 f303 	lsl.w	r3, r2, r3
 800c18c:	ea03 0a0a 	and.w	sl, r3, sl
 800c190:	e6de      	b.n	800bf50 <_strtod_l+0x620>
 800c192:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c196:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c19a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c19e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c1a2:	fa01 f308 	lsl.w	r3, r1, r8
 800c1a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c1a8:	9111      	str	r1, [sp, #68]	; 0x44
 800c1aa:	e741      	b.n	800c030 <_strtod_l+0x700>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	930c      	str	r3, [sp, #48]	; 0x30
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	9311      	str	r3, [sp, #68]	; 0x44
 800c1b4:	e73c      	b.n	800c030 <_strtod_l+0x700>
 800c1b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c1b8:	4642      	mov	r2, r8
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f002 faa8 	bl	800e710 <__lshift>
 800c1c0:	901e      	str	r0, [sp, #120]	; 0x78
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	f47f af66 	bne.w	800c094 <_strtod_l+0x764>
 800c1c8:	e5fe      	b.n	800bdc8 <_strtod_l+0x498>
 800c1ca:	465f      	mov	r7, fp
 800c1cc:	d16e      	bne.n	800c2ac <_strtod_l+0x97c>
 800c1ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c1d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1d4:	b342      	cbz	r2, 800c228 <_strtod_l+0x8f8>
 800c1d6:	4a32      	ldr	r2, [pc, #200]	; (800c2a0 <_strtod_l+0x970>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d128      	bne.n	800c22e <_strtod_l+0x8fe>
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	4650      	mov	r0, sl
 800c1e0:	b1eb      	cbz	r3, 800c21e <_strtod_l+0x8ee>
 800c1e2:	4a2d      	ldr	r2, [pc, #180]	; (800c298 <_strtod_l+0x968>)
 800c1e4:	403a      	ands	r2, r7
 800c1e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c1ea:	f04f 31ff 	mov.w	r1, #4294967295
 800c1ee:	d819      	bhi.n	800c224 <_strtod_l+0x8f4>
 800c1f0:	0d12      	lsrs	r2, r2, #20
 800c1f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c1f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	d117      	bne.n	800c22e <_strtod_l+0x8fe>
 800c1fe:	4b29      	ldr	r3, [pc, #164]	; (800c2a4 <_strtod_l+0x974>)
 800c200:	429f      	cmp	r7, r3
 800c202:	d102      	bne.n	800c20a <_strtod_l+0x8da>
 800c204:	3001      	adds	r0, #1
 800c206:	f43f addf 	beq.w	800bdc8 <_strtod_l+0x498>
 800c20a:	4b23      	ldr	r3, [pc, #140]	; (800c298 <_strtod_l+0x968>)
 800c20c:	403b      	ands	r3, r7
 800c20e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c212:	f04f 0a00 	mov.w	sl, #0
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1a0      	bne.n	800c15e <_strtod_l+0x82e>
 800c21c:	e5de      	b.n	800bddc <_strtod_l+0x4ac>
 800c21e:	f04f 33ff 	mov.w	r3, #4294967295
 800c222:	e7ea      	b.n	800c1fa <_strtod_l+0x8ca>
 800c224:	460b      	mov	r3, r1
 800c226:	e7e8      	b.n	800c1fa <_strtod_l+0x8ca>
 800c228:	ea53 030a 	orrs.w	r3, r3, sl
 800c22c:	d088      	beq.n	800c140 <_strtod_l+0x810>
 800c22e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c230:	b1db      	cbz	r3, 800c26a <_strtod_l+0x93a>
 800c232:	423b      	tst	r3, r7
 800c234:	d0ef      	beq.n	800c216 <_strtod_l+0x8e6>
 800c236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c238:	9a04      	ldr	r2, [sp, #16]
 800c23a:	4650      	mov	r0, sl
 800c23c:	4659      	mov	r1, fp
 800c23e:	b1c3      	cbz	r3, 800c272 <_strtod_l+0x942>
 800c240:	f7ff fb5a 	bl	800b8f8 <sulp>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c24c:	f7f4 f84e 	bl	80002ec <__adddf3>
 800c250:	4682      	mov	sl, r0
 800c252:	468b      	mov	fp, r1
 800c254:	e7df      	b.n	800c216 <_strtod_l+0x8e6>
 800c256:	4013      	ands	r3, r2
 800c258:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c25c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c260:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c264:	f04f 3aff 	mov.w	sl, #4294967295
 800c268:	e7d5      	b.n	800c216 <_strtod_l+0x8e6>
 800c26a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c26c:	ea13 0f0a 	tst.w	r3, sl
 800c270:	e7e0      	b.n	800c234 <_strtod_l+0x904>
 800c272:	f7ff fb41 	bl	800b8f8 <sulp>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c27e:	f7f4 f833 	bl	80002e8 <__aeabi_dsub>
 800c282:	2200      	movs	r2, #0
 800c284:	2300      	movs	r3, #0
 800c286:	4682      	mov	sl, r0
 800c288:	468b      	mov	fp, r1
 800c28a:	f7f4 fc4d 	bl	8000b28 <__aeabi_dcmpeq>
 800c28e:	2800      	cmp	r0, #0
 800c290:	d0c1      	beq.n	800c216 <_strtod_l+0x8e6>
 800c292:	e60e      	b.n	800beb2 <_strtod_l+0x582>
 800c294:	fffffc02 	.word	0xfffffc02
 800c298:	7ff00000 	.word	0x7ff00000
 800c29c:	39500000 	.word	0x39500000
 800c2a0:	000fffff 	.word	0x000fffff
 800c2a4:	7fefffff 	.word	0x7fefffff
 800c2a8:	08010d10 	.word	0x08010d10
 800c2ac:	4631      	mov	r1, r6
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f002 fc16 	bl	800eae0 <__ratio>
 800c2b4:	ec59 8b10 	vmov	r8, r9, d0
 800c2b8:	ee10 0a10 	vmov	r0, s0
 800c2bc:	2200      	movs	r2, #0
 800c2be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c2c2:	4649      	mov	r1, r9
 800c2c4:	f7f4 fc44 	bl	8000b50 <__aeabi_dcmple>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	d07c      	beq.n	800c3c6 <_strtod_l+0xa96>
 800c2cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d04c      	beq.n	800c36c <_strtod_l+0xa3c>
 800c2d2:	4b95      	ldr	r3, [pc, #596]	; (800c528 <_strtod_l+0xbf8>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c2da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c528 <_strtod_l+0xbf8>
 800c2de:	f04f 0800 	mov.w	r8, #0
 800c2e2:	4b92      	ldr	r3, [pc, #584]	; (800c52c <_strtod_l+0xbfc>)
 800c2e4:	403b      	ands	r3, r7
 800c2e6:	9311      	str	r3, [sp, #68]	; 0x44
 800c2e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c2ea:	4b91      	ldr	r3, [pc, #580]	; (800c530 <_strtod_l+0xc00>)
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	f040 80b2 	bne.w	800c456 <_strtod_l+0xb26>
 800c2f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c2f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c2fe:	ec4b ab10 	vmov	d0, sl, fp
 800c302:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c306:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c30a:	f002 fb11 	bl	800e930 <__ulp>
 800c30e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c312:	ec53 2b10 	vmov	r2, r3, d0
 800c316:	f7f4 f99f 	bl	8000658 <__aeabi_dmul>
 800c31a:	4652      	mov	r2, sl
 800c31c:	465b      	mov	r3, fp
 800c31e:	f7f3 ffe5 	bl	80002ec <__adddf3>
 800c322:	460b      	mov	r3, r1
 800c324:	4981      	ldr	r1, [pc, #516]	; (800c52c <_strtod_l+0xbfc>)
 800c326:	4a83      	ldr	r2, [pc, #524]	; (800c534 <_strtod_l+0xc04>)
 800c328:	4019      	ands	r1, r3
 800c32a:	4291      	cmp	r1, r2
 800c32c:	4682      	mov	sl, r0
 800c32e:	d95e      	bls.n	800c3ee <_strtod_l+0xabe>
 800c330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c332:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c336:	4293      	cmp	r3, r2
 800c338:	d103      	bne.n	800c342 <_strtod_l+0xa12>
 800c33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c33c:	3301      	adds	r3, #1
 800c33e:	f43f ad43 	beq.w	800bdc8 <_strtod_l+0x498>
 800c342:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c540 <_strtod_l+0xc10>
 800c346:	f04f 3aff 	mov.w	sl, #4294967295
 800c34a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c34c:	4620      	mov	r0, r4
 800c34e:	f001 ffc3 	bl	800e2d8 <_Bfree>
 800c352:	9907      	ldr	r1, [sp, #28]
 800c354:	4620      	mov	r0, r4
 800c356:	f001 ffbf 	bl	800e2d8 <_Bfree>
 800c35a:	4631      	mov	r1, r6
 800c35c:	4620      	mov	r0, r4
 800c35e:	f001 ffbb 	bl	800e2d8 <_Bfree>
 800c362:	4629      	mov	r1, r5
 800c364:	4620      	mov	r0, r4
 800c366:	f001 ffb7 	bl	800e2d8 <_Bfree>
 800c36a:	e613      	b.n	800bf94 <_strtod_l+0x664>
 800c36c:	f1ba 0f00 	cmp.w	sl, #0
 800c370:	d11b      	bne.n	800c3aa <_strtod_l+0xa7a>
 800c372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c376:	b9f3      	cbnz	r3, 800c3b6 <_strtod_l+0xa86>
 800c378:	4b6b      	ldr	r3, [pc, #428]	; (800c528 <_strtod_l+0xbf8>)
 800c37a:	2200      	movs	r2, #0
 800c37c:	4640      	mov	r0, r8
 800c37e:	4649      	mov	r1, r9
 800c380:	f7f4 fbdc 	bl	8000b3c <__aeabi_dcmplt>
 800c384:	b9d0      	cbnz	r0, 800c3bc <_strtod_l+0xa8c>
 800c386:	4640      	mov	r0, r8
 800c388:	4649      	mov	r1, r9
 800c38a:	4b6b      	ldr	r3, [pc, #428]	; (800c538 <_strtod_l+0xc08>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	f7f4 f963 	bl	8000658 <__aeabi_dmul>
 800c392:	4680      	mov	r8, r0
 800c394:	4689      	mov	r9, r1
 800c396:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c39a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c39e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c3a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c3a8:	e79b      	b.n	800c2e2 <_strtod_l+0x9b2>
 800c3aa:	f1ba 0f01 	cmp.w	sl, #1
 800c3ae:	d102      	bne.n	800c3b6 <_strtod_l+0xa86>
 800c3b0:	2f00      	cmp	r7, #0
 800c3b2:	f43f ad7e 	beq.w	800beb2 <_strtod_l+0x582>
 800c3b6:	4b61      	ldr	r3, [pc, #388]	; (800c53c <_strtod_l+0xc0c>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	e78c      	b.n	800c2d6 <_strtod_l+0x9a6>
 800c3bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c538 <_strtod_l+0xc08>
 800c3c0:	f04f 0800 	mov.w	r8, #0
 800c3c4:	e7e7      	b.n	800c396 <_strtod_l+0xa66>
 800c3c6:	4b5c      	ldr	r3, [pc, #368]	; (800c538 <_strtod_l+0xc08>)
 800c3c8:	4640      	mov	r0, r8
 800c3ca:	4649      	mov	r1, r9
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	f7f4 f943 	bl	8000658 <__aeabi_dmul>
 800c3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	4689      	mov	r9, r1
 800c3d8:	b933      	cbnz	r3, 800c3e8 <_strtod_l+0xab8>
 800c3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3de:	9012      	str	r0, [sp, #72]	; 0x48
 800c3e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c3e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c3e6:	e7dd      	b.n	800c3a4 <_strtod_l+0xa74>
 800c3e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c3ec:	e7f9      	b.n	800c3e2 <_strtod_l+0xab2>
 800c3ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c3f2:	9b04      	ldr	r3, [sp, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1a8      	bne.n	800c34a <_strtod_l+0xa1a>
 800c3f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c3fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c3fe:	0d1b      	lsrs	r3, r3, #20
 800c400:	051b      	lsls	r3, r3, #20
 800c402:	429a      	cmp	r2, r3
 800c404:	d1a1      	bne.n	800c34a <_strtod_l+0xa1a>
 800c406:	4640      	mov	r0, r8
 800c408:	4649      	mov	r1, r9
 800c40a:	f7f4 fc85 	bl	8000d18 <__aeabi_d2lz>
 800c40e:	f7f4 f8f5 	bl	80005fc <__aeabi_l2d>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	4640      	mov	r0, r8
 800c418:	4649      	mov	r1, r9
 800c41a:	f7f3 ff65 	bl	80002e8 <__aeabi_dsub>
 800c41e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c424:	ea43 030a 	orr.w	r3, r3, sl
 800c428:	4313      	orrs	r3, r2
 800c42a:	4680      	mov	r8, r0
 800c42c:	4689      	mov	r9, r1
 800c42e:	d053      	beq.n	800c4d8 <_strtod_l+0xba8>
 800c430:	a335      	add	r3, pc, #212	; (adr r3, 800c508 <_strtod_l+0xbd8>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f7f4 fb81 	bl	8000b3c <__aeabi_dcmplt>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	f47f acce 	bne.w	800bddc <_strtod_l+0x4ac>
 800c440:	a333      	add	r3, pc, #204	; (adr r3, 800c510 <_strtod_l+0xbe0>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	4640      	mov	r0, r8
 800c448:	4649      	mov	r1, r9
 800c44a:	f7f4 fb95 	bl	8000b78 <__aeabi_dcmpgt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	f43f af7b 	beq.w	800c34a <_strtod_l+0xa1a>
 800c454:	e4c2      	b.n	800bddc <_strtod_l+0x4ac>
 800c456:	9b04      	ldr	r3, [sp, #16]
 800c458:	b333      	cbz	r3, 800c4a8 <_strtod_l+0xb78>
 800c45a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c45c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c460:	d822      	bhi.n	800c4a8 <_strtod_l+0xb78>
 800c462:	a32d      	add	r3, pc, #180	; (adr r3, 800c518 <_strtod_l+0xbe8>)
 800c464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c468:	4640      	mov	r0, r8
 800c46a:	4649      	mov	r1, r9
 800c46c:	f7f4 fb70 	bl	8000b50 <__aeabi_dcmple>
 800c470:	b1a0      	cbz	r0, 800c49c <_strtod_l+0xb6c>
 800c472:	4649      	mov	r1, r9
 800c474:	4640      	mov	r0, r8
 800c476:	f7f4 fbc7 	bl	8000c08 <__aeabi_d2uiz>
 800c47a:	2801      	cmp	r0, #1
 800c47c:	bf38      	it	cc
 800c47e:	2001      	movcc	r0, #1
 800c480:	f7f4 f870 	bl	8000564 <__aeabi_ui2d>
 800c484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	bb13      	cbnz	r3, 800c4d2 <_strtod_l+0xba2>
 800c48c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c490:	9014      	str	r0, [sp, #80]	; 0x50
 800c492:	9315      	str	r3, [sp, #84]	; 0x54
 800c494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c498:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c49e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c4a4:	1a9b      	subs	r3, r3, r2
 800c4a6:	930d      	str	r3, [sp, #52]	; 0x34
 800c4a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c4b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c4b4:	f002 fa3c 	bl	800e930 <__ulp>
 800c4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4bc:	ec53 2b10 	vmov	r2, r3, d0
 800c4c0:	f7f4 f8ca 	bl	8000658 <__aeabi_dmul>
 800c4c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c4c8:	f7f3 ff10 	bl	80002ec <__adddf3>
 800c4cc:	4682      	mov	sl, r0
 800c4ce:	468b      	mov	fp, r1
 800c4d0:	e78f      	b.n	800c3f2 <_strtod_l+0xac2>
 800c4d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c4d6:	e7dd      	b.n	800c494 <_strtod_l+0xb64>
 800c4d8:	a311      	add	r3, pc, #68	; (adr r3, 800c520 <_strtod_l+0xbf0>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f4 fb2d 	bl	8000b3c <__aeabi_dcmplt>
 800c4e2:	e7b4      	b.n	800c44e <_strtod_l+0xb1e>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	930e      	str	r3, [sp, #56]	; 0x38
 800c4e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c4ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c4ec:	6013      	str	r3, [r2, #0]
 800c4ee:	f7ff ba65 	b.w	800b9bc <_strtod_l+0x8c>
 800c4f2:	2b65      	cmp	r3, #101	; 0x65
 800c4f4:	f43f ab5d 	beq.w	800bbb2 <_strtod_l+0x282>
 800c4f8:	2b45      	cmp	r3, #69	; 0x45
 800c4fa:	f43f ab5a 	beq.w	800bbb2 <_strtod_l+0x282>
 800c4fe:	2201      	movs	r2, #1
 800c500:	f7ff bb92 	b.w	800bc28 <_strtod_l+0x2f8>
 800c504:	f3af 8000 	nop.w
 800c508:	94a03595 	.word	0x94a03595
 800c50c:	3fdfffff 	.word	0x3fdfffff
 800c510:	35afe535 	.word	0x35afe535
 800c514:	3fe00000 	.word	0x3fe00000
 800c518:	ffc00000 	.word	0xffc00000
 800c51c:	41dfffff 	.word	0x41dfffff
 800c520:	94a03595 	.word	0x94a03595
 800c524:	3fcfffff 	.word	0x3fcfffff
 800c528:	3ff00000 	.word	0x3ff00000
 800c52c:	7ff00000 	.word	0x7ff00000
 800c530:	7fe00000 	.word	0x7fe00000
 800c534:	7c9fffff 	.word	0x7c9fffff
 800c538:	3fe00000 	.word	0x3fe00000
 800c53c:	bff00000 	.word	0xbff00000
 800c540:	7fefffff 	.word	0x7fefffff

0800c544 <strtod>:
 800c544:	460a      	mov	r2, r1
 800c546:	4601      	mov	r1, r0
 800c548:	4802      	ldr	r0, [pc, #8]	; (800c554 <strtod+0x10>)
 800c54a:	4b03      	ldr	r3, [pc, #12]	; (800c558 <strtod+0x14>)
 800c54c:	6800      	ldr	r0, [r0, #0]
 800c54e:	f7ff b9ef 	b.w	800b930 <_strtod_l>
 800c552:	bf00      	nop
 800c554:	20000028 	.word	0x20000028
 800c558:	20000090 	.word	0x20000090

0800c55c <strtok>:
 800c55c:	4b16      	ldr	r3, [pc, #88]	; (800c5b8 <strtok+0x5c>)
 800c55e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c560:	681e      	ldr	r6, [r3, #0]
 800c562:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c564:	4605      	mov	r5, r0
 800c566:	b9fc      	cbnz	r4, 800c5a8 <strtok+0x4c>
 800c568:	2050      	movs	r0, #80	; 0x50
 800c56a:	9101      	str	r1, [sp, #4]
 800c56c:	f001 fe4c 	bl	800e208 <malloc>
 800c570:	9901      	ldr	r1, [sp, #4]
 800c572:	65b0      	str	r0, [r6, #88]	; 0x58
 800c574:	4602      	mov	r2, r0
 800c576:	b920      	cbnz	r0, 800c582 <strtok+0x26>
 800c578:	4b10      	ldr	r3, [pc, #64]	; (800c5bc <strtok+0x60>)
 800c57a:	4811      	ldr	r0, [pc, #68]	; (800c5c0 <strtok+0x64>)
 800c57c:	2157      	movs	r1, #87	; 0x57
 800c57e:	f000 f997 	bl	800c8b0 <__assert_func>
 800c582:	e9c0 4400 	strd	r4, r4, [r0]
 800c586:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c58a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c58e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c592:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c596:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c59a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c59e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c5a2:	6184      	str	r4, [r0, #24]
 800c5a4:	7704      	strb	r4, [r0, #28]
 800c5a6:	6244      	str	r4, [r0, #36]	; 0x24
 800c5a8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	b002      	add	sp, #8
 800c5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5b4:	f000 b806 	b.w	800c5c4 <__strtok_r>
 800c5b8:	20000028 	.word	0x20000028
 800c5bc:	08010d38 	.word	0x08010d38
 800c5c0:	08010d4f 	.word	0x08010d4f

0800c5c4 <__strtok_r>:
 800c5c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c6:	b908      	cbnz	r0, 800c5cc <__strtok_r+0x8>
 800c5c8:	6810      	ldr	r0, [r2, #0]
 800c5ca:	b188      	cbz	r0, 800c5f0 <__strtok_r+0x2c>
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c5d4:	460f      	mov	r7, r1
 800c5d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c5da:	b91e      	cbnz	r6, 800c5e4 <__strtok_r+0x20>
 800c5dc:	b965      	cbnz	r5, 800c5f8 <__strtok_r+0x34>
 800c5de:	6015      	str	r5, [r2, #0]
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e005      	b.n	800c5f0 <__strtok_r+0x2c>
 800c5e4:	42b5      	cmp	r5, r6
 800c5e6:	d1f6      	bne.n	800c5d6 <__strtok_r+0x12>
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1f0      	bne.n	800c5ce <__strtok_r+0xa>
 800c5ec:	6014      	str	r4, [r2, #0]
 800c5ee:	7003      	strb	r3, [r0, #0]
 800c5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f2:	461c      	mov	r4, r3
 800c5f4:	e00c      	b.n	800c610 <__strtok_r+0x4c>
 800c5f6:	b915      	cbnz	r5, 800c5fe <__strtok_r+0x3a>
 800c5f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c5fc:	460e      	mov	r6, r1
 800c5fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c602:	42ab      	cmp	r3, r5
 800c604:	d1f7      	bne.n	800c5f6 <__strtok_r+0x32>
 800c606:	2b00      	cmp	r3, #0
 800c608:	d0f3      	beq.n	800c5f2 <__strtok_r+0x2e>
 800c60a:	2300      	movs	r3, #0
 800c60c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c610:	6014      	str	r4, [r2, #0]
 800c612:	e7ed      	b.n	800c5f0 <__strtok_r+0x2c>

0800c614 <_strtol_l.isra.0>:
 800c614:	2b01      	cmp	r3, #1
 800c616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c61a:	d001      	beq.n	800c620 <_strtol_l.isra.0+0xc>
 800c61c:	2b24      	cmp	r3, #36	; 0x24
 800c61e:	d906      	bls.n	800c62e <_strtol_l.isra.0+0x1a>
 800c620:	f7fe fc10 	bl	800ae44 <__errno>
 800c624:	2316      	movs	r3, #22
 800c626:	6003      	str	r3, [r0, #0]
 800c628:	2000      	movs	r0, #0
 800c62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c62e:	4f3a      	ldr	r7, [pc, #232]	; (800c718 <_strtol_l.isra.0+0x104>)
 800c630:	468e      	mov	lr, r1
 800c632:	4676      	mov	r6, lr
 800c634:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c638:	5de5      	ldrb	r5, [r4, r7]
 800c63a:	f015 0508 	ands.w	r5, r5, #8
 800c63e:	d1f8      	bne.n	800c632 <_strtol_l.isra.0+0x1e>
 800c640:	2c2d      	cmp	r4, #45	; 0x2d
 800c642:	d134      	bne.n	800c6ae <_strtol_l.isra.0+0x9a>
 800c644:	f89e 4000 	ldrb.w	r4, [lr]
 800c648:	f04f 0801 	mov.w	r8, #1
 800c64c:	f106 0e02 	add.w	lr, r6, #2
 800c650:	2b00      	cmp	r3, #0
 800c652:	d05c      	beq.n	800c70e <_strtol_l.isra.0+0xfa>
 800c654:	2b10      	cmp	r3, #16
 800c656:	d10c      	bne.n	800c672 <_strtol_l.isra.0+0x5e>
 800c658:	2c30      	cmp	r4, #48	; 0x30
 800c65a:	d10a      	bne.n	800c672 <_strtol_l.isra.0+0x5e>
 800c65c:	f89e 4000 	ldrb.w	r4, [lr]
 800c660:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c664:	2c58      	cmp	r4, #88	; 0x58
 800c666:	d14d      	bne.n	800c704 <_strtol_l.isra.0+0xf0>
 800c668:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c66c:	2310      	movs	r3, #16
 800c66e:	f10e 0e02 	add.w	lr, lr, #2
 800c672:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c676:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c67a:	2600      	movs	r6, #0
 800c67c:	fbbc f9f3 	udiv	r9, ip, r3
 800c680:	4635      	mov	r5, r6
 800c682:	fb03 ca19 	mls	sl, r3, r9, ip
 800c686:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c68a:	2f09      	cmp	r7, #9
 800c68c:	d818      	bhi.n	800c6c0 <_strtol_l.isra.0+0xac>
 800c68e:	463c      	mov	r4, r7
 800c690:	42a3      	cmp	r3, r4
 800c692:	dd24      	ble.n	800c6de <_strtol_l.isra.0+0xca>
 800c694:	2e00      	cmp	r6, #0
 800c696:	db1f      	blt.n	800c6d8 <_strtol_l.isra.0+0xc4>
 800c698:	45a9      	cmp	r9, r5
 800c69a:	d31d      	bcc.n	800c6d8 <_strtol_l.isra.0+0xc4>
 800c69c:	d101      	bne.n	800c6a2 <_strtol_l.isra.0+0x8e>
 800c69e:	45a2      	cmp	sl, r4
 800c6a0:	db1a      	blt.n	800c6d8 <_strtol_l.isra.0+0xc4>
 800c6a2:	fb05 4503 	mla	r5, r5, r3, r4
 800c6a6:	2601      	movs	r6, #1
 800c6a8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c6ac:	e7eb      	b.n	800c686 <_strtol_l.isra.0+0x72>
 800c6ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c6b0:	bf08      	it	eq
 800c6b2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c6b6:	46a8      	mov	r8, r5
 800c6b8:	bf08      	it	eq
 800c6ba:	f106 0e02 	addeq.w	lr, r6, #2
 800c6be:	e7c7      	b.n	800c650 <_strtol_l.isra.0+0x3c>
 800c6c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c6c4:	2f19      	cmp	r7, #25
 800c6c6:	d801      	bhi.n	800c6cc <_strtol_l.isra.0+0xb8>
 800c6c8:	3c37      	subs	r4, #55	; 0x37
 800c6ca:	e7e1      	b.n	800c690 <_strtol_l.isra.0+0x7c>
 800c6cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c6d0:	2f19      	cmp	r7, #25
 800c6d2:	d804      	bhi.n	800c6de <_strtol_l.isra.0+0xca>
 800c6d4:	3c57      	subs	r4, #87	; 0x57
 800c6d6:	e7db      	b.n	800c690 <_strtol_l.isra.0+0x7c>
 800c6d8:	f04f 36ff 	mov.w	r6, #4294967295
 800c6dc:	e7e4      	b.n	800c6a8 <_strtol_l.isra.0+0x94>
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	da05      	bge.n	800c6ee <_strtol_l.isra.0+0xda>
 800c6e2:	2322      	movs	r3, #34	; 0x22
 800c6e4:	6003      	str	r3, [r0, #0]
 800c6e6:	4665      	mov	r5, ip
 800c6e8:	b942      	cbnz	r2, 800c6fc <_strtol_l.isra.0+0xe8>
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	e79d      	b.n	800c62a <_strtol_l.isra.0+0x16>
 800c6ee:	f1b8 0f00 	cmp.w	r8, #0
 800c6f2:	d000      	beq.n	800c6f6 <_strtol_l.isra.0+0xe2>
 800c6f4:	426d      	negs	r5, r5
 800c6f6:	2a00      	cmp	r2, #0
 800c6f8:	d0f7      	beq.n	800c6ea <_strtol_l.isra.0+0xd6>
 800c6fa:	b10e      	cbz	r6, 800c700 <_strtol_l.isra.0+0xec>
 800c6fc:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c700:	6011      	str	r1, [r2, #0]
 800c702:	e7f2      	b.n	800c6ea <_strtol_l.isra.0+0xd6>
 800c704:	2430      	movs	r4, #48	; 0x30
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1b3      	bne.n	800c672 <_strtol_l.isra.0+0x5e>
 800c70a:	2308      	movs	r3, #8
 800c70c:	e7b1      	b.n	800c672 <_strtol_l.isra.0+0x5e>
 800c70e:	2c30      	cmp	r4, #48	; 0x30
 800c710:	d0a4      	beq.n	800c65c <_strtol_l.isra.0+0x48>
 800c712:	230a      	movs	r3, #10
 800c714:	e7ad      	b.n	800c672 <_strtol_l.isra.0+0x5e>
 800c716:	bf00      	nop
 800c718:	08010ded 	.word	0x08010ded

0800c71c <strtol>:
 800c71c:	4613      	mov	r3, r2
 800c71e:	460a      	mov	r2, r1
 800c720:	4601      	mov	r1, r0
 800c722:	4802      	ldr	r0, [pc, #8]	; (800c72c <strtol+0x10>)
 800c724:	6800      	ldr	r0, [r0, #0]
 800c726:	f7ff bf75 	b.w	800c614 <_strtol_l.isra.0>
 800c72a:	bf00      	nop
 800c72c:	20000028 	.word	0x20000028

0800c730 <__swbuf_r>:
 800c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c732:	460e      	mov	r6, r1
 800c734:	4614      	mov	r4, r2
 800c736:	4605      	mov	r5, r0
 800c738:	b118      	cbz	r0, 800c742 <__swbuf_r+0x12>
 800c73a:	6983      	ldr	r3, [r0, #24]
 800c73c:	b90b      	cbnz	r3, 800c742 <__swbuf_r+0x12>
 800c73e:	f001 f87b 	bl	800d838 <__sinit>
 800c742:	4b21      	ldr	r3, [pc, #132]	; (800c7c8 <__swbuf_r+0x98>)
 800c744:	429c      	cmp	r4, r3
 800c746:	d12b      	bne.n	800c7a0 <__swbuf_r+0x70>
 800c748:	686c      	ldr	r4, [r5, #4]
 800c74a:	69a3      	ldr	r3, [r4, #24]
 800c74c:	60a3      	str	r3, [r4, #8]
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	071a      	lsls	r2, r3, #28
 800c752:	d52f      	bpl.n	800c7b4 <__swbuf_r+0x84>
 800c754:	6923      	ldr	r3, [r4, #16]
 800c756:	b36b      	cbz	r3, 800c7b4 <__swbuf_r+0x84>
 800c758:	6923      	ldr	r3, [r4, #16]
 800c75a:	6820      	ldr	r0, [r4, #0]
 800c75c:	1ac0      	subs	r0, r0, r3
 800c75e:	6963      	ldr	r3, [r4, #20]
 800c760:	b2f6      	uxtb	r6, r6
 800c762:	4283      	cmp	r3, r0
 800c764:	4637      	mov	r7, r6
 800c766:	dc04      	bgt.n	800c772 <__swbuf_r+0x42>
 800c768:	4621      	mov	r1, r4
 800c76a:	4628      	mov	r0, r5
 800c76c:	f000 ffbe 	bl	800d6ec <_fflush_r>
 800c770:	bb30      	cbnz	r0, 800c7c0 <__swbuf_r+0x90>
 800c772:	68a3      	ldr	r3, [r4, #8]
 800c774:	3b01      	subs	r3, #1
 800c776:	60a3      	str	r3, [r4, #8]
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	701e      	strb	r6, [r3, #0]
 800c780:	6963      	ldr	r3, [r4, #20]
 800c782:	3001      	adds	r0, #1
 800c784:	4283      	cmp	r3, r0
 800c786:	d004      	beq.n	800c792 <__swbuf_r+0x62>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	07db      	lsls	r3, r3, #31
 800c78c:	d506      	bpl.n	800c79c <__swbuf_r+0x6c>
 800c78e:	2e0a      	cmp	r6, #10
 800c790:	d104      	bne.n	800c79c <__swbuf_r+0x6c>
 800c792:	4621      	mov	r1, r4
 800c794:	4628      	mov	r0, r5
 800c796:	f000 ffa9 	bl	800d6ec <_fflush_r>
 800c79a:	b988      	cbnz	r0, 800c7c0 <__swbuf_r+0x90>
 800c79c:	4638      	mov	r0, r7
 800c79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7a0:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <__swbuf_r+0x9c>)
 800c7a2:	429c      	cmp	r4, r3
 800c7a4:	d101      	bne.n	800c7aa <__swbuf_r+0x7a>
 800c7a6:	68ac      	ldr	r4, [r5, #8]
 800c7a8:	e7cf      	b.n	800c74a <__swbuf_r+0x1a>
 800c7aa:	4b09      	ldr	r3, [pc, #36]	; (800c7d0 <__swbuf_r+0xa0>)
 800c7ac:	429c      	cmp	r4, r3
 800c7ae:	bf08      	it	eq
 800c7b0:	68ec      	ldreq	r4, [r5, #12]
 800c7b2:	e7ca      	b.n	800c74a <__swbuf_r+0x1a>
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	4628      	mov	r0, r5
 800c7b8:	f000 f80c 	bl	800c7d4 <__swsetup_r>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d0cb      	beq.n	800c758 <__swbuf_r+0x28>
 800c7c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c7c4:	e7ea      	b.n	800c79c <__swbuf_r+0x6c>
 800c7c6:	bf00      	nop
 800c7c8:	08010f8c 	.word	0x08010f8c
 800c7cc:	08010fac 	.word	0x08010fac
 800c7d0:	08010f6c 	.word	0x08010f6c

0800c7d4 <__swsetup_r>:
 800c7d4:	4b32      	ldr	r3, [pc, #200]	; (800c8a0 <__swsetup_r+0xcc>)
 800c7d6:	b570      	push	{r4, r5, r6, lr}
 800c7d8:	681d      	ldr	r5, [r3, #0]
 800c7da:	4606      	mov	r6, r0
 800c7dc:	460c      	mov	r4, r1
 800c7de:	b125      	cbz	r5, 800c7ea <__swsetup_r+0x16>
 800c7e0:	69ab      	ldr	r3, [r5, #24]
 800c7e2:	b913      	cbnz	r3, 800c7ea <__swsetup_r+0x16>
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	f001 f827 	bl	800d838 <__sinit>
 800c7ea:	4b2e      	ldr	r3, [pc, #184]	; (800c8a4 <__swsetup_r+0xd0>)
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	d10f      	bne.n	800c810 <__swsetup_r+0x3c>
 800c7f0:	686c      	ldr	r4, [r5, #4]
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7f8:	0719      	lsls	r1, r3, #28
 800c7fa:	d42c      	bmi.n	800c856 <__swsetup_r+0x82>
 800c7fc:	06dd      	lsls	r5, r3, #27
 800c7fe:	d411      	bmi.n	800c824 <__swsetup_r+0x50>
 800c800:	2309      	movs	r3, #9
 800c802:	6033      	str	r3, [r6, #0]
 800c804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c808:	81a3      	strh	r3, [r4, #12]
 800c80a:	f04f 30ff 	mov.w	r0, #4294967295
 800c80e:	e03e      	b.n	800c88e <__swsetup_r+0xba>
 800c810:	4b25      	ldr	r3, [pc, #148]	; (800c8a8 <__swsetup_r+0xd4>)
 800c812:	429c      	cmp	r4, r3
 800c814:	d101      	bne.n	800c81a <__swsetup_r+0x46>
 800c816:	68ac      	ldr	r4, [r5, #8]
 800c818:	e7eb      	b.n	800c7f2 <__swsetup_r+0x1e>
 800c81a:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <__swsetup_r+0xd8>)
 800c81c:	429c      	cmp	r4, r3
 800c81e:	bf08      	it	eq
 800c820:	68ec      	ldreq	r4, [r5, #12]
 800c822:	e7e6      	b.n	800c7f2 <__swsetup_r+0x1e>
 800c824:	0758      	lsls	r0, r3, #29
 800c826:	d512      	bpl.n	800c84e <__swsetup_r+0x7a>
 800c828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c82a:	b141      	cbz	r1, 800c83e <__swsetup_r+0x6a>
 800c82c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c830:	4299      	cmp	r1, r3
 800c832:	d002      	beq.n	800c83a <__swsetup_r+0x66>
 800c834:	4630      	mov	r0, r6
 800c836:	f002 f9d9 	bl	800ebec <_free_r>
 800c83a:	2300      	movs	r3, #0
 800c83c:	6363      	str	r3, [r4, #52]	; 0x34
 800c83e:	89a3      	ldrh	r3, [r4, #12]
 800c840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c844:	81a3      	strh	r3, [r4, #12]
 800c846:	2300      	movs	r3, #0
 800c848:	6063      	str	r3, [r4, #4]
 800c84a:	6923      	ldr	r3, [r4, #16]
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f043 0308 	orr.w	r3, r3, #8
 800c854:	81a3      	strh	r3, [r4, #12]
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	b94b      	cbnz	r3, 800c86e <__swsetup_r+0x9a>
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c864:	d003      	beq.n	800c86e <__swsetup_r+0x9a>
 800c866:	4621      	mov	r1, r4
 800c868:	4630      	mov	r0, r6
 800c86a:	f001 fc8d 	bl	800e188 <__smakebuf_r>
 800c86e:	89a0      	ldrh	r0, [r4, #12]
 800c870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c874:	f010 0301 	ands.w	r3, r0, #1
 800c878:	d00a      	beq.n	800c890 <__swsetup_r+0xbc>
 800c87a:	2300      	movs	r3, #0
 800c87c:	60a3      	str	r3, [r4, #8]
 800c87e:	6963      	ldr	r3, [r4, #20]
 800c880:	425b      	negs	r3, r3
 800c882:	61a3      	str	r3, [r4, #24]
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	b943      	cbnz	r3, 800c89a <__swsetup_r+0xc6>
 800c888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c88c:	d1ba      	bne.n	800c804 <__swsetup_r+0x30>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	0781      	lsls	r1, r0, #30
 800c892:	bf58      	it	pl
 800c894:	6963      	ldrpl	r3, [r4, #20]
 800c896:	60a3      	str	r3, [r4, #8]
 800c898:	e7f4      	b.n	800c884 <__swsetup_r+0xb0>
 800c89a:	2000      	movs	r0, #0
 800c89c:	e7f7      	b.n	800c88e <__swsetup_r+0xba>
 800c89e:	bf00      	nop
 800c8a0:	20000028 	.word	0x20000028
 800c8a4:	08010f8c 	.word	0x08010f8c
 800c8a8:	08010fac 	.word	0x08010fac
 800c8ac:	08010f6c 	.word	0x08010f6c

0800c8b0 <__assert_func>:
 800c8b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8b2:	4614      	mov	r4, r2
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	4b09      	ldr	r3, [pc, #36]	; (800c8dc <__assert_func+0x2c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4605      	mov	r5, r0
 800c8bc:	68d8      	ldr	r0, [r3, #12]
 800c8be:	b14c      	cbz	r4, 800c8d4 <__assert_func+0x24>
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <__assert_func+0x30>)
 800c8c2:	9100      	str	r1, [sp, #0]
 800c8c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8c8:	4906      	ldr	r1, [pc, #24]	; (800c8e4 <__assert_func+0x34>)
 800c8ca:	462b      	mov	r3, r5
 800c8cc:	f001 f832 	bl	800d934 <fiprintf>
 800c8d0:	f002 fc92 	bl	800f1f8 <abort>
 800c8d4:	4b04      	ldr	r3, [pc, #16]	; (800c8e8 <__assert_func+0x38>)
 800c8d6:	461c      	mov	r4, r3
 800c8d8:	e7f3      	b.n	800c8c2 <__assert_func+0x12>
 800c8da:	bf00      	nop
 800c8dc:	20000028 	.word	0x20000028
 800c8e0:	08010db0 	.word	0x08010db0
 800c8e4:	08010dbd 	.word	0x08010dbd
 800c8e8:	08010deb 	.word	0x08010deb

0800c8ec <quorem>:
 800c8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	6903      	ldr	r3, [r0, #16]
 800c8f2:	690c      	ldr	r4, [r1, #16]
 800c8f4:	42a3      	cmp	r3, r4
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	f2c0 8081 	blt.w	800c9fe <quorem+0x112>
 800c8fc:	3c01      	subs	r4, #1
 800c8fe:	f101 0814 	add.w	r8, r1, #20
 800c902:	f100 0514 	add.w	r5, r0, #20
 800c906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c90a:	9301      	str	r3, [sp, #4]
 800c90c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c914:	3301      	adds	r3, #1
 800c916:	429a      	cmp	r2, r3
 800c918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c91c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c920:	fbb2 f6f3 	udiv	r6, r2, r3
 800c924:	d331      	bcc.n	800c98a <quorem+0x9e>
 800c926:	f04f 0e00 	mov.w	lr, #0
 800c92a:	4640      	mov	r0, r8
 800c92c:	46ac      	mov	ip, r5
 800c92e:	46f2      	mov	sl, lr
 800c930:	f850 2b04 	ldr.w	r2, [r0], #4
 800c934:	b293      	uxth	r3, r2
 800c936:	fb06 e303 	mla	r3, r6, r3, lr
 800c93a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c93e:	b29b      	uxth	r3, r3
 800c940:	ebaa 0303 	sub.w	r3, sl, r3
 800c944:	0c12      	lsrs	r2, r2, #16
 800c946:	f8dc a000 	ldr.w	sl, [ip]
 800c94a:	fb06 e202 	mla	r2, r6, r2, lr
 800c94e:	fa13 f38a 	uxtah	r3, r3, sl
 800c952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c956:	fa1f fa82 	uxth.w	sl, r2
 800c95a:	f8dc 2000 	ldr.w	r2, [ip]
 800c95e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c966:	b29b      	uxth	r3, r3
 800c968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c96c:	4581      	cmp	r9, r0
 800c96e:	f84c 3b04 	str.w	r3, [ip], #4
 800c972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c976:	d2db      	bcs.n	800c930 <quorem+0x44>
 800c978:	f855 300b 	ldr.w	r3, [r5, fp]
 800c97c:	b92b      	cbnz	r3, 800c98a <quorem+0x9e>
 800c97e:	9b01      	ldr	r3, [sp, #4]
 800c980:	3b04      	subs	r3, #4
 800c982:	429d      	cmp	r5, r3
 800c984:	461a      	mov	r2, r3
 800c986:	d32e      	bcc.n	800c9e6 <quorem+0xfa>
 800c988:	613c      	str	r4, [r7, #16]
 800c98a:	4638      	mov	r0, r7
 800c98c:	f001 ff2c 	bl	800e7e8 <__mcmp>
 800c990:	2800      	cmp	r0, #0
 800c992:	db24      	blt.n	800c9de <quorem+0xf2>
 800c994:	3601      	adds	r6, #1
 800c996:	4628      	mov	r0, r5
 800c998:	f04f 0c00 	mov.w	ip, #0
 800c99c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9a0:	f8d0 e000 	ldr.w	lr, [r0]
 800c9a4:	b293      	uxth	r3, r2
 800c9a6:	ebac 0303 	sub.w	r3, ip, r3
 800c9aa:	0c12      	lsrs	r2, r2, #16
 800c9ac:	fa13 f38e 	uxtah	r3, r3, lr
 800c9b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c9b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9be:	45c1      	cmp	r9, r8
 800c9c0:	f840 3b04 	str.w	r3, [r0], #4
 800c9c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c9c8:	d2e8      	bcs.n	800c99c <quorem+0xb0>
 800c9ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c9ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c9d2:	b922      	cbnz	r2, 800c9de <quorem+0xf2>
 800c9d4:	3b04      	subs	r3, #4
 800c9d6:	429d      	cmp	r5, r3
 800c9d8:	461a      	mov	r2, r3
 800c9da:	d30a      	bcc.n	800c9f2 <quorem+0x106>
 800c9dc:	613c      	str	r4, [r7, #16]
 800c9de:	4630      	mov	r0, r6
 800c9e0:	b003      	add	sp, #12
 800c9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e6:	6812      	ldr	r2, [r2, #0]
 800c9e8:	3b04      	subs	r3, #4
 800c9ea:	2a00      	cmp	r2, #0
 800c9ec:	d1cc      	bne.n	800c988 <quorem+0x9c>
 800c9ee:	3c01      	subs	r4, #1
 800c9f0:	e7c7      	b.n	800c982 <quorem+0x96>
 800c9f2:	6812      	ldr	r2, [r2, #0]
 800c9f4:	3b04      	subs	r3, #4
 800c9f6:	2a00      	cmp	r2, #0
 800c9f8:	d1f0      	bne.n	800c9dc <quorem+0xf0>
 800c9fa:	3c01      	subs	r4, #1
 800c9fc:	e7eb      	b.n	800c9d6 <quorem+0xea>
 800c9fe:	2000      	movs	r0, #0
 800ca00:	e7ee      	b.n	800c9e0 <quorem+0xf4>
 800ca02:	0000      	movs	r0, r0
 800ca04:	0000      	movs	r0, r0
	...

0800ca08 <_dtoa_r>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	ed2d 8b02 	vpush	{d8}
 800ca10:	ec57 6b10 	vmov	r6, r7, d0
 800ca14:	b095      	sub	sp, #84	; 0x54
 800ca16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca1c:	9105      	str	r1, [sp, #20]
 800ca1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ca22:	4604      	mov	r4, r0
 800ca24:	9209      	str	r2, [sp, #36]	; 0x24
 800ca26:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca28:	b975      	cbnz	r5, 800ca48 <_dtoa_r+0x40>
 800ca2a:	2010      	movs	r0, #16
 800ca2c:	f001 fbec 	bl	800e208 <malloc>
 800ca30:	4602      	mov	r2, r0
 800ca32:	6260      	str	r0, [r4, #36]	; 0x24
 800ca34:	b920      	cbnz	r0, 800ca40 <_dtoa_r+0x38>
 800ca36:	4bb2      	ldr	r3, [pc, #712]	; (800cd00 <_dtoa_r+0x2f8>)
 800ca38:	21ea      	movs	r1, #234	; 0xea
 800ca3a:	48b2      	ldr	r0, [pc, #712]	; (800cd04 <_dtoa_r+0x2fc>)
 800ca3c:	f7ff ff38 	bl	800c8b0 <__assert_func>
 800ca40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca44:	6005      	str	r5, [r0, #0]
 800ca46:	60c5      	str	r5, [r0, #12]
 800ca48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca4a:	6819      	ldr	r1, [r3, #0]
 800ca4c:	b151      	cbz	r1, 800ca64 <_dtoa_r+0x5c>
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	604a      	str	r2, [r1, #4]
 800ca52:	2301      	movs	r3, #1
 800ca54:	4093      	lsls	r3, r2
 800ca56:	608b      	str	r3, [r1, #8]
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f001 fc3d 	bl	800e2d8 <_Bfree>
 800ca5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca60:	2200      	movs	r2, #0
 800ca62:	601a      	str	r2, [r3, #0]
 800ca64:	1e3b      	subs	r3, r7, #0
 800ca66:	bfb9      	ittee	lt
 800ca68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca6c:	9303      	strlt	r3, [sp, #12]
 800ca6e:	2300      	movge	r3, #0
 800ca70:	f8c8 3000 	strge.w	r3, [r8]
 800ca74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ca78:	4ba3      	ldr	r3, [pc, #652]	; (800cd08 <_dtoa_r+0x300>)
 800ca7a:	bfbc      	itt	lt
 800ca7c:	2201      	movlt	r2, #1
 800ca7e:	f8c8 2000 	strlt.w	r2, [r8]
 800ca82:	ea33 0309 	bics.w	r3, r3, r9
 800ca86:	d11b      	bne.n	800cac0 <_dtoa_r+0xb8>
 800ca88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca94:	4333      	orrs	r3, r6
 800ca96:	f000 857a 	beq.w	800d58e <_dtoa_r+0xb86>
 800ca9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca9c:	b963      	cbnz	r3, 800cab8 <_dtoa_r+0xb0>
 800ca9e:	4b9b      	ldr	r3, [pc, #620]	; (800cd0c <_dtoa_r+0x304>)
 800caa0:	e024      	b.n	800caec <_dtoa_r+0xe4>
 800caa2:	4b9b      	ldr	r3, [pc, #620]	; (800cd10 <_dtoa_r+0x308>)
 800caa4:	9300      	str	r3, [sp, #0]
 800caa6:	3308      	adds	r3, #8
 800caa8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	9800      	ldr	r0, [sp, #0]
 800caae:	b015      	add	sp, #84	; 0x54
 800cab0:	ecbd 8b02 	vpop	{d8}
 800cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab8:	4b94      	ldr	r3, [pc, #592]	; (800cd0c <_dtoa_r+0x304>)
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	3303      	adds	r3, #3
 800cabe:	e7f3      	b.n	800caa8 <_dtoa_r+0xa0>
 800cac0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cac4:	2200      	movs	r2, #0
 800cac6:	ec51 0b17 	vmov	r0, r1, d7
 800caca:	2300      	movs	r3, #0
 800cacc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cad0:	f7f4 f82a 	bl	8000b28 <__aeabi_dcmpeq>
 800cad4:	4680      	mov	r8, r0
 800cad6:	b158      	cbz	r0, 800caf0 <_dtoa_r+0xe8>
 800cad8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cada:	2301      	movs	r3, #1
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 8551 	beq.w	800d588 <_dtoa_r+0xb80>
 800cae6:	488b      	ldr	r0, [pc, #556]	; (800cd14 <_dtoa_r+0x30c>)
 800cae8:	6018      	str	r0, [r3, #0]
 800caea:	1e43      	subs	r3, r0, #1
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	e7dd      	b.n	800caac <_dtoa_r+0xa4>
 800caf0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800caf4:	aa12      	add	r2, sp, #72	; 0x48
 800caf6:	a913      	add	r1, sp, #76	; 0x4c
 800caf8:	4620      	mov	r0, r4
 800cafa:	f001 ff95 	bl	800ea28 <__d2b>
 800cafe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb02:	4683      	mov	fp, r0
 800cb04:	2d00      	cmp	r5, #0
 800cb06:	d07c      	beq.n	800cc02 <_dtoa_r+0x1fa>
 800cb08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb0a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cb0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb12:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cb16:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cb1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cb1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb22:	4b7d      	ldr	r3, [pc, #500]	; (800cd18 <_dtoa_r+0x310>)
 800cb24:	2200      	movs	r2, #0
 800cb26:	4630      	mov	r0, r6
 800cb28:	4639      	mov	r1, r7
 800cb2a:	f7f3 fbdd 	bl	80002e8 <__aeabi_dsub>
 800cb2e:	a36e      	add	r3, pc, #440	; (adr r3, 800cce8 <_dtoa_r+0x2e0>)
 800cb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb34:	f7f3 fd90 	bl	8000658 <__aeabi_dmul>
 800cb38:	a36d      	add	r3, pc, #436	; (adr r3, 800ccf0 <_dtoa_r+0x2e8>)
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	f7f3 fbd5 	bl	80002ec <__adddf3>
 800cb42:	4606      	mov	r6, r0
 800cb44:	4628      	mov	r0, r5
 800cb46:	460f      	mov	r7, r1
 800cb48:	f7f3 fd1c 	bl	8000584 <__aeabi_i2d>
 800cb4c:	a36a      	add	r3, pc, #424	; (adr r3, 800ccf8 <_dtoa_r+0x2f0>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fd81 	bl	8000658 <__aeabi_dmul>
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	f7f3 fbc5 	bl	80002ec <__adddf3>
 800cb62:	4606      	mov	r6, r0
 800cb64:	460f      	mov	r7, r1
 800cb66:	f7f4 f827 	bl	8000bb8 <__aeabi_d2iz>
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4682      	mov	sl, r0
 800cb6e:	2300      	movs	r3, #0
 800cb70:	4630      	mov	r0, r6
 800cb72:	4639      	mov	r1, r7
 800cb74:	f7f3 ffe2 	bl	8000b3c <__aeabi_dcmplt>
 800cb78:	b148      	cbz	r0, 800cb8e <_dtoa_r+0x186>
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	f7f3 fd02 	bl	8000584 <__aeabi_i2d>
 800cb80:	4632      	mov	r2, r6
 800cb82:	463b      	mov	r3, r7
 800cb84:	f7f3 ffd0 	bl	8000b28 <__aeabi_dcmpeq>
 800cb88:	b908      	cbnz	r0, 800cb8e <_dtoa_r+0x186>
 800cb8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb8e:	f1ba 0f16 	cmp.w	sl, #22
 800cb92:	d854      	bhi.n	800cc3e <_dtoa_r+0x236>
 800cb94:	4b61      	ldr	r3, [pc, #388]	; (800cd1c <_dtoa_r+0x314>)
 800cb96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cba2:	f7f3 ffcb 	bl	8000b3c <__aeabi_dcmplt>
 800cba6:	2800      	cmp	r0, #0
 800cba8:	d04b      	beq.n	800cc42 <_dtoa_r+0x23a>
 800cbaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbae:	2300      	movs	r3, #0
 800cbb0:	930e      	str	r3, [sp, #56]	; 0x38
 800cbb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cbb4:	1b5d      	subs	r5, r3, r5
 800cbb6:	1e6b      	subs	r3, r5, #1
 800cbb8:	9304      	str	r3, [sp, #16]
 800cbba:	bf43      	ittte	mi
 800cbbc:	2300      	movmi	r3, #0
 800cbbe:	f1c5 0801 	rsbmi	r8, r5, #1
 800cbc2:	9304      	strmi	r3, [sp, #16]
 800cbc4:	f04f 0800 	movpl.w	r8, #0
 800cbc8:	f1ba 0f00 	cmp.w	sl, #0
 800cbcc:	db3b      	blt.n	800cc46 <_dtoa_r+0x23e>
 800cbce:	9b04      	ldr	r3, [sp, #16]
 800cbd0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cbd4:	4453      	add	r3, sl
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	2300      	movs	r3, #0
 800cbda:	9306      	str	r3, [sp, #24]
 800cbdc:	9b05      	ldr	r3, [sp, #20]
 800cbde:	2b09      	cmp	r3, #9
 800cbe0:	d869      	bhi.n	800ccb6 <_dtoa_r+0x2ae>
 800cbe2:	2b05      	cmp	r3, #5
 800cbe4:	bfc4      	itt	gt
 800cbe6:	3b04      	subgt	r3, #4
 800cbe8:	9305      	strgt	r3, [sp, #20]
 800cbea:	9b05      	ldr	r3, [sp, #20]
 800cbec:	f1a3 0302 	sub.w	r3, r3, #2
 800cbf0:	bfcc      	ite	gt
 800cbf2:	2500      	movgt	r5, #0
 800cbf4:	2501      	movle	r5, #1
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d869      	bhi.n	800ccce <_dtoa_r+0x2c6>
 800cbfa:	e8df f003 	tbb	[pc, r3]
 800cbfe:	4e2c      	.short	0x4e2c
 800cc00:	5a4c      	.short	0x5a4c
 800cc02:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cc06:	441d      	add	r5, r3
 800cc08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	bfc1      	itttt	gt
 800cc10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc14:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cc18:	fa09 f303 	lslgt.w	r3, r9, r3
 800cc1c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cc20:	bfda      	itte	le
 800cc22:	f1c3 0320 	rsble	r3, r3, #32
 800cc26:	fa06 f003 	lslle.w	r0, r6, r3
 800cc2a:	4318      	orrgt	r0, r3
 800cc2c:	f7f3 fc9a 	bl	8000564 <__aeabi_ui2d>
 800cc30:	2301      	movs	r3, #1
 800cc32:	4606      	mov	r6, r0
 800cc34:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cc38:	3d01      	subs	r5, #1
 800cc3a:	9310      	str	r3, [sp, #64]	; 0x40
 800cc3c:	e771      	b.n	800cb22 <_dtoa_r+0x11a>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e7b6      	b.n	800cbb0 <_dtoa_r+0x1a8>
 800cc42:	900e      	str	r0, [sp, #56]	; 0x38
 800cc44:	e7b5      	b.n	800cbb2 <_dtoa_r+0x1aa>
 800cc46:	f1ca 0300 	rsb	r3, sl, #0
 800cc4a:	9306      	str	r3, [sp, #24]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	eba8 080a 	sub.w	r8, r8, sl
 800cc52:	930d      	str	r3, [sp, #52]	; 0x34
 800cc54:	e7c2      	b.n	800cbdc <_dtoa_r+0x1d4>
 800cc56:	2300      	movs	r3, #0
 800cc58:	9308      	str	r3, [sp, #32]
 800cc5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dc39      	bgt.n	800ccd4 <_dtoa_r+0x2cc>
 800cc60:	f04f 0901 	mov.w	r9, #1
 800cc64:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc68:	464b      	mov	r3, r9
 800cc6a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cc6e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc70:	2200      	movs	r2, #0
 800cc72:	6042      	str	r2, [r0, #4]
 800cc74:	2204      	movs	r2, #4
 800cc76:	f102 0614 	add.w	r6, r2, #20
 800cc7a:	429e      	cmp	r6, r3
 800cc7c:	6841      	ldr	r1, [r0, #4]
 800cc7e:	d92f      	bls.n	800cce0 <_dtoa_r+0x2d8>
 800cc80:	4620      	mov	r0, r4
 800cc82:	f001 fae9 	bl	800e258 <_Balloc>
 800cc86:	9000      	str	r0, [sp, #0]
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d14b      	bne.n	800cd24 <_dtoa_r+0x31c>
 800cc8c:	4b24      	ldr	r3, [pc, #144]	; (800cd20 <_dtoa_r+0x318>)
 800cc8e:	4602      	mov	r2, r0
 800cc90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc94:	e6d1      	b.n	800ca3a <_dtoa_r+0x32>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e7de      	b.n	800cc58 <_dtoa_r+0x250>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	9308      	str	r3, [sp, #32]
 800cc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cca0:	eb0a 0903 	add.w	r9, sl, r3
 800cca4:	f109 0301 	add.w	r3, r9, #1
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	9301      	str	r3, [sp, #4]
 800ccac:	bfb8      	it	lt
 800ccae:	2301      	movlt	r3, #1
 800ccb0:	e7dd      	b.n	800cc6e <_dtoa_r+0x266>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e7f2      	b.n	800cc9c <_dtoa_r+0x294>
 800ccb6:	2501      	movs	r5, #1
 800ccb8:	2300      	movs	r3, #0
 800ccba:	9305      	str	r3, [sp, #20]
 800ccbc:	9508      	str	r5, [sp, #32]
 800ccbe:	f04f 39ff 	mov.w	r9, #4294967295
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccc8:	2312      	movs	r3, #18
 800ccca:	9209      	str	r2, [sp, #36]	; 0x24
 800cccc:	e7cf      	b.n	800cc6e <_dtoa_r+0x266>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	9308      	str	r3, [sp, #32]
 800ccd2:	e7f4      	b.n	800ccbe <_dtoa_r+0x2b6>
 800ccd4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ccd8:	f8cd 9004 	str.w	r9, [sp, #4]
 800ccdc:	464b      	mov	r3, r9
 800ccde:	e7c6      	b.n	800cc6e <_dtoa_r+0x266>
 800cce0:	3101      	adds	r1, #1
 800cce2:	6041      	str	r1, [r0, #4]
 800cce4:	0052      	lsls	r2, r2, #1
 800cce6:	e7c6      	b.n	800cc76 <_dtoa_r+0x26e>
 800cce8:	636f4361 	.word	0x636f4361
 800ccec:	3fd287a7 	.word	0x3fd287a7
 800ccf0:	8b60c8b3 	.word	0x8b60c8b3
 800ccf4:	3fc68a28 	.word	0x3fc68a28
 800ccf8:	509f79fb 	.word	0x509f79fb
 800ccfc:	3fd34413 	.word	0x3fd34413
 800cd00:	08010d38 	.word	0x08010d38
 800cd04:	08010efa 	.word	0x08010efa
 800cd08:	7ff00000 	.word	0x7ff00000
 800cd0c:	08010ef6 	.word	0x08010ef6
 800cd10:	08010eed 	.word	0x08010eed
 800cd14:	08010cc5 	.word	0x08010cc5
 800cd18:	3ff80000 	.word	0x3ff80000
 800cd1c:	080110d8 	.word	0x080110d8
 800cd20:	08010f59 	.word	0x08010f59
 800cd24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd26:	9a00      	ldr	r2, [sp, #0]
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	9b01      	ldr	r3, [sp, #4]
 800cd2c:	2b0e      	cmp	r3, #14
 800cd2e:	f200 80ad 	bhi.w	800ce8c <_dtoa_r+0x484>
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	f000 80aa 	beq.w	800ce8c <_dtoa_r+0x484>
 800cd38:	f1ba 0f00 	cmp.w	sl, #0
 800cd3c:	dd36      	ble.n	800cdac <_dtoa_r+0x3a4>
 800cd3e:	4ac3      	ldr	r2, [pc, #780]	; (800d04c <_dtoa_r+0x644>)
 800cd40:	f00a 030f 	and.w	r3, sl, #15
 800cd44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd48:	ed93 7b00 	vldr	d7, [r3]
 800cd4c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cd50:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cd54:	eeb0 8a47 	vmov.f32	s16, s14
 800cd58:	eef0 8a67 	vmov.f32	s17, s15
 800cd5c:	d016      	beq.n	800cd8c <_dtoa_r+0x384>
 800cd5e:	4bbc      	ldr	r3, [pc, #752]	; (800d050 <_dtoa_r+0x648>)
 800cd60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd68:	f7f3 fda0 	bl	80008ac <__aeabi_ddiv>
 800cd6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd70:	f007 070f 	and.w	r7, r7, #15
 800cd74:	2503      	movs	r5, #3
 800cd76:	4eb6      	ldr	r6, [pc, #728]	; (800d050 <_dtoa_r+0x648>)
 800cd78:	b957      	cbnz	r7, 800cd90 <_dtoa_r+0x388>
 800cd7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd7e:	ec53 2b18 	vmov	r2, r3, d8
 800cd82:	f7f3 fd93 	bl	80008ac <__aeabi_ddiv>
 800cd86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd8a:	e029      	b.n	800cde0 <_dtoa_r+0x3d8>
 800cd8c:	2502      	movs	r5, #2
 800cd8e:	e7f2      	b.n	800cd76 <_dtoa_r+0x36e>
 800cd90:	07f9      	lsls	r1, r7, #31
 800cd92:	d508      	bpl.n	800cda6 <_dtoa_r+0x39e>
 800cd94:	ec51 0b18 	vmov	r0, r1, d8
 800cd98:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd9c:	f7f3 fc5c 	bl	8000658 <__aeabi_dmul>
 800cda0:	ec41 0b18 	vmov	d8, r0, r1
 800cda4:	3501      	adds	r5, #1
 800cda6:	107f      	asrs	r7, r7, #1
 800cda8:	3608      	adds	r6, #8
 800cdaa:	e7e5      	b.n	800cd78 <_dtoa_r+0x370>
 800cdac:	f000 80a6 	beq.w	800cefc <_dtoa_r+0x4f4>
 800cdb0:	f1ca 0600 	rsb	r6, sl, #0
 800cdb4:	4ba5      	ldr	r3, [pc, #660]	; (800d04c <_dtoa_r+0x644>)
 800cdb6:	4fa6      	ldr	r7, [pc, #664]	; (800d050 <_dtoa_r+0x648>)
 800cdb8:	f006 020f 	and.w	r2, r6, #15
 800cdbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdc8:	f7f3 fc46 	bl	8000658 <__aeabi_dmul>
 800cdcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdd0:	1136      	asrs	r6, r6, #4
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	2502      	movs	r5, #2
 800cdd6:	2e00      	cmp	r6, #0
 800cdd8:	f040 8085 	bne.w	800cee6 <_dtoa_r+0x4de>
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1d2      	bne.n	800cd86 <_dtoa_r+0x37e>
 800cde0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 808c 	beq.w	800cf00 <_dtoa_r+0x4f8>
 800cde8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cdec:	4b99      	ldr	r3, [pc, #612]	; (800d054 <_dtoa_r+0x64c>)
 800cdee:	2200      	movs	r2, #0
 800cdf0:	4630      	mov	r0, r6
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	f7f3 fea2 	bl	8000b3c <__aeabi_dcmplt>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f000 8081 	beq.w	800cf00 <_dtoa_r+0x4f8>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d07d      	beq.n	800cf00 <_dtoa_r+0x4f8>
 800ce04:	f1b9 0f00 	cmp.w	r9, #0
 800ce08:	dd3c      	ble.n	800ce84 <_dtoa_r+0x47c>
 800ce0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce0e:	9307      	str	r3, [sp, #28]
 800ce10:	2200      	movs	r2, #0
 800ce12:	4b91      	ldr	r3, [pc, #580]	; (800d058 <_dtoa_r+0x650>)
 800ce14:	4630      	mov	r0, r6
 800ce16:	4639      	mov	r1, r7
 800ce18:	f7f3 fc1e 	bl	8000658 <__aeabi_dmul>
 800ce1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce20:	3501      	adds	r5, #1
 800ce22:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ce26:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce2a:	4628      	mov	r0, r5
 800ce2c:	f7f3 fbaa 	bl	8000584 <__aeabi_i2d>
 800ce30:	4632      	mov	r2, r6
 800ce32:	463b      	mov	r3, r7
 800ce34:	f7f3 fc10 	bl	8000658 <__aeabi_dmul>
 800ce38:	4b88      	ldr	r3, [pc, #544]	; (800d05c <_dtoa_r+0x654>)
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f7f3 fa56 	bl	80002ec <__adddf3>
 800ce40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ce44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce48:	9303      	str	r3, [sp, #12]
 800ce4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d15c      	bne.n	800cf0a <_dtoa_r+0x502>
 800ce50:	4b83      	ldr	r3, [pc, #524]	; (800d060 <_dtoa_r+0x658>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	4630      	mov	r0, r6
 800ce56:	4639      	mov	r1, r7
 800ce58:	f7f3 fa46 	bl	80002e8 <__aeabi_dsub>
 800ce5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce60:	4606      	mov	r6, r0
 800ce62:	460f      	mov	r7, r1
 800ce64:	f7f3 fe88 	bl	8000b78 <__aeabi_dcmpgt>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	f040 8296 	bne.w	800d39a <_dtoa_r+0x992>
 800ce6e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ce72:	4630      	mov	r0, r6
 800ce74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce78:	4639      	mov	r1, r7
 800ce7a:	f7f3 fe5f 	bl	8000b3c <__aeabi_dcmplt>
 800ce7e:	2800      	cmp	r0, #0
 800ce80:	f040 8288 	bne.w	800d394 <_dtoa_r+0x98c>
 800ce84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f2c0 8158 	blt.w	800d144 <_dtoa_r+0x73c>
 800ce94:	f1ba 0f0e 	cmp.w	sl, #14
 800ce98:	f300 8154 	bgt.w	800d144 <_dtoa_r+0x73c>
 800ce9c:	4b6b      	ldr	r3, [pc, #428]	; (800d04c <_dtoa_r+0x644>)
 800ce9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f280 80e3 	bge.w	800d074 <_dtoa_r+0x66c>
 800ceae:	9b01      	ldr	r3, [sp, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f300 80df 	bgt.w	800d074 <_dtoa_r+0x66c>
 800ceb6:	f040 826d 	bne.w	800d394 <_dtoa_r+0x98c>
 800ceba:	4b69      	ldr	r3, [pc, #420]	; (800d060 <_dtoa_r+0x658>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	4640      	mov	r0, r8
 800cec0:	4649      	mov	r1, r9
 800cec2:	f7f3 fbc9 	bl	8000658 <__aeabi_dmul>
 800cec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ceca:	f7f3 fe4b 	bl	8000b64 <__aeabi_dcmpge>
 800cece:	9e01      	ldr	r6, [sp, #4]
 800ced0:	4637      	mov	r7, r6
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f040 8243 	bne.w	800d35e <_dtoa_r+0x956>
 800ced8:	9d00      	ldr	r5, [sp, #0]
 800ceda:	2331      	movs	r3, #49	; 0x31
 800cedc:	f805 3b01 	strb.w	r3, [r5], #1
 800cee0:	f10a 0a01 	add.w	sl, sl, #1
 800cee4:	e23f      	b.n	800d366 <_dtoa_r+0x95e>
 800cee6:	07f2      	lsls	r2, r6, #31
 800cee8:	d505      	bpl.n	800cef6 <_dtoa_r+0x4ee>
 800ceea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceee:	f7f3 fbb3 	bl	8000658 <__aeabi_dmul>
 800cef2:	3501      	adds	r5, #1
 800cef4:	2301      	movs	r3, #1
 800cef6:	1076      	asrs	r6, r6, #1
 800cef8:	3708      	adds	r7, #8
 800cefa:	e76c      	b.n	800cdd6 <_dtoa_r+0x3ce>
 800cefc:	2502      	movs	r5, #2
 800cefe:	e76f      	b.n	800cde0 <_dtoa_r+0x3d8>
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	f8cd a01c 	str.w	sl, [sp, #28]
 800cf06:	930c      	str	r3, [sp, #48]	; 0x30
 800cf08:	e78d      	b.n	800ce26 <_dtoa_r+0x41e>
 800cf0a:	9900      	ldr	r1, [sp, #0]
 800cf0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cf0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf10:	4b4e      	ldr	r3, [pc, #312]	; (800d04c <_dtoa_r+0x644>)
 800cf12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf16:	4401      	add	r1, r0
 800cf18:	9102      	str	r1, [sp, #8]
 800cf1a:	9908      	ldr	r1, [sp, #32]
 800cf1c:	eeb0 8a47 	vmov.f32	s16, s14
 800cf20:	eef0 8a67 	vmov.f32	s17, s15
 800cf24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf2c:	2900      	cmp	r1, #0
 800cf2e:	d045      	beq.n	800cfbc <_dtoa_r+0x5b4>
 800cf30:	494c      	ldr	r1, [pc, #304]	; (800d064 <_dtoa_r+0x65c>)
 800cf32:	2000      	movs	r0, #0
 800cf34:	f7f3 fcba 	bl	80008ac <__aeabi_ddiv>
 800cf38:	ec53 2b18 	vmov	r2, r3, d8
 800cf3c:	f7f3 f9d4 	bl	80002e8 <__aeabi_dsub>
 800cf40:	9d00      	ldr	r5, [sp, #0]
 800cf42:	ec41 0b18 	vmov	d8, r0, r1
 800cf46:	4639      	mov	r1, r7
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7f3 fe35 	bl	8000bb8 <__aeabi_d2iz>
 800cf4e:	900c      	str	r0, [sp, #48]	; 0x30
 800cf50:	f7f3 fb18 	bl	8000584 <__aeabi_i2d>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4630      	mov	r0, r6
 800cf5a:	4639      	mov	r1, r7
 800cf5c:	f7f3 f9c4 	bl	80002e8 <__aeabi_dsub>
 800cf60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf62:	3330      	adds	r3, #48	; 0x30
 800cf64:	f805 3b01 	strb.w	r3, [r5], #1
 800cf68:	ec53 2b18 	vmov	r2, r3, d8
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	460f      	mov	r7, r1
 800cf70:	f7f3 fde4 	bl	8000b3c <__aeabi_dcmplt>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d165      	bne.n	800d044 <_dtoa_r+0x63c>
 800cf78:	4632      	mov	r2, r6
 800cf7a:	463b      	mov	r3, r7
 800cf7c:	4935      	ldr	r1, [pc, #212]	; (800d054 <_dtoa_r+0x64c>)
 800cf7e:	2000      	movs	r0, #0
 800cf80:	f7f3 f9b2 	bl	80002e8 <__aeabi_dsub>
 800cf84:	ec53 2b18 	vmov	r2, r3, d8
 800cf88:	f7f3 fdd8 	bl	8000b3c <__aeabi_dcmplt>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	f040 80b9 	bne.w	800d104 <_dtoa_r+0x6fc>
 800cf92:	9b02      	ldr	r3, [sp, #8]
 800cf94:	429d      	cmp	r5, r3
 800cf96:	f43f af75 	beq.w	800ce84 <_dtoa_r+0x47c>
 800cf9a:	4b2f      	ldr	r3, [pc, #188]	; (800d058 <_dtoa_r+0x650>)
 800cf9c:	ec51 0b18 	vmov	r0, r1, d8
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f7f3 fb59 	bl	8000658 <__aeabi_dmul>
 800cfa6:	4b2c      	ldr	r3, [pc, #176]	; (800d058 <_dtoa_r+0x650>)
 800cfa8:	ec41 0b18 	vmov	d8, r0, r1
 800cfac:	2200      	movs	r2, #0
 800cfae:	4630      	mov	r0, r6
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	f7f3 fb51 	bl	8000658 <__aeabi_dmul>
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	460f      	mov	r7, r1
 800cfba:	e7c4      	b.n	800cf46 <_dtoa_r+0x53e>
 800cfbc:	ec51 0b17 	vmov	r0, r1, d7
 800cfc0:	f7f3 fb4a 	bl	8000658 <__aeabi_dmul>
 800cfc4:	9b02      	ldr	r3, [sp, #8]
 800cfc6:	9d00      	ldr	r5, [sp, #0]
 800cfc8:	930c      	str	r3, [sp, #48]	; 0x30
 800cfca:	ec41 0b18 	vmov	d8, r0, r1
 800cfce:	4639      	mov	r1, r7
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7f3 fdf1 	bl	8000bb8 <__aeabi_d2iz>
 800cfd6:	9011      	str	r0, [sp, #68]	; 0x44
 800cfd8:	f7f3 fad4 	bl	8000584 <__aeabi_i2d>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 f980 	bl	80002e8 <__aeabi_dsub>
 800cfe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfea:	3330      	adds	r3, #48	; 0x30
 800cfec:	f805 3b01 	strb.w	r3, [r5], #1
 800cff0:	9b02      	ldr	r3, [sp, #8]
 800cff2:	429d      	cmp	r5, r3
 800cff4:	4606      	mov	r6, r0
 800cff6:	460f      	mov	r7, r1
 800cff8:	f04f 0200 	mov.w	r2, #0
 800cffc:	d134      	bne.n	800d068 <_dtoa_r+0x660>
 800cffe:	4b19      	ldr	r3, [pc, #100]	; (800d064 <_dtoa_r+0x65c>)
 800d000:	ec51 0b18 	vmov	r0, r1, d8
 800d004:	f7f3 f972 	bl	80002ec <__adddf3>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	4630      	mov	r0, r6
 800d00e:	4639      	mov	r1, r7
 800d010:	f7f3 fdb2 	bl	8000b78 <__aeabi_dcmpgt>
 800d014:	2800      	cmp	r0, #0
 800d016:	d175      	bne.n	800d104 <_dtoa_r+0x6fc>
 800d018:	ec53 2b18 	vmov	r2, r3, d8
 800d01c:	4911      	ldr	r1, [pc, #68]	; (800d064 <_dtoa_r+0x65c>)
 800d01e:	2000      	movs	r0, #0
 800d020:	f7f3 f962 	bl	80002e8 <__aeabi_dsub>
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	4630      	mov	r0, r6
 800d02a:	4639      	mov	r1, r7
 800d02c:	f7f3 fd86 	bl	8000b3c <__aeabi_dcmplt>
 800d030:	2800      	cmp	r0, #0
 800d032:	f43f af27 	beq.w	800ce84 <_dtoa_r+0x47c>
 800d036:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d038:	1e6b      	subs	r3, r5, #1
 800d03a:	930c      	str	r3, [sp, #48]	; 0x30
 800d03c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d040:	2b30      	cmp	r3, #48	; 0x30
 800d042:	d0f8      	beq.n	800d036 <_dtoa_r+0x62e>
 800d044:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d048:	e04a      	b.n	800d0e0 <_dtoa_r+0x6d8>
 800d04a:	bf00      	nop
 800d04c:	080110d8 	.word	0x080110d8
 800d050:	080110b0 	.word	0x080110b0
 800d054:	3ff00000 	.word	0x3ff00000
 800d058:	40240000 	.word	0x40240000
 800d05c:	401c0000 	.word	0x401c0000
 800d060:	40140000 	.word	0x40140000
 800d064:	3fe00000 	.word	0x3fe00000
 800d068:	4baf      	ldr	r3, [pc, #700]	; (800d328 <_dtoa_r+0x920>)
 800d06a:	f7f3 faf5 	bl	8000658 <__aeabi_dmul>
 800d06e:	4606      	mov	r6, r0
 800d070:	460f      	mov	r7, r1
 800d072:	e7ac      	b.n	800cfce <_dtoa_r+0x5c6>
 800d074:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d078:	9d00      	ldr	r5, [sp, #0]
 800d07a:	4642      	mov	r2, r8
 800d07c:	464b      	mov	r3, r9
 800d07e:	4630      	mov	r0, r6
 800d080:	4639      	mov	r1, r7
 800d082:	f7f3 fc13 	bl	80008ac <__aeabi_ddiv>
 800d086:	f7f3 fd97 	bl	8000bb8 <__aeabi_d2iz>
 800d08a:	9002      	str	r0, [sp, #8]
 800d08c:	f7f3 fa7a 	bl	8000584 <__aeabi_i2d>
 800d090:	4642      	mov	r2, r8
 800d092:	464b      	mov	r3, r9
 800d094:	f7f3 fae0 	bl	8000658 <__aeabi_dmul>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4630      	mov	r0, r6
 800d09e:	4639      	mov	r1, r7
 800d0a0:	f7f3 f922 	bl	80002e8 <__aeabi_dsub>
 800d0a4:	9e02      	ldr	r6, [sp, #8]
 800d0a6:	9f01      	ldr	r7, [sp, #4]
 800d0a8:	3630      	adds	r6, #48	; 0x30
 800d0aa:	f805 6b01 	strb.w	r6, [r5], #1
 800d0ae:	9e00      	ldr	r6, [sp, #0]
 800d0b0:	1bae      	subs	r6, r5, r6
 800d0b2:	42b7      	cmp	r7, r6
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	460b      	mov	r3, r1
 800d0b8:	d137      	bne.n	800d12a <_dtoa_r+0x722>
 800d0ba:	f7f3 f917 	bl	80002ec <__adddf3>
 800d0be:	4642      	mov	r2, r8
 800d0c0:	464b      	mov	r3, r9
 800d0c2:	4606      	mov	r6, r0
 800d0c4:	460f      	mov	r7, r1
 800d0c6:	f7f3 fd57 	bl	8000b78 <__aeabi_dcmpgt>
 800d0ca:	b9c8      	cbnz	r0, 800d100 <_dtoa_r+0x6f8>
 800d0cc:	4642      	mov	r2, r8
 800d0ce:	464b      	mov	r3, r9
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f7f3 fd28 	bl	8000b28 <__aeabi_dcmpeq>
 800d0d8:	b110      	cbz	r0, 800d0e0 <_dtoa_r+0x6d8>
 800d0da:	9b02      	ldr	r3, [sp, #8]
 800d0dc:	07d9      	lsls	r1, r3, #31
 800d0de:	d40f      	bmi.n	800d100 <_dtoa_r+0x6f8>
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	4659      	mov	r1, fp
 800d0e4:	f001 f8f8 	bl	800e2d8 <_Bfree>
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	702b      	strb	r3, [r5, #0]
 800d0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0ee:	f10a 0001 	add.w	r0, sl, #1
 800d0f2:	6018      	str	r0, [r3, #0]
 800d0f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f43f acd8 	beq.w	800caac <_dtoa_r+0xa4>
 800d0fc:	601d      	str	r5, [r3, #0]
 800d0fe:	e4d5      	b.n	800caac <_dtoa_r+0xa4>
 800d100:	f8cd a01c 	str.w	sl, [sp, #28]
 800d104:	462b      	mov	r3, r5
 800d106:	461d      	mov	r5, r3
 800d108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d10c:	2a39      	cmp	r2, #57	; 0x39
 800d10e:	d108      	bne.n	800d122 <_dtoa_r+0x71a>
 800d110:	9a00      	ldr	r2, [sp, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d1f7      	bne.n	800d106 <_dtoa_r+0x6fe>
 800d116:	9a07      	ldr	r2, [sp, #28]
 800d118:	9900      	ldr	r1, [sp, #0]
 800d11a:	3201      	adds	r2, #1
 800d11c:	9207      	str	r2, [sp, #28]
 800d11e:	2230      	movs	r2, #48	; 0x30
 800d120:	700a      	strb	r2, [r1, #0]
 800d122:	781a      	ldrb	r2, [r3, #0]
 800d124:	3201      	adds	r2, #1
 800d126:	701a      	strb	r2, [r3, #0]
 800d128:	e78c      	b.n	800d044 <_dtoa_r+0x63c>
 800d12a:	4b7f      	ldr	r3, [pc, #508]	; (800d328 <_dtoa_r+0x920>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	f7f3 fa93 	bl	8000658 <__aeabi_dmul>
 800d132:	2200      	movs	r2, #0
 800d134:	2300      	movs	r3, #0
 800d136:	4606      	mov	r6, r0
 800d138:	460f      	mov	r7, r1
 800d13a:	f7f3 fcf5 	bl	8000b28 <__aeabi_dcmpeq>
 800d13e:	2800      	cmp	r0, #0
 800d140:	d09b      	beq.n	800d07a <_dtoa_r+0x672>
 800d142:	e7cd      	b.n	800d0e0 <_dtoa_r+0x6d8>
 800d144:	9a08      	ldr	r2, [sp, #32]
 800d146:	2a00      	cmp	r2, #0
 800d148:	f000 80c4 	beq.w	800d2d4 <_dtoa_r+0x8cc>
 800d14c:	9a05      	ldr	r2, [sp, #20]
 800d14e:	2a01      	cmp	r2, #1
 800d150:	f300 80a8 	bgt.w	800d2a4 <_dtoa_r+0x89c>
 800d154:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d156:	2a00      	cmp	r2, #0
 800d158:	f000 80a0 	beq.w	800d29c <_dtoa_r+0x894>
 800d15c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d160:	9e06      	ldr	r6, [sp, #24]
 800d162:	4645      	mov	r5, r8
 800d164:	9a04      	ldr	r2, [sp, #16]
 800d166:	2101      	movs	r1, #1
 800d168:	441a      	add	r2, r3
 800d16a:	4620      	mov	r0, r4
 800d16c:	4498      	add	r8, r3
 800d16e:	9204      	str	r2, [sp, #16]
 800d170:	f001 f9b8 	bl	800e4e4 <__i2b>
 800d174:	4607      	mov	r7, r0
 800d176:	2d00      	cmp	r5, #0
 800d178:	dd0b      	ble.n	800d192 <_dtoa_r+0x78a>
 800d17a:	9b04      	ldr	r3, [sp, #16]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	dd08      	ble.n	800d192 <_dtoa_r+0x78a>
 800d180:	42ab      	cmp	r3, r5
 800d182:	9a04      	ldr	r2, [sp, #16]
 800d184:	bfa8      	it	ge
 800d186:	462b      	movge	r3, r5
 800d188:	eba8 0803 	sub.w	r8, r8, r3
 800d18c:	1aed      	subs	r5, r5, r3
 800d18e:	1ad3      	subs	r3, r2, r3
 800d190:	9304      	str	r3, [sp, #16]
 800d192:	9b06      	ldr	r3, [sp, #24]
 800d194:	b1fb      	cbz	r3, 800d1d6 <_dtoa_r+0x7ce>
 800d196:	9b08      	ldr	r3, [sp, #32]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f000 809f 	beq.w	800d2dc <_dtoa_r+0x8d4>
 800d19e:	2e00      	cmp	r6, #0
 800d1a0:	dd11      	ble.n	800d1c6 <_dtoa_r+0x7be>
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	4632      	mov	r2, r6
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f001 fa58 	bl	800e65c <__pow5mult>
 800d1ac:	465a      	mov	r2, fp
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f001 f9ac 	bl	800e510 <__multiply>
 800d1b8:	4659      	mov	r1, fp
 800d1ba:	9007      	str	r0, [sp, #28]
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f001 f88b 	bl	800e2d8 <_Bfree>
 800d1c2:	9b07      	ldr	r3, [sp, #28]
 800d1c4:	469b      	mov	fp, r3
 800d1c6:	9b06      	ldr	r3, [sp, #24]
 800d1c8:	1b9a      	subs	r2, r3, r6
 800d1ca:	d004      	beq.n	800d1d6 <_dtoa_r+0x7ce>
 800d1cc:	4659      	mov	r1, fp
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f001 fa44 	bl	800e65c <__pow5mult>
 800d1d4:	4683      	mov	fp, r0
 800d1d6:	2101      	movs	r1, #1
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f001 f983 	bl	800e4e4 <__i2b>
 800d1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	4606      	mov	r6, r0
 800d1e4:	dd7c      	ble.n	800d2e0 <_dtoa_r+0x8d8>
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	4601      	mov	r1, r0
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f001 fa36 	bl	800e65c <__pow5mult>
 800d1f0:	9b05      	ldr	r3, [sp, #20]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	dd76      	ble.n	800d2e6 <_dtoa_r+0x8de>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9306      	str	r3, [sp, #24]
 800d1fc:	6933      	ldr	r3, [r6, #16]
 800d1fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d202:	6918      	ldr	r0, [r3, #16]
 800d204:	f001 f91e 	bl	800e444 <__hi0bits>
 800d208:	f1c0 0020 	rsb	r0, r0, #32
 800d20c:	9b04      	ldr	r3, [sp, #16]
 800d20e:	4418      	add	r0, r3
 800d210:	f010 001f 	ands.w	r0, r0, #31
 800d214:	f000 8086 	beq.w	800d324 <_dtoa_r+0x91c>
 800d218:	f1c0 0320 	rsb	r3, r0, #32
 800d21c:	2b04      	cmp	r3, #4
 800d21e:	dd7f      	ble.n	800d320 <_dtoa_r+0x918>
 800d220:	f1c0 001c 	rsb	r0, r0, #28
 800d224:	9b04      	ldr	r3, [sp, #16]
 800d226:	4403      	add	r3, r0
 800d228:	4480      	add	r8, r0
 800d22a:	4405      	add	r5, r0
 800d22c:	9304      	str	r3, [sp, #16]
 800d22e:	f1b8 0f00 	cmp.w	r8, #0
 800d232:	dd05      	ble.n	800d240 <_dtoa_r+0x838>
 800d234:	4659      	mov	r1, fp
 800d236:	4642      	mov	r2, r8
 800d238:	4620      	mov	r0, r4
 800d23a:	f001 fa69 	bl	800e710 <__lshift>
 800d23e:	4683      	mov	fp, r0
 800d240:	9b04      	ldr	r3, [sp, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	dd05      	ble.n	800d252 <_dtoa_r+0x84a>
 800d246:	4631      	mov	r1, r6
 800d248:	461a      	mov	r2, r3
 800d24a:	4620      	mov	r0, r4
 800d24c:	f001 fa60 	bl	800e710 <__lshift>
 800d250:	4606      	mov	r6, r0
 800d252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d254:	2b00      	cmp	r3, #0
 800d256:	d069      	beq.n	800d32c <_dtoa_r+0x924>
 800d258:	4631      	mov	r1, r6
 800d25a:	4658      	mov	r0, fp
 800d25c:	f001 fac4 	bl	800e7e8 <__mcmp>
 800d260:	2800      	cmp	r0, #0
 800d262:	da63      	bge.n	800d32c <_dtoa_r+0x924>
 800d264:	2300      	movs	r3, #0
 800d266:	4659      	mov	r1, fp
 800d268:	220a      	movs	r2, #10
 800d26a:	4620      	mov	r0, r4
 800d26c:	f001 f856 	bl	800e31c <__multadd>
 800d270:	9b08      	ldr	r3, [sp, #32]
 800d272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d276:	4683      	mov	fp, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f000 818f 	beq.w	800d59c <_dtoa_r+0xb94>
 800d27e:	4639      	mov	r1, r7
 800d280:	2300      	movs	r3, #0
 800d282:	220a      	movs	r2, #10
 800d284:	4620      	mov	r0, r4
 800d286:	f001 f849 	bl	800e31c <__multadd>
 800d28a:	f1b9 0f00 	cmp.w	r9, #0
 800d28e:	4607      	mov	r7, r0
 800d290:	f300 808e 	bgt.w	800d3b0 <_dtoa_r+0x9a8>
 800d294:	9b05      	ldr	r3, [sp, #20]
 800d296:	2b02      	cmp	r3, #2
 800d298:	dc50      	bgt.n	800d33c <_dtoa_r+0x934>
 800d29a:	e089      	b.n	800d3b0 <_dtoa_r+0x9a8>
 800d29c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d29e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d2a2:	e75d      	b.n	800d160 <_dtoa_r+0x758>
 800d2a4:	9b01      	ldr	r3, [sp, #4]
 800d2a6:	1e5e      	subs	r6, r3, #1
 800d2a8:	9b06      	ldr	r3, [sp, #24]
 800d2aa:	42b3      	cmp	r3, r6
 800d2ac:	bfbf      	itttt	lt
 800d2ae:	9b06      	ldrlt	r3, [sp, #24]
 800d2b0:	9606      	strlt	r6, [sp, #24]
 800d2b2:	1af2      	sublt	r2, r6, r3
 800d2b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d2b6:	bfb6      	itet	lt
 800d2b8:	189b      	addlt	r3, r3, r2
 800d2ba:	1b9e      	subge	r6, r3, r6
 800d2bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d2be:	9b01      	ldr	r3, [sp, #4]
 800d2c0:	bfb8      	it	lt
 800d2c2:	2600      	movlt	r6, #0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bfb5      	itete	lt
 800d2c8:	eba8 0503 	sublt.w	r5, r8, r3
 800d2cc:	9b01      	ldrge	r3, [sp, #4]
 800d2ce:	2300      	movlt	r3, #0
 800d2d0:	4645      	movge	r5, r8
 800d2d2:	e747      	b.n	800d164 <_dtoa_r+0x75c>
 800d2d4:	9e06      	ldr	r6, [sp, #24]
 800d2d6:	9f08      	ldr	r7, [sp, #32]
 800d2d8:	4645      	mov	r5, r8
 800d2da:	e74c      	b.n	800d176 <_dtoa_r+0x76e>
 800d2dc:	9a06      	ldr	r2, [sp, #24]
 800d2de:	e775      	b.n	800d1cc <_dtoa_r+0x7c4>
 800d2e0:	9b05      	ldr	r3, [sp, #20]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	dc18      	bgt.n	800d318 <_dtoa_r+0x910>
 800d2e6:	9b02      	ldr	r3, [sp, #8]
 800d2e8:	b9b3      	cbnz	r3, 800d318 <_dtoa_r+0x910>
 800d2ea:	9b03      	ldr	r3, [sp, #12]
 800d2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2f0:	b9a3      	cbnz	r3, 800d31c <_dtoa_r+0x914>
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2f8:	0d1b      	lsrs	r3, r3, #20
 800d2fa:	051b      	lsls	r3, r3, #20
 800d2fc:	b12b      	cbz	r3, 800d30a <_dtoa_r+0x902>
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	3301      	adds	r3, #1
 800d302:	9304      	str	r3, [sp, #16]
 800d304:	f108 0801 	add.w	r8, r8, #1
 800d308:	2301      	movs	r3, #1
 800d30a:	9306      	str	r3, [sp, #24]
 800d30c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f47f af74 	bne.w	800d1fc <_dtoa_r+0x7f4>
 800d314:	2001      	movs	r0, #1
 800d316:	e779      	b.n	800d20c <_dtoa_r+0x804>
 800d318:	2300      	movs	r3, #0
 800d31a:	e7f6      	b.n	800d30a <_dtoa_r+0x902>
 800d31c:	9b02      	ldr	r3, [sp, #8]
 800d31e:	e7f4      	b.n	800d30a <_dtoa_r+0x902>
 800d320:	d085      	beq.n	800d22e <_dtoa_r+0x826>
 800d322:	4618      	mov	r0, r3
 800d324:	301c      	adds	r0, #28
 800d326:	e77d      	b.n	800d224 <_dtoa_r+0x81c>
 800d328:	40240000 	.word	0x40240000
 800d32c:	9b01      	ldr	r3, [sp, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	dc38      	bgt.n	800d3a4 <_dtoa_r+0x99c>
 800d332:	9b05      	ldr	r3, [sp, #20]
 800d334:	2b02      	cmp	r3, #2
 800d336:	dd35      	ble.n	800d3a4 <_dtoa_r+0x99c>
 800d338:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d33c:	f1b9 0f00 	cmp.w	r9, #0
 800d340:	d10d      	bne.n	800d35e <_dtoa_r+0x956>
 800d342:	4631      	mov	r1, r6
 800d344:	464b      	mov	r3, r9
 800d346:	2205      	movs	r2, #5
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 ffe7 	bl	800e31c <__multadd>
 800d34e:	4601      	mov	r1, r0
 800d350:	4606      	mov	r6, r0
 800d352:	4658      	mov	r0, fp
 800d354:	f001 fa48 	bl	800e7e8 <__mcmp>
 800d358:	2800      	cmp	r0, #0
 800d35a:	f73f adbd 	bgt.w	800ced8 <_dtoa_r+0x4d0>
 800d35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d360:	9d00      	ldr	r5, [sp, #0]
 800d362:	ea6f 0a03 	mvn.w	sl, r3
 800d366:	f04f 0800 	mov.w	r8, #0
 800d36a:	4631      	mov	r1, r6
 800d36c:	4620      	mov	r0, r4
 800d36e:	f000 ffb3 	bl	800e2d8 <_Bfree>
 800d372:	2f00      	cmp	r7, #0
 800d374:	f43f aeb4 	beq.w	800d0e0 <_dtoa_r+0x6d8>
 800d378:	f1b8 0f00 	cmp.w	r8, #0
 800d37c:	d005      	beq.n	800d38a <_dtoa_r+0x982>
 800d37e:	45b8      	cmp	r8, r7
 800d380:	d003      	beq.n	800d38a <_dtoa_r+0x982>
 800d382:	4641      	mov	r1, r8
 800d384:	4620      	mov	r0, r4
 800d386:	f000 ffa7 	bl	800e2d8 <_Bfree>
 800d38a:	4639      	mov	r1, r7
 800d38c:	4620      	mov	r0, r4
 800d38e:	f000 ffa3 	bl	800e2d8 <_Bfree>
 800d392:	e6a5      	b.n	800d0e0 <_dtoa_r+0x6d8>
 800d394:	2600      	movs	r6, #0
 800d396:	4637      	mov	r7, r6
 800d398:	e7e1      	b.n	800d35e <_dtoa_r+0x956>
 800d39a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d39c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d3a0:	4637      	mov	r7, r6
 800d3a2:	e599      	b.n	800ced8 <_dtoa_r+0x4d0>
 800d3a4:	9b08      	ldr	r3, [sp, #32]
 800d3a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f000 80fd 	beq.w	800d5aa <_dtoa_r+0xba2>
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	dd05      	ble.n	800d3c0 <_dtoa_r+0x9b8>
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	462a      	mov	r2, r5
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f001 f9a9 	bl	800e710 <__lshift>
 800d3be:	4607      	mov	r7, r0
 800d3c0:	9b06      	ldr	r3, [sp, #24]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d05c      	beq.n	800d480 <_dtoa_r+0xa78>
 800d3c6:	6879      	ldr	r1, [r7, #4]
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 ff45 	bl	800e258 <_Balloc>
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	b928      	cbnz	r0, 800d3de <_dtoa_r+0x9d6>
 800d3d2:	4b80      	ldr	r3, [pc, #512]	; (800d5d4 <_dtoa_r+0xbcc>)
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d3da:	f7ff bb2e 	b.w	800ca3a <_dtoa_r+0x32>
 800d3de:	693a      	ldr	r2, [r7, #16]
 800d3e0:	3202      	adds	r2, #2
 800d3e2:	0092      	lsls	r2, r2, #2
 800d3e4:	f107 010c 	add.w	r1, r7, #12
 800d3e8:	300c      	adds	r0, #12
 800d3ea:	f000 ff27 	bl	800e23c <memcpy>
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f001 f98c 	bl	800e710 <__lshift>
 800d3f8:	9b00      	ldr	r3, [sp, #0]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	9b00      	ldr	r3, [sp, #0]
 800d400:	444b      	add	r3, r9
 800d402:	9307      	str	r3, [sp, #28]
 800d404:	9b02      	ldr	r3, [sp, #8]
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	46b8      	mov	r8, r7
 800d40c:	9306      	str	r3, [sp, #24]
 800d40e:	4607      	mov	r7, r0
 800d410:	9b01      	ldr	r3, [sp, #4]
 800d412:	4631      	mov	r1, r6
 800d414:	3b01      	subs	r3, #1
 800d416:	4658      	mov	r0, fp
 800d418:	9302      	str	r3, [sp, #8]
 800d41a:	f7ff fa67 	bl	800c8ec <quorem>
 800d41e:	4603      	mov	r3, r0
 800d420:	3330      	adds	r3, #48	; 0x30
 800d422:	9004      	str	r0, [sp, #16]
 800d424:	4641      	mov	r1, r8
 800d426:	4658      	mov	r0, fp
 800d428:	9308      	str	r3, [sp, #32]
 800d42a:	f001 f9dd 	bl	800e7e8 <__mcmp>
 800d42e:	463a      	mov	r2, r7
 800d430:	4681      	mov	r9, r0
 800d432:	4631      	mov	r1, r6
 800d434:	4620      	mov	r0, r4
 800d436:	f001 f9f3 	bl	800e820 <__mdiff>
 800d43a:	68c2      	ldr	r2, [r0, #12]
 800d43c:	9b08      	ldr	r3, [sp, #32]
 800d43e:	4605      	mov	r5, r0
 800d440:	bb02      	cbnz	r2, 800d484 <_dtoa_r+0xa7c>
 800d442:	4601      	mov	r1, r0
 800d444:	4658      	mov	r0, fp
 800d446:	f001 f9cf 	bl	800e7e8 <__mcmp>
 800d44a:	9b08      	ldr	r3, [sp, #32]
 800d44c:	4602      	mov	r2, r0
 800d44e:	4629      	mov	r1, r5
 800d450:	4620      	mov	r0, r4
 800d452:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d456:	f000 ff3f 	bl	800e2d8 <_Bfree>
 800d45a:	9b05      	ldr	r3, [sp, #20]
 800d45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d45e:	9d01      	ldr	r5, [sp, #4]
 800d460:	ea43 0102 	orr.w	r1, r3, r2
 800d464:	9b06      	ldr	r3, [sp, #24]
 800d466:	430b      	orrs	r3, r1
 800d468:	9b08      	ldr	r3, [sp, #32]
 800d46a:	d10d      	bne.n	800d488 <_dtoa_r+0xa80>
 800d46c:	2b39      	cmp	r3, #57	; 0x39
 800d46e:	d029      	beq.n	800d4c4 <_dtoa_r+0xabc>
 800d470:	f1b9 0f00 	cmp.w	r9, #0
 800d474:	dd01      	ble.n	800d47a <_dtoa_r+0xa72>
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	3331      	adds	r3, #49	; 0x31
 800d47a:	9a02      	ldr	r2, [sp, #8]
 800d47c:	7013      	strb	r3, [r2, #0]
 800d47e:	e774      	b.n	800d36a <_dtoa_r+0x962>
 800d480:	4638      	mov	r0, r7
 800d482:	e7b9      	b.n	800d3f8 <_dtoa_r+0x9f0>
 800d484:	2201      	movs	r2, #1
 800d486:	e7e2      	b.n	800d44e <_dtoa_r+0xa46>
 800d488:	f1b9 0f00 	cmp.w	r9, #0
 800d48c:	db06      	blt.n	800d49c <_dtoa_r+0xa94>
 800d48e:	9905      	ldr	r1, [sp, #20]
 800d490:	ea41 0909 	orr.w	r9, r1, r9
 800d494:	9906      	ldr	r1, [sp, #24]
 800d496:	ea59 0101 	orrs.w	r1, r9, r1
 800d49a:	d120      	bne.n	800d4de <_dtoa_r+0xad6>
 800d49c:	2a00      	cmp	r2, #0
 800d49e:	ddec      	ble.n	800d47a <_dtoa_r+0xa72>
 800d4a0:	4659      	mov	r1, fp
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	9301      	str	r3, [sp, #4]
 800d4a8:	f001 f932 	bl	800e710 <__lshift>
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4683      	mov	fp, r0
 800d4b0:	f001 f99a 	bl	800e7e8 <__mcmp>
 800d4b4:	2800      	cmp	r0, #0
 800d4b6:	9b01      	ldr	r3, [sp, #4]
 800d4b8:	dc02      	bgt.n	800d4c0 <_dtoa_r+0xab8>
 800d4ba:	d1de      	bne.n	800d47a <_dtoa_r+0xa72>
 800d4bc:	07da      	lsls	r2, r3, #31
 800d4be:	d5dc      	bpl.n	800d47a <_dtoa_r+0xa72>
 800d4c0:	2b39      	cmp	r3, #57	; 0x39
 800d4c2:	d1d8      	bne.n	800d476 <_dtoa_r+0xa6e>
 800d4c4:	9a02      	ldr	r2, [sp, #8]
 800d4c6:	2339      	movs	r3, #57	; 0x39
 800d4c8:	7013      	strb	r3, [r2, #0]
 800d4ca:	462b      	mov	r3, r5
 800d4cc:	461d      	mov	r5, r3
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d4d4:	2a39      	cmp	r2, #57	; 0x39
 800d4d6:	d050      	beq.n	800d57a <_dtoa_r+0xb72>
 800d4d8:	3201      	adds	r2, #1
 800d4da:	701a      	strb	r2, [r3, #0]
 800d4dc:	e745      	b.n	800d36a <_dtoa_r+0x962>
 800d4de:	2a00      	cmp	r2, #0
 800d4e0:	dd03      	ble.n	800d4ea <_dtoa_r+0xae2>
 800d4e2:	2b39      	cmp	r3, #57	; 0x39
 800d4e4:	d0ee      	beq.n	800d4c4 <_dtoa_r+0xabc>
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	e7c7      	b.n	800d47a <_dtoa_r+0xa72>
 800d4ea:	9a01      	ldr	r2, [sp, #4]
 800d4ec:	9907      	ldr	r1, [sp, #28]
 800d4ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d4f2:	428a      	cmp	r2, r1
 800d4f4:	d02a      	beq.n	800d54c <_dtoa_r+0xb44>
 800d4f6:	4659      	mov	r1, fp
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	220a      	movs	r2, #10
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 ff0d 	bl	800e31c <__multadd>
 800d502:	45b8      	cmp	r8, r7
 800d504:	4683      	mov	fp, r0
 800d506:	f04f 0300 	mov.w	r3, #0
 800d50a:	f04f 020a 	mov.w	r2, #10
 800d50e:	4641      	mov	r1, r8
 800d510:	4620      	mov	r0, r4
 800d512:	d107      	bne.n	800d524 <_dtoa_r+0xb1c>
 800d514:	f000 ff02 	bl	800e31c <__multadd>
 800d518:	4680      	mov	r8, r0
 800d51a:	4607      	mov	r7, r0
 800d51c:	9b01      	ldr	r3, [sp, #4]
 800d51e:	3301      	adds	r3, #1
 800d520:	9301      	str	r3, [sp, #4]
 800d522:	e775      	b.n	800d410 <_dtoa_r+0xa08>
 800d524:	f000 fefa 	bl	800e31c <__multadd>
 800d528:	4639      	mov	r1, r7
 800d52a:	4680      	mov	r8, r0
 800d52c:	2300      	movs	r3, #0
 800d52e:	220a      	movs	r2, #10
 800d530:	4620      	mov	r0, r4
 800d532:	f000 fef3 	bl	800e31c <__multadd>
 800d536:	4607      	mov	r7, r0
 800d538:	e7f0      	b.n	800d51c <_dtoa_r+0xb14>
 800d53a:	f1b9 0f00 	cmp.w	r9, #0
 800d53e:	9a00      	ldr	r2, [sp, #0]
 800d540:	bfcc      	ite	gt
 800d542:	464d      	movgt	r5, r9
 800d544:	2501      	movle	r5, #1
 800d546:	4415      	add	r5, r2
 800d548:	f04f 0800 	mov.w	r8, #0
 800d54c:	4659      	mov	r1, fp
 800d54e:	2201      	movs	r2, #1
 800d550:	4620      	mov	r0, r4
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	f001 f8dc 	bl	800e710 <__lshift>
 800d558:	4631      	mov	r1, r6
 800d55a:	4683      	mov	fp, r0
 800d55c:	f001 f944 	bl	800e7e8 <__mcmp>
 800d560:	2800      	cmp	r0, #0
 800d562:	dcb2      	bgt.n	800d4ca <_dtoa_r+0xac2>
 800d564:	d102      	bne.n	800d56c <_dtoa_r+0xb64>
 800d566:	9b01      	ldr	r3, [sp, #4]
 800d568:	07db      	lsls	r3, r3, #31
 800d56a:	d4ae      	bmi.n	800d4ca <_dtoa_r+0xac2>
 800d56c:	462b      	mov	r3, r5
 800d56e:	461d      	mov	r5, r3
 800d570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d574:	2a30      	cmp	r2, #48	; 0x30
 800d576:	d0fa      	beq.n	800d56e <_dtoa_r+0xb66>
 800d578:	e6f7      	b.n	800d36a <_dtoa_r+0x962>
 800d57a:	9a00      	ldr	r2, [sp, #0]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d1a5      	bne.n	800d4cc <_dtoa_r+0xac4>
 800d580:	f10a 0a01 	add.w	sl, sl, #1
 800d584:	2331      	movs	r3, #49	; 0x31
 800d586:	e779      	b.n	800d47c <_dtoa_r+0xa74>
 800d588:	4b13      	ldr	r3, [pc, #76]	; (800d5d8 <_dtoa_r+0xbd0>)
 800d58a:	f7ff baaf 	b.w	800caec <_dtoa_r+0xe4>
 800d58e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d590:	2b00      	cmp	r3, #0
 800d592:	f47f aa86 	bne.w	800caa2 <_dtoa_r+0x9a>
 800d596:	4b11      	ldr	r3, [pc, #68]	; (800d5dc <_dtoa_r+0xbd4>)
 800d598:	f7ff baa8 	b.w	800caec <_dtoa_r+0xe4>
 800d59c:	f1b9 0f00 	cmp.w	r9, #0
 800d5a0:	dc03      	bgt.n	800d5aa <_dtoa_r+0xba2>
 800d5a2:	9b05      	ldr	r3, [sp, #20]
 800d5a4:	2b02      	cmp	r3, #2
 800d5a6:	f73f aec9 	bgt.w	800d33c <_dtoa_r+0x934>
 800d5aa:	9d00      	ldr	r5, [sp, #0]
 800d5ac:	4631      	mov	r1, r6
 800d5ae:	4658      	mov	r0, fp
 800d5b0:	f7ff f99c 	bl	800c8ec <quorem>
 800d5b4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d5b8:	f805 3b01 	strb.w	r3, [r5], #1
 800d5bc:	9a00      	ldr	r2, [sp, #0]
 800d5be:	1aaa      	subs	r2, r5, r2
 800d5c0:	4591      	cmp	r9, r2
 800d5c2:	ddba      	ble.n	800d53a <_dtoa_r+0xb32>
 800d5c4:	4659      	mov	r1, fp
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	220a      	movs	r2, #10
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 fea6 	bl	800e31c <__multadd>
 800d5d0:	4683      	mov	fp, r0
 800d5d2:	e7eb      	b.n	800d5ac <_dtoa_r+0xba4>
 800d5d4:	08010f59 	.word	0x08010f59
 800d5d8:	08010cc4 	.word	0x08010cc4
 800d5dc:	08010eed 	.word	0x08010eed

0800d5e0 <__sflush_r>:
 800d5e0:	898a      	ldrh	r2, [r1, #12]
 800d5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e6:	4605      	mov	r5, r0
 800d5e8:	0710      	lsls	r0, r2, #28
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	d458      	bmi.n	800d6a0 <__sflush_r+0xc0>
 800d5ee:	684b      	ldr	r3, [r1, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	dc05      	bgt.n	800d600 <__sflush_r+0x20>
 800d5f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	dc02      	bgt.n	800d600 <__sflush_r+0x20>
 800d5fa:	2000      	movs	r0, #0
 800d5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d602:	2e00      	cmp	r6, #0
 800d604:	d0f9      	beq.n	800d5fa <__sflush_r+0x1a>
 800d606:	2300      	movs	r3, #0
 800d608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d60c:	682f      	ldr	r7, [r5, #0]
 800d60e:	602b      	str	r3, [r5, #0]
 800d610:	d032      	beq.n	800d678 <__sflush_r+0x98>
 800d612:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	075a      	lsls	r2, r3, #29
 800d618:	d505      	bpl.n	800d626 <__sflush_r+0x46>
 800d61a:	6863      	ldr	r3, [r4, #4]
 800d61c:	1ac0      	subs	r0, r0, r3
 800d61e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d620:	b10b      	cbz	r3, 800d626 <__sflush_r+0x46>
 800d622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d624:	1ac0      	subs	r0, r0, r3
 800d626:	2300      	movs	r3, #0
 800d628:	4602      	mov	r2, r0
 800d62a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d62c:	6a21      	ldr	r1, [r4, #32]
 800d62e:	4628      	mov	r0, r5
 800d630:	47b0      	blx	r6
 800d632:	1c43      	adds	r3, r0, #1
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	d106      	bne.n	800d646 <__sflush_r+0x66>
 800d638:	6829      	ldr	r1, [r5, #0]
 800d63a:	291d      	cmp	r1, #29
 800d63c:	d82c      	bhi.n	800d698 <__sflush_r+0xb8>
 800d63e:	4a2a      	ldr	r2, [pc, #168]	; (800d6e8 <__sflush_r+0x108>)
 800d640:	40ca      	lsrs	r2, r1
 800d642:	07d6      	lsls	r6, r2, #31
 800d644:	d528      	bpl.n	800d698 <__sflush_r+0xb8>
 800d646:	2200      	movs	r2, #0
 800d648:	6062      	str	r2, [r4, #4]
 800d64a:	04d9      	lsls	r1, r3, #19
 800d64c:	6922      	ldr	r2, [r4, #16]
 800d64e:	6022      	str	r2, [r4, #0]
 800d650:	d504      	bpl.n	800d65c <__sflush_r+0x7c>
 800d652:	1c42      	adds	r2, r0, #1
 800d654:	d101      	bne.n	800d65a <__sflush_r+0x7a>
 800d656:	682b      	ldr	r3, [r5, #0]
 800d658:	b903      	cbnz	r3, 800d65c <__sflush_r+0x7c>
 800d65a:	6560      	str	r0, [r4, #84]	; 0x54
 800d65c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d65e:	602f      	str	r7, [r5, #0]
 800d660:	2900      	cmp	r1, #0
 800d662:	d0ca      	beq.n	800d5fa <__sflush_r+0x1a>
 800d664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d668:	4299      	cmp	r1, r3
 800d66a:	d002      	beq.n	800d672 <__sflush_r+0x92>
 800d66c:	4628      	mov	r0, r5
 800d66e:	f001 fabd 	bl	800ebec <_free_r>
 800d672:	2000      	movs	r0, #0
 800d674:	6360      	str	r0, [r4, #52]	; 0x34
 800d676:	e7c1      	b.n	800d5fc <__sflush_r+0x1c>
 800d678:	6a21      	ldr	r1, [r4, #32]
 800d67a:	2301      	movs	r3, #1
 800d67c:	4628      	mov	r0, r5
 800d67e:	47b0      	blx	r6
 800d680:	1c41      	adds	r1, r0, #1
 800d682:	d1c7      	bne.n	800d614 <__sflush_r+0x34>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d0c4      	beq.n	800d614 <__sflush_r+0x34>
 800d68a:	2b1d      	cmp	r3, #29
 800d68c:	d001      	beq.n	800d692 <__sflush_r+0xb2>
 800d68e:	2b16      	cmp	r3, #22
 800d690:	d101      	bne.n	800d696 <__sflush_r+0xb6>
 800d692:	602f      	str	r7, [r5, #0]
 800d694:	e7b1      	b.n	800d5fa <__sflush_r+0x1a>
 800d696:	89a3      	ldrh	r3, [r4, #12]
 800d698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d69c:	81a3      	strh	r3, [r4, #12]
 800d69e:	e7ad      	b.n	800d5fc <__sflush_r+0x1c>
 800d6a0:	690f      	ldr	r7, [r1, #16]
 800d6a2:	2f00      	cmp	r7, #0
 800d6a4:	d0a9      	beq.n	800d5fa <__sflush_r+0x1a>
 800d6a6:	0793      	lsls	r3, r2, #30
 800d6a8:	680e      	ldr	r6, [r1, #0]
 800d6aa:	bf08      	it	eq
 800d6ac:	694b      	ldreq	r3, [r1, #20]
 800d6ae:	600f      	str	r7, [r1, #0]
 800d6b0:	bf18      	it	ne
 800d6b2:	2300      	movne	r3, #0
 800d6b4:	eba6 0807 	sub.w	r8, r6, r7
 800d6b8:	608b      	str	r3, [r1, #8]
 800d6ba:	f1b8 0f00 	cmp.w	r8, #0
 800d6be:	dd9c      	ble.n	800d5fa <__sflush_r+0x1a>
 800d6c0:	6a21      	ldr	r1, [r4, #32]
 800d6c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6c4:	4643      	mov	r3, r8
 800d6c6:	463a      	mov	r2, r7
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b0      	blx	r6
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	dc06      	bgt.n	800d6de <__sflush_r+0xfe>
 800d6d0:	89a3      	ldrh	r3, [r4, #12]
 800d6d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6dc:	e78e      	b.n	800d5fc <__sflush_r+0x1c>
 800d6de:	4407      	add	r7, r0
 800d6e0:	eba8 0800 	sub.w	r8, r8, r0
 800d6e4:	e7e9      	b.n	800d6ba <__sflush_r+0xda>
 800d6e6:	bf00      	nop
 800d6e8:	20400001 	.word	0x20400001

0800d6ec <_fflush_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	690b      	ldr	r3, [r1, #16]
 800d6f0:	4605      	mov	r5, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b913      	cbnz	r3, 800d6fc <_fflush_r+0x10>
 800d6f6:	2500      	movs	r5, #0
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	b118      	cbz	r0, 800d706 <_fflush_r+0x1a>
 800d6fe:	6983      	ldr	r3, [r0, #24]
 800d700:	b90b      	cbnz	r3, 800d706 <_fflush_r+0x1a>
 800d702:	f000 f899 	bl	800d838 <__sinit>
 800d706:	4b14      	ldr	r3, [pc, #80]	; (800d758 <_fflush_r+0x6c>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d11b      	bne.n	800d744 <_fflush_r+0x58>
 800d70c:	686c      	ldr	r4, [r5, #4]
 800d70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0ef      	beq.n	800d6f6 <_fflush_r+0xa>
 800d716:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d718:	07d0      	lsls	r0, r2, #31
 800d71a:	d404      	bmi.n	800d726 <_fflush_r+0x3a>
 800d71c:	0599      	lsls	r1, r3, #22
 800d71e:	d402      	bmi.n	800d726 <_fflush_r+0x3a>
 800d720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d722:	f000 fd0a 	bl	800e13a <__retarget_lock_acquire_recursive>
 800d726:	4628      	mov	r0, r5
 800d728:	4621      	mov	r1, r4
 800d72a:	f7ff ff59 	bl	800d5e0 <__sflush_r>
 800d72e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d730:	07da      	lsls	r2, r3, #31
 800d732:	4605      	mov	r5, r0
 800d734:	d4e0      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	059b      	lsls	r3, r3, #22
 800d73a:	d4dd      	bmi.n	800d6f8 <_fflush_r+0xc>
 800d73c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d73e:	f000 fcfd 	bl	800e13c <__retarget_lock_release_recursive>
 800d742:	e7d9      	b.n	800d6f8 <_fflush_r+0xc>
 800d744:	4b05      	ldr	r3, [pc, #20]	; (800d75c <_fflush_r+0x70>)
 800d746:	429c      	cmp	r4, r3
 800d748:	d101      	bne.n	800d74e <_fflush_r+0x62>
 800d74a:	68ac      	ldr	r4, [r5, #8]
 800d74c:	e7df      	b.n	800d70e <_fflush_r+0x22>
 800d74e:	4b04      	ldr	r3, [pc, #16]	; (800d760 <_fflush_r+0x74>)
 800d750:	429c      	cmp	r4, r3
 800d752:	bf08      	it	eq
 800d754:	68ec      	ldreq	r4, [r5, #12]
 800d756:	e7da      	b.n	800d70e <_fflush_r+0x22>
 800d758:	08010f8c 	.word	0x08010f8c
 800d75c:	08010fac 	.word	0x08010fac
 800d760:	08010f6c 	.word	0x08010f6c

0800d764 <fflush>:
 800d764:	4601      	mov	r1, r0
 800d766:	b920      	cbnz	r0, 800d772 <fflush+0xe>
 800d768:	4b04      	ldr	r3, [pc, #16]	; (800d77c <fflush+0x18>)
 800d76a:	4905      	ldr	r1, [pc, #20]	; (800d780 <fflush+0x1c>)
 800d76c:	6818      	ldr	r0, [r3, #0]
 800d76e:	f000 b910 	b.w	800d992 <_fwalk_reent>
 800d772:	4b04      	ldr	r3, [pc, #16]	; (800d784 <fflush+0x20>)
 800d774:	6818      	ldr	r0, [r3, #0]
 800d776:	f7ff bfb9 	b.w	800d6ec <_fflush_r>
 800d77a:	bf00      	nop
 800d77c:	08010cb0 	.word	0x08010cb0
 800d780:	0800d6ed 	.word	0x0800d6ed
 800d784:	20000028 	.word	0x20000028

0800d788 <std>:
 800d788:	2300      	movs	r3, #0
 800d78a:	b510      	push	{r4, lr}
 800d78c:	4604      	mov	r4, r0
 800d78e:	e9c0 3300 	strd	r3, r3, [r0]
 800d792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d796:	6083      	str	r3, [r0, #8]
 800d798:	8181      	strh	r1, [r0, #12]
 800d79a:	6643      	str	r3, [r0, #100]	; 0x64
 800d79c:	81c2      	strh	r2, [r0, #14]
 800d79e:	6183      	str	r3, [r0, #24]
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	2208      	movs	r2, #8
 800d7a4:	305c      	adds	r0, #92	; 0x5c
 800d7a6:	f7fd fb89 	bl	800aebc <memset>
 800d7aa:	4b05      	ldr	r3, [pc, #20]	; (800d7c0 <std+0x38>)
 800d7ac:	6263      	str	r3, [r4, #36]	; 0x24
 800d7ae:	4b05      	ldr	r3, [pc, #20]	; (800d7c4 <std+0x3c>)
 800d7b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d7b2:	4b05      	ldr	r3, [pc, #20]	; (800d7c8 <std+0x40>)
 800d7b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d7b6:	4b05      	ldr	r3, [pc, #20]	; (800d7cc <std+0x44>)
 800d7b8:	6224      	str	r4, [r4, #32]
 800d7ba:	6323      	str	r3, [r4, #48]	; 0x30
 800d7bc:	bd10      	pop	{r4, pc}
 800d7be:	bf00      	nop
 800d7c0:	0800f111 	.word	0x0800f111
 800d7c4:	0800f133 	.word	0x0800f133
 800d7c8:	0800f16b 	.word	0x0800f16b
 800d7cc:	0800f18f 	.word	0x0800f18f

0800d7d0 <_cleanup_r>:
 800d7d0:	4901      	ldr	r1, [pc, #4]	; (800d7d8 <_cleanup_r+0x8>)
 800d7d2:	f000 b8de 	b.w	800d992 <_fwalk_reent>
 800d7d6:	bf00      	nop
 800d7d8:	0800d6ed 	.word	0x0800d6ed

0800d7dc <__sfmoreglue>:
 800d7dc:	b570      	push	{r4, r5, r6, lr}
 800d7de:	1e4a      	subs	r2, r1, #1
 800d7e0:	2568      	movs	r5, #104	; 0x68
 800d7e2:	4355      	muls	r5, r2
 800d7e4:	460e      	mov	r6, r1
 800d7e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7ea:	f001 fa4f 	bl	800ec8c <_malloc_r>
 800d7ee:	4604      	mov	r4, r0
 800d7f0:	b140      	cbz	r0, 800d804 <__sfmoreglue+0x28>
 800d7f2:	2100      	movs	r1, #0
 800d7f4:	e9c0 1600 	strd	r1, r6, [r0]
 800d7f8:	300c      	adds	r0, #12
 800d7fa:	60a0      	str	r0, [r4, #8]
 800d7fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d800:	f7fd fb5c 	bl	800aebc <memset>
 800d804:	4620      	mov	r0, r4
 800d806:	bd70      	pop	{r4, r5, r6, pc}

0800d808 <__sfp_lock_acquire>:
 800d808:	4801      	ldr	r0, [pc, #4]	; (800d810 <__sfp_lock_acquire+0x8>)
 800d80a:	f000 bc96 	b.w	800e13a <__retarget_lock_acquire_recursive>
 800d80e:	bf00      	nop
 800d810:	20000d54 	.word	0x20000d54

0800d814 <__sfp_lock_release>:
 800d814:	4801      	ldr	r0, [pc, #4]	; (800d81c <__sfp_lock_release+0x8>)
 800d816:	f000 bc91 	b.w	800e13c <__retarget_lock_release_recursive>
 800d81a:	bf00      	nop
 800d81c:	20000d54 	.word	0x20000d54

0800d820 <__sinit_lock_acquire>:
 800d820:	4801      	ldr	r0, [pc, #4]	; (800d828 <__sinit_lock_acquire+0x8>)
 800d822:	f000 bc8a 	b.w	800e13a <__retarget_lock_acquire_recursive>
 800d826:	bf00      	nop
 800d828:	20000d4f 	.word	0x20000d4f

0800d82c <__sinit_lock_release>:
 800d82c:	4801      	ldr	r0, [pc, #4]	; (800d834 <__sinit_lock_release+0x8>)
 800d82e:	f000 bc85 	b.w	800e13c <__retarget_lock_release_recursive>
 800d832:	bf00      	nop
 800d834:	20000d4f 	.word	0x20000d4f

0800d838 <__sinit>:
 800d838:	b510      	push	{r4, lr}
 800d83a:	4604      	mov	r4, r0
 800d83c:	f7ff fff0 	bl	800d820 <__sinit_lock_acquire>
 800d840:	69a3      	ldr	r3, [r4, #24]
 800d842:	b11b      	cbz	r3, 800d84c <__sinit+0x14>
 800d844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d848:	f7ff bff0 	b.w	800d82c <__sinit_lock_release>
 800d84c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d850:	6523      	str	r3, [r4, #80]	; 0x50
 800d852:	4b13      	ldr	r3, [pc, #76]	; (800d8a0 <__sinit+0x68>)
 800d854:	4a13      	ldr	r2, [pc, #76]	; (800d8a4 <__sinit+0x6c>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	62a2      	str	r2, [r4, #40]	; 0x28
 800d85a:	42a3      	cmp	r3, r4
 800d85c:	bf04      	itt	eq
 800d85e:	2301      	moveq	r3, #1
 800d860:	61a3      	streq	r3, [r4, #24]
 800d862:	4620      	mov	r0, r4
 800d864:	f000 f820 	bl	800d8a8 <__sfp>
 800d868:	6060      	str	r0, [r4, #4]
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 f81c 	bl	800d8a8 <__sfp>
 800d870:	60a0      	str	r0, [r4, #8]
 800d872:	4620      	mov	r0, r4
 800d874:	f000 f818 	bl	800d8a8 <__sfp>
 800d878:	2200      	movs	r2, #0
 800d87a:	60e0      	str	r0, [r4, #12]
 800d87c:	2104      	movs	r1, #4
 800d87e:	6860      	ldr	r0, [r4, #4]
 800d880:	f7ff ff82 	bl	800d788 <std>
 800d884:	68a0      	ldr	r0, [r4, #8]
 800d886:	2201      	movs	r2, #1
 800d888:	2109      	movs	r1, #9
 800d88a:	f7ff ff7d 	bl	800d788 <std>
 800d88e:	68e0      	ldr	r0, [r4, #12]
 800d890:	2202      	movs	r2, #2
 800d892:	2112      	movs	r1, #18
 800d894:	f7ff ff78 	bl	800d788 <std>
 800d898:	2301      	movs	r3, #1
 800d89a:	61a3      	str	r3, [r4, #24]
 800d89c:	e7d2      	b.n	800d844 <__sinit+0xc>
 800d89e:	bf00      	nop
 800d8a0:	08010cb0 	.word	0x08010cb0
 800d8a4:	0800d7d1 	.word	0x0800d7d1

0800d8a8 <__sfp>:
 800d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8aa:	4607      	mov	r7, r0
 800d8ac:	f7ff ffac 	bl	800d808 <__sfp_lock_acquire>
 800d8b0:	4b1e      	ldr	r3, [pc, #120]	; (800d92c <__sfp+0x84>)
 800d8b2:	681e      	ldr	r6, [r3, #0]
 800d8b4:	69b3      	ldr	r3, [r6, #24]
 800d8b6:	b913      	cbnz	r3, 800d8be <__sfp+0x16>
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f7ff ffbd 	bl	800d838 <__sinit>
 800d8be:	3648      	adds	r6, #72	; 0x48
 800d8c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8c4:	3b01      	subs	r3, #1
 800d8c6:	d503      	bpl.n	800d8d0 <__sfp+0x28>
 800d8c8:	6833      	ldr	r3, [r6, #0]
 800d8ca:	b30b      	cbz	r3, 800d910 <__sfp+0x68>
 800d8cc:	6836      	ldr	r6, [r6, #0]
 800d8ce:	e7f7      	b.n	800d8c0 <__sfp+0x18>
 800d8d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8d4:	b9d5      	cbnz	r5, 800d90c <__sfp+0x64>
 800d8d6:	4b16      	ldr	r3, [pc, #88]	; (800d930 <__sfp+0x88>)
 800d8d8:	60e3      	str	r3, [r4, #12]
 800d8da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8de:	6665      	str	r5, [r4, #100]	; 0x64
 800d8e0:	f000 fc2a 	bl	800e138 <__retarget_lock_init_recursive>
 800d8e4:	f7ff ff96 	bl	800d814 <__sfp_lock_release>
 800d8e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8f0:	6025      	str	r5, [r4, #0]
 800d8f2:	61a5      	str	r5, [r4, #24]
 800d8f4:	2208      	movs	r2, #8
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8fc:	f7fd fade 	bl	800aebc <memset>
 800d900:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d904:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d908:	4620      	mov	r0, r4
 800d90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d90c:	3468      	adds	r4, #104	; 0x68
 800d90e:	e7d9      	b.n	800d8c4 <__sfp+0x1c>
 800d910:	2104      	movs	r1, #4
 800d912:	4638      	mov	r0, r7
 800d914:	f7ff ff62 	bl	800d7dc <__sfmoreglue>
 800d918:	4604      	mov	r4, r0
 800d91a:	6030      	str	r0, [r6, #0]
 800d91c:	2800      	cmp	r0, #0
 800d91e:	d1d5      	bne.n	800d8cc <__sfp+0x24>
 800d920:	f7ff ff78 	bl	800d814 <__sfp_lock_release>
 800d924:	230c      	movs	r3, #12
 800d926:	603b      	str	r3, [r7, #0]
 800d928:	e7ee      	b.n	800d908 <__sfp+0x60>
 800d92a:	bf00      	nop
 800d92c:	08010cb0 	.word	0x08010cb0
 800d930:	ffff0001 	.word	0xffff0001

0800d934 <fiprintf>:
 800d934:	b40e      	push	{r1, r2, r3}
 800d936:	b503      	push	{r0, r1, lr}
 800d938:	4601      	mov	r1, r0
 800d93a:	ab03      	add	r3, sp, #12
 800d93c:	4805      	ldr	r0, [pc, #20]	; (800d954 <fiprintf+0x20>)
 800d93e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d942:	6800      	ldr	r0, [r0, #0]
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	f001 fa25 	bl	800ed94 <_vfiprintf_r>
 800d94a:	b002      	add	sp, #8
 800d94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d950:	b003      	add	sp, #12
 800d952:	4770      	bx	lr
 800d954:	20000028 	.word	0x20000028

0800d958 <_fwalk>:
 800d958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95c:	460f      	mov	r7, r1
 800d95e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d962:	2600      	movs	r6, #0
 800d964:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800d968:	f1b8 0801 	subs.w	r8, r8, #1
 800d96c:	d505      	bpl.n	800d97a <_fwalk+0x22>
 800d96e:	6824      	ldr	r4, [r4, #0]
 800d970:	2c00      	cmp	r4, #0
 800d972:	d1f7      	bne.n	800d964 <_fwalk+0xc>
 800d974:	4630      	mov	r0, r6
 800d976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97a:	89ab      	ldrh	r3, [r5, #12]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d906      	bls.n	800d98e <_fwalk+0x36>
 800d980:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d984:	3301      	adds	r3, #1
 800d986:	d002      	beq.n	800d98e <_fwalk+0x36>
 800d988:	4628      	mov	r0, r5
 800d98a:	47b8      	blx	r7
 800d98c:	4306      	orrs	r6, r0
 800d98e:	3568      	adds	r5, #104	; 0x68
 800d990:	e7ea      	b.n	800d968 <_fwalk+0x10>

0800d992 <_fwalk_reent>:
 800d992:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d996:	4606      	mov	r6, r0
 800d998:	4688      	mov	r8, r1
 800d99a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d99e:	2700      	movs	r7, #0
 800d9a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9a4:	f1b9 0901 	subs.w	r9, r9, #1
 800d9a8:	d505      	bpl.n	800d9b6 <_fwalk_reent+0x24>
 800d9aa:	6824      	ldr	r4, [r4, #0]
 800d9ac:	2c00      	cmp	r4, #0
 800d9ae:	d1f7      	bne.n	800d9a0 <_fwalk_reent+0xe>
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9b6:	89ab      	ldrh	r3, [r5, #12]
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d907      	bls.n	800d9cc <_fwalk_reent+0x3a>
 800d9bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9c0:	3301      	adds	r3, #1
 800d9c2:	d003      	beq.n	800d9cc <_fwalk_reent+0x3a>
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	47c0      	blx	r8
 800d9ca:	4307      	orrs	r7, r0
 800d9cc:	3568      	adds	r5, #104	; 0x68
 800d9ce:	e7e9      	b.n	800d9a4 <_fwalk_reent+0x12>

0800d9d0 <rshift>:
 800d9d0:	6903      	ldr	r3, [r0, #16]
 800d9d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d9d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d9de:	f100 0414 	add.w	r4, r0, #20
 800d9e2:	dd45      	ble.n	800da70 <rshift+0xa0>
 800d9e4:	f011 011f 	ands.w	r1, r1, #31
 800d9e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d9ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d9f0:	d10c      	bne.n	800da0c <rshift+0x3c>
 800d9f2:	f100 0710 	add.w	r7, r0, #16
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	42b1      	cmp	r1, r6
 800d9fa:	d334      	bcc.n	800da66 <rshift+0x96>
 800d9fc:	1a9b      	subs	r3, r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	1eea      	subs	r2, r5, #3
 800da02:	4296      	cmp	r6, r2
 800da04:	bf38      	it	cc
 800da06:	2300      	movcc	r3, #0
 800da08:	4423      	add	r3, r4
 800da0a:	e015      	b.n	800da38 <rshift+0x68>
 800da0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da10:	f1c1 0820 	rsb	r8, r1, #32
 800da14:	40cf      	lsrs	r7, r1
 800da16:	f105 0e04 	add.w	lr, r5, #4
 800da1a:	46a1      	mov	r9, r4
 800da1c:	4576      	cmp	r6, lr
 800da1e:	46f4      	mov	ip, lr
 800da20:	d815      	bhi.n	800da4e <rshift+0x7e>
 800da22:	1a9b      	subs	r3, r3, r2
 800da24:	009a      	lsls	r2, r3, #2
 800da26:	3a04      	subs	r2, #4
 800da28:	3501      	adds	r5, #1
 800da2a:	42ae      	cmp	r6, r5
 800da2c:	bf38      	it	cc
 800da2e:	2200      	movcc	r2, #0
 800da30:	18a3      	adds	r3, r4, r2
 800da32:	50a7      	str	r7, [r4, r2]
 800da34:	b107      	cbz	r7, 800da38 <rshift+0x68>
 800da36:	3304      	adds	r3, #4
 800da38:	1b1a      	subs	r2, r3, r4
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da40:	bf08      	it	eq
 800da42:	2300      	moveq	r3, #0
 800da44:	6102      	str	r2, [r0, #16]
 800da46:	bf08      	it	eq
 800da48:	6143      	streq	r3, [r0, #20]
 800da4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4e:	f8dc c000 	ldr.w	ip, [ip]
 800da52:	fa0c fc08 	lsl.w	ip, ip, r8
 800da56:	ea4c 0707 	orr.w	r7, ip, r7
 800da5a:	f849 7b04 	str.w	r7, [r9], #4
 800da5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da62:	40cf      	lsrs	r7, r1
 800da64:	e7da      	b.n	800da1c <rshift+0x4c>
 800da66:	f851 cb04 	ldr.w	ip, [r1], #4
 800da6a:	f847 cf04 	str.w	ip, [r7, #4]!
 800da6e:	e7c3      	b.n	800d9f8 <rshift+0x28>
 800da70:	4623      	mov	r3, r4
 800da72:	e7e1      	b.n	800da38 <rshift+0x68>

0800da74 <__hexdig_fun>:
 800da74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800da78:	2b09      	cmp	r3, #9
 800da7a:	d802      	bhi.n	800da82 <__hexdig_fun+0xe>
 800da7c:	3820      	subs	r0, #32
 800da7e:	b2c0      	uxtb	r0, r0
 800da80:	4770      	bx	lr
 800da82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800da86:	2b05      	cmp	r3, #5
 800da88:	d801      	bhi.n	800da8e <__hexdig_fun+0x1a>
 800da8a:	3847      	subs	r0, #71	; 0x47
 800da8c:	e7f7      	b.n	800da7e <__hexdig_fun+0xa>
 800da8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800da92:	2b05      	cmp	r3, #5
 800da94:	d801      	bhi.n	800da9a <__hexdig_fun+0x26>
 800da96:	3827      	subs	r0, #39	; 0x27
 800da98:	e7f1      	b.n	800da7e <__hexdig_fun+0xa>
 800da9a:	2000      	movs	r0, #0
 800da9c:	4770      	bx	lr
	...

0800daa0 <__gethex>:
 800daa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa4:	ed2d 8b02 	vpush	{d8}
 800daa8:	b089      	sub	sp, #36	; 0x24
 800daaa:	ee08 0a10 	vmov	s16, r0
 800daae:	9304      	str	r3, [sp, #16]
 800dab0:	4bbc      	ldr	r3, [pc, #752]	; (800dda4 <__gethex+0x304>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	4618      	mov	r0, r3
 800dab8:	468b      	mov	fp, r1
 800daba:	4690      	mov	r8, r2
 800dabc:	f7f2 fbb2 	bl	8000224 <strlen>
 800dac0:	9b01      	ldr	r3, [sp, #4]
 800dac2:	f8db 2000 	ldr.w	r2, [fp]
 800dac6:	4403      	add	r3, r0
 800dac8:	4682      	mov	sl, r0
 800daca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dace:	9305      	str	r3, [sp, #20]
 800dad0:	1c93      	adds	r3, r2, #2
 800dad2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dad6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dada:	32fe      	adds	r2, #254	; 0xfe
 800dadc:	18d1      	adds	r1, r2, r3
 800dade:	461f      	mov	r7, r3
 800dae0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dae4:	9100      	str	r1, [sp, #0]
 800dae6:	2830      	cmp	r0, #48	; 0x30
 800dae8:	d0f8      	beq.n	800dadc <__gethex+0x3c>
 800daea:	f7ff ffc3 	bl	800da74 <__hexdig_fun>
 800daee:	4604      	mov	r4, r0
 800daf0:	2800      	cmp	r0, #0
 800daf2:	d13a      	bne.n	800db6a <__gethex+0xca>
 800daf4:	9901      	ldr	r1, [sp, #4]
 800daf6:	4652      	mov	r2, sl
 800daf8:	4638      	mov	r0, r7
 800dafa:	f001 fb4c 	bl	800f196 <strncmp>
 800dafe:	4605      	mov	r5, r0
 800db00:	2800      	cmp	r0, #0
 800db02:	d168      	bne.n	800dbd6 <__gethex+0x136>
 800db04:	f817 000a 	ldrb.w	r0, [r7, sl]
 800db08:	eb07 060a 	add.w	r6, r7, sl
 800db0c:	f7ff ffb2 	bl	800da74 <__hexdig_fun>
 800db10:	2800      	cmp	r0, #0
 800db12:	d062      	beq.n	800dbda <__gethex+0x13a>
 800db14:	4633      	mov	r3, r6
 800db16:	7818      	ldrb	r0, [r3, #0]
 800db18:	2830      	cmp	r0, #48	; 0x30
 800db1a:	461f      	mov	r7, r3
 800db1c:	f103 0301 	add.w	r3, r3, #1
 800db20:	d0f9      	beq.n	800db16 <__gethex+0x76>
 800db22:	f7ff ffa7 	bl	800da74 <__hexdig_fun>
 800db26:	2301      	movs	r3, #1
 800db28:	fab0 f480 	clz	r4, r0
 800db2c:	0964      	lsrs	r4, r4, #5
 800db2e:	4635      	mov	r5, r6
 800db30:	9300      	str	r3, [sp, #0]
 800db32:	463a      	mov	r2, r7
 800db34:	4616      	mov	r6, r2
 800db36:	3201      	adds	r2, #1
 800db38:	7830      	ldrb	r0, [r6, #0]
 800db3a:	f7ff ff9b 	bl	800da74 <__hexdig_fun>
 800db3e:	2800      	cmp	r0, #0
 800db40:	d1f8      	bne.n	800db34 <__gethex+0x94>
 800db42:	9901      	ldr	r1, [sp, #4]
 800db44:	4652      	mov	r2, sl
 800db46:	4630      	mov	r0, r6
 800db48:	f001 fb25 	bl	800f196 <strncmp>
 800db4c:	b980      	cbnz	r0, 800db70 <__gethex+0xd0>
 800db4e:	b94d      	cbnz	r5, 800db64 <__gethex+0xc4>
 800db50:	eb06 050a 	add.w	r5, r6, sl
 800db54:	462a      	mov	r2, r5
 800db56:	4616      	mov	r6, r2
 800db58:	3201      	adds	r2, #1
 800db5a:	7830      	ldrb	r0, [r6, #0]
 800db5c:	f7ff ff8a 	bl	800da74 <__hexdig_fun>
 800db60:	2800      	cmp	r0, #0
 800db62:	d1f8      	bne.n	800db56 <__gethex+0xb6>
 800db64:	1bad      	subs	r5, r5, r6
 800db66:	00ad      	lsls	r5, r5, #2
 800db68:	e004      	b.n	800db74 <__gethex+0xd4>
 800db6a:	2400      	movs	r4, #0
 800db6c:	4625      	mov	r5, r4
 800db6e:	e7e0      	b.n	800db32 <__gethex+0x92>
 800db70:	2d00      	cmp	r5, #0
 800db72:	d1f7      	bne.n	800db64 <__gethex+0xc4>
 800db74:	7833      	ldrb	r3, [r6, #0]
 800db76:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db7a:	2b50      	cmp	r3, #80	; 0x50
 800db7c:	d13b      	bne.n	800dbf6 <__gethex+0x156>
 800db7e:	7873      	ldrb	r3, [r6, #1]
 800db80:	2b2b      	cmp	r3, #43	; 0x2b
 800db82:	d02c      	beq.n	800dbde <__gethex+0x13e>
 800db84:	2b2d      	cmp	r3, #45	; 0x2d
 800db86:	d02e      	beq.n	800dbe6 <__gethex+0x146>
 800db88:	1c71      	adds	r1, r6, #1
 800db8a:	f04f 0900 	mov.w	r9, #0
 800db8e:	7808      	ldrb	r0, [r1, #0]
 800db90:	f7ff ff70 	bl	800da74 <__hexdig_fun>
 800db94:	1e43      	subs	r3, r0, #1
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b18      	cmp	r3, #24
 800db9a:	d82c      	bhi.n	800dbf6 <__gethex+0x156>
 800db9c:	f1a0 0210 	sub.w	r2, r0, #16
 800dba0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dba4:	f7ff ff66 	bl	800da74 <__hexdig_fun>
 800dba8:	1e43      	subs	r3, r0, #1
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	2b18      	cmp	r3, #24
 800dbae:	d91d      	bls.n	800dbec <__gethex+0x14c>
 800dbb0:	f1b9 0f00 	cmp.w	r9, #0
 800dbb4:	d000      	beq.n	800dbb8 <__gethex+0x118>
 800dbb6:	4252      	negs	r2, r2
 800dbb8:	4415      	add	r5, r2
 800dbba:	f8cb 1000 	str.w	r1, [fp]
 800dbbe:	b1e4      	cbz	r4, 800dbfa <__gethex+0x15a>
 800dbc0:	9b00      	ldr	r3, [sp, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	bf14      	ite	ne
 800dbc6:	2700      	movne	r7, #0
 800dbc8:	2706      	moveq	r7, #6
 800dbca:	4638      	mov	r0, r7
 800dbcc:	b009      	add	sp, #36	; 0x24
 800dbce:	ecbd 8b02 	vpop	{d8}
 800dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd6:	463e      	mov	r6, r7
 800dbd8:	4625      	mov	r5, r4
 800dbda:	2401      	movs	r4, #1
 800dbdc:	e7ca      	b.n	800db74 <__gethex+0xd4>
 800dbde:	f04f 0900 	mov.w	r9, #0
 800dbe2:	1cb1      	adds	r1, r6, #2
 800dbe4:	e7d3      	b.n	800db8e <__gethex+0xee>
 800dbe6:	f04f 0901 	mov.w	r9, #1
 800dbea:	e7fa      	b.n	800dbe2 <__gethex+0x142>
 800dbec:	230a      	movs	r3, #10
 800dbee:	fb03 0202 	mla	r2, r3, r2, r0
 800dbf2:	3a10      	subs	r2, #16
 800dbf4:	e7d4      	b.n	800dba0 <__gethex+0x100>
 800dbf6:	4631      	mov	r1, r6
 800dbf8:	e7df      	b.n	800dbba <__gethex+0x11a>
 800dbfa:	1bf3      	subs	r3, r6, r7
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	4621      	mov	r1, r4
 800dc00:	2b07      	cmp	r3, #7
 800dc02:	dc0b      	bgt.n	800dc1c <__gethex+0x17c>
 800dc04:	ee18 0a10 	vmov	r0, s16
 800dc08:	f000 fb26 	bl	800e258 <_Balloc>
 800dc0c:	4604      	mov	r4, r0
 800dc0e:	b940      	cbnz	r0, 800dc22 <__gethex+0x182>
 800dc10:	4b65      	ldr	r3, [pc, #404]	; (800dda8 <__gethex+0x308>)
 800dc12:	4602      	mov	r2, r0
 800dc14:	21de      	movs	r1, #222	; 0xde
 800dc16:	4865      	ldr	r0, [pc, #404]	; (800ddac <__gethex+0x30c>)
 800dc18:	f7fe fe4a 	bl	800c8b0 <__assert_func>
 800dc1c:	3101      	adds	r1, #1
 800dc1e:	105b      	asrs	r3, r3, #1
 800dc20:	e7ee      	b.n	800dc00 <__gethex+0x160>
 800dc22:	f100 0914 	add.w	r9, r0, #20
 800dc26:	f04f 0b00 	mov.w	fp, #0
 800dc2a:	f1ca 0301 	rsb	r3, sl, #1
 800dc2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc32:	f8cd b000 	str.w	fp, [sp]
 800dc36:	9306      	str	r3, [sp, #24]
 800dc38:	42b7      	cmp	r7, r6
 800dc3a:	d340      	bcc.n	800dcbe <__gethex+0x21e>
 800dc3c:	9802      	ldr	r0, [sp, #8]
 800dc3e:	9b00      	ldr	r3, [sp, #0]
 800dc40:	f840 3b04 	str.w	r3, [r0], #4
 800dc44:	eba0 0009 	sub.w	r0, r0, r9
 800dc48:	1080      	asrs	r0, r0, #2
 800dc4a:	0146      	lsls	r6, r0, #5
 800dc4c:	6120      	str	r0, [r4, #16]
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 fbf8 	bl	800e444 <__hi0bits>
 800dc54:	1a30      	subs	r0, r6, r0
 800dc56:	f8d8 6000 	ldr.w	r6, [r8]
 800dc5a:	42b0      	cmp	r0, r6
 800dc5c:	dd63      	ble.n	800dd26 <__gethex+0x286>
 800dc5e:	1b87      	subs	r7, r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	4620      	mov	r0, r4
 800dc64:	f000 ff92 	bl	800eb8c <__any_on>
 800dc68:	4682      	mov	sl, r0
 800dc6a:	b1a8      	cbz	r0, 800dc98 <__gethex+0x1f8>
 800dc6c:	1e7b      	subs	r3, r7, #1
 800dc6e:	1159      	asrs	r1, r3, #5
 800dc70:	f003 021f 	and.w	r2, r3, #31
 800dc74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dc78:	f04f 0a01 	mov.w	sl, #1
 800dc7c:	fa0a f202 	lsl.w	r2, sl, r2
 800dc80:	420a      	tst	r2, r1
 800dc82:	d009      	beq.n	800dc98 <__gethex+0x1f8>
 800dc84:	4553      	cmp	r3, sl
 800dc86:	dd05      	ble.n	800dc94 <__gethex+0x1f4>
 800dc88:	1eb9      	subs	r1, r7, #2
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f000 ff7e 	bl	800eb8c <__any_on>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d145      	bne.n	800dd20 <__gethex+0x280>
 800dc94:	f04f 0a02 	mov.w	sl, #2
 800dc98:	4639      	mov	r1, r7
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f7ff fe98 	bl	800d9d0 <rshift>
 800dca0:	443d      	add	r5, r7
 800dca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dca6:	42ab      	cmp	r3, r5
 800dca8:	da4c      	bge.n	800dd44 <__gethex+0x2a4>
 800dcaa:	ee18 0a10 	vmov	r0, s16
 800dcae:	4621      	mov	r1, r4
 800dcb0:	f000 fb12 	bl	800e2d8 <_Bfree>
 800dcb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	27a3      	movs	r7, #163	; 0xa3
 800dcbc:	e785      	b.n	800dbca <__gethex+0x12a>
 800dcbe:	1e73      	subs	r3, r6, #1
 800dcc0:	9a05      	ldr	r2, [sp, #20]
 800dcc2:	9303      	str	r3, [sp, #12]
 800dcc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d019      	beq.n	800dd00 <__gethex+0x260>
 800dccc:	f1bb 0f20 	cmp.w	fp, #32
 800dcd0:	d107      	bne.n	800dce2 <__gethex+0x242>
 800dcd2:	9b02      	ldr	r3, [sp, #8]
 800dcd4:	9a00      	ldr	r2, [sp, #0]
 800dcd6:	f843 2b04 	str.w	r2, [r3], #4
 800dcda:	9302      	str	r3, [sp, #8]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	469b      	mov	fp, r3
 800dce2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dce6:	f7ff fec5 	bl	800da74 <__hexdig_fun>
 800dcea:	9b00      	ldr	r3, [sp, #0]
 800dcec:	f000 000f 	and.w	r0, r0, #15
 800dcf0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dcf4:	4303      	orrs	r3, r0
 800dcf6:	9300      	str	r3, [sp, #0]
 800dcf8:	f10b 0b04 	add.w	fp, fp, #4
 800dcfc:	9b03      	ldr	r3, [sp, #12]
 800dcfe:	e00d      	b.n	800dd1c <__gethex+0x27c>
 800dd00:	9b03      	ldr	r3, [sp, #12]
 800dd02:	9a06      	ldr	r2, [sp, #24]
 800dd04:	4413      	add	r3, r2
 800dd06:	42bb      	cmp	r3, r7
 800dd08:	d3e0      	bcc.n	800dccc <__gethex+0x22c>
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	9901      	ldr	r1, [sp, #4]
 800dd0e:	9307      	str	r3, [sp, #28]
 800dd10:	4652      	mov	r2, sl
 800dd12:	f001 fa40 	bl	800f196 <strncmp>
 800dd16:	9b07      	ldr	r3, [sp, #28]
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	d1d7      	bne.n	800dccc <__gethex+0x22c>
 800dd1c:	461e      	mov	r6, r3
 800dd1e:	e78b      	b.n	800dc38 <__gethex+0x198>
 800dd20:	f04f 0a03 	mov.w	sl, #3
 800dd24:	e7b8      	b.n	800dc98 <__gethex+0x1f8>
 800dd26:	da0a      	bge.n	800dd3e <__gethex+0x29e>
 800dd28:	1a37      	subs	r7, r6, r0
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	ee18 0a10 	vmov	r0, s16
 800dd30:	463a      	mov	r2, r7
 800dd32:	f000 fced 	bl	800e710 <__lshift>
 800dd36:	1bed      	subs	r5, r5, r7
 800dd38:	4604      	mov	r4, r0
 800dd3a:	f100 0914 	add.w	r9, r0, #20
 800dd3e:	f04f 0a00 	mov.w	sl, #0
 800dd42:	e7ae      	b.n	800dca2 <__gethex+0x202>
 800dd44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dd48:	42a8      	cmp	r0, r5
 800dd4a:	dd72      	ble.n	800de32 <__gethex+0x392>
 800dd4c:	1b45      	subs	r5, r0, r5
 800dd4e:	42ae      	cmp	r6, r5
 800dd50:	dc36      	bgt.n	800ddc0 <__gethex+0x320>
 800dd52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d02a      	beq.n	800ddb0 <__gethex+0x310>
 800dd5a:	2b03      	cmp	r3, #3
 800dd5c:	d02c      	beq.n	800ddb8 <__gethex+0x318>
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d115      	bne.n	800dd8e <__gethex+0x2ee>
 800dd62:	42ae      	cmp	r6, r5
 800dd64:	d113      	bne.n	800dd8e <__gethex+0x2ee>
 800dd66:	2e01      	cmp	r6, #1
 800dd68:	d10b      	bne.n	800dd82 <__gethex+0x2e2>
 800dd6a:	9a04      	ldr	r2, [sp, #16]
 800dd6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd70:	6013      	str	r3, [r2, #0]
 800dd72:	2301      	movs	r3, #1
 800dd74:	6123      	str	r3, [r4, #16]
 800dd76:	f8c9 3000 	str.w	r3, [r9]
 800dd7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd7c:	2762      	movs	r7, #98	; 0x62
 800dd7e:	601c      	str	r4, [r3, #0]
 800dd80:	e723      	b.n	800dbca <__gethex+0x12a>
 800dd82:	1e71      	subs	r1, r6, #1
 800dd84:	4620      	mov	r0, r4
 800dd86:	f000 ff01 	bl	800eb8c <__any_on>
 800dd8a:	2800      	cmp	r0, #0
 800dd8c:	d1ed      	bne.n	800dd6a <__gethex+0x2ca>
 800dd8e:	ee18 0a10 	vmov	r0, s16
 800dd92:	4621      	mov	r1, r4
 800dd94:	f000 faa0 	bl	800e2d8 <_Bfree>
 800dd98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	6013      	str	r3, [r2, #0]
 800dd9e:	2750      	movs	r7, #80	; 0x50
 800dda0:	e713      	b.n	800dbca <__gethex+0x12a>
 800dda2:	bf00      	nop
 800dda4:	08011038 	.word	0x08011038
 800dda8:	08010f59 	.word	0x08010f59
 800ddac:	08010fcc 	.word	0x08010fcc
 800ddb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d1eb      	bne.n	800dd8e <__gethex+0x2ee>
 800ddb6:	e7d8      	b.n	800dd6a <__gethex+0x2ca>
 800ddb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1d5      	bne.n	800dd6a <__gethex+0x2ca>
 800ddbe:	e7e6      	b.n	800dd8e <__gethex+0x2ee>
 800ddc0:	1e6f      	subs	r7, r5, #1
 800ddc2:	f1ba 0f00 	cmp.w	sl, #0
 800ddc6:	d131      	bne.n	800de2c <__gethex+0x38c>
 800ddc8:	b127      	cbz	r7, 800ddd4 <__gethex+0x334>
 800ddca:	4639      	mov	r1, r7
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f000 fedd 	bl	800eb8c <__any_on>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	117b      	asrs	r3, r7, #5
 800ddd6:	2101      	movs	r1, #1
 800ddd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dddc:	f007 071f 	and.w	r7, r7, #31
 800dde0:	fa01 f707 	lsl.w	r7, r1, r7
 800dde4:	421f      	tst	r7, r3
 800dde6:	4629      	mov	r1, r5
 800dde8:	4620      	mov	r0, r4
 800ddea:	bf18      	it	ne
 800ddec:	f04a 0a02 	orrne.w	sl, sl, #2
 800ddf0:	1b76      	subs	r6, r6, r5
 800ddf2:	f7ff fded 	bl	800d9d0 <rshift>
 800ddf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ddfa:	2702      	movs	r7, #2
 800ddfc:	f1ba 0f00 	cmp.w	sl, #0
 800de00:	d048      	beq.n	800de94 <__gethex+0x3f4>
 800de02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de06:	2b02      	cmp	r3, #2
 800de08:	d015      	beq.n	800de36 <__gethex+0x396>
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d017      	beq.n	800de3e <__gethex+0x39e>
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d109      	bne.n	800de26 <__gethex+0x386>
 800de12:	f01a 0f02 	tst.w	sl, #2
 800de16:	d006      	beq.n	800de26 <__gethex+0x386>
 800de18:	f8d9 0000 	ldr.w	r0, [r9]
 800de1c:	ea4a 0a00 	orr.w	sl, sl, r0
 800de20:	f01a 0f01 	tst.w	sl, #1
 800de24:	d10e      	bne.n	800de44 <__gethex+0x3a4>
 800de26:	f047 0710 	orr.w	r7, r7, #16
 800de2a:	e033      	b.n	800de94 <__gethex+0x3f4>
 800de2c:	f04f 0a01 	mov.w	sl, #1
 800de30:	e7d0      	b.n	800ddd4 <__gethex+0x334>
 800de32:	2701      	movs	r7, #1
 800de34:	e7e2      	b.n	800ddfc <__gethex+0x35c>
 800de36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de38:	f1c3 0301 	rsb	r3, r3, #1
 800de3c:	9315      	str	r3, [sp, #84]	; 0x54
 800de3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de40:	2b00      	cmp	r3, #0
 800de42:	d0f0      	beq.n	800de26 <__gethex+0x386>
 800de44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de48:	f104 0314 	add.w	r3, r4, #20
 800de4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de54:	f04f 0c00 	mov.w	ip, #0
 800de58:	4618      	mov	r0, r3
 800de5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de62:	d01c      	beq.n	800de9e <__gethex+0x3fe>
 800de64:	3201      	adds	r2, #1
 800de66:	6002      	str	r2, [r0, #0]
 800de68:	2f02      	cmp	r7, #2
 800de6a:	f104 0314 	add.w	r3, r4, #20
 800de6e:	d13f      	bne.n	800def0 <__gethex+0x450>
 800de70:	f8d8 2000 	ldr.w	r2, [r8]
 800de74:	3a01      	subs	r2, #1
 800de76:	42b2      	cmp	r2, r6
 800de78:	d10a      	bne.n	800de90 <__gethex+0x3f0>
 800de7a:	1171      	asrs	r1, r6, #5
 800de7c:	2201      	movs	r2, #1
 800de7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de82:	f006 061f 	and.w	r6, r6, #31
 800de86:	fa02 f606 	lsl.w	r6, r2, r6
 800de8a:	421e      	tst	r6, r3
 800de8c:	bf18      	it	ne
 800de8e:	4617      	movne	r7, r2
 800de90:	f047 0720 	orr.w	r7, r7, #32
 800de94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de96:	601c      	str	r4, [r3, #0]
 800de98:	9b04      	ldr	r3, [sp, #16]
 800de9a:	601d      	str	r5, [r3, #0]
 800de9c:	e695      	b.n	800dbca <__gethex+0x12a>
 800de9e:	4299      	cmp	r1, r3
 800dea0:	f843 cc04 	str.w	ip, [r3, #-4]
 800dea4:	d8d8      	bhi.n	800de58 <__gethex+0x3b8>
 800dea6:	68a3      	ldr	r3, [r4, #8]
 800dea8:	459b      	cmp	fp, r3
 800deaa:	db19      	blt.n	800dee0 <__gethex+0x440>
 800deac:	6861      	ldr	r1, [r4, #4]
 800deae:	ee18 0a10 	vmov	r0, s16
 800deb2:	3101      	adds	r1, #1
 800deb4:	f000 f9d0 	bl	800e258 <_Balloc>
 800deb8:	4681      	mov	r9, r0
 800deba:	b918      	cbnz	r0, 800dec4 <__gethex+0x424>
 800debc:	4b1a      	ldr	r3, [pc, #104]	; (800df28 <__gethex+0x488>)
 800debe:	4602      	mov	r2, r0
 800dec0:	2184      	movs	r1, #132	; 0x84
 800dec2:	e6a8      	b.n	800dc16 <__gethex+0x176>
 800dec4:	6922      	ldr	r2, [r4, #16]
 800dec6:	3202      	adds	r2, #2
 800dec8:	f104 010c 	add.w	r1, r4, #12
 800decc:	0092      	lsls	r2, r2, #2
 800dece:	300c      	adds	r0, #12
 800ded0:	f000 f9b4 	bl	800e23c <memcpy>
 800ded4:	4621      	mov	r1, r4
 800ded6:	ee18 0a10 	vmov	r0, s16
 800deda:	f000 f9fd 	bl	800e2d8 <_Bfree>
 800dede:	464c      	mov	r4, r9
 800dee0:	6923      	ldr	r3, [r4, #16]
 800dee2:	1c5a      	adds	r2, r3, #1
 800dee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dee8:	6122      	str	r2, [r4, #16]
 800deea:	2201      	movs	r2, #1
 800deec:	615a      	str	r2, [r3, #20]
 800deee:	e7bb      	b.n	800de68 <__gethex+0x3c8>
 800def0:	6922      	ldr	r2, [r4, #16]
 800def2:	455a      	cmp	r2, fp
 800def4:	dd0b      	ble.n	800df0e <__gethex+0x46e>
 800def6:	2101      	movs	r1, #1
 800def8:	4620      	mov	r0, r4
 800defa:	f7ff fd69 	bl	800d9d0 <rshift>
 800defe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df02:	3501      	adds	r5, #1
 800df04:	42ab      	cmp	r3, r5
 800df06:	f6ff aed0 	blt.w	800dcaa <__gethex+0x20a>
 800df0a:	2701      	movs	r7, #1
 800df0c:	e7c0      	b.n	800de90 <__gethex+0x3f0>
 800df0e:	f016 061f 	ands.w	r6, r6, #31
 800df12:	d0fa      	beq.n	800df0a <__gethex+0x46a>
 800df14:	449a      	add	sl, r3
 800df16:	f1c6 0620 	rsb	r6, r6, #32
 800df1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800df1e:	f000 fa91 	bl	800e444 <__hi0bits>
 800df22:	42b0      	cmp	r0, r6
 800df24:	dbe7      	blt.n	800def6 <__gethex+0x456>
 800df26:	e7f0      	b.n	800df0a <__gethex+0x46a>
 800df28:	08010f59 	.word	0x08010f59

0800df2c <L_shift>:
 800df2c:	f1c2 0208 	rsb	r2, r2, #8
 800df30:	0092      	lsls	r2, r2, #2
 800df32:	b570      	push	{r4, r5, r6, lr}
 800df34:	f1c2 0620 	rsb	r6, r2, #32
 800df38:	6843      	ldr	r3, [r0, #4]
 800df3a:	6804      	ldr	r4, [r0, #0]
 800df3c:	fa03 f506 	lsl.w	r5, r3, r6
 800df40:	432c      	orrs	r4, r5
 800df42:	40d3      	lsrs	r3, r2
 800df44:	6004      	str	r4, [r0, #0]
 800df46:	f840 3f04 	str.w	r3, [r0, #4]!
 800df4a:	4288      	cmp	r0, r1
 800df4c:	d3f4      	bcc.n	800df38 <L_shift+0xc>
 800df4e:	bd70      	pop	{r4, r5, r6, pc}

0800df50 <__match>:
 800df50:	b530      	push	{r4, r5, lr}
 800df52:	6803      	ldr	r3, [r0, #0]
 800df54:	3301      	adds	r3, #1
 800df56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df5a:	b914      	cbnz	r4, 800df62 <__match+0x12>
 800df5c:	6003      	str	r3, [r0, #0]
 800df5e:	2001      	movs	r0, #1
 800df60:	bd30      	pop	{r4, r5, pc}
 800df62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800df6a:	2d19      	cmp	r5, #25
 800df6c:	bf98      	it	ls
 800df6e:	3220      	addls	r2, #32
 800df70:	42a2      	cmp	r2, r4
 800df72:	d0f0      	beq.n	800df56 <__match+0x6>
 800df74:	2000      	movs	r0, #0
 800df76:	e7f3      	b.n	800df60 <__match+0x10>

0800df78 <__hexnan>:
 800df78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	680b      	ldr	r3, [r1, #0]
 800df7e:	6801      	ldr	r1, [r0, #0]
 800df80:	115e      	asrs	r6, r3, #5
 800df82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df86:	f013 031f 	ands.w	r3, r3, #31
 800df8a:	b087      	sub	sp, #28
 800df8c:	bf18      	it	ne
 800df8e:	3604      	addne	r6, #4
 800df90:	2500      	movs	r5, #0
 800df92:	1f37      	subs	r7, r6, #4
 800df94:	4682      	mov	sl, r0
 800df96:	4690      	mov	r8, r2
 800df98:	9301      	str	r3, [sp, #4]
 800df9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df9e:	46b9      	mov	r9, r7
 800dfa0:	463c      	mov	r4, r7
 800dfa2:	9502      	str	r5, [sp, #8]
 800dfa4:	46ab      	mov	fp, r5
 800dfa6:	784a      	ldrb	r2, [r1, #1]
 800dfa8:	1c4b      	adds	r3, r1, #1
 800dfaa:	9303      	str	r3, [sp, #12]
 800dfac:	b342      	cbz	r2, 800e000 <__hexnan+0x88>
 800dfae:	4610      	mov	r0, r2
 800dfb0:	9105      	str	r1, [sp, #20]
 800dfb2:	9204      	str	r2, [sp, #16]
 800dfb4:	f7ff fd5e 	bl	800da74 <__hexdig_fun>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d14f      	bne.n	800e05c <__hexnan+0xe4>
 800dfbc:	9a04      	ldr	r2, [sp, #16]
 800dfbe:	9905      	ldr	r1, [sp, #20]
 800dfc0:	2a20      	cmp	r2, #32
 800dfc2:	d818      	bhi.n	800dff6 <__hexnan+0x7e>
 800dfc4:	9b02      	ldr	r3, [sp, #8]
 800dfc6:	459b      	cmp	fp, r3
 800dfc8:	dd13      	ble.n	800dff2 <__hexnan+0x7a>
 800dfca:	454c      	cmp	r4, r9
 800dfcc:	d206      	bcs.n	800dfdc <__hexnan+0x64>
 800dfce:	2d07      	cmp	r5, #7
 800dfd0:	dc04      	bgt.n	800dfdc <__hexnan+0x64>
 800dfd2:	462a      	mov	r2, r5
 800dfd4:	4649      	mov	r1, r9
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f7ff ffa8 	bl	800df2c <L_shift>
 800dfdc:	4544      	cmp	r4, r8
 800dfde:	d950      	bls.n	800e082 <__hexnan+0x10a>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f1a4 0904 	sub.w	r9, r4, #4
 800dfe6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfea:	f8cd b008 	str.w	fp, [sp, #8]
 800dfee:	464c      	mov	r4, r9
 800dff0:	461d      	mov	r5, r3
 800dff2:	9903      	ldr	r1, [sp, #12]
 800dff4:	e7d7      	b.n	800dfa6 <__hexnan+0x2e>
 800dff6:	2a29      	cmp	r2, #41	; 0x29
 800dff8:	d156      	bne.n	800e0a8 <__hexnan+0x130>
 800dffa:	3102      	adds	r1, #2
 800dffc:	f8ca 1000 	str.w	r1, [sl]
 800e000:	f1bb 0f00 	cmp.w	fp, #0
 800e004:	d050      	beq.n	800e0a8 <__hexnan+0x130>
 800e006:	454c      	cmp	r4, r9
 800e008:	d206      	bcs.n	800e018 <__hexnan+0xa0>
 800e00a:	2d07      	cmp	r5, #7
 800e00c:	dc04      	bgt.n	800e018 <__hexnan+0xa0>
 800e00e:	462a      	mov	r2, r5
 800e010:	4649      	mov	r1, r9
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff ff8a 	bl	800df2c <L_shift>
 800e018:	4544      	cmp	r4, r8
 800e01a:	d934      	bls.n	800e086 <__hexnan+0x10e>
 800e01c:	f1a8 0204 	sub.w	r2, r8, #4
 800e020:	4623      	mov	r3, r4
 800e022:	f853 1b04 	ldr.w	r1, [r3], #4
 800e026:	f842 1f04 	str.w	r1, [r2, #4]!
 800e02a:	429f      	cmp	r7, r3
 800e02c:	d2f9      	bcs.n	800e022 <__hexnan+0xaa>
 800e02e:	1b3b      	subs	r3, r7, r4
 800e030:	f023 0303 	bic.w	r3, r3, #3
 800e034:	3304      	adds	r3, #4
 800e036:	3401      	adds	r4, #1
 800e038:	3e03      	subs	r6, #3
 800e03a:	42b4      	cmp	r4, r6
 800e03c:	bf88      	it	hi
 800e03e:	2304      	movhi	r3, #4
 800e040:	4443      	add	r3, r8
 800e042:	2200      	movs	r2, #0
 800e044:	f843 2b04 	str.w	r2, [r3], #4
 800e048:	429f      	cmp	r7, r3
 800e04a:	d2fb      	bcs.n	800e044 <__hexnan+0xcc>
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	b91b      	cbnz	r3, 800e058 <__hexnan+0xe0>
 800e050:	4547      	cmp	r7, r8
 800e052:	d127      	bne.n	800e0a4 <__hexnan+0x12c>
 800e054:	2301      	movs	r3, #1
 800e056:	603b      	str	r3, [r7, #0]
 800e058:	2005      	movs	r0, #5
 800e05a:	e026      	b.n	800e0aa <__hexnan+0x132>
 800e05c:	3501      	adds	r5, #1
 800e05e:	2d08      	cmp	r5, #8
 800e060:	f10b 0b01 	add.w	fp, fp, #1
 800e064:	dd06      	ble.n	800e074 <__hexnan+0xfc>
 800e066:	4544      	cmp	r4, r8
 800e068:	d9c3      	bls.n	800dff2 <__hexnan+0x7a>
 800e06a:	2300      	movs	r3, #0
 800e06c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e070:	2501      	movs	r5, #1
 800e072:	3c04      	subs	r4, #4
 800e074:	6822      	ldr	r2, [r4, #0]
 800e076:	f000 000f 	and.w	r0, r0, #15
 800e07a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e07e:	6022      	str	r2, [r4, #0]
 800e080:	e7b7      	b.n	800dff2 <__hexnan+0x7a>
 800e082:	2508      	movs	r5, #8
 800e084:	e7b5      	b.n	800dff2 <__hexnan+0x7a>
 800e086:	9b01      	ldr	r3, [sp, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d0df      	beq.n	800e04c <__hexnan+0xd4>
 800e08c:	f04f 32ff 	mov.w	r2, #4294967295
 800e090:	f1c3 0320 	rsb	r3, r3, #32
 800e094:	fa22 f303 	lsr.w	r3, r2, r3
 800e098:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e09c:	401a      	ands	r2, r3
 800e09e:	f846 2c04 	str.w	r2, [r6, #-4]
 800e0a2:	e7d3      	b.n	800e04c <__hexnan+0xd4>
 800e0a4:	3f04      	subs	r7, #4
 800e0a6:	e7d1      	b.n	800e04c <__hexnan+0xd4>
 800e0a8:	2004      	movs	r0, #4
 800e0aa:	b007      	add	sp, #28
 800e0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0b0 <_getc_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	460c      	mov	r4, r1
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	b118      	cbz	r0, 800e0c0 <_getc_r+0x10>
 800e0b8:	6983      	ldr	r3, [r0, #24]
 800e0ba:	b90b      	cbnz	r3, 800e0c0 <_getc_r+0x10>
 800e0bc:	f7ff fbbc 	bl	800d838 <__sinit>
 800e0c0:	4b18      	ldr	r3, [pc, #96]	; (800e124 <_getc_r+0x74>)
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	d11e      	bne.n	800e104 <_getc_r+0x54>
 800e0c6:	686c      	ldr	r4, [r5, #4]
 800e0c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0ca:	07d8      	lsls	r0, r3, #31
 800e0cc:	d405      	bmi.n	800e0da <_getc_r+0x2a>
 800e0ce:	89a3      	ldrh	r3, [r4, #12]
 800e0d0:	0599      	lsls	r1, r3, #22
 800e0d2:	d402      	bmi.n	800e0da <_getc_r+0x2a>
 800e0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0d6:	f000 f830 	bl	800e13a <__retarget_lock_acquire_recursive>
 800e0da:	6863      	ldr	r3, [r4, #4]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	6063      	str	r3, [r4, #4]
 800e0e2:	da19      	bge.n	800e118 <_getc_r+0x68>
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	f000 ffcc 	bl	800f084 <__srget_r>
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0f0:	07da      	lsls	r2, r3, #31
 800e0f2:	d405      	bmi.n	800e100 <_getc_r+0x50>
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	059b      	lsls	r3, r3, #22
 800e0f8:	d402      	bmi.n	800e100 <_getc_r+0x50>
 800e0fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e0fc:	f000 f81e 	bl	800e13c <__retarget_lock_release_recursive>
 800e100:	4628      	mov	r0, r5
 800e102:	bd38      	pop	{r3, r4, r5, pc}
 800e104:	4b08      	ldr	r3, [pc, #32]	; (800e128 <_getc_r+0x78>)
 800e106:	429c      	cmp	r4, r3
 800e108:	d101      	bne.n	800e10e <_getc_r+0x5e>
 800e10a:	68ac      	ldr	r4, [r5, #8]
 800e10c:	e7dc      	b.n	800e0c8 <_getc_r+0x18>
 800e10e:	4b07      	ldr	r3, [pc, #28]	; (800e12c <_getc_r+0x7c>)
 800e110:	429c      	cmp	r4, r3
 800e112:	bf08      	it	eq
 800e114:	68ec      	ldreq	r4, [r5, #12]
 800e116:	e7d7      	b.n	800e0c8 <_getc_r+0x18>
 800e118:	6823      	ldr	r3, [r4, #0]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	6022      	str	r2, [r4, #0]
 800e11e:	781d      	ldrb	r5, [r3, #0]
 800e120:	e7e5      	b.n	800e0ee <_getc_r+0x3e>
 800e122:	bf00      	nop
 800e124:	08010f8c 	.word	0x08010f8c
 800e128:	08010fac 	.word	0x08010fac
 800e12c:	08010f6c 	.word	0x08010f6c

0800e130 <_localeconv_r>:
 800e130:	4800      	ldr	r0, [pc, #0]	; (800e134 <_localeconv_r+0x4>)
 800e132:	4770      	bx	lr
 800e134:	20000180 	.word	0x20000180

0800e138 <__retarget_lock_init_recursive>:
 800e138:	4770      	bx	lr

0800e13a <__retarget_lock_acquire_recursive>:
 800e13a:	4770      	bx	lr

0800e13c <__retarget_lock_release_recursive>:
 800e13c:	4770      	bx	lr

0800e13e <__swhatbuf_r>:
 800e13e:	b570      	push	{r4, r5, r6, lr}
 800e140:	460e      	mov	r6, r1
 800e142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e146:	2900      	cmp	r1, #0
 800e148:	b096      	sub	sp, #88	; 0x58
 800e14a:	4614      	mov	r4, r2
 800e14c:	461d      	mov	r5, r3
 800e14e:	da07      	bge.n	800e160 <__swhatbuf_r+0x22>
 800e150:	2300      	movs	r3, #0
 800e152:	602b      	str	r3, [r5, #0]
 800e154:	89b3      	ldrh	r3, [r6, #12]
 800e156:	061a      	lsls	r2, r3, #24
 800e158:	d410      	bmi.n	800e17c <__swhatbuf_r+0x3e>
 800e15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e15e:	e00e      	b.n	800e17e <__swhatbuf_r+0x40>
 800e160:	466a      	mov	r2, sp
 800e162:	f001 f861 	bl	800f228 <_fstat_r>
 800e166:	2800      	cmp	r0, #0
 800e168:	dbf2      	blt.n	800e150 <__swhatbuf_r+0x12>
 800e16a:	9a01      	ldr	r2, [sp, #4]
 800e16c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e174:	425a      	negs	r2, r3
 800e176:	415a      	adcs	r2, r3
 800e178:	602a      	str	r2, [r5, #0]
 800e17a:	e7ee      	b.n	800e15a <__swhatbuf_r+0x1c>
 800e17c:	2340      	movs	r3, #64	; 0x40
 800e17e:	2000      	movs	r0, #0
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	b016      	add	sp, #88	; 0x58
 800e184:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e188 <__smakebuf_r>:
 800e188:	898b      	ldrh	r3, [r1, #12]
 800e18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e18c:	079d      	lsls	r5, r3, #30
 800e18e:	4606      	mov	r6, r0
 800e190:	460c      	mov	r4, r1
 800e192:	d507      	bpl.n	800e1a4 <__smakebuf_r+0x1c>
 800e194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	6123      	str	r3, [r4, #16]
 800e19c:	2301      	movs	r3, #1
 800e19e:	6163      	str	r3, [r4, #20]
 800e1a0:	b002      	add	sp, #8
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	ab01      	add	r3, sp, #4
 800e1a6:	466a      	mov	r2, sp
 800e1a8:	f7ff ffc9 	bl	800e13e <__swhatbuf_r>
 800e1ac:	9900      	ldr	r1, [sp, #0]
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f000 fd6b 	bl	800ec8c <_malloc_r>
 800e1b6:	b948      	cbnz	r0, 800e1cc <__smakebuf_r+0x44>
 800e1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1bc:	059a      	lsls	r2, r3, #22
 800e1be:	d4ef      	bmi.n	800e1a0 <__smakebuf_r+0x18>
 800e1c0:	f023 0303 	bic.w	r3, r3, #3
 800e1c4:	f043 0302 	orr.w	r3, r3, #2
 800e1c8:	81a3      	strh	r3, [r4, #12]
 800e1ca:	e7e3      	b.n	800e194 <__smakebuf_r+0xc>
 800e1cc:	4b0d      	ldr	r3, [pc, #52]	; (800e204 <__smakebuf_r+0x7c>)
 800e1ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800e1d0:	89a3      	ldrh	r3, [r4, #12]
 800e1d2:	6020      	str	r0, [r4, #0]
 800e1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1d8:	81a3      	strh	r3, [r4, #12]
 800e1da:	9b00      	ldr	r3, [sp, #0]
 800e1dc:	6163      	str	r3, [r4, #20]
 800e1de:	9b01      	ldr	r3, [sp, #4]
 800e1e0:	6120      	str	r0, [r4, #16]
 800e1e2:	b15b      	cbz	r3, 800e1fc <__smakebuf_r+0x74>
 800e1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f001 f82f 	bl	800f24c <_isatty_r>
 800e1ee:	b128      	cbz	r0, 800e1fc <__smakebuf_r+0x74>
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	f023 0303 	bic.w	r3, r3, #3
 800e1f6:	f043 0301 	orr.w	r3, r3, #1
 800e1fa:	81a3      	strh	r3, [r4, #12]
 800e1fc:	89a0      	ldrh	r0, [r4, #12]
 800e1fe:	4305      	orrs	r5, r0
 800e200:	81a5      	strh	r5, [r4, #12]
 800e202:	e7cd      	b.n	800e1a0 <__smakebuf_r+0x18>
 800e204:	0800d7d1 	.word	0x0800d7d1

0800e208 <malloc>:
 800e208:	4b02      	ldr	r3, [pc, #8]	; (800e214 <malloc+0xc>)
 800e20a:	4601      	mov	r1, r0
 800e20c:	6818      	ldr	r0, [r3, #0]
 800e20e:	f000 bd3d 	b.w	800ec8c <_malloc_r>
 800e212:	bf00      	nop
 800e214:	20000028 	.word	0x20000028

0800e218 <__ascii_mbtowc>:
 800e218:	b082      	sub	sp, #8
 800e21a:	b901      	cbnz	r1, 800e21e <__ascii_mbtowc+0x6>
 800e21c:	a901      	add	r1, sp, #4
 800e21e:	b142      	cbz	r2, 800e232 <__ascii_mbtowc+0x1a>
 800e220:	b14b      	cbz	r3, 800e236 <__ascii_mbtowc+0x1e>
 800e222:	7813      	ldrb	r3, [r2, #0]
 800e224:	600b      	str	r3, [r1, #0]
 800e226:	7812      	ldrb	r2, [r2, #0]
 800e228:	1e10      	subs	r0, r2, #0
 800e22a:	bf18      	it	ne
 800e22c:	2001      	movne	r0, #1
 800e22e:	b002      	add	sp, #8
 800e230:	4770      	bx	lr
 800e232:	4610      	mov	r0, r2
 800e234:	e7fb      	b.n	800e22e <__ascii_mbtowc+0x16>
 800e236:	f06f 0001 	mvn.w	r0, #1
 800e23a:	e7f8      	b.n	800e22e <__ascii_mbtowc+0x16>

0800e23c <memcpy>:
 800e23c:	440a      	add	r2, r1
 800e23e:	4291      	cmp	r1, r2
 800e240:	f100 33ff 	add.w	r3, r0, #4294967295
 800e244:	d100      	bne.n	800e248 <memcpy+0xc>
 800e246:	4770      	bx	lr
 800e248:	b510      	push	{r4, lr}
 800e24a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e24e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e252:	4291      	cmp	r1, r2
 800e254:	d1f9      	bne.n	800e24a <memcpy+0xe>
 800e256:	bd10      	pop	{r4, pc}

0800e258 <_Balloc>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e25c:	4604      	mov	r4, r0
 800e25e:	460d      	mov	r5, r1
 800e260:	b976      	cbnz	r6, 800e280 <_Balloc+0x28>
 800e262:	2010      	movs	r0, #16
 800e264:	f7ff ffd0 	bl	800e208 <malloc>
 800e268:	4602      	mov	r2, r0
 800e26a:	6260      	str	r0, [r4, #36]	; 0x24
 800e26c:	b920      	cbnz	r0, 800e278 <_Balloc+0x20>
 800e26e:	4b18      	ldr	r3, [pc, #96]	; (800e2d0 <_Balloc+0x78>)
 800e270:	4818      	ldr	r0, [pc, #96]	; (800e2d4 <_Balloc+0x7c>)
 800e272:	2166      	movs	r1, #102	; 0x66
 800e274:	f7fe fb1c 	bl	800c8b0 <__assert_func>
 800e278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e27c:	6006      	str	r6, [r0, #0]
 800e27e:	60c6      	str	r6, [r0, #12]
 800e280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e282:	68f3      	ldr	r3, [r6, #12]
 800e284:	b183      	cbz	r3, 800e2a8 <_Balloc+0x50>
 800e286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e28e:	b9b8      	cbnz	r0, 800e2c0 <_Balloc+0x68>
 800e290:	2101      	movs	r1, #1
 800e292:	fa01 f605 	lsl.w	r6, r1, r5
 800e296:	1d72      	adds	r2, r6, #5
 800e298:	0092      	lsls	r2, r2, #2
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 fc97 	bl	800ebce <_calloc_r>
 800e2a0:	b160      	cbz	r0, 800e2bc <_Balloc+0x64>
 800e2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2a6:	e00e      	b.n	800e2c6 <_Balloc+0x6e>
 800e2a8:	2221      	movs	r2, #33	; 0x21
 800e2aa:	2104      	movs	r1, #4
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f000 fc8e 	bl	800ebce <_calloc_r>
 800e2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2b4:	60f0      	str	r0, [r6, #12]
 800e2b6:	68db      	ldr	r3, [r3, #12]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d1e4      	bne.n	800e286 <_Balloc+0x2e>
 800e2bc:	2000      	movs	r0, #0
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	6802      	ldr	r2, [r0, #0]
 800e2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e2cc:	e7f7      	b.n	800e2be <_Balloc+0x66>
 800e2ce:	bf00      	nop
 800e2d0:	08010d38 	.word	0x08010d38
 800e2d4:	0801104c 	.word	0x0801104c

0800e2d8 <_Bfree>:
 800e2d8:	b570      	push	{r4, r5, r6, lr}
 800e2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e2dc:	4605      	mov	r5, r0
 800e2de:	460c      	mov	r4, r1
 800e2e0:	b976      	cbnz	r6, 800e300 <_Bfree+0x28>
 800e2e2:	2010      	movs	r0, #16
 800e2e4:	f7ff ff90 	bl	800e208 <malloc>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800e2ec:	b920      	cbnz	r0, 800e2f8 <_Bfree+0x20>
 800e2ee:	4b09      	ldr	r3, [pc, #36]	; (800e314 <_Bfree+0x3c>)
 800e2f0:	4809      	ldr	r0, [pc, #36]	; (800e318 <_Bfree+0x40>)
 800e2f2:	218a      	movs	r1, #138	; 0x8a
 800e2f4:	f7fe fadc 	bl	800c8b0 <__assert_func>
 800e2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2fc:	6006      	str	r6, [r0, #0]
 800e2fe:	60c6      	str	r6, [r0, #12]
 800e300:	b13c      	cbz	r4, 800e312 <_Bfree+0x3a>
 800e302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e304:	6862      	ldr	r2, [r4, #4]
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e30c:	6021      	str	r1, [r4, #0]
 800e30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e312:	bd70      	pop	{r4, r5, r6, pc}
 800e314:	08010d38 	.word	0x08010d38
 800e318:	0801104c 	.word	0x0801104c

0800e31c <__multadd>:
 800e31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e320:	690e      	ldr	r6, [r1, #16]
 800e322:	4607      	mov	r7, r0
 800e324:	4698      	mov	r8, r3
 800e326:	460c      	mov	r4, r1
 800e328:	f101 0014 	add.w	r0, r1, #20
 800e32c:	2300      	movs	r3, #0
 800e32e:	6805      	ldr	r5, [r0, #0]
 800e330:	b2a9      	uxth	r1, r5
 800e332:	fb02 8101 	mla	r1, r2, r1, r8
 800e336:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e33a:	0c2d      	lsrs	r5, r5, #16
 800e33c:	fb02 c505 	mla	r5, r2, r5, ip
 800e340:	b289      	uxth	r1, r1
 800e342:	3301      	adds	r3, #1
 800e344:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e348:	429e      	cmp	r6, r3
 800e34a:	f840 1b04 	str.w	r1, [r0], #4
 800e34e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e352:	dcec      	bgt.n	800e32e <__multadd+0x12>
 800e354:	f1b8 0f00 	cmp.w	r8, #0
 800e358:	d022      	beq.n	800e3a0 <__multadd+0x84>
 800e35a:	68a3      	ldr	r3, [r4, #8]
 800e35c:	42b3      	cmp	r3, r6
 800e35e:	dc19      	bgt.n	800e394 <__multadd+0x78>
 800e360:	6861      	ldr	r1, [r4, #4]
 800e362:	4638      	mov	r0, r7
 800e364:	3101      	adds	r1, #1
 800e366:	f7ff ff77 	bl	800e258 <_Balloc>
 800e36a:	4605      	mov	r5, r0
 800e36c:	b928      	cbnz	r0, 800e37a <__multadd+0x5e>
 800e36e:	4602      	mov	r2, r0
 800e370:	4b0d      	ldr	r3, [pc, #52]	; (800e3a8 <__multadd+0x8c>)
 800e372:	480e      	ldr	r0, [pc, #56]	; (800e3ac <__multadd+0x90>)
 800e374:	21b5      	movs	r1, #181	; 0xb5
 800e376:	f7fe fa9b 	bl	800c8b0 <__assert_func>
 800e37a:	6922      	ldr	r2, [r4, #16]
 800e37c:	3202      	adds	r2, #2
 800e37e:	f104 010c 	add.w	r1, r4, #12
 800e382:	0092      	lsls	r2, r2, #2
 800e384:	300c      	adds	r0, #12
 800e386:	f7ff ff59 	bl	800e23c <memcpy>
 800e38a:	4621      	mov	r1, r4
 800e38c:	4638      	mov	r0, r7
 800e38e:	f7ff ffa3 	bl	800e2d8 <_Bfree>
 800e392:	462c      	mov	r4, r5
 800e394:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e398:	3601      	adds	r6, #1
 800e39a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e39e:	6126      	str	r6, [r4, #16]
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a6:	bf00      	nop
 800e3a8:	08010f59 	.word	0x08010f59
 800e3ac:	0801104c 	.word	0x0801104c

0800e3b0 <__s2b>:
 800e3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	460c      	mov	r4, r1
 800e3b6:	4615      	mov	r5, r2
 800e3b8:	461f      	mov	r7, r3
 800e3ba:	2209      	movs	r2, #9
 800e3bc:	3308      	adds	r3, #8
 800e3be:	4606      	mov	r6, r0
 800e3c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	db09      	blt.n	800e3e0 <__s2b+0x30>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f7ff ff43 	bl	800e258 <_Balloc>
 800e3d2:	b940      	cbnz	r0, 800e3e6 <__s2b+0x36>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	4b19      	ldr	r3, [pc, #100]	; (800e43c <__s2b+0x8c>)
 800e3d8:	4819      	ldr	r0, [pc, #100]	; (800e440 <__s2b+0x90>)
 800e3da:	21ce      	movs	r1, #206	; 0xce
 800e3dc:	f7fe fa68 	bl	800c8b0 <__assert_func>
 800e3e0:	0052      	lsls	r2, r2, #1
 800e3e2:	3101      	adds	r1, #1
 800e3e4:	e7f0      	b.n	800e3c8 <__s2b+0x18>
 800e3e6:	9b08      	ldr	r3, [sp, #32]
 800e3e8:	6143      	str	r3, [r0, #20]
 800e3ea:	2d09      	cmp	r5, #9
 800e3ec:	f04f 0301 	mov.w	r3, #1
 800e3f0:	6103      	str	r3, [r0, #16]
 800e3f2:	dd16      	ble.n	800e422 <__s2b+0x72>
 800e3f4:	f104 0909 	add.w	r9, r4, #9
 800e3f8:	46c8      	mov	r8, r9
 800e3fa:	442c      	add	r4, r5
 800e3fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e400:	4601      	mov	r1, r0
 800e402:	3b30      	subs	r3, #48	; 0x30
 800e404:	220a      	movs	r2, #10
 800e406:	4630      	mov	r0, r6
 800e408:	f7ff ff88 	bl	800e31c <__multadd>
 800e40c:	45a0      	cmp	r8, r4
 800e40e:	d1f5      	bne.n	800e3fc <__s2b+0x4c>
 800e410:	f1a5 0408 	sub.w	r4, r5, #8
 800e414:	444c      	add	r4, r9
 800e416:	1b2d      	subs	r5, r5, r4
 800e418:	1963      	adds	r3, r4, r5
 800e41a:	42bb      	cmp	r3, r7
 800e41c:	db04      	blt.n	800e428 <__s2b+0x78>
 800e41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e422:	340a      	adds	r4, #10
 800e424:	2509      	movs	r5, #9
 800e426:	e7f6      	b.n	800e416 <__s2b+0x66>
 800e428:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e42c:	4601      	mov	r1, r0
 800e42e:	3b30      	subs	r3, #48	; 0x30
 800e430:	220a      	movs	r2, #10
 800e432:	4630      	mov	r0, r6
 800e434:	f7ff ff72 	bl	800e31c <__multadd>
 800e438:	e7ee      	b.n	800e418 <__s2b+0x68>
 800e43a:	bf00      	nop
 800e43c:	08010f59 	.word	0x08010f59
 800e440:	0801104c 	.word	0x0801104c

0800e444 <__hi0bits>:
 800e444:	0c03      	lsrs	r3, r0, #16
 800e446:	041b      	lsls	r3, r3, #16
 800e448:	b9d3      	cbnz	r3, 800e480 <__hi0bits+0x3c>
 800e44a:	0400      	lsls	r0, r0, #16
 800e44c:	2310      	movs	r3, #16
 800e44e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e452:	bf04      	itt	eq
 800e454:	0200      	lsleq	r0, r0, #8
 800e456:	3308      	addeq	r3, #8
 800e458:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e45c:	bf04      	itt	eq
 800e45e:	0100      	lsleq	r0, r0, #4
 800e460:	3304      	addeq	r3, #4
 800e462:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e466:	bf04      	itt	eq
 800e468:	0080      	lsleq	r0, r0, #2
 800e46a:	3302      	addeq	r3, #2
 800e46c:	2800      	cmp	r0, #0
 800e46e:	db05      	blt.n	800e47c <__hi0bits+0x38>
 800e470:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e474:	f103 0301 	add.w	r3, r3, #1
 800e478:	bf08      	it	eq
 800e47a:	2320      	moveq	r3, #32
 800e47c:	4618      	mov	r0, r3
 800e47e:	4770      	bx	lr
 800e480:	2300      	movs	r3, #0
 800e482:	e7e4      	b.n	800e44e <__hi0bits+0xa>

0800e484 <__lo0bits>:
 800e484:	6803      	ldr	r3, [r0, #0]
 800e486:	f013 0207 	ands.w	r2, r3, #7
 800e48a:	4601      	mov	r1, r0
 800e48c:	d00b      	beq.n	800e4a6 <__lo0bits+0x22>
 800e48e:	07da      	lsls	r2, r3, #31
 800e490:	d424      	bmi.n	800e4dc <__lo0bits+0x58>
 800e492:	0798      	lsls	r0, r3, #30
 800e494:	bf49      	itett	mi
 800e496:	085b      	lsrmi	r3, r3, #1
 800e498:	089b      	lsrpl	r3, r3, #2
 800e49a:	2001      	movmi	r0, #1
 800e49c:	600b      	strmi	r3, [r1, #0]
 800e49e:	bf5c      	itt	pl
 800e4a0:	600b      	strpl	r3, [r1, #0]
 800e4a2:	2002      	movpl	r0, #2
 800e4a4:	4770      	bx	lr
 800e4a6:	b298      	uxth	r0, r3
 800e4a8:	b9b0      	cbnz	r0, 800e4d8 <__lo0bits+0x54>
 800e4aa:	0c1b      	lsrs	r3, r3, #16
 800e4ac:	2010      	movs	r0, #16
 800e4ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e4b2:	bf04      	itt	eq
 800e4b4:	0a1b      	lsreq	r3, r3, #8
 800e4b6:	3008      	addeq	r0, #8
 800e4b8:	071a      	lsls	r2, r3, #28
 800e4ba:	bf04      	itt	eq
 800e4bc:	091b      	lsreq	r3, r3, #4
 800e4be:	3004      	addeq	r0, #4
 800e4c0:	079a      	lsls	r2, r3, #30
 800e4c2:	bf04      	itt	eq
 800e4c4:	089b      	lsreq	r3, r3, #2
 800e4c6:	3002      	addeq	r0, #2
 800e4c8:	07da      	lsls	r2, r3, #31
 800e4ca:	d403      	bmi.n	800e4d4 <__lo0bits+0x50>
 800e4cc:	085b      	lsrs	r3, r3, #1
 800e4ce:	f100 0001 	add.w	r0, r0, #1
 800e4d2:	d005      	beq.n	800e4e0 <__lo0bits+0x5c>
 800e4d4:	600b      	str	r3, [r1, #0]
 800e4d6:	4770      	bx	lr
 800e4d8:	4610      	mov	r0, r2
 800e4da:	e7e8      	b.n	800e4ae <__lo0bits+0x2a>
 800e4dc:	2000      	movs	r0, #0
 800e4de:	4770      	bx	lr
 800e4e0:	2020      	movs	r0, #32
 800e4e2:	4770      	bx	lr

0800e4e4 <__i2b>:
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	460c      	mov	r4, r1
 800e4e8:	2101      	movs	r1, #1
 800e4ea:	f7ff feb5 	bl	800e258 <_Balloc>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	b928      	cbnz	r0, 800e4fe <__i2b+0x1a>
 800e4f2:	4b05      	ldr	r3, [pc, #20]	; (800e508 <__i2b+0x24>)
 800e4f4:	4805      	ldr	r0, [pc, #20]	; (800e50c <__i2b+0x28>)
 800e4f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e4fa:	f7fe f9d9 	bl	800c8b0 <__assert_func>
 800e4fe:	2301      	movs	r3, #1
 800e500:	6144      	str	r4, [r0, #20]
 800e502:	6103      	str	r3, [r0, #16]
 800e504:	bd10      	pop	{r4, pc}
 800e506:	bf00      	nop
 800e508:	08010f59 	.word	0x08010f59
 800e50c:	0801104c 	.word	0x0801104c

0800e510 <__multiply>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	4614      	mov	r4, r2
 800e516:	690a      	ldr	r2, [r1, #16]
 800e518:	6923      	ldr	r3, [r4, #16]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	bfb8      	it	lt
 800e51e:	460b      	movlt	r3, r1
 800e520:	460d      	mov	r5, r1
 800e522:	bfbc      	itt	lt
 800e524:	4625      	movlt	r5, r4
 800e526:	461c      	movlt	r4, r3
 800e528:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e52c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e530:	68ab      	ldr	r3, [r5, #8]
 800e532:	6869      	ldr	r1, [r5, #4]
 800e534:	eb0a 0709 	add.w	r7, sl, r9
 800e538:	42bb      	cmp	r3, r7
 800e53a:	b085      	sub	sp, #20
 800e53c:	bfb8      	it	lt
 800e53e:	3101      	addlt	r1, #1
 800e540:	f7ff fe8a 	bl	800e258 <_Balloc>
 800e544:	b930      	cbnz	r0, 800e554 <__multiply+0x44>
 800e546:	4602      	mov	r2, r0
 800e548:	4b42      	ldr	r3, [pc, #264]	; (800e654 <__multiply+0x144>)
 800e54a:	4843      	ldr	r0, [pc, #268]	; (800e658 <__multiply+0x148>)
 800e54c:	f240 115d 	movw	r1, #349	; 0x15d
 800e550:	f7fe f9ae 	bl	800c8b0 <__assert_func>
 800e554:	f100 0614 	add.w	r6, r0, #20
 800e558:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e55c:	4633      	mov	r3, r6
 800e55e:	2200      	movs	r2, #0
 800e560:	4543      	cmp	r3, r8
 800e562:	d31e      	bcc.n	800e5a2 <__multiply+0x92>
 800e564:	f105 0c14 	add.w	ip, r5, #20
 800e568:	f104 0314 	add.w	r3, r4, #20
 800e56c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e570:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e574:	9202      	str	r2, [sp, #8]
 800e576:	ebac 0205 	sub.w	r2, ip, r5
 800e57a:	3a15      	subs	r2, #21
 800e57c:	f022 0203 	bic.w	r2, r2, #3
 800e580:	3204      	adds	r2, #4
 800e582:	f105 0115 	add.w	r1, r5, #21
 800e586:	458c      	cmp	ip, r1
 800e588:	bf38      	it	cc
 800e58a:	2204      	movcc	r2, #4
 800e58c:	9201      	str	r2, [sp, #4]
 800e58e:	9a02      	ldr	r2, [sp, #8]
 800e590:	9303      	str	r3, [sp, #12]
 800e592:	429a      	cmp	r2, r3
 800e594:	d808      	bhi.n	800e5a8 <__multiply+0x98>
 800e596:	2f00      	cmp	r7, #0
 800e598:	dc55      	bgt.n	800e646 <__multiply+0x136>
 800e59a:	6107      	str	r7, [r0, #16]
 800e59c:	b005      	add	sp, #20
 800e59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a2:	f843 2b04 	str.w	r2, [r3], #4
 800e5a6:	e7db      	b.n	800e560 <__multiply+0x50>
 800e5a8:	f8b3 a000 	ldrh.w	sl, [r3]
 800e5ac:	f1ba 0f00 	cmp.w	sl, #0
 800e5b0:	d020      	beq.n	800e5f4 <__multiply+0xe4>
 800e5b2:	f105 0e14 	add.w	lr, r5, #20
 800e5b6:	46b1      	mov	r9, r6
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e5be:	f8d9 b000 	ldr.w	fp, [r9]
 800e5c2:	b2a1      	uxth	r1, r4
 800e5c4:	fa1f fb8b 	uxth.w	fp, fp
 800e5c8:	fb0a b101 	mla	r1, sl, r1, fp
 800e5cc:	4411      	add	r1, r2
 800e5ce:	f8d9 2000 	ldr.w	r2, [r9]
 800e5d2:	0c24      	lsrs	r4, r4, #16
 800e5d4:	0c12      	lsrs	r2, r2, #16
 800e5d6:	fb0a 2404 	mla	r4, sl, r4, r2
 800e5da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e5de:	b289      	uxth	r1, r1
 800e5e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e5e4:	45f4      	cmp	ip, lr
 800e5e6:	f849 1b04 	str.w	r1, [r9], #4
 800e5ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e5ee:	d8e4      	bhi.n	800e5ba <__multiply+0xaa>
 800e5f0:	9901      	ldr	r1, [sp, #4]
 800e5f2:	5072      	str	r2, [r6, r1]
 800e5f4:	9a03      	ldr	r2, [sp, #12]
 800e5f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	f1b9 0f00 	cmp.w	r9, #0
 800e600:	d01f      	beq.n	800e642 <__multiply+0x132>
 800e602:	6834      	ldr	r4, [r6, #0]
 800e604:	f105 0114 	add.w	r1, r5, #20
 800e608:	46b6      	mov	lr, r6
 800e60a:	f04f 0a00 	mov.w	sl, #0
 800e60e:	880a      	ldrh	r2, [r1, #0]
 800e610:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e614:	fb09 b202 	mla	r2, r9, r2, fp
 800e618:	4492      	add	sl, r2
 800e61a:	b2a4      	uxth	r4, r4
 800e61c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e620:	f84e 4b04 	str.w	r4, [lr], #4
 800e624:	f851 4b04 	ldr.w	r4, [r1], #4
 800e628:	f8be 2000 	ldrh.w	r2, [lr]
 800e62c:	0c24      	lsrs	r4, r4, #16
 800e62e:	fb09 2404 	mla	r4, r9, r4, r2
 800e632:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e636:	458c      	cmp	ip, r1
 800e638:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e63c:	d8e7      	bhi.n	800e60e <__multiply+0xfe>
 800e63e:	9a01      	ldr	r2, [sp, #4]
 800e640:	50b4      	str	r4, [r6, r2]
 800e642:	3604      	adds	r6, #4
 800e644:	e7a3      	b.n	800e58e <__multiply+0x7e>
 800e646:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d1a5      	bne.n	800e59a <__multiply+0x8a>
 800e64e:	3f01      	subs	r7, #1
 800e650:	e7a1      	b.n	800e596 <__multiply+0x86>
 800e652:	bf00      	nop
 800e654:	08010f59 	.word	0x08010f59
 800e658:	0801104c 	.word	0x0801104c

0800e65c <__pow5mult>:
 800e65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e660:	4615      	mov	r5, r2
 800e662:	f012 0203 	ands.w	r2, r2, #3
 800e666:	4606      	mov	r6, r0
 800e668:	460f      	mov	r7, r1
 800e66a:	d007      	beq.n	800e67c <__pow5mult+0x20>
 800e66c:	4c25      	ldr	r4, [pc, #148]	; (800e704 <__pow5mult+0xa8>)
 800e66e:	3a01      	subs	r2, #1
 800e670:	2300      	movs	r3, #0
 800e672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e676:	f7ff fe51 	bl	800e31c <__multadd>
 800e67a:	4607      	mov	r7, r0
 800e67c:	10ad      	asrs	r5, r5, #2
 800e67e:	d03d      	beq.n	800e6fc <__pow5mult+0xa0>
 800e680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e682:	b97c      	cbnz	r4, 800e6a4 <__pow5mult+0x48>
 800e684:	2010      	movs	r0, #16
 800e686:	f7ff fdbf 	bl	800e208 <malloc>
 800e68a:	4602      	mov	r2, r0
 800e68c:	6270      	str	r0, [r6, #36]	; 0x24
 800e68e:	b928      	cbnz	r0, 800e69c <__pow5mult+0x40>
 800e690:	4b1d      	ldr	r3, [pc, #116]	; (800e708 <__pow5mult+0xac>)
 800e692:	481e      	ldr	r0, [pc, #120]	; (800e70c <__pow5mult+0xb0>)
 800e694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e698:	f7fe f90a 	bl	800c8b0 <__assert_func>
 800e69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e6a0:	6004      	str	r4, [r0, #0]
 800e6a2:	60c4      	str	r4, [r0, #12]
 800e6a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6ac:	b94c      	cbnz	r4, 800e6c2 <__pow5mult+0x66>
 800e6ae:	f240 2171 	movw	r1, #625	; 0x271
 800e6b2:	4630      	mov	r0, r6
 800e6b4:	f7ff ff16 	bl	800e4e4 <__i2b>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6be:	4604      	mov	r4, r0
 800e6c0:	6003      	str	r3, [r0, #0]
 800e6c2:	f04f 0900 	mov.w	r9, #0
 800e6c6:	07eb      	lsls	r3, r5, #31
 800e6c8:	d50a      	bpl.n	800e6e0 <__pow5mult+0x84>
 800e6ca:	4639      	mov	r1, r7
 800e6cc:	4622      	mov	r2, r4
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f7ff ff1e 	bl	800e510 <__multiply>
 800e6d4:	4639      	mov	r1, r7
 800e6d6:	4680      	mov	r8, r0
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff fdfd 	bl	800e2d8 <_Bfree>
 800e6de:	4647      	mov	r7, r8
 800e6e0:	106d      	asrs	r5, r5, #1
 800e6e2:	d00b      	beq.n	800e6fc <__pow5mult+0xa0>
 800e6e4:	6820      	ldr	r0, [r4, #0]
 800e6e6:	b938      	cbnz	r0, 800e6f8 <__pow5mult+0x9c>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	4621      	mov	r1, r4
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f7ff ff0f 	bl	800e510 <__multiply>
 800e6f2:	6020      	str	r0, [r4, #0]
 800e6f4:	f8c0 9000 	str.w	r9, [r0]
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	e7e4      	b.n	800e6c6 <__pow5mult+0x6a>
 800e6fc:	4638      	mov	r0, r7
 800e6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e702:	bf00      	nop
 800e704:	080111a0 	.word	0x080111a0
 800e708:	08010d38 	.word	0x08010d38
 800e70c:	0801104c 	.word	0x0801104c

0800e710 <__lshift>:
 800e710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e714:	460c      	mov	r4, r1
 800e716:	6849      	ldr	r1, [r1, #4]
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e71e:	68a3      	ldr	r3, [r4, #8]
 800e720:	4607      	mov	r7, r0
 800e722:	4691      	mov	r9, r2
 800e724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e728:	f108 0601 	add.w	r6, r8, #1
 800e72c:	42b3      	cmp	r3, r6
 800e72e:	db0b      	blt.n	800e748 <__lshift+0x38>
 800e730:	4638      	mov	r0, r7
 800e732:	f7ff fd91 	bl	800e258 <_Balloc>
 800e736:	4605      	mov	r5, r0
 800e738:	b948      	cbnz	r0, 800e74e <__lshift+0x3e>
 800e73a:	4602      	mov	r2, r0
 800e73c:	4b28      	ldr	r3, [pc, #160]	; (800e7e0 <__lshift+0xd0>)
 800e73e:	4829      	ldr	r0, [pc, #164]	; (800e7e4 <__lshift+0xd4>)
 800e740:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e744:	f7fe f8b4 	bl	800c8b0 <__assert_func>
 800e748:	3101      	adds	r1, #1
 800e74a:	005b      	lsls	r3, r3, #1
 800e74c:	e7ee      	b.n	800e72c <__lshift+0x1c>
 800e74e:	2300      	movs	r3, #0
 800e750:	f100 0114 	add.w	r1, r0, #20
 800e754:	f100 0210 	add.w	r2, r0, #16
 800e758:	4618      	mov	r0, r3
 800e75a:	4553      	cmp	r3, sl
 800e75c:	db33      	blt.n	800e7c6 <__lshift+0xb6>
 800e75e:	6920      	ldr	r0, [r4, #16]
 800e760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e764:	f104 0314 	add.w	r3, r4, #20
 800e768:	f019 091f 	ands.w	r9, r9, #31
 800e76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e770:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e774:	d02b      	beq.n	800e7ce <__lshift+0xbe>
 800e776:	f1c9 0e20 	rsb	lr, r9, #32
 800e77a:	468a      	mov	sl, r1
 800e77c:	2200      	movs	r2, #0
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	fa00 f009 	lsl.w	r0, r0, r9
 800e784:	4302      	orrs	r2, r0
 800e786:	f84a 2b04 	str.w	r2, [sl], #4
 800e78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e78e:	459c      	cmp	ip, r3
 800e790:	fa22 f20e 	lsr.w	r2, r2, lr
 800e794:	d8f3      	bhi.n	800e77e <__lshift+0x6e>
 800e796:	ebac 0304 	sub.w	r3, ip, r4
 800e79a:	3b15      	subs	r3, #21
 800e79c:	f023 0303 	bic.w	r3, r3, #3
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	f104 0015 	add.w	r0, r4, #21
 800e7a6:	4584      	cmp	ip, r0
 800e7a8:	bf38      	it	cc
 800e7aa:	2304      	movcc	r3, #4
 800e7ac:	50ca      	str	r2, [r1, r3]
 800e7ae:	b10a      	cbz	r2, 800e7b4 <__lshift+0xa4>
 800e7b0:	f108 0602 	add.w	r6, r8, #2
 800e7b4:	3e01      	subs	r6, #1
 800e7b6:	4638      	mov	r0, r7
 800e7b8:	612e      	str	r6, [r5, #16]
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	f7ff fd8c 	bl	800e2d8 <_Bfree>
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	e7c5      	b.n	800e75a <__lshift+0x4a>
 800e7ce:	3904      	subs	r1, #4
 800e7d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7d8:	459c      	cmp	ip, r3
 800e7da:	d8f9      	bhi.n	800e7d0 <__lshift+0xc0>
 800e7dc:	e7ea      	b.n	800e7b4 <__lshift+0xa4>
 800e7de:	bf00      	nop
 800e7e0:	08010f59 	.word	0x08010f59
 800e7e4:	0801104c 	.word	0x0801104c

0800e7e8 <__mcmp>:
 800e7e8:	b530      	push	{r4, r5, lr}
 800e7ea:	6902      	ldr	r2, [r0, #16]
 800e7ec:	690c      	ldr	r4, [r1, #16]
 800e7ee:	1b12      	subs	r2, r2, r4
 800e7f0:	d10e      	bne.n	800e810 <__mcmp+0x28>
 800e7f2:	f100 0314 	add.w	r3, r0, #20
 800e7f6:	3114      	adds	r1, #20
 800e7f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e7fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e800:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e804:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e808:	42a5      	cmp	r5, r4
 800e80a:	d003      	beq.n	800e814 <__mcmp+0x2c>
 800e80c:	d305      	bcc.n	800e81a <__mcmp+0x32>
 800e80e:	2201      	movs	r2, #1
 800e810:	4610      	mov	r0, r2
 800e812:	bd30      	pop	{r4, r5, pc}
 800e814:	4283      	cmp	r3, r0
 800e816:	d3f3      	bcc.n	800e800 <__mcmp+0x18>
 800e818:	e7fa      	b.n	800e810 <__mcmp+0x28>
 800e81a:	f04f 32ff 	mov.w	r2, #4294967295
 800e81e:	e7f7      	b.n	800e810 <__mcmp+0x28>

0800e820 <__mdiff>:
 800e820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e824:	460c      	mov	r4, r1
 800e826:	4606      	mov	r6, r0
 800e828:	4611      	mov	r1, r2
 800e82a:	4620      	mov	r0, r4
 800e82c:	4617      	mov	r7, r2
 800e82e:	f7ff ffdb 	bl	800e7e8 <__mcmp>
 800e832:	1e05      	subs	r5, r0, #0
 800e834:	d110      	bne.n	800e858 <__mdiff+0x38>
 800e836:	4629      	mov	r1, r5
 800e838:	4630      	mov	r0, r6
 800e83a:	f7ff fd0d 	bl	800e258 <_Balloc>
 800e83e:	b930      	cbnz	r0, 800e84e <__mdiff+0x2e>
 800e840:	4b39      	ldr	r3, [pc, #228]	; (800e928 <__mdiff+0x108>)
 800e842:	4602      	mov	r2, r0
 800e844:	f240 2132 	movw	r1, #562	; 0x232
 800e848:	4838      	ldr	r0, [pc, #224]	; (800e92c <__mdiff+0x10c>)
 800e84a:	f7fe f831 	bl	800c8b0 <__assert_func>
 800e84e:	2301      	movs	r3, #1
 800e850:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e858:	bfa4      	itt	ge
 800e85a:	463b      	movge	r3, r7
 800e85c:	4627      	movge	r7, r4
 800e85e:	4630      	mov	r0, r6
 800e860:	6879      	ldr	r1, [r7, #4]
 800e862:	bfa6      	itte	ge
 800e864:	461c      	movge	r4, r3
 800e866:	2500      	movge	r5, #0
 800e868:	2501      	movlt	r5, #1
 800e86a:	f7ff fcf5 	bl	800e258 <_Balloc>
 800e86e:	b920      	cbnz	r0, 800e87a <__mdiff+0x5a>
 800e870:	4b2d      	ldr	r3, [pc, #180]	; (800e928 <__mdiff+0x108>)
 800e872:	4602      	mov	r2, r0
 800e874:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e878:	e7e6      	b.n	800e848 <__mdiff+0x28>
 800e87a:	693e      	ldr	r6, [r7, #16]
 800e87c:	60c5      	str	r5, [r0, #12]
 800e87e:	6925      	ldr	r5, [r4, #16]
 800e880:	f107 0114 	add.w	r1, r7, #20
 800e884:	f104 0914 	add.w	r9, r4, #20
 800e888:	f100 0e14 	add.w	lr, r0, #20
 800e88c:	f107 0210 	add.w	r2, r7, #16
 800e890:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e894:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e898:	46f2      	mov	sl, lr
 800e89a:	2700      	movs	r7, #0
 800e89c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e8a4:	fa1f f883 	uxth.w	r8, r3
 800e8a8:	fa17 f78b 	uxtah	r7, r7, fp
 800e8ac:	0c1b      	lsrs	r3, r3, #16
 800e8ae:	eba7 0808 	sub.w	r8, r7, r8
 800e8b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e8b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e8ba:	fa1f f888 	uxth.w	r8, r8
 800e8be:	141f      	asrs	r7, r3, #16
 800e8c0:	454d      	cmp	r5, r9
 800e8c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e8c6:	f84a 3b04 	str.w	r3, [sl], #4
 800e8ca:	d8e7      	bhi.n	800e89c <__mdiff+0x7c>
 800e8cc:	1b2b      	subs	r3, r5, r4
 800e8ce:	3b15      	subs	r3, #21
 800e8d0:	f023 0303 	bic.w	r3, r3, #3
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	3415      	adds	r4, #21
 800e8d8:	42a5      	cmp	r5, r4
 800e8da:	bf38      	it	cc
 800e8dc:	2304      	movcc	r3, #4
 800e8de:	4419      	add	r1, r3
 800e8e0:	4473      	add	r3, lr
 800e8e2:	469e      	mov	lr, r3
 800e8e4:	460d      	mov	r5, r1
 800e8e6:	4565      	cmp	r5, ip
 800e8e8:	d30e      	bcc.n	800e908 <__mdiff+0xe8>
 800e8ea:	f10c 0203 	add.w	r2, ip, #3
 800e8ee:	1a52      	subs	r2, r2, r1
 800e8f0:	f022 0203 	bic.w	r2, r2, #3
 800e8f4:	3903      	subs	r1, #3
 800e8f6:	458c      	cmp	ip, r1
 800e8f8:	bf38      	it	cc
 800e8fa:	2200      	movcc	r2, #0
 800e8fc:	441a      	add	r2, r3
 800e8fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e902:	b17b      	cbz	r3, 800e924 <__mdiff+0x104>
 800e904:	6106      	str	r6, [r0, #16]
 800e906:	e7a5      	b.n	800e854 <__mdiff+0x34>
 800e908:	f855 8b04 	ldr.w	r8, [r5], #4
 800e90c:	fa17 f488 	uxtah	r4, r7, r8
 800e910:	1422      	asrs	r2, r4, #16
 800e912:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e916:	b2a4      	uxth	r4, r4
 800e918:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e91c:	f84e 4b04 	str.w	r4, [lr], #4
 800e920:	1417      	asrs	r7, r2, #16
 800e922:	e7e0      	b.n	800e8e6 <__mdiff+0xc6>
 800e924:	3e01      	subs	r6, #1
 800e926:	e7ea      	b.n	800e8fe <__mdiff+0xde>
 800e928:	08010f59 	.word	0x08010f59
 800e92c:	0801104c 	.word	0x0801104c

0800e930 <__ulp>:
 800e930:	b082      	sub	sp, #8
 800e932:	ed8d 0b00 	vstr	d0, [sp]
 800e936:	9b01      	ldr	r3, [sp, #4]
 800e938:	4912      	ldr	r1, [pc, #72]	; (800e984 <__ulp+0x54>)
 800e93a:	4019      	ands	r1, r3
 800e93c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e940:	2900      	cmp	r1, #0
 800e942:	dd05      	ble.n	800e950 <__ulp+0x20>
 800e944:	2200      	movs	r2, #0
 800e946:	460b      	mov	r3, r1
 800e948:	ec43 2b10 	vmov	d0, r2, r3
 800e94c:	b002      	add	sp, #8
 800e94e:	4770      	bx	lr
 800e950:	4249      	negs	r1, r1
 800e952:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e956:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e95a:	f04f 0200 	mov.w	r2, #0
 800e95e:	f04f 0300 	mov.w	r3, #0
 800e962:	da04      	bge.n	800e96e <__ulp+0x3e>
 800e964:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e968:	fa41 f300 	asr.w	r3, r1, r0
 800e96c:	e7ec      	b.n	800e948 <__ulp+0x18>
 800e96e:	f1a0 0114 	sub.w	r1, r0, #20
 800e972:	291e      	cmp	r1, #30
 800e974:	bfda      	itte	le
 800e976:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e97a:	fa20 f101 	lsrle.w	r1, r0, r1
 800e97e:	2101      	movgt	r1, #1
 800e980:	460a      	mov	r2, r1
 800e982:	e7e1      	b.n	800e948 <__ulp+0x18>
 800e984:	7ff00000 	.word	0x7ff00000

0800e988 <__b2d>:
 800e988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98a:	6905      	ldr	r5, [r0, #16]
 800e98c:	f100 0714 	add.w	r7, r0, #20
 800e990:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e994:	1f2e      	subs	r6, r5, #4
 800e996:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e99a:	4620      	mov	r0, r4
 800e99c:	f7ff fd52 	bl	800e444 <__hi0bits>
 800e9a0:	f1c0 0320 	rsb	r3, r0, #32
 800e9a4:	280a      	cmp	r0, #10
 800e9a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ea24 <__b2d+0x9c>
 800e9aa:	600b      	str	r3, [r1, #0]
 800e9ac:	dc14      	bgt.n	800e9d8 <__b2d+0x50>
 800e9ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800e9b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e9b6:	42b7      	cmp	r7, r6
 800e9b8:	ea41 030c 	orr.w	r3, r1, ip
 800e9bc:	bf34      	ite	cc
 800e9be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9c2:	2100      	movcs	r1, #0
 800e9c4:	3015      	adds	r0, #21
 800e9c6:	fa04 f000 	lsl.w	r0, r4, r0
 800e9ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800e9ce:	ea40 0201 	orr.w	r2, r0, r1
 800e9d2:	ec43 2b10 	vmov	d0, r2, r3
 800e9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9d8:	42b7      	cmp	r7, r6
 800e9da:	bf3a      	itte	cc
 800e9dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e9e4:	2100      	movcs	r1, #0
 800e9e6:	380b      	subs	r0, #11
 800e9e8:	d017      	beq.n	800ea1a <__b2d+0x92>
 800e9ea:	f1c0 0c20 	rsb	ip, r0, #32
 800e9ee:	fa04 f500 	lsl.w	r5, r4, r0
 800e9f2:	42be      	cmp	r6, r7
 800e9f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800e9f8:	ea45 0504 	orr.w	r5, r5, r4
 800e9fc:	bf8c      	ite	hi
 800e9fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ea02:	2400      	movls	r4, #0
 800ea04:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ea08:	fa01 f000 	lsl.w	r0, r1, r0
 800ea0c:	fa24 f40c 	lsr.w	r4, r4, ip
 800ea10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea14:	ea40 0204 	orr.w	r2, r0, r4
 800ea18:	e7db      	b.n	800e9d2 <__b2d+0x4a>
 800ea1a:	ea44 030c 	orr.w	r3, r4, ip
 800ea1e:	460a      	mov	r2, r1
 800ea20:	e7d7      	b.n	800e9d2 <__b2d+0x4a>
 800ea22:	bf00      	nop
 800ea24:	3ff00000 	.word	0x3ff00000

0800ea28 <__d2b>:
 800ea28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	4689      	mov	r9, r1
 800ea2e:	2101      	movs	r1, #1
 800ea30:	ec57 6b10 	vmov	r6, r7, d0
 800ea34:	4690      	mov	r8, r2
 800ea36:	f7ff fc0f 	bl	800e258 <_Balloc>
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	b930      	cbnz	r0, 800ea4c <__d2b+0x24>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <__d2b+0xb0>)
 800ea42:	4826      	ldr	r0, [pc, #152]	; (800eadc <__d2b+0xb4>)
 800ea44:	f240 310a 	movw	r1, #778	; 0x30a
 800ea48:	f7fd ff32 	bl	800c8b0 <__assert_func>
 800ea4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ea50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea54:	bb35      	cbnz	r5, 800eaa4 <__d2b+0x7c>
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	d028      	beq.n	800eaae <__d2b+0x86>
 800ea5c:	4668      	mov	r0, sp
 800ea5e:	9600      	str	r6, [sp, #0]
 800ea60:	f7ff fd10 	bl	800e484 <__lo0bits>
 800ea64:	9900      	ldr	r1, [sp, #0]
 800ea66:	b300      	cbz	r0, 800eaaa <__d2b+0x82>
 800ea68:	9a01      	ldr	r2, [sp, #4]
 800ea6a:	f1c0 0320 	rsb	r3, r0, #32
 800ea6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea72:	430b      	orrs	r3, r1
 800ea74:	40c2      	lsrs	r2, r0
 800ea76:	6163      	str	r3, [r4, #20]
 800ea78:	9201      	str	r2, [sp, #4]
 800ea7a:	9b01      	ldr	r3, [sp, #4]
 800ea7c:	61a3      	str	r3, [r4, #24]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bf14      	ite	ne
 800ea82:	2202      	movne	r2, #2
 800ea84:	2201      	moveq	r2, #1
 800ea86:	6122      	str	r2, [r4, #16]
 800ea88:	b1d5      	cbz	r5, 800eac0 <__d2b+0x98>
 800ea8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ea8e:	4405      	add	r5, r0
 800ea90:	f8c9 5000 	str.w	r5, [r9]
 800ea94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea98:	f8c8 0000 	str.w	r0, [r8]
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	b003      	add	sp, #12
 800eaa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eaa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaa8:	e7d5      	b.n	800ea56 <__d2b+0x2e>
 800eaaa:	6161      	str	r1, [r4, #20]
 800eaac:	e7e5      	b.n	800ea7a <__d2b+0x52>
 800eaae:	a801      	add	r0, sp, #4
 800eab0:	f7ff fce8 	bl	800e484 <__lo0bits>
 800eab4:	9b01      	ldr	r3, [sp, #4]
 800eab6:	6163      	str	r3, [r4, #20]
 800eab8:	2201      	movs	r2, #1
 800eaba:	6122      	str	r2, [r4, #16]
 800eabc:	3020      	adds	r0, #32
 800eabe:	e7e3      	b.n	800ea88 <__d2b+0x60>
 800eac0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eac4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eac8:	f8c9 0000 	str.w	r0, [r9]
 800eacc:	6918      	ldr	r0, [r3, #16]
 800eace:	f7ff fcb9 	bl	800e444 <__hi0bits>
 800ead2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ead6:	e7df      	b.n	800ea98 <__d2b+0x70>
 800ead8:	08010f59 	.word	0x08010f59
 800eadc:	0801104c 	.word	0x0801104c

0800eae0 <__ratio>:
 800eae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae4:	4688      	mov	r8, r1
 800eae6:	4669      	mov	r1, sp
 800eae8:	4681      	mov	r9, r0
 800eaea:	f7ff ff4d 	bl	800e988 <__b2d>
 800eaee:	a901      	add	r1, sp, #4
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	ec55 4b10 	vmov	r4, r5, d0
 800eaf6:	f7ff ff47 	bl	800e988 <__b2d>
 800eafa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eafe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eb02:	eba3 0c02 	sub.w	ip, r3, r2
 800eb06:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eb10:	ec51 0b10 	vmov	r0, r1, d0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	bfd6      	itet	le
 800eb18:	460a      	movle	r2, r1
 800eb1a:	462a      	movgt	r2, r5
 800eb1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eb20:	468b      	mov	fp, r1
 800eb22:	462f      	mov	r7, r5
 800eb24:	bfd4      	ite	le
 800eb26:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eb2e:	4620      	mov	r0, r4
 800eb30:	ee10 2a10 	vmov	r2, s0
 800eb34:	465b      	mov	r3, fp
 800eb36:	4639      	mov	r1, r7
 800eb38:	f7f1 feb8 	bl	80008ac <__aeabi_ddiv>
 800eb3c:	ec41 0b10 	vmov	d0, r0, r1
 800eb40:	b003      	add	sp, #12
 800eb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb46 <__copybits>:
 800eb46:	3901      	subs	r1, #1
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	1149      	asrs	r1, r1, #5
 800eb4c:	6914      	ldr	r4, [r2, #16]
 800eb4e:	3101      	adds	r1, #1
 800eb50:	f102 0314 	add.w	r3, r2, #20
 800eb54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb5c:	1f05      	subs	r5, r0, #4
 800eb5e:	42a3      	cmp	r3, r4
 800eb60:	d30c      	bcc.n	800eb7c <__copybits+0x36>
 800eb62:	1aa3      	subs	r3, r4, r2
 800eb64:	3b11      	subs	r3, #17
 800eb66:	f023 0303 	bic.w	r3, r3, #3
 800eb6a:	3211      	adds	r2, #17
 800eb6c:	42a2      	cmp	r2, r4
 800eb6e:	bf88      	it	hi
 800eb70:	2300      	movhi	r3, #0
 800eb72:	4418      	add	r0, r3
 800eb74:	2300      	movs	r3, #0
 800eb76:	4288      	cmp	r0, r1
 800eb78:	d305      	bcc.n	800eb86 <__copybits+0x40>
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
 800eb7c:	f853 6b04 	ldr.w	r6, [r3], #4
 800eb80:	f845 6f04 	str.w	r6, [r5, #4]!
 800eb84:	e7eb      	b.n	800eb5e <__copybits+0x18>
 800eb86:	f840 3b04 	str.w	r3, [r0], #4
 800eb8a:	e7f4      	b.n	800eb76 <__copybits+0x30>

0800eb8c <__any_on>:
 800eb8c:	f100 0214 	add.w	r2, r0, #20
 800eb90:	6900      	ldr	r0, [r0, #16]
 800eb92:	114b      	asrs	r3, r1, #5
 800eb94:	4298      	cmp	r0, r3
 800eb96:	b510      	push	{r4, lr}
 800eb98:	db11      	blt.n	800ebbe <__any_on+0x32>
 800eb9a:	dd0a      	ble.n	800ebb2 <__any_on+0x26>
 800eb9c:	f011 011f 	ands.w	r1, r1, #31
 800eba0:	d007      	beq.n	800ebb2 <__any_on+0x26>
 800eba2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eba6:	fa24 f001 	lsr.w	r0, r4, r1
 800ebaa:	fa00 f101 	lsl.w	r1, r0, r1
 800ebae:	428c      	cmp	r4, r1
 800ebb0:	d10b      	bne.n	800ebca <__any_on+0x3e>
 800ebb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d803      	bhi.n	800ebc2 <__any_on+0x36>
 800ebba:	2000      	movs	r0, #0
 800ebbc:	bd10      	pop	{r4, pc}
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	e7f7      	b.n	800ebb2 <__any_on+0x26>
 800ebc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ebc6:	2900      	cmp	r1, #0
 800ebc8:	d0f5      	beq.n	800ebb6 <__any_on+0x2a>
 800ebca:	2001      	movs	r0, #1
 800ebcc:	e7f6      	b.n	800ebbc <__any_on+0x30>

0800ebce <_calloc_r>:
 800ebce:	b513      	push	{r0, r1, r4, lr}
 800ebd0:	434a      	muls	r2, r1
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	9201      	str	r2, [sp, #4]
 800ebd6:	f000 f859 	bl	800ec8c <_malloc_r>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	b118      	cbz	r0, 800ebe6 <_calloc_r+0x18>
 800ebde:	9a01      	ldr	r2, [sp, #4]
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	f7fc f96b 	bl	800aebc <memset>
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	b002      	add	sp, #8
 800ebea:	bd10      	pop	{r4, pc}

0800ebec <_free_r>:
 800ebec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebee:	2900      	cmp	r1, #0
 800ebf0:	d048      	beq.n	800ec84 <_free_r+0x98>
 800ebf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebf6:	9001      	str	r0, [sp, #4]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f1a1 0404 	sub.w	r4, r1, #4
 800ebfe:	bfb8      	it	lt
 800ec00:	18e4      	addlt	r4, r4, r3
 800ec02:	f000 fb45 	bl	800f290 <__malloc_lock>
 800ec06:	4a20      	ldr	r2, [pc, #128]	; (800ec88 <_free_r+0x9c>)
 800ec08:	9801      	ldr	r0, [sp, #4]
 800ec0a:	6813      	ldr	r3, [r2, #0]
 800ec0c:	4615      	mov	r5, r2
 800ec0e:	b933      	cbnz	r3, 800ec1e <_free_r+0x32>
 800ec10:	6063      	str	r3, [r4, #4]
 800ec12:	6014      	str	r4, [r2, #0]
 800ec14:	b003      	add	sp, #12
 800ec16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec1a:	f000 bb3f 	b.w	800f29c <__malloc_unlock>
 800ec1e:	42a3      	cmp	r3, r4
 800ec20:	d90b      	bls.n	800ec3a <_free_r+0x4e>
 800ec22:	6821      	ldr	r1, [r4, #0]
 800ec24:	1862      	adds	r2, r4, r1
 800ec26:	4293      	cmp	r3, r2
 800ec28:	bf04      	itt	eq
 800ec2a:	681a      	ldreq	r2, [r3, #0]
 800ec2c:	685b      	ldreq	r3, [r3, #4]
 800ec2e:	6063      	str	r3, [r4, #4]
 800ec30:	bf04      	itt	eq
 800ec32:	1852      	addeq	r2, r2, r1
 800ec34:	6022      	streq	r2, [r4, #0]
 800ec36:	602c      	str	r4, [r5, #0]
 800ec38:	e7ec      	b.n	800ec14 <_free_r+0x28>
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	b10b      	cbz	r3, 800ec44 <_free_r+0x58>
 800ec40:	42a3      	cmp	r3, r4
 800ec42:	d9fa      	bls.n	800ec3a <_free_r+0x4e>
 800ec44:	6811      	ldr	r1, [r2, #0]
 800ec46:	1855      	adds	r5, r2, r1
 800ec48:	42a5      	cmp	r5, r4
 800ec4a:	d10b      	bne.n	800ec64 <_free_r+0x78>
 800ec4c:	6824      	ldr	r4, [r4, #0]
 800ec4e:	4421      	add	r1, r4
 800ec50:	1854      	adds	r4, r2, r1
 800ec52:	42a3      	cmp	r3, r4
 800ec54:	6011      	str	r1, [r2, #0]
 800ec56:	d1dd      	bne.n	800ec14 <_free_r+0x28>
 800ec58:	681c      	ldr	r4, [r3, #0]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	6053      	str	r3, [r2, #4]
 800ec5e:	4421      	add	r1, r4
 800ec60:	6011      	str	r1, [r2, #0]
 800ec62:	e7d7      	b.n	800ec14 <_free_r+0x28>
 800ec64:	d902      	bls.n	800ec6c <_free_r+0x80>
 800ec66:	230c      	movs	r3, #12
 800ec68:	6003      	str	r3, [r0, #0]
 800ec6a:	e7d3      	b.n	800ec14 <_free_r+0x28>
 800ec6c:	6825      	ldr	r5, [r4, #0]
 800ec6e:	1961      	adds	r1, r4, r5
 800ec70:	428b      	cmp	r3, r1
 800ec72:	bf04      	itt	eq
 800ec74:	6819      	ldreq	r1, [r3, #0]
 800ec76:	685b      	ldreq	r3, [r3, #4]
 800ec78:	6063      	str	r3, [r4, #4]
 800ec7a:	bf04      	itt	eq
 800ec7c:	1949      	addeq	r1, r1, r5
 800ec7e:	6021      	streq	r1, [r4, #0]
 800ec80:	6054      	str	r4, [r2, #4]
 800ec82:	e7c7      	b.n	800ec14 <_free_r+0x28>
 800ec84:	b003      	add	sp, #12
 800ec86:	bd30      	pop	{r4, r5, pc}
 800ec88:	20000288 	.word	0x20000288

0800ec8c <_malloc_r>:
 800ec8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec8e:	1ccd      	adds	r5, r1, #3
 800ec90:	f025 0503 	bic.w	r5, r5, #3
 800ec94:	3508      	adds	r5, #8
 800ec96:	2d0c      	cmp	r5, #12
 800ec98:	bf38      	it	cc
 800ec9a:	250c      	movcc	r5, #12
 800ec9c:	2d00      	cmp	r5, #0
 800ec9e:	4606      	mov	r6, r0
 800eca0:	db01      	blt.n	800eca6 <_malloc_r+0x1a>
 800eca2:	42a9      	cmp	r1, r5
 800eca4:	d903      	bls.n	800ecae <_malloc_r+0x22>
 800eca6:	230c      	movs	r3, #12
 800eca8:	6033      	str	r3, [r6, #0]
 800ecaa:	2000      	movs	r0, #0
 800ecac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecae:	f000 faef 	bl	800f290 <__malloc_lock>
 800ecb2:	4921      	ldr	r1, [pc, #132]	; (800ed38 <_malloc_r+0xac>)
 800ecb4:	680a      	ldr	r2, [r1, #0]
 800ecb6:	4614      	mov	r4, r2
 800ecb8:	b99c      	cbnz	r4, 800ece2 <_malloc_r+0x56>
 800ecba:	4f20      	ldr	r7, [pc, #128]	; (800ed3c <_malloc_r+0xb0>)
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	b923      	cbnz	r3, 800ecca <_malloc_r+0x3e>
 800ecc0:	4621      	mov	r1, r4
 800ecc2:	4630      	mov	r0, r6
 800ecc4:	f000 fa14 	bl	800f0f0 <_sbrk_r>
 800ecc8:	6038      	str	r0, [r7, #0]
 800ecca:	4629      	mov	r1, r5
 800eccc:	4630      	mov	r0, r6
 800ecce:	f000 fa0f 	bl	800f0f0 <_sbrk_r>
 800ecd2:	1c43      	adds	r3, r0, #1
 800ecd4:	d123      	bne.n	800ed1e <_malloc_r+0x92>
 800ecd6:	230c      	movs	r3, #12
 800ecd8:	6033      	str	r3, [r6, #0]
 800ecda:	4630      	mov	r0, r6
 800ecdc:	f000 fade 	bl	800f29c <__malloc_unlock>
 800ece0:	e7e3      	b.n	800ecaa <_malloc_r+0x1e>
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	1b5b      	subs	r3, r3, r5
 800ece6:	d417      	bmi.n	800ed18 <_malloc_r+0x8c>
 800ece8:	2b0b      	cmp	r3, #11
 800ecea:	d903      	bls.n	800ecf4 <_malloc_r+0x68>
 800ecec:	6023      	str	r3, [r4, #0]
 800ecee:	441c      	add	r4, r3
 800ecf0:	6025      	str	r5, [r4, #0]
 800ecf2:	e004      	b.n	800ecfe <_malloc_r+0x72>
 800ecf4:	6863      	ldr	r3, [r4, #4]
 800ecf6:	42a2      	cmp	r2, r4
 800ecf8:	bf0c      	ite	eq
 800ecfa:	600b      	streq	r3, [r1, #0]
 800ecfc:	6053      	strne	r3, [r2, #4]
 800ecfe:	4630      	mov	r0, r6
 800ed00:	f000 facc 	bl	800f29c <__malloc_unlock>
 800ed04:	f104 000b 	add.w	r0, r4, #11
 800ed08:	1d23      	adds	r3, r4, #4
 800ed0a:	f020 0007 	bic.w	r0, r0, #7
 800ed0e:	1ac2      	subs	r2, r0, r3
 800ed10:	d0cc      	beq.n	800ecac <_malloc_r+0x20>
 800ed12:	1a1b      	subs	r3, r3, r0
 800ed14:	50a3      	str	r3, [r4, r2]
 800ed16:	e7c9      	b.n	800ecac <_malloc_r+0x20>
 800ed18:	4622      	mov	r2, r4
 800ed1a:	6864      	ldr	r4, [r4, #4]
 800ed1c:	e7cc      	b.n	800ecb8 <_malloc_r+0x2c>
 800ed1e:	1cc4      	adds	r4, r0, #3
 800ed20:	f024 0403 	bic.w	r4, r4, #3
 800ed24:	42a0      	cmp	r0, r4
 800ed26:	d0e3      	beq.n	800ecf0 <_malloc_r+0x64>
 800ed28:	1a21      	subs	r1, r4, r0
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f000 f9e0 	bl	800f0f0 <_sbrk_r>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d1dd      	bne.n	800ecf0 <_malloc_r+0x64>
 800ed34:	e7cf      	b.n	800ecd6 <_malloc_r+0x4a>
 800ed36:	bf00      	nop
 800ed38:	20000288 	.word	0x20000288
 800ed3c:	2000028c 	.word	0x2000028c

0800ed40 <__sfputc_r>:
 800ed40:	6893      	ldr	r3, [r2, #8]
 800ed42:	3b01      	subs	r3, #1
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	b410      	push	{r4}
 800ed48:	6093      	str	r3, [r2, #8]
 800ed4a:	da08      	bge.n	800ed5e <__sfputc_r+0x1e>
 800ed4c:	6994      	ldr	r4, [r2, #24]
 800ed4e:	42a3      	cmp	r3, r4
 800ed50:	db01      	blt.n	800ed56 <__sfputc_r+0x16>
 800ed52:	290a      	cmp	r1, #10
 800ed54:	d103      	bne.n	800ed5e <__sfputc_r+0x1e>
 800ed56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed5a:	f7fd bce9 	b.w	800c730 <__swbuf_r>
 800ed5e:	6813      	ldr	r3, [r2, #0]
 800ed60:	1c58      	adds	r0, r3, #1
 800ed62:	6010      	str	r0, [r2, #0]
 800ed64:	7019      	strb	r1, [r3, #0]
 800ed66:	4608      	mov	r0, r1
 800ed68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <__sfputs_r>:
 800ed6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed70:	4606      	mov	r6, r0
 800ed72:	460f      	mov	r7, r1
 800ed74:	4614      	mov	r4, r2
 800ed76:	18d5      	adds	r5, r2, r3
 800ed78:	42ac      	cmp	r4, r5
 800ed7a:	d101      	bne.n	800ed80 <__sfputs_r+0x12>
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	e007      	b.n	800ed90 <__sfputs_r+0x22>
 800ed80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed84:	463a      	mov	r2, r7
 800ed86:	4630      	mov	r0, r6
 800ed88:	f7ff ffda 	bl	800ed40 <__sfputc_r>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d1f3      	bne.n	800ed78 <__sfputs_r+0xa>
 800ed90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed94 <_vfiprintf_r>:
 800ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed98:	460d      	mov	r5, r1
 800ed9a:	b09d      	sub	sp, #116	; 0x74
 800ed9c:	4614      	mov	r4, r2
 800ed9e:	4698      	mov	r8, r3
 800eda0:	4606      	mov	r6, r0
 800eda2:	b118      	cbz	r0, 800edac <_vfiprintf_r+0x18>
 800eda4:	6983      	ldr	r3, [r0, #24]
 800eda6:	b90b      	cbnz	r3, 800edac <_vfiprintf_r+0x18>
 800eda8:	f7fe fd46 	bl	800d838 <__sinit>
 800edac:	4b89      	ldr	r3, [pc, #548]	; (800efd4 <_vfiprintf_r+0x240>)
 800edae:	429d      	cmp	r5, r3
 800edb0:	d11b      	bne.n	800edea <_vfiprintf_r+0x56>
 800edb2:	6875      	ldr	r5, [r6, #4]
 800edb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edb6:	07d9      	lsls	r1, r3, #31
 800edb8:	d405      	bmi.n	800edc6 <_vfiprintf_r+0x32>
 800edba:	89ab      	ldrh	r3, [r5, #12]
 800edbc:	059a      	lsls	r2, r3, #22
 800edbe:	d402      	bmi.n	800edc6 <_vfiprintf_r+0x32>
 800edc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edc2:	f7ff f9ba 	bl	800e13a <__retarget_lock_acquire_recursive>
 800edc6:	89ab      	ldrh	r3, [r5, #12]
 800edc8:	071b      	lsls	r3, r3, #28
 800edca:	d501      	bpl.n	800edd0 <_vfiprintf_r+0x3c>
 800edcc:	692b      	ldr	r3, [r5, #16]
 800edce:	b9eb      	cbnz	r3, 800ee0c <_vfiprintf_r+0x78>
 800edd0:	4629      	mov	r1, r5
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7fd fcfe 	bl	800c7d4 <__swsetup_r>
 800edd8:	b1c0      	cbz	r0, 800ee0c <_vfiprintf_r+0x78>
 800edda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eddc:	07dc      	lsls	r4, r3, #31
 800edde:	d50e      	bpl.n	800edfe <_vfiprintf_r+0x6a>
 800ede0:	f04f 30ff 	mov.w	r0, #4294967295
 800ede4:	b01d      	add	sp, #116	; 0x74
 800ede6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edea:	4b7b      	ldr	r3, [pc, #492]	; (800efd8 <_vfiprintf_r+0x244>)
 800edec:	429d      	cmp	r5, r3
 800edee:	d101      	bne.n	800edf4 <_vfiprintf_r+0x60>
 800edf0:	68b5      	ldr	r5, [r6, #8]
 800edf2:	e7df      	b.n	800edb4 <_vfiprintf_r+0x20>
 800edf4:	4b79      	ldr	r3, [pc, #484]	; (800efdc <_vfiprintf_r+0x248>)
 800edf6:	429d      	cmp	r5, r3
 800edf8:	bf08      	it	eq
 800edfa:	68f5      	ldreq	r5, [r6, #12]
 800edfc:	e7da      	b.n	800edb4 <_vfiprintf_r+0x20>
 800edfe:	89ab      	ldrh	r3, [r5, #12]
 800ee00:	0598      	lsls	r0, r3, #22
 800ee02:	d4ed      	bmi.n	800ede0 <_vfiprintf_r+0x4c>
 800ee04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee06:	f7ff f999 	bl	800e13c <__retarget_lock_release_recursive>
 800ee0a:	e7e9      	b.n	800ede0 <_vfiprintf_r+0x4c>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee10:	2320      	movs	r3, #32
 800ee12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee1a:	2330      	movs	r3, #48	; 0x30
 800ee1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800efe0 <_vfiprintf_r+0x24c>
 800ee20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee24:	f04f 0901 	mov.w	r9, #1
 800ee28:	4623      	mov	r3, r4
 800ee2a:	469a      	mov	sl, r3
 800ee2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee30:	b10a      	cbz	r2, 800ee36 <_vfiprintf_r+0xa2>
 800ee32:	2a25      	cmp	r2, #37	; 0x25
 800ee34:	d1f9      	bne.n	800ee2a <_vfiprintf_r+0x96>
 800ee36:	ebba 0b04 	subs.w	fp, sl, r4
 800ee3a:	d00b      	beq.n	800ee54 <_vfiprintf_r+0xc0>
 800ee3c:	465b      	mov	r3, fp
 800ee3e:	4622      	mov	r2, r4
 800ee40:	4629      	mov	r1, r5
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff ff93 	bl	800ed6e <__sfputs_r>
 800ee48:	3001      	adds	r0, #1
 800ee4a:	f000 80aa 	beq.w	800efa2 <_vfiprintf_r+0x20e>
 800ee4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee50:	445a      	add	r2, fp
 800ee52:	9209      	str	r2, [sp, #36]	; 0x24
 800ee54:	f89a 3000 	ldrb.w	r3, [sl]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f000 80a2 	beq.w	800efa2 <_vfiprintf_r+0x20e>
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f04f 32ff 	mov.w	r2, #4294967295
 800ee64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee68:	f10a 0a01 	add.w	sl, sl, #1
 800ee6c:	9304      	str	r3, [sp, #16]
 800ee6e:	9307      	str	r3, [sp, #28]
 800ee70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee74:	931a      	str	r3, [sp, #104]	; 0x68
 800ee76:	4654      	mov	r4, sl
 800ee78:	2205      	movs	r2, #5
 800ee7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee7e:	4858      	ldr	r0, [pc, #352]	; (800efe0 <_vfiprintf_r+0x24c>)
 800ee80:	f7f1 f9de 	bl	8000240 <memchr>
 800ee84:	9a04      	ldr	r2, [sp, #16]
 800ee86:	b9d8      	cbnz	r0, 800eec0 <_vfiprintf_r+0x12c>
 800ee88:	06d1      	lsls	r1, r2, #27
 800ee8a:	bf44      	itt	mi
 800ee8c:	2320      	movmi	r3, #32
 800ee8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee92:	0713      	lsls	r3, r2, #28
 800ee94:	bf44      	itt	mi
 800ee96:	232b      	movmi	r3, #43	; 0x2b
 800ee98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eea0:	2b2a      	cmp	r3, #42	; 0x2a
 800eea2:	d015      	beq.n	800eed0 <_vfiprintf_r+0x13c>
 800eea4:	9a07      	ldr	r2, [sp, #28]
 800eea6:	4654      	mov	r4, sl
 800eea8:	2000      	movs	r0, #0
 800eeaa:	f04f 0c0a 	mov.w	ip, #10
 800eeae:	4621      	mov	r1, r4
 800eeb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeb4:	3b30      	subs	r3, #48	; 0x30
 800eeb6:	2b09      	cmp	r3, #9
 800eeb8:	d94e      	bls.n	800ef58 <_vfiprintf_r+0x1c4>
 800eeba:	b1b0      	cbz	r0, 800eeea <_vfiprintf_r+0x156>
 800eebc:	9207      	str	r2, [sp, #28]
 800eebe:	e014      	b.n	800eeea <_vfiprintf_r+0x156>
 800eec0:	eba0 0308 	sub.w	r3, r0, r8
 800eec4:	fa09 f303 	lsl.w	r3, r9, r3
 800eec8:	4313      	orrs	r3, r2
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	46a2      	mov	sl, r4
 800eece:	e7d2      	b.n	800ee76 <_vfiprintf_r+0xe2>
 800eed0:	9b03      	ldr	r3, [sp, #12]
 800eed2:	1d19      	adds	r1, r3, #4
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	9103      	str	r1, [sp, #12]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	bfbb      	ittet	lt
 800eedc:	425b      	neglt	r3, r3
 800eede:	f042 0202 	orrlt.w	r2, r2, #2
 800eee2:	9307      	strge	r3, [sp, #28]
 800eee4:	9307      	strlt	r3, [sp, #28]
 800eee6:	bfb8      	it	lt
 800eee8:	9204      	strlt	r2, [sp, #16]
 800eeea:	7823      	ldrb	r3, [r4, #0]
 800eeec:	2b2e      	cmp	r3, #46	; 0x2e
 800eeee:	d10c      	bne.n	800ef0a <_vfiprintf_r+0x176>
 800eef0:	7863      	ldrb	r3, [r4, #1]
 800eef2:	2b2a      	cmp	r3, #42	; 0x2a
 800eef4:	d135      	bne.n	800ef62 <_vfiprintf_r+0x1ce>
 800eef6:	9b03      	ldr	r3, [sp, #12]
 800eef8:	1d1a      	adds	r2, r3, #4
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	9203      	str	r2, [sp, #12]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	bfb8      	it	lt
 800ef02:	f04f 33ff 	movlt.w	r3, #4294967295
 800ef06:	3402      	adds	r4, #2
 800ef08:	9305      	str	r3, [sp, #20]
 800ef0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eff0 <_vfiprintf_r+0x25c>
 800ef0e:	7821      	ldrb	r1, [r4, #0]
 800ef10:	2203      	movs	r2, #3
 800ef12:	4650      	mov	r0, sl
 800ef14:	f7f1 f994 	bl	8000240 <memchr>
 800ef18:	b140      	cbz	r0, 800ef2c <_vfiprintf_r+0x198>
 800ef1a:	2340      	movs	r3, #64	; 0x40
 800ef1c:	eba0 000a 	sub.w	r0, r0, sl
 800ef20:	fa03 f000 	lsl.w	r0, r3, r0
 800ef24:	9b04      	ldr	r3, [sp, #16]
 800ef26:	4303      	orrs	r3, r0
 800ef28:	3401      	adds	r4, #1
 800ef2a:	9304      	str	r3, [sp, #16]
 800ef2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef30:	482c      	ldr	r0, [pc, #176]	; (800efe4 <_vfiprintf_r+0x250>)
 800ef32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef36:	2206      	movs	r2, #6
 800ef38:	f7f1 f982 	bl	8000240 <memchr>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d03f      	beq.n	800efc0 <_vfiprintf_r+0x22c>
 800ef40:	4b29      	ldr	r3, [pc, #164]	; (800efe8 <_vfiprintf_r+0x254>)
 800ef42:	bb1b      	cbnz	r3, 800ef8c <_vfiprintf_r+0x1f8>
 800ef44:	9b03      	ldr	r3, [sp, #12]
 800ef46:	3307      	adds	r3, #7
 800ef48:	f023 0307 	bic.w	r3, r3, #7
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	9303      	str	r3, [sp, #12]
 800ef50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef52:	443b      	add	r3, r7
 800ef54:	9309      	str	r3, [sp, #36]	; 0x24
 800ef56:	e767      	b.n	800ee28 <_vfiprintf_r+0x94>
 800ef58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	2001      	movs	r0, #1
 800ef60:	e7a5      	b.n	800eeae <_vfiprintf_r+0x11a>
 800ef62:	2300      	movs	r3, #0
 800ef64:	3401      	adds	r4, #1
 800ef66:	9305      	str	r3, [sp, #20]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	f04f 0c0a 	mov.w	ip, #10
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef74:	3a30      	subs	r2, #48	; 0x30
 800ef76:	2a09      	cmp	r2, #9
 800ef78:	d903      	bls.n	800ef82 <_vfiprintf_r+0x1ee>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d0c5      	beq.n	800ef0a <_vfiprintf_r+0x176>
 800ef7e:	9105      	str	r1, [sp, #20]
 800ef80:	e7c3      	b.n	800ef0a <_vfiprintf_r+0x176>
 800ef82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef86:	4604      	mov	r4, r0
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e7f0      	b.n	800ef6e <_vfiprintf_r+0x1da>
 800ef8c:	ab03      	add	r3, sp, #12
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	462a      	mov	r2, r5
 800ef92:	4b16      	ldr	r3, [pc, #88]	; (800efec <_vfiprintf_r+0x258>)
 800ef94:	a904      	add	r1, sp, #16
 800ef96:	4630      	mov	r0, r6
 800ef98:	f7fc f838 	bl	800b00c <_printf_float>
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	1c78      	adds	r0, r7, #1
 800efa0:	d1d6      	bne.n	800ef50 <_vfiprintf_r+0x1bc>
 800efa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efa4:	07d9      	lsls	r1, r3, #31
 800efa6:	d405      	bmi.n	800efb4 <_vfiprintf_r+0x220>
 800efa8:	89ab      	ldrh	r3, [r5, #12]
 800efaa:	059a      	lsls	r2, r3, #22
 800efac:	d402      	bmi.n	800efb4 <_vfiprintf_r+0x220>
 800efae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efb0:	f7ff f8c4 	bl	800e13c <__retarget_lock_release_recursive>
 800efb4:	89ab      	ldrh	r3, [r5, #12]
 800efb6:	065b      	lsls	r3, r3, #25
 800efb8:	f53f af12 	bmi.w	800ede0 <_vfiprintf_r+0x4c>
 800efbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800efbe:	e711      	b.n	800ede4 <_vfiprintf_r+0x50>
 800efc0:	ab03      	add	r3, sp, #12
 800efc2:	9300      	str	r3, [sp, #0]
 800efc4:	462a      	mov	r2, r5
 800efc6:	4b09      	ldr	r3, [pc, #36]	; (800efec <_vfiprintf_r+0x258>)
 800efc8:	a904      	add	r1, sp, #16
 800efca:	4630      	mov	r0, r6
 800efcc:	f7fc fac2 	bl	800b554 <_printf_i>
 800efd0:	e7e4      	b.n	800ef9c <_vfiprintf_r+0x208>
 800efd2:	bf00      	nop
 800efd4:	08010f8c 	.word	0x08010f8c
 800efd8:	08010fac 	.word	0x08010fac
 800efdc:	08010f6c 	.word	0x08010f6c
 800efe0:	080111ac 	.word	0x080111ac
 800efe4:	080111b6 	.word	0x080111b6
 800efe8:	0800b00d 	.word	0x0800b00d
 800efec:	0800ed6f 	.word	0x0800ed6f
 800eff0:	080111b2 	.word	0x080111b2

0800eff4 <_putc_r>:
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	460d      	mov	r5, r1
 800eff8:	4614      	mov	r4, r2
 800effa:	4606      	mov	r6, r0
 800effc:	b118      	cbz	r0, 800f006 <_putc_r+0x12>
 800effe:	6983      	ldr	r3, [r0, #24]
 800f000:	b90b      	cbnz	r3, 800f006 <_putc_r+0x12>
 800f002:	f7fe fc19 	bl	800d838 <__sinit>
 800f006:	4b1c      	ldr	r3, [pc, #112]	; (800f078 <_putc_r+0x84>)
 800f008:	429c      	cmp	r4, r3
 800f00a:	d124      	bne.n	800f056 <_putc_r+0x62>
 800f00c:	6874      	ldr	r4, [r6, #4]
 800f00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f010:	07d8      	lsls	r0, r3, #31
 800f012:	d405      	bmi.n	800f020 <_putc_r+0x2c>
 800f014:	89a3      	ldrh	r3, [r4, #12]
 800f016:	0599      	lsls	r1, r3, #22
 800f018:	d402      	bmi.n	800f020 <_putc_r+0x2c>
 800f01a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f01c:	f7ff f88d 	bl	800e13a <__retarget_lock_acquire_recursive>
 800f020:	68a3      	ldr	r3, [r4, #8]
 800f022:	3b01      	subs	r3, #1
 800f024:	2b00      	cmp	r3, #0
 800f026:	60a3      	str	r3, [r4, #8]
 800f028:	da05      	bge.n	800f036 <_putc_r+0x42>
 800f02a:	69a2      	ldr	r2, [r4, #24]
 800f02c:	4293      	cmp	r3, r2
 800f02e:	db1c      	blt.n	800f06a <_putc_r+0x76>
 800f030:	b2eb      	uxtb	r3, r5
 800f032:	2b0a      	cmp	r3, #10
 800f034:	d019      	beq.n	800f06a <_putc_r+0x76>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	1c5a      	adds	r2, r3, #1
 800f03a:	6022      	str	r2, [r4, #0]
 800f03c:	701d      	strb	r5, [r3, #0]
 800f03e:	b2ed      	uxtb	r5, r5
 800f040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f042:	07da      	lsls	r2, r3, #31
 800f044:	d405      	bmi.n	800f052 <_putc_r+0x5e>
 800f046:	89a3      	ldrh	r3, [r4, #12]
 800f048:	059b      	lsls	r3, r3, #22
 800f04a:	d402      	bmi.n	800f052 <_putc_r+0x5e>
 800f04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f04e:	f7ff f875 	bl	800e13c <__retarget_lock_release_recursive>
 800f052:	4628      	mov	r0, r5
 800f054:	bd70      	pop	{r4, r5, r6, pc}
 800f056:	4b09      	ldr	r3, [pc, #36]	; (800f07c <_putc_r+0x88>)
 800f058:	429c      	cmp	r4, r3
 800f05a:	d101      	bne.n	800f060 <_putc_r+0x6c>
 800f05c:	68b4      	ldr	r4, [r6, #8]
 800f05e:	e7d6      	b.n	800f00e <_putc_r+0x1a>
 800f060:	4b07      	ldr	r3, [pc, #28]	; (800f080 <_putc_r+0x8c>)
 800f062:	429c      	cmp	r4, r3
 800f064:	bf08      	it	eq
 800f066:	68f4      	ldreq	r4, [r6, #12]
 800f068:	e7d1      	b.n	800f00e <_putc_r+0x1a>
 800f06a:	4629      	mov	r1, r5
 800f06c:	4622      	mov	r2, r4
 800f06e:	4630      	mov	r0, r6
 800f070:	f7fd fb5e 	bl	800c730 <__swbuf_r>
 800f074:	4605      	mov	r5, r0
 800f076:	e7e3      	b.n	800f040 <_putc_r+0x4c>
 800f078:	08010f8c 	.word	0x08010f8c
 800f07c:	08010fac 	.word	0x08010fac
 800f080:	08010f6c 	.word	0x08010f6c

0800f084 <__srget_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	460c      	mov	r4, r1
 800f088:	4605      	mov	r5, r0
 800f08a:	b118      	cbz	r0, 800f094 <__srget_r+0x10>
 800f08c:	6983      	ldr	r3, [r0, #24]
 800f08e:	b90b      	cbnz	r3, 800f094 <__srget_r+0x10>
 800f090:	f7fe fbd2 	bl	800d838 <__sinit>
 800f094:	4b0e      	ldr	r3, [pc, #56]	; (800f0d0 <__srget_r+0x4c>)
 800f096:	429c      	cmp	r4, r3
 800f098:	d10d      	bne.n	800f0b6 <__srget_r+0x32>
 800f09a:	686c      	ldr	r4, [r5, #4]
 800f09c:	4621      	mov	r1, r4
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f000 f91e 	bl	800f2e0 <__srefill_r>
 800f0a4:	b988      	cbnz	r0, 800f0ca <__srget_r+0x46>
 800f0a6:	6863      	ldr	r3, [r4, #4]
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	6063      	str	r3, [r4, #4]
 800f0ac:	6823      	ldr	r3, [r4, #0]
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	6022      	str	r2, [r4, #0]
 800f0b2:	7818      	ldrb	r0, [r3, #0]
 800f0b4:	bd38      	pop	{r3, r4, r5, pc}
 800f0b6:	4b07      	ldr	r3, [pc, #28]	; (800f0d4 <__srget_r+0x50>)
 800f0b8:	429c      	cmp	r4, r3
 800f0ba:	d101      	bne.n	800f0c0 <__srget_r+0x3c>
 800f0bc:	68ac      	ldr	r4, [r5, #8]
 800f0be:	e7ed      	b.n	800f09c <__srget_r+0x18>
 800f0c0:	4b05      	ldr	r3, [pc, #20]	; (800f0d8 <__srget_r+0x54>)
 800f0c2:	429c      	cmp	r4, r3
 800f0c4:	bf08      	it	eq
 800f0c6:	68ec      	ldreq	r4, [r5, #12]
 800f0c8:	e7e8      	b.n	800f09c <__srget_r+0x18>
 800f0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f0ce:	e7f1      	b.n	800f0b4 <__srget_r+0x30>
 800f0d0:	08010f8c 	.word	0x08010f8c
 800f0d4:	08010fac 	.word	0x08010fac
 800f0d8:	08010f6c 	.word	0x08010f6c
 800f0dc:	00000000 	.word	0x00000000

0800f0e0 <nan>:
 800f0e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f0e8 <nan+0x8>
 800f0e4:	4770      	bx	lr
 800f0e6:	bf00      	nop
 800f0e8:	00000000 	.word	0x00000000
 800f0ec:	7ff80000 	.word	0x7ff80000

0800f0f0 <_sbrk_r>:
 800f0f0:	b538      	push	{r3, r4, r5, lr}
 800f0f2:	4d06      	ldr	r5, [pc, #24]	; (800f10c <_sbrk_r+0x1c>)
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	4604      	mov	r4, r0
 800f0f8:	4608      	mov	r0, r1
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	f7f5 fb2c 	bl	8004758 <_sbrk>
 800f100:	1c43      	adds	r3, r0, #1
 800f102:	d102      	bne.n	800f10a <_sbrk_r+0x1a>
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	b103      	cbz	r3, 800f10a <_sbrk_r+0x1a>
 800f108:	6023      	str	r3, [r4, #0]
 800f10a:	bd38      	pop	{r3, r4, r5, pc}
 800f10c:	20000d58 	.word	0x20000d58

0800f110 <__sread>:
 800f110:	b510      	push	{r4, lr}
 800f112:	460c      	mov	r4, r1
 800f114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f118:	f000 f8c6 	bl	800f2a8 <_read_r>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	bfab      	itete	ge
 800f120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f122:	89a3      	ldrhlt	r3, [r4, #12]
 800f124:	181b      	addge	r3, r3, r0
 800f126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f12a:	bfac      	ite	ge
 800f12c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f12e:	81a3      	strhlt	r3, [r4, #12]
 800f130:	bd10      	pop	{r4, pc}

0800f132 <__swrite>:
 800f132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f136:	461f      	mov	r7, r3
 800f138:	898b      	ldrh	r3, [r1, #12]
 800f13a:	05db      	lsls	r3, r3, #23
 800f13c:	4605      	mov	r5, r0
 800f13e:	460c      	mov	r4, r1
 800f140:	4616      	mov	r6, r2
 800f142:	d505      	bpl.n	800f150 <__swrite+0x1e>
 800f144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f148:	2302      	movs	r3, #2
 800f14a:	2200      	movs	r2, #0
 800f14c:	f000 f88e 	bl	800f26c <_lseek_r>
 800f150:	89a3      	ldrh	r3, [r4, #12]
 800f152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f156:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	4632      	mov	r2, r6
 800f15e:	463b      	mov	r3, r7
 800f160:	4628      	mov	r0, r5
 800f162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f166:	f000 b835 	b.w	800f1d4 <_write_r>

0800f16a <__sseek>:
 800f16a:	b510      	push	{r4, lr}
 800f16c:	460c      	mov	r4, r1
 800f16e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f172:	f000 f87b 	bl	800f26c <_lseek_r>
 800f176:	1c43      	adds	r3, r0, #1
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	bf15      	itete	ne
 800f17c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f17e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f186:	81a3      	strheq	r3, [r4, #12]
 800f188:	bf18      	it	ne
 800f18a:	81a3      	strhne	r3, [r4, #12]
 800f18c:	bd10      	pop	{r4, pc}

0800f18e <__sclose>:
 800f18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f192:	f000 b839 	b.w	800f208 <_close_r>

0800f196 <strncmp>:
 800f196:	b510      	push	{r4, lr}
 800f198:	b16a      	cbz	r2, 800f1b6 <strncmp+0x20>
 800f19a:	3901      	subs	r1, #1
 800f19c:	1884      	adds	r4, r0, r2
 800f19e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f1a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d103      	bne.n	800f1b2 <strncmp+0x1c>
 800f1aa:	42a0      	cmp	r0, r4
 800f1ac:	d001      	beq.n	800f1b2 <strncmp+0x1c>
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1f5      	bne.n	800f19e <strncmp+0x8>
 800f1b2:	1a98      	subs	r0, r3, r2
 800f1b4:	bd10      	pop	{r4, pc}
 800f1b6:	4610      	mov	r0, r2
 800f1b8:	e7fc      	b.n	800f1b4 <strncmp+0x1e>

0800f1ba <__ascii_wctomb>:
 800f1ba:	b149      	cbz	r1, 800f1d0 <__ascii_wctomb+0x16>
 800f1bc:	2aff      	cmp	r2, #255	; 0xff
 800f1be:	bf85      	ittet	hi
 800f1c0:	238a      	movhi	r3, #138	; 0x8a
 800f1c2:	6003      	strhi	r3, [r0, #0]
 800f1c4:	700a      	strbls	r2, [r1, #0]
 800f1c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800f1ca:	bf98      	it	ls
 800f1cc:	2001      	movls	r0, #1
 800f1ce:	4770      	bx	lr
 800f1d0:	4608      	mov	r0, r1
 800f1d2:	4770      	bx	lr

0800f1d4 <_write_r>:
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	4d07      	ldr	r5, [pc, #28]	; (800f1f4 <_write_r+0x20>)
 800f1d8:	4604      	mov	r4, r0
 800f1da:	4608      	mov	r0, r1
 800f1dc:	4611      	mov	r1, r2
 800f1de:	2200      	movs	r2, #0
 800f1e0:	602a      	str	r2, [r5, #0]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	f7f5 fa67 	bl	80046b6 <_write>
 800f1e8:	1c43      	adds	r3, r0, #1
 800f1ea:	d102      	bne.n	800f1f2 <_write_r+0x1e>
 800f1ec:	682b      	ldr	r3, [r5, #0]
 800f1ee:	b103      	cbz	r3, 800f1f2 <_write_r+0x1e>
 800f1f0:	6023      	str	r3, [r4, #0]
 800f1f2:	bd38      	pop	{r3, r4, r5, pc}
 800f1f4:	20000d58 	.word	0x20000d58

0800f1f8 <abort>:
 800f1f8:	b508      	push	{r3, lr}
 800f1fa:	2006      	movs	r0, #6
 800f1fc:	f000 f922 	bl	800f444 <raise>
 800f200:	2001      	movs	r0, #1
 800f202:	f7f5 fa3d 	bl	8004680 <_exit>
	...

0800f208 <_close_r>:
 800f208:	b538      	push	{r3, r4, r5, lr}
 800f20a:	4d06      	ldr	r5, [pc, #24]	; (800f224 <_close_r+0x1c>)
 800f20c:	2300      	movs	r3, #0
 800f20e:	4604      	mov	r4, r0
 800f210:	4608      	mov	r0, r1
 800f212:	602b      	str	r3, [r5, #0]
 800f214:	f7f5 fa6b 	bl	80046ee <_close>
 800f218:	1c43      	adds	r3, r0, #1
 800f21a:	d102      	bne.n	800f222 <_close_r+0x1a>
 800f21c:	682b      	ldr	r3, [r5, #0]
 800f21e:	b103      	cbz	r3, 800f222 <_close_r+0x1a>
 800f220:	6023      	str	r3, [r4, #0]
 800f222:	bd38      	pop	{r3, r4, r5, pc}
 800f224:	20000d58 	.word	0x20000d58

0800f228 <_fstat_r>:
 800f228:	b538      	push	{r3, r4, r5, lr}
 800f22a:	4d07      	ldr	r5, [pc, #28]	; (800f248 <_fstat_r+0x20>)
 800f22c:	2300      	movs	r3, #0
 800f22e:	4604      	mov	r4, r0
 800f230:	4608      	mov	r0, r1
 800f232:	4611      	mov	r1, r2
 800f234:	602b      	str	r3, [r5, #0]
 800f236:	f7f5 fa66 	bl	8004706 <_fstat>
 800f23a:	1c43      	adds	r3, r0, #1
 800f23c:	d102      	bne.n	800f244 <_fstat_r+0x1c>
 800f23e:	682b      	ldr	r3, [r5, #0]
 800f240:	b103      	cbz	r3, 800f244 <_fstat_r+0x1c>
 800f242:	6023      	str	r3, [r4, #0]
 800f244:	bd38      	pop	{r3, r4, r5, pc}
 800f246:	bf00      	nop
 800f248:	20000d58 	.word	0x20000d58

0800f24c <_isatty_r>:
 800f24c:	b538      	push	{r3, r4, r5, lr}
 800f24e:	4d06      	ldr	r5, [pc, #24]	; (800f268 <_isatty_r+0x1c>)
 800f250:	2300      	movs	r3, #0
 800f252:	4604      	mov	r4, r0
 800f254:	4608      	mov	r0, r1
 800f256:	602b      	str	r3, [r5, #0]
 800f258:	f7f5 fa65 	bl	8004726 <_isatty>
 800f25c:	1c43      	adds	r3, r0, #1
 800f25e:	d102      	bne.n	800f266 <_isatty_r+0x1a>
 800f260:	682b      	ldr	r3, [r5, #0]
 800f262:	b103      	cbz	r3, 800f266 <_isatty_r+0x1a>
 800f264:	6023      	str	r3, [r4, #0]
 800f266:	bd38      	pop	{r3, r4, r5, pc}
 800f268:	20000d58 	.word	0x20000d58

0800f26c <_lseek_r>:
 800f26c:	b538      	push	{r3, r4, r5, lr}
 800f26e:	4d07      	ldr	r5, [pc, #28]	; (800f28c <_lseek_r+0x20>)
 800f270:	4604      	mov	r4, r0
 800f272:	4608      	mov	r0, r1
 800f274:	4611      	mov	r1, r2
 800f276:	2200      	movs	r2, #0
 800f278:	602a      	str	r2, [r5, #0]
 800f27a:	461a      	mov	r2, r3
 800f27c:	f7f5 fa5e 	bl	800473c <_lseek>
 800f280:	1c43      	adds	r3, r0, #1
 800f282:	d102      	bne.n	800f28a <_lseek_r+0x1e>
 800f284:	682b      	ldr	r3, [r5, #0]
 800f286:	b103      	cbz	r3, 800f28a <_lseek_r+0x1e>
 800f288:	6023      	str	r3, [r4, #0]
 800f28a:	bd38      	pop	{r3, r4, r5, pc}
 800f28c:	20000d58 	.word	0x20000d58

0800f290 <__malloc_lock>:
 800f290:	4801      	ldr	r0, [pc, #4]	; (800f298 <__malloc_lock+0x8>)
 800f292:	f7fe bf52 	b.w	800e13a <__retarget_lock_acquire_recursive>
 800f296:	bf00      	nop
 800f298:	20000d50 	.word	0x20000d50

0800f29c <__malloc_unlock>:
 800f29c:	4801      	ldr	r0, [pc, #4]	; (800f2a4 <__malloc_unlock+0x8>)
 800f29e:	f7fe bf4d 	b.w	800e13c <__retarget_lock_release_recursive>
 800f2a2:	bf00      	nop
 800f2a4:	20000d50 	.word	0x20000d50

0800f2a8 <_read_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d07      	ldr	r5, [pc, #28]	; (800f2c8 <_read_r+0x20>)
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	4608      	mov	r0, r1
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	602a      	str	r2, [r5, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	f7f5 f9ec 	bl	8004694 <_read>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	d102      	bne.n	800f2c6 <_read_r+0x1e>
 800f2c0:	682b      	ldr	r3, [r5, #0]
 800f2c2:	b103      	cbz	r3, 800f2c6 <_read_r+0x1e>
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}
 800f2c8:	20000d58 	.word	0x20000d58

0800f2cc <lflush>:
 800f2cc:	8983      	ldrh	r3, [r0, #12]
 800f2ce:	f003 0309 	and.w	r3, r3, #9
 800f2d2:	2b09      	cmp	r3, #9
 800f2d4:	d101      	bne.n	800f2da <lflush+0xe>
 800f2d6:	f7fe ba45 	b.w	800d764 <fflush>
 800f2da:	2000      	movs	r0, #0
 800f2dc:	4770      	bx	lr
	...

0800f2e0 <__srefill_r>:
 800f2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	4605      	mov	r5, r0
 800f2e6:	b118      	cbz	r0, 800f2f0 <__srefill_r+0x10>
 800f2e8:	6983      	ldr	r3, [r0, #24]
 800f2ea:	b90b      	cbnz	r3, 800f2f0 <__srefill_r+0x10>
 800f2ec:	f7fe faa4 	bl	800d838 <__sinit>
 800f2f0:	4b3b      	ldr	r3, [pc, #236]	; (800f3e0 <__srefill_r+0x100>)
 800f2f2:	429c      	cmp	r4, r3
 800f2f4:	d10a      	bne.n	800f30c <__srefill_r+0x2c>
 800f2f6:	686c      	ldr	r4, [r5, #4]
 800f2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	6063      	str	r3, [r4, #4]
 800f300:	89a3      	ldrh	r3, [r4, #12]
 800f302:	069e      	lsls	r6, r3, #26
 800f304:	d50c      	bpl.n	800f320 <__srefill_r+0x40>
 800f306:	f04f 30ff 	mov.w	r0, #4294967295
 800f30a:	e066      	b.n	800f3da <__srefill_r+0xfa>
 800f30c:	4b35      	ldr	r3, [pc, #212]	; (800f3e4 <__srefill_r+0x104>)
 800f30e:	429c      	cmp	r4, r3
 800f310:	d101      	bne.n	800f316 <__srefill_r+0x36>
 800f312:	68ac      	ldr	r4, [r5, #8]
 800f314:	e7f0      	b.n	800f2f8 <__srefill_r+0x18>
 800f316:	4b34      	ldr	r3, [pc, #208]	; (800f3e8 <__srefill_r+0x108>)
 800f318:	429c      	cmp	r4, r3
 800f31a:	bf08      	it	eq
 800f31c:	68ec      	ldreq	r4, [r5, #12]
 800f31e:	e7eb      	b.n	800f2f8 <__srefill_r+0x18>
 800f320:	0758      	lsls	r0, r3, #29
 800f322:	d448      	bmi.n	800f3b6 <__srefill_r+0xd6>
 800f324:	06d9      	lsls	r1, r3, #27
 800f326:	d405      	bmi.n	800f334 <__srefill_r+0x54>
 800f328:	2309      	movs	r3, #9
 800f32a:	602b      	str	r3, [r5, #0]
 800f32c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	e7e8      	b.n	800f306 <__srefill_r+0x26>
 800f334:	071a      	lsls	r2, r3, #28
 800f336:	d50b      	bpl.n	800f350 <__srefill_r+0x70>
 800f338:	4621      	mov	r1, r4
 800f33a:	4628      	mov	r0, r5
 800f33c:	f7fe f9d6 	bl	800d6ec <_fflush_r>
 800f340:	2800      	cmp	r0, #0
 800f342:	d1e0      	bne.n	800f306 <__srefill_r+0x26>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	60a0      	str	r0, [r4, #8]
 800f348:	f023 0308 	bic.w	r3, r3, #8
 800f34c:	81a3      	strh	r3, [r4, #12]
 800f34e:	61a0      	str	r0, [r4, #24]
 800f350:	89a3      	ldrh	r3, [r4, #12]
 800f352:	f043 0304 	orr.w	r3, r3, #4
 800f356:	81a3      	strh	r3, [r4, #12]
 800f358:	6923      	ldr	r3, [r4, #16]
 800f35a:	b91b      	cbnz	r3, 800f364 <__srefill_r+0x84>
 800f35c:	4621      	mov	r1, r4
 800f35e:	4628      	mov	r0, r5
 800f360:	f7fe ff12 	bl	800e188 <__smakebuf_r>
 800f364:	89a6      	ldrh	r6, [r4, #12]
 800f366:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800f36a:	07b3      	lsls	r3, r6, #30
 800f36c:	d00f      	beq.n	800f38e <__srefill_r+0xae>
 800f36e:	2301      	movs	r3, #1
 800f370:	81a3      	strh	r3, [r4, #12]
 800f372:	4b1e      	ldr	r3, [pc, #120]	; (800f3ec <__srefill_r+0x10c>)
 800f374:	491e      	ldr	r1, [pc, #120]	; (800f3f0 <__srefill_r+0x110>)
 800f376:	6818      	ldr	r0, [r3, #0]
 800f378:	f006 0609 	and.w	r6, r6, #9
 800f37c:	f7fe faec 	bl	800d958 <_fwalk>
 800f380:	2e09      	cmp	r6, #9
 800f382:	81a7      	strh	r7, [r4, #12]
 800f384:	d103      	bne.n	800f38e <__srefill_r+0xae>
 800f386:	4621      	mov	r1, r4
 800f388:	4628      	mov	r0, r5
 800f38a:	f7fe f929 	bl	800d5e0 <__sflush_r>
 800f38e:	6922      	ldr	r2, [r4, #16]
 800f390:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f392:	6963      	ldr	r3, [r4, #20]
 800f394:	6a21      	ldr	r1, [r4, #32]
 800f396:	6022      	str	r2, [r4, #0]
 800f398:	4628      	mov	r0, r5
 800f39a:	47b0      	blx	r6
 800f39c:	2800      	cmp	r0, #0
 800f39e:	6060      	str	r0, [r4, #4]
 800f3a0:	dc1c      	bgt.n	800f3dc <__srefill_r+0xfc>
 800f3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3a6:	bf17      	itett	ne
 800f3a8:	2200      	movne	r2, #0
 800f3aa:	f043 0320 	orreq.w	r3, r3, #32
 800f3ae:	6062      	strne	r2, [r4, #4]
 800f3b0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800f3b4:	e7bc      	b.n	800f330 <__srefill_r+0x50>
 800f3b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3b8:	2900      	cmp	r1, #0
 800f3ba:	d0cd      	beq.n	800f358 <__srefill_r+0x78>
 800f3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3c0:	4299      	cmp	r1, r3
 800f3c2:	d002      	beq.n	800f3ca <__srefill_r+0xea>
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	f7ff fc11 	bl	800ebec <_free_r>
 800f3ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3cc:	6063      	str	r3, [r4, #4]
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	6360      	str	r0, [r4, #52]	; 0x34
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d0c0      	beq.n	800f358 <__srefill_r+0x78>
 800f3d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3dc:	2000      	movs	r0, #0
 800f3de:	e7fc      	b.n	800f3da <__srefill_r+0xfa>
 800f3e0:	08010f8c 	.word	0x08010f8c
 800f3e4:	08010fac 	.word	0x08010fac
 800f3e8:	08010f6c 	.word	0x08010f6c
 800f3ec:	08010cb0 	.word	0x08010cb0
 800f3f0:	0800f2cd 	.word	0x0800f2cd

0800f3f4 <_raise_r>:
 800f3f4:	291f      	cmp	r1, #31
 800f3f6:	b538      	push	{r3, r4, r5, lr}
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	460d      	mov	r5, r1
 800f3fc:	d904      	bls.n	800f408 <_raise_r+0x14>
 800f3fe:	2316      	movs	r3, #22
 800f400:	6003      	str	r3, [r0, #0]
 800f402:	f04f 30ff 	mov.w	r0, #4294967295
 800f406:	bd38      	pop	{r3, r4, r5, pc}
 800f408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f40a:	b112      	cbz	r2, 800f412 <_raise_r+0x1e>
 800f40c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f410:	b94b      	cbnz	r3, 800f426 <_raise_r+0x32>
 800f412:	4620      	mov	r0, r4
 800f414:	f000 f830 	bl	800f478 <_getpid_r>
 800f418:	462a      	mov	r2, r5
 800f41a:	4601      	mov	r1, r0
 800f41c:	4620      	mov	r0, r4
 800f41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f422:	f000 b817 	b.w	800f454 <_kill_r>
 800f426:	2b01      	cmp	r3, #1
 800f428:	d00a      	beq.n	800f440 <_raise_r+0x4c>
 800f42a:	1c59      	adds	r1, r3, #1
 800f42c:	d103      	bne.n	800f436 <_raise_r+0x42>
 800f42e:	2316      	movs	r3, #22
 800f430:	6003      	str	r3, [r0, #0]
 800f432:	2001      	movs	r0, #1
 800f434:	e7e7      	b.n	800f406 <_raise_r+0x12>
 800f436:	2400      	movs	r4, #0
 800f438:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f43c:	4628      	mov	r0, r5
 800f43e:	4798      	blx	r3
 800f440:	2000      	movs	r0, #0
 800f442:	e7e0      	b.n	800f406 <_raise_r+0x12>

0800f444 <raise>:
 800f444:	4b02      	ldr	r3, [pc, #8]	; (800f450 <raise+0xc>)
 800f446:	4601      	mov	r1, r0
 800f448:	6818      	ldr	r0, [r3, #0]
 800f44a:	f7ff bfd3 	b.w	800f3f4 <_raise_r>
 800f44e:	bf00      	nop
 800f450:	20000028 	.word	0x20000028

0800f454 <_kill_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	4d07      	ldr	r5, [pc, #28]	; (800f474 <_kill_r+0x20>)
 800f458:	2300      	movs	r3, #0
 800f45a:	4604      	mov	r4, r0
 800f45c:	4608      	mov	r0, r1
 800f45e:	4611      	mov	r1, r2
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	f7f5 f8fd 	bl	8004660 <_kill>
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	d102      	bne.n	800f470 <_kill_r+0x1c>
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	b103      	cbz	r3, 800f470 <_kill_r+0x1c>
 800f46e:	6023      	str	r3, [r4, #0]
 800f470:	bd38      	pop	{r3, r4, r5, pc}
 800f472:	bf00      	nop
 800f474:	20000d58 	.word	0x20000d58

0800f478 <_getpid_r>:
 800f478:	f7f5 b8ea 	b.w	8004650 <_getpid>

0800f47c <pow>:
 800f47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f480:	ec59 8b10 	vmov	r8, r9, d0
 800f484:	ec57 6b11 	vmov	r6, r7, d1
 800f488:	f000 f8a6 	bl	800f5d8 <__ieee754_pow>
 800f48c:	4b4e      	ldr	r3, [pc, #312]	; (800f5c8 <pow+0x14c>)
 800f48e:	f993 3000 	ldrsb.w	r3, [r3]
 800f492:	3301      	adds	r3, #1
 800f494:	ec55 4b10 	vmov	r4, r5, d0
 800f498:	d015      	beq.n	800f4c6 <pow+0x4a>
 800f49a:	4632      	mov	r2, r6
 800f49c:	463b      	mov	r3, r7
 800f49e:	4630      	mov	r0, r6
 800f4a0:	4639      	mov	r1, r7
 800f4a2:	f7f1 fb73 	bl	8000b8c <__aeabi_dcmpun>
 800f4a6:	b970      	cbnz	r0, 800f4c6 <pow+0x4a>
 800f4a8:	4642      	mov	r2, r8
 800f4aa:	464b      	mov	r3, r9
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4649      	mov	r1, r9
 800f4b0:	f7f1 fb6c 	bl	8000b8c <__aeabi_dcmpun>
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	b148      	cbz	r0, 800f4ce <pow+0x52>
 800f4ba:	4630      	mov	r0, r6
 800f4bc:	4639      	mov	r1, r7
 800f4be:	f7f1 fb33 	bl	8000b28 <__aeabi_dcmpeq>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d17d      	bne.n	800f5c2 <pow+0x146>
 800f4c6:	ec45 4b10 	vmov	d0, r4, r5
 800f4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4ce:	4640      	mov	r0, r8
 800f4d0:	4649      	mov	r1, r9
 800f4d2:	f7f1 fb29 	bl	8000b28 <__aeabi_dcmpeq>
 800f4d6:	b1e0      	cbz	r0, 800f512 <pow+0x96>
 800f4d8:	2200      	movs	r2, #0
 800f4da:	2300      	movs	r3, #0
 800f4dc:	4630      	mov	r0, r6
 800f4de:	4639      	mov	r1, r7
 800f4e0:	f7f1 fb22 	bl	8000b28 <__aeabi_dcmpeq>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d16c      	bne.n	800f5c2 <pow+0x146>
 800f4e8:	ec47 6b10 	vmov	d0, r6, r7
 800f4ec:	f000 fe53 	bl	8010196 <finite>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	d0e8      	beq.n	800f4c6 <pow+0x4a>
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	4630      	mov	r0, r6
 800f4fa:	4639      	mov	r1, r7
 800f4fc:	f7f1 fb1e 	bl	8000b3c <__aeabi_dcmplt>
 800f500:	2800      	cmp	r0, #0
 800f502:	d0e0      	beq.n	800f4c6 <pow+0x4a>
 800f504:	f7fb fc9e 	bl	800ae44 <__errno>
 800f508:	2321      	movs	r3, #33	; 0x21
 800f50a:	6003      	str	r3, [r0, #0]
 800f50c:	2400      	movs	r4, #0
 800f50e:	4d2f      	ldr	r5, [pc, #188]	; (800f5cc <pow+0x150>)
 800f510:	e7d9      	b.n	800f4c6 <pow+0x4a>
 800f512:	ec45 4b10 	vmov	d0, r4, r5
 800f516:	f000 fe3e 	bl	8010196 <finite>
 800f51a:	bbb8      	cbnz	r0, 800f58c <pow+0x110>
 800f51c:	ec49 8b10 	vmov	d0, r8, r9
 800f520:	f000 fe39 	bl	8010196 <finite>
 800f524:	b390      	cbz	r0, 800f58c <pow+0x110>
 800f526:	ec47 6b10 	vmov	d0, r6, r7
 800f52a:	f000 fe34 	bl	8010196 <finite>
 800f52e:	b368      	cbz	r0, 800f58c <pow+0x110>
 800f530:	4622      	mov	r2, r4
 800f532:	462b      	mov	r3, r5
 800f534:	4620      	mov	r0, r4
 800f536:	4629      	mov	r1, r5
 800f538:	f7f1 fb28 	bl	8000b8c <__aeabi_dcmpun>
 800f53c:	b160      	cbz	r0, 800f558 <pow+0xdc>
 800f53e:	f7fb fc81 	bl	800ae44 <__errno>
 800f542:	2321      	movs	r3, #33	; 0x21
 800f544:	6003      	str	r3, [r0, #0]
 800f546:	2200      	movs	r2, #0
 800f548:	2300      	movs	r3, #0
 800f54a:	4610      	mov	r0, r2
 800f54c:	4619      	mov	r1, r3
 800f54e:	f7f1 f9ad 	bl	80008ac <__aeabi_ddiv>
 800f552:	4604      	mov	r4, r0
 800f554:	460d      	mov	r5, r1
 800f556:	e7b6      	b.n	800f4c6 <pow+0x4a>
 800f558:	f7fb fc74 	bl	800ae44 <__errno>
 800f55c:	2322      	movs	r3, #34	; 0x22
 800f55e:	6003      	str	r3, [r0, #0]
 800f560:	2200      	movs	r2, #0
 800f562:	2300      	movs	r3, #0
 800f564:	4640      	mov	r0, r8
 800f566:	4649      	mov	r1, r9
 800f568:	f7f1 fae8 	bl	8000b3c <__aeabi_dcmplt>
 800f56c:	2400      	movs	r4, #0
 800f56e:	b158      	cbz	r0, 800f588 <pow+0x10c>
 800f570:	ec47 6b10 	vmov	d0, r6, r7
 800f574:	f000 fe1a 	bl	80101ac <rint>
 800f578:	4632      	mov	r2, r6
 800f57a:	ec51 0b10 	vmov	r0, r1, d0
 800f57e:	463b      	mov	r3, r7
 800f580:	f7f1 fad2 	bl	8000b28 <__aeabi_dcmpeq>
 800f584:	2800      	cmp	r0, #0
 800f586:	d0c2      	beq.n	800f50e <pow+0x92>
 800f588:	4d11      	ldr	r5, [pc, #68]	; (800f5d0 <pow+0x154>)
 800f58a:	e79c      	b.n	800f4c6 <pow+0x4a>
 800f58c:	2200      	movs	r2, #0
 800f58e:	2300      	movs	r3, #0
 800f590:	4620      	mov	r0, r4
 800f592:	4629      	mov	r1, r5
 800f594:	f7f1 fac8 	bl	8000b28 <__aeabi_dcmpeq>
 800f598:	2800      	cmp	r0, #0
 800f59a:	d094      	beq.n	800f4c6 <pow+0x4a>
 800f59c:	ec49 8b10 	vmov	d0, r8, r9
 800f5a0:	f000 fdf9 	bl	8010196 <finite>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d08e      	beq.n	800f4c6 <pow+0x4a>
 800f5a8:	ec47 6b10 	vmov	d0, r6, r7
 800f5ac:	f000 fdf3 	bl	8010196 <finite>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d088      	beq.n	800f4c6 <pow+0x4a>
 800f5b4:	f7fb fc46 	bl	800ae44 <__errno>
 800f5b8:	2322      	movs	r3, #34	; 0x22
 800f5ba:	6003      	str	r3, [r0, #0]
 800f5bc:	2400      	movs	r4, #0
 800f5be:	2500      	movs	r5, #0
 800f5c0:	e781      	b.n	800f4c6 <pow+0x4a>
 800f5c2:	4d04      	ldr	r5, [pc, #16]	; (800f5d4 <pow+0x158>)
 800f5c4:	2400      	movs	r4, #0
 800f5c6:	e77e      	b.n	800f4c6 <pow+0x4a>
 800f5c8:	200001fc 	.word	0x200001fc
 800f5cc:	fff00000 	.word	0xfff00000
 800f5d0:	7ff00000 	.word	0x7ff00000
 800f5d4:	3ff00000 	.word	0x3ff00000

0800f5d8 <__ieee754_pow>:
 800f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5dc:	ed2d 8b06 	vpush	{d8-d10}
 800f5e0:	b08d      	sub	sp, #52	; 0x34
 800f5e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800f5e6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800f5ea:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800f5ee:	ea56 0100 	orrs.w	r1, r6, r0
 800f5f2:	ec53 2b10 	vmov	r2, r3, d0
 800f5f6:	f000 84d1 	beq.w	800ff9c <__ieee754_pow+0x9c4>
 800f5fa:	497f      	ldr	r1, [pc, #508]	; (800f7f8 <__ieee754_pow+0x220>)
 800f5fc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800f600:	428c      	cmp	r4, r1
 800f602:	ee10 8a10 	vmov	r8, s0
 800f606:	4699      	mov	r9, r3
 800f608:	dc09      	bgt.n	800f61e <__ieee754_pow+0x46>
 800f60a:	d103      	bne.n	800f614 <__ieee754_pow+0x3c>
 800f60c:	b97a      	cbnz	r2, 800f62e <__ieee754_pow+0x56>
 800f60e:	42a6      	cmp	r6, r4
 800f610:	dd02      	ble.n	800f618 <__ieee754_pow+0x40>
 800f612:	e00c      	b.n	800f62e <__ieee754_pow+0x56>
 800f614:	428e      	cmp	r6, r1
 800f616:	dc02      	bgt.n	800f61e <__ieee754_pow+0x46>
 800f618:	428e      	cmp	r6, r1
 800f61a:	d110      	bne.n	800f63e <__ieee754_pow+0x66>
 800f61c:	b178      	cbz	r0, 800f63e <__ieee754_pow+0x66>
 800f61e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f622:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f626:	ea54 0308 	orrs.w	r3, r4, r8
 800f62a:	f000 84b7 	beq.w	800ff9c <__ieee754_pow+0x9c4>
 800f62e:	4873      	ldr	r0, [pc, #460]	; (800f7fc <__ieee754_pow+0x224>)
 800f630:	b00d      	add	sp, #52	; 0x34
 800f632:	ecbd 8b06 	vpop	{d8-d10}
 800f636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f63a:	f7ff bd51 	b.w	800f0e0 <nan>
 800f63e:	f1b9 0f00 	cmp.w	r9, #0
 800f642:	da36      	bge.n	800f6b2 <__ieee754_pow+0xda>
 800f644:	496e      	ldr	r1, [pc, #440]	; (800f800 <__ieee754_pow+0x228>)
 800f646:	428e      	cmp	r6, r1
 800f648:	dc51      	bgt.n	800f6ee <__ieee754_pow+0x116>
 800f64a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800f64e:	428e      	cmp	r6, r1
 800f650:	f340 84af 	ble.w	800ffb2 <__ieee754_pow+0x9da>
 800f654:	1531      	asrs	r1, r6, #20
 800f656:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f65a:	2914      	cmp	r1, #20
 800f65c:	dd0f      	ble.n	800f67e <__ieee754_pow+0xa6>
 800f65e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800f662:	fa20 fc01 	lsr.w	ip, r0, r1
 800f666:	fa0c f101 	lsl.w	r1, ip, r1
 800f66a:	4281      	cmp	r1, r0
 800f66c:	f040 84a1 	bne.w	800ffb2 <__ieee754_pow+0x9da>
 800f670:	f00c 0c01 	and.w	ip, ip, #1
 800f674:	f1cc 0102 	rsb	r1, ip, #2
 800f678:	9100      	str	r1, [sp, #0]
 800f67a:	b180      	cbz	r0, 800f69e <__ieee754_pow+0xc6>
 800f67c:	e059      	b.n	800f732 <__ieee754_pow+0x15a>
 800f67e:	2800      	cmp	r0, #0
 800f680:	d155      	bne.n	800f72e <__ieee754_pow+0x156>
 800f682:	f1c1 0114 	rsb	r1, r1, #20
 800f686:	fa46 fc01 	asr.w	ip, r6, r1
 800f68a:	fa0c f101 	lsl.w	r1, ip, r1
 800f68e:	42b1      	cmp	r1, r6
 800f690:	f040 848c 	bne.w	800ffac <__ieee754_pow+0x9d4>
 800f694:	f00c 0c01 	and.w	ip, ip, #1
 800f698:	f1cc 0102 	rsb	r1, ip, #2
 800f69c:	9100      	str	r1, [sp, #0]
 800f69e:	4959      	ldr	r1, [pc, #356]	; (800f804 <__ieee754_pow+0x22c>)
 800f6a0:	428e      	cmp	r6, r1
 800f6a2:	d12d      	bne.n	800f700 <__ieee754_pow+0x128>
 800f6a4:	2f00      	cmp	r7, #0
 800f6a6:	da79      	bge.n	800f79c <__ieee754_pow+0x1c4>
 800f6a8:	4956      	ldr	r1, [pc, #344]	; (800f804 <__ieee754_pow+0x22c>)
 800f6aa:	2000      	movs	r0, #0
 800f6ac:	f7f1 f8fe 	bl	80008ac <__aeabi_ddiv>
 800f6b0:	e016      	b.n	800f6e0 <__ieee754_pow+0x108>
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	9100      	str	r1, [sp, #0]
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d13b      	bne.n	800f732 <__ieee754_pow+0x15a>
 800f6ba:	494f      	ldr	r1, [pc, #316]	; (800f7f8 <__ieee754_pow+0x220>)
 800f6bc:	428e      	cmp	r6, r1
 800f6be:	d1ee      	bne.n	800f69e <__ieee754_pow+0xc6>
 800f6c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800f6c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800f6c8:	ea53 0308 	orrs.w	r3, r3, r8
 800f6cc:	f000 8466 	beq.w	800ff9c <__ieee754_pow+0x9c4>
 800f6d0:	4b4d      	ldr	r3, [pc, #308]	; (800f808 <__ieee754_pow+0x230>)
 800f6d2:	429c      	cmp	r4, r3
 800f6d4:	dd0d      	ble.n	800f6f2 <__ieee754_pow+0x11a>
 800f6d6:	2f00      	cmp	r7, #0
 800f6d8:	f280 8464 	bge.w	800ffa4 <__ieee754_pow+0x9cc>
 800f6dc:	2000      	movs	r0, #0
 800f6de:	2100      	movs	r1, #0
 800f6e0:	ec41 0b10 	vmov	d0, r0, r1
 800f6e4:	b00d      	add	sp, #52	; 0x34
 800f6e6:	ecbd 8b06 	vpop	{d8-d10}
 800f6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ee:	2102      	movs	r1, #2
 800f6f0:	e7e0      	b.n	800f6b4 <__ieee754_pow+0xdc>
 800f6f2:	2f00      	cmp	r7, #0
 800f6f4:	daf2      	bge.n	800f6dc <__ieee754_pow+0x104>
 800f6f6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800f6fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f6fe:	e7ef      	b.n	800f6e0 <__ieee754_pow+0x108>
 800f700:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800f704:	d104      	bne.n	800f710 <__ieee754_pow+0x138>
 800f706:	4610      	mov	r0, r2
 800f708:	4619      	mov	r1, r3
 800f70a:	f7f0 ffa5 	bl	8000658 <__aeabi_dmul>
 800f70e:	e7e7      	b.n	800f6e0 <__ieee754_pow+0x108>
 800f710:	493e      	ldr	r1, [pc, #248]	; (800f80c <__ieee754_pow+0x234>)
 800f712:	428f      	cmp	r7, r1
 800f714:	d10d      	bne.n	800f732 <__ieee754_pow+0x15a>
 800f716:	f1b9 0f00 	cmp.w	r9, #0
 800f71a:	db0a      	blt.n	800f732 <__ieee754_pow+0x15a>
 800f71c:	ec43 2b10 	vmov	d0, r2, r3
 800f720:	b00d      	add	sp, #52	; 0x34
 800f722:	ecbd 8b06 	vpop	{d8-d10}
 800f726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f72a:	f000 bc77 	b.w	801001c <__ieee754_sqrt>
 800f72e:	2100      	movs	r1, #0
 800f730:	9100      	str	r1, [sp, #0]
 800f732:	ec43 2b10 	vmov	d0, r2, r3
 800f736:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f73a:	f000 fd23 	bl	8010184 <fabs>
 800f73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f742:	ec51 0b10 	vmov	r0, r1, d0
 800f746:	f1b8 0f00 	cmp.w	r8, #0
 800f74a:	d12a      	bne.n	800f7a2 <__ieee754_pow+0x1ca>
 800f74c:	b12c      	cbz	r4, 800f75a <__ieee754_pow+0x182>
 800f74e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800f804 <__ieee754_pow+0x22c>
 800f752:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800f756:	45e6      	cmp	lr, ip
 800f758:	d123      	bne.n	800f7a2 <__ieee754_pow+0x1ca>
 800f75a:	2f00      	cmp	r7, #0
 800f75c:	da05      	bge.n	800f76a <__ieee754_pow+0x192>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	2000      	movs	r0, #0
 800f764:	4927      	ldr	r1, [pc, #156]	; (800f804 <__ieee754_pow+0x22c>)
 800f766:	f7f1 f8a1 	bl	80008ac <__aeabi_ddiv>
 800f76a:	f1b9 0f00 	cmp.w	r9, #0
 800f76e:	dab7      	bge.n	800f6e0 <__ieee754_pow+0x108>
 800f770:	9b00      	ldr	r3, [sp, #0]
 800f772:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800f776:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f77a:	4323      	orrs	r3, r4
 800f77c:	d108      	bne.n	800f790 <__ieee754_pow+0x1b8>
 800f77e:	4602      	mov	r2, r0
 800f780:	460b      	mov	r3, r1
 800f782:	4610      	mov	r0, r2
 800f784:	4619      	mov	r1, r3
 800f786:	f7f0 fdaf 	bl	80002e8 <__aeabi_dsub>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	e78d      	b.n	800f6ac <__ieee754_pow+0xd4>
 800f790:	9b00      	ldr	r3, [sp, #0]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d1a4      	bne.n	800f6e0 <__ieee754_pow+0x108>
 800f796:	4602      	mov	r2, r0
 800f798:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f79c:	4610      	mov	r0, r2
 800f79e:	4619      	mov	r1, r3
 800f7a0:	e79e      	b.n	800f6e0 <__ieee754_pow+0x108>
 800f7a2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800f7a6:	f10c 35ff 	add.w	r5, ip, #4294967295
 800f7aa:	950a      	str	r5, [sp, #40]	; 0x28
 800f7ac:	9d00      	ldr	r5, [sp, #0]
 800f7ae:	46ac      	mov	ip, r5
 800f7b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f7b2:	ea5c 0505 	orrs.w	r5, ip, r5
 800f7b6:	d0e4      	beq.n	800f782 <__ieee754_pow+0x1aa>
 800f7b8:	4b15      	ldr	r3, [pc, #84]	; (800f810 <__ieee754_pow+0x238>)
 800f7ba:	429e      	cmp	r6, r3
 800f7bc:	f340 80fc 	ble.w	800f9b8 <__ieee754_pow+0x3e0>
 800f7c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800f7c4:	429e      	cmp	r6, r3
 800f7c6:	4b10      	ldr	r3, [pc, #64]	; (800f808 <__ieee754_pow+0x230>)
 800f7c8:	dd07      	ble.n	800f7da <__ieee754_pow+0x202>
 800f7ca:	429c      	cmp	r4, r3
 800f7cc:	dc0a      	bgt.n	800f7e4 <__ieee754_pow+0x20c>
 800f7ce:	2f00      	cmp	r7, #0
 800f7d0:	da84      	bge.n	800f6dc <__ieee754_pow+0x104>
 800f7d2:	a307      	add	r3, pc, #28	; (adr r3, 800f7f0 <__ieee754_pow+0x218>)
 800f7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d8:	e795      	b.n	800f706 <__ieee754_pow+0x12e>
 800f7da:	429c      	cmp	r4, r3
 800f7dc:	dbf7      	blt.n	800f7ce <__ieee754_pow+0x1f6>
 800f7de:	4b09      	ldr	r3, [pc, #36]	; (800f804 <__ieee754_pow+0x22c>)
 800f7e0:	429c      	cmp	r4, r3
 800f7e2:	dd17      	ble.n	800f814 <__ieee754_pow+0x23c>
 800f7e4:	2f00      	cmp	r7, #0
 800f7e6:	dcf4      	bgt.n	800f7d2 <__ieee754_pow+0x1fa>
 800f7e8:	e778      	b.n	800f6dc <__ieee754_pow+0x104>
 800f7ea:	bf00      	nop
 800f7ec:	f3af 8000 	nop.w
 800f7f0:	8800759c 	.word	0x8800759c
 800f7f4:	7e37e43c 	.word	0x7e37e43c
 800f7f8:	7ff00000 	.word	0x7ff00000
 800f7fc:	08010deb 	.word	0x08010deb
 800f800:	433fffff 	.word	0x433fffff
 800f804:	3ff00000 	.word	0x3ff00000
 800f808:	3fefffff 	.word	0x3fefffff
 800f80c:	3fe00000 	.word	0x3fe00000
 800f810:	41e00000 	.word	0x41e00000
 800f814:	4b64      	ldr	r3, [pc, #400]	; (800f9a8 <__ieee754_pow+0x3d0>)
 800f816:	2200      	movs	r2, #0
 800f818:	f7f0 fd66 	bl	80002e8 <__aeabi_dsub>
 800f81c:	a356      	add	r3, pc, #344	; (adr r3, 800f978 <__ieee754_pow+0x3a0>)
 800f81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f822:	4604      	mov	r4, r0
 800f824:	460d      	mov	r5, r1
 800f826:	f7f0 ff17 	bl	8000658 <__aeabi_dmul>
 800f82a:	a355      	add	r3, pc, #340	; (adr r3, 800f980 <__ieee754_pow+0x3a8>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	4606      	mov	r6, r0
 800f832:	460f      	mov	r7, r1
 800f834:	4620      	mov	r0, r4
 800f836:	4629      	mov	r1, r5
 800f838:	f7f0 ff0e 	bl	8000658 <__aeabi_dmul>
 800f83c:	4b5b      	ldr	r3, [pc, #364]	; (800f9ac <__ieee754_pow+0x3d4>)
 800f83e:	4682      	mov	sl, r0
 800f840:	468b      	mov	fp, r1
 800f842:	2200      	movs	r2, #0
 800f844:	4620      	mov	r0, r4
 800f846:	4629      	mov	r1, r5
 800f848:	f7f0 ff06 	bl	8000658 <__aeabi_dmul>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	a14d      	add	r1, pc, #308	; (adr r1, 800f988 <__ieee754_pow+0x3b0>)
 800f852:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f856:	f7f0 fd47 	bl	80002e8 <__aeabi_dsub>
 800f85a:	4622      	mov	r2, r4
 800f85c:	462b      	mov	r3, r5
 800f85e:	f7f0 fefb 	bl	8000658 <__aeabi_dmul>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	2000      	movs	r0, #0
 800f868:	4951      	ldr	r1, [pc, #324]	; (800f9b0 <__ieee754_pow+0x3d8>)
 800f86a:	f7f0 fd3d 	bl	80002e8 <__aeabi_dsub>
 800f86e:	4622      	mov	r2, r4
 800f870:	4680      	mov	r8, r0
 800f872:	4689      	mov	r9, r1
 800f874:	462b      	mov	r3, r5
 800f876:	4620      	mov	r0, r4
 800f878:	4629      	mov	r1, r5
 800f87a:	f7f0 feed 	bl	8000658 <__aeabi_dmul>
 800f87e:	4602      	mov	r2, r0
 800f880:	460b      	mov	r3, r1
 800f882:	4640      	mov	r0, r8
 800f884:	4649      	mov	r1, r9
 800f886:	f7f0 fee7 	bl	8000658 <__aeabi_dmul>
 800f88a:	a341      	add	r3, pc, #260	; (adr r3, 800f990 <__ieee754_pow+0x3b8>)
 800f88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f890:	f7f0 fee2 	bl	8000658 <__aeabi_dmul>
 800f894:	4602      	mov	r2, r0
 800f896:	460b      	mov	r3, r1
 800f898:	4650      	mov	r0, sl
 800f89a:	4659      	mov	r1, fp
 800f89c:	f7f0 fd24 	bl	80002e8 <__aeabi_dsub>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	4680      	mov	r8, r0
 800f8a6:	4689      	mov	r9, r1
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	4639      	mov	r1, r7
 800f8ac:	f7f0 fd1e 	bl	80002ec <__adddf3>
 800f8b0:	2400      	movs	r4, #0
 800f8b2:	4632      	mov	r2, r6
 800f8b4:	463b      	mov	r3, r7
 800f8b6:	4620      	mov	r0, r4
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	f7f0 fd15 	bl	80002e8 <__aeabi_dsub>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	4640      	mov	r0, r8
 800f8c4:	4649      	mov	r1, r9
 800f8c6:	f7f0 fd0f 	bl	80002e8 <__aeabi_dsub>
 800f8ca:	9b00      	ldr	r3, [sp, #0]
 800f8cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	4682      	mov	sl, r0
 800f8d4:	468b      	mov	fp, r1
 800f8d6:	f040 81f1 	bne.w	800fcbc <__ieee754_pow+0x6e4>
 800f8da:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800f998 <__ieee754_pow+0x3c0>
 800f8de:	eeb0 8a47 	vmov.f32	s16, s14
 800f8e2:	eef0 8a67 	vmov.f32	s17, s15
 800f8e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f8ea:	2600      	movs	r6, #0
 800f8ec:	4632      	mov	r2, r6
 800f8ee:	463b      	mov	r3, r7
 800f8f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8f4:	f7f0 fcf8 	bl	80002e8 <__aeabi_dsub>
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	462b      	mov	r3, r5
 800f8fc:	f7f0 feac 	bl	8000658 <__aeabi_dmul>
 800f900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f904:	4680      	mov	r8, r0
 800f906:	4689      	mov	r9, r1
 800f908:	4650      	mov	r0, sl
 800f90a:	4659      	mov	r1, fp
 800f90c:	f7f0 fea4 	bl	8000658 <__aeabi_dmul>
 800f910:	4602      	mov	r2, r0
 800f912:	460b      	mov	r3, r1
 800f914:	4640      	mov	r0, r8
 800f916:	4649      	mov	r1, r9
 800f918:	f7f0 fce8 	bl	80002ec <__adddf3>
 800f91c:	4632      	mov	r2, r6
 800f91e:	463b      	mov	r3, r7
 800f920:	4680      	mov	r8, r0
 800f922:	4689      	mov	r9, r1
 800f924:	4620      	mov	r0, r4
 800f926:	4629      	mov	r1, r5
 800f928:	f7f0 fe96 	bl	8000658 <__aeabi_dmul>
 800f92c:	460b      	mov	r3, r1
 800f92e:	4604      	mov	r4, r0
 800f930:	460d      	mov	r5, r1
 800f932:	4602      	mov	r2, r0
 800f934:	4649      	mov	r1, r9
 800f936:	4640      	mov	r0, r8
 800f938:	f7f0 fcd8 	bl	80002ec <__adddf3>
 800f93c:	4b1d      	ldr	r3, [pc, #116]	; (800f9b4 <__ieee754_pow+0x3dc>)
 800f93e:	4299      	cmp	r1, r3
 800f940:	ec45 4b19 	vmov	d9, r4, r5
 800f944:	4606      	mov	r6, r0
 800f946:	460f      	mov	r7, r1
 800f948:	468b      	mov	fp, r1
 800f94a:	f340 82fe 	ble.w	800ff4a <__ieee754_pow+0x972>
 800f94e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f952:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f956:	4303      	orrs	r3, r0
 800f958:	f000 81f0 	beq.w	800fd3c <__ieee754_pow+0x764>
 800f95c:	a310      	add	r3, pc, #64	; (adr r3, 800f9a0 <__ieee754_pow+0x3c8>)
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	ec51 0b18 	vmov	r0, r1, d8
 800f966:	f7f0 fe77 	bl	8000658 <__aeabi_dmul>
 800f96a:	a30d      	add	r3, pc, #52	; (adr r3, 800f9a0 <__ieee754_pow+0x3c8>)
 800f96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f970:	e6cb      	b.n	800f70a <__ieee754_pow+0x132>
 800f972:	bf00      	nop
 800f974:	f3af 8000 	nop.w
 800f978:	60000000 	.word	0x60000000
 800f97c:	3ff71547 	.word	0x3ff71547
 800f980:	f85ddf44 	.word	0xf85ddf44
 800f984:	3e54ae0b 	.word	0x3e54ae0b
 800f988:	55555555 	.word	0x55555555
 800f98c:	3fd55555 	.word	0x3fd55555
 800f990:	652b82fe 	.word	0x652b82fe
 800f994:	3ff71547 	.word	0x3ff71547
 800f998:	00000000 	.word	0x00000000
 800f99c:	bff00000 	.word	0xbff00000
 800f9a0:	8800759c 	.word	0x8800759c
 800f9a4:	7e37e43c 	.word	0x7e37e43c
 800f9a8:	3ff00000 	.word	0x3ff00000
 800f9ac:	3fd00000 	.word	0x3fd00000
 800f9b0:	3fe00000 	.word	0x3fe00000
 800f9b4:	408fffff 	.word	0x408fffff
 800f9b8:	4bd7      	ldr	r3, [pc, #860]	; (800fd18 <__ieee754_pow+0x740>)
 800f9ba:	ea03 0309 	and.w	r3, r3, r9
 800f9be:	2200      	movs	r2, #0
 800f9c0:	b92b      	cbnz	r3, 800f9ce <__ieee754_pow+0x3f6>
 800f9c2:	4bd6      	ldr	r3, [pc, #856]	; (800fd1c <__ieee754_pow+0x744>)
 800f9c4:	f7f0 fe48 	bl	8000658 <__aeabi_dmul>
 800f9c8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	1523      	asrs	r3, r4, #20
 800f9d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9d4:	4413      	add	r3, r2
 800f9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9d8:	4bd1      	ldr	r3, [pc, #836]	; (800fd20 <__ieee754_pow+0x748>)
 800f9da:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f9de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f9e2:	429c      	cmp	r4, r3
 800f9e4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f9e8:	dd08      	ble.n	800f9fc <__ieee754_pow+0x424>
 800f9ea:	4bce      	ldr	r3, [pc, #824]	; (800fd24 <__ieee754_pow+0x74c>)
 800f9ec:	429c      	cmp	r4, r3
 800f9ee:	f340 8163 	ble.w	800fcb8 <__ieee754_pow+0x6e0>
 800f9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9f8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f9fc:	2400      	movs	r4, #0
 800f9fe:	00e3      	lsls	r3, r4, #3
 800fa00:	930b      	str	r3, [sp, #44]	; 0x2c
 800fa02:	4bc9      	ldr	r3, [pc, #804]	; (800fd28 <__ieee754_pow+0x750>)
 800fa04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fa08:	ed93 7b00 	vldr	d7, [r3]
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	ec53 2b17 	vmov	r2, r3, d7
 800fa12:	eeb0 8a47 	vmov.f32	s16, s14
 800fa16:	eef0 8a67 	vmov.f32	s17, s15
 800fa1a:	4682      	mov	sl, r0
 800fa1c:	f7f0 fc64 	bl	80002e8 <__aeabi_dsub>
 800fa20:	4652      	mov	r2, sl
 800fa22:	4606      	mov	r6, r0
 800fa24:	460f      	mov	r7, r1
 800fa26:	462b      	mov	r3, r5
 800fa28:	ec51 0b18 	vmov	r0, r1, d8
 800fa2c:	f7f0 fc5e 	bl	80002ec <__adddf3>
 800fa30:	4602      	mov	r2, r0
 800fa32:	460b      	mov	r3, r1
 800fa34:	2000      	movs	r0, #0
 800fa36:	49bd      	ldr	r1, [pc, #756]	; (800fd2c <__ieee754_pow+0x754>)
 800fa38:	f7f0 ff38 	bl	80008ac <__aeabi_ddiv>
 800fa3c:	ec41 0b19 	vmov	d9, r0, r1
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	4630      	mov	r0, r6
 800fa46:	4639      	mov	r1, r7
 800fa48:	f7f0 fe06 	bl	8000658 <__aeabi_dmul>
 800fa4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fa50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa58:	2300      	movs	r3, #0
 800fa5a:	9304      	str	r3, [sp, #16]
 800fa5c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800fa60:	46ab      	mov	fp, r5
 800fa62:	106d      	asrs	r5, r5, #1
 800fa64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fa68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fa6c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fa70:	2200      	movs	r2, #0
 800fa72:	4640      	mov	r0, r8
 800fa74:	4649      	mov	r1, r9
 800fa76:	4614      	mov	r4, r2
 800fa78:	461d      	mov	r5, r3
 800fa7a:	f7f0 fded 	bl	8000658 <__aeabi_dmul>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	460b      	mov	r3, r1
 800fa82:	4630      	mov	r0, r6
 800fa84:	4639      	mov	r1, r7
 800fa86:	f7f0 fc2f 	bl	80002e8 <__aeabi_dsub>
 800fa8a:	ec53 2b18 	vmov	r2, r3, d8
 800fa8e:	4606      	mov	r6, r0
 800fa90:	460f      	mov	r7, r1
 800fa92:	4620      	mov	r0, r4
 800fa94:	4629      	mov	r1, r5
 800fa96:	f7f0 fc27 	bl	80002e8 <__aeabi_dsub>
 800fa9a:	4602      	mov	r2, r0
 800fa9c:	460b      	mov	r3, r1
 800fa9e:	4650      	mov	r0, sl
 800faa0:	4659      	mov	r1, fp
 800faa2:	f7f0 fc21 	bl	80002e8 <__aeabi_dsub>
 800faa6:	4642      	mov	r2, r8
 800faa8:	464b      	mov	r3, r9
 800faaa:	f7f0 fdd5 	bl	8000658 <__aeabi_dmul>
 800faae:	4602      	mov	r2, r0
 800fab0:	460b      	mov	r3, r1
 800fab2:	4630      	mov	r0, r6
 800fab4:	4639      	mov	r1, r7
 800fab6:	f7f0 fc17 	bl	80002e8 <__aeabi_dsub>
 800faba:	ec53 2b19 	vmov	r2, r3, d9
 800fabe:	f7f0 fdcb 	bl	8000658 <__aeabi_dmul>
 800fac2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fac6:	ec41 0b18 	vmov	d8, r0, r1
 800faca:	4610      	mov	r0, r2
 800facc:	4619      	mov	r1, r3
 800face:	f7f0 fdc3 	bl	8000658 <__aeabi_dmul>
 800fad2:	a37d      	add	r3, pc, #500	; (adr r3, 800fcc8 <__ieee754_pow+0x6f0>)
 800fad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad8:	4604      	mov	r4, r0
 800fada:	460d      	mov	r5, r1
 800fadc:	f7f0 fdbc 	bl	8000658 <__aeabi_dmul>
 800fae0:	a37b      	add	r3, pc, #492	; (adr r3, 800fcd0 <__ieee754_pow+0x6f8>)
 800fae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae6:	f7f0 fc01 	bl	80002ec <__adddf3>
 800faea:	4622      	mov	r2, r4
 800faec:	462b      	mov	r3, r5
 800faee:	f7f0 fdb3 	bl	8000658 <__aeabi_dmul>
 800faf2:	a379      	add	r3, pc, #484	; (adr r3, 800fcd8 <__ieee754_pow+0x700>)
 800faf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf8:	f7f0 fbf8 	bl	80002ec <__adddf3>
 800fafc:	4622      	mov	r2, r4
 800fafe:	462b      	mov	r3, r5
 800fb00:	f7f0 fdaa 	bl	8000658 <__aeabi_dmul>
 800fb04:	a376      	add	r3, pc, #472	; (adr r3, 800fce0 <__ieee754_pow+0x708>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	f7f0 fbef 	bl	80002ec <__adddf3>
 800fb0e:	4622      	mov	r2, r4
 800fb10:	462b      	mov	r3, r5
 800fb12:	f7f0 fda1 	bl	8000658 <__aeabi_dmul>
 800fb16:	a374      	add	r3, pc, #464	; (adr r3, 800fce8 <__ieee754_pow+0x710>)
 800fb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1c:	f7f0 fbe6 	bl	80002ec <__adddf3>
 800fb20:	4622      	mov	r2, r4
 800fb22:	462b      	mov	r3, r5
 800fb24:	f7f0 fd98 	bl	8000658 <__aeabi_dmul>
 800fb28:	a371      	add	r3, pc, #452	; (adr r3, 800fcf0 <__ieee754_pow+0x718>)
 800fb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2e:	f7f0 fbdd 	bl	80002ec <__adddf3>
 800fb32:	4622      	mov	r2, r4
 800fb34:	4606      	mov	r6, r0
 800fb36:	460f      	mov	r7, r1
 800fb38:	462b      	mov	r3, r5
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	f7f0 fd8b 	bl	8000658 <__aeabi_dmul>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4630      	mov	r0, r6
 800fb48:	4639      	mov	r1, r7
 800fb4a:	f7f0 fd85 	bl	8000658 <__aeabi_dmul>
 800fb4e:	4642      	mov	r2, r8
 800fb50:	4604      	mov	r4, r0
 800fb52:	460d      	mov	r5, r1
 800fb54:	464b      	mov	r3, r9
 800fb56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fb5a:	f7f0 fbc7 	bl	80002ec <__adddf3>
 800fb5e:	ec53 2b18 	vmov	r2, r3, d8
 800fb62:	f7f0 fd79 	bl	8000658 <__aeabi_dmul>
 800fb66:	4622      	mov	r2, r4
 800fb68:	462b      	mov	r3, r5
 800fb6a:	f7f0 fbbf 	bl	80002ec <__adddf3>
 800fb6e:	4642      	mov	r2, r8
 800fb70:	4682      	mov	sl, r0
 800fb72:	468b      	mov	fp, r1
 800fb74:	464b      	mov	r3, r9
 800fb76:	4640      	mov	r0, r8
 800fb78:	4649      	mov	r1, r9
 800fb7a:	f7f0 fd6d 	bl	8000658 <__aeabi_dmul>
 800fb7e:	4b6c      	ldr	r3, [pc, #432]	; (800fd30 <__ieee754_pow+0x758>)
 800fb80:	2200      	movs	r2, #0
 800fb82:	4606      	mov	r6, r0
 800fb84:	460f      	mov	r7, r1
 800fb86:	f7f0 fbb1 	bl	80002ec <__adddf3>
 800fb8a:	4652      	mov	r2, sl
 800fb8c:	465b      	mov	r3, fp
 800fb8e:	f7f0 fbad 	bl	80002ec <__adddf3>
 800fb92:	9c04      	ldr	r4, [sp, #16]
 800fb94:	460d      	mov	r5, r1
 800fb96:	4622      	mov	r2, r4
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4640      	mov	r0, r8
 800fb9c:	4649      	mov	r1, r9
 800fb9e:	f7f0 fd5b 	bl	8000658 <__aeabi_dmul>
 800fba2:	4b63      	ldr	r3, [pc, #396]	; (800fd30 <__ieee754_pow+0x758>)
 800fba4:	4680      	mov	r8, r0
 800fba6:	4689      	mov	r9, r1
 800fba8:	2200      	movs	r2, #0
 800fbaa:	4620      	mov	r0, r4
 800fbac:	4629      	mov	r1, r5
 800fbae:	f7f0 fb9b 	bl	80002e8 <__aeabi_dsub>
 800fbb2:	4632      	mov	r2, r6
 800fbb4:	463b      	mov	r3, r7
 800fbb6:	f7f0 fb97 	bl	80002e8 <__aeabi_dsub>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4650      	mov	r0, sl
 800fbc0:	4659      	mov	r1, fp
 800fbc2:	f7f0 fb91 	bl	80002e8 <__aeabi_dsub>
 800fbc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fbca:	f7f0 fd45 	bl	8000658 <__aeabi_dmul>
 800fbce:	4622      	mov	r2, r4
 800fbd0:	4606      	mov	r6, r0
 800fbd2:	460f      	mov	r7, r1
 800fbd4:	462b      	mov	r3, r5
 800fbd6:	ec51 0b18 	vmov	r0, r1, d8
 800fbda:	f7f0 fd3d 	bl	8000658 <__aeabi_dmul>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	4639      	mov	r1, r7
 800fbe6:	f7f0 fb81 	bl	80002ec <__adddf3>
 800fbea:	4606      	mov	r6, r0
 800fbec:	460f      	mov	r7, r1
 800fbee:	4602      	mov	r2, r0
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	4640      	mov	r0, r8
 800fbf4:	4649      	mov	r1, r9
 800fbf6:	f7f0 fb79 	bl	80002ec <__adddf3>
 800fbfa:	9c04      	ldr	r4, [sp, #16]
 800fbfc:	a33e      	add	r3, pc, #248	; (adr r3, 800fcf8 <__ieee754_pow+0x720>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	4620      	mov	r0, r4
 800fc04:	460d      	mov	r5, r1
 800fc06:	f7f0 fd27 	bl	8000658 <__aeabi_dmul>
 800fc0a:	4642      	mov	r2, r8
 800fc0c:	ec41 0b18 	vmov	d8, r0, r1
 800fc10:	464b      	mov	r3, r9
 800fc12:	4620      	mov	r0, r4
 800fc14:	4629      	mov	r1, r5
 800fc16:	f7f0 fb67 	bl	80002e8 <__aeabi_dsub>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4630      	mov	r0, r6
 800fc20:	4639      	mov	r1, r7
 800fc22:	f7f0 fb61 	bl	80002e8 <__aeabi_dsub>
 800fc26:	a336      	add	r3, pc, #216	; (adr r3, 800fd00 <__ieee754_pow+0x728>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 fd14 	bl	8000658 <__aeabi_dmul>
 800fc30:	a335      	add	r3, pc, #212	; (adr r3, 800fd08 <__ieee754_pow+0x730>)
 800fc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc36:	4606      	mov	r6, r0
 800fc38:	460f      	mov	r7, r1
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	f7f0 fd0b 	bl	8000658 <__aeabi_dmul>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4630      	mov	r0, r6
 800fc48:	4639      	mov	r1, r7
 800fc4a:	f7f0 fb4f 	bl	80002ec <__adddf3>
 800fc4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc50:	4b38      	ldr	r3, [pc, #224]	; (800fd34 <__ieee754_pow+0x75c>)
 800fc52:	4413      	add	r3, r2
 800fc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc58:	f7f0 fb48 	bl	80002ec <__adddf3>
 800fc5c:	4682      	mov	sl, r0
 800fc5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc60:	468b      	mov	fp, r1
 800fc62:	f7f0 fc8f 	bl	8000584 <__aeabi_i2d>
 800fc66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc68:	4b33      	ldr	r3, [pc, #204]	; (800fd38 <__ieee754_pow+0x760>)
 800fc6a:	4413      	add	r3, r2
 800fc6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fc70:	4606      	mov	r6, r0
 800fc72:	460f      	mov	r7, r1
 800fc74:	4652      	mov	r2, sl
 800fc76:	465b      	mov	r3, fp
 800fc78:	ec51 0b18 	vmov	r0, r1, d8
 800fc7c:	f7f0 fb36 	bl	80002ec <__adddf3>
 800fc80:	4642      	mov	r2, r8
 800fc82:	464b      	mov	r3, r9
 800fc84:	f7f0 fb32 	bl	80002ec <__adddf3>
 800fc88:	4632      	mov	r2, r6
 800fc8a:	463b      	mov	r3, r7
 800fc8c:	f7f0 fb2e 	bl	80002ec <__adddf3>
 800fc90:	9c04      	ldr	r4, [sp, #16]
 800fc92:	4632      	mov	r2, r6
 800fc94:	463b      	mov	r3, r7
 800fc96:	4620      	mov	r0, r4
 800fc98:	460d      	mov	r5, r1
 800fc9a:	f7f0 fb25 	bl	80002e8 <__aeabi_dsub>
 800fc9e:	4642      	mov	r2, r8
 800fca0:	464b      	mov	r3, r9
 800fca2:	f7f0 fb21 	bl	80002e8 <__aeabi_dsub>
 800fca6:	ec53 2b18 	vmov	r2, r3, d8
 800fcaa:	f7f0 fb1d 	bl	80002e8 <__aeabi_dsub>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	4659      	mov	r1, fp
 800fcb6:	e606      	b.n	800f8c6 <__ieee754_pow+0x2ee>
 800fcb8:	2401      	movs	r4, #1
 800fcba:	e6a0      	b.n	800f9fe <__ieee754_pow+0x426>
 800fcbc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800fd10 <__ieee754_pow+0x738>
 800fcc0:	e60d      	b.n	800f8de <__ieee754_pow+0x306>
 800fcc2:	bf00      	nop
 800fcc4:	f3af 8000 	nop.w
 800fcc8:	4a454eef 	.word	0x4a454eef
 800fccc:	3fca7e28 	.word	0x3fca7e28
 800fcd0:	93c9db65 	.word	0x93c9db65
 800fcd4:	3fcd864a 	.word	0x3fcd864a
 800fcd8:	a91d4101 	.word	0xa91d4101
 800fcdc:	3fd17460 	.word	0x3fd17460
 800fce0:	518f264d 	.word	0x518f264d
 800fce4:	3fd55555 	.word	0x3fd55555
 800fce8:	db6fabff 	.word	0xdb6fabff
 800fcec:	3fdb6db6 	.word	0x3fdb6db6
 800fcf0:	33333303 	.word	0x33333303
 800fcf4:	3fe33333 	.word	0x3fe33333
 800fcf8:	e0000000 	.word	0xe0000000
 800fcfc:	3feec709 	.word	0x3feec709
 800fd00:	dc3a03fd 	.word	0xdc3a03fd
 800fd04:	3feec709 	.word	0x3feec709
 800fd08:	145b01f5 	.word	0x145b01f5
 800fd0c:	be3e2fe0 	.word	0xbe3e2fe0
 800fd10:	00000000 	.word	0x00000000
 800fd14:	3ff00000 	.word	0x3ff00000
 800fd18:	7ff00000 	.word	0x7ff00000
 800fd1c:	43400000 	.word	0x43400000
 800fd20:	0003988e 	.word	0x0003988e
 800fd24:	000bb679 	.word	0x000bb679
 800fd28:	080111c0 	.word	0x080111c0
 800fd2c:	3ff00000 	.word	0x3ff00000
 800fd30:	40080000 	.word	0x40080000
 800fd34:	080111e0 	.word	0x080111e0
 800fd38:	080111d0 	.word	0x080111d0
 800fd3c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010014 <__ieee754_pow+0xa3c>)
 800fd3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd42:	4640      	mov	r0, r8
 800fd44:	4649      	mov	r1, r9
 800fd46:	f7f0 fad1 	bl	80002ec <__adddf3>
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	ec41 0b1a 	vmov	d10, r0, r1
 800fd50:	462b      	mov	r3, r5
 800fd52:	4630      	mov	r0, r6
 800fd54:	4639      	mov	r1, r7
 800fd56:	f7f0 fac7 	bl	80002e8 <__aeabi_dsub>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	ec51 0b1a 	vmov	r0, r1, d10
 800fd62:	f7f0 ff09 	bl	8000b78 <__aeabi_dcmpgt>
 800fd66:	2800      	cmp	r0, #0
 800fd68:	f47f adf8 	bne.w	800f95c <__ieee754_pow+0x384>
 800fd6c:	4aa4      	ldr	r2, [pc, #656]	; (8010000 <__ieee754_pow+0xa28>)
 800fd6e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fd72:	4293      	cmp	r3, r2
 800fd74:	f340 810b 	ble.w	800ff8e <__ieee754_pow+0x9b6>
 800fd78:	151b      	asrs	r3, r3, #20
 800fd7a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800fd7e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800fd82:	fa4a f303 	asr.w	r3, sl, r3
 800fd86:	445b      	add	r3, fp
 800fd88:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800fd8c:	4e9d      	ldr	r6, [pc, #628]	; (8010004 <__ieee754_pow+0xa2c>)
 800fd8e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800fd92:	4116      	asrs	r6, r2
 800fd94:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800fd98:	2000      	movs	r0, #0
 800fd9a:	ea23 0106 	bic.w	r1, r3, r6
 800fd9e:	f1c2 0214 	rsb	r2, r2, #20
 800fda2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800fda6:	fa4a fa02 	asr.w	sl, sl, r2
 800fdaa:	f1bb 0f00 	cmp.w	fp, #0
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	bfb8      	it	lt
 800fdb8:	f1ca 0a00 	rsblt	sl, sl, #0
 800fdbc:	f7f0 fa94 	bl	80002e8 <__aeabi_dsub>
 800fdc0:	ec41 0b19 	vmov	d9, r0, r1
 800fdc4:	4642      	mov	r2, r8
 800fdc6:	464b      	mov	r3, r9
 800fdc8:	ec51 0b19 	vmov	r0, r1, d9
 800fdcc:	f7f0 fa8e 	bl	80002ec <__adddf3>
 800fdd0:	2400      	movs	r4, #0
 800fdd2:	a379      	add	r3, pc, #484	; (adr r3, 800ffb8 <__ieee754_pow+0x9e0>)
 800fdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd8:	4620      	mov	r0, r4
 800fdda:	460d      	mov	r5, r1
 800fddc:	f7f0 fc3c 	bl	8000658 <__aeabi_dmul>
 800fde0:	ec53 2b19 	vmov	r2, r3, d9
 800fde4:	4606      	mov	r6, r0
 800fde6:	460f      	mov	r7, r1
 800fde8:	4620      	mov	r0, r4
 800fdea:	4629      	mov	r1, r5
 800fdec:	f7f0 fa7c 	bl	80002e8 <__aeabi_dsub>
 800fdf0:	4602      	mov	r2, r0
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	4640      	mov	r0, r8
 800fdf6:	4649      	mov	r1, r9
 800fdf8:	f7f0 fa76 	bl	80002e8 <__aeabi_dsub>
 800fdfc:	a370      	add	r3, pc, #448	; (adr r3, 800ffc0 <__ieee754_pow+0x9e8>)
 800fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe02:	f7f0 fc29 	bl	8000658 <__aeabi_dmul>
 800fe06:	a370      	add	r3, pc, #448	; (adr r3, 800ffc8 <__ieee754_pow+0x9f0>)
 800fe08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe0c:	4680      	mov	r8, r0
 800fe0e:	4689      	mov	r9, r1
 800fe10:	4620      	mov	r0, r4
 800fe12:	4629      	mov	r1, r5
 800fe14:	f7f0 fc20 	bl	8000658 <__aeabi_dmul>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	4640      	mov	r0, r8
 800fe1e:	4649      	mov	r1, r9
 800fe20:	f7f0 fa64 	bl	80002ec <__adddf3>
 800fe24:	4604      	mov	r4, r0
 800fe26:	460d      	mov	r5, r1
 800fe28:	4602      	mov	r2, r0
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	4639      	mov	r1, r7
 800fe30:	f7f0 fa5c 	bl	80002ec <__adddf3>
 800fe34:	4632      	mov	r2, r6
 800fe36:	463b      	mov	r3, r7
 800fe38:	4680      	mov	r8, r0
 800fe3a:	4689      	mov	r9, r1
 800fe3c:	f7f0 fa54 	bl	80002e8 <__aeabi_dsub>
 800fe40:	4602      	mov	r2, r0
 800fe42:	460b      	mov	r3, r1
 800fe44:	4620      	mov	r0, r4
 800fe46:	4629      	mov	r1, r5
 800fe48:	f7f0 fa4e 	bl	80002e8 <__aeabi_dsub>
 800fe4c:	4642      	mov	r2, r8
 800fe4e:	4606      	mov	r6, r0
 800fe50:	460f      	mov	r7, r1
 800fe52:	464b      	mov	r3, r9
 800fe54:	4640      	mov	r0, r8
 800fe56:	4649      	mov	r1, r9
 800fe58:	f7f0 fbfe 	bl	8000658 <__aeabi_dmul>
 800fe5c:	a35c      	add	r3, pc, #368	; (adr r3, 800ffd0 <__ieee754_pow+0x9f8>)
 800fe5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe62:	4604      	mov	r4, r0
 800fe64:	460d      	mov	r5, r1
 800fe66:	f7f0 fbf7 	bl	8000658 <__aeabi_dmul>
 800fe6a:	a35b      	add	r3, pc, #364	; (adr r3, 800ffd8 <__ieee754_pow+0xa00>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	f7f0 fa3a 	bl	80002e8 <__aeabi_dsub>
 800fe74:	4622      	mov	r2, r4
 800fe76:	462b      	mov	r3, r5
 800fe78:	f7f0 fbee 	bl	8000658 <__aeabi_dmul>
 800fe7c:	a358      	add	r3, pc, #352	; (adr r3, 800ffe0 <__ieee754_pow+0xa08>)
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	f7f0 fa33 	bl	80002ec <__adddf3>
 800fe86:	4622      	mov	r2, r4
 800fe88:	462b      	mov	r3, r5
 800fe8a:	f7f0 fbe5 	bl	8000658 <__aeabi_dmul>
 800fe8e:	a356      	add	r3, pc, #344	; (adr r3, 800ffe8 <__ieee754_pow+0xa10>)
 800fe90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe94:	f7f0 fa28 	bl	80002e8 <__aeabi_dsub>
 800fe98:	4622      	mov	r2, r4
 800fe9a:	462b      	mov	r3, r5
 800fe9c:	f7f0 fbdc 	bl	8000658 <__aeabi_dmul>
 800fea0:	a353      	add	r3, pc, #332	; (adr r3, 800fff0 <__ieee754_pow+0xa18>)
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	f7f0 fa21 	bl	80002ec <__adddf3>
 800feaa:	4622      	mov	r2, r4
 800feac:	462b      	mov	r3, r5
 800feae:	f7f0 fbd3 	bl	8000658 <__aeabi_dmul>
 800feb2:	4602      	mov	r2, r0
 800feb4:	460b      	mov	r3, r1
 800feb6:	4640      	mov	r0, r8
 800feb8:	4649      	mov	r1, r9
 800feba:	f7f0 fa15 	bl	80002e8 <__aeabi_dsub>
 800febe:	4604      	mov	r4, r0
 800fec0:	460d      	mov	r5, r1
 800fec2:	4602      	mov	r2, r0
 800fec4:	460b      	mov	r3, r1
 800fec6:	4640      	mov	r0, r8
 800fec8:	4649      	mov	r1, r9
 800feca:	f7f0 fbc5 	bl	8000658 <__aeabi_dmul>
 800fece:	2200      	movs	r2, #0
 800fed0:	ec41 0b19 	vmov	d9, r0, r1
 800fed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fed8:	4620      	mov	r0, r4
 800feda:	4629      	mov	r1, r5
 800fedc:	f7f0 fa04 	bl	80002e8 <__aeabi_dsub>
 800fee0:	4602      	mov	r2, r0
 800fee2:	460b      	mov	r3, r1
 800fee4:	ec51 0b19 	vmov	r0, r1, d9
 800fee8:	f7f0 fce0 	bl	80008ac <__aeabi_ddiv>
 800feec:	4632      	mov	r2, r6
 800feee:	4604      	mov	r4, r0
 800fef0:	460d      	mov	r5, r1
 800fef2:	463b      	mov	r3, r7
 800fef4:	4640      	mov	r0, r8
 800fef6:	4649      	mov	r1, r9
 800fef8:	f7f0 fbae 	bl	8000658 <__aeabi_dmul>
 800fefc:	4632      	mov	r2, r6
 800fefe:	463b      	mov	r3, r7
 800ff00:	f7f0 f9f4 	bl	80002ec <__adddf3>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	4620      	mov	r0, r4
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	f7f0 f9ec 	bl	80002e8 <__aeabi_dsub>
 800ff10:	4642      	mov	r2, r8
 800ff12:	464b      	mov	r3, r9
 800ff14:	f7f0 f9e8 	bl	80002e8 <__aeabi_dsub>
 800ff18:	460b      	mov	r3, r1
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	493a      	ldr	r1, [pc, #232]	; (8010008 <__ieee754_pow+0xa30>)
 800ff1e:	2000      	movs	r0, #0
 800ff20:	f7f0 f9e2 	bl	80002e8 <__aeabi_dsub>
 800ff24:	e9cd 0100 	strd	r0, r1, [sp]
 800ff28:	9b01      	ldr	r3, [sp, #4]
 800ff2a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ff2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff32:	da2f      	bge.n	800ff94 <__ieee754_pow+0x9bc>
 800ff34:	4650      	mov	r0, sl
 800ff36:	ed9d 0b00 	vldr	d0, [sp]
 800ff3a:	f000 f9c1 	bl	80102c0 <scalbn>
 800ff3e:	ec51 0b10 	vmov	r0, r1, d0
 800ff42:	ec53 2b18 	vmov	r2, r3, d8
 800ff46:	f7ff bbe0 	b.w	800f70a <__ieee754_pow+0x132>
 800ff4a:	4b30      	ldr	r3, [pc, #192]	; (801000c <__ieee754_pow+0xa34>)
 800ff4c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ff50:	429e      	cmp	r6, r3
 800ff52:	f77f af0b 	ble.w	800fd6c <__ieee754_pow+0x794>
 800ff56:	4b2e      	ldr	r3, [pc, #184]	; (8010010 <__ieee754_pow+0xa38>)
 800ff58:	440b      	add	r3, r1
 800ff5a:	4303      	orrs	r3, r0
 800ff5c:	d00b      	beq.n	800ff76 <__ieee754_pow+0x99e>
 800ff5e:	a326      	add	r3, pc, #152	; (adr r3, 800fff8 <__ieee754_pow+0xa20>)
 800ff60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff64:	ec51 0b18 	vmov	r0, r1, d8
 800ff68:	f7f0 fb76 	bl	8000658 <__aeabi_dmul>
 800ff6c:	a322      	add	r3, pc, #136	; (adr r3, 800fff8 <__ieee754_pow+0xa20>)
 800ff6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff72:	f7ff bbca 	b.w	800f70a <__ieee754_pow+0x132>
 800ff76:	4622      	mov	r2, r4
 800ff78:	462b      	mov	r3, r5
 800ff7a:	f7f0 f9b5 	bl	80002e8 <__aeabi_dsub>
 800ff7e:	4642      	mov	r2, r8
 800ff80:	464b      	mov	r3, r9
 800ff82:	f7f0 fdef 	bl	8000b64 <__aeabi_dcmpge>
 800ff86:	2800      	cmp	r0, #0
 800ff88:	f43f aef0 	beq.w	800fd6c <__ieee754_pow+0x794>
 800ff8c:	e7e7      	b.n	800ff5e <__ieee754_pow+0x986>
 800ff8e:	f04f 0a00 	mov.w	sl, #0
 800ff92:	e717      	b.n	800fdc4 <__ieee754_pow+0x7ec>
 800ff94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	e7d2      	b.n	800ff42 <__ieee754_pow+0x96a>
 800ff9c:	491a      	ldr	r1, [pc, #104]	; (8010008 <__ieee754_pow+0xa30>)
 800ff9e:	2000      	movs	r0, #0
 800ffa0:	f7ff bb9e 	b.w	800f6e0 <__ieee754_pow+0x108>
 800ffa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffa8:	f7ff bb9a 	b.w	800f6e0 <__ieee754_pow+0x108>
 800ffac:	9000      	str	r0, [sp, #0]
 800ffae:	f7ff bb76 	b.w	800f69e <__ieee754_pow+0xc6>
 800ffb2:	2100      	movs	r1, #0
 800ffb4:	f7ff bb60 	b.w	800f678 <__ieee754_pow+0xa0>
 800ffb8:	00000000 	.word	0x00000000
 800ffbc:	3fe62e43 	.word	0x3fe62e43
 800ffc0:	fefa39ef 	.word	0xfefa39ef
 800ffc4:	3fe62e42 	.word	0x3fe62e42
 800ffc8:	0ca86c39 	.word	0x0ca86c39
 800ffcc:	be205c61 	.word	0xbe205c61
 800ffd0:	72bea4d0 	.word	0x72bea4d0
 800ffd4:	3e663769 	.word	0x3e663769
 800ffd8:	c5d26bf1 	.word	0xc5d26bf1
 800ffdc:	3ebbbd41 	.word	0x3ebbbd41
 800ffe0:	af25de2c 	.word	0xaf25de2c
 800ffe4:	3f11566a 	.word	0x3f11566a
 800ffe8:	16bebd93 	.word	0x16bebd93
 800ffec:	3f66c16c 	.word	0x3f66c16c
 800fff0:	5555553e 	.word	0x5555553e
 800fff4:	3fc55555 	.word	0x3fc55555
 800fff8:	c2f8f359 	.word	0xc2f8f359
 800fffc:	01a56e1f 	.word	0x01a56e1f
 8010000:	3fe00000 	.word	0x3fe00000
 8010004:	000fffff 	.word	0x000fffff
 8010008:	3ff00000 	.word	0x3ff00000
 801000c:	4090cbff 	.word	0x4090cbff
 8010010:	3f6f3400 	.word	0x3f6f3400
 8010014:	652b82fe 	.word	0x652b82fe
 8010018:	3c971547 	.word	0x3c971547

0801001c <__ieee754_sqrt>:
 801001c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010020:	ec55 4b10 	vmov	r4, r5, d0
 8010024:	4e56      	ldr	r6, [pc, #344]	; (8010180 <__ieee754_sqrt+0x164>)
 8010026:	43ae      	bics	r6, r5
 8010028:	ee10 0a10 	vmov	r0, s0
 801002c:	ee10 3a10 	vmov	r3, s0
 8010030:	4629      	mov	r1, r5
 8010032:	462a      	mov	r2, r5
 8010034:	d110      	bne.n	8010058 <__ieee754_sqrt+0x3c>
 8010036:	ee10 2a10 	vmov	r2, s0
 801003a:	462b      	mov	r3, r5
 801003c:	f7f0 fb0c 	bl	8000658 <__aeabi_dmul>
 8010040:	4602      	mov	r2, r0
 8010042:	460b      	mov	r3, r1
 8010044:	4620      	mov	r0, r4
 8010046:	4629      	mov	r1, r5
 8010048:	f7f0 f950 	bl	80002ec <__adddf3>
 801004c:	4604      	mov	r4, r0
 801004e:	460d      	mov	r5, r1
 8010050:	ec45 4b10 	vmov	d0, r4, r5
 8010054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010058:	2d00      	cmp	r5, #0
 801005a:	dc10      	bgt.n	801007e <__ieee754_sqrt+0x62>
 801005c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010060:	4330      	orrs	r0, r6
 8010062:	d0f5      	beq.n	8010050 <__ieee754_sqrt+0x34>
 8010064:	b15d      	cbz	r5, 801007e <__ieee754_sqrt+0x62>
 8010066:	ee10 2a10 	vmov	r2, s0
 801006a:	462b      	mov	r3, r5
 801006c:	ee10 0a10 	vmov	r0, s0
 8010070:	f7f0 f93a 	bl	80002e8 <__aeabi_dsub>
 8010074:	4602      	mov	r2, r0
 8010076:	460b      	mov	r3, r1
 8010078:	f7f0 fc18 	bl	80008ac <__aeabi_ddiv>
 801007c:	e7e6      	b.n	801004c <__ieee754_sqrt+0x30>
 801007e:	1509      	asrs	r1, r1, #20
 8010080:	d076      	beq.n	8010170 <__ieee754_sqrt+0x154>
 8010082:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010086:	07ce      	lsls	r6, r1, #31
 8010088:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801008c:	bf5e      	ittt	pl
 801008e:	0fda      	lsrpl	r2, r3, #31
 8010090:	005b      	lslpl	r3, r3, #1
 8010092:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010096:	0fda      	lsrs	r2, r3, #31
 8010098:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801009c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80100a0:	2000      	movs	r0, #0
 80100a2:	106d      	asrs	r5, r5, #1
 80100a4:	005b      	lsls	r3, r3, #1
 80100a6:	f04f 0e16 	mov.w	lr, #22
 80100aa:	4684      	mov	ip, r0
 80100ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80100b0:	eb0c 0401 	add.w	r4, ip, r1
 80100b4:	4294      	cmp	r4, r2
 80100b6:	bfde      	ittt	le
 80100b8:	1b12      	suble	r2, r2, r4
 80100ba:	eb04 0c01 	addle.w	ip, r4, r1
 80100be:	1840      	addle	r0, r0, r1
 80100c0:	0052      	lsls	r2, r2, #1
 80100c2:	f1be 0e01 	subs.w	lr, lr, #1
 80100c6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80100ca:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80100ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100d2:	d1ed      	bne.n	80100b0 <__ieee754_sqrt+0x94>
 80100d4:	4671      	mov	r1, lr
 80100d6:	2720      	movs	r7, #32
 80100d8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80100dc:	4562      	cmp	r2, ip
 80100de:	eb04 060e 	add.w	r6, r4, lr
 80100e2:	dc02      	bgt.n	80100ea <__ieee754_sqrt+0xce>
 80100e4:	d113      	bne.n	801010e <__ieee754_sqrt+0xf2>
 80100e6:	429e      	cmp	r6, r3
 80100e8:	d811      	bhi.n	801010e <__ieee754_sqrt+0xf2>
 80100ea:	2e00      	cmp	r6, #0
 80100ec:	eb06 0e04 	add.w	lr, r6, r4
 80100f0:	da43      	bge.n	801017a <__ieee754_sqrt+0x15e>
 80100f2:	f1be 0f00 	cmp.w	lr, #0
 80100f6:	db40      	blt.n	801017a <__ieee754_sqrt+0x15e>
 80100f8:	f10c 0801 	add.w	r8, ip, #1
 80100fc:	eba2 020c 	sub.w	r2, r2, ip
 8010100:	429e      	cmp	r6, r3
 8010102:	bf88      	it	hi
 8010104:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010108:	1b9b      	subs	r3, r3, r6
 801010a:	4421      	add	r1, r4
 801010c:	46c4      	mov	ip, r8
 801010e:	0052      	lsls	r2, r2, #1
 8010110:	3f01      	subs	r7, #1
 8010112:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010116:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801011a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801011e:	d1dd      	bne.n	80100dc <__ieee754_sqrt+0xc0>
 8010120:	4313      	orrs	r3, r2
 8010122:	d006      	beq.n	8010132 <__ieee754_sqrt+0x116>
 8010124:	1c4c      	adds	r4, r1, #1
 8010126:	bf13      	iteet	ne
 8010128:	3101      	addne	r1, #1
 801012a:	3001      	addeq	r0, #1
 801012c:	4639      	moveq	r1, r7
 801012e:	f021 0101 	bicne.w	r1, r1, #1
 8010132:	1043      	asrs	r3, r0, #1
 8010134:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010138:	0849      	lsrs	r1, r1, #1
 801013a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801013e:	07c2      	lsls	r2, r0, #31
 8010140:	bf48      	it	mi
 8010142:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010146:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801014a:	460c      	mov	r4, r1
 801014c:	463d      	mov	r5, r7
 801014e:	e77f      	b.n	8010050 <__ieee754_sqrt+0x34>
 8010150:	0ada      	lsrs	r2, r3, #11
 8010152:	3815      	subs	r0, #21
 8010154:	055b      	lsls	r3, r3, #21
 8010156:	2a00      	cmp	r2, #0
 8010158:	d0fa      	beq.n	8010150 <__ieee754_sqrt+0x134>
 801015a:	02d7      	lsls	r7, r2, #11
 801015c:	d50a      	bpl.n	8010174 <__ieee754_sqrt+0x158>
 801015e:	f1c1 0420 	rsb	r4, r1, #32
 8010162:	fa23 f404 	lsr.w	r4, r3, r4
 8010166:	1e4d      	subs	r5, r1, #1
 8010168:	408b      	lsls	r3, r1
 801016a:	4322      	orrs	r2, r4
 801016c:	1b41      	subs	r1, r0, r5
 801016e:	e788      	b.n	8010082 <__ieee754_sqrt+0x66>
 8010170:	4608      	mov	r0, r1
 8010172:	e7f0      	b.n	8010156 <__ieee754_sqrt+0x13a>
 8010174:	0052      	lsls	r2, r2, #1
 8010176:	3101      	adds	r1, #1
 8010178:	e7ef      	b.n	801015a <__ieee754_sqrt+0x13e>
 801017a:	46e0      	mov	r8, ip
 801017c:	e7be      	b.n	80100fc <__ieee754_sqrt+0xe0>
 801017e:	bf00      	nop
 8010180:	7ff00000 	.word	0x7ff00000

08010184 <fabs>:
 8010184:	ec51 0b10 	vmov	r0, r1, d0
 8010188:	ee10 2a10 	vmov	r2, s0
 801018c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010190:	ec43 2b10 	vmov	d0, r2, r3
 8010194:	4770      	bx	lr

08010196 <finite>:
 8010196:	b082      	sub	sp, #8
 8010198:	ed8d 0b00 	vstr	d0, [sp]
 801019c:	9801      	ldr	r0, [sp, #4]
 801019e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80101a2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80101a6:	0fc0      	lsrs	r0, r0, #31
 80101a8:	b002      	add	sp, #8
 80101aa:	4770      	bx	lr

080101ac <rint>:
 80101ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80101ae:	ec51 0b10 	vmov	r0, r1, d0
 80101b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80101b6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80101ba:	2e13      	cmp	r6, #19
 80101bc:	ee10 4a10 	vmov	r4, s0
 80101c0:	460b      	mov	r3, r1
 80101c2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80101c6:	dc58      	bgt.n	801027a <rint+0xce>
 80101c8:	2e00      	cmp	r6, #0
 80101ca:	da2b      	bge.n	8010224 <rint+0x78>
 80101cc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80101d0:	4302      	orrs	r2, r0
 80101d2:	d023      	beq.n	801021c <rint+0x70>
 80101d4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80101d8:	4302      	orrs	r2, r0
 80101da:	4254      	negs	r4, r2
 80101dc:	4314      	orrs	r4, r2
 80101de:	0c4b      	lsrs	r3, r1, #17
 80101e0:	0b24      	lsrs	r4, r4, #12
 80101e2:	045b      	lsls	r3, r3, #17
 80101e4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80101e8:	ea44 0103 	orr.w	r1, r4, r3
 80101ec:	4b32      	ldr	r3, [pc, #200]	; (80102b8 <rint+0x10c>)
 80101ee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80101f2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80101f6:	4602      	mov	r2, r0
 80101f8:	460b      	mov	r3, r1
 80101fa:	4630      	mov	r0, r6
 80101fc:	4639      	mov	r1, r7
 80101fe:	f7f0 f875 	bl	80002ec <__adddf3>
 8010202:	e9cd 0100 	strd	r0, r1, [sp]
 8010206:	463b      	mov	r3, r7
 8010208:	e9dd 0100 	ldrd	r0, r1, [sp]
 801020c:	4632      	mov	r2, r6
 801020e:	f7f0 f86b 	bl	80002e8 <__aeabi_dsub>
 8010212:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010216:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801021a:	4639      	mov	r1, r7
 801021c:	ec41 0b10 	vmov	d0, r0, r1
 8010220:	b003      	add	sp, #12
 8010222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010224:	4a25      	ldr	r2, [pc, #148]	; (80102bc <rint+0x110>)
 8010226:	4132      	asrs	r2, r6
 8010228:	ea01 0702 	and.w	r7, r1, r2
 801022c:	4307      	orrs	r7, r0
 801022e:	d0f5      	beq.n	801021c <rint+0x70>
 8010230:	0851      	lsrs	r1, r2, #1
 8010232:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8010236:	4314      	orrs	r4, r2
 8010238:	d00c      	beq.n	8010254 <rint+0xa8>
 801023a:	ea23 0201 	bic.w	r2, r3, r1
 801023e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010242:	2e13      	cmp	r6, #19
 8010244:	fa43 f606 	asr.w	r6, r3, r6
 8010248:	bf0c      	ite	eq
 801024a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801024e:	2400      	movne	r4, #0
 8010250:	ea42 0306 	orr.w	r3, r2, r6
 8010254:	4918      	ldr	r1, [pc, #96]	; (80102b8 <rint+0x10c>)
 8010256:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801025a:	4622      	mov	r2, r4
 801025c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010260:	4620      	mov	r0, r4
 8010262:	4629      	mov	r1, r5
 8010264:	f7f0 f842 	bl	80002ec <__adddf3>
 8010268:	e9cd 0100 	strd	r0, r1, [sp]
 801026c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010270:	4622      	mov	r2, r4
 8010272:	462b      	mov	r3, r5
 8010274:	f7f0 f838 	bl	80002e8 <__aeabi_dsub>
 8010278:	e7d0      	b.n	801021c <rint+0x70>
 801027a:	2e33      	cmp	r6, #51	; 0x33
 801027c:	dd07      	ble.n	801028e <rint+0xe2>
 801027e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010282:	d1cb      	bne.n	801021c <rint+0x70>
 8010284:	ee10 2a10 	vmov	r2, s0
 8010288:	f7f0 f830 	bl	80002ec <__adddf3>
 801028c:	e7c6      	b.n	801021c <rint+0x70>
 801028e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8010292:	f04f 36ff 	mov.w	r6, #4294967295
 8010296:	40d6      	lsrs	r6, r2
 8010298:	4230      	tst	r0, r6
 801029a:	d0bf      	beq.n	801021c <rint+0x70>
 801029c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80102a0:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80102a4:	bf1f      	itttt	ne
 80102a6:	ea24 0101 	bicne.w	r1, r4, r1
 80102aa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80102ae:	fa44 f202 	asrne.w	r2, r4, r2
 80102b2:	ea41 0402 	orrne.w	r4, r1, r2
 80102b6:	e7cd      	b.n	8010254 <rint+0xa8>
 80102b8:	080111f0 	.word	0x080111f0
 80102bc:	000fffff 	.word	0x000fffff

080102c0 <scalbn>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	ec55 4b10 	vmov	r4, r5, d0
 80102c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80102ca:	4606      	mov	r6, r0
 80102cc:	462b      	mov	r3, r5
 80102ce:	b99a      	cbnz	r2, 80102f8 <scalbn+0x38>
 80102d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80102d4:	4323      	orrs	r3, r4
 80102d6:	d036      	beq.n	8010346 <scalbn+0x86>
 80102d8:	4b39      	ldr	r3, [pc, #228]	; (80103c0 <scalbn+0x100>)
 80102da:	4629      	mov	r1, r5
 80102dc:	ee10 0a10 	vmov	r0, s0
 80102e0:	2200      	movs	r2, #0
 80102e2:	f7f0 f9b9 	bl	8000658 <__aeabi_dmul>
 80102e6:	4b37      	ldr	r3, [pc, #220]	; (80103c4 <scalbn+0x104>)
 80102e8:	429e      	cmp	r6, r3
 80102ea:	4604      	mov	r4, r0
 80102ec:	460d      	mov	r5, r1
 80102ee:	da10      	bge.n	8010312 <scalbn+0x52>
 80102f0:	a32b      	add	r3, pc, #172	; (adr r3, 80103a0 <scalbn+0xe0>)
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	e03a      	b.n	801036e <scalbn+0xae>
 80102f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80102fc:	428a      	cmp	r2, r1
 80102fe:	d10c      	bne.n	801031a <scalbn+0x5a>
 8010300:	ee10 2a10 	vmov	r2, s0
 8010304:	4620      	mov	r0, r4
 8010306:	4629      	mov	r1, r5
 8010308:	f7ef fff0 	bl	80002ec <__adddf3>
 801030c:	4604      	mov	r4, r0
 801030e:	460d      	mov	r5, r1
 8010310:	e019      	b.n	8010346 <scalbn+0x86>
 8010312:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010316:	460b      	mov	r3, r1
 8010318:	3a36      	subs	r2, #54	; 0x36
 801031a:	4432      	add	r2, r6
 801031c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010320:	428a      	cmp	r2, r1
 8010322:	dd08      	ble.n	8010336 <scalbn+0x76>
 8010324:	2d00      	cmp	r5, #0
 8010326:	a120      	add	r1, pc, #128	; (adr r1, 80103a8 <scalbn+0xe8>)
 8010328:	e9d1 0100 	ldrd	r0, r1, [r1]
 801032c:	da1c      	bge.n	8010368 <scalbn+0xa8>
 801032e:	a120      	add	r1, pc, #128	; (adr r1, 80103b0 <scalbn+0xf0>)
 8010330:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010334:	e018      	b.n	8010368 <scalbn+0xa8>
 8010336:	2a00      	cmp	r2, #0
 8010338:	dd08      	ble.n	801034c <scalbn+0x8c>
 801033a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801033e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010342:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010346:	ec45 4b10 	vmov	d0, r4, r5
 801034a:	bd70      	pop	{r4, r5, r6, pc}
 801034c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010350:	da19      	bge.n	8010386 <scalbn+0xc6>
 8010352:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010356:	429e      	cmp	r6, r3
 8010358:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801035c:	dd0a      	ble.n	8010374 <scalbn+0xb4>
 801035e:	a112      	add	r1, pc, #72	; (adr r1, 80103a8 <scalbn+0xe8>)
 8010360:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d1e2      	bne.n	801032e <scalbn+0x6e>
 8010368:	a30f      	add	r3, pc, #60	; (adr r3, 80103a8 <scalbn+0xe8>)
 801036a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036e:	f7f0 f973 	bl	8000658 <__aeabi_dmul>
 8010372:	e7cb      	b.n	801030c <scalbn+0x4c>
 8010374:	a10a      	add	r1, pc, #40	; (adr r1, 80103a0 <scalbn+0xe0>)
 8010376:	e9d1 0100 	ldrd	r0, r1, [r1]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d0b8      	beq.n	80102f0 <scalbn+0x30>
 801037e:	a10e      	add	r1, pc, #56	; (adr r1, 80103b8 <scalbn+0xf8>)
 8010380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010384:	e7b4      	b.n	80102f0 <scalbn+0x30>
 8010386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801038a:	3236      	adds	r2, #54	; 0x36
 801038c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010390:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010394:	4620      	mov	r0, r4
 8010396:	4b0c      	ldr	r3, [pc, #48]	; (80103c8 <scalbn+0x108>)
 8010398:	2200      	movs	r2, #0
 801039a:	e7e8      	b.n	801036e <scalbn+0xae>
 801039c:	f3af 8000 	nop.w
 80103a0:	c2f8f359 	.word	0xc2f8f359
 80103a4:	01a56e1f 	.word	0x01a56e1f
 80103a8:	8800759c 	.word	0x8800759c
 80103ac:	7e37e43c 	.word	0x7e37e43c
 80103b0:	8800759c 	.word	0x8800759c
 80103b4:	fe37e43c 	.word	0xfe37e43c
 80103b8:	c2f8f359 	.word	0xc2f8f359
 80103bc:	81a56e1f 	.word	0x81a56e1f
 80103c0:	43500000 	.word	0x43500000
 80103c4:	ffff3cb0 	.word	0xffff3cb0
 80103c8:	3c900000 	.word	0x3c900000

080103cc <_init>:
 80103cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ce:	bf00      	nop
 80103d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103d2:	bc08      	pop	{r3}
 80103d4:	469e      	mov	lr, r3
 80103d6:	4770      	bx	lr

080103d8 <_fini>:
 80103d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103da:	bf00      	nop
 80103dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103de:	bc08      	pop	{r3}
 80103e0:	469e      	mov	lr, r3
 80103e2:	4770      	bx	lr
