
TRR2021_Roulant_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011004  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff0  080111d8  080111d8  000211d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121c8  080121c8  0007a984  2**0
                  CONTENTS
  4 .ARM          00000008  080121c8  080121c8  000221c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121d0  080121d0  0007a984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121d0  080121d0  000221d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080121d4  080121d4  000221d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080121d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  20000200  080123d8  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d8c  080123d8  00030d8c  2**0
                  ALLOC
 11 .mem_telemetrie 0003a984  20010000  080123d8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  0007a984  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c0cd  00000000  00000000  0007a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a4c  00000000  00000000  00096a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e0  00000000  00000000  0009a4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  0009b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3bb  00000000  00000000  0009cd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aed6  00000000  00000000  000c70c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc1da  00000000  00000000  000e1f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001de173  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006edc  00000000  00000000  001de1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080111bc 	.word	0x080111bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	080111bc 	.word	0x080111bc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <calculConsigneTrapezoidaleVitesse>:

extern st_param_conf gParametresConfiguration;
typedef enum { automate_principal_radio, automate_principal_autonome, automate_principal_shell } eEtatsAutomatePrincipal;

void calculConsigneTrapezoidaleVitesse(st_context_robot *a_pRobot, float deltaT)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
//            vitesse_courante -= ROBOT_DEC_MAX;
//    }
//
    float difference;

    difference = a_pRobot->vitesse_cible - a_pRobot->vitesse_cmd_courante;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001068:	edc7 7a03 	vstr	s15, [r7, #12]

    if(difference > 0)
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	dd22      	ble.n	80010c0 <calculConsigneTrapezoidaleVitesse+0x74>
    {
    	if(difference > gParametresConfiguration.acceleration_max/deltaT)
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <calculConsigneTrapezoidaleVitesse+0xd4>)
 800107c:	edd3 6a00 	vldr	s13, [r3]
 8001080:	ed97 7a00 	vldr	s14, [r7]
 8001084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001088:	ed97 7a03 	vldr	s14, [r7, #12]
 800108c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	dd0f      	ble.n	80010b6 <calculConsigneTrapezoidaleVitesse+0x6a>
    		a_pRobot->vitesse_cmd_courante += gParametresConfiguration.acceleration_max/deltaT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <calculConsigneTrapezoidaleVitesse+0xd4>)
 800109e:	ed93 6a00 	vldr	s12, [r3]
 80010a2:	edd7 6a00 	vldr	s13, [r7]
 80010a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    	if(difference < gParametresConfiguration.deceleration_max/deltaT)
    		a_pRobot->vitesse_cmd_courante -= gParametresConfiguration.deceleration_max/deltaT;
    	else
    		a_pRobot->vitesse_cmd_courante = a_pRobot->vitesse_cible;
    }
}
 80010b4:	e02e      	b.n	8001114 <calculConsigneTrapezoidaleVitesse+0xc8>
    		a_pRobot->vitesse_cmd_courante = a_pRobot->vitesse_cible;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
}
 80010be:	e029      	b.n	8001114 <calculConsigneTrapezoidaleVitesse+0xc8>
    else if(difference < 0)
 80010c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d400      	bmi.n	80010d0 <calculConsigneTrapezoidaleVitesse+0x84>
}
 80010ce:	e021      	b.n	8001114 <calculConsigneTrapezoidaleVitesse+0xc8>
    	if(difference < gParametresConfiguration.deceleration_max/deltaT)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <calculConsigneTrapezoidaleVitesse+0xd4>)
 80010d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80010d6:	ed97 7a00 	vldr	s14, [r7]
 80010da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010de:	ed97 7a03 	vldr	s14, [r7, #12]
 80010e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d50f      	bpl.n	800110c <calculConsigneTrapezoidaleVitesse+0xc0>
    		a_pRobot->vitesse_cmd_courante -= gParametresConfiguration.deceleration_max/deltaT;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <calculConsigneTrapezoidaleVitesse+0xd4>)
 80010f4:	ed93 6a01 	vldr	s12, [r3, #4]
 80010f8:	edd7 6a00 	vldr	s13, [r7]
 80010fc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800110a:	e003      	b.n	8001114 <calculConsigneTrapezoidaleVitesse+0xc8>
    		a_pRobot->vitesse_cmd_courante = a_pRobot->vitesse_cible;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000b00 	.word	0x20000b00

08001124 <algo_decouverte>:
//typedef enum { automate_auto_depart, automate_auto_stop, automate_auto_decouverte, automate_auto_fini } eEtatsAutomateAutomatique;

eEtatsAutomateAutomatique etat_automate_automatique;

void algo_decouverte(st_context_robot *a_pRobot, float a_deltaT)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b096      	sub	sp, #88	; 0x58
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	ed87 0a00 	vstr	s0, [r7]
	float throttle, direction;
	st_tele_element *pTeleElement;
	int erreur;

	// Acquisition des distances
	tfminiplus_getLastAcquisition(MINILIDAR_DROIT, &lidarDroitDistance, &lidarDroitStrength, &lidarDroitTemperature);
 8001130:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001134:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001138:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800113c:	2000      	movs	r0, #0
 800113e:	f004 fc8f 	bl	8005a60 <tfminiplus_getLastAcquisition>
	tfminiplus_getLastAcquisition(MINILIDAR_GAUCHE, &lidarGaucheDistance, &lidarGaucheStrength, &lidarGaucheTemperature);
 8001142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001146:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800114a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800114e:	2001      	movs	r0, #1
 8001150:	f004 fc86 	bl	8005a60 <tfminiplus_getLastAcquisition>
	tfminiplus_getLastAcquisition(MINILIDAR_AVANT, &lidarAvantDistance, &lidarAvantStrength, &lidarAvantTemperature);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800115c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001160:	2003      	movs	r0, #3
 8001162:	f004 fc7d 	bl	8005a60 <tfminiplus_getLastAcquisition>
	tfminiplus_getLastAcquisition(MINILIDAR_HAUT, &lidarHautDistance, &lidarHautStrength, &lidarHautTemperature);
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	f107 021c 	add.w	r2, r7, #28
 800116e:	f107 0120 	add.w	r1, r7, #32
 8001172:	2002      	movs	r0, #2
 8001174:	f004 fc74 	bl	8005a60 <tfminiplus_getLastAcquisition>

	// Acquisition de la vitesse instantannée du robot
	vehicule_speed_aimant_get(&robot_vitesse);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4618      	mov	r0, r3
 800117e:	f002 f8c3 	bl	8003308 <vehicule_speed_aimant_get>
	vehicule_distance_aimant_get(&robot_distance);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4618      	mov	r0, r3
 8001188:	f002 f912 	bl	80033b0 <vehicule_distance_aimant_get>

	a_pRobot->elapsedTime += a_deltaT;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001190:	ee07 3a90 	vmov	s15, r3
 8001194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001198:	edd7 7a00 	vldr	s15, [r7]
 800119c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011a4:	ee17 2a90 	vmov	r2, s15
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	63da      	str	r2, [r3, #60]	; 0x3c
	a_pRobot->travelledDistance += robot_distance;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c4:	ee17 2a90 	vmov	r2, s15
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38

	// Automate
	switch(etat_automate_automatique)
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <algo_decouverte+0x268>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d01e      	beq.n	8001212 <algo_decouverte+0xee>
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	dc47      	bgt.n	8001268 <algo_decouverte+0x144>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <algo_decouverte+0xbe>
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d02f      	beq.n	8001240 <algo_decouverte+0x11c>
 80011e0:	e042      	b.n	8001268 <algo_decouverte+0x144>
	{
	case automate_auto_depart :
	  // Demarrage jursuqu'à la vitesse de croisière
		a_pRobot->vitesse_cible = gParametresConfiguration.vitesse_max_decouverte;
 80011e2:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <algo_decouverte+0x26c>)
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40

		calculConsigneTrapezoidaleVitesse(a_pRobot, a_deltaT);
 80011ea:	ed97 0a00 	vldr	s0, [r7]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff2c 	bl	800104c <calculConsigneTrapezoidaleVitesse>

	  // Lorsque le robot passe sous l'arche alors passage à l'état automate_auto_decouverte
//		if((lidarHautDistance != -2) && ((lidarHautDistance>30) || (lidarHautDistance<150)))
//			// Detection de l'arche
//			etat_automate_automatique = automate_auto_decouverte;
		if(a_pRobot->vitesse_cmd_courante == a_pRobot->vitesse_cible)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001200:	eeb4 7a67 	vcmp.f32	s14, s15
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d132      	bne.n	8001270 <algo_decouverte+0x14c>
			etat_automate_automatique = automate_auto_decouverte;
 800120a:	4b60      	ldr	r3, [pc, #384]	; (800138c <algo_decouverte+0x268>)
 800120c:	2202      	movs	r2, #2
 800120e:	701a      	strb	r2, [r3, #0]
		break;
 8001210:	e02e      	b.n	8001270 <algo_decouverte+0x14c>
	case automate_auto_decouverte :
	  // Suivi de la piste et enregistrement de la position, du sens des virages

	  // Si passage sous l'arche, alors passage à l'état automate_auto_stop
		// Pour commencer on met une limite de distance (7m) pour pas que le robot file partout
		if( ((lidarHautDistance != -2) && ((lidarHautDistance>30) || (lidarHautDistance<150))) ||
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	f113 0f02 	cmn.w	r3, #2
 8001218:	d005      	beq.n	8001226 <algo_decouverte+0x102>
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2b1e      	cmp	r3, #30
 800121e:	dc07      	bgt.n	8001230 <algo_decouverte+0x10c>
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	2b95      	cmp	r3, #149	; 0x95
 8001224:	dd04      	ble.n	8001230 <algo_decouverte+0x10c>
			(a_pRobot->travelledDistance > 700) )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		if( ((lidarHautDistance != -2) && ((lidarHautDistance>30) || (lidarHautDistance<150))) ||
 800122a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800122e:	dd21      	ble.n	8001274 <algo_decouverte+0x150>
		{
			// Detection de l'arche
			a_pRobot->vitesse_cible = 0.0;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
			etat_automate_automatique = automate_auto_stop;
 8001238:	4b54      	ldr	r3, [pc, #336]	; (800138c <algo_decouverte+0x268>)
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]
		}
	  break;
 800123e:	e019      	b.n	8001274 <algo_decouverte+0x150>
	case automate_auto_stop :
	  // Decelleration jusqu'à l'arrêt total
	  // Quand la vitesse reelle est à 0, alors passage à l'état automate_auto_fini
		if(abs(robot_vitesse) < 0.1) // 0.1 m/s
 8001240:	edd7 7a05 	vldr	s15, [r7, #20]
 8001244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001248:	ee17 3a90 	vmov	r3, s15
 800124c:	2b00      	cmp	r3, #0
 800124e:	db13      	blt.n	8001278 <algo_decouverte+0x154>
 8001250:	edd7 7a05 	vldr	s15, [r7, #20]
 8001254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001258:	ee17 3a90 	vmov	r3, s15
 800125c:	2b00      	cmp	r3, #0
 800125e:	dc0b      	bgt.n	8001278 <algo_decouverte+0x154>
			etat_automate_automatique = automate_auto_fini;
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <algo_decouverte+0x268>)
 8001262:	2203      	movs	r2, #3
 8001264:	701a      	strb	r2, [r3, #0]
	  break;
 8001266:	e007      	b.n	8001278 <algo_decouverte+0x154>
	default :
	  etat_automate_automatique = automate_auto_depart;
 8001268:	4b48      	ldr	r3, [pc, #288]	; (800138c <algo_decouverte+0x268>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e004      	b.n	800127a <algo_decouverte+0x156>
		break;
 8001270:	bf00      	nop
 8001272:	e002      	b.n	800127a <algo_decouverte+0x156>
	  break;
 8001274:	bf00      	nop
 8001276:	e000      	b.n	800127a <algo_decouverte+0x156>
	  break;
 8001278:	bf00      	nop
	}

	// Calculs des PID
	throttle = pid_output(&(a_pRobot->pidVitesse), a_pRobot->vitesse_cmd_courante - robot_vitesse);
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001282:	edd7 7a05 	vldr	s15, [r7, #20]
 8001286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800128a:	eeb0 0a67 	vmov.f32	s0, s15
 800128e:	4610      	mov	r0, r2
 8001290:	f001 fe16 	bl	8002ec0 <pid_output>
 8001294:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50

	if((lidarDroitDistance != -2) && (lidarGaucheDistance != -2))
 8001298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129a:	f113 0f02 	cmn.w	r3, #2
 800129e:	d008      	beq.n	80012b2 <algo_decouverte+0x18e>
 80012a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a2:	f113 0f02 	cmn.w	r3, #2
 80012a6:	d004      	beq.n	80012b2 <algo_decouverte+0x18e>
		erreur_direction = lidarDroitDistance - lidarGaucheDistance;
 80012a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80012aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
 80012b0:	e01a      	b.n	80012e8 <algo_decouverte+0x1c4>
	else
	{
		// Les lidars mesures les distances des bords à 45°.
		// La piste fait 1.5m de largeur
		// La distance mesurée lorsque le robot est au milieu est de  75/cos(45°) soit 106 cm
		if((lidarDroitDistance == -2) && (lidarGaucheDistance == -2))
 80012b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012b4:	f113 0f02 	cmn.w	r3, #2
 80012b8:	d106      	bne.n	80012c8 <algo_decouverte+0x1a4>
 80012ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012bc:	f113 0f02 	cmn.w	r3, #2
 80012c0:	d102      	bne.n	80012c8 <algo_decouverte+0x1a4>
			// On est mal !!!!
			erreur_direction = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
 80012c6:	e00f      	b.n	80012e8 <algo_decouverte+0x1c4>
		else if(lidarDroitDistance == -2)
 80012c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ca:	f113 0f02 	cmn.w	r3, #2
 80012ce:	d104      	bne.n	80012da <algo_decouverte+0x1b6>
			erreur_direction = 106 - lidarGaucheDistance;
 80012d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012d2:	f1c3 036a 	rsb	r3, r3, #106	; 0x6a
 80012d6:	657b      	str	r3, [r7, #84]	; 0x54
 80012d8:	e006      	b.n	80012e8 <algo_decouverte+0x1c4>
		else if(lidarGaucheDistance == -2)
 80012da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012dc:	f113 0f02 	cmn.w	r3, #2
 80012e0:	d102      	bne.n	80012e8 <algo_decouverte+0x1c4>
			erreur_direction = lidarDroitDistance - 106;
 80012e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e4:	3b6a      	subs	r3, #106	; 0x6a
 80012e6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	direction = pid_output(&(a_pRobot->pidDirection), (float)erreur_direction);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	331c      	adds	r3, #28
 80012ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012ee:	ee07 2a90 	vmov	s15, r2
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	eeb0 0a67 	vmov.f32	s0, s15
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fde0 	bl	8002ec0 <pid_output>
 8001300:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c

	// Envoi des commandes
	vehicule_dir_set(direction);
 8001304:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 8001308:	f002 f88c 	bl	8003424 <vehicule_dir_set>
	vehicule_throttle_set(throttle);
 800130c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8001310:	f002 f8ca 	bl	80034a8 <vehicule_throttle_set>

	// Télémétrie
	pTeleElement = telemetrie_pt_enreg_suivant(&erreur);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	4618      	mov	r0, r3
 800131a:	f004 f80b 	bl	8005334 <telemetrie_pt_enreg_suivant>
 800131e:	64b8      	str	r0, [r7, #72]	; 0x48
	if(erreur == 0)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d12e      	bne.n	8001384 <algo_decouverte+0x260>
	{
		pTeleElement->consigne_direction = direction;
 8001326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001328:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800132a:	605a      	str	r2, [r3, #4]
		pTeleElement->consigne_vitesse = throttle;
 800132c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800132e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001330:	601a      	str	r2, [r3, #0]
		pTeleElement->mesure_vitesse = robot_vitesse;
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001336:	609a      	str	r2, [r3, #8]
		pTeleElement->mesure_distance = robot_distance;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800133c:	60da      	str	r2, [r3, #12]
		pTeleElement->lidar_droit = lidarDroitDistance;
 800133e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001342:	611a      	str	r2, [r3, #16]
		pTeleElement->lidar_gauche = lidarGaucheDistance;
 8001344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001348:	615a      	str	r2, [r3, #20]
		pTeleElement->lidar_avant = lidarAvantDistance;
 800134a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800134c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800134e:	619a      	str	r2, [r3, #24]
		pTeleElement->lidar_haut = lidarHautDistance;
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001354:	61da      	str	r2, [r3, #28]
		pTeleElement->heading = gyro_get_heading();
 8001356:	f000 f9c9 	bl	80016ec <gyro_get_heading>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001360:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		pTeleElement->gyro_dps = gyro_get_dps();
 8001364:	f000 f9a2 	bl	80016ac <gyro_get_dps>
 8001368:	eef0 7a40 	vmov.f32	s15, s0
 800136c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800136e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		pTeleElement->etat_automate_principal = automate_principal_autonome;
 8001372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2020 	strb.w	r2, [r3, #32]
		pTeleElement->etat_automate_auto = etat_automate_automatique;
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <algo_decouverte+0x268>)
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

}
 8001384:	bf00      	nop
 8001386:	3758      	adds	r7, #88	; 0x58
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000290 	.word	0x20000290
 8001390:	20000b00 	.word	0x20000b00

08001394 <algo_init>:

void algo_init(st_context_robot *a_pRobot)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	etat_automate_automatique = automate_auto_depart;
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <algo_init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]

	// Initialisation de la télémétrie
	telemetrie_init();
 80013a2:	f004 f903 	bl	80055ac <telemetrie_init>
	gyro_reset_heading();
 80013a6:	f000 f993 	bl	80016d0 <gyro_reset_heading>

	// Initialisation des éléments de base du robot
	a_pRobot->travelledDistance = 0;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	639a      	str	r2, [r3, #56]	; 0x38
	a_pRobot->vitesse_cible = 0.0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f04f 0200 	mov.w	r2, #0
 80013b6:	641a      	str	r2, [r3, #64]	; 0x40
	a_pRobot->vitesse_cmd_courante = 0.0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	; 0x44
	a_pRobot->elapsedTime = 0.0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	63da      	str	r2, [r3, #60]	; 0x3c

	// Initialisation des PID
	pid_init(&(a_pRobot->pidVitesse), gParametresConfiguration.pid_vitesse_kp, gParametresConfiguration.pid_vitesse_ki, gParametresConfiguration.pid_vitesse_kd, 0.8);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <algo_init+0x94>)
 80013ca:	edd2 7a05 	vldr	s15, [r2, #20]
 80013ce:	4a16      	ldr	r2, [pc, #88]	; (8001428 <algo_init+0x94>)
 80013d0:	ed92 7a06 	vldr	s14, [r2, #24]
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <algo_init+0x94>)
 80013d6:	edd2 6a07 	vldr	s13, [r2, #28]
 80013da:	eddf 1a14 	vldr	s3, [pc, #80]	; 800142c <algo_init+0x98>
 80013de:	eeb0 1a66 	vmov.f32	s2, s13
 80013e2:	eef0 0a47 	vmov.f32	s1, s14
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 fd3e 	bl	8002e6c <pid_init>
	pid_init(&(a_pRobot->pidDirection), gParametresConfiguration.pid_direction_kp, gParametresConfiguration.pid_direction_ki, gParametresConfiguration.pid_direction_kd, 0.8);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	331c      	adds	r3, #28
 80013f4:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <algo_init+0x94>)
 80013f6:	edd2 7a08 	vldr	s15, [r2, #32]
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <algo_init+0x94>)
 80013fc:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 8001400:	4a09      	ldr	r2, [pc, #36]	; (8001428 <algo_init+0x94>)
 8001402:	edd2 6a0a 	vldr	s13, [r2, #40]	; 0x28
 8001406:	eddf 1a09 	vldr	s3, [pc, #36]	; 800142c <algo_init+0x98>
 800140a:	eeb0 1a66 	vmov.f32	s2, s13
 800140e:	eef0 0a47 	vmov.f32	s1, s14
 8001412:	eeb0 0a67 	vmov.f32	s0, s15
 8001416:	4618      	mov	r0, r3
 8001418:	f001 fd28 	bl	8002e6c <pid_init>

}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000290 	.word	0x20000290
 8001428:	20000b00 	.word	0x20000b00
 800142c:	3f4ccccd 	.word	0x3f4ccccd

08001430 <gyro_read_8bit_register>:
uint8_t gyro_read_8bit_register(
		uint8_t device_address,
		uint8_t register_address,
		HAL_StatusTypeDef * res
	)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af02      	add	r7, sp, #8
 8001436:	4603      	mov	r3, r0
 8001438:	603a      	str	r2, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	460b      	mov	r3, r1
 800143e:	71bb      	strb	r3, [r7, #6]
	// send the register address to I2C device
	*res = HAL_I2C_Master_Transmit(&hi2c1, device_address << 1, &register_address , 1, 10);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	b29b      	uxth	r3, r3
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b299      	uxth	r1, r3
 8001448:	1dba      	adds	r2, r7, #6
 800144a:	230a      	movs	r3, #10
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	4814      	ldr	r0, [pc, #80]	; (80014a4 <gyro_read_8bit_register+0x74>)
 8001452:	f005 ff4d 	bl	80072f0 <HAL_I2C_Master_Transmit>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	701a      	strb	r2, [r3, #0]
	if(*res==HAL_OK)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d119      	bne.n	800149a <gyro_read_8bit_register+0x6a>
	{
		uint8_t data = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
		// read the register value from I2C device
		*res = HAL_I2C_Master_Receive(&hi2c1, device_address << 1, &data, 1, 10);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	b29b      	uxth	r3, r3
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b299      	uxth	r1, r3
 8001472:	f107 020f 	add.w	r2, r7, #15
 8001476:	230a      	movs	r3, #10
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <gyro_read_8bit_register+0x74>)
 800147e:	f006 f82b 	bl	80074d8 <HAL_I2C_Master_Receive>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	701a      	strb	r2, [r3, #0]
		if(*res==HAL_OK)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <gyro_read_8bit_register+0x66>
		{
			// return the register value
			return data;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	e002      	b.n	800149c <gyro_read_8bit_register+0x6c>
		}
		else
		{
			return 0xFF;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	e000      	b.n	800149c <gyro_read_8bit_register+0x6c>
		}
	}
	else
	{
		return 0xFF;
 800149a:	23ff      	movs	r3, #255	; 0xff
	}
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200004dc 	.word	0x200004dc

080014a8 <gyro_write_8bit_register>:
		uint8_t device_address,
		uint8_t register_address,
		uint8_t data,
		HAL_StatusTypeDef * res
	)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
 80014b4:	460b      	mov	r3, r1
 80014b6:	71bb      	strb	r3, [r7, #6]
 80014b8:	4613      	mov	r3, r2
 80014ba:	717b      	strb	r3, [r7, #5]
	// send the register address and data to I2C device
	uint8_t data_buf[]= {register_address, data};
 80014bc:	79bb      	ldrb	r3, [r7, #6]
 80014be:	733b      	strb	r3, [r7, #12]
 80014c0:	797b      	ldrb	r3, [r7, #5]
 80014c2:	737b      	strb	r3, [r7, #13]
	*res = HAL_I2C_Master_Transmit(&hi2c1, device_address << 1, data_buf , 2, 10);
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	b299      	uxth	r1, r3
 80014cc:	f107 020c 	add.w	r2, r7, #12
 80014d0:	230a      	movs	r3, #10
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2302      	movs	r3, #2
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <gyro_write_8bit_register+0x44>)
 80014d8:	f005 ff0a 	bl	80072f0 <HAL_I2C_Master_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	701a      	strb	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200004dc 	.word	0x200004dc

080014f0 <gyro_init>:

// public functions ///////////////////////////////////////////////////////////

uint32_t gyro_init()
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	uint8_t res_read;
	HAL_StatusTypeDef result;
	uint8_t who_am_i;

	ctx.raw_value = 0;
 80014f6:	4b3a      	ldr	r3, [pc, #232]	; (80015e0 <gyro_init+0xf0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
	ctx.rate = 0.0;
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <gyro_init+0xf0>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
	ctx.bias = INIT_GYRO_BIAS;
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <gyro_init+0xf0>)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
	ctx.heading = 0.0f;
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <gyro_init+0xf0>)
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
	ctx.locked = 0;
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <gyro_init+0xf0>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]

	who_am_i = gyro_read_8bit_register(GYRO_I2C_ADDRESS,WHO_AM_I_ADDRESS,&result);
 800151a:	1d7b      	adds	r3, r7, #5
 800151c:	461a      	mov	r2, r3
 800151e:	210f      	movs	r1, #15
 8001520:	206b      	movs	r0, #107	; 0x6b
 8001522:	f7ff ff85 	bl	8001430 <gyro_read_8bit_register>
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
	if(result != HAL_OK)
 800152a:	797b      	ldrb	r3, [r7, #5]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <gyro_init+0x44>
	{
		return GYRO_NOT_DETECTED;
 8001530:	2301      	movs	r3, #1
 8001532:	e051      	b.n	80015d8 <gyro_init+0xe8>
	}
	if(who_am_i != WHO_AM_I_VALUE)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b69      	cmp	r3, #105	; 0x69
 8001538:	d001      	beq.n	800153e <gyro_init+0x4e>
	{
		return GYRO_NOT_IDENTIFIED;
 800153a:	2302      	movs	r3, #2
 800153c:	e04c      	b.n	80015d8 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL2, CTRL2_value_init, &result);
 800153e:	1d7b      	adds	r3, r7, #5
 8001540:	2230      	movs	r2, #48	; 0x30
 8001542:	2111      	movs	r1, #17
 8001544:	206b      	movs	r0, #107	; 0x6b
 8001546:	f7ff ffaf 	bl	80014a8 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL2, &result);
 800154a:	1d7b      	adds	r3, r7, #5
 800154c:	461a      	mov	r2, r3
 800154e:	2111      	movs	r1, #17
 8001550:	206b      	movs	r0, #107	; 0x6b
 8001552:	f7ff ff6d 	bl	8001430 <gyro_read_8bit_register>
 8001556:	4603      	mov	r3, r0
 8001558:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL2_value_init)
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	2b30      	cmp	r3, #48	; 0x30
 800155e:	d001      	beq.n	8001564 <gyro_init+0x74>
	{
		return GYRO_SETUP_FAILURE;
 8001560:	2302      	movs	r3, #2
 8001562:	e039      	b.n	80015d8 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL3, CTRL3_value_init, &result);
 8001564:	1d7b      	adds	r3, r7, #5
 8001566:	2240      	movs	r2, #64	; 0x40
 8001568:	2112      	movs	r1, #18
 800156a:	206b      	movs	r0, #107	; 0x6b
 800156c:	f7ff ff9c 	bl	80014a8 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL3, &result);
 8001570:	1d7b      	adds	r3, r7, #5
 8001572:	461a      	mov	r2, r3
 8001574:	2112      	movs	r1, #18
 8001576:	206b      	movs	r0, #107	; 0x6b
 8001578:	f7ff ff5a 	bl	8001430 <gyro_read_8bit_register>
 800157c:	4603      	mov	r3, r0
 800157e:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL3_value_init)
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	2b40      	cmp	r3, #64	; 0x40
 8001584:	d001      	beq.n	800158a <gyro_init+0x9a>
	{
		return GYRO_SETUP_FAILURE;
 8001586:	2302      	movs	r3, #2
 8001588:	e026      	b.n	80015d8 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL7, CTRL7_value_init, &result);
 800158a:	1d7b      	adds	r3, r7, #5
 800158c:	2243      	movs	r2, #67	; 0x43
 800158e:	2116      	movs	r1, #22
 8001590:	206b      	movs	r0, #107	; 0x6b
 8001592:	f7ff ff89 	bl	80014a8 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL7, &result);
 8001596:	1d7b      	adds	r3, r7, #5
 8001598:	461a      	mov	r2, r3
 800159a:	2116      	movs	r1, #22
 800159c:	206b      	movs	r0, #107	; 0x6b
 800159e:	f7ff ff47 	bl	8001430 <gyro_read_8bit_register>
 80015a2:	4603      	mov	r3, r0
 80015a4:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL7_value_init)
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	2b43      	cmp	r3, #67	; 0x43
 80015aa:	d001      	beq.n	80015b0 <gyro_init+0xc0>
	{
		return GYRO_SETUP_FAILURE;
 80015ac:	2302      	movs	r3, #2
 80015ae:	e013      	b.n	80015d8 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL10, CTRL10_value_init, &result);
 80015b0:	1d7b      	adds	r3, r7, #5
 80015b2:	2220      	movs	r2, #32
 80015b4:	2119      	movs	r1, #25
 80015b6:	206b      	movs	r0, #107	; 0x6b
 80015b8:	f7ff ff76 	bl	80014a8 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL10, &result);
 80015bc:	1d7b      	adds	r3, r7, #5
 80015be:	461a      	mov	r2, r3
 80015c0:	2119      	movs	r1, #25
 80015c2:	206b      	movs	r0, #107	; 0x6b
 80015c4:	f7ff ff34 	bl	8001430 <gyro_read_8bit_register>
 80015c8:	4603      	mov	r3, r0
 80015ca:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL10_value_init)
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d001      	beq.n	80015d6 <gyro_init+0xe6>
	{
		return GYRO_SETUP_FAILURE;
 80015d2:	2302      	movs	r3, #2
 80015d4:	e000      	b.n	80015d8 <gyro_init+0xe8>
	}
	return GYRO_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000021c 	.word	0x2000021c
 80015e4:	00000000 	.word	0x00000000

080015e8 <gyro_update>:

void gyro_update(float duration_s)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef result;
	// TODO : burst read (16bits)
	uint8_t res_read_H = gyro_read_8bit_register(GYRO_I2C_ADDRESS, OUT_Z_H, &result);
 80015f2:	f107 030d 	add.w	r3, r7, #13
 80015f6:	461a      	mov	r2, r3
 80015f8:	2127      	movs	r1, #39	; 0x27
 80015fa:	206b      	movs	r0, #107	; 0x6b
 80015fc:	f7ff ff18 	bl	8001430 <gyro_read_8bit_register>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
	uint8_t res_read_L = gyro_read_8bit_register(GYRO_I2C_ADDRESS, OUT_Z_L, &result);
 8001604:	f107 030d 	add.w	r3, r7, #13
 8001608:	461a      	mov	r2, r3
 800160a:	2126      	movs	r1, #38	; 0x26
 800160c:	206b      	movs	r0, #107	; 0x6b
 800160e:	f7ff ff0f 	bl	8001430 <gyro_read_8bit_register>
 8001612:	4603      	mov	r3, r0
 8001614:	73bb      	strb	r3, [r7, #14]
	ctx.raw_value = ((uint16_t)(res_read_H) << 8) + (uint16_t) res_read_L;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29a      	uxth	r2, r3
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b29b      	uxth	r3, r3
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <gyro_update+0xc0>)
 800162a:	801a      	strh	r2, [r3, #0]
	ctx.rate = (float)(ctx.raw_value*ANGULAR_RATE_SENSITIVITY_245*GYRO_SENSITIVITY_CORRECTION);
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <gyro_update+0xc0>)
 800162e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa6 	bl	8000584 <__aeabi_i2d>
 8001638:	a317      	add	r3, pc, #92	; (adr r3, 8001698 <gyro_update+0xb0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f80b 	bl	8000658 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	a315      	add	r3, pc, #84	; (adr r3, 80016a0 <gyro_update+0xb8>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff f802 	bl	8000658 <__aeabi_dmul>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff faf4 	bl	8000c48 <__aeabi_d2f>
 8001660:	4603      	mov	r3, r0
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <gyro_update+0xc0>)
 8001664:	6053      	str	r3, [r2, #4]
	ctx.heading += (ctx.rate - ctx.bias)*duration_s;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <gyro_update+0xc0>)
 8001668:	ed93 7a03 	vldr	s14, [r3, #12]
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <gyro_update+0xc0>)
 800166e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <gyro_update+0xc0>)
 8001674:	edd3 7a02 	vldr	s15, [r3, #8]
 8001678:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800167c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <gyro_update+0xc0>)
 800168a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	1eb851ec 	.word	0x1eb851ec
 800169c:	3f81eb85 	.word	0x3f81eb85
 80016a0:	00000000 	.word	0x00000000
 80016a4:	3fef5c29 	.word	0x3fef5c29
 80016a8:	2000021c 	.word	0x2000021c

080016ac <gyro_get_dps>:

float gyro_get_dps()
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	return ctx.rate- ctx.bias;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <gyro_get_dps+0x20>)
 80016b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <gyro_get_dps+0x20>)
 80016b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80016c0:	eeb0 0a67 	vmov.f32	s0, s15
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	2000021c 	.word	0x2000021c

080016d0 <gyro_reset_heading>:

void gyro_reset_heading()
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
	ctx.heading = 0.0F;
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <gyro_reset_heading+0x18>)
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2000021c 	.word	0x2000021c

080016ec <gyro_get_heading>:

float gyro_get_heading()
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
	return ctx.heading;
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <gyro_get_heading+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	ee07 3a90 	vmov	s15, r3
}
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	2000021c 	.word	0x2000021c

08001708 <gyro_is_calibrated>:

bool gyro_is_calibrated()
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	return ctx.locked >= 128;
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <gyro_is_calibrated+0x1c>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	2b7f      	cmp	r3, #127	; 0x7f
 8001712:	bf8c      	ite	hi
 8001714:	2301      	movhi	r3, #1
 8001716:	2300      	movls	r3, #0
 8001718:	b2db      	uxtb	r3, r3
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	2000021c 	.word	0x2000021c

08001728 <gyro_auto_calibrate>:
float alpha_mean_update = 0.01;
float alpha_variance_update = 0.05;
float alpha_bias_update = 0.01;

void gyro_auto_calibrate(float duration_s)
{
 8001728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	ed87 0a01 	vstr	s0, [r7, #4]
	gyro_update(duration_s);
 8001734:	ed97 0a01 	vldr	s0, [r7, #4]
 8001738:	f7ff ff56 	bl	80015e8 <gyro_update>
	// update mean and variance
	mean = alpha_mean_update *ctx.rate + (1.0-alpha_mean_update) * mean;
 800173c:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 800173e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001742:	4b6e      	ldr	r3, [pc, #440]	; (80018fc <gyro_auto_calibrate+0x1d4>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174c:	ee17 0a90 	vmov	r0, s15
 8001750:	f7fe ff2a 	bl	80005a8 <__aeabi_f2d>
 8001754:	4604      	mov	r4, r0
 8001756:	460d      	mov	r5, r1
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <gyro_auto_calibrate+0x1d4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff23 	bl	80005a8 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	4965      	ldr	r1, [pc, #404]	; (8001900 <gyro_auto_calibrate+0x1d8>)
 800176c:	f7fe fdbc 	bl	80002e8 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4690      	mov	r8, r2
 8001776:	4699      	mov	r9, r3
 8001778:	4b62      	ldr	r3, [pc, #392]	; (8001904 <gyro_auto_calibrate+0x1dc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe ff13 	bl	80005a8 <__aeabi_f2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4640      	mov	r0, r8
 8001788:	4649      	mov	r1, r9
 800178a:	f7fe ff65 	bl	8000658 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f7fe fda9 	bl	80002ec <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7ff fa51 	bl	8000c48 <__aeabi_d2f>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a56      	ldr	r2, [pc, #344]	; (8001904 <gyro_auto_calibrate+0x1dc>)
 80017aa:	6013      	str	r3, [r2, #0]
	variance = alpha_variance_update * pow( ctx.rate-mean,2)  + (1.0-alpha_variance_update) * variance;
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <gyro_auto_calibrate+0x1e0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fef9 	bl	80005a8 <__aeabi_f2d>
 80017b6:	4604      	mov	r4, r0
 80017b8:	460d      	mov	r5, r1
 80017ba:	4b4f      	ldr	r3, [pc, #316]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 80017bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80017c0:	4b50      	ldr	r3, [pc, #320]	; (8001904 <gyro_auto_calibrate+0x1dc>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	ee17 0a90 	vmov	r0, s15
 80017ce:	f7fe feeb 	bl	80005a8 <__aeabi_f2d>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	ed9f 1b46 	vldr	d1, [pc, #280]	; 80018f0 <gyro_auto_calibrate+0x1c8>
 80017da:	ec43 2b10 	vmov	d0, r2, r3
 80017de:	f00e fd45 	bl	801026c <pow>
 80017e2:	ec53 2b10 	vmov	r2, r3, d0
 80017e6:	4620      	mov	r0, r4
 80017e8:	4629      	mov	r1, r5
 80017ea:	f7fe ff35 	bl	8000658 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	4b44      	ldr	r3, [pc, #272]	; (8001908 <gyro_auto_calibrate+0x1e0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fed4 	bl	80005a8 <__aeabi_f2d>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	493d      	ldr	r1, [pc, #244]	; (8001900 <gyro_auto_calibrate+0x1d8>)
 800180a:	f7fe fd6d 	bl	80002e8 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4690      	mov	r8, r2
 8001814:	4699      	mov	r9, r3
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <gyro_auto_calibrate+0x1e4>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fec4 	bl	80005a8 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4640      	mov	r0, r8
 8001826:	4649      	mov	r1, r9
 8001828:	f7fe ff16 	bl	8000658 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fd5a 	bl	80002ec <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff fa02 	bl	8000c48 <__aeabi_d2f>
 8001844:	4603      	mov	r3, r0
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <gyro_auto_calibrate+0x1e4>)
 8001848:	6013      	str	r3, [r2, #0]
	// if mean stable, update bias
	if(variance<GYRO_AUTOCAL_VARIANCE_THRESHOLD)
 800184a:	4b30      	ldr	r3, [pc, #192]	; (800190c <gyro_auto_calibrate+0x1e4>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001910 <gyro_auto_calibrate+0x1e8>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d400      	bmi.n	8001860 <gyro_auto_calibrate+0x138>
				(int32_t)(ctx.bias*1000.0),
				(int32_t)(ctx.heading),
				(int32_t)(gyro_get_dps()*1000.0)
								  );
#endif
}
 800185e:	e041      	b.n	80018e4 <gyro_auto_calibrate+0x1bc>
		ctx.bias = alpha_bias_update*mean + (1.0-alpha_bias_update)* ctx.bias;
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <gyro_auto_calibrate+0x1ec>)
 8001862:	ed93 7a00 	vldr	s14, [r3]
 8001866:	4b27      	ldr	r3, [pc, #156]	; (8001904 <gyro_auto_calibrate+0x1dc>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001870:	ee17 0a90 	vmov	r0, s15
 8001874:	f7fe fe98 	bl	80005a8 <__aeabi_f2d>
 8001878:	4604      	mov	r4, r0
 800187a:	460d      	mov	r5, r1
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <gyro_auto_calibrate+0x1ec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe91 	bl	80005a8 <__aeabi_f2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	491c      	ldr	r1, [pc, #112]	; (8001900 <gyro_auto_calibrate+0x1d8>)
 8001890:	f7fe fd2a 	bl	80002e8 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4690      	mov	r8, r2
 800189a:	4699      	mov	r9, r3
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fe81 	bl	80005a8 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4640      	mov	r0, r8
 80018ac:	4649      	mov	r1, r9
 80018ae:	f7fe fed3 	bl	8000658 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fd17 	bl	80002ec <__adddf3>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff f9bf 	bl	8000c48 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 80018ce:	6093      	str	r3, [r2, #8]
		if(ctx.locked<1024)
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d8:	d204      	bcs.n	80018e4 <gyro_auto_calibrate+0x1bc>
			++ctx.locked;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <gyro_auto_calibrate+0x1d0>)
 80018e2:	6113      	str	r3, [r2, #16]
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018ee:	bf00      	nop
 80018f0:	00000000 	.word	0x00000000
 80018f4:	40000000 	.word	0x40000000
 80018f8:	2000021c 	.word	0x2000021c
 80018fc:	20000000 	.word	0x20000000
 8001900:	3ff00000 	.word	0x3ff00000
 8001904:	20000230 	.word	0x20000230
 8001908:	20000004 	.word	0x20000004
 800190c:	20000234 	.word	0x20000234
 8001910:	3d23d70a 	.word	0x3d23d70a
 8001914:	20000008 	.word	0x20000008

08001918 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

	uint8_t ch8=ch;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2,(uint8_t *)&ch8,1,HAL_MAX_DELAY);
 8001926:	f107 010f 	add.w	r1, r7, #15
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	2201      	movs	r2, #1
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <__io_putchar+0x28>)
 8001932:	f009 f87f 	bl	800aa34 <HAL_UART_Transmit>

	return ch;
 8001936:	687b      	ldr	r3, [r7, #4]

}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200009d0 	.word	0x200009d0

08001944 <__io_getchar>:

int __io_getchar()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

	int ch8;
	HAL_StatusTypeDef retour;

	ch8 = ' ';
 800194a:	2320      	movs	r3, #32
 800194c:	603b      	str	r3, [r7, #0]

	do {
		retour = HAL_UART_Receive(&huart2,(uint8_t*)&ch8,1,HAL_MAX_DELAY);
 800194e:	4639      	mov	r1, r7
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	2201      	movs	r2, #1
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <__io_getchar+0x38>)
 8001958:	f009 f8ff 	bl	800ab5a <HAL_UART_Receive>
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
		//delay_ms(1);
	} while(retour != HAL_OK);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f3      	bne.n	800194e <__io_getchar+0xa>

		if(retour != HAL_OK)
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <__io_getchar+0x2e>
			ch8 = -1;
 800196c:	f04f 33ff 	mov.w	r3, #4294967295
 8001970:	603b      	str	r3, [r7, #0]

return ch8;
 8001972:	683b      	ldr	r3, [r7, #0]

}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200009d0 	.word	0x200009d0

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b09e      	sub	sp, #120	; 0x78
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001986:	f004 fa20 	bl	8005dca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198a:	f000 f989 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198e:	f001 f86d 	bl	8002a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001992:	f001 f82d 	bl	80029f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001996:	f000 fb17 	bl	8001fc8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800199a:	f000 fb55 	bl	8002048 <MX_TIM1_Init>
  MX_TIM2_Init();
 800199e:	f000 fc1d 	bl	80021dc <MX_TIM2_Init>
  MX_TIM3_Init();
 80019a2:	f000 fcb9 	bl	8002318 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019a6:	f000 fd55 	bl	8002454 <MX_TIM4_Init>
  MX_TIM8_Init();
 80019aa:	f000 fdf1 	bl	8002590 <MX_TIM8_Init>
  MX_UART4_Init();
 80019ae:	f000 fecb 	bl	8002748 <MX_UART4_Init>
  MX_UART5_Init();
 80019b2:	f000 fef9 	bl	80027a8 <MX_UART5_Init>
  MX_UART7_Init();
 80019b6:	f000 ff2b 	bl	8002810 <MX_UART7_Init>
  MX_UART8_Init();
 80019ba:	f000 ff59 	bl	8002870 <MX_UART8_Init>
  MX_USART1_UART_Init();
 80019be:	f000 ff87 	bl	80028d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019c2:	f000 ffb5 	bl	8002930 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80019c6:	f000 ffe3 	bl	8002990 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80019ca:	f000 fa07 	bl	8001ddc <MX_ADC1_Init>
  MX_ADC3_Init();
 80019ce:	f000 faa9 	bl	8001f24 <MX_ADC3_Init>
  MX_ADC2_Init();
 80019d2:	f000 fa55 	bl	8001e80 <MX_ADC2_Init>
  MX_TIM12_Init();
 80019d6:	f000 fe2f 	bl	8002638 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  printf("+++++++ Buggy TRR 2022 Roulant +++++++\r\n");
 80019da:	48a8      	ldr	r0, [pc, #672]	; (8001c7c <main+0x2fc>)
 80019dc:	f00a fe72 	bl	800c6c4 <puts>

  // Initialisation des Lidars
  tfminiplus_init();
 80019e0:	f004 f8a8 	bl	8005b34 <tfminiplus_init>

  // Initialisation de la gestion radio et commande vehicule
  init_radio_commandes();
 80019e4:	f001 fda2 	bl	800352c <init_radio_commandes>

  // Récupération des parametres de conf

  // Gyro
  if(gyro_init() == GYRO_OK)
 80019e8:	f7ff fd82 	bl	80014f0 <gyro_init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d124      	bne.n	8001a3c <main+0xbc>
  {
	  last_time_gyro = HAL_GetTick();
 80019f2:	f004 fa3b 	bl	8005e6c <HAL_GetTick>
 80019f6:	6738      	str	r0, [r7, #112]	; 0x70
	  while(gyro_is_calibrated())
 80019f8:	e012      	b.n	8001a20 <main+0xa0>
	  {
		  HAL_Delay(1);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f004 fa42 	bl	8005e84 <HAL_Delay>
		  current_time = HAL_GetTick();
 8001a00:	f004 fa34 	bl	8005e6c <HAL_GetTick>
 8001a04:	6638      	str	r0, [r7, #96]	; 0x60
		  gyro_auto_calibrate(current_time - last_time_gyro);
 8001a06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a14:	eeb0 0a67 	vmov.f32	s0, s15
 8001a18:	f7ff fe86 	bl	8001728 <gyro_auto_calibrate>
		  last_time_gyro = current_time;
 8001a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1e:	673b      	str	r3, [r7, #112]	; 0x70
	  while(gyro_is_calibrated())
 8001a20:	f7ff fe72 	bl	8001708 <gyro_is_calibrated>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1e7      	bne.n	80019fa <main+0x7a>
	  }
	  printf("Gyro calibrated\r\n");
 8001a2a:	4895      	ldr	r0, [pc, #596]	; (8001c80 <main+0x300>)
 8001a2c:	f00a fe4a 	bl	800c6c4 <puts>
	  gUpdateGyro = 1;
 8001a30:	4b94      	ldr	r3, [pc, #592]	; (8001c84 <main+0x304>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
	  gyro_reset_heading();
 8001a36:	f7ff fe4b 	bl	80016d0 <gyro_reset_heading>
 8001a3a:	e002      	b.n	8001a42 <main+0xc2>
  }
  else
	  printf("Erreur d'initialisation du Gyro\r\n");
 8001a3c:	4892      	ldr	r0, [pc, #584]	; (8001c88 <main+0x308>)
 8001a3e:	f00a fe41 	bl	800c6c4 <puts>

  // Télémetrie
  telemetrie_init();
 8001a42:	f003 fdb3 	bl	80055ac <telemetrie_init>
  pTeleElement = telemetrie_pt_enreg_en_cours();
 8001a46:	f003 fc5f 	bl	8005308 <telemetrie_pt_enreg_en_cours>
 8001a4a:	6678      	str	r0, [r7, #100]	; 0x64
  erreur = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]

  // Initialisation des variables
  temps_appui_boutonext1 = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  temps_relachement_boutonext1 = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  temps_appui_boutonext2 = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin)==GPIO_PIN_RESET)
 8001a62:	2110      	movs	r1, #16
 8001a64:	4889      	ldr	r0, [pc, #548]	; (8001c8c <main+0x30c>)
 8001a66:	f005 fb81 	bl	800716c <HAL_GPIO_ReadPin>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d108      	bne.n	8001a82 <main+0x102>
	  {
		  temps_appui_boutonext1 += 10; // La durée d'appui du bouton est allongée de 10 ms
 8001a70:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001a74:	330a      	adds	r3, #10
 8001a76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		  temps_relachement_boutonext1 = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001a80:	e00d      	b.n	8001a9e <main+0x11e>
	  }
	  else
	  {
		  temps_appui_boutonext1 = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		  if(temps_relachement_boutonext1 < 60000) // on limite sinon le compteur partirait en dépassement
 8001a88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001a8c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d804      	bhi.n	8001a9e <main+0x11e>
			  temps_relachement_boutonext1 += 10;
 8001a94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001a98:	330a      	adds	r3, #10
 8001a9a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  }
	  if(HAL_GPIO_ReadPin(boutonExt2_GPIO_Port, boutonExt2_Pin)==GPIO_PIN_RESET)
 8001a9e:	2120      	movs	r1, #32
 8001aa0:	487a      	ldr	r0, [pc, #488]	; (8001c8c <main+0x30c>)
 8001aa2:	f005 fb63 	bl	800716c <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <main+0x138>
		  temps_appui_boutonext2 += 10; // La durée d'appui du bouton est allongée de 10 ms
 8001aac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001ab0:	330a      	adds	r3, #10
 8001ab2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001ab6:	e002      	b.n	8001abe <main+0x13e>
	  else
		  temps_appui_boutonext2 = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  gyro_update(0.01);
 8001abe:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001c90 <main+0x310>
 8001ac2:	f7ff fd91 	bl	80015e8 <gyro_update>

	  switch(etat_automate_principal)
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <main+0x314>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	f000 80ad 	beq.w	8001c2a <main+0x2aa>
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f300 80c7 	bgt.w	8001c64 <main+0x2e4>
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d002      	beq.n	8001ae0 <main+0x160>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d071      	beq.n	8001bc2 <main+0x242>
 8001ade:	e0c1      	b.n	8001c64 <main+0x2e4>
	  {
	  case automate_principal_radio :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led verte
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae6:	486c      	ldr	r0, [pc, #432]	; (8001c98 <main+0x318>)
 8001ae8:	f005 fb58 	bl	800719c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	4866      	ldr	r0, [pc, #408]	; (8001c8c <main+0x30c>)
 8001af2:	f005 fb53 	bl	800719c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2140      	movs	r1, #64	; 0x40
 8001afa:	4864      	ldr	r0, [pc, #400]	; (8001c8c <main+0x30c>)
 8001afc:	f005 fb4e 	bl	800719c <HAL_GPIO_WritePin>

		  if(temps_appui_boutonext1 > 1000)
 8001b00:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b08:	d90b      	bls.n	8001b22 <main+0x1a2>
		  {
			  algo_init(&robot_contexte);
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc40 	bl	8001394 <algo_init>
			  filtre_declenchement_auto = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			  etat_automate_principal = automate_principal_autonome;
 8001b1a:	4b5e      	ldr	r3, [pc, #376]	; (8001c94 <main+0x314>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	701a      	strb	r2, [r3, #0]
					pTeleElement->etat_automate_principal = automate_principal_radio;

					pTeleElement = telemetrie_pt_enreg_suivant(&erreur);
				}
		  }
		  break;
 8001b20:	e0a4      	b.n	8001c6c <main+0x2ec>
		  else if(temps_appui_boutonext2 > 1000)
 8001b22:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b2a:	d903      	bls.n	8001b34 <main+0x1b4>
			  etat_automate_principal = automate_principal_shell;
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <main+0x314>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	701a      	strb	r2, [r3, #0]
		  break;
 8001b32:	e09b      	b.n	8001c6c <main+0x2ec>
				radio_dir_get(&direction);
 8001b34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 fab1 	bl	80030a0 <radio_dir_get>
				radio_throttle_get(&throttle);
 8001b3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 fb06 	bl	8003154 <radio_throttle_get>
				vehicule_dir_set(direction);
 8001b48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b50:	f001 fc68 	bl	8003424 <vehicule_dir_set>
				vehicule_throttle_set(throttle);
 8001b54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	f001 fca4 	bl	80034a8 <vehicule_throttle_set>
				vehicule_distance_aimant_get(&distance);
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	4618      	mov	r0, r3
 8001b66:	f001 fc23 	bl	80033b0 <vehicule_distance_aimant_get>
				vehicule_speed_aimant_get(&vitesse);
 8001b6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f001 fbca 	bl	8003308 <vehicule_speed_aimant_get>
				if(erreur == 0)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d178      	bne.n	8001c6c <main+0x2ec>
					pTeleElement->consigne_direction = direction;
 8001b7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b7e:	605a      	str	r2, [r3, #4]
					pTeleElement->consigne_vitesse = throttle;
 8001b80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b84:	601a      	str	r2, [r3, #0]
					pTeleElement->mesure_vitesse = vitesse;
 8001b86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b8a:	609a      	str	r2, [r3, #8]
					pTeleElement->mesure_distance = distance;
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b90:	60da      	str	r2, [r3, #12]
					pTeleElement->heading = gyro_get_heading();
 8001b92:	f7ff fdab 	bl	80016ec <gyro_get_heading>
 8001b96:	eef0 7a40 	vmov.f32	s15, s0
 8001b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b9c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
					pTeleElement->gyro_dps = gyro_get_dps();
 8001ba0:	f7ff fd84 	bl	80016ac <gyro_get_dps>
 8001ba4:	eef0 7a40 	vmov.f32	s15, s0
 8001ba8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001baa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
					pTeleElement->etat_automate_principal = automate_principal_radio;
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2020 	strb.w	r2, [r3, #32]
					pTeleElement = telemetrie_pt_enreg_suivant(&erreur);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fbbb 	bl	8005334 <telemetrie_pt_enreg_suivant>
 8001bbe:	6678      	str	r0, [r7, #100]	; 0x64
		  break;
 8001bc0:	e054      	b.n	8001c6c <main+0x2ec>
	  case automate_principal_autonome :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led rouge
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc8:	4833      	ldr	r0, [pc, #204]	; (8001c98 <main+0x318>)
 8001bca:	f005 fae7 	bl	800719c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	482e      	ldr	r0, [pc, #184]	; (8001c8c <main+0x30c>)
 8001bd4:	f005 fae2 	bl	800719c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	482b      	ldr	r0, [pc, #172]	; (8001c8c <main+0x30c>)
 8001bde:	f005 fadd 	bl	800719c <HAL_GPIO_WritePin>

		  // On attend le relachement du bouton puis 2 secondes,
		  // le temps que la personne retire complètement son doigt de l'environnement du robot
		  if((temps_relachement_boutonext1>2000) && (filtre_declenchement_auto == 0))
 8001be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001be6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bea:	d906      	bls.n	8001bfa <main+0x27a>
 8001bec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <main+0x27a>
			  filtre_declenchement_auto = 1;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		  if(filtre_declenchement_auto == 1)
 8001bfa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d106      	bne.n	8001c10 <main+0x290>
			  // Appel automate
			  algo_decouverte(&robot_contexte, 0.01);
 8001c02:	f107 0308 	add.w	r3, r7, #8
 8001c06:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001c90 <main+0x310>
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fa8a 	bl	8001124 <algo_decouverte>

		  // Si le pilote tente de reprendre le controle passage immédiat des commandes
		  // Si le tour de piste en automatique est fini alors passage des commandes à la radio
		  if((radio_isThereCommand() != 0) || (etat_automate_automatique == automate_auto_fini))
 8001c10:	f001 fafa 	bl	8003208 <radio_isThereCommand>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <main+0x2a2>
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <main+0x31c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d126      	bne.n	8001c70 <main+0x2f0>
			  etat_automate_principal = automate_principal_radio;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <main+0x314>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
//		  else
//		  {
//			  // Appel de l'automate automatique
//		  }
		  break;
 8001c28:	e022      	b.n	8001c70 <main+0x2f0>
	  case automate_principal_shell :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led bleue
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c30:	4819      	ldr	r0, [pc, #100]	; (8001c98 <main+0x318>)
 8001c32:	f005 fab3 	bl	800719c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001c36:	2201      	movs	r2, #1
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <main+0x30c>)
 8001c3c:	f005 faae 	bl	800719c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	4811      	ldr	r0, [pc, #68]	; (8001c8c <main+0x30c>)
 8001c46:	f005 faa9 	bl	800719c <HAL_GPIO_WritePin>

		  // Lancement du shell
		  shell();
 8001c4a:	f001 fe33 	bl	80038b4 <shell>

		  telemetrie_init();
 8001c4e:	f003 fcad 	bl	80055ac <telemetrie_init>
		  pTeleElement = telemetrie_pt_enreg_en_cours();
 8001c52:	f003 fb59 	bl	8005308 <telemetrie_pt_enreg_en_cours>
 8001c56:	6678      	str	r0, [r7, #100]	; 0x64
		  erreur = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]

		  etat_automate_principal = automate_principal_radio;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <main+0x314>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	701a      	strb	r2, [r3, #0]
		  break;
 8001c62:	e006      	b.n	8001c72 <main+0x2f2>
	  default :
		  etat_automate_principal = automate_principal_radio;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <main+0x314>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
		  break;
 8001c6a:	e002      	b.n	8001c72 <main+0x2f2>
		  break;
 8001c6c:	bf00      	nop
 8001c6e:	e000      	b.n	8001c72 <main+0x2f2>
		  break;
 8001c70:	bf00      	nop

	  }

	  // Iteration de l'automate principale toutes les 10 ms.
	  HAL_Delay(10);
 8001c72:	200a      	movs	r0, #10
 8001c74:	f004 f906 	bl	8005e84 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin)==GPIO_PIN_RESET)
 8001c78:	e6f3      	b.n	8001a62 <main+0xe2>
 8001c7a:	bf00      	nop
 8001c7c:	080111d8 	.word	0x080111d8
 8001c80:	08011200 	.word	0x08011200
 8001c84:	2000027c 	.word	0x2000027c
 8001c88:	08011214 	.word	0x08011214
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	3c23d70a 	.word	0x3c23d70a
 8001c94:	2000082c 	.word	0x2000082c
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	20000290 	.word	0x20000290

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0b4      	sub	sp, #208	; 0xd0
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001caa:	2230      	movs	r2, #48	; 0x30
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f009 fffa 	bl	800bca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	2284      	movs	r2, #132	; 0x84
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f009 ffeb 	bl	800bca8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <SystemClock_Config+0x134>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	4a3f      	ldr	r2, [pc, #252]	; (8001dd4 <SystemClock_Config+0x134>)
 8001cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <SystemClock_Config+0x134>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <SystemClock_Config+0x138>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <SystemClock_Config+0x138>)
 8001cf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <SystemClock_Config+0x138>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d0e:	2310      	movs	r3, #16
 8001d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d20:	2308      	movs	r3, #8
 8001d22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001d26:	23d8      	movs	r3, #216	; 0xd8
 8001d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d32:	2302      	movs	r3, #2
 8001d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f005 ff89 	bl	8007c54 <HAL_RCC_OscConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001d48:	f000 ffba 	bl	8002cc0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d4c:	f005 ff32 	bl	8007bb4 <HAL_PWREx_EnableOverDrive>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001d56:	f000 ffb3 	bl	8002cc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d60:	2302      	movs	r3, #2
 8001d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d80:	2107      	movs	r1, #7
 8001d82:	4618      	mov	r0, r3
 8001d84:	f006 fa0a 	bl	800819c <HAL_RCC_ClockConfig>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001d8e:	f000 ff97 	bl	8002cc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001d92:	f247 73c0 	movw	r3, #30656	; 0x77c0
 8001d96:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001da8:	2300      	movs	r3, #0
 8001daa:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8001db0:	2300      	movs	r3, #0
 8001db2:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 fbc3 	bl	8008548 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001dc8:	f000 ff7a 	bl	8002cc0 <Error_Handler>
  }
}
 8001dcc:	bf00      	nop
 8001dce:	37d0      	adds	r7, #208	; 0xd0
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000

08001ddc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001de2:	463b      	mov	r3, r7
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001df0:	4a21      	ldr	r2, [pc, #132]	; (8001e78 <MX_ADC1_Init+0x9c>)
 8001df2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <MX_ADC1_Init+0xa0>)
 8001e20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e3e:	f004 f845 	bl	8005ecc <HAL_ADC_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e48:	f000 ff3a 	bl	8002cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e58:	463b      	mov	r3, r7
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <MX_ADC1_Init+0x98>)
 8001e5e:	f004 f879 	bl	8005f54 <HAL_ADC_ConfigChannel>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001e68:	f000 ff2a 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000658 	.word	0x20000658
 8001e78:	40012000 	.word	0x40012000
 8001e7c:	0f000001 	.word	0x0f000001

08001e80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001e94:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <MX_ADC2_Init+0x9c>)
 8001e96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001e9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ec2:	4a17      	ldr	r2, [pc, #92]	; (8001f20 <MX_ADC2_Init+0xa0>)
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eda:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001ee2:	f003 fff3 	bl	8005ecc <HAL_ADC_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001eec:	f000 fee8 	bl	8002cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001efc:	463b      	mov	r3, r7
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_ADC2_Init+0x98>)
 8001f02:	f004 f827 	bl	8005f54 <HAL_ADC_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001f0c:	f000 fed8 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000494 	.word	0x20000494
 8001f1c:	40012100 	.word	0x40012100
 8001f20:	0f000001 	.word	0x0f000001

08001f24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f38:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <MX_ADC3_Init+0x9c>)
 8001f3a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f42:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f56:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f64:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <MX_ADC3_Init+0xa0>)
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001f86:	f003 ffa1 	bl	8005ecc <HAL_ADC_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f90:	f000 fe96 	bl	8002cc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001f94:	230f      	movs	r3, #15
 8001f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fa0:	463b      	mov	r3, r7
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_ADC3_Init+0x98>)
 8001fa6:	f003 ffd5 	bl	8005f54 <HAL_ADC_ConfigChannel>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001fb0:	f000 fe86 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000700 	.word	0x20000700
 8001fc0:	40012200 	.word	0x40012200
 8001fc4:	0f000001 	.word	0x0f000001

08001fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <MX_I2C1_Init+0x74>)
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <MX_I2C1_Init+0x78>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <MX_I2C1_Init+0x74>)
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <MX_I2C1_Init+0x7c>)
 8001fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	; (800203c <MX_I2C1_Init+0x74>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fde:	4b17      	ldr	r3, [pc, #92]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <MX_I2C1_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <MX_I2C1_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_I2C1_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <MX_I2C1_Init+0x74>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002002:	480e      	ldr	r0, [pc, #56]	; (800203c <MX_I2C1_Init+0x74>)
 8002004:	f005 f8e4 	bl	80071d0 <HAL_I2C_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800200e:	f000 fe57 	bl	8002cc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002012:	2100      	movs	r1, #0
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <MX_I2C1_Init+0x74>)
 8002016:	f005 fd35 	bl	8007a84 <HAL_I2CEx_ConfigAnalogFilter>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002020:	f000 fe4e 	bl	8002cc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002024:	2100      	movs	r1, #0
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_I2C1_Init+0x74>)
 8002028:	f005 fd77 	bl	8007b1a <HAL_I2CEx_ConfigDigitalFilter>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002032:	f000 fe45 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200004dc 	.word	0x200004dc
 8002040:	40005400 	.word	0x40005400
 8002044:	20404768 	.word	0x20404768

08002048 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b09a      	sub	sp, #104	; 0x68
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	222c      	movs	r2, #44	; 0x2c
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f009 fe10 	bl	800bca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002088:	4b52      	ldr	r3, [pc, #328]	; (80021d4 <MX_TIM1_Init+0x18c>)
 800208a:	4a53      	ldr	r2, [pc, #332]	; (80021d8 <MX_TIM1_Init+0x190>)
 800208c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <MX_TIM1_Init+0x18c>)
 8002090:	22d8      	movs	r2, #216	; 0xd8
 8002092:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <MX_TIM1_Init+0x18c>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <MX_TIM1_Init+0x18c>)
 800209c:	f64e 2260 	movw	r2, #60000	; 0xea60
 80020a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b4c      	ldr	r3, [pc, #304]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ae:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020b4:	4847      	ldr	r0, [pc, #284]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80020b6:	f006 fe37 	bl	8008d28 <HAL_TIM_Base_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020c0:	f000 fdfe 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020ce:	4619      	mov	r1, r3
 80020d0:	4840      	ldr	r0, [pc, #256]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80020d2:	f007 fc4b 	bl	800996c <HAL_TIM_ConfigClockSource>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020dc:	f000 fdf0 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020e0:	483c      	ldr	r0, [pc, #240]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80020e2:	f006 fe78 	bl	8008dd6 <HAL_TIM_PWM_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020ec:	f000 fde8 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002100:	4619      	mov	r1, r3
 8002102:	4834      	ldr	r0, [pc, #208]	; (80021d4 <MX_TIM1_Init+0x18c>)
 8002104:	f008 fb1e 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800210e:	f000 fdd7 	bl	8002cc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002112:	2360      	movs	r3, #96	; 0x60
 8002114:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8002116:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211c:	2300      	movs	r3, #0
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002120:	2300      	movs	r3, #0
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002134:	2200      	movs	r2, #0
 8002136:	4619      	mov	r1, r3
 8002138:	4826      	ldr	r0, [pc, #152]	; (80021d4 <MX_TIM1_Init+0x18c>)
 800213a:	f007 fb07 	bl	800974c <HAL_TIM_PWM_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002144:	f000 fdbc 	bl	8002cc0 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8002148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002152:	2204      	movs	r2, #4
 8002154:	4619      	mov	r1, r3
 8002156:	481f      	ldr	r0, [pc, #124]	; (80021d4 <MX_TIM1_Init+0x18c>)
 8002158:	f007 faf8 	bl	800974c <HAL_TIM_PWM_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002162:	f000 fdad 	bl	8002cc0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800216a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800216e:	2208      	movs	r2, #8
 8002170:	4619      	mov	r1, r3
 8002172:	4818      	ldr	r0, [pc, #96]	; (80021d4 <MX_TIM1_Init+0x18c>)
 8002174:	f007 faea 	bl	800974c <HAL_TIM_PWM_ConfigChannel>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800217e:	f000 fd9f 	bl	8002cc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4807      	ldr	r0, [pc, #28]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80021b8:	f008 fb52 	bl	800a860 <HAL_TIMEx_ConfigBreakDeadTime>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 80021c2:	f000 fd7d 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021c6:	4803      	ldr	r0, [pc, #12]	; (80021d4 <MX_TIM1_Init+0x18c>)
 80021c8:	f002 fc18 	bl	80049fc <HAL_TIM_MspPostInit>

}
 80021cc:	bf00      	nop
 80021ce:	3768      	adds	r7, #104	; 0x68
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000830 	.word	0x20000830
 80021d8:	40010000 	.word	0x40010000

080021dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b090      	sub	sp, #64	; 0x40
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002218:	4b3e      	ldr	r3, [pc, #248]	; (8002314 <MX_TIM2_Init+0x138>)
 800221a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800221e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 8002220:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <MX_TIM2_Init+0x138>)
 8002222:	226c      	movs	r2, #108	; 0x6c
 8002224:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <MX_TIM2_Init+0x138>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <MX_TIM2_Init+0x138>)
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <MX_TIM2_Init+0x138>)
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <MX_TIM2_Init+0x138>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002240:	4834      	ldr	r0, [pc, #208]	; (8002314 <MX_TIM2_Init+0x138>)
 8002242:	f006 fd71 	bl	8008d28 <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800224c:	f000 fd38 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800225a:	4619      	mov	r1, r3
 800225c:	482d      	ldr	r0, [pc, #180]	; (8002314 <MX_TIM2_Init+0x138>)
 800225e:	f007 fb85 	bl	800996c <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002268:	f000 fd2a 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800226c:	4829      	ldr	r0, [pc, #164]	; (8002314 <MX_TIM2_Init+0x138>)
 800226e:	f006 ff0d 	bl	800908c <HAL_TIM_IC_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002278:	f000 fd22 	bl	8002cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800227c:	2304      	movs	r3, #4
 800227e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002280:	2350      	movs	r3, #80	; 0x50
 8002282:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	4619      	mov	r1, r3
 8002296:	481f      	ldr	r0, [pc, #124]	; (8002314 <MX_TIM2_Init+0x138>)
 8002298:	f007 fc2e 	bl	8009af8 <HAL_TIM_SlaveConfigSynchro>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80022a2:	f000 fd0d 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022aa:	2301      	movs	r3, #1
 80022ac:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	2200      	movs	r2, #0
 80022bc:	4619      	mov	r1, r3
 80022be:	4815      	ldr	r0, [pc, #84]	; (8002314 <MX_TIM2_Init+0x138>)
 80022c0:	f007 f9af 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 80022ca:	f000 fcf9 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022ce:	2302      	movs	r3, #2
 80022d0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022d2:	2302      	movs	r3, #2
 80022d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2204      	movs	r2, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_TIM2_Init+0x138>)
 80022e0:	f007 f99f 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 80022ea:	f000 fce9 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	4619      	mov	r1, r3
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <MX_TIM2_Init+0x138>)
 80022fc:	f008 fa22 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8002306:	f000 fcdb 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	3740      	adds	r7, #64	; 0x40
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000984 	.word	0x20000984

08002318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b090      	sub	sp, #64	; 0x40
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234a:	463b      	mov	r3, r7
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002354:	4b3d      	ldr	r3, [pc, #244]	; (800244c <MX_TIM3_Init+0x134>)
 8002356:	4a3e      	ldr	r2, [pc, #248]	; (8002450 <MX_TIM3_Init+0x138>)
 8002358:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <MX_TIM3_Init+0x134>)
 800235c:	226c      	movs	r2, #108	; 0x6c
 800235e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b3a      	ldr	r3, [pc, #232]	; (800244c <MX_TIM3_Init+0x134>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <MX_TIM3_Init+0x134>)
 8002368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <MX_TIM3_Init+0x134>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b35      	ldr	r3, [pc, #212]	; (800244c <MX_TIM3_Init+0x134>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800237a:	4834      	ldr	r0, [pc, #208]	; (800244c <MX_TIM3_Init+0x134>)
 800237c:	f006 fcd4 	bl	8008d28 <HAL_TIM_Base_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002386:	f000 fc9b 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002394:	4619      	mov	r1, r3
 8002396:	482d      	ldr	r0, [pc, #180]	; (800244c <MX_TIM3_Init+0x134>)
 8002398:	f007 fae8 	bl	800996c <HAL_TIM_ConfigClockSource>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80023a2:	f000 fc8d 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80023a6:	4829      	ldr	r0, [pc, #164]	; (800244c <MX_TIM3_Init+0x134>)
 80023a8:	f006 fe70 	bl	800908c <HAL_TIM_IC_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80023b2:	f000 fc85 	bl	8002cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80023b6:	2304      	movs	r3, #4
 80023b8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80023ba:	2350      	movs	r3, #80	; 0x50
 80023bc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	481e      	ldr	r0, [pc, #120]	; (800244c <MX_TIM3_Init+0x134>)
 80023d2:	f007 fb91 	bl	8009af8 <HAL_TIM_SlaveConfigSynchro>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80023dc:	f000 fc70 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023e4:	2301      	movs	r3, #1
 80023e6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	4619      	mov	r1, r3
 80023f8:	4814      	ldr	r0, [pc, #80]	; (800244c <MX_TIM3_Init+0x134>)
 80023fa:	f007 f912 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8002404:	f000 fc5c 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002408:	2302      	movs	r3, #2
 800240a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800240c:	2302      	movs	r3, #2
 800240e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2204      	movs	r2, #4
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <MX_TIM3_Init+0x134>)
 800241a:	f007 f902 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 8002424:	f000 fc4c 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002430:	463b      	mov	r3, r7
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_TIM3_Init+0x134>)
 8002436:	f008 f985 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 8002440:	f000 fc3e 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	3740      	adds	r7, #64	; 0x40
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000528 	.word	0x20000528
 8002450:	40000400 	.word	0x40000400

08002454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b090      	sub	sp, #64	; 0x40
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002486:	463b      	mov	r3, r7
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002490:	4b3d      	ldr	r3, [pc, #244]	; (8002588 <MX_TIM4_Init+0x134>)
 8002492:	4a3e      	ldr	r2, [pc, #248]	; (800258c <MX_TIM4_Init+0x138>)
 8002494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 8002496:	4b3c      	ldr	r3, [pc, #240]	; (8002588 <MX_TIM4_Init+0x134>)
 8002498:	226c      	movs	r2, #108	; 0x6c
 800249a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <MX_TIM4_Init+0x134>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80024a2:	4b39      	ldr	r3, [pc, #228]	; (8002588 <MX_TIM4_Init+0x134>)
 80024a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b37      	ldr	r3, [pc, #220]	; (8002588 <MX_TIM4_Init+0x134>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b0:	4b35      	ldr	r3, [pc, #212]	; (8002588 <MX_TIM4_Init+0x134>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80024b6:	4834      	ldr	r0, [pc, #208]	; (8002588 <MX_TIM4_Init+0x134>)
 80024b8:	f006 fc36 	bl	8008d28 <HAL_TIM_Base_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80024c2:	f000 fbfd 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80024cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d0:	4619      	mov	r1, r3
 80024d2:	482d      	ldr	r0, [pc, #180]	; (8002588 <MX_TIM4_Init+0x134>)
 80024d4:	f007 fa4a 	bl	800996c <HAL_TIM_ConfigClockSource>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80024de:	f000 fbef 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80024e2:	4829      	ldr	r0, [pc, #164]	; (8002588 <MX_TIM4_Init+0x134>)
 80024e4:	f006 fdd2 	bl	800908c <HAL_TIM_IC_Init>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024ee:	f000 fbe7 	bl	8002cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80024f2:	2304      	movs	r3, #4
 80024f4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80024f6:	2350      	movs	r3, #80	; 0x50
 80024f8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024fa:	2300      	movs	r3, #0
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	481e      	ldr	r0, [pc, #120]	; (8002588 <MX_TIM4_Init+0x134>)
 800250e:	f007 faf3 	bl	8009af8 <HAL_TIM_SlaveConfigSynchro>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002518:	f000 fbd2 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	2200      	movs	r2, #0
 8002532:	4619      	mov	r1, r3
 8002534:	4814      	ldr	r0, [pc, #80]	; (8002588 <MX_TIM4_Init+0x134>)
 8002536:	f007 f874 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002540:	f000 fbbe 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002544:	2302      	movs	r3, #2
 8002546:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002548:	2302      	movs	r3, #2
 800254a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	2204      	movs	r2, #4
 8002552:	4619      	mov	r1, r3
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_TIM4_Init+0x134>)
 8002556:	f007 f864 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8002560:	f000 fbae 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002564:	2300      	movs	r3, #0
 8002566:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	4619      	mov	r1, r3
 8002570:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_TIM4_Init+0x134>)
 8002572:	f008 f8e7 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 800257c:	f000 fba0 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3740      	adds	r7, #64	; 0x40
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	200003c4 	.word	0x200003c4
 800258c:	40000800 	.word	0x40000800

08002590 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0310 	add.w	r3, r7, #16
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <MX_TIM8_Init+0xa4>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025da:	4815      	ldr	r0, [pc, #84]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025dc:	f006 fba4 	bl	8008d28 <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80025e6:	f000 fb6b 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	4619      	mov	r1, r3
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <MX_TIM8_Init+0xa0>)
 80025f8:	f007 f9b8 	bl	800996c <HAL_TIM_ConfigClockSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002602:	f000 fb5d 	bl	8002cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4806      	ldr	r0, [pc, #24]	; (8002630 <MX_TIM8_Init+0xa0>)
 8002618:	f008 f894 	bl	800a744 <HAL_TIMEx_MasterConfigSynchronization>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002622:	f000 fb4d 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002626:	bf00      	nop
 8002628:	3720      	adds	r7, #32
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000378 	.word	0x20000378
 8002634:	40010400 	.word	0x40010400

08002638 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08e      	sub	sp, #56	; 0x38
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <MX_TIM12_Init+0x108>)
 800266a:	4a36      	ldr	r2, [pc, #216]	; (8002744 <MX_TIM12_Init+0x10c>)
 800266c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 108;
 800266e:	4b34      	ldr	r3, [pc, #208]	; (8002740 <MX_TIM12_Init+0x108>)
 8002670:	226c      	movs	r2, #108	; 0x6c
 8002672:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b32      	ldr	r3, [pc, #200]	; (8002740 <MX_TIM12_Init+0x108>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <MX_TIM12_Init+0x108>)
 800267c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002680:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <MX_TIM12_Init+0x108>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <MX_TIM12_Init+0x108>)
 800268a:	2200      	movs	r2, #0
 800268c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800268e:	482c      	ldr	r0, [pc, #176]	; (8002740 <MX_TIM12_Init+0x108>)
 8002690:	f006 fb4a 	bl	8008d28 <HAL_TIM_Base_Init>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 800269a:	f000 fb11 	bl	8002cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800269e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80026a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4825      	ldr	r0, [pc, #148]	; (8002740 <MX_TIM12_Init+0x108>)
 80026ac:	f007 f95e 	bl	800996c <HAL_TIM_ConfigClockSource>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 80026b6:	f000 fb03 	bl	8002cc0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80026ba:	4821      	ldr	r0, [pc, #132]	; (8002740 <MX_TIM12_Init+0x108>)
 80026bc:	f006 fce6 	bl	800908c <HAL_TIM_IC_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 80026c6:	f000 fafb 	bl	8002cc0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80026ca:	2304      	movs	r3, #4
 80026cc:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80026ce:	2350      	movs	r3, #80	; 0x50
 80026d0:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	4816      	ldr	r0, [pc, #88]	; (8002740 <MX_TIM12_Init+0x108>)
 80026e6:	f007 fa07 	bl	8009af8 <HAL_TIM_SlaveConfigSynchro>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 80026f0:	f000 fae6 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026f4:	2300      	movs	r3, #0
 80026f6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026f8:	2301      	movs	r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	480d      	ldr	r0, [pc, #52]	; (8002740 <MX_TIM12_Init+0x108>)
 800270c:	f006 ff89 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 8002716:	f000 fad3 	bl	8002cc0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800271a:	2302      	movs	r3, #2
 800271c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800271e:	2302      	movs	r3, #2
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2204      	movs	r2, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_TIM12_Init+0x108>)
 800272a:	f006 ff7a 	bl	8009622 <HAL_TIM_IC_ConfigChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 8002734:	f000 fac4 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	3738      	adds	r7, #56	; 0x38
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000ab4 	.word	0x20000ab4
 8002744:	40001800 	.word	0x40001800

08002748 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_UART4_Init+0x58>)
 800274e:	4a15      	ldr	r2, [pc, #84]	; (80027a4 <MX_UART4_Init+0x5c>)
 8002750:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <MX_UART4_Init+0x58>)
 8002754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002758:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_UART4_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_UART4_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_UART4_Init+0x58>)
 8002768:	2200      	movs	r2, #0
 800276a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_UART4_Init+0x58>)
 800276e:	220c      	movs	r2, #12
 8002770:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002772:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <MX_UART4_Init+0x58>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_UART4_Init+0x58>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <MX_UART4_Init+0x58>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_UART4_Init+0x58>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800278a:	4805      	ldr	r0, [pc, #20]	; (80027a0 <MX_UART4_Init+0x58>)
 800278c:	f008 f904 	bl	800a998 <HAL_UART_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002796:	f000 fa93 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000900 	.word	0x20000900
 80027a4:	40004c00 	.word	0x40004c00

080027a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <MX_UART5_Init+0x60>)
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <MX_UART5_Init+0x64>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <MX_UART5_Init+0x60>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <MX_UART5_Init+0x60>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_UART5_Init+0x60>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <MX_UART5_Init+0x60>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_UART5_Init+0x60>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <MX_UART5_Init+0x60>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_UART5_Init+0x60>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <MX_UART5_Init+0x60>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80027e4:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_UART5_Init+0x60>)
 80027e6:	2210      	movs	r2, #16
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <MX_UART5_Init+0x60>)
 80027ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_UART5_Init+0x60>)
 80027f4:	f008 f8d0 	bl	800a998 <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80027fe:	f000 fa5f 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200005d4 	.word	0x200005d4
 800280c:	40005000 	.word	0x40005000

08002810 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <MX_UART7_Init+0x58>)
 8002816:	4a15      	ldr	r2, [pc, #84]	; (800286c <MX_UART7_Init+0x5c>)
 8002818:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <MX_UART7_Init+0x58>)
 800281c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002820:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_UART7_Init+0x58>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_UART7_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_UART7_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_UART7_Init+0x58>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_UART7_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002840:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_UART7_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <MX_UART7_Init+0x58>)
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_UART7_Init+0x58>)
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002852:	4805      	ldr	r0, [pc, #20]	; (8002868 <MX_UART7_Init+0x58>)
 8002854:	f008 f8a0 	bl	800a998 <HAL_UART_Init>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800285e:	f000 fa2f 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200002f4 	.word	0x200002f4
 800286c:	40007800 	.word	0x40007800

08002870 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002874:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <MX_UART8_Init+0x58>)
 8002876:	4a15      	ldr	r2, [pc, #84]	; (80028cc <MX_UART8_Init+0x5c>)
 8002878:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800287a:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <MX_UART8_Init+0x58>)
 800287c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002880:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <MX_UART8_Init+0x58>)
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <MX_UART8_Init+0x58>)
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_UART8_Init+0x58>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_UART8_Init+0x58>)
 8002896:	220c      	movs	r2, #12
 8002898:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MX_UART8_Init+0x58>)
 800289c:	2200      	movs	r2, #0
 800289e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_UART8_Init+0x58>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <MX_UART8_Init+0x58>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_UART8_Init+0x58>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_UART8_Init+0x58>)
 80028b4:	f008 f870 	bl	800a998 <HAL_UART_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80028be:	f000 f9ff 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	2000087c 	.word	0x2000087c
 80028cc:	40007c00 	.word	0x40007c00

080028d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028d6:	4a15      	ldr	r2, [pc, #84]	; (800292c <MX_USART1_UART_Init+0x5c>)
 80028d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028da:	4b13      	ldr	r3, [pc, #76]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028f6:	220c      	movs	r2, #12
 80028f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_USART1_UART_Init+0x58>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_USART1_UART_Init+0x58>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_USART1_UART_Init+0x58>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_USART1_UART_Init+0x58>)
 800290e:	2200      	movs	r2, #0
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_USART1_UART_Init+0x58>)
 8002914:	f008 f840 	bl	800a998 <HAL_UART_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800291e:	f000 f9cf 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	200007a8 	.word	0x200007a8
 800292c:	40011000 	.word	0x40011000

08002930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <MX_USART2_UART_Init+0x5c>)
 8002938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <MX_USART2_UART_Init+0x58>)
 800293c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <MX_USART2_UART_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002956:	220c      	movs	r2, #12
 8002958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <MX_USART2_UART_Init+0x58>)
 800295c:	2200      	movs	r2, #0
 800295e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002962:	2200      	movs	r2, #0
 8002964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_USART2_UART_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_USART2_UART_Init+0x58>)
 8002974:	f008 f810 	bl	800a998 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800297e:	f000 f99f 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	200009d0 	.word	0x200009d0
 800298c:	40004400 	.word	0x40004400

08002990 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 8002996:	4a15      	ldr	r2, [pc, #84]	; (80029ec <MX_USART3_UART_Init+0x5c>)
 8002998:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 800299c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029b6:	220c      	movs	r2, #12
 80029b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029c6:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <MX_USART3_UART_Init+0x58>)
 80029d4:	f007 ffe0 	bl	800a998 <HAL_UART_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80029de:	f000 f96f 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000410 	.word	0x20000410
 80029ec:	40004800 	.word	0x40004800

080029f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <MX_DMA_Init+0x78>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <MX_DMA_Init+0x78>)
 80029fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <MX_DMA_Init+0x78>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	200b      	movs	r0, #11
 8002a14:	f003 fdbd 	bl	8006592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a18:	200b      	movs	r0, #11
 8002a1a:	f003 fdd6 	bl	80065ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a1e:	2200      	movs	r2, #0
 8002a20:	2100      	movs	r1, #0
 8002a22:	200c      	movs	r0, #12
 8002a24:	f003 fdb5 	bl	8006592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a28:	200c      	movs	r0, #12
 8002a2a:	f003 fdce 	bl	80065ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	200d      	movs	r0, #13
 8002a34:	f003 fdad 	bl	8006592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002a38:	200d      	movs	r0, #13
 8002a3a:	f003 fdc6 	bl	80065ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2100      	movs	r1, #0
 8002a42:	200e      	movs	r0, #14
 8002a44:	f003 fda5 	bl	8006592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002a48:	200e      	movs	r0, #14
 8002a4a:	f003 fdbe 	bl	80065ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	2011      	movs	r0, #17
 8002a54:	f003 fd9d 	bl	8006592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a58:	2011      	movs	r0, #17
 8002a5a:	f003 fdb6 	bl	80065ca <HAL_NVIC_EnableIRQ>

}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800

08002a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a82:	4b87      	ldr	r3, [pc, #540]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a86      	ldr	r2, [pc, #536]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a9a:	4b81      	ldr	r3, [pc, #516]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b7e      	ldr	r3, [pc, #504]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab2:	4b7b      	ldr	r3, [pc, #492]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a7a      	ldr	r2, [pc, #488]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b78      	ldr	r3, [pc, #480]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	4b75      	ldr	r3, [pc, #468]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a74      	ldr	r2, [pc, #464]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b72      	ldr	r3, [pc, #456]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002ae8:	f043 0302 	orr.w	r3, r3, #2
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002afa:	4b69      	ldr	r3, [pc, #420]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	4a68      	ldr	r2, [pc, #416]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b00:	f043 0310 	orr.w	r3, r3, #16
 8002b04:	6313      	str	r3, [r2, #48]	; 0x30
 8002b06:	4b66      	ldr	r3, [pc, #408]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a62      	ldr	r2, [pc, #392]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b5a      	ldr	r3, [pc, #360]	; (8002ca0 <MX_GPIO_Init+0x234>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2103      	movs	r1, #3
 8002b46:	4857      	ldr	r0, [pc, #348]	; (8002ca4 <MX_GPIO_Init+0x238>)
 8002b48:	f004 fb28 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin, GPIO_PIN_RESET);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f243 0124 	movw	r1, #12324	; 0x3024
 8002b52:	4855      	ldr	r0, [pc, #340]	; (8002ca8 <MX_GPIO_Init+0x23c>)
 8002b54:	f004 fb22 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b5e:	4853      	ldr	r0, [pc, #332]	; (8002cac <MX_GPIO_Init+0x240>)
 8002b60:	f004 fb1c 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Spare7_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 8002b64:	2200      	movs	r2, #0
 8002b66:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8002b6a:	4851      	ldr	r0, [pc, #324]	; (8002cb0 <MX_GPIO_Init+0x244>)
 8002b6c:	f004 fb16 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8002b70:	2200      	movs	r2, #0
 8002b72:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002b76:	484f      	ldr	r0, [pc, #316]	; (8002cb4 <MX_GPIO_Init+0x248>)
 8002b78:	f004 fb10 	bl	800719c <HAL_GPIO_WritePin>
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b82:	484d      	ldr	r0, [pc, #308]	; (8002cb8 <MX_GPIO_Init+0x24c>)
 8002b84:	f004 fb0a 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8e:	484b      	ldr	r0, [pc, #300]	; (8002cbc <MX_GPIO_Init+0x250>)
 8002b90:	f004 fb04 	bl	800719c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : qtr_ctrl_odd_Pin qtr_ctrl_even_Pin */
  GPIO_InitStruct.Pin = qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin;
 8002b94:	2303      	movs	r3, #3
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba8:	4619      	mov	r1, r3
 8002baa:	483e      	ldr	r0, [pc, #248]	; (8002ca4 <MX_GPIO_Init+0x238>)
 8002bac:	f004 f932 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : lid1_pwr_en_Pin lid2_pwr_en_Pin lid3_pwr_en_Pin cmdLeds_Pin */
  GPIO_InitStruct.Pin = lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin;
 8002bb0:	f243 0324 	movw	r3, #12324	; 0x3024
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4837      	ldr	r0, [pc, #220]	; (8002ca8 <MX_GPIO_Init+0x23c>)
 8002bca:	f004 f923 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid6_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid6_pwr_en_Pin;
 8002bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid6_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be4:	4619      	mov	r1, r3
 8002be6:	4831      	ldr	r0, [pc, #196]	; (8002cac <MX_GPIO_Init+0x240>)
 8002be8:	f004 f914 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare7_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = Spare7_Pin|led3_Pin|led2_Pin;
 8002bec:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c02:	4619      	mov	r1, r3
 8002c04:	482a      	ldr	r0, [pc, #168]	; (8002cb0 <MX_GPIO_Init+0x244>)
 8002c06:	f004 f905 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare6_Pin Spare5_Pin Spare4_Pin Spare3_Pin
                           Spare2_Pin Spare1_Pin Spare0_Pin led1_Pin */
  GPIO_InitStruct.Pin = Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8002c0a:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	4619      	mov	r1, r3
 8002c22:	4824      	ldr	r0, [pc, #144]	; (8002cb4 <MX_GPIO_Init+0x248>)
 8002c24:	f004 f8f6 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid4_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid4_pwr_en_Pin;
 8002c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c36:	2300      	movs	r3, #0
 8002c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid4_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c3e:	4619      	mov	r1, r3
 8002c40:	481d      	ldr	r0, [pc, #116]	; (8002cb8 <MX_GPIO_Init+0x24c>)
 8002c42:	f004 f8e7 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid5_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid5_pwr_en_Pin;
 8002c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid5_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4817      	ldr	r0, [pc, #92]	; (8002cbc <MX_GPIO_Init+0x250>)
 8002c60:	f004 f8d8 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : boutonExt1_Pin boutonExt2_Pin */
  GPIO_InitStruct.Pin = boutonExt1_Pin|boutonExt2_Pin;
 8002c64:	2330      	movs	r3, #48	; 0x30
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c74:	4619      	mov	r1, r3
 8002c76:	480e      	ldr	r0, [pc, #56]	; (8002cb0 <MX_GPIO_Init+0x244>)
 8002c78:	f004 f8cc 	bl	8006e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : bouton3_Pin bouton2_Pin bouton1_Pin */
  GPIO_InitStruct.Pin = bouton3_Pin|bouton2_Pin|bouton1_Pin;
 8002c7c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	2300      	movs	r3, #0
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4808      	ldr	r0, [pc, #32]	; (8002cb4 <MX_GPIO_Init+0x248>)
 8002c92:	f004 f8bf 	bl	8006e14 <HAL_GPIO_Init>

}
 8002c96:	bf00      	nop
 8002c98:	3738      	adds	r7, #56	; 0x38
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40021c00 	.word	0x40021c00
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40020000 	.word	0x40020000
 8002cbc:	40020800 	.word	0x40020800

08002cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
}
 8002cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <Error_Handler+0x8>

08002cca <paramConf_restaure>:
#include "parametres_configuration.h"

st_param_conf gParametresConfiguration;

void paramConf_restaure()
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0
	// Relecture dans la flash

}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <paramConf_sauvegarde>:

void paramConf_sauvegarde()
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
	// Ecritude dans la flash
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <paramConf_lecture>:

void paramConf_lecture()
{
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b0a2      	sub	sp, #136	; 0x88
 8002cee:	af14      	add	r7, sp, #80	; 0x50
	// Affichage des parametres courants
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
			gParametresConfiguration.acceleration_max,
 8002cf0:	4b3b      	ldr	r3, [pc, #236]	; (8002de0 <paramConf_lecture+0xf8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc57 	bl	80005a8 <__aeabi_f2d>
 8002cfa:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			gParametresConfiguration.deceleration_max,
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fc50 	bl	80005a8 <__aeabi_f2d>
 8002d08:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			gParametresConfiguration.vitesse_max_ligne_droite,
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc49 	bl	80005a8 <__aeabi_f2d>
 8002d16:	e9c7 0108 	strd	r0, r1, [r7, #32]
			gParametresConfiguration.vitesse_max_virage,
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc42 	bl	80005a8 <__aeabi_f2d>
 8002d24:	e9c7 0106 	strd	r0, r1, [r7, #24]
			gParametresConfiguration.vitesse_max_decouverte,
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fc3b 	bl	80005a8 <__aeabi_f2d>
 8002d32:	e9c7 0104 	strd	r0, r1, [r7, #16]
			gParametresConfiguration.pid_vitesse_kp,
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d38:	695b      	ldr	r3, [r3, #20]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fc34 	bl	80005a8 <__aeabi_f2d>
 8002d40:	e9c7 0102 	strd	r0, r1, [r7, #8]
			gParametresConfiguration.pid_vitesse_ki,
 8002d44:	4b26      	ldr	r3, [pc, #152]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d46:	699b      	ldr	r3, [r3, #24]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fd fc2d 	bl	80005a8 <__aeabi_f2d>
 8002d4e:	e9c7 0100 	strd	r0, r1, [r7]
			gParametresConfiguration.pid_vitesse_kd,
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d54:	69db      	ldr	r3, [r3, #28]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fc26 	bl	80005a8 <__aeabi_f2d>
 8002d5c:	4682      	mov	sl, r0
 8002d5e:	468b      	mov	fp, r1
			gParametresConfiguration.pid_direction_kp,
 8002d60:	4b1f      	ldr	r3, [pc, #124]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fc1f 	bl	80005a8 <__aeabi_f2d>
 8002d6a:	4680      	mov	r8, r0
 8002d6c:	4689      	mov	r9, r1
			gParametresConfiguration.pid_direction_ki,
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fc18 	bl	80005a8 <__aeabi_f2d>
 8002d78:	4604      	mov	r4, r0
 8002d7a:	460d      	mov	r5, r1
			gParametresConfiguration.pid_direction_kd );
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <paramConf_lecture+0xf8>)
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	printf("%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc11 	bl	80005a8 <__aeabi_f2d>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002d8e:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002d92:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8002d96:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8002d9a:	ed97 7b00 	vldr	d7, [r7]
 8002d9e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002da2:	ed97 7b02 	vldr	d7, [r7, #8]
 8002da6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002daa:	ed97 7b04 	vldr	d7, [r7, #16]
 8002dae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002db2:	ed97 7b06 	vldr	d7, [r7, #24]
 8002db6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002dba:	ed97 7b08 	vldr	d7, [r7, #32]
 8002dbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002dc2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002dc6:	ed8d 7b00 	vstr	d7, [sp]
 8002dca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <paramConf_lecture+0xfc>)
 8002dd0:	f009 fbdc 	bl	800c58c <iprintf>
}
 8002dd4:	bf00      	nop
 8002dd6:	3738      	adds	r7, #56	; 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dde:	bf00      	nop
 8002de0:	20000b00 	.word	0x20000b00
 8002de4:	08011238 	.word	0x08011238

08002de8 <paramConf_modification>:

void paramConf_modification(float a_acceleration_max, float a_deceleration_max,
		float a_vitesse_max_ligne_droite, float a_vitesse_max_virage, float a_vitesse_max_decouverte,
		float a_pid_vitesse_kp, float a_pid_vitesse_ki, float a_pid_vitesse_kd,
		float a_pid_direction_kp, float a_pid_direction_ki, float a_pid_direction_kd)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b08d      	sub	sp, #52	; 0x34
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8002df2:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 8002df6:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 8002dfa:	edc7 1a08 	vstr	s3, [r7, #32]
 8002dfe:	ed87 2a07 	vstr	s4, [r7, #28]
 8002e02:	edc7 2a06 	vstr	s5, [r7, #24]
 8002e06:	ed87 3a05 	vstr	s6, [r7, #20]
 8002e0a:	edc7 3a04 	vstr	s7, [r7, #16]
 8002e0e:	ed87 4a03 	vstr	s8, [r7, #12]
 8002e12:	edc7 4a02 	vstr	s9, [r7, #8]
 8002e16:	ed87 5a01 	vstr	s10, [r7, #4]
	// Modification des parametres courants
	gParametresConfiguration.acceleration_max = a_acceleration_max;
 8002e1a:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <paramConf_modification+0x80>)
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	6013      	str	r3, [r2, #0]
	gParametresConfiguration.deceleration_max = a_deceleration_max;
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <paramConf_modification+0x80>)
 8002e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e24:	6053      	str	r3, [r2, #4]
	gParametresConfiguration.vitesse_max_ligne_droite = a_vitesse_max_ligne_droite;
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <paramConf_modification+0x80>)
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	6093      	str	r3, [r2, #8]
	gParametresConfiguration.vitesse_max_virage = a_vitesse_max_virage;
 8002e2c:	4a0e      	ldr	r2, [pc, #56]	; (8002e68 <paramConf_modification+0x80>)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	60d3      	str	r3, [r2, #12]
	gParametresConfiguration.vitesse_max_decouverte = a_vitesse_max_decouverte;
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <paramConf_modification+0x80>)
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	6113      	str	r3, [r2, #16]
	gParametresConfiguration.pid_vitesse_kp = a_pid_vitesse_kp;
 8002e38:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <paramConf_modification+0x80>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6153      	str	r3, [r2, #20]
	gParametresConfiguration.pid_vitesse_ki = a_pid_vitesse_ki;
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <paramConf_modification+0x80>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6193      	str	r3, [r2, #24]
	gParametresConfiguration.pid_vitesse_kd = a_pid_vitesse_kd;
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <paramConf_modification+0x80>)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	61d3      	str	r3, [r2, #28]
	gParametresConfiguration.pid_direction_kp = a_pid_direction_kp;
 8002e4a:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <paramConf_modification+0x80>)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6213      	str	r3, [r2, #32]
	gParametresConfiguration.pid_direction_ki = a_pid_direction_ki;
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <paramConf_modification+0x80>)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6253      	str	r3, [r2, #36]	; 0x24
	gParametresConfiguration.pid_direction_kd = a_pid_direction_kd;
 8002e56:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <paramConf_modification+0x80>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6293      	str	r3, [r2, #40]	; 0x28

}
 8002e5c:	bf00      	nop
 8002e5e:	3734      	adds	r7, #52	; 0x34
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	20000b00 	.word	0x20000b00

08002e6c <pid_init>:
 */

#include "pid.h"

void pid_init(pid_context_t *ctx, float Kp, float Ki, float Kd, float alpha)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6178      	str	r0, [r7, #20]
 8002e74:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e78:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e7c:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e80:	edc7 1a01 	vstr	s3, [r7, #4]
	ctx->Kp = Kp;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	601a      	str	r2, [r3, #0]
	ctx->Ki = Ki;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
	ctx->Kd = Kd;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	609a      	str	r2, [r3, #8]
	ctx->alpha = alpha;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	60da      	str	r2, [r3, #12]

	ctx->err_filtered = 0;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
	ctx->err_previous = 0;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	615a      	str	r2, [r3, #20]
	ctx->err_sum = 0;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	371c      	adds	r7, #28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <pid_output>:
	ctx->err_previous = 0;
	ctx->err_sum = 0;
}

float pid_output(pid_context_t *ctx, float error)
{
 8002ec0:	b5b0      	push	{r4, r5, r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	ed87 0a00 	vstr	s0, [r7]
	ctx->err_filtered = (1.0-ctx->alpha)*ctx->err_filtered + ctx->alpha*error;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd fb69 	bl	80005a8 <__aeabi_f2d>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	f04f 0000 	mov.w	r0, #0
 8002ede:	4938      	ldr	r1, [pc, #224]	; (8002fc0 <pid_output+0x100>)
 8002ee0:	f7fd fa02 	bl	80002e8 <__aeabi_dsub>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	4614      	mov	r4, r2
 8002eea:	461d      	mov	r5, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fb59 	bl	80005a8 <__aeabi_f2d>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4620      	mov	r0, r4
 8002efc:	4629      	mov	r1, r5
 8002efe:	f7fd fbab 	bl	8000658 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4614      	mov	r4, r2
 8002f08:	461d      	mov	r5, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f10:	edd7 7a00 	vldr	s15, [r7]
 8002f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f18:	ee17 0a90 	vmov	r0, s15
 8002f1c:	f7fd fb44 	bl	80005a8 <__aeabi_f2d>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7fd f9e0 	bl	80002ec <__adddf3>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	f7fd fe88 	bl	8000c48 <__aeabi_d2f>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	611a      	str	r2, [r3, #16]

	float p_term = ctx->err_filtered*ctx->Kp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4e:	edc7 7a05 	vstr	s15, [r7, #20]
	ctx->err_sum += error;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f58:	edd7 7a00 	vldr	s15, [r7]
 8002f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	edc3 7a06 	vstr	s15, [r3, #24]
	float i_term = ctx->err_sum*ctx->Ki;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	edc7 7a04 	vstr	s15, [r7, #16]
	float d_term = (ctx->err_filtered - ctx->err_previous)*ctx->Kd;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f94:	edc7 7a03 	vstr	s15, [r7, #12]
	ctx->err_previous = ctx->err_filtered;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	615a      	str	r2, [r3, #20]

	return p_term + i_term + d_term;
 8002fa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	3ff00000 	.word	0x3ff00000

08002fc4 <HAL_TIM_IC_CaptureCallback>:
static float wheel_perimeter = 0.204;
// Speed
static int32_t vitesse_mesuree = -1;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // Callback for PWM input catpure
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	if(htim==&htim3) // DIR from RX
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d11c      	bne.n	800300e <HAL_TIM_IC_CaptureCallback+0x4a>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7f1b      	ldrb	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d10c      	bne.n	8002ff6 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			radio_dir.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f006 fdcc 	bl	8009b7c <HAL_TIM_ReadCapturedValue>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	4a28      	ldr	r2, [pc, #160]	; (8003088 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002fe8:	6053      	str	r3, [r2, #4]
			radio_dir.last_time = HAL_GetTick(); // timestamp last pulse
 8002fea:	f002 ff3f 	bl	8005e6c <HAL_GetTick>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002ff2:	6013      	str	r3, [r2, #0]
//		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
//		{
//			vehicule_speedsensor.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
//		}
//	}
}
 8002ff4:	e041      	b.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7f1b      	ldrb	r3, [r3, #28]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d13d      	bne.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
			radio_dir.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002ffe:	2104      	movs	r1, #4
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f006 fdbb 	bl	8009b7c <HAL_TIM_ReadCapturedValue>
 8003006:	4603      	mov	r3, r0
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800300a:	6093      	str	r3, [r2, #8]
}
 800300c:	e035      	b.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
	else if(htim==&htim2) // THR from RX
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <HAL_TIM_IC_CaptureCallback+0xc8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d11c      	bne.n	8003050 <HAL_TIM_IC_CaptureCallback+0x8c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7f1b      	ldrb	r3, [r3, #28]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10c      	bne.n	8003038 <HAL_TIM_IC_CaptureCallback+0x74>
			radio_throttle.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f006 fdab 	bl	8009b7c <HAL_TIM_ReadCapturedValue>
 8003026:	4603      	mov	r3, r0
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800302a:	6053      	str	r3, [r2, #4]
			radio_throttle.last_time = HAL_GetTick(); // timestamp last pulse
 800302c:	f002 ff1e 	bl	8005e6c <HAL_GetTick>
 8003030:	4603      	mov	r3, r0
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003034:	6013      	str	r3, [r2, #0]
}
 8003036:	e020      	b.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7f1b      	ldrb	r3, [r3, #28]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d11c      	bne.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
			radio_throttle.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003040:	2104      	movs	r1, #4
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f006 fd9a 	bl	8009b7c <HAL_TIM_ReadCapturedValue>
 8003048:	4603      	mov	r3, r0
 800304a:	4a11      	ldr	r2, [pc, #68]	; (8003090 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800304c:	6093      	str	r3, [r2, #8]
}
 800304e:	e014      	b.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
	else if(htim==&htim4) // Spare - SpeedSensorAimant from vehicule
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a10      	ldr	r2, [pc, #64]	; (8003094 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d110      	bne.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7f1b      	ldrb	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10c      	bne.n	800307a <HAL_TIM_IC_CaptureCallback+0xb6>
			nb_impulsions_aimants++;
 8003060:	4b0d      	ldr	r3, [pc, #52]	; (8003098 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3301      	adds	r3, #1
 8003066:	4a0c      	ldr	r2, [pc, #48]	; (8003098 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003068:	6013      	str	r3, [r2, #0]
			vitesse_mesuree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800306a:	2100      	movs	r1, #0
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f006 fd85 	bl	8009b7c <HAL_TIM_ReadCapturedValue>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000528 	.word	0x20000528
 8003088:	20000238 	.word	0x20000238
 800308c:	20000984 	.word	0x20000984
 8003090:	20000248 	.word	0x20000248
 8003094:	200003c4 	.word	0x200003c4
 8003098:	20000278 	.word	0x20000278
 800309c:	20000018 	.word	0x20000018

080030a0 <radio_dir_get>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int radio_dir_get(float *a_pDir)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if( (HAL_GetTick() - radio_dir.last_time) > 1000)
 80030a8:	f002 fee0 	bl	8005e6c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <radio_dir_get+0xa8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b8:	d906      	bls.n	80030c8 <radio_dir_get+0x28>
	{
		*a_pDir = 0.0;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
		return -1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e03b      	b.n	8003140 <radio_dir_get+0xa0>
	}
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		if(radio_dir.duty_cycle<1000) radio_dir.duty_cycle = 1000;
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <radio_dir_get+0xa8>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d0:	d203      	bcs.n	80030da <radio_dir_get+0x3a>
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <radio_dir_get+0xa8>)
 80030d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030d8:	609a      	str	r2, [r3, #8]
		if(radio_dir.duty_cycle>2000) radio_dir.duty_cycle = 2000;
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <radio_dir_get+0xa8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80030e2:	d903      	bls.n	80030ec <radio_dir_get+0x4c>
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <radio_dir_get+0xa8>)
 80030e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80030ea:	609a      	str	r2, [r3, #8]

		*a_pDir = ((float)(radio_dir.duty_cycle) - (float)(radio_dir.duty_cycle_default))*VEHICULE_DIR_MAX/500.0;
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <radio_dir_get+0xa8>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	ee07 3a90 	vmov	s15, r3
 80030f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030f8:	4b13      	ldr	r3, [pc, #76]	; (8003148 <radio_dir_get+0xa8>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003108:	ee17 0a90 	vmov	r0, s15
 800310c:	f7fd fa4c 	bl	80005a8 <__aeabi_f2d>
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <radio_dir_get+0xac>)
 8003116:	f7fd fa9f 	bl	8000658 <__aeabi_dmul>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <radio_dir_get+0xb0>)
 8003128:	f7fd fbc0 	bl	80008ac <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f7fd fd88 	bl	8000c48 <__aeabi_d2f>
 8003138:	4602      	mov	r2, r0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
	}
	return 0;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000238 	.word	0x20000238
 800314c:	403a0000 	.word	0x403a0000
 8003150:	407f4000 	.word	0x407f4000

08003154 <radio_throttle_get>:

// Par convention, la vitesse est négative quand on recule.
int radio_throttle_get(float *a_pThrottle)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - radio_throttle.last_time) > 1000)
 800315c:	f002 fe86 	bl	8005e6c <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <radio_throttle_get+0xa8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800316c:	d906      	bls.n	800317c <radio_throttle_get+0x28>
	{
		*a_pThrottle = 0.0;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
		return -1;
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	e03b      	b.n	80031f4 <radio_throttle_get+0xa0>
	}
	else
	{
		if(radio_throttle.duty_cycle<1000) radio_throttle.duty_cycle = 1000;
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <radio_throttle_get+0xa8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003184:	d203      	bcs.n	800318e <radio_throttle_get+0x3a>
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <radio_throttle_get+0xa8>)
 8003188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800318c:	609a      	str	r2, [r3, #8]
		if(radio_throttle.duty_cycle>2000) radio_throttle.duty_cycle = 2000;
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <radio_throttle_get+0xa8>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003196:	d903      	bls.n	80031a0 <radio_throttle_get+0x4c>
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <radio_throttle_get+0xa8>)
 800319a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800319e:	609a      	str	r2, [r3, #8]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		*a_pThrottle = ((float)(radio_throttle.duty_cycle) - (float)(radio_throttle.duty_cycle_default))*VEHICULE_SPEED_MAX/500.0;
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <radio_throttle_get+0xa8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	ee07 3a90 	vmov	s15, r3
 80031a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <radio_throttle_get+0xa8>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031bc:	ee17 0a90 	vmov	r0, s15
 80031c0:	f7fd f9f2 	bl	80005a8 <__aeabi_f2d>
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <radio_throttle_get+0xac>)
 80031ca:	f7fd fa45 	bl	8000658 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <radio_throttle_get+0xb0>)
 80031dc:	f7fd fb66 	bl	80008ac <__aeabi_ddiv>
 80031e0:	4602      	mov	r2, r0
 80031e2:	460b      	mov	r3, r1
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	f7fd fd2e 	bl	8000c48 <__aeabi_d2f>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000248 	.word	0x20000248
 8003200:	40240000 	.word	0x40240000
 8003204:	407f4000 	.word	0x407f4000

08003208 <radio_isThereCommand>:

int radio_isThereCommand()
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
	int retour;
	float direction, throttle;

	// La fonction sert à savoir si on arrête le pilotage automatique, alors par défaut, on considère que le robot reçoit une commande de la télécommande
	retour = 1;
 800320e:	2301      	movs	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]

	// Mesure de vitesse et de direction
	radio_dir_get(&direction);
 8003212:	f107 0308 	add.w	r3, r7, #8
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff ff42 	bl	80030a0 <radio_dir_get>
	radio_throttle_get(&throttle);
 800321c:	1d3b      	adds	r3, r7, #4
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff98 	bl	8003154 <radio_throttle_get>
	if((abs(direction) < 3) && (abs(throttle) < 0.5))
 8003224:	edd7 7a02 	vldr	s15, [r7, #8]
 8003228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322c:	ee17 3a90 	vmov	r3, s15
 8003230:	f113 0f02 	cmn.w	r3, #2
 8003234:	db19      	blt.n	800326a <radio_isThereCommand+0x62>
 8003236:	edd7 7a02 	vldr	s15, [r7, #8]
 800323a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800323e:	ee17 3a90 	vmov	r3, s15
 8003242:	2b02      	cmp	r3, #2
 8003244:	dc11      	bgt.n	800326a <radio_isThereCommand+0x62>
 8003246:	edd7 7a01 	vldr	s15, [r7, #4]
 800324a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800324e:	ee17 3a90 	vmov	r3, s15
 8003252:	2b00      	cmp	r3, #0
 8003254:	db09      	blt.n	800326a <radio_isThereCommand+0x62>
 8003256:	edd7 7a01 	vldr	s15, [r7, #4]
 800325a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800325e:	ee17 3a90 	vmov	r3, s15
 8003262:	2b00      	cmp	r3, #0
 8003264:	dc01      	bgt.n	800326a <radio_isThereCommand+0x62>
		retour = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]

	return retour;
 800326a:	68fb      	ldr	r3, [r7, #12]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <vehicule_speed_get>:

// !!!! A travailler !!!!
int vehicule_speed_get(float *a_pSpeed)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - vehicule_speedsensor.last_time) > 1000)
 800327c:	f002 fdf6 	bl	8005e6c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <vehicule_speed_get+0x84>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800328c:	d902      	bls.n	8003294 <vehicule_speed_get+0x20>
		return -1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e02c      	b.n	80032ee <vehicule_speed_get+0x7a>
	else
	{
		if(vehicule_speedsensor.period<2000) vehicule_speedsensor.period = 2000;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <vehicule_speed_get+0x84>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800329c:	d203      	bcs.n	80032a6 <vehicule_speed_get+0x32>
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <vehicule_speed_get+0x84>)
 80032a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80032a4:	605a      	str	r2, [r3, #4]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		//*a_pSpeed = (float)(vehicule_speedsensor.period)*VEHICULE_SPEED_MAX/500.0;
		*a_pSpeed = VEHICULE_SPEED_MAX*(2000.0/(float)(vehicule_speedsensor.period));
 80032a6:	4b14      	ldr	r3, [pc, #80]	; (80032f8 <vehicule_speed_get+0x84>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	ee17 0a90 	vmov	r0, s15
 80032b6:	f7fd f977 	bl	80005a8 <__aeabi_f2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	f04f 0000 	mov.w	r0, #0
 80032c2:	490e      	ldr	r1, [pc, #56]	; (80032fc <vehicule_speed_get+0x88>)
 80032c4:	f7fd faf2 	bl	80008ac <__aeabi_ddiv>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <vehicule_speed_get+0x8c>)
 80032d6:	f7fd f9bf 	bl	8000658 <__aeabi_dmul>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	f7fd fcb1 	bl	8000c48 <__aeabi_d2f>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000268 	.word	0x20000268
 80032fc:	409f4000 	.word	0x409f4000
 8003300:	40240000 	.word	0x40240000
 8003304:	00000000 	.word	0x00000000

08003308 <vehicule_speed_aimant_get>:

// !!!! A travailler !!!!
int vehicule_speed_aimant_get(float *a_pSpeed)
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	// Speed computation
	*a_pSpeed =  100000.0/(magnet_count*(float)(vitesse_mesuree+1)) / gear_ratio * wheel_perimeter;
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <vehicule_speed_aimant_get+0x98>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3301      	adds	r3, #1
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800331e:	4b21      	ldr	r3, [pc, #132]	; (80033a4 <vehicule_speed_aimant_get+0x9c>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003328:	ee17 0a90 	vmov	r0, s15
 800332c:	f7fd f93c 	bl	80005a8 <__aeabi_f2d>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	a118      	add	r1, pc, #96	; (adr r1, 8003398 <vehicule_speed_aimant_get+0x90>)
 8003336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800333a:	f7fd fab7 	bl	80008ac <__aeabi_ddiv>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4614      	mov	r4, r2
 8003344:	461d      	mov	r5, r3
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <vehicule_speed_aimant_get+0xa0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd f92c 	bl	80005a8 <__aeabi_f2d>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4620      	mov	r0, r4
 8003356:	4629      	mov	r1, r5
 8003358:	f7fd faa8 	bl	80008ac <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4614      	mov	r4, r2
 8003362:	461d      	mov	r5, r3
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <vehicule_speed_aimant_get+0xa4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f91d 	bl	80005a8 <__aeabi_f2d>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fd f96f 	bl	8000658 <__aeabi_dmul>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	f7fd fc61 	bl	8000c48 <__aeabi_d2f>
 8003386:	4602      	mov	r2, r0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	601a      	str	r2, [r3, #0]

	return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bdb0      	pop	{r4, r5, r7, pc}
 8003396:	bf00      	nop
 8003398:	00000000 	.word	0x00000000
 800339c:	40f86a00 	.word	0x40f86a00
 80033a0:	20000018 	.word	0x20000018
 80033a4:	2000000c 	.word	0x2000000c
 80033a8:	20000010 	.word	0x20000010
 80033ac:	20000014 	.word	0x20000014

080033b0 <vehicule_distance_aimant_get>:

// !!!! A travailler !!!!
int vehicule_distance_aimant_get(float *a_pDistance)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	// Distance
	*a_pDistance =  ( (float)(nb_impulsions_aimants) / magnet_count ) / gear_ratio * wheel_perimeter; // m
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <vehicule_distance_aimant_get+0x48>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c4:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <vehicule_distance_aimant_get+0x4c>)
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <vehicule_distance_aimant_get+0x50>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <vehicule_distance_aimant_get+0x54>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000278 	.word	0x20000278
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	20000010 	.word	0x20000010
 8003404:	20000014 	.word	0x20000014

08003408 <vehicule_distance_aimant_reset>:

// !!!! A travailler !!!!
int vehicule_distance_aimant_reset()
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	nb_impulsions_aimants = 0;
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <vehicule_distance_aimant_reset+0x18>)
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

	return 0;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000278 	.word	0x20000278

08003424 <vehicule_dir_set>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int vehicule_dir_set(float a_dir)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_dir>VEHICULE_DIR_MAX) || (a_dir<-VEHICULE_DIR_MAX))
 800342e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003432:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	dc08      	bgt.n	8003452 <vehicule_dir_set+0x2e>
 8003440:	edd7 7a01 	vldr	s15, [r7, #4]
 8003444:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8003448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	d502      	bpl.n	8003458 <vehicule_dir_set+0x34>
		return -1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	e01d      	b.n	8003494 <vehicule_dir_set+0x70>
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR2 = 1500 + (int32_t)((a_dir/VEHICULE_DIR_MAX)*500.0);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd f8a5 	bl	80005a8 <__aeabi_f2d>
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <vehicule_dir_set+0x78>)
 8003464:	f7fd fa22 	bl	80008ac <__aeabi_ddiv>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <vehicule_dir_set+0x7c>)
 8003476:	f7fd f8ef 	bl	8000658 <__aeabi_dmul>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	f7fd fb99 	bl	8000bb8 <__aeabi_d2iz>
 8003486:	4603      	mov	r3, r0
 8003488:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800348c:	4b05      	ldr	r3, [pc, #20]	; (80034a4 <vehicule_dir_set+0x80>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
	}

	return 0;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	403a0000 	.word	0x403a0000
 80034a0:	407f4000 	.word	0x407f4000
 80034a4:	20000830 	.word	0x20000830

080034a8 <vehicule_throttle_set>:

// Par convention, la vitesse est négative quand on recule.
int vehicule_throttle_set(float a_throttle)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_throttle>VEHICULE_SPEED_MAX) || (a_throttle<-VEHICULE_SPEED_MAX))
 80034b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80034b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	dc08      	bgt.n	80034d6 <vehicule_throttle_set+0x2e>
 80034c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80034cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	d502      	bpl.n	80034dc <vehicule_throttle_set+0x34>
		return -1;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
 80034da:	e01d      	b.n	8003518 <vehicule_throttle_set+0x70>
	else
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR1 = 1500 + (int32_t)((a_throttle/VEHICULE_SPEED_MAX)*500.0);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fd f863 	bl	80005a8 <__aeabi_f2d>
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <vehicule_throttle_set+0x78>)
 80034e8:	f7fd f9e0 	bl	80008ac <__aeabi_ddiv>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <vehicule_throttle_set+0x7c>)
 80034fa:	f7fd f8ad 	bl	8000658 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f7fd fb57 	bl	8000bb8 <__aeabi_d2iz>
 800350a:	4603      	mov	r3, r0
 800350c:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <vehicule_throttle_set+0x80>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	635a      	str	r2, [r3, #52]	; 0x34

	return 0;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40240000 	.word	0x40240000
 8003524:	407f4000 	.word	0x407f4000
 8003528:	20000830 	.word	0x20000830

0800352c <init_radio_commandes>:

void init_radio_commandes()
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	// Initialisation de toutes les structures
	radio_dir.last_time = 0;
 8003530:	4b35      	ldr	r3, [pc, #212]	; (8003608 <init_radio_commandes+0xdc>)
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
	radio_dir.period = 0;
 8003536:	4b34      	ldr	r3, [pc, #208]	; (8003608 <init_radio_commandes+0xdc>)
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
	radio_dir.duty_cycle = 0;
 800353c:	4b32      	ldr	r3, [pc, #200]	; (8003608 <init_radio_commandes+0xdc>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]

	radio_throttle.last_time = 0;
 8003542:	4b32      	ldr	r3, [pc, #200]	; (800360c <init_radio_commandes+0xe0>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
	radio_throttle.period = 0;
 8003548:	4b30      	ldr	r3, [pc, #192]	; (800360c <init_radio_commandes+0xe0>)
 800354a:	2200      	movs	r2, #0
 800354c:	605a      	str	r2, [r3, #4]
	radio_throttle.duty_cycle = 0;
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <init_radio_commandes+0xe0>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]

	radio_spare.last_time = 0;
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <init_radio_commandes+0xe4>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
	radio_spare.period = 0;
 800355a:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <init_radio_commandes+0xe4>)
 800355c:	2200      	movs	r2, #0
 800355e:	605a      	str	r2, [r3, #4]
	radio_spare.duty_cycle = 0;
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <init_radio_commandes+0xe4>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]

	vehicule_speedsensor.last_time = 0;
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <init_radio_commandes+0xe8>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
	vehicule_speedsensor.period = 0;
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <init_radio_commandes+0xe8>)
 800356e:	2200      	movs	r2, #0
 8003570:	605a      	str	r2, [r3, #4]
	vehicule_speedsensor.duty_cycle = 0;
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <init_radio_commandes+0xe8>)
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]

	nb_impulsions_aimants = 0;
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <init_radio_commandes+0xec>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

	// Démarrage des Timers d'acquisition
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800357e:	2100      	movs	r1, #0
 8003580:	4826      	ldr	r0, [pc, #152]	; (800361c <init_radio_commandes+0xf0>)
 8003582:	f005 fde5 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8003586:	2104      	movs	r1, #4
 8003588:	4824      	ldr	r0, [pc, #144]	; (800361c <init_radio_commandes+0xf0>)
 800358a:	f005 fde1 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800358e:	2100      	movs	r1, #0
 8003590:	4823      	ldr	r0, [pc, #140]	; (8003620 <init_radio_commandes+0xf4>)
 8003592:	f005 fddd 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8003596:	2104      	movs	r1, #4
 8003598:	4821      	ldr	r0, [pc, #132]	; (8003620 <init_radio_commandes+0xf4>)
 800359a:	f005 fdd9 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 800359e:	2100      	movs	r1, #0
 80035a0:	4820      	ldr	r0, [pc, #128]	; (8003624 <init_radio_commandes+0xf8>)
 80035a2:	f005 fdd5 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_2);
 80035a6:	2104      	movs	r1, #4
 80035a8:	481e      	ldr	r0, [pc, #120]	; (8003624 <init_radio_commandes+0xf8>)
 80035aa:	f005 fdd1 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80035ae:	2100      	movs	r1, #0
 80035b0:	481d      	ldr	r0, [pc, #116]	; (8003628 <init_radio_commandes+0xfc>)
 80035b2:	f005 fdcd 	bl	8009150 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80035b6:	2104      	movs	r1, #4
 80035b8:	481b      	ldr	r0, [pc, #108]	; (8003628 <init_radio_commandes+0xfc>)
 80035ba:	f005 fdc9 	bl	8009150 <HAL_TIM_IC_Start_IT>

	// Détermination des valeurs médianes sur la télécommande.
	// Il s'avère que lorsque l'on relache la télécommande le point milieu de la gachette de vitesse
	// et de la direction.
	// On attend une seconde puis on mesure les valeurs par défaut
	HAL_Delay(1000);
 80035be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035c2:	f002 fc5f 	bl	8005e84 <HAL_Delay>
	radio_dir.duty_cycle_default = radio_dir.duty_cycle;
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <init_radio_commandes+0xdc>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4a0f      	ldr	r2, [pc, #60]	; (8003608 <init_radio_commandes+0xdc>)
 80035cc:	60d3      	str	r3, [r2, #12]
	radio_throttle.duty_cycle_default = radio_throttle.duty_cycle;
 80035ce:	4b0f      	ldr	r3, [pc, #60]	; (800360c <init_radio_commandes+0xe0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <init_radio_commandes+0xe0>)
 80035d4:	60d3      	str	r3, [r2, #12]
	// TODO : c'est moins pire, mais ce n'est pas encore génial. Il faudrai peut être prévoir une courbe en expo comme sur les télécommandes de planeur

	// Vitesse et direction à 0
	vehicule_dir_set(0.0);
 80035d6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800362c <init_radio_commandes+0x100>
 80035da:	f7ff ff23 	bl	8003424 <vehicule_dir_set>
	vehicule_throttle_set(0.0);
 80035de:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800362c <init_radio_commandes+0x100>
 80035e2:	f7ff ff61 	bl	80034a8 <vehicule_throttle_set>
	HAL_Delay(10);
 80035e6:	200a      	movs	r0, #10
 80035e8:	f002 fc4c 	bl	8005e84 <HAL_Delay>
	vehicule_speedsensor.duty_cycle_default = vehicule_speedsensor.duty_cycle;
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <init_radio_commandes+0xe8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a08      	ldr	r2, [pc, #32]	; (8003614 <init_radio_commandes+0xe8>)
 80035f2:	60d3      	str	r3, [r2, #12]

	// Démarrage du Timer de commande
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80035f4:	2100      	movs	r1, #0
 80035f6:	480e      	ldr	r0, [pc, #56]	; (8003630 <init_radio_commandes+0x104>)
 80035f8:	f005 fc4e 	bl	8008e98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80035fc:	2104      	movs	r1, #4
 80035fe:	480c      	ldr	r0, [pc, #48]	; (8003630 <init_radio_commandes+0x104>)
 8003600:	f005 fc4a 	bl	8008e98 <HAL_TIM_PWM_Start>

}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000238 	.word	0x20000238
 800360c:	20000248 	.word	0x20000248
 8003610:	20000258 	.word	0x20000258
 8003614:	20000268 	.word	0x20000268
 8003618:	20000278 	.word	0x20000278
 800361c:	20000984 	.word	0x20000984
 8003620:	20000528 	.word	0x20000528
 8003624:	20000ab4 	.word	0x20000ab4
 8003628:	200003c4 	.word	0x200003c4
 800362c:	00000000 	.word	0x00000000
 8003630:	20000830 	.word	0x20000830

08003634 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003638:	f3bf 8f4f 	dsb	sy
}
 800363c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800363e:	4b06      	ldr	r3, [pc, #24]	; (8003658 <__NVIC_SystemReset+0x24>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003646:	4904      	ldr	r1, [pc, #16]	; (8003658 <__NVIC_SystemReset+0x24>)
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <__NVIC_SystemReset+0x28>)
 800364a:	4313      	orrs	r3, r2
 800364c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800364e:	f3bf 8f4f 	dsb	sy
}
 8003652:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003654:	bf00      	nop
 8003656:	e7fd      	b.n	8003654 <__NVIC_SystemReset+0x20>
 8003658:	e000ed00 	.word	0xe000ed00
 800365c:	05fa0004 	.word	0x05fa0004

08003660 <saisie_commande>:

    return nb_car_valide;
}

char *saisie_commande()
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
    char caractere;
	shell_etat etat;
	char *pCommandeCourante;
	unsigned int pointeur_historique;

    nb_car_valide = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
    position = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	61bb      	str	r3, [r7, #24]
	etat = sh_normal;
 800366e:	2300      	movs	r3, #0
 8003670:	74fb      	strb	r3, [r7, #19]

    // Caractere fin de chaine
	pointeur_historique = sh_historique.commande_courante;
 8003672:	4b8a      	ldr	r3, [pc, #552]	; (800389c <saisie_commande+0x23c>)
 8003674:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003678:	60bb      	str	r3, [r7, #8]
	pCommandeCourante = sh_historique.commandes[sh_historique.commande_courante];
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <saisie_commande+0x23c>)
 800367c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a85      	ldr	r2, [pc, #532]	; (800389c <saisie_commande+0x23c>)
 8003688:	4413      	add	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
	pCommandeCourante[position] = 0x0;
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]

    do {
        caractere = getchar();
 8003696:	f008 fad1 	bl	800bc3c <getchar>
 800369a:	4603      	mov	r3, r0
 800369c:	71fb      	strb	r3, [r7, #7]

		if(etat == sh_normal)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <saisie_commande+0x50>
		{
			if(caractere == 0x1b)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2b1b      	cmp	r3, #27
 80036a8:	d162      	bne.n	8003770 <saisie_commande+0x110>
				etat = sh_fleche_en_cours;
 80036aa:	2301      	movs	r3, #1
 80036ac:	74fb      	strb	r3, [r7, #19]
 80036ae:	e05f      	b.n	8003770 <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_en_cours)
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d108      	bne.n	80036c8 <saisie_commande+0x68>
		{
			if(caractere == 0x5b)
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	2b5b      	cmp	r3, #91	; 0x5b
 80036ba:	d102      	bne.n	80036c2 <saisie_commande+0x62>
				etat = sh_fleche_confirmee;
 80036bc:	2302      	movs	r3, #2
 80036be:	74fb      	strb	r3, [r7, #19]
 80036c0:	e056      	b.n	8003770 <saisie_commande+0x110>
			else
				// Ce n'est pas le code pour une fleche
				// On jete le caractere 0x1b
				etat = sh_normal;
 80036c2:	2300      	movs	r3, #0
 80036c4:	74fb      	strb	r3, [r7, #19]
 80036c6:	e053      	b.n	8003770 <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_confirmee)
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d145      	bne.n	800375a <saisie_commande+0xfa>
		{
			if(caractere == 0x44)
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	2b44      	cmp	r3, #68	; 0x44
 80036d2:	d105      	bne.n	80036e0 <saisie_commande+0x80>
			{
				// Fleche vers la gauche
				position -=1;
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 80036da:	2303      	movs	r3, #3
 80036dc:	74fb      	strb	r3, [r7, #19]
 80036de:	e047      	b.n	8003770 <saisie_commande+0x110>
			}
			else if(caractere == 0x43)
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b43      	cmp	r3, #67	; 0x43
 80036e4:	d105      	bne.n	80036f2 <saisie_commande+0x92>
			{
				// Fleche vers la droite
				position +=1;
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 80036ec:	2303      	movs	r3, #3
 80036ee:	74fb      	strb	r3, [r7, #19]
 80036f0:	e03e      	b.n	8003770 <saisie_commande+0x110>
			}
			else if(caractere == 0x41)
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2b41      	cmp	r3, #65	; 0x41
 80036f6:	d12d      	bne.n	8003754 <saisie_commande+0xf4>
			{
				// Fleche vers le haut
				if(pointeur_historique == 0)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <saisie_commande+0xa4>
					pointeur_historique = SHELL_MAX_HISTORIQUE-1;
 80036fe:	2304      	movs	r3, #4
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	e002      	b.n	800370a <saisie_commande+0xaa>
				else
					pointeur_historique = pointeur_historique-1;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	3b01      	subs	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
				pCommandeCourante = sh_historique.commandes[pointeur_historique];
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2232      	movs	r2, #50	; 0x32
 800370e:	fb02 f303 	mul.w	r3, r2, r3
 8003712:	4a62      	ldr	r2, [pc, #392]	; (800389c <saisie_commande+0x23c>)
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
                printf("\r\n                                                  ");
 8003718:	4861      	ldr	r0, [pc, #388]	; (80038a0 <saisie_commande+0x240>)
 800371a:	f008 ff37 	bl	800c58c <iprintf>
				printf("\r%s%s", PROMPT, pCommandeCourante);
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4960      	ldr	r1, [pc, #384]	; (80038a4 <saisie_commande+0x244>)
 8003722:	4861      	ldr	r0, [pc, #388]	; (80038a8 <saisie_commande+0x248>)
 8003724:	f008 ff32 	bl	800c58c <iprintf>
				position = strlen(pCommandeCourante);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f7fc fd7b 	bl	8000224 <strlen>
 800372e:	4603      	mov	r3, r0
 8003730:	61bb      	str	r3, [r7, #24]
				nb_car_valide = position;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	61fb      	str	r3, [r7, #28]
				strcpy(sh_historique.commandes[sh_historique.commande_courante], pCommandeCourante);
 8003736:	4b59      	ldr	r3, [pc, #356]	; (800389c <saisie_commande+0x23c>)
 8003738:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800373c:	2232      	movs	r2, #50	; 0x32
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	4a56      	ldr	r2, [pc, #344]	; (800389c <saisie_commande+0x23c>)
 8003744:	4413      	add	r3, r2
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	4618      	mov	r0, r3
 800374a:	f008 ffc3 	bl	800c6d4 <strcpy>
				etat = sh_code_fleche;
 800374e:	2303      	movs	r3, #3
 8003750:	74fb      	strb	r3, [r7, #19]
 8003752:	e00d      	b.n	8003770 <saisie_commande+0x110>
			}
			else
				// Inconnu ou non gere
				etat = sh_normal;
 8003754:	2300      	movs	r3, #0
 8003756:	74fb      	strb	r3, [r7, #19]
 8003758:	e00a      	b.n	8003770 <saisie_commande+0x110>
		}
		else if(etat == sh_code_fleche)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d107      	bne.n	8003770 <saisie_commande+0x110>
		{
			if(caractere == 0x1b)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	2b1b      	cmp	r3, #27
 8003764:	d102      	bne.n	800376c <saisie_commande+0x10c>
				etat = sh_fleche_en_cours;
 8003766:	2301      	movs	r3, #1
 8003768:	74fb      	strb	r3, [r7, #19]
 800376a:	e001      	b.n	8003770 <saisie_commande+0x110>
			else
				etat = sh_normal;
 800376c:	2300      	movs	r3, #0
 800376e:	74fb      	strb	r3, [r7, #19]
		}

		if(etat == sh_normal)
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d16b      	bne.n	800384e <saisie_commande+0x1ee>
		{
			if(caractere == 0x08)
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d122      	bne.n	80037c2 <saisie_commande+0x162>
	        {
		        // DEL
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position-1" � la "fin de la chaine" d'une case
	            for(i=position-1; i<nb_car_valide; i++)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	3b01      	subs	r3, #1
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	e00b      	b.n	800379c <saisie_commande+0x13c>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3301      	adds	r3, #1
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	441a      	add	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	440b      	add	r3, r1
 8003792:	7812      	ldrb	r2, [r2, #0]
 8003794:	701a      	strb	r2, [r3, #0]
	            for(i=position-1; i<nb_car_valide; i++)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	dbef      	blt.n	8003784 <saisie_commande+0x124>

	            position -= 1;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	61bb      	str	r3, [r7, #24]
	            nb_car_valide -= 1;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]

                // Rafraichissement de l'affichage
                printf("\r                                                  ");
 80037b0:	483e      	ldr	r0, [pc, #248]	; (80038ac <saisie_commande+0x24c>)
 80037b2:	f008 feeb 	bl	800c58c <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	493a      	ldr	r1, [pc, #232]	; (80038a4 <saisie_commande+0x244>)
 80037ba:	483b      	ldr	r0, [pc, #236]	; (80038a8 <saisie_commande+0x248>)
 80037bc:	f008 fee6 	bl	800c58c <iprintf>
 80037c0:	e045      	b.n	800384e <saisie_commande+0x1ee>
	        }
	        else if(caractere == 0x7F)
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	2b7f      	cmp	r3, #127	; 0x7f
 80037c6:	d11e      	bne.n	8003806 <saisie_commande+0x1a6>
	       {
	            // SUPPR
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=position; i<nb_car_valide; i++)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e00b      	b.n	80037e6 <saisie_commande+0x186>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	441a      	add	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	68f9      	ldr	r1, [r7, #12]
 80037da:	440b      	add	r3, r1
 80037dc:	7812      	ldrb	r2, [r2, #0]
 80037de:	701a      	strb	r2, [r3, #0]
	            for(i=position; i<nb_car_valide; i++)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3301      	adds	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	dbef      	blt.n	80037ce <saisie_commande+0x16e>

	            nb_car_valide -= 1;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]

	            // Rafraichissement de l'affichage
                printf("\r                                                  ");
 80037f4:	482d      	ldr	r0, [pc, #180]	; (80038ac <saisie_commande+0x24c>)
 80037f6:	f008 fec9 	bl	800c58c <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4929      	ldr	r1, [pc, #164]	; (80038a4 <saisie_commande+0x244>)
 80037fe:	482a      	ldr	r0, [pc, #168]	; (80038a8 <saisie_commande+0x248>)
 8003800:	f008 fec4 	bl	800c58c <iprintf>
 8003804:	e023      	b.n	800384e <saisie_commande+0x1ee>
	        else
	        {
	            // Pas de caractere special
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=nb_car_valide; i>=position; i--)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	e00b      	b.n	8003824 <saisie_commande+0x1c4>
	                pCommandeCourante[i+1] = pCommandeCourante[i];
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	441a      	add	r2, r3
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	3301      	adds	r3, #1
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	440b      	add	r3, r1
 800381a:	7812      	ldrb	r2, [r2, #0]
 800381c:	701a      	strb	r2, [r3, #0]
	            for(i=nb_car_valide; i>=position; i--)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	3b01      	subs	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	429a      	cmp	r2, r3
 800382a:	daef      	bge.n	800380c <saisie_commande+0x1ac>

	            pCommandeCourante[position++] = caractere;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	61ba      	str	r2, [r7, #24]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	79fa      	ldrb	r2, [r7, #7]
 800383a:	701a      	strb	r2, [r3, #0]
	            if(caractere==32)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	2b20      	cmp	r3, #32
 8003840:	d102      	bne.n	8003848 <saisie_commande+0x1e8>
	            	printf("x");
 8003842:	2078      	movs	r0, #120	; 0x78
 8003844:	f008 feba 	bl	800c5bc <putchar>
	            nb_car_valide++;
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	3301      	adds	r3, #1
 800384c:	61fb      	str	r3, [r7, #28]
	        }
		}
        // Over writing pour afficher la chaine mise � jour
        //printf("nb_car_valide = %d, position = %d\n", nb_car_valide, position);

    } while (caractere != '\n');
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b0a      	cmp	r3, #10
 8003852:	f47f af20 	bne.w	8003696 <saisie_commande+0x36>

    if(nb_car_valide >= 2)
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	2b01      	cmp	r3, #1
 800385a:	dd06      	ble.n	800386a <saisie_commande+0x20a>
    {
        pCommandeCourante[nb_car_valide-2] = 0x0;
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	3b02      	subs	r3, #2
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e002      	b.n	8003870 <saisie_commande+0x210>
    }
    else
    {
        pCommandeCourante[0] = 0x0;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
    }

	sh_historique.commande_courante = (sh_historique.commande_courante + 1)%SHELL_MAX_HISTORIQUE;
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <saisie_commande+0x23c>)
 8003872:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003876:	1c59      	adds	r1, r3, #1
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <saisie_commande+0x250>)
 800387a:	fb83 2301 	smull	r2, r3, r3, r1
 800387e:	105a      	asrs	r2, r3, #1
 8003880:	17cb      	asrs	r3, r1, #31
 8003882:	1ad2      	subs	r2, r2, r3
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	1aca      	subs	r2, r1, r3
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <saisie_commande+0x23c>)
 800388e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    return pCommandeCourante;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000b2c 	.word	0x20000b2c
 80038a0:	0801125c 	.word	0x0801125c
 80038a4:	08011294 	.word	0x08011294
 80038a8:	080112a8 	.word	0x080112a8
 80038ac:	080112b0 	.word	0x080112b0
 80038b0:	66666667 	.word	0x66666667

080038b4 <shell>:
NVIC_SystemReset();

}

void shell()
{
 80038b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b8:	ed2d 8b04 	vpush	{d8-d9}
 80038bc:	b0ed      	sub	sp, #436	; 0x1b4
 80038be:	af10      	add	r7, sp, #64	; 0x40
    int quitter;
	int nb_lectures;
	st_tele_element *pTeleElement;
	int erreur;

    sh_historique.commande_courante = 0;
 80038c0:	4bc8      	ldr	r3, [pc, #800]	; (8003be4 <shell+0x330>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80038ce:	e00d      	b.n	80038ec <shell+0x38>
        sh_historique.commandes[i][0] = '\0';
 80038d0:	4ac4      	ldr	r2, [pc, #784]	; (8003be4 <shell+0x330>)
 80038d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038d6:	2132      	movs	r1, #50	; 0x32
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 80038e2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038e6:	3301      	adds	r3, #1
 80038e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80038ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	dded      	ble.n	80038d0 <shell+0x1c>

    printf("\r\n");
 80038f4:	48bc      	ldr	r0, [pc, #752]	; (8003be8 <shell+0x334>)
 80038f6:	f008 fee5 	bl	800c6c4 <puts>
    quitter = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    do {
        printf("%s", PROMPT);
 8003900:	49ba      	ldr	r1, [pc, #744]	; (8003bec <shell+0x338>)
 8003902:	48bb      	ldr	r0, [pc, #748]	; (8003bf0 <shell+0x33c>)
 8003904:	f008 fe42 	bl	800c58c <iprintf>

        // Saisie de la commande
        saisie_commande();
 8003908:	f7ff feaa 	bl	8003660 <saisie_commande>
        if(sh_historique.commande_courante == 0)
 800390c:	4bb5      	ldr	r3, [pc, #724]	; (8003be4 <shell+0x330>)
 800390e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <shell+0x70>
        	strcpy(commande, sh_historique.commandes[SHELL_MAX_HISTORIQUE-1]);
 8003916:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800391a:	49b6      	ldr	r1, [pc, #728]	; (8003bf4 <shell+0x340>)
 800391c:	4618      	mov	r0, r3
 800391e:	f008 fed9 	bl	800c6d4 <strcpy>
 8003922:	e00e      	b.n	8003942 <shell+0x8e>
        else
        	strcpy(commande, sh_historique.commandes[sh_historique.commande_courante-1]);
 8003924:	4baf      	ldr	r3, [pc, #700]	; (8003be4 <shell+0x330>)
 8003926:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800392a:	3b01      	subs	r3, #1
 800392c:	2232      	movs	r2, #50	; 0x32
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	4aac      	ldr	r2, [pc, #688]	; (8003be4 <shell+0x330>)
 8003934:	441a      	add	r2, r3
 8003936:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f008 fec9 	bl	800c6d4 <strcpy>

        printf("\r\n");
 8003942:	48a9      	ldr	r0, [pc, #676]	; (8003be8 <shell+0x334>)
 8003944:	f008 febe 	bl	800c6c4 <puts>

        printf("%s\r\n", commande);
 8003948:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800394c:	4619      	mov	r1, r3
 800394e:	48aa      	ldr	r0, [pc, #680]	; (8003bf8 <shell+0x344>)
 8003950:	f008 fe1c 	bl	800c58c <iprintf>

        // Interpretation de la commande
        num_args = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        tab_args[num_args] = strtok(commande, " ");
 800395a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800395e:	49a7      	ldr	r1, [pc, #668]	; (8003bfc <shell+0x348>)
 8003960:	4618      	mov	r0, r3
 8003962:	f009 fcf3 	bl	800d34c <strtok>
 8003966:	4601      	mov	r1, r0
 8003968:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800396c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 8003974:	e00f      	b.n	8003996 <shell+0xe2>
        {
            tab_args[++num_args] = strtok(NULL, " ");
 8003976:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800397a:	3301      	adds	r3, #1
 800397c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003980:	499e      	ldr	r1, [pc, #632]	; (8003bfc <shell+0x348>)
 8003982:	2000      	movs	r0, #0
 8003984:	f009 fce2 	bl	800d34c <strtok>
 8003988:	4601      	mov	r1, r0
 800398a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800398e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 8003996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800399a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800399e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e7      	bne.n	8003976 <shell+0xc2>
        }

        // Shell
        if(strcmp(tab_args[0], "hw_led") == 0)
 80039a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4994      	ldr	r1, [pc, #592]	; (8003c00 <shell+0x34c>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fc2e 	bl	8000210 <strcmp>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 80c1 	bne.w	8003b3e <shell+0x28a>
        {
            // Led
            if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led1")==0))
 80039bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d11b      	bne.n	80039fc <shell+0x148>
 80039c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	498e      	ldr	r1, [pc, #568]	; (8003c04 <shell+0x350>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fc1f 	bl	8000210 <strcmp>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d111      	bne.n	80039fc <shell+0x148>
 80039d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	498a      	ldr	r1, [pc, #552]	; (8003c08 <shell+0x354>)
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fc15 	bl	8000210 <strcmp>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d107      	bne.n	80039fc <shell+0x148>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039f2:	4886      	ldr	r0, [pc, #536]	; (8003c0c <shell+0x358>)
 80039f4:	f003 fbd2 	bl	800719c <HAL_GPIO_WritePin>
 80039f8:	f000 bd6b 	b.w	80044d2 <shell+0xc1e>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led2")==0))
 80039fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d11a      	bne.n	8003a3a <shell+0x186>
 8003a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	497e      	ldr	r1, [pc, #504]	; (8003c04 <shell+0x350>)
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fc fbff 	bl	8000210 <strcmp>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d110      	bne.n	8003a3a <shell+0x186>
 8003a18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	497c      	ldr	r1, [pc, #496]	; (8003c10 <shell+0x35c>)
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fbf5 	bl	8000210 <strcmp>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <shell+0x186>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	4878      	ldr	r0, [pc, #480]	; (8003c14 <shell+0x360>)
 8003a32:	f003 fbb3 	bl	800719c <HAL_GPIO_WritePin>
 8003a36:	f000 bd4c 	b.w	80044d2 <shell+0xc1e>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led3")==0))
 8003a3a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d11a      	bne.n	8003a78 <shell+0x1c4>
 8003a42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	496e      	ldr	r1, [pc, #440]	; (8003c04 <shell+0x350>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fc fbe0 	bl	8000210 <strcmp>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d110      	bne.n	8003a78 <shell+0x1c4>
 8003a56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	496e      	ldr	r1, [pc, #440]	; (8003c18 <shell+0x364>)
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fc fbd6 	bl	8000210 <strcmp>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <shell+0x1c4>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	4869      	ldr	r0, [pc, #420]	; (8003c14 <shell+0x360>)
 8003a70:	f003 fb94 	bl	800719c <HAL_GPIO_WritePin>
 8003a74:	f000 bd2d 	b.w	80044d2 <shell+0xc1e>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led1")==0))
 8003a78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d11b      	bne.n	8003ab8 <shell+0x204>
 8003a80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4965      	ldr	r1, [pc, #404]	; (8003c1c <shell+0x368>)
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fbc1 	bl	8000210 <strcmp>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <shell+0x204>
 8003a94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	495b      	ldr	r1, [pc, #364]	; (8003c08 <shell+0x354>)
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fbb7 	bl	8000210 <strcmp>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <shell+0x204>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003aae:	4857      	ldr	r0, [pc, #348]	; (8003c0c <shell+0x358>)
 8003ab0:	f003 fb74 	bl	800719c <HAL_GPIO_WritePin>
 8003ab4:	f000 bd0d 	b.w	80044d2 <shell+0xc1e>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led2")==0))
 8003ab8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d11a      	bne.n	8003af6 <shell+0x242>
 8003ac0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4955      	ldr	r1, [pc, #340]	; (8003c1c <shell+0x368>)
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fba1 	bl	8000210 <strcmp>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d110      	bne.n	8003af6 <shell+0x242>
 8003ad4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	494d      	ldr	r1, [pc, #308]	; (8003c10 <shell+0x35c>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fb97 	bl	8000210 <strcmp>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <shell+0x242>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	2180      	movs	r1, #128	; 0x80
 8003aec:	4849      	ldr	r0, [pc, #292]	; (8003c14 <shell+0x360>)
 8003aee:	f003 fb55 	bl	800719c <HAL_GPIO_WritePin>
 8003af2:	f000 bcee 	b.w	80044d2 <shell+0xc1e>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led3")==0))
 8003af6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d11a      	bne.n	8003b34 <shell+0x280>
 8003afe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4945      	ldr	r1, [pc, #276]	; (8003c1c <shell+0x368>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fc fb82 	bl	8000210 <strcmp>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d110      	bne.n	8003b34 <shell+0x280>
 8003b12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	493f      	ldr	r1, [pc, #252]	; (8003c18 <shell+0x364>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fb78 	bl	8000210 <strcmp>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <shell+0x280>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8003b26:	2201      	movs	r2, #1
 8003b28:	2140      	movs	r1, #64	; 0x40
 8003b2a:	483a      	ldr	r0, [pc, #232]	; (8003c14 <shell+0x360>)
 8003b2c:	f003 fb36 	bl	800719c <HAL_GPIO_WritePin>
 8003b30:	f000 bccf 	b.w	80044d2 <shell+0xc1e>
            else
                printf("Parametres incorrects. \r\nSyntaxe : hw_led <on/off> <led1/led2/led3>\r\n");
 8003b34:	483a      	ldr	r0, [pc, #232]	; (8003c20 <shell+0x36c>)
 8003b36:	f008 fdc5 	bl	800c6c4 <puts>
 8003b3a:	f000 bcca 	b.w	80044d2 <shell+0xc1e>
        } else
		if(strcmp(tab_args[0], "hw_buttons") == 0)
 8003b3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4937      	ldr	r1, [pc, #220]	; (8003c24 <shell+0x370>)
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fb62 	bl	8000210 <strcmp>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d17c      	bne.n	8003c4c <shell+0x398>
		{
			// Afiche l'�tat des boutons
			if(num_args==1)
 8003b52:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d13f      	bne.n	8003bda <shell+0x326>
			{
				if(HAL_GPIO_ReadPin(bouton1_GPIO_Port, bouton1_Pin) ==  GPIO_PIN_SET)
 8003b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b5e:	482b      	ldr	r0, [pc, #172]	; (8003c0c <shell+0x358>)
 8003b60:	f003 fb04 	bl	800716c <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d103      	bne.n	8003b72 <shell+0x2be>
					printf("Bouton1 opened.\r\n");
 8003b6a:	482f      	ldr	r0, [pc, #188]	; (8003c28 <shell+0x374>)
 8003b6c:	f008 fdaa 	bl	800c6c4 <puts>
 8003b70:	e002      	b.n	8003b78 <shell+0x2c4>
				else
					printf("Bouton1 closed.\r\n");
 8003b72:	482e      	ldr	r0, [pc, #184]	; (8003c2c <shell+0x378>)
 8003b74:	f008 fda6 	bl	800c6c4 <puts>
				if(HAL_GPIO_ReadPin(bouton2_GPIO_Port, bouton2_Pin) ==  GPIO_PIN_SET)
 8003b78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b7c:	4823      	ldr	r0, [pc, #140]	; (8003c0c <shell+0x358>)
 8003b7e:	f003 faf5 	bl	800716c <HAL_GPIO_ReadPin>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d103      	bne.n	8003b90 <shell+0x2dc>
					printf("Bouton2 opened.\r\n");
 8003b88:	4829      	ldr	r0, [pc, #164]	; (8003c30 <shell+0x37c>)
 8003b8a:	f008 fd9b 	bl	800c6c4 <puts>
 8003b8e:	e002      	b.n	8003b96 <shell+0x2e2>
				else
					printf("Bouton2 closed.\r\n");
 8003b90:	4828      	ldr	r0, [pc, #160]	; (8003c34 <shell+0x380>)
 8003b92:	f008 fd97 	bl	800c6c4 <puts>
				if(HAL_GPIO_ReadPin(bouton3_GPIO_Port, bouton3_Pin) ==  GPIO_PIN_SET)
 8003b96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b9a:	481c      	ldr	r0, [pc, #112]	; (8003c0c <shell+0x358>)
 8003b9c:	f003 fae6 	bl	800716c <HAL_GPIO_ReadPin>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d103      	bne.n	8003bae <shell+0x2fa>
					printf("Bouton3 opened.\r\n");
 8003ba6:	4824      	ldr	r0, [pc, #144]	; (8003c38 <shell+0x384>)
 8003ba8:	f008 fd8c 	bl	800c6c4 <puts>
 8003bac:	e002      	b.n	8003bb4 <shell+0x300>
				else
					printf("Bouton3 closed.\r\n");
 8003bae:	4823      	ldr	r0, [pc, #140]	; (8003c3c <shell+0x388>)
 8003bb0:	f008 fd88 	bl	800c6c4 <puts>
				if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin) ==  GPIO_PIN_SET)
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	4817      	ldr	r0, [pc, #92]	; (8003c14 <shell+0x360>)
 8003bb8:	f003 fad8 	bl	800716c <HAL_GPIO_ReadPin>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d103      	bne.n	8003bca <shell+0x316>
					printf("BoutonExt1 opened.\r\n");
 8003bc2:	481f      	ldr	r0, [pc, #124]	; (8003c40 <shell+0x38c>)
 8003bc4:	f008 fd7e 	bl	800c6c4 <puts>
 8003bc8:	e002      	b.n	8003bd0 <shell+0x31c>
				else
					printf("BoutonExt1 closed.\r\n");
 8003bca:	481e      	ldr	r0, [pc, #120]	; (8003c44 <shell+0x390>)
 8003bcc:	f008 fd7a 	bl	800c6c4 <puts>
				printf("\r\n");
 8003bd0:	4805      	ldr	r0, [pc, #20]	; (8003be8 <shell+0x334>)
 8003bd2:	f008 fd77 	bl	800c6c4 <puts>
 8003bd6:	f000 bc7c 	b.w	80044d2 <shell+0xc1e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : hw_buttons\r\n");
 8003bda:	481b      	ldr	r0, [pc, #108]	; (8003c48 <shell+0x394>)
 8003bdc:	f008 fd72 	bl	800c6c4 <puts>
 8003be0:	f000 bc77 	b.w	80044d2 <shell+0xc1e>
 8003be4:	20000b2c 	.word	0x20000b2c
 8003be8:	080112fc 	.word	0x080112fc
 8003bec:	08011294 	.word	0x08011294
 8003bf0:	08011300 	.word	0x08011300
 8003bf4:	20000bf4 	.word	0x20000bf4
 8003bf8:	08011304 	.word	0x08011304
 8003bfc:	0801130c 	.word	0x0801130c
 8003c00:	08011310 	.word	0x08011310
 8003c04:	08011318 	.word	0x08011318
 8003c08:	0801131c 	.word	0x0801131c
 8003c0c:	40021800 	.word	0x40021800
 8003c10:	08011324 	.word	0x08011324
 8003c14:	40020c00 	.word	0x40020c00
 8003c18:	0801132c 	.word	0x0801132c
 8003c1c:	08011334 	.word	0x08011334
 8003c20:	08011338 	.word	0x08011338
 8003c24:	08011380 	.word	0x08011380
 8003c28:	0801138c 	.word	0x0801138c
 8003c2c:	080113a0 	.word	0x080113a0
 8003c30:	080113b4 	.word	0x080113b4
 8003c34:	080113c8 	.word	0x080113c8
 8003c38:	080113dc 	.word	0x080113dc
 8003c3c:	080113f0 	.word	0x080113f0
 8003c40:	08011404 	.word	0x08011404
 8003c44:	08011418 	.word	0x08011418
 8003c48:	0801142c 	.word	0x0801142c
//            	paramsModify();
//            }
//            else
//                printf("Parametres incorrects. \r\nSyntaxe : params_modify\r\n");
//        } else
		if(strcmp(tab_args[0], "radio_get") == 0)
 8003c4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	49c6      	ldr	r1, [pc, #792]	; (8003f6c <shell+0x6b8>)
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fadb 	bl	8000210 <strcmp>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f040 8085 	bne.w	8003d6c <shell+0x4b8>
		{
			if(num_args==1)
 8003c62:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d12f      	bne.n	8003cca <shell+0x416>
			{
				radio_dir_get(&radio_dir);
 8003c6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fa16 	bl	80030a0 <radio_dir_get>
				radio_throttle_get(&radio_throttle);
 8003c74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fa6b 	bl	8003154 <radio_throttle_get>
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8003c7e:	48bc      	ldr	r0, [pc, #752]	; (8003f70 <shell+0x6bc>)
 8003c80:	f008 fd20 	bl	800c6c4 <puts>
				radio_dir = 0.0;
 8003c84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8003c8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
				printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 8003c98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fc fc82 	bl	80005a8 <__aeabi_f2d>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fc fc7a 	bl	80005a8 <__aeabi_f2d>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	e9cd 2300 	strd	r2, r3, [sp]
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	48ac      	ldr	r0, [pc, #688]	; (8003f74 <shell+0x6c0>)
 8003cc2:	f008 fc63 	bl	800c58c <iprintf>
 8003cc6:	f000 bc04 	b.w	80044d2 <shell+0xc1e>
			}
			else if(num_args==2)
 8003cca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d148      	bne.n	8003d64 <shell+0x4b0>
			{
				int nb_lectures = atoi(tab_args[1]);
 8003cd2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f007 ffa5 	bl	800bc28 <atoi>
 8003cde:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8003ce2:	48a3      	ldr	r0, [pc, #652]	; (8003f70 <shell+0x6bc>)
 8003ce4:	f008 fcee 	bl	800c6c4 <puts>
				radio_dir = 0.0;
 8003ce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8003cf2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
				for(i=0;i<nb_lectures;i++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003d02:	e028      	b.n	8003d56 <shell+0x4a2>
				{
					radio_dir_get(&radio_dir);
 8003d04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff f9c9 	bl	80030a0 <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 8003d0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fa1e 	bl	8003154 <radio_throttle_get>
					printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 8003d18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fc fc42 	bl	80005a8 <__aeabi_f2d>
 8003d24:	4604      	mov	r4, r0
 8003d26:	460d      	mov	r5, r1
 8003d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fc fc3a 	bl	80005a8 <__aeabi_f2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	e9cd 2300 	strd	r2, r3, [sp]
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	462b      	mov	r3, r5
 8003d40:	488c      	ldr	r0, [pc, #560]	; (8003f74 <shell+0x6c0>)
 8003d42:	f008 fc23 	bl	800c58c <iprintf>

					// Rafraichissement de la radio toutes les 16 ms env.
					HAL_Delay(16);
 8003d46:	2010      	movs	r0, #16
 8003d48:	f002 f89c 	bl	8005e84 <HAL_Delay>
				for(i=0;i<nb_lectures;i++)
 8003d4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d50:	3301      	adds	r3, #1
 8003d52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003d56:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8003d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	dbd0      	blt.n	8003d04 <shell+0x450>
 8003d62:	e3b6      	b.n	80044d2 <shell+0xc1e>
				}
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : radio_get <nb_lectures=1>\r\n");
 8003d64:	4884      	ldr	r0, [pc, #528]	; (8003f78 <shell+0x6c4>)
 8003d66:	f008 fcad 	bl	800c6c4 <puts>
 8003d6a:	e3b2      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "vehicule_throttle_set") == 0)
 8003d6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4982      	ldr	r1, [pc, #520]	; (8003f7c <shell+0x6c8>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc fa4b 	bl	8000210 <strcmp>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d12f      	bne.n	8003de0 <shell+0x52c>
		{
			if(num_args==2)
 8003d80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d127      	bne.n	8003dd8 <shell+0x524>
			{
				float valeur = atof(tab_args[1]);
 8003d88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f007 ff47 	bl	800bc22 <atof>
 8003d94:	ec53 2b10 	vmov	r2, r3, d0
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f7fc ff54 	bl	8000c48 <__aeabi_d2f>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

				if((valeur >= -10.0) && (valeur <= 10.0))
 8003da6:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8003daa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003dae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db6:	f2c0 838c 	blt.w	80044d2 <shell+0xc1e>
 8003dba:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8003dbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	f200 8382 	bhi.w	80044d2 <shell+0xc1e>
					vehicule_throttle_set(valeur);
 8003dce:	ed97 0a54 	vldr	s0, [r7, #336]	; 0x150
 8003dd2:	f7ff fb69 	bl	80034a8 <vehicule_throttle_set>
 8003dd6:	e37c      	b.n	80044d2 <shell+0xc1e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 8003dd8:	4869      	ldr	r0, [pc, #420]	; (8003f80 <shell+0x6cc>)
 8003dda:	f008 fc73 	bl	800c6c4 <puts>
 8003dde:	e378      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "vehicule_dir_set") == 0)
 8003de0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4967      	ldr	r1, [pc, #412]	; (8003f84 <shell+0x6d0>)
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc fa11 	bl	8000210 <strcmp>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d138      	bne.n	8003e66 <shell+0x5b2>
		{
			if(num_args==2)
 8003df4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d130      	bne.n	8003e5e <shell+0x5aa>
			{
				float valeur = atof(tab_args[1]);
 8003dfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f007 ff0d 	bl	800bc22 <atof>
 8003e08:	ec53 2b10 	vmov	r2, r3, d0
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7fc ff1a 	bl	8000c48 <__aeabi_d2f>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				printf("%f\r\n", valeur);
 8003e1a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8003e1e:	f7fc fbc3 	bl	80005a8 <__aeabi_f2d>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4858      	ldr	r0, [pc, #352]	; (8003f88 <shell+0x6d4>)
 8003e28:	f008 fbb0 	bl	800c58c <iprintf>

				if((valeur >= -26.0) && (valeur <= 26.0))
 8003e2c:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8003e30:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8003e34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3c:	f2c0 8349 	blt.w	80044d2 <shell+0xc1e>
 8003e40:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8003e44:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e50:	f200 833f 	bhi.w	80044d2 <shell+0xc1e>
					vehicule_dir_set(valeur);
 8003e54:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 8003e58:	f7ff fae4 	bl	8003424 <vehicule_dir_set>
 8003e5c:	e339      	b.n	80044d2 <shell+0xc1e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_dir_set <-26.0 ... 26.0>\r\n");
 8003e5e:	484b      	ldr	r0, [pc, #300]	; (8003f8c <shell+0x6d8>)
 8003e60:	f008 fc30 	bl	800c6c4 <puts>
 8003e64:	e335      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "vehicule_speed_get") == 0)
 8003e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4948      	ldr	r1, [pc, #288]	; (8003f90 <shell+0x6dc>)
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc f9ce 	bl	8000210 <strcmp>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 8094 	bne.w	8003fa4 <shell+0x6f0>
		{
			if(num_args==1)
 8003e7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d16f      	bne.n	8003f64 <shell+0x6b0>
			{

				printf("Iteration; vitesse_cmd; distance; speed; speed_aimant\r\n");
 8003e84:	4843      	ldr	r0, [pc, #268]	; (8003f94 <shell+0x6e0>)
 8003e86:	f008 fc1d 	bl	800c6c4 <puts>
				nb_lectures = 0;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
				vehicule_distance_aimant_reset();
 8003e90:	f7ff faba 	bl	8003408 <vehicule_distance_aimant_reset>
				do {
					nb_lectures++;
 8003e94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

					vehicule_distance_aimant_get(&distance);
 8003e9e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fa84 	bl	80033b0 <vehicule_distance_aimant_get>
					vehicule_speed_get(&speed);
 8003ea8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff f9e1 	bl	8003274 <vehicule_speed_get>
					vehicule_speed_aimant_get(&speed_aimant);
 8003eb2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff fa26 	bl	8003308 <vehicule_speed_aimant_get>

					// Pilotage par la télécommande
					radio_dir_get(&radio_dir);
 8003ebc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff f8ed 	bl	80030a0 <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 8003ec6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff f942 	bl	8003154 <radio_throttle_get>
					vehicule_dir_set(radio_dir);
 8003ed0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ed4:	edd3 7a00 	vldr	s15, [r3]
 8003ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8003edc:	f7ff faa2 	bl	8003424 <vehicule_dir_set>
					vehicule_throttle_set(radio_throttle);
 8003ee0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8003eec:	f7ff fadc 	bl	80034a8 <vehicule_throttle_set>

					printf("%d; %f; %f; %f; %f\r\n", nb_lectures, radio_throttle, distance, speed, speed_aimant);
 8003ef0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fb56 	bl	80005a8 <__aeabi_f2d>
 8003efc:	4682      	mov	sl, r0
 8003efe:	468b      	mov	fp, r1
 8003f00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fc fb4e 	bl	80005a8 <__aeabi_f2d>
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	460d      	mov	r5, r1
 8003f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fb46 	bl	80005a8 <__aeabi_f2d>
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	4689      	mov	r9, r1
 8003f20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fc fb3e 	bl	80005a8 <__aeabi_f2d>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003f34:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003f38:	e9cd 4500 	strd	r4, r5, [sp]
 8003f3c:	4652      	mov	r2, sl
 8003f3e:	465b      	mov	r3, fp
 8003f40:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8003f44:	4814      	ldr	r0, [pc, #80]	; (8003f98 <shell+0x6e4>)
 8003f46:	f008 fb21 	bl	800c58c <iprintf>

					HAL_Delay(10);
 8003f4a:	200a      	movs	r0, #10
 8003f4c:	f001 ff9a 	bl	8005e84 <HAL_Delay>
					// Acquisition sur 10 s
				} while(nb_lectures<1000);
 8003f50:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003f54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f58:	db9c      	blt.n	8003e94 <shell+0x5e0>

				// Remise à 0 de la vitesse
				vehicule_throttle_set(0.0);
 8003f5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8003f9c <shell+0x6e8>
 8003f5e:	f7ff faa3 	bl	80034a8 <vehicule_throttle_set>
 8003f62:	e2b6      	b.n	80044d2 <shell+0xc1e>

			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_speed_get \r\n");
 8003f64:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <shell+0x6ec>)
 8003f66:	f008 fbad 	bl	800c6c4 <puts>
 8003f6a:	e2b2      	b.n	80044d2 <shell+0xc1e>
 8003f6c:	0801145c 	.word	0x0801145c
 8003f70:	08011468 	.word	0x08011468
 8003f74:	08011494 	.word	0x08011494
 8003f78:	080114a4 	.word	0x080114a4
 8003f7c:	080114e4 	.word	0x080114e4
 8003f80:	080114fc 	.word	0x080114fc
 8003f84:	08011548 	.word	0x08011548
 8003f88:	0801155c 	.word	0x0801155c
 8003f8c:	08011564 	.word	0x08011564
 8003f90:	080115ac 	.word	0x080115ac
 8003f94:	080115c0 	.word	0x080115c0
 8003f98:	080115f8 	.word	0x080115f8
 8003f9c:	00000000 	.word	0x00000000
 8003fa0:	08011610 	.word	0x08011610
		} else
		if(strcmp(tab_args[0], "lidar_get") == 0)
 8003fa4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	49a9      	ldr	r1, [pc, #676]	; (8004250 <shell+0x99c>)
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc f92f 	bl	8000210 <strcmp>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d14d      	bne.n	8004054 <shell+0x7a0>
		{
			if(num_args==1)
 8003fb8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d145      	bne.n	800404c <shell+0x798>
			{
				nb_lectures = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

				do {
					tfminiplus_getLastAcquisition(MINILIDAR_GAUCHE, &lidar_distance_gauche, &lidar_rssi, &lidar_temperature);
 8003fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f001 fd44 	bl	8005a60 <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_DROIT, &lidar_distance_droite, &lidar_rssi, &lidar_temperature);
 8003fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fe0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f001 fd3b 	bl	8005a60 <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_AVANT, &lidar_distance_avant, &lidar_rssi, &lidar_temperature);
 8003fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ff2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f001 fd32 	bl	8005a60 <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_HAUT, &lidar_distance_haut, &lidar_rssi, &lidar_temperature);
 8003ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004000:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004004:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004008:	2002      	movs	r0, #2
 800400a:	f001 fd29 	bl	8005a60 <tfminiplus_getLastAcquisition>

					printf("Gauche : %ld cm, Avant : %ld cm, Haut : %ld cm, Droit : %ld cm\r\n",
 800400e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4603      	mov	r3, r0
 800402a:	488a      	ldr	r0, [pc, #552]	; (8004254 <shell+0x9a0>)
 800402c:	f008 faae 	bl	800c58c <iprintf>
							lidar_distance_gauche, lidar_distance_avant, lidar_distance_haut, lidar_distance_droite);

					HAL_Delay(1000);
 8004030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004034:	f001 ff26 	bl	8005e84 <HAL_Delay>
					nb_lectures++;
 8004038:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800403c:	3301      	adds	r3, #1
 800403e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
				}while(nb_lectures<120);
 8004042:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004046:	2b77      	cmp	r3, #119	; 0x77
 8004048:	ddbd      	ble.n	8003fc6 <shell+0x712>
 800404a:	e242      	b.n	80044d2 <shell+0xc1e>

			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : lidar_get \r\n");
 800404c:	4882      	ldr	r0, [pc, #520]	; (8004258 <shell+0x9a4>)
 800404e:	f008 fb39 	bl	800c6c4 <puts>
 8004052:	e23e      	b.n	80044d2 <shell+0xc1e>
//				printf(".\r\n");
//			}
//			else
//				printf("Parametres incorrects. \r\nSyntaxe : gyro_variance\r\n");
//		} else
		if(strcmp(tab_args[0], "paramconf_restaure") == 0)
 8004054:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4980      	ldr	r1, [pc, #512]	; (800425c <shell+0x9a8>)
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc f8d7 	bl	8000210 <strcmp>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <shell+0x7ca>
		{
			if(num_args==1)
 8004068:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <shell+0x7c2>
			{
				paramConf_restaure();
 8004070:	f7fe fe2b 	bl	8002cca <paramConf_restaure>
 8004074:	e22d      	b.n	80044d2 <shell+0xc1e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_restaure\r\n");
 8004076:	487a      	ldr	r0, [pc, #488]	; (8004260 <shell+0x9ac>)
 8004078:	f008 fb24 	bl	800c6c4 <puts>
 800407c:	e229      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "paramconf_sauvegarde") == 0)
 800407e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4977      	ldr	r1, [pc, #476]	; (8004264 <shell+0x9b0>)
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc f8c2 	bl	8000210 <strcmp>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <shell+0x7f4>
		{
			if(num_args==1)
 8004092:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004096:	2b01      	cmp	r3, #1
 8004098:	d102      	bne.n	80040a0 <shell+0x7ec>
			{
				paramConf_sauvegarde();
 800409a:	f7fe fe1d 	bl	8002cd8 <paramConf_sauvegarde>
 800409e:	e218      	b.n	80044d2 <shell+0xc1e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_sauvegarde\r\n");
 80040a0:	4871      	ldr	r0, [pc, #452]	; (8004268 <shell+0x9b4>)
 80040a2:	f008 fb0f 	bl	800c6c4 <puts>
 80040a6:	e214      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "paramconf_lecture") == 0)
 80040a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	496f      	ldr	r1, [pc, #444]	; (800426c <shell+0x9b8>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fc f8ad 	bl	8000210 <strcmp>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <shell+0x81e>
		{
			if(num_args==1)
 80040bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <shell+0x816>
			{
				paramConf_lecture();
 80040c4:	f7fe fe10 	bl	8002ce8 <paramConf_lecture>
 80040c8:	e203      	b.n	80044d2 <shell+0xc1e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_lecture\r\n");
 80040ca:	4869      	ldr	r0, [pc, #420]	; (8004270 <shell+0x9bc>)
 80040cc:	f008 fafa 	bl	800c6c4 <puts>
 80040d0:	e1ff      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "paramconf_modification") == 0)
 80040d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4966      	ldr	r1, [pc, #408]	; (8004274 <shell+0x9c0>)
 80040da:	4618      	mov	r0, r3
 80040dc:	f7fc f898 	bl	8000210 <strcmp>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f040 80ca 	bne.w	800427c <shell+0x9c8>
		{
			if(num_args==12)
 80040e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	f040 80ab 	bne.w	8004248 <shell+0x994>
			{
				paramConf_modification(
						atof(tab_args[1]), atof(tab_args[2]), atof(tab_args[3]),
 80040f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f007 fd92 	bl	800bc22 <atof>
 80040fe:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004102:	4610      	mov	r0, r2
 8004104:	4619      	mov	r1, r3
 8004106:	f7fc fd9f 	bl	8000c48 <__aeabi_d2f>
 800410a:	4604      	mov	r4, r0
						atof(tab_args[1]), atof(tab_args[2]), atof(tab_args[3]),
 800410c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	4618      	mov	r0, r3
 8004114:	f007 fd85 	bl	800bc22 <atof>
 8004118:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	f7fc fd92 	bl	8000c48 <__aeabi_d2f>
 8004124:	4605      	mov	r5, r0
						atof(tab_args[1]), atof(tab_args[2]), atof(tab_args[3]),
 8004126:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4618      	mov	r0, r3
 800412e:	f007 fd78 	bl	800bc22 <atof>
 8004132:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004136:	4610      	mov	r0, r2
 8004138:	4619      	mov	r1, r3
 800413a:	f7fc fd85 	bl	8000c48 <__aeabi_d2f>
 800413e:	4606      	mov	r6, r0
						atof(tab_args[4]), atof(tab_args[5]), atof(tab_args[6]),
 8004140:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	4618      	mov	r0, r3
 8004148:	f007 fd6b 	bl	800bc22 <atof>
 800414c:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004150:	4610      	mov	r0, r2
 8004152:	4619      	mov	r1, r3
 8004154:	f7fc fd78 	bl	8000c48 <__aeabi_d2f>
 8004158:	4680      	mov	r8, r0
						atof(tab_args[4]), atof(tab_args[5]), atof(tab_args[6]),
 800415a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4618      	mov	r0, r3
 8004162:	f007 fd5e 	bl	800bc22 <atof>
 8004166:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f7fc fd6b 	bl	8000c48 <__aeabi_d2f>
 8004172:	4681      	mov	r9, r0
						atof(tab_args[4]), atof(tab_args[5]), atof(tab_args[6]),
 8004174:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	4618      	mov	r0, r3
 800417c:	f007 fd51 	bl	800bc22 <atof>
 8004180:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	f7fc fd5e 	bl	8000c48 <__aeabi_d2f>
 800418c:	4682      	mov	sl, r0
						atof(tab_args[7]), atof(tab_args[8]), atof(tab_args[9]),
 800418e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	4618      	mov	r0, r3
 8004196:	f007 fd44 	bl	800bc22 <atof>
 800419a:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	f7fc fd51 	bl	8000c48 <__aeabi_d2f>
 80041a6:	4683      	mov	fp, r0
						atof(tab_args[7]), atof(tab_args[8]), atof(tab_args[9]),
 80041a8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f007 fd37 	bl	800bc22 <atof>
 80041b4:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7fc fd44 	bl	8000c48 <__aeabi_d2f>
 80041c0:	ee08 0a10 	vmov	s16, r0
						atof(tab_args[7]), atof(tab_args[8]), atof(tab_args[9]),
 80041c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	4618      	mov	r0, r3
 80041cc:	f007 fd29 	bl	800bc22 <atof>
 80041d0:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	f7fc fd36 	bl	8000c48 <__aeabi_d2f>
 80041dc:	ee08 0a90 	vmov	s17, r0
						atof(tab_args[10]), atof(tab_args[11]));
 80041e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	4618      	mov	r0, r3
 80041e8:	f007 fd1b 	bl	800bc22 <atof>
 80041ec:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80041f0:	4610      	mov	r0, r2
 80041f2:	4619      	mov	r1, r3
 80041f4:	f7fc fd28 	bl	8000c48 <__aeabi_d2f>
 80041f8:	ee09 0a10 	vmov	s18, r0
						atof(tab_args[10]), atof(tab_args[11]));
 80041fc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	4618      	mov	r0, r3
 8004204:	f007 fd0d 	bl	800bc22 <atof>
 8004208:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	f7fc fd1a 	bl	8000c48 <__aeabi_d2f>
 8004214:	4603      	mov	r3, r0
 8004216:	ee05 3a10 	vmov	s10, r3
 800421a:	eef0 4a49 	vmov.f32	s9, s18
 800421e:	eeb0 4a68 	vmov.f32	s8, s17
 8004222:	eef0 3a48 	vmov.f32	s7, s16
 8004226:	ee03 ba10 	vmov	s6, fp
 800422a:	ee02 aa90 	vmov	s5, sl
 800422e:	ee02 9a10 	vmov	s4, r9
 8004232:	ee01 8a90 	vmov	s3, r8
 8004236:	ee01 6a10 	vmov	s2, r6
 800423a:	ee00 5a90 	vmov	s1, r5
 800423e:	ee00 4a10 	vmov	s0, r4
 8004242:	f7fe fdd1 	bl	8002de8 <paramConf_modification>
 8004246:	e144      	b.n	80044d2 <shell+0xc1e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_modification <N parametres>\r\n");
 8004248:	480b      	ldr	r0, [pc, #44]	; (8004278 <shell+0x9c4>)
 800424a:	f008 fa3b 	bl	800c6c4 <puts>
 800424e:	e140      	b.n	80044d2 <shell+0xc1e>
 8004250:	08011648 	.word	0x08011648
 8004254:	08011654 	.word	0x08011654
 8004258:	08011698 	.word	0x08011698
 800425c:	080116c8 	.word	0x080116c8
 8004260:	080116dc 	.word	0x080116dc
 8004264:	08011714 	.word	0x08011714
 8004268:	0801172c 	.word	0x0801172c
 800426c:	08011768 	.word	0x08011768
 8004270:	0801177c 	.word	0x0801177c
 8004274:	080117b4 	.word	0x080117b4
 8004278:	080117cc 	.word	0x080117cc
		} else
		if(strcmp(tab_args[0], "telemetrie") == 0)
 800427c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	499b      	ldr	r1, [pc, #620]	; (80044f0 <shell+0xc3c>)
 8004284:	4618      	mov	r0, r3
 8004286:	f7fb ffc3 	bl	8000210 <strcmp>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d178      	bne.n	8004382 <shell+0xace>
		{
			if(num_args==1)
 8004290:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d170      	bne.n	800437a <shell+0xac6>
			{
				pTeleElement = telemetrie_pt_lecture_en_cours();
 8004298:	f001 f936 	bl	8005508 <telemetrie_pt_lecture_en_cours>
 800429c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
				do {
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
							pTeleElement->consigne_vitesse, pTeleElement->consigne_direction,
 80042a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042a4:	681b      	ldr	r3, [r3, #0]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc f97e 	bl	80005a8 <__aeabi_f2d>
 80042ac:	e9c7 0106 	strd	r0, r1, [r7, #24]
							pTeleElement->consigne_vitesse, pTeleElement->consigne_direction,
 80042b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042b4:	685b      	ldr	r3, [r3, #4]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fc f976 	bl	80005a8 <__aeabi_f2d>
 80042bc:	4680      	mov	r8, r0
 80042be:	4689      	mov	r9, r1
							pTeleElement->mesure_vitesse, pTeleElement->heading,
 80042c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042c4:	689b      	ldr	r3, [r3, #8]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fc f96e 	bl	80005a8 <__aeabi_f2d>
 80042cc:	4682      	mov	sl, r0
 80042ce:	468b      	mov	fp, r1
							pTeleElement->mesure_vitesse, pTeleElement->heading,
 80042d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc f966 	bl	80005a8 <__aeabi_f2d>
 80042dc:	4605      	mov	r5, r0
 80042de:	460e      	mov	r6, r1
							pTeleElement->gyro_dps, pTeleElement->mesure_distance,
 80042e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc f95e 	bl	80005a8 <__aeabi_f2d>
 80042ec:	e9c7 0104 	strd	r0, r1, [r7, #16]
							pTeleElement->gyro_dps, pTeleElement->mesure_distance,
 80042f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80042f4:	68db      	ldr	r3, [r3, #12]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fc f956 	bl	80005a8 <__aeabi_f2d>
							(int)pTeleElement->lidar_droit, (int)pTeleElement->lidar_gauche,
 80042fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004308:	695c      	ldr	r4, [r3, #20]
 800430a:	60bc      	str	r4, [r7, #8]
							(int)pTeleElement->lidar_avant, (int)pTeleElement->lidar_haut,
 800430c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004318:	69da      	ldr	r2, [r3, #28]
							pTeleElement->etat_automate_principal, pTeleElement->etat_automate_auto);
 800431a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800431e:	f893 3020 	ldrb.w	r3, [r3, #32]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 8004322:	461c      	mov	r4, r3
							pTeleElement->etat_automate_principal, pTeleElement->etat_automate_auto);
 8004324:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004328:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 800432c:	930f      	str	r3, [sp, #60]	; 0x3c
 800432e:	940e      	str	r4, [sp, #56]	; 0x38
 8004330:	920d      	str	r2, [sp, #52]	; 0x34
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	920c      	str	r2, [sp, #48]	; 0x30
 8004336:	68bc      	ldr	r4, [r7, #8]
 8004338:	940b      	str	r4, [sp, #44]	; 0x2c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	930a      	str	r3, [sp, #40]	; 0x28
 800433e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004342:	ed97 7b04 	vldr	d7, [r7, #16]
 8004346:	ed8d 7b06 	vstr	d7, [sp, #24]
 800434a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800434e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004352:	e9cd 8900 	strd	r8, r9, [sp]
 8004356:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800435a:	4866      	ldr	r0, [pc, #408]	; (80044f4 <shell+0xc40>)
 800435c:	f008 f916 	bl	800c58c <iprintf>

					pTeleElement = telemetrie_pt_lecture_suivant(&erreur);
 8004360:	f107 0320 	add.w	r3, r7, #32
 8004364:	4618      	mov	r0, r3
 8004366:	f001 f8e5 	bl	8005534 <telemetrie_pt_lecture_suivant>
 800436a:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
				} while(erreur == 0);
 800436e:	f107 0320 	add.w	r3, r7, #32
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d093      	beq.n	80042a0 <shell+0x9ec>
 8004378:	e0ab      	b.n	80044d2 <shell+0xc1e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : telemetrie\r\n");
 800437a:	485f      	ldr	r0, [pc, #380]	; (80044f8 <shell+0xc44>)
 800437c:	f008 f9a2 	bl	800c6c4 <puts>
 8004380:	e0a7      	b.n	80044d2 <shell+0xc1e>
		} else
		if(strcmp(tab_args[0], "gyro_heading_get") == 0)
 8004382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	495c      	ldr	r1, [pc, #368]	; (80044fc <shell+0xc48>)
 800438a:	4618      	mov	r0, r3
 800438c:	f7fb ff40 	bl	8000210 <strcmp>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d136      	bne.n	8004404 <shell+0xb50>
		{
			if(num_args==1)
 8004396:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800439a:	2b01      	cmp	r3, #1
 800439c:	d12e      	bne.n	80043fc <shell+0xb48>
			{
				int nb_lectures;
				printf("Iteration; heading; dps\r\n");
 800439e:	4858      	ldr	r0, [pc, #352]	; (8004500 <shell+0xc4c>)
 80043a0:	f008 f990 	bl	800c6c4 <puts>
				nb_lectures = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				do {
					nb_lectures++;
 80043aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80043ae:	3301      	adds	r3, #1
 80043b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

					printf("%d; %f; %f\r\n", nb_lectures, gyro_get_heading(), gyro_get_dps());
 80043b4:	f7fd f99a 	bl	80016ec <gyro_get_heading>
 80043b8:	ee10 3a10 	vmov	r3, s0
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc f8f3 	bl	80005a8 <__aeabi_f2d>
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1
 80043c6:	f7fd f971 	bl	80016ac <gyro_get_dps>
 80043ca:	ee10 3a10 	vmov	r3, s0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f8ea 	bl	80005a8 <__aeabi_f2d>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	e9cd 2300 	strd	r2, r3, [sp]
 80043dc:	4622      	mov	r2, r4
 80043de:	462b      	mov	r3, r5
 80043e0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80043e4:	4847      	ldr	r0, [pc, #284]	; (8004504 <shell+0xc50>)
 80043e6:	f008 f8d1 	bl	800c58c <iprintf>

					HAL_Delay(10);
 80043ea:	200a      	movs	r0, #10
 80043ec:	f001 fd4a 	bl	8005e84 <HAL_Delay>
					// Acquisition sur 10 s
				} while(nb_lectures<1000);
 80043f0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80043f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f8:	dbd7      	blt.n	80043aa <shell+0xaf6>
 80043fa:	e06a      	b.n	80044d2 <shell+0xc1e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : gyro_heading_get \r\n");
 80043fc:	4842      	ldr	r0, [pc, #264]	; (8004508 <shell+0xc54>)
 80043fe:	f008 f961 	bl	800c6c4 <puts>
 8004402:	e066      	b.n	80044d2 <shell+0xc1e>
		} else
        if(strcmp(tab_args[0], "reset") == 0)
 8004404:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4940      	ldr	r1, [pc, #256]	; (800450c <shell+0xc58>)
 800440c:	4618      	mov	r0, r3
 800440e:	f7fb feff 	bl	8000210 <strcmp>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <shell+0xb68>
        {
            // Reset
            NVIC_SystemReset();
 8004418:	f7ff f90c 	bl	8003634 <__NVIC_SystemReset>
        } else
		if(strcmp(tab_args[0], "quit") == 0)
 800441c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	493b      	ldr	r1, [pc, #236]	; (8004510 <shell+0xc5c>)
 8004424:	4618      	mov	r0, r3
 8004426:	f7fb fef3 	bl	8000210 <strcmp>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <shell+0xb84>
		{
			// Quitter le shell
			quitter = 1;
 8004430:	2301      	movs	r3, #1
 8004432:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004436:	e04c      	b.n	80044d2 <shell+0xc1e>
		} else
        if(strcmp(tab_args[0], "help") == 0)
 8004438:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4935      	ldr	r1, [pc, #212]	; (8004514 <shell+0xc60>)
 8004440:	4618      	mov	r0, r3
 8004442:	f7fb fee5 	bl	8000210 <strcmp>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d13f      	bne.n	80044cc <shell+0xc18>
        {
            // Help
            printf("Liste des commandes :\r\n");
 800444c:	4832      	ldr	r0, [pc, #200]	; (8004518 <shell+0xc64>)
 800444e:	f008 f939 	bl	800c6c4 <puts>
            printf("- hw_led <on/off> <led0/led1/led2/led3>\r\n");
 8004452:	4832      	ldr	r0, [pc, #200]	; (800451c <shell+0xc68>)
 8004454:	f008 f936 	bl	800c6c4 <puts>
            printf("         permet d'allumer ou d'eteindre l'une des 4 leds.\r\n");
 8004458:	4831      	ldr	r0, [pc, #196]	; (8004520 <shell+0xc6c>)
 800445a:	f008 f933 	bl	800c6c4 <puts>
            printf("- hw_buttons\r\n");
 800445e:	4831      	ldr	r0, [pc, #196]	; (8004524 <shell+0xc70>)
 8004460:	f008 f930 	bl	800c6c4 <puts>
            printf("         permet d'afficher l'etat des boutons.\r\n");
 8004464:	4830      	ldr	r0, [pc, #192]	; (8004528 <shell+0xc74>)
 8004466:	f008 f92d 	bl	800c6c4 <puts>
//            printf("         permet de charger les parametres depuis la Flash Interne.\r\n");
//            printf("- params_show\r\n");
//            printf("         permet d'afficher les parametres courants\r\n");
//            printf("- params_modify\r\n");
//            printf("         permet de modifier les parametres courants\r\n");
            printf("- radio_get <nb_lectures=1>\r\n");
 800446a:	4830      	ldr	r0, [pc, #192]	; (800452c <shell+0xc78>)
 800446c:	f008 f92a 	bl	800c6c4 <puts>
            printf("         permet de lire les commandes provenant de la radio.\r\n");
 8004470:	482f      	ldr	r0, [pc, #188]	; (8004530 <shell+0xc7c>)
 8004472:	f008 f927 	bl	800c6c4 <puts>
            printf("- vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 8004476:	482f      	ldr	r0, [pc, #188]	; (8004534 <shell+0xc80>)
 8004478:	f008 f924 	bl	800c6c4 <puts>
            printf("         permet de commander la vitesse du vehicule.\r\n");
 800447c:	482e      	ldr	r0, [pc, #184]	; (8004538 <shell+0xc84>)
 800447e:	f008 f921 	bl	800c6c4 <puts>
            printf("- vehicule_dir_set <-26.0 ... 26.0>\r\n");
 8004482:	482e      	ldr	r0, [pc, #184]	; (800453c <shell+0xc88>)
 8004484:	f008 f91e 	bl	800c6c4 <puts>
            printf("         permet de commander la direction du vehicule.\r\n");
 8004488:	482d      	ldr	r0, [pc, #180]	; (8004540 <shell+0xc8c>)
 800448a:	f008 f91b 	bl	800c6c4 <puts>
            printf("- vehicule_speed_get\r\n");
 800448e:	482d      	ldr	r0, [pc, #180]	; (8004544 <shell+0xc90>)
 8004490:	f008 f918 	bl	800c6c4 <puts>
            printf("         permet de lire les capteurs de vitesses pour la calibration du capteur BEAST.\r\n");
 8004494:	482c      	ldr	r0, [pc, #176]	; (8004548 <shell+0xc94>)
 8004496:	f008 f915 	bl	800c6c4 <puts>
            printf("- gyro_heading\r\n");
 800449a:	482c      	ldr	r0, [pc, #176]	; (800454c <shell+0xc98>)
 800449c:	f008 f912 	bl	800c6c4 <puts>
            printf("         permet de lire le cap en boucle.\r\n");
 80044a0:	482b      	ldr	r0, [pc, #172]	; (8004550 <shell+0xc9c>)
 80044a2:	f008 f90f 	bl	800c6c4 <puts>
            printf("- reset\r\n");
 80044a6:	482b      	ldr	r0, [pc, #172]	; (8004554 <shell+0xca0>)
 80044a8:	f008 f90c 	bl	800c6c4 <puts>
            printf("         permet de reseter le robot.\r\n");
 80044ac:	482a      	ldr	r0, [pc, #168]	; (8004558 <shell+0xca4>)
 80044ae:	f008 f909 	bl	800c6c4 <puts>
            printf("- quit\r\n");
 80044b2:	482a      	ldr	r0, [pc, #168]	; (800455c <shell+0xca8>)
 80044b4:	f008 f906 	bl	800c6c4 <puts>
            printf("         permet de sortir du shell.\r\n");
 80044b8:	4829      	ldr	r0, [pc, #164]	; (8004560 <shell+0xcac>)
 80044ba:	f008 f903 	bl	800c6c4 <puts>
            printf("- version\r\n");
 80044be:	4829      	ldr	r0, [pc, #164]	; (8004564 <shell+0xcb0>)
 80044c0:	f008 f900 	bl	800c6c4 <puts>
            printf("         permet d'obtenir la version logicielle.\r\n");
 80044c4:	4828      	ldr	r0, [pc, #160]	; (8004568 <shell+0xcb4>)
 80044c6:	f008 f8fd 	bl	800c6c4 <puts>
 80044ca:	e002      	b.n	80044d2 <shell+0xc1e>
        } else
        {
            printf("Commande inconnue !\r\n");
 80044cc:	4827      	ldr	r0, [pc, #156]	; (800456c <shell+0xcb8>)
 80044ce:	f008 f8f9 	bl	800c6c4 <puts>
        }

    } while(quitter == 0);
 80044d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f43f aa12 	beq.w	8003900 <shell+0x4c>
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 80044e4:	46bd      	mov	sp, r7
 80044e6:	ecbd 8b04 	vpop	{d8-d9}
 80044ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ee:	bf00      	nop
 80044f0:	08011818 	.word	0x08011818
 80044f4:	08011824 	.word	0x08011824
 80044f8:	0801184c 	.word	0x0801184c
 80044fc:	0801187c 	.word	0x0801187c
 8004500:	08011890 	.word	0x08011890
 8004504:	080118ac 	.word	0x080118ac
 8004508:	080118bc 	.word	0x080118bc
 800450c:	080118f4 	.word	0x080118f4
 8004510:	080118fc 	.word	0x080118fc
 8004514:	08011904 	.word	0x08011904
 8004518:	0801190c 	.word	0x0801190c
 800451c:	08011924 	.word	0x08011924
 8004520:	08011950 	.word	0x08011950
 8004524:	0801198c 	.word	0x0801198c
 8004528:	0801199c 	.word	0x0801199c
 800452c:	080119cc 	.word	0x080119cc
 8004530:	080119ec 	.word	0x080119ec
 8004534:	08011a2c 	.word	0x08011a2c
 8004538:	08011a58 	.word	0x08011a58
 800453c:	08011a90 	.word	0x08011a90
 8004540:	08011ab8 	.word	0x08011ab8
 8004544:	08011af0 	.word	0x08011af0
 8004548:	08011b08 	.word	0x08011b08
 800454c:	08011b60 	.word	0x08011b60
 8004550:	08011b70 	.word	0x08011b70
 8004554:	08011b9c 	.word	0x08011b9c
 8004558:	08011ba8 	.word	0x08011ba8
 800455c:	08011bd0 	.word	0x08011bd0
 8004560:	08011bd8 	.word	0x08011bd8
 8004564:	08011c00 	.word	0x08011c00
 8004568:	08011c0c 	.word	0x08011c0c
 800456c:	08011c40 	.word	0x08011c40

08004570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <HAL_MspInit+0x44>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	4a0e      	ldr	r2, [pc, #56]	; (80045b4 <HAL_MspInit+0x44>)
 800457c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004580:	6413      	str	r3, [r2, #64]	; 0x40
 8004582:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <HAL_MspInit+0x44>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800458e:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <HAL_MspInit+0x44>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <HAL_MspInit+0x44>)
 8004594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004598:	6453      	str	r3, [r2, #68]	; 0x44
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_MspInit+0x44>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08e      	sub	sp, #56	; 0x38
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a4b      	ldr	r2, [pc, #300]	; (8004704 <HAL_ADC_MspInit+0x14c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d13c      	bne.n	8004654 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045da:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	4a4a      	ldr	r2, [pc, #296]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	6453      	str	r3, [r2, #68]	; 0x44
 80045e6:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	623b      	str	r3, [r7, #32]
 80045f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045f2:	4b45      	ldr	r3, [pc, #276]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4a44      	ldr	r2, [pc, #272]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6313      	str	r3, [r2, #48]	; 0x30
 80045fe:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_ADC_MspInit+0x150>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a3e      	ldr	r2, [pc, #248]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b3c      	ldr	r3, [pc, #240]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	69bb      	ldr	r3, [r7, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = qtr_ch8_Pin|qtr_ch7_Pin|qtr_ch6_Pin|qtr_ch5_Pin
 8004622:	233f      	movs	r3, #63	; 0x3f
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
                          |qtr_ch4_Pin|qtr_ch3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004626:	2303      	movs	r3, #3
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800462e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004632:	4619      	mov	r1, r3
 8004634:	4835      	ldr	r0, [pc, #212]	; (800470c <HAL_ADC_MspInit+0x154>)
 8004636:	f002 fbed 	bl	8006e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = qtr_ch2_Pin|qtr_ch1_Pin;
 800463a:	2303      	movs	r3, #3
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800463e:	2303      	movs	r3, #3
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004642:	2300      	movs	r3, #0
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464a:	4619      	mov	r1, r3
 800464c:	4830      	ldr	r0, [pc, #192]	; (8004710 <HAL_ADC_MspInit+0x158>)
 800464e:	f002 fbe1 	bl	8006e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004652:	e053      	b.n	80046fc <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2e      	ldr	r2, [pc, #184]	; (8004714 <HAL_ADC_MspInit+0x15c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d124      	bne.n	80046a8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800465e:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	4a29      	ldr	r2, [pc, #164]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004668:	6453      	str	r3, [r2, #68]	; 0x44
 800466a:	4b27      	ldr	r3, [pc, #156]	; (8004708 <HAL_ADC_MspInit+0x150>)
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004676:	4b24      	ldr	r3, [pc, #144]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a23      	ldr	r2, [pc, #140]	; (8004708 <HAL_ADC_MspInit+0x150>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_ADC_MspInit+0x150>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Vbatt_Pin|Vesc_Pin;
 800468e:	2390      	movs	r3, #144	; 0x90
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004692:	2303      	movs	r3, #3
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800469e:	4619      	mov	r1, r3
 80046a0:	481d      	ldr	r0, [pc, #116]	; (8004718 <HAL_ADC_MspInit+0x160>)
 80046a2:	f002 fbb7 	bl	8006e14 <HAL_GPIO_Init>
}
 80046a6:	e029      	b.n	80046fc <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC3)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_ADC_MspInit+0x164>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d124      	bne.n	80046fc <HAL_ADC_MspInit+0x144>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80046b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046bc:	6453      	str	r3, [r2, #68]	; 0x44
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a0e      	ldr	r2, [pc, #56]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80046d0:	f043 0320 	orr.w	r3, r3, #32
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <HAL_ADC_MspInit+0x150>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = qtr_ch16_Pin|qtr_ch15_Pin|qtr_ch14_Pin|qtr_ch13_Pin
 80046e2:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046e8:	2303      	movs	r3, #3
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f4:	4619      	mov	r1, r3
 80046f6:	480a      	ldr	r0, [pc, #40]	; (8004720 <HAL_ADC_MspInit+0x168>)
 80046f8:	f002 fb8c 	bl	8006e14 <HAL_GPIO_Init>
}
 80046fc:	bf00      	nop
 80046fe:	3738      	adds	r7, #56	; 0x38
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40012000 	.word	0x40012000
 8004708:	40023800 	.word	0x40023800
 800470c:	40020800 	.word	0x40020800
 8004710:	40020400 	.word	0x40020400
 8004714:	40012100 	.word	0x40012100
 8004718:	40020000 	.word	0x40020000
 800471c:	40012200 	.word	0x40012200
 8004720:	40021400 	.word	0x40021400

08004724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	; 0x28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_I2C_MspInit+0x7c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d127      	bne.n	8004796 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004746:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <HAL_I2C_MspInit+0x80>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_I2C_MspInit+0x80>)
 800474c:	f043 0302 	orr.w	r3, r3, #2
 8004750:	6313      	str	r3, [r2, #48]	; 0x30
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_I2C_MspInit+0x80>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800475e:	23c0      	movs	r3, #192	; 0xc0
 8004760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004762:	2312      	movs	r3, #18
 8004764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476a:	2303      	movs	r3, #3
 800476c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800476e:	2304      	movs	r3, #4
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	4619      	mov	r1, r3
 8004778:	480b      	ldr	r0, [pc, #44]	; (80047a8 <HAL_I2C_MspInit+0x84>)
 800477a:	f002 fb4b 	bl	8006e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800477e:	4b09      	ldr	r3, [pc, #36]	; (80047a4 <HAL_I2C_MspInit+0x80>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_I2C_MspInit+0x80>)
 8004784:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_I2C_MspInit+0x80>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004796:	bf00      	nop
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40005400 	.word	0x40005400
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020400 	.word	0x40020400

080047ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b092      	sub	sp, #72	; 0x48
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	605a      	str	r2, [r3, #4]
 80047be:	609a      	str	r2, [r3, #8]
 80047c0:	60da      	str	r2, [r3, #12]
 80047c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a83      	ldr	r2, [pc, #524]	; (80049d8 <HAL_TIM_Base_MspInit+0x22c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d10c      	bne.n	80047e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ce:	4b83      	ldr	r3, [pc, #524]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	4a82      	ldr	r2, [pc, #520]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80047d4:	f043 0301 	orr.w	r3, r3, #1
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	4b80      	ldr	r3, [pc, #512]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80047e6:	e0f2      	b.n	80049ce <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d130      	bne.n	8004854 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047f2:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	4a79      	ldr	r2, [pc, #484]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6413      	str	r3, [r2, #64]	; 0x40
 80047fe:	4b77      	ldr	r3, [pc, #476]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800480a:	4b74      	ldr	r3, [pc, #464]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	4a73      	ldr	r2, [pc, #460]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004810:	f043 0301 	orr.w	r3, r3, #1
 8004814:	6313      	str	r3, [r2, #48]	; 0x30
 8004816:	4b71      	ldr	r3, [pc, #452]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = SpeedIn_Pin;
 8004822:	2320      	movs	r3, #32
 8004824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004826:	2302      	movs	r3, #2
 8004828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482a:	2300      	movs	r3, #0
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482e:	2300      	movs	r3, #0
 8004830:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004832:	2301      	movs	r3, #1
 8004834:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedIn_GPIO_Port, &GPIO_InitStruct);
 8004836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800483a:	4619      	mov	r1, r3
 800483c:	4868      	ldr	r0, [pc, #416]	; (80049e0 <HAL_TIM_Base_MspInit+0x234>)
 800483e:	f002 fae9 	bl	8006e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	201c      	movs	r0, #28
 8004848:	f001 fea3 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800484c:	201c      	movs	r0, #28
 800484e:	f001 febc 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 8004852:	e0bc      	b.n	80049ce <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a62      	ldr	r2, [pc, #392]	; (80049e4 <HAL_TIM_Base_MspInit+0x238>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d130      	bne.n	80048c0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800485e:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a5e      	ldr	r2, [pc, #376]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004864:	f043 0302 	orr.w	r3, r3, #2
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b5c      	ldr	r3, [pc, #368]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004876:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	4a58      	ldr	r2, [pc, #352]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800487c:	f043 0301 	orr.w	r3, r3, #1
 8004880:	6313      	str	r3, [r2, #48]	; 0x30
 8004882:	4b56      	ldr	r3, [pc, #344]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = DirIn_Pin;
 800488e:	2340      	movs	r3, #64	; 0x40
 8004890:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800489e:	2302      	movs	r3, #2
 80048a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DirIn_GPIO_Port, &GPIO_InitStruct);
 80048a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048a6:	4619      	mov	r1, r3
 80048a8:	484d      	ldr	r0, [pc, #308]	; (80049e0 <HAL_TIM_Base_MspInit+0x234>)
 80048aa:	f002 fab3 	bl	8006e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2100      	movs	r1, #0
 80048b2:	201d      	movs	r0, #29
 80048b4:	f001 fe6d 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80048b8:	201d      	movs	r0, #29
 80048ba:	f001 fe86 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 80048be:	e086      	b.n	80049ce <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a48      	ldr	r2, [pc, #288]	; (80049e8 <HAL_TIM_Base_MspInit+0x23c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d131      	bne.n	800492e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80048ca:	4b44      	ldr	r3, [pc, #272]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4a43      	ldr	r2, [pc, #268]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80048d0:	f043 0304 	orr.w	r3, r3, #4
 80048d4:	6413      	str	r3, [r2, #64]	; 0x40
 80048d6:	4b41      	ldr	r3, [pc, #260]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048e2:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80048e8:	f043 0308 	orr.w	r3, r3, #8
 80048ec:	6313      	str	r3, [r2, #48]	; 0x30
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SpareIn_Pin;
 80048fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048fe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004900:	2302      	movs	r3, #2
 8004902:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004904:	2301      	movs	r3, #1
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	2300      	movs	r3, #0
 800490a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800490c:	2302      	movs	r3, #2
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpareIn_GPIO_Port, &GPIO_InitStruct);
 8004910:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004914:	4619      	mov	r1, r3
 8004916:	4835      	ldr	r0, [pc, #212]	; (80049ec <HAL_TIM_Base_MspInit+0x240>)
 8004918:	f002 fa7c 	bl	8006e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800491c:	2200      	movs	r2, #0
 800491e:	2100      	movs	r1, #0
 8004920:	201e      	movs	r0, #30
 8004922:	f001 fe36 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004926:	201e      	movs	r0, #30
 8004928:	f001 fe4f 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 800492c:	e04f      	b.n	80049ce <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a2f      	ldr	r2, [pc, #188]	; (80049f0 <HAL_TIM_Base_MspInit+0x244>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d114      	bne.n	8004962 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004938:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493c:	4a27      	ldr	r2, [pc, #156]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800493e:	f043 0302 	orr.w	r3, r3, #2
 8004942:	6453      	str	r3, [r2, #68]	; 0x44
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004950:	2200      	movs	r2, #0
 8004952:	2100      	movs	r1, #0
 8004954:	202b      	movs	r0, #43	; 0x2b
 8004956:	f001 fe1c 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800495a:	202b      	movs	r0, #43	; 0x2b
 800495c:	f001 fe35 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 8004960:	e035      	b.n	80049ce <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM12)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a23      	ldr	r2, [pc, #140]	; (80049f4 <HAL_TIM_Base_MspInit+0x248>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d130      	bne.n	80049ce <HAL_TIM_Base_MspInit+0x222>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004976:	6413      	str	r3, [r2, #64]	; 0x40
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	613b      	str	r3, [r7, #16]
 8004982:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004988:	4a14      	ldr	r2, [pc, #80]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 800498a:	f043 0302 	orr.w	r3, r3, #2
 800498e:	6313      	str	r3, [r2, #48]	; 0x30
 8004990:	4b12      	ldr	r3, [pc, #72]	; (80049dc <HAL_TIM_Base_MspInit+0x230>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SpeedSensor_Pin;
 800499c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a2:	2302      	movs	r3, #2
 80049a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049aa:	2300      	movs	r3, #0
 80049ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80049ae:	2309      	movs	r3, #9
 80049b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedSensor_GPIO_Port, &GPIO_InitStruct);
 80049b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049b6:	4619      	mov	r1, r3
 80049b8:	480f      	ldr	r0, [pc, #60]	; (80049f8 <HAL_TIM_Base_MspInit+0x24c>)
 80049ba:	f002 fa2b 	bl	8006e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80049be:	2200      	movs	r2, #0
 80049c0:	2100      	movs	r1, #0
 80049c2:	202b      	movs	r0, #43	; 0x2b
 80049c4:	f001 fde5 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80049c8:	202b      	movs	r0, #43	; 0x2b
 80049ca:	f001 fdfe 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 80049ce:	bf00      	nop
 80049d0:	3748      	adds	r7, #72	; 0x48
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40023800 	.word	0x40023800
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	40010400 	.word	0x40010400
 80049f4:	40001800 	.word	0x40001800
 80049f8:	40020400 	.word	0x40020400

080049fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f107 030c 	add.w	r3, r7, #12
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a11      	ldr	r2, [pc, #68]	; (8004a60 <HAL_TIM_MspPostInit+0x64>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d11c      	bne.n	8004a58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <HAL_TIM_MspPostInit+0x68>)
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <HAL_TIM_MspPostInit+0x68>)
 8004a24:	f043 0310 	orr.w	r3, r3, #16
 8004a28:	6313      	str	r3, [r2, #48]	; 0x30
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <HAL_TIM_MspPostInit+0x68>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SpeedOut_Pin|DirOut_Pin|SpareOut_Pin;
 8004a36:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8004a3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4619      	mov	r1, r3
 8004a52:	4805      	ldr	r0, [pc, #20]	; (8004a68 <HAL_TIM_MspPostInit+0x6c>)
 8004a54:	f002 f9de 	bl	8006e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004a58:	bf00      	nop
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b096      	sub	sp, #88	; 0x58
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	605a      	str	r2, [r3, #4]
 8004a7e:	609a      	str	r2, [r3, #8]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a71      	ldr	r2, [pc, #452]	; (8004c50 <HAL_UART_MspInit+0x1e4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d15e      	bne.n	8004b4c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004a8e:	4b71      	ldr	r3, [pc, #452]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a70      	ldr	r2, [pc, #448]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a98:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa6:	4b6b      	ldr	r3, [pc, #428]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	4a6a      	ldr	r2, [pc, #424]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab2:	4b68      	ldr	r3, [pc, #416]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = lid1_txd_Pin|lid1_rxd_Pin;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aca:	2303      	movs	r3, #3
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004ace:	2308      	movs	r3, #8
 8004ad0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	485f      	ldr	r0, [pc, #380]	; (8004c58 <HAL_UART_MspInit+0x1ec>)
 8004ada:	f002 f99b 	bl	8006e14 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004ade:	4b5f      	ldr	r3, [pc, #380]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004ae0:	4a5f      	ldr	r2, [pc, #380]	; (8004c60 <HAL_UART_MspInit+0x1f4>)
 8004ae2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004ae4:	4b5d      	ldr	r3, [pc, #372]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004aea:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aec:	4b5b      	ldr	r3, [pc, #364]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004af2:	4b5a      	ldr	r3, [pc, #360]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004af8:	4b58      	ldr	r3, [pc, #352]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004afe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b00:	4b56      	ldr	r3, [pc, #344]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b06:	4b55      	ldr	r3, [pc, #340]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004b0c:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b12:	4b52      	ldr	r3, [pc, #328]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b18:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004b1e:	484f      	ldr	r0, [pc, #316]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b20:	f001 fd6e 	bl	8006600 <HAL_DMA_Init>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8004b2a:	f7fe f8c9 	bl	8002cc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4a      	ldr	r2, [pc, #296]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b32:	671a      	str	r2, [r3, #112]	; 0x70
 8004b34:	4a49      	ldr	r2, [pc, #292]	; (8004c5c <HAL_UART_MspInit+0x1f0>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	2034      	movs	r0, #52	; 0x34
 8004b40:	f001 fd27 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004b44:	2034      	movs	r0, #52	; 0x34
 8004b46:	f001 fd40 	bl	80065ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b4a:	e231      	b.n	8004fb0 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==UART5)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a44      	ldr	r2, [pc, #272]	; (8004c64 <HAL_UART_MspInit+0x1f8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	f040 8090 	bne.w	8004c78 <HAL_UART_MspInit+0x20c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004b58:	4b3e      	ldr	r3, [pc, #248]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	4a3d      	ldr	r2, [pc, #244]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b62:	6413      	str	r3, [r2, #64]	; 0x40
 8004b64:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b70:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	4a37      	ldr	r2, [pc, #220]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b76:	f043 0304 	orr.w	r3, r3, #4
 8004b7a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7c:	4b35      	ldr	r3, [pc, #212]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b88:	4b32      	ldr	r3, [pc, #200]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4a31      	ldr	r2, [pc, #196]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b8e:	f043 0308 	orr.w	r3, r3, #8
 8004b92:	6313      	str	r3, [r2, #48]	; 0x30
 8004b94:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_UART_MspInit+0x1e8>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	f003 0308 	and.w	r3, r3, #8
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = lid5_txd_Pin;
 8004ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004baa:	2301      	movs	r3, #1
 8004bac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_txd_GPIO_Port, &GPIO_InitStruct);
 8004bb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bba:	4619      	mov	r1, r3
 8004bbc:	482a      	ldr	r0, [pc, #168]	; (8004c68 <HAL_UART_MspInit+0x1fc>)
 8004bbe:	f002 f929 	bl	8006e14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = lid5_rxd_Pin;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_rxd_GPIO_Port, &GPIO_InitStruct);
 8004bd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4823      	ldr	r0, [pc, #140]	; (8004c6c <HAL_UART_MspInit+0x200>)
 8004bde:	f002 f919 	bl	8006e14 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004be2:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <HAL_UART_MspInit+0x208>)
 8004be6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004be8:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bee:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bf0:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004bfc:	4b1c      	ldr	r3, [pc, #112]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c02:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c0a:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004c10:	4b17      	ldr	r3, [pc, #92]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c16:	4b16      	ldr	r3, [pc, #88]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c1c:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004c22:	4813      	ldr	r0, [pc, #76]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c24:	f001 fcec 	bl	8006600 <HAL_DMA_Init>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 8004c2e:	f7fe f847 	bl	8002cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c36:	671a      	str	r2, [r3, #112]	; 0x70
 8004c38:	4a0d      	ldr	r2, [pc, #52]	; (8004c70 <HAL_UART_MspInit+0x204>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	2035      	movs	r0, #53	; 0x35
 8004c44:	f001 fca5 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004c48:	2035      	movs	r0, #53	; 0x35
 8004c4a:	f001 fcbe 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 8004c4e:	e1af      	b.n	8004fb0 <HAL_UART_MspInit+0x544>
 8004c50:	40004c00 	.word	0x40004c00
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40020000 	.word	0x40020000
 8004c5c:	20000294 	.word	0x20000294
 8004c60:	40026040 	.word	0x40026040
 8004c64:	40005000 	.word	0x40005000
 8004c68:	40020800 	.word	0x40020800
 8004c6c:	40020c00 	.word	0x40020c00
 8004c70:	20000a54 	.word	0x20000a54
 8004c74:	40026010 	.word	0x40026010
  else if(huart->Instance==UART7)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a92      	ldr	r2, [pc, #584]	; (8004ec8 <HAL_UART_MspInit+0x45c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	f040 808e 	bne.w	8004da0 <HAL_UART_MspInit+0x334>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004c84:	4b91      	ldr	r3, [pc, #580]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	4a90      	ldr	r2, [pc, #576]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c90:	4b8e      	ldr	r3, [pc, #568]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c9c:	4b8b      	ldr	r3, [pc, #556]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	4a8a      	ldr	r2, [pc, #552]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004ca2:	f043 0310 	orr.w	r3, r3, #16
 8004ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca8:	4b88      	ldr	r3, [pc, #544]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = lid2_rxd_Pin|lid2_txd_Pin;
 8004cb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004cb8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cba:	2302      	movs	r3, #2
 8004cbc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004cce:	4619      	mov	r1, r3
 8004cd0:	487f      	ldr	r0, [pc, #508]	; (8004ed0 <HAL_UART_MspInit+0x464>)
 8004cd2:	f002 f89f 	bl	8006e14 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004cd8:	4a7f      	ldr	r2, [pc, #508]	; (8004ed8 <HAL_UART_MspInit+0x46c>)
 8004cda:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8004cdc:	4b7d      	ldr	r3, [pc, #500]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004cde:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004ce2:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ce4:	4b7b      	ldr	r3, [pc, #492]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cea:	4b7a      	ldr	r3, [pc, #488]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf0:	4b78      	ldr	r3, [pc, #480]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf6:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cf8:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cfe:	4b75      	ldr	r3, [pc, #468]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8004d04:	4b73      	ldr	r3, [pc, #460]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d0a:	4b72      	ldr	r3, [pc, #456]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d10:	4b70      	ldr	r3, [pc, #448]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8004d16:	486f      	ldr	r0, [pc, #444]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d18:	f001 fc72 	bl	8006600 <HAL_DMA_Init>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8004d22:	f7fd ffcd 	bl	8002cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a6a      	ldr	r2, [pc, #424]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d2a:	671a      	str	r2, [r3, #112]	; 0x70
 8004d2c:	4a69      	ldr	r2, [pc, #420]	; (8004ed4 <HAL_UART_MspInit+0x468>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart7_tx.Instance = DMA1_Stream1;
 8004d32:	4b6a      	ldr	r3, [pc, #424]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d34:	4a6a      	ldr	r2, [pc, #424]	; (8004ee0 <HAL_UART_MspInit+0x474>)
 8004d36:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Channel = DMA_CHANNEL_5;
 8004d38:	4b68      	ldr	r3, [pc, #416]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d3a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004d3e:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d40:	4b66      	ldr	r3, [pc, #408]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d46:	4b65      	ldr	r3, [pc, #404]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d4c:	4b63      	ldr	r3, [pc, #396]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d52:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d54:	4b61      	ldr	r3, [pc, #388]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d5a:	4b60      	ldr	r3, [pc, #384]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8004d60:	4b5e      	ldr	r3, [pc, #376]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d66:	4b5d      	ldr	r3, [pc, #372]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d6c:	4b5b      	ldr	r3, [pc, #364]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8004d72:	485a      	ldr	r0, [pc, #360]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d74:	f001 fc44 	bl	8006600 <HAL_DMA_Init>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_UART_MspInit+0x316>
      Error_Handler();
 8004d7e:	f7fd ff9f 	bl	8002cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a55      	ldr	r2, [pc, #340]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d86:	66da      	str	r2, [r3, #108]	; 0x6c
 8004d88:	4a54      	ldr	r2, [pc, #336]	; (8004edc <HAL_UART_MspInit+0x470>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2100      	movs	r1, #0
 8004d92:	2052      	movs	r0, #82	; 0x52
 8004d94:	f001 fbfd 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004d98:	2052      	movs	r0, #82	; 0x52
 8004d9a:	f001 fc16 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 8004d9e:	e107      	b.n	8004fb0 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==UART8)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a4f      	ldr	r2, [pc, #316]	; (8004ee4 <HAL_UART_MspInit+0x478>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d15e      	bne.n	8004e68 <HAL_UART_MspInit+0x3fc>
    __HAL_RCC_UART8_CLK_ENABLE();
 8004daa:	4b48      	ldr	r3, [pc, #288]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a47      	ldr	r2, [pc, #284]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004dc2:	4b42      	ldr	r3, [pc, #264]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a41      	ldr	r2, [pc, #260]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004dc8:	f043 0310 	orr.w	r3, r3, #16
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dce:	4b3f      	ldr	r3, [pc, #252]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = lid6_rxd_Pin|lid6_txd_Pin;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dde:	2302      	movs	r3, #2
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de2:	2301      	movs	r3, #1
 8004de4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de6:	2303      	movs	r3, #3
 8004de8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004dea:	2308      	movs	r3, #8
 8004dec:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004dee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004df2:	4619      	mov	r1, r3
 8004df4:	4836      	ldr	r0, [pc, #216]	; (8004ed0 <HAL_UART_MspInit+0x464>)
 8004df6:	f002 f80d 	bl	8006e14 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004dfc:	4a3b      	ldr	r2, [pc, #236]	; (8004eec <HAL_UART_MspInit+0x480>)
 8004dfe:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e02:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004e06:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e08:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e0e:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e14:	4b34      	ldr	r3, [pc, #208]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e1c:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e22:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e2e:	4b2e      	ldr	r3, [pc, #184]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e34:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8004e3a:	482b      	ldr	r0, [pc, #172]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e3c:	f001 fbe0 	bl	8006600 <HAL_DMA_Init>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_UART_MspInit+0x3de>
      Error_Handler();
 8004e46:	f7fd ff3b 	bl	8002cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a26      	ldr	r2, [pc, #152]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e4e:	671a      	str	r2, [r3, #112]	; 0x70
 8004e50:	4a25      	ldr	r2, [pc, #148]	; (8004ee8 <HAL_UART_MspInit+0x47c>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004e56:	2200      	movs	r2, #0
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2053      	movs	r0, #83	; 0x53
 8004e5c:	f001 fb99 	bl	8006592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004e60:	2053      	movs	r0, #83	; 0x53
 8004e62:	f001 fbb2 	bl	80065ca <HAL_NVIC_EnableIRQ>
}
 8004e66:	e0a3      	b.n	8004fb0 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==USART1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a20      	ldr	r2, [pc, #128]	; (8004ef0 <HAL_UART_MspInit+0x484>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d142      	bne.n	8004ef8 <HAL_UART_MspInit+0x48c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004e72:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004e78:	f043 0310 	orr.w	r3, r3, #16
 8004e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	f003 0310 	and.w	r3, r3, #16
 8004e86:	61fb      	str	r3, [r7, #28]
 8004e88:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8a:	4b10      	ldr	r3, [pc, #64]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a0f      	ldr	r2, [pc, #60]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <HAL_UART_MspInit+0x460>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = lid4_txd_Pin|lid4_rxd_Pin;
 8004ea2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004ea6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004eb4:	2307      	movs	r3, #7
 8004eb6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480d      	ldr	r0, [pc, #52]	; (8004ef4 <HAL_UART_MspInit+0x488>)
 8004ec0:	f001 ffa8 	bl	8006e14 <HAL_GPIO_Init>
}
 8004ec4:	e074      	b.n	8004fb0 <HAL_UART_MspInit+0x544>
 8004ec6:	bf00      	nop
 8004ec8:	40007800 	.word	0x40007800
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	200006a0 	.word	0x200006a0
 8004ed8:	40026058 	.word	0x40026058
 8004edc:	20000574 	.word	0x20000574
 8004ee0:	40026028 	.word	0x40026028
 8004ee4:	40007c00 	.word	0x40007c00
 8004ee8:	20000748 	.word	0x20000748
 8004eec:	400260a0 	.word	0x400260a0
 8004ef0:	40011000 	.word	0x40011000
 8004ef4:	40020000 	.word	0x40020000
  else if(huart->Instance==USART2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <HAL_UART_MspInit+0x54c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d128      	bne.n	8004f54 <HAL_UART_MspInit+0x4e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f02:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	4a2d      	ldr	r2, [pc, #180]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0e:	4b2b      	ldr	r3, [pc, #172]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f1a:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4a27      	ldr	r2, [pc, #156]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	6313      	str	r3, [r2, #48]	; 0x30
 8004f26:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = tele_txd_Pin|tele_rxd_Pin;
 8004f32:	230c      	movs	r3, #12
 8004f34:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f36:	2302      	movs	r3, #2
 8004f38:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f42:	2307      	movs	r3, #7
 8004f44:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	481c      	ldr	r0, [pc, #112]	; (8004fc0 <HAL_UART_MspInit+0x554>)
 8004f4e:	f001 ff61 	bl	8006e14 <HAL_GPIO_Init>
}
 8004f52:	e02d      	b.n	8004fb0 <HAL_UART_MspInit+0x544>
  else if(huart->Instance==USART3)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1a      	ldr	r2, [pc, #104]	; (8004fc4 <HAL_UART_MspInit+0x558>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d128      	bne.n	8004fb0 <HAL_UART_MspInit+0x544>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	4a10      	ldr	r2, [pc, #64]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f7c:	f043 0302 	orr.w	r3, r3, #2
 8004f80:	6313      	str	r3, [r2, #48]	; 0x30
 8004f82:	4b0e      	ldr	r3, [pc, #56]	; (8004fbc <HAL_UART_MspInit+0x550>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	60bb      	str	r3, [r7, #8]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = lid3_txd_Pin|lid3_rxd_Pin;
 8004f8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004f92:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f94:	2302      	movs	r3, #2
 8004f96:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004fa0:	2307      	movs	r3, #7
 8004fa2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4807      	ldr	r0, [pc, #28]	; (8004fc8 <HAL_UART_MspInit+0x55c>)
 8004fac:	f001 ff32 	bl	8006e14 <HAL_GPIO_Init>
}
 8004fb0:	bf00      	nop
 8004fb2:	3758      	adds	r7, #88	; 0x58
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	40020000 	.word	0x40020000
 8004fc4:	40004800 	.word	0x40004800
 8004fc8:	40020400 	.word	0x40020400

08004fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fd0:	e7fe      	b.n	8004fd0 <NMI_Handler+0x4>

08004fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fd6:	e7fe      	b.n	8004fd6 <HardFault_Handler+0x4>

08004fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fdc:	e7fe      	b.n	8004fdc <MemManage_Handler+0x4>

08004fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fe2:	e7fe      	b.n	8004fe2 <BusFault_Handler+0x4>

08004fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fe8:	e7fe      	b.n	8004fe8 <UsageFault_Handler+0x4>

08004fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005006:	b480      	push	{r7}
 8005008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005018:	f000 ff14 	bl	8005e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(gUpdateGyro == 1)
 800501c:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <SysTick_Handler+0x34>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10f      	bne.n	8005044 <SysTick_Handler+0x30>
  {
	  nb_tick++;
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <SysTick_Handler+0x38>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a08      	ldr	r2, [pc, #32]	; (800504c <SysTick_Handler+0x38>)
 800502c:	6013      	str	r3, [r2, #0]

	  // Update du gyro toutes les 20 ms.
	  // Pas besoin plus souvent car la fréquence de rafraichissement du gyro est de 54 Hz.
	  if(nb_tick>= 20)
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <SysTick_Handler+0x38>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b13      	cmp	r3, #19
 8005034:	dd06      	ble.n	8005044 <SysTick_Handler+0x30>
	  {
		  gyro_update(0.02);
 8005036:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005050 <SysTick_Handler+0x3c>
 800503a:	f7fc fad5 	bl	80015e8 <gyro_update>
		  nb_tick = 0;
 800503e:	4b03      	ldr	r3, [pc, #12]	; (800504c <SysTick_Handler+0x38>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	2000027c 	.word	0x2000027c
 800504c:	20000280 	.word	0x20000280
 8005050:	3ca3d70a 	.word	0x3ca3d70a

08005054 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005058:	4803      	ldr	r0, [pc, #12]	; (8005068 <DMA1_Stream0_IRQHandler+0x14>)
 800505a:	f001 fc71 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  tfminiplusIrq(MINILIDAR_DROIT);
 800505e:	2000      	movs	r0, #0
 8005060:	f000 fabc 	bl	80055dc <tfminiplusIrq>
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000a54 	.word	0x20000a54

0800506c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <DMA1_Stream1_IRQHandler+0x10>)
 8005072:	f001 fc65 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000574 	.word	0x20000574

08005080 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005084:	4803      	ldr	r0, [pc, #12]	; (8005094 <DMA1_Stream2_IRQHandler+0x14>)
 8005086:	f001 fc5b 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
  tfminiplusIrq(MINILIDAR_AVANT);
 800508a:	2003      	movs	r0, #3
 800508c:	f000 faa6 	bl	80055dc <tfminiplusIrq>
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005090:	bf00      	nop
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20000294 	.word	0x20000294

08005098 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800509c:	4803      	ldr	r0, [pc, #12]	; (80050ac <DMA1_Stream3_IRQHandler+0x14>)
 800509e:	f001 fc4f 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
  tfminiplusIrq(MINILIDAR_GAUCHE);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f000 fa9a 	bl	80055dc <tfminiplusIrq>
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80050a8:	bf00      	nop
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	200006a0 	.word	0x200006a0

080050b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80050b4:	4803      	ldr	r0, [pc, #12]	; (80050c4 <DMA1_Stream6_IRQHandler+0x14>)
 80050b6:	f001 fc43 	bl	8006940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
  tfminiplusIrq(MINILIDAR_HAUT);
 80050ba:	2002      	movs	r0, #2
 80050bc:	f000 fa8e 	bl	80055dc <tfminiplusIrq>
  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20000748 	.word	0x20000748

080050c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80050cc:	4802      	ldr	r0, [pc, #8]	; (80050d8 <TIM2_IRQHandler+0x10>)
 80050ce:	f004 f989 	bl	80093e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000984 	.word	0x20000984

080050dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80050e0:	4802      	ldr	r0, [pc, #8]	; (80050ec <TIM3_IRQHandler+0x10>)
 80050e2:	f004 f97f 	bl	80093e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80050e6:	bf00      	nop
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000528 	.word	0x20000528

080050f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80050f4:	4802      	ldr	r0, [pc, #8]	; (8005100 <TIM4_IRQHandler+0x10>)
 80050f6:	f004 f975 	bl	80093e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200003c4 	.word	0x200003c4

08005104 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005108:	4803      	ldr	r0, [pc, #12]	; (8005118 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800510a:	f004 f96b 	bl	80093e4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800510e:	4803      	ldr	r0, [pc, #12]	; (800511c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8005110:	f004 f968 	bl	80093e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005114:	bf00      	nop
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000378 	.word	0x20000378
 800511c:	20000ab4 	.word	0x20000ab4

08005120 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <UART4_IRQHandler+0x10>)
 8005126:	f005 fe25 	bl	800ad74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	20000900 	.word	0x20000900

08005134 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005138:	4802      	ldr	r0, [pc, #8]	; (8005144 <UART5_IRQHandler+0x10>)
 800513a:	f005 fe1b 	bl	800ad74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	200005d4 	.word	0x200005d4

08005148 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800514c:	4802      	ldr	r0, [pc, #8]	; (8005158 <UART7_IRQHandler+0x10>)
 800514e:	f005 fe11 	bl	800ad74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200002f4 	.word	0x200002f4

0800515c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8005160:	4802      	ldr	r0, [pc, #8]	; (800516c <UART8_IRQHandler+0x10>)
 8005162:	f005 fe07 	bl	800ad74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000087c 	.word	0x2000087c

08005170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
	return 1;
 8005174:	2301      	movs	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <_kill>:

int _kill(int pid, int sig)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800518a:	f006 fd51 	bl	800bc30 <__errno>
 800518e:	4603      	mov	r3, r0
 8005190:	2216      	movs	r2, #22
 8005192:	601a      	str	r2, [r3, #0]
	return -1;
 8005194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <_exit>:

void _exit (int status)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051a8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ffe7 	bl	8005180 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051b2:	e7fe      	b.n	80051b2 <_exit+0x12>

080051b4 <_read>:
}

// Modif Nicolas
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	*ptr = __io_getchar();
 80051c0:	f7fc fbc0 	bl	8001944 <__io_getchar>
 80051c4:	4603      	mov	r3, r0
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	701a      	strb	r2, [r3, #0]

	return 1;
 80051cc:	2301      	movs	r3, #1
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <_write>:
//
//return len;
//}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b086      	sub	sp, #24
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	e009      	b.n	80051fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	60ba      	str	r2, [r7, #8]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fc fb91 	bl	8001918 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	dbf1      	blt.n	80051e8 <_write+0x12>
	}
	return len;
 8005204:	687b      	ldr	r3, [r7, #4]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <_close>:

int _close(int file)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
	return -1;
 8005216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005236:	605a      	str	r2, [r3, #4]
	return 0;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <_isatty>:

int _isatty(int file)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	return 1;
 800524e:	2301      	movs	r3, #1
}
 8005250:	4618      	mov	r0, r3
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
	return 0;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
	...

08005278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005280:	4a14      	ldr	r2, [pc, #80]	; (80052d4 <_sbrk+0x5c>)
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <_sbrk+0x60>)
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <_sbrk+0x64>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005294:	4b11      	ldr	r3, [pc, #68]	; (80052dc <_sbrk+0x64>)
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <_sbrk+0x68>)
 8005298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <_sbrk+0x64>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4413      	add	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d207      	bcs.n	80052b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052a8:	f006 fcc2 	bl	800bc30 <__errno>
 80052ac:	4603      	mov	r3, r0
 80052ae:	220c      	movs	r2, #12
 80052b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	e009      	b.n	80052cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <_sbrk+0x64>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <_sbrk+0x64>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	4a05      	ldr	r2, [pc, #20]	; (80052dc <_sbrk+0x64>)
 80052c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052ca:	68fb      	ldr	r3, [r7, #12]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20010000 	.word	0x20010000
 80052d8:	00000400 	.word	0x00000400
 80052dc:	20000284 	.word	0x20000284
 80052e0:	20000d90 	.word	0x20000d90

080052e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <SystemInit+0x20>)
 80052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ee:	4a05      	ldr	r2, [pc, #20]	; (8005304 <SystemInit+0x20>)
 80052f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	e000ed00 	.word	0xe000ed00

08005308 <telemetrie_pt_enreg_en_cours>:
#define SRAM1_BUFFER __attribute__((section(".mem_telemetrie")))
st_telemetrie gTelemetrie SRAM1_BUFFER;

// Cette fonction renvoi le pointeur sur l'élément dans le tableau qui est en cours d'écriture
st_tele_element *telemetrie_pt_enreg_en_cours()
{
 8005308:	b480      	push	{r7}
 800530a:	af00      	add	r7, sp, #0

	return &(gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours]);
 800530c:	4a07      	ldr	r2, [pc, #28]	; (800532c <telemetrie_pt_enreg_en_cours+0x24>)
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <telemetrie_pt_enreg_en_cours+0x28>)
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	461a      	mov	r2, r3
 8005316:	4613      	mov	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	4413      	add	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4a03      	ldr	r2, [pc, #12]	; (800532c <telemetrie_pt_enreg_en_cours+0x24>)
 8005320:	4413      	add	r3, r2
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20010000 	.word	0x20010000
 8005330:	0003a980 	.word	0x0003a980

08005334 <telemetrie_pt_enreg_suivant>:

// Cette fonction passe à l'élément suivant et renvoi le pointeur sur l'élément dans le tableau qui est en cours d'écriture
// Cette fonction renvoi -1 si le tableau est plein
st_tele_element *telemetrie_pt_enreg_suivant(int *a_pErreur)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	uint16_t futur_index_enreg;

	*a_pErreur = 0;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]

	futur_index_enreg = gTelemetrie.index_enreg_en_cours + 1;
 8005342:	4a6e      	ldr	r2, [pc, #440]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005344:	4b6e      	ldr	r3, [pc, #440]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	3301      	adds	r3, #1
 800534c:	81fb      	strh	r3, [r7, #14]

	// Pour passer à l'élément suivant, il faut que l'index + 1 soit :

	// - le pointeur soit dans la taille du tableau sinon passage à 0.
	if(futur_index_enreg > TELE_TAILLE_BUFFER)
 800534e:	89fb      	ldrh	r3, [r7, #14]
 8005350:	f241 3288 	movw	r2, #5000	; 0x1388
 8005354:	4293      	cmp	r3, r2
 8005356:	d901      	bls.n	800535c <telemetrie_pt_enreg_suivant+0x28>
		futur_index_enreg = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	81fb      	strh	r3, [r7, #14]

	// - différent du pointeur de lecture (dans ce cas, le tableau est plein)
	if(futur_index_enreg == gTelemetrie.index_lecture_en_cours)
 800535c:	4a67      	ldr	r2, [pc, #412]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800535e:	4b69      	ldr	r3, [pc, #420]	; (8005504 <telemetrie_pt_enreg_suivant+0x1d0>)
 8005360:	4413      	add	r3, r2
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	89fa      	ldrh	r2, [r7, #14]
 8005366:	429a      	cmp	r2, r3
 8005368:	d104      	bne.n	8005374 <telemetrie_pt_enreg_suivant+0x40>
		*a_pErreur = -1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f04f 32ff 	mov.w	r2, #4294967295
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e004      	b.n	800537e <telemetrie_pt_enreg_suivant+0x4a>
	else
		gTelemetrie.index_enreg_en_cours = futur_index_enreg;
 8005374:	4a61      	ldr	r2, [pc, #388]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005376:	4b62      	ldr	r3, [pc, #392]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005378:	4413      	add	r3, r2
 800537a:	89fa      	ldrh	r2, [r7, #14]
 800537c:	801a      	strh	r2, [r3, #0]

	// Initialisation des valeurs
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].consigne_direction = 0.0;
 800537e:	4a5f      	ldr	r2, [pc, #380]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005380:	4b5f      	ldr	r3, [pc, #380]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005382:	4413      	add	r3, r2
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	4619      	mov	r1, r3
 8005388:	4a5c      	ldr	r2, [pc, #368]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800538a:	460b      	mov	r3, r1
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	440b      	add	r3, r1
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	4413      	add	r3, r2
 8005394:	3304      	adds	r3, #4
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].consigne_vitesse = 0.0;
 800539c:	4a57      	ldr	r2, [pc, #348]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800539e:	4b58      	ldr	r3, [pc, #352]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80053a0:	4413      	add	r3, r2
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	4a55      	ldr	r2, [pc, #340]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053a8:	460b      	mov	r3, r1
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	440b      	add	r3, r1
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	4413      	add	r3, r2
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].etat_automate_auto = 0;
 80053b8:	4a50      	ldr	r2, [pc, #320]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053ba:	4b51      	ldr	r3, [pc, #324]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80053bc:	4413      	add	r3, r2
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	4619      	mov	r1, r3
 80053c2:	4a4e      	ldr	r2, [pc, #312]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053c4:	460b      	mov	r3, r1
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	440b      	add	r3, r1
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	4413      	add	r3, r2
 80053ce:	3321      	adds	r3, #33	; 0x21
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].etat_automate_principal = 0;
 80053d4:	4a49      	ldr	r2, [pc, #292]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053d6:	4b4a      	ldr	r3, [pc, #296]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80053d8:	4413      	add	r3, r2
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	4619      	mov	r1, r3
 80053de:	4a47      	ldr	r2, [pc, #284]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053e0:	460b      	mov	r3, r1
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	440b      	add	r3, r1
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	4413      	add	r3, r2
 80053ea:	3320      	adds	r3, #32
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].gyro_dps = 0.0;
 80053f0:	4a42      	ldr	r2, [pc, #264]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053f2:	4b43      	ldr	r3, [pc, #268]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	4619      	mov	r1, r3
 80053fa:	4a40      	ldr	r2, [pc, #256]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80053fc:	460b      	mov	r3, r1
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	440b      	add	r3, r1
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	4413      	add	r3, r2
 8005406:	3328      	adds	r3, #40	; 0x28
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].heading = 0.0;
 800540e:	4a3b      	ldr	r2, [pc, #236]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005412:	4413      	add	r3, r2
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	4619      	mov	r1, r3
 8005418:	4a38      	ldr	r2, [pc, #224]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800541a:	460b      	mov	r3, r1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	440b      	add	r3, r1
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	4413      	add	r3, r2
 8005424:	3324      	adds	r3, #36	; 0x24
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].lidar_avant = 0;
 800542c:	4a33      	ldr	r2, [pc, #204]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800542e:	4b34      	ldr	r3, [pc, #208]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	4a31      	ldr	r2, [pc, #196]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005438:	460b      	mov	r3, r1
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	440b      	add	r3, r1
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	3318      	adds	r3, #24
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].lidar_droit = 0;
 8005448:	4a2c      	ldr	r2, [pc, #176]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800544a:	4b2d      	ldr	r3, [pc, #180]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	4619      	mov	r1, r3
 8005452:	4a2a      	ldr	r2, [pc, #168]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005454:	460b      	mov	r3, r1
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	440b      	add	r3, r1
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	4413      	add	r3, r2
 800545e:	3310      	adds	r3, #16
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].lidar_gauche = 0;
 8005464:	4a25      	ldr	r2, [pc, #148]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	4619      	mov	r1, r3
 800546e:	4a23      	ldr	r2, [pc, #140]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005470:	460b      	mov	r3, r1
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	440b      	add	r3, r1
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	3314      	adds	r3, #20
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].lidar_haut = 0;
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 8005484:	4413      	add	r3, r2
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800548c:	460b      	mov	r3, r1
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	440b      	add	r3, r1
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	4413      	add	r3, r2
 8005496:	331c      	adds	r3, #28
 8005498:	2200      	movs	r2, #0
 800549a:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].mesure_distance = 0.0;
 800549c:	4a17      	ldr	r2, [pc, #92]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 800549e:	4b18      	ldr	r3, [pc, #96]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80054a0:	4413      	add	r3, r2
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	4a15      	ldr	r2, [pc, #84]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80054a8:	460b      	mov	r3, r1
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	440b      	add	r3, r1
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	4413      	add	r3, r2
 80054b2:	330c      	adds	r3, #12
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
	gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours].mesure_vitesse = 0.0;
 80054ba:	4a10      	ldr	r2, [pc, #64]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80054bc:	4b10      	ldr	r3, [pc, #64]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80054be:	4413      	add	r3, r2
 80054c0:	881b      	ldrh	r3, [r3, #0]
 80054c2:	4619      	mov	r1, r3
 80054c4:	4a0d      	ldr	r2, [pc, #52]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80054c6:	460b      	mov	r3, r1
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	440b      	add	r3, r1
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4413      	add	r3, r2
 80054d0:	3308      	adds	r3, #8
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]

	return &(gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours]);
 80054d8:	4a08      	ldr	r2, [pc, #32]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <telemetrie_pt_enreg_suivant+0x1cc>)
 80054dc:	4413      	add	r3, r2
 80054de:	881b      	ldrh	r3, [r3, #0]
 80054e0:	461a      	mov	r2, r3
 80054e2:	4613      	mov	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	4413      	add	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	4a04      	ldr	r2, [pc, #16]	; (80054fc <telemetrie_pt_enreg_suivant+0x1c8>)
 80054ec:	4413      	add	r3, r2
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20010000 	.word	0x20010000
 8005500:	0003a980 	.word	0x0003a980
 8005504:	0003a982 	.word	0x0003a982

08005508 <telemetrie_pt_lecture_en_cours>:

st_tele_element *telemetrie_pt_lecture_en_cours()
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
	return &gTelemetrie.enregistrements[gTelemetrie.index_lecture_en_cours];
 800550c:	4a07      	ldr	r2, [pc, #28]	; (800552c <telemetrie_pt_lecture_en_cours+0x24>)
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <telemetrie_pt_lecture_en_cours+0x28>)
 8005510:	4413      	add	r3, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	4613      	mov	r3, r2
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4413      	add	r3, r2
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	4a03      	ldr	r2, [pc, #12]	; (800552c <telemetrie_pt_lecture_en_cours+0x24>)
 8005520:	4413      	add	r3, r2

}
 8005522:	4618      	mov	r0, r3
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	20010000 	.word	0x20010000
 8005530:	0003a982 	.word	0x0003a982

08005534 <telemetrie_pt_lecture_suivant>:

// Cette fonction donne le pointeur suivant sur l'élément à lire, sauf si le tableau est vide
st_tele_element *telemetrie_pt_lecture_suivant(int *a_pErreur)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	uint16_t futur_index_lecture;

	*a_pErreur = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]

	futur_index_lecture = gTelemetrie.index_lecture_en_cours + 1;
 8005542:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <telemetrie_pt_lecture_suivant+0x6c>)
 8005544:	4b17      	ldr	r3, [pc, #92]	; (80055a4 <telemetrie_pt_lecture_suivant+0x70>)
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	81fb      	strh	r3, [r7, #14]

	// Pour passer à l'élément suivant, il faut que l'index + 1 soit :

	// - le pointeur soit dans la taille du tableau sinon passage à 0.
	if(futur_index_lecture > TELE_TAILLE_BUFFER)
 800554e:	89fb      	ldrh	r3, [r7, #14]
 8005550:	f241 3288 	movw	r2, #5000	; 0x1388
 8005554:	4293      	cmp	r3, r2
 8005556:	d901      	bls.n	800555c <telemetrie_pt_lecture_suivant+0x28>
		futur_index_lecture = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	81fb      	strh	r3, [r7, #14]

	// - différent du pointeur de lecture (dans ce cas, le tableau est plein)
	if(futur_index_lecture == gTelemetrie.index_enreg_en_cours)
 800555c:	4a10      	ldr	r2, [pc, #64]	; (80055a0 <telemetrie_pt_lecture_suivant+0x6c>)
 800555e:	4b12      	ldr	r3, [pc, #72]	; (80055a8 <telemetrie_pt_lecture_suivant+0x74>)
 8005560:	4413      	add	r3, r2
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	89fa      	ldrh	r2, [r7, #14]
 8005566:	429a      	cmp	r2, r3
 8005568:	d104      	bne.n	8005574 <telemetrie_pt_lecture_suivant+0x40>
		*a_pErreur = -1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f04f 32ff 	mov.w	r2, #4294967295
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e004      	b.n	800557e <telemetrie_pt_lecture_suivant+0x4a>
	else
		gTelemetrie.index_lecture_en_cours = futur_index_lecture;
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <telemetrie_pt_lecture_suivant+0x6c>)
 8005576:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <telemetrie_pt_lecture_suivant+0x70>)
 8005578:	4413      	add	r3, r2
 800557a:	89fa      	ldrh	r2, [r7, #14]
 800557c:	801a      	strh	r2, [r3, #0]

	return &gTelemetrie.enregistrements[gTelemetrie.index_lecture_en_cours];
 800557e:	4a08      	ldr	r2, [pc, #32]	; (80055a0 <telemetrie_pt_lecture_suivant+0x6c>)
 8005580:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <telemetrie_pt_lecture_suivant+0x70>)
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	4613      	mov	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	4413      	add	r3, r2
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	4a03      	ldr	r2, [pc, #12]	; (80055a0 <telemetrie_pt_lecture_suivant+0x6c>)
 8005592:	4413      	add	r3, r2
}
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	20010000 	.word	0x20010000
 80055a4:	0003a982 	.word	0x0003a982
 80055a8:	0003a980 	.word	0x0003a980

080055ac <telemetrie_init>:

// La stratégie ici est de remplir le tableau jusqu'à ce qu'il soit plein.
// Il n'y a pas d'écrasement des données les plus anciennes.
void telemetrie_init()
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
	gTelemetrie.index_enreg_en_cours = 0;
 80055b0:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <telemetrie_init+0x24>)
 80055b2:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <telemetrie_init+0x28>)
 80055b4:	4413      	add	r3, r2
 80055b6:	2200      	movs	r2, #0
 80055b8:	801a      	strh	r2, [r3, #0]
	gTelemetrie.index_lecture_en_cours = TELE_TAILLE_BUFFER - 1;
 80055ba:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <telemetrie_init+0x24>)
 80055bc:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <telemetrie_init+0x2c>)
 80055be:	4413      	add	r3, r2
 80055c0:	f241 3287 	movw	r2, #4999	; 0x1387
 80055c4:	801a      	strh	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	20010000 	.word	0x20010000
 80055d4:	0003a980 	.word	0x0003a980
 80055d8:	0003a982 	.word	0x0003a982

080055dc <tfminiplusIrq>:
stMiniLidar miniLidarHaut;

// Dans la routine d'IRQ du DMA, on positionne le num�ro du capteur rattach� au DMA
// Remarque g�n�rale, plutot que de typer numCapteur en int, on pourrait mettre un enum
void tfminiplusIrq(LIDAR_ID a_numCapteur)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	; 0x30
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
	int distance, strength, temp;
	uint32_t checksum, checksum_ref;
	stMiniLidar *pLidar;

	if(a_numCapteur == MINILIDAR_DROIT)
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <tfminiplusIrq+0x16>
		pLidar = &miniLidarDroit;
 80055ec:	4b92      	ldr	r3, [pc, #584]	; (8005838 <tfminiplusIrq+0x25c>)
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	e013      	b.n	800561a <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_GAUCHE)
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d102      	bne.n	80055fe <tfminiplusIrq+0x22>
		pLidar = &miniLidarGauche;
 80055f8:	4b90      	ldr	r3, [pc, #576]	; (800583c <tfminiplusIrq+0x260>)
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80055fc:	e00d      	b.n	800561a <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_HAUT)
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	2b02      	cmp	r3, #2
 8005602:	d102      	bne.n	800560a <tfminiplusIrq+0x2e>
		pLidar = &miniLidarHaut;
 8005604:	4b8e      	ldr	r3, [pc, #568]	; (8005840 <tfminiplusIrq+0x264>)
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
 8005608:	e007      	b.n	800561a <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_AVANT)
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d102      	bne.n	8005616 <tfminiplusIrq+0x3a>
		pLidar = &miniLidarAvant;
 8005610:	4b8c      	ldr	r3, [pc, #560]	; (8005844 <tfminiplusIrq+0x268>)
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
 8005614:	e001      	b.n	800561a <tfminiplusIrq+0x3e>
	else
		pLidar = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
//	else if(huart == miniLidarAvant.pHuart)
//		pLidar = &miniLidarAvant;
//	else
//		pLidar = 0;

	if(pLidar != 0)
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 821b 	beq.w	8005a58 <tfminiplusIrq+0x47c>
	{
		// On v�rifie l'ent�te
		if(pLidar->serialBuffer[0] == 0x59)
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	791b      	ldrb	r3, [r3, #4]
 8005626:	2b59      	cmp	r3, #89	; 0x59
 8005628:	d14a      	bne.n	80056c0 <tfminiplusIrq+0xe4>
		{
			// C'est une trame de donn�e

			// On v�rifie que le deuxi�me octet est correct
			// Ce driver ne g�re que le format standard mais pas le format Pixhawk
			if(pLidar->serialBuffer[1] == 0x59)
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	795b      	ldrb	r3, [r3, #5]
 800562e:	2b59      	cmp	r3, #89	; 0x59
 8005630:	f040 820a 	bne.w	8005a48 <tfminiplusIrq+0x46c>
			{
				// On v�rifie le checksum
				checksum = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<8;i++) checksum += pLidar->serialBuffer[i];
 8005638:	2300      	movs	r3, #0
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	e00b      	b.n	8005656 <tfminiplusIrq+0x7a>
 800563e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	4413      	add	r3, r2
 8005644:	3304      	adds	r3, #4
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800564c:	4413      	add	r3, r2
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b07      	cmp	r3, #7
 800565a:	ddf0      	ble.n	800563e <tfminiplusIrq+0x62>
				checksum &= 0xFF;
 800565c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565e:	b2db      	uxtb	r3, r3
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[8];
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	7b1b      	ldrb	r3, [r3, #12]
 8005666:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 8005668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	429a      	cmp	r2, r3
 800566e:	f040 81eb 	bne.w	8005a48 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On constitue les valeurs r�elles
					distance = pLidar->serialBuffer[2] + (pLidar->serialBuffer[3] << 8);
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	799b      	ldrb	r3, [r3, #6]
 8005676:	461a      	mov	r2, r3
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	79db      	ldrb	r3, [r3, #7]
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	4413      	add	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
					strength = pLidar->serialBuffer[4] + (pLidar->serialBuffer[5] << 8);
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	7a1b      	ldrb	r3, [r3, #8]
 8005686:	461a      	mov	r2, r3
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	7a5b      	ldrb	r3, [r3, #9]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	4413      	add	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
					temp =     pLidar->serialBuffer[6] + (pLidar->serialBuffer[7] << 8);
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	7a9b      	ldrb	r3, [r3, #10]
 8005696:	461a      	mov	r2, r3
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	7adb      	ldrb	r3, [r3, #11]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4413      	add	r3, r2
 80056a0:	60bb      	str	r3, [r7, #8]
//						pLidar->distance = distance;
//						pLidar->strength = strength;
//					}
//					// Sinon, on laisse les valeurs de distance et d'intensit� pr�c�dentes
//					pLidar->temperature = temp;
					pLidar->distance = distance;
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24
					pLidar->strength = strength;
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28
					pLidar->temperature = temp;
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	62da      	str	r2, [r3, #44]	; 0x2c
					pLidar->nb_irq += 1;
 80056b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	645a      	str	r2, [r3, #68]	; 0x44
 80056be:	e1c3      	b.n	8005a48 <tfminiplusIrq+0x46c>
				}
			}
		} else if (pLidar->serialBuffer[0] == 0x5A)
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	791b      	ldrb	r3, [r3, #4]
 80056c4:	2b5a      	cmp	r3, #90	; 0x5a
 80056c6:	f040 81bf 	bne.w	8005a48 <tfminiplusIrq+0x46c>
		{
			// C'est une trame de r�ponse � une commande
			if((pLidar->serialBuffer[1] == 0x07) &&
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	795b      	ldrb	r3, [r3, #5]
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d135      	bne.n	800573e <tfminiplusIrq+0x162>
			   (pLidar->serialBuffer[2] == 0x01))
 80056d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d4:	799b      	ldrb	r3, [r3, #6]
			if((pLidar->serialBuffer[1] == 0x07) &&
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d131      	bne.n	800573e <tfminiplusIrq+0x162>
			{
				// On v�rifie le checksum
				checksum = 0;
 80056da:	2300      	movs	r3, #0
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<6;i++)
 80056de:	2300      	movs	r3, #0
 80056e0:	623b      	str	r3, [r7, #32]
 80056e2:	e00b      	b.n	80056fc <tfminiplusIrq+0x120>
					checksum += pLidar->serialBuffer[i];
 80056e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	4413      	add	r3, r2
 80056ea:	3304      	adds	r3, #4
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	4413      	add	r3, r2
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<6;i++)
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	3301      	adds	r3, #1
 80056fa:	623b      	str	r3, [r7, #32]
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	2b05      	cmp	r3, #5
 8005700:	ddf0      	ble.n	80056e4 <tfminiplusIrq+0x108>
				checksum &= 0xFF;
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	b2db      	uxtb	r3, r3
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[6];
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	7a9b      	ldrb	r3, [r3, #10]
 800570c:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 800570e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	429a      	cmp	r2, r3
 8005714:	f040 8198 	bne.w	8005a48 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re les num�ros de version
					// Format 00.V3.V2.V1
					pLidar->version = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) + (pLidar->serialBuffer[5] << 16);
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	79db      	ldrb	r3, [r3, #7]
 800571c:	461a      	mov	r2, r3
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	7a1b      	ldrb	r3, [r3, #8]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	441a      	add	r2, r3
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	7a5b      	ldrb	r3, [r3, #9]
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	441a      	add	r2, r3
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
					pLidar->semaphore++;
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	1c5a      	adds	r2, r3, #1
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 800573c:	e184      	b.n	8005a48 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	795b      	ldrb	r3, [r3, #5]
 8005742:	2b05      	cmp	r3, #5
 8005744:	d111      	bne.n	800576a <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[2] == 0x02) &&
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800574a:	2b02      	cmp	r3, #2
 800574c:	d10d      	bne.n	800576a <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[3] == 0x00) &&
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x02) &&
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[4] == 0x60))
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 800575a:	2b60      	cmp	r3, #96	; 0x60
 800575c:	d105      	bne.n	800576a <tfminiplusIrq+0x18e>
			{
				// Le capteur va reseter
				pLidar->semaphore++;
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	641a      	str	r2, [r3, #64]	; 0x40
 8005768:	e16e      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	795b      	ldrb	r3, [r3, #5]
 800576e:	2b05      	cmp	r3, #5
 8005770:	d111      	bne.n	8005796 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[2] == 0x02) &&
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005776:	2b02      	cmp	r3, #2
 8005778:	d10d      	bne.n	8005796 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[3] == 0x01) &&
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x02) &&
 800577e:	2b01      	cmp	r3, #1
 8005780:	d109      	bne.n	8005796 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[4] == 0x61))
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8005786:	2b61      	cmp	r3, #97	; 0x61
 8005788:	d105      	bne.n	8005796 <tfminiplusIrq+0x1ba>
			{
				// Le capteur refuse de reseter
				pLidar->semaphore++;
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	641a      	str	r2, [r3, #64]	; 0x40
 8005794:	e158      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x06) &&
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	795b      	ldrb	r3, [r3, #5]
 800579a:	2b06      	cmp	r3, #6
 800579c:	d131      	bne.n	8005802 <tfminiplusIrq+0x226>
					(pLidar->serialBuffer[2] == 0x03))
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x06) &&
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d12d      	bne.n	8005802 <tfminiplusIrq+0x226>
			{
				// On v�rifie le checksum
				checksum = 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<5;i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
 80057ae:	e00b      	b.n	80057c8 <tfminiplusIrq+0x1ec>
					checksum += pLidar->serialBuffer[i];
 80057b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	3304      	adds	r3, #4
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	4413      	add	r3, r2
 80057c0:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<5;i++)
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	ddf0      	ble.n	80057b0 <tfminiplusIrq+0x1d4>
				checksum &= 0xFF;
 80057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[5];
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	7a5b      	ldrb	r3, [r3, #9]
 80057d8:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	429a      	cmp	r2, r3
 80057e0:	f040 8132 	bne.w	8005a48 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re le Frame Rate
					pLidar->framerate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8);
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	79db      	ldrb	r3, [r3, #7]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	7a1b      	ldrb	r3, [r3, #8]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	441a      	add	r2, r3
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	635a      	str	r2, [r3, #52]	; 0x34

					pLidar->semaphore++;
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 8005800:	e122      	b.n	8005a48 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	795b      	ldrb	r3, [r3, #5]
 8005806:	2b05      	cmp	r3, #5
 8005808:	d11e      	bne.n	8005848 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[2] == 0x05) &&
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800580e:	2b05      	cmp	r3, #5
 8005810:	d11a      	bne.n	8005848 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[3] == 0x01) &&
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 8005816:	2b01      	cmp	r3, #1
 8005818:	d116      	bne.n	8005848 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[4] == 0x65))
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 800581e:	2b65      	cmp	r3, #101	; 0x65
 8005820:	d112      	bne.n	8005848 <tfminiplusIrq+0x26c>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = standard_cm;
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
 8005834:	e108      	b.n	8005a48 <tfminiplusIrq+0x46c>
 8005836:	bf00      	nop
 8005838:	20000c30 	.word	0x20000c30
 800583c:	20000d30 	.word	0x20000d30
 8005840:	20000c78 	.word	0x20000c78
 8005844:	20000ce8 	.word	0x20000ce8
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	795b      	ldrb	r3, [r3, #5]
 800584c:	2b05      	cmp	r3, #5
 800584e:	d115      	bne.n	800587c <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[2] == 0x05) &&
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005854:	2b05      	cmp	r3, #5
 8005856:	d111      	bne.n	800587c <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[3] == 0x02) &&
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 800585c:	2b02      	cmp	r3, #2
 800585e:	d10d      	bne.n	800587c <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[4] == 0x66))
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x02) &&
 8005864:	2b66      	cmp	r3, #102	; 0x66
 8005866:	d109      	bne.n	800587c <tfminiplusIrq+0x2a0>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = pixhawk;
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
 800587a:	e0e5      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	795b      	ldrb	r3, [r3, #5]
 8005880:	2b05      	cmp	r3, #5
 8005882:	d115      	bne.n	80058b0 <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[2] == 0x05) &&
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005888:	2b05      	cmp	r3, #5
 800588a:	d111      	bne.n	80058b0 <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[3] == 0x03) &&
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 8005890:	2b03      	cmp	r3, #3
 8005892:	d10d      	bne.n	80058b0 <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[4] == 0x67))
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x03) &&
 8005898:	2b67      	cmp	r3, #103	; 0x67
 800589a:	d109      	bne.n	80058b0 <tfminiplusIrq+0x2d4>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = standard_mm;
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	641a      	str	r2, [r3, #64]	; 0x40
 80058ae:	e0cb      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x08) &&
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	795b      	ldrb	r3, [r3, #5]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d139      	bne.n	800592c <tfminiplusIrq+0x350>
					(pLidar->serialBuffer[2] == 0x06))
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x08) &&
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d135      	bne.n	800592c <tfminiplusIrq+0x350>
			{
				// On v�rifie le checksum
				checksum = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<7;i++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	e00b      	b.n	80058e2 <tfminiplusIrq+0x306>
					checksum += pLidar->serialBuffer[i];
 80058ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	4413      	add	r3, r2
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<7;i++)
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	3301      	adds	r3, #1
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b06      	cmp	r3, #6
 80058e6:	ddf0      	ble.n	80058ca <tfminiplusIrq+0x2ee>
				checksum &= 0xFF;
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[7];
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	7adb      	ldrb	r3, [r3, #11]
 80058f2:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 80058f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	f040 80a5 	bne.w	8005a48 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re le Baud Rate
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	79db      	ldrb	r3, [r3, #7]
 8005902:	461a      	mov	r2, r3
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	7a1b      	ldrb	r3, [r3, #8]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	441a      	add	r2, r3
							(pLidar->serialBuffer[5] << 16) + (pLidar->serialBuffer[6] << 24);
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	7a5b      	ldrb	r3, [r3, #9]
 8005910:	041b      	lsls	r3, r3, #16
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 8005912:	441a      	add	r2, r3
							(pLidar->serialBuffer[5] << 16) + (pLidar->serialBuffer[6] << 24);
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	7a9b      	ldrb	r3, [r3, #10]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	441a      	add	r2, r3
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
					pLidar->semaphore++;
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 800592a:	e08d      	b.n	8005a48 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	795b      	ldrb	r3, [r3, #5]
 8005930:	2b05      	cmp	r3, #5
 8005932:	d111      	bne.n	8005958 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[2] == 0x07) &&
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005938:	2b07      	cmp	r3, #7
 800593a:	d10d      	bne.n	8005958 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[3] == 0x00) &&
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x07) &&
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[4] == 0x66))
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8005948:	2b66      	cmp	r3, #102	; 0x66
 800594a:	d105      	bne.n	8005958 <tfminiplusIrq+0x37c>
			{
				// Arr�te la g�n�ration automatique des distances
				// Les distances ne sont fournies que sur demande
				pLidar->semaphore++;
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
 8005956:	e077      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	795b      	ldrb	r3, [r3, #5]
 800595c:	2b05      	cmp	r3, #5
 800595e:	d111      	bne.n	8005984 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[2] == 0x07) &&
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005964:	2b07      	cmp	r3, #7
 8005966:	d10d      	bne.n	8005984 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[3] == 0x01) &&
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x07) &&
 800596c:	2b01      	cmp	r3, #1
 800596e:	d109      	bne.n	8005984 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[4] == 0x67))
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8005974:	2b67      	cmp	r3, #103	; 0x67
 8005976:	d105      	bne.n	8005984 <tfminiplusIrq+0x3a8>
			{
				// D�marre la g�n�ration automatique des distances
				// Les distances sont fournies r�guli�rement. La fr�quence est fournie par le Frame Rate
				pLidar->semaphore++;
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	641a      	str	r2, [r3, #64]	; 0x40
 8005982:	e061      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	795b      	ldrb	r3, [r3, #5]
 8005988:	2b05      	cmp	r3, #5
 800598a:	d11c      	bne.n	80059c6 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[2] == 0x10) &&
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005990:	2b10      	cmp	r3, #16
 8005992:	d118      	bne.n	80059c6 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[3] == 0x00) &&
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x10) &&
 8005998:	2b00      	cmp	r3, #0
 800599a:	d114      	bne.n	80059c6 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[4] == 0x6E))
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 80059a0:	2b6e      	cmp	r3, #110	; 0x6e
 80059a2:	d110      	bne.n	80059c6 <tfminiplusIrq+0x3ea>
			{
				// La demande de restauration des param�tres d'usine est accept�e
				pLidar->baudrate = 115200;
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
				pLidar->framerate = 100;
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2264      	movs	r2, #100	; 0x64
 80059b0:	635a      	str	r2, [r3, #52]	; 0x34
				pLidar->outputFormat = standard_cm;
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40
 80059c4:	e040      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	795b      	ldrb	r3, [r3, #5]
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d111      	bne.n	80059f2 <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[2] == 0x10) &&
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059d2:	2b10      	cmp	r3, #16
 80059d4:	d10d      	bne.n	80059f2 <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[3] == 0x01) &&
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x10) &&
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d109      	bne.n	80059f2 <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[4] == 0x6F))
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 80059e2:	2b6f      	cmp	r3, #111	; 0x6f
 80059e4:	d105      	bne.n	80059f2 <tfminiplusIrq+0x416>
			{
				// La demande de restauration des param�tres d'usine est refus�e
				pLidar->semaphore++;
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
 80059f0:	e02a      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	795b      	ldrb	r3, [r3, #5]
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d111      	bne.n	8005a1e <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[2] == 0x22) &&
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059fe:	2b22      	cmp	r3, #34	; 0x22
 8005a00:	d10d      	bne.n	8005a1e <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[3] == 0x00) &&
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x22) &&
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[4] == 0x6F))
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8005a0e:	2b6f      	cmp	r3, #111	; 0x6f
 8005a10:	d105      	bne.n	8005a1e <tfminiplusIrq+0x442>
			{
				// La demande de sauvegarde des parametres courant est accept�e
				pLidar->semaphore++;
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a1c:	e014      	b.n	8005a48 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	795b      	ldrb	r3, [r3, #5]
 8005a22:	2b05      	cmp	r3, #5
 8005a24:	d110      	bne.n	8005a48 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[2] == 0x22) &&
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005a2a:	2b22      	cmp	r3, #34	; 0x22
 8005a2c:	d10c      	bne.n	8005a48 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[3] == 0x01) &&
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x22) &&
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d108      	bne.n	8005a48 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[4] == 0x70))
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8005a3a:	2b70      	cmp	r3, #112	; 0x70
 8005a3c:	d104      	bne.n	8005a48 <tfminiplusIrq+0x46c>
			{
				// La demande de sauvegarde des parametres courant est refus�e
				pLidar->semaphore++;
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		// Sinon, c'est un format inconnu. On j�te la trame.

		// On r�arme le DMA
		HAL_UART_Receive_DMA(pLidar->pHuart, pLidar->serialBuffer, 9);
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	3304      	adds	r3, #4
 8005a50:	2209      	movs	r2, #9
 8005a52:	4619      	mov	r1, r3
 8005a54:	f005 f951 	bl	800acfa <HAL_UART_Receive_DMA>

	}

}
 8005a58:	bf00      	nop
 8005a5a:	3730      	adds	r7, #48	; 0x30
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <tfminiplus_getLastAcquisition>:
//
//	}
//}

int tfminiplus_getLastAcquisition(LIDAR_ID a_numCapteur, int32_t *a_pDistance, int32_t *a_pStrength, int32_t *a_pTemperature)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
	int erreur;
	stMiniLidar *pLidar;

	if(a_numCapteur == MINILIDAR_DROIT)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <tfminiplus_getLastAcquisition+0x1c>
		pLidar = &miniLidarDroit;
 8005a76:	4b2b      	ldr	r3, [pc, #172]	; (8005b24 <tfminiplus_getLastAcquisition+0xc4>)
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e013      	b.n	8005aa4 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_GAUCHE)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d102      	bne.n	8005a88 <tfminiplus_getLastAcquisition+0x28>
		pLidar = &miniLidarGauche;
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <tfminiplus_getLastAcquisition+0xc8>)
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e00d      	b.n	8005aa4 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_HAUT)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b02      	cmp	r3, #2
 8005a8c:	d102      	bne.n	8005a94 <tfminiplus_getLastAcquisition+0x34>
		pLidar = &miniLidarHaut;
 8005a8e:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <tfminiplus_getLastAcquisition+0xcc>)
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e007      	b.n	8005aa4 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_AVANT)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d102      	bne.n	8005aa0 <tfminiplus_getLastAcquisition+0x40>
		pLidar = &miniLidarAvant;
 8005a9a:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <tfminiplus_getLastAcquisition+0xd0>)
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e001      	b.n	8005aa4 <tfminiplus_getLastAcquisition+0x44>
	else
		pLidar = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	613b      	str	r3, [r7, #16]

	if(pLidar != 0)
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d031      	beq.n	8005b0e <tfminiplus_getLastAcquisition+0xae>
	{
		// On renvoie la distance mesur�e par le premier capteur
		if(pLidar->distance == -2)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f113 0f02 	cmn.w	r3, #2
 8005ab2:	d10a      	bne.n	8005aca <tfminiplus_getLastAcquisition+0x6a>
		{
			*a_pDistance = -2;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f06f 0201 	mvn.w	r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
			*a_pStrength = 0;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
			*a_pTemperature = 0;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	e01a      	b.n	8005b00 <tfminiplus_getLastAcquisition+0xa0>
		}
		else if((pLidar->strength >= 100) && (pLidar->strength != 65535))
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	2b63      	cmp	r3, #99	; 0x63
 8005ad0:	dd12      	ble.n	8005af8 <tfminiplus_getLastAcquisition+0x98>
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00c      	beq.n	8005af8 <tfminiplus_getLastAcquisition+0x98>
		{
			*a_pDistance = pLidar->distance;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	601a      	str	r2, [r3, #0]
			*a_pStrength = pLidar->strength;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
			*a_pTemperature = pLidar->temperature;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e003      	b.n	8005b00 <tfminiplus_getLastAcquisition+0xa0>
		}
		else
		{
			*a_pDistance = -1;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f04f 32ff 	mov.w	r2, #4294967295
 8005afe:	601a      	str	r2, [r3, #0]
		}
		erreur = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	617b      	str	r3, [r7, #20]
		// En gros, le lidar envoie des captures toutes les 10 ms.
		// La valeur du strength du rayon de retour permet de savoir si la mesure est valide.
		// On peut avoir strength 250 250 10 10 10 10 10 10
		// Si le logiciel applicatif prend la mesure apr�s le deuxi�me 250, et qu'il prend la deuxi�me mesure apr�s le 4ieme 10,
		// alors le driver pourrait renvoyer la derni�re valeur valide, mais elle est tr�s ancienne.
		pLidar->distance = -2;
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f06f 0201 	mvn.w	r2, #1
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b0c:	e002      	b.n	8005b14 <tfminiplus_getLastAcquisition+0xb4>
	}
	else
		// Numero de capteur inconnu
		erreur = -1;
 8005b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b12:	617b      	str	r3, [r7, #20]

	return erreur;
 8005b14:	697b      	ldr	r3, [r7, #20]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000c30 	.word	0x20000c30
 8005b28:	20000d30 	.word	0x20000d30
 8005b2c:	20000c78 	.word	0x20000c78
 8005b30:	20000ce8 	.word	0x20000ce8

08005b34 <tfminiplus_init>:

	return erreur;
}

int tfminiplus_init()
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef retour;

	// Initialisation des parametres
	miniLidarDroit.pHuart = &huart5;
 8005b3a:	4b7f      	ldr	r3, [pc, #508]	; (8005d38 <tfminiplus_init+0x204>)
 8005b3c:	4a7f      	ldr	r2, [pc, #508]	; (8005d3c <tfminiplus_init+0x208>)
 8005b3e:	601a      	str	r2, [r3, #0]
	miniLidarDroit.distance = -2;
 8005b40:	4b7d      	ldr	r3, [pc, #500]	; (8005d38 <tfminiplus_init+0x204>)
 8005b42:	f06f 0201 	mvn.w	r2, #1
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarDroit.strength = 0;
 8005b48:	4b7b      	ldr	r3, [pc, #492]	; (8005d38 <tfminiplus_init+0x204>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarDroit.temperature = 0;
 8005b4e:	4b7a      	ldr	r3, [pc, #488]	; (8005d38 <tfminiplus_init+0x204>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarDroit.baudrate = 115200;
 8005b54:	4b78      	ldr	r3, [pc, #480]	; (8005d38 <tfminiplus_init+0x204>)
 8005b56:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b5a:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarDroit.framerate = 100;
 8005b5c:	4b76      	ldr	r3, [pc, #472]	; (8005d38 <tfminiplus_init+0x204>)
 8005b5e:	2264      	movs	r2, #100	; 0x64
 8005b60:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarDroit.semaphore = 0;
 8005b62:	4b75      	ldr	r3, [pc, #468]	; (8005d38 <tfminiplus_init+0x204>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarDroit.nb_irq = 0;
 8005b68:	4b73      	ldr	r3, [pc, #460]	; (8005d38 <tfminiplus_init+0x204>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarGauche.pHuart = &huart7;
 8005b6e:	4b74      	ldr	r3, [pc, #464]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b70:	4a74      	ldr	r2, [pc, #464]	; (8005d44 <tfminiplus_init+0x210>)
 8005b72:	601a      	str	r2, [r3, #0]
	miniLidarGauche.distance = -2;
 8005b74:	4b72      	ldr	r3, [pc, #456]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b76:	f06f 0201 	mvn.w	r2, #1
 8005b7a:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarGauche.strength = 0;
 8005b7c:	4b70      	ldr	r3, [pc, #448]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarGauche.temperature = 0;
 8005b82:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarGauche.baudrate = 115200;
 8005b88:	4b6d      	ldr	r3, [pc, #436]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b8a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarGauche.framerate = 100;
 8005b90:	4b6b      	ldr	r3, [pc, #428]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b92:	2264      	movs	r2, #100	; 0x64
 8005b94:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarGauche.semaphore = 0;
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarGauche.nb_irq = 0;
 8005b9c:	4b68      	ldr	r3, [pc, #416]	; (8005d40 <tfminiplus_init+0x20c>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarHaut.pHuart = &huart8;
 8005ba2:	4b69      	ldr	r3, [pc, #420]	; (8005d48 <tfminiplus_init+0x214>)
 8005ba4:	4a69      	ldr	r2, [pc, #420]	; (8005d4c <tfminiplus_init+0x218>)
 8005ba6:	601a      	str	r2, [r3, #0]
	miniLidarHaut.distance = -2;
 8005ba8:	4b67      	ldr	r3, [pc, #412]	; (8005d48 <tfminiplus_init+0x214>)
 8005baa:	f06f 0201 	mvn.w	r2, #1
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarHaut.strength = 0;
 8005bb0:	4b65      	ldr	r3, [pc, #404]	; (8005d48 <tfminiplus_init+0x214>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarHaut.temperature = 0;
 8005bb6:	4b64      	ldr	r3, [pc, #400]	; (8005d48 <tfminiplus_init+0x214>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarHaut.baudrate = 115200;
 8005bbc:	4b62      	ldr	r3, [pc, #392]	; (8005d48 <tfminiplus_init+0x214>)
 8005bbe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarHaut.framerate = 100;
 8005bc4:	4b60      	ldr	r3, [pc, #384]	; (8005d48 <tfminiplus_init+0x214>)
 8005bc6:	2264      	movs	r2, #100	; 0x64
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarHaut.semaphore = 0;
 8005bca:	4b5f      	ldr	r3, [pc, #380]	; (8005d48 <tfminiplus_init+0x214>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarHaut.nb_irq = 0;
 8005bd0:	4b5d      	ldr	r3, [pc, #372]	; (8005d48 <tfminiplus_init+0x214>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarAvant.pHuart = &huart4;
 8005bd6:	4b5e      	ldr	r3, [pc, #376]	; (8005d50 <tfminiplus_init+0x21c>)
 8005bd8:	4a5e      	ldr	r2, [pc, #376]	; (8005d54 <tfminiplus_init+0x220>)
 8005bda:	601a      	str	r2, [r3, #0]
	miniLidarAvant.distance = -2;
 8005bdc:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <tfminiplus_init+0x21c>)
 8005bde:	f06f 0201 	mvn.w	r2, #1
 8005be2:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarAvant.strength = 0;
 8005be4:	4b5a      	ldr	r3, [pc, #360]	; (8005d50 <tfminiplus_init+0x21c>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarAvant.temperature = 0;
 8005bea:	4b59      	ldr	r3, [pc, #356]	; (8005d50 <tfminiplus_init+0x21c>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarAvant.baudrate = 115200;
 8005bf0:	4b57      	ldr	r3, [pc, #348]	; (8005d50 <tfminiplus_init+0x21c>)
 8005bf2:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bf6:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarAvant.framerate = 100;
 8005bf8:	4b55      	ldr	r3, [pc, #340]	; (8005d50 <tfminiplus_init+0x21c>)
 8005bfa:	2264      	movs	r2, #100	; 0x64
 8005bfc:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarAvant.semaphore = 0;
 8005bfe:	4b54      	ldr	r3, [pc, #336]	; (8005d50 <tfminiplus_init+0x21c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarAvant.nb_irq = 0;
 8005c04:	4b52      	ldr	r3, [pc, #328]	; (8005d50 <tfminiplus_init+0x21c>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44

	// Sequence de mise sous tension pour limiter l'appel de courant
	HAL_GPIO_WritePin(lid1_pwr_en_GPIO_Port, lid1_pwr_en_Pin, GPIO_PIN_RESET);
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2104      	movs	r1, #4
 8005c0e:	4852      	ldr	r0, [pc, #328]	; (8005d58 <tfminiplus_init+0x224>)
 8005c10:	f001 fac4 	bl	800719c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid2_pwr_en_GPIO_Port, lid2_pwr_en_Pin, GPIO_PIN_RESET);
 8005c14:	2200      	movs	r2, #0
 8005c16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c1a:	484f      	ldr	r0, [pc, #316]	; (8005d58 <tfminiplus_init+0x224>)
 8005c1c:	f001 fabe 	bl	800719c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid3_pwr_en_GPIO_Port, lid3_pwr_en_Pin, GPIO_PIN_RESET);
 8005c20:	2200      	movs	r2, #0
 8005c22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c26:	484c      	ldr	r0, [pc, #304]	; (8005d58 <tfminiplus_init+0x224>)
 8005c28:	f001 fab8 	bl	800719c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c32:	484a      	ldr	r0, [pc, #296]	; (8005d5c <tfminiplus_init+0x228>)
 8005c34:	f001 fab2 	bl	800719c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c3e:	4848      	ldr	r0, [pc, #288]	; (8005d60 <tfminiplus_init+0x22c>)
 8005c40:	f001 faac 	bl	800719c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c4a:	4846      	ldr	r0, [pc, #280]	; (8005d64 <tfminiplus_init+0x230>)
 8005c4c:	f001 faa6 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005c50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c54:	f000 f916 	bl	8005e84 <HAL_Delay>

	HAL_GPIO_WritePin(lid1_pwr_en_GPIO_Port, lid1_pwr_en_Pin, GPIO_PIN_SET);
 8005c58:	2201      	movs	r2, #1
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	483e      	ldr	r0, [pc, #248]	; (8005d58 <tfminiplus_init+0x224>)
 8005c5e:	f001 fa9d 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005c62:	2064      	movs	r0, #100	; 0x64
 8005c64:	f000 f90e 	bl	8005e84 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarAvant.pHuart, miniLidarAvant.serialBuffer, 26);
 8005c68:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <tfminiplus_init+0x21c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	221a      	movs	r2, #26
 8005c6e:	493e      	ldr	r1, [pc, #248]	; (8005d68 <tfminiplus_init+0x234>)
 8005c70:	4618      	mov	r0, r3
 8005c72:	f005 f842 	bl	800acfa <HAL_UART_Receive_DMA>
 8005c76:	4603      	mov	r3, r0
 8005c78:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8005c7a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005c7e:	f000 f901 	bl	8005e84 <HAL_Delay>

	HAL_GPIO_WritePin(lid2_pwr_en_GPIO_Port, lid2_pwr_en_Pin, GPIO_PIN_SET);
 8005c82:	2201      	movs	r2, #1
 8005c84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c88:	4833      	ldr	r0, [pc, #204]	; (8005d58 <tfminiplus_init+0x224>)
 8005c8a:	f001 fa87 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005c8e:	2064      	movs	r0, #100	; 0x64
 8005c90:	f000 f8f8 	bl	8005e84 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarGauche.pHuart, miniLidarGauche.serialBuffer, 10);
 8005c94:	4b2a      	ldr	r3, [pc, #168]	; (8005d40 <tfminiplus_init+0x20c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	220a      	movs	r2, #10
 8005c9a:	4934      	ldr	r1, [pc, #208]	; (8005d6c <tfminiplus_init+0x238>)
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f005 f82c 	bl	800acfa <HAL_UART_Receive_DMA>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8005ca6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005caa:	f000 f8eb 	bl	8005e84 <HAL_Delay>

	HAL_GPIO_WritePin(lid3_pwr_en_GPIO_Port, lid3_pwr_en_Pin, GPIO_PIN_SET);
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005cb4:	4828      	ldr	r0, [pc, #160]	; (8005d58 <tfminiplus_init+0x224>)
 8005cb6:	f001 fa71 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cbe:	f000 f8e1 	bl	8005e84 <HAL_Delay>

	HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_SET);
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cc8:	4824      	ldr	r0, [pc, #144]	; (8005d5c <tfminiplus_init+0x228>)
 8005cca:	f001 fa67 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cd2:	f000 f8d7 	bl	8005e84 <HAL_Delay>

	HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_SET);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cdc:	4820      	ldr	r0, [pc, #128]	; (8005d60 <tfminiplus_init+0x22c>)
 8005cde:	f001 fa5d 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005ce2:	2064      	movs	r0, #100	; 0x64
 8005ce4:	f000 f8ce 	bl	8005e84 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarDroit.pHuart, miniLidarDroit.serialBuffer, 10);
 8005ce8:	4b13      	ldr	r3, [pc, #76]	; (8005d38 <tfminiplus_init+0x204>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	220a      	movs	r2, #10
 8005cee:	4920      	ldr	r1, [pc, #128]	; (8005d70 <tfminiplus_init+0x23c>)
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f005 f802 	bl	800acfa <HAL_UART_Receive_DMA>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8005cfa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005cfe:	f000 f8c1 	bl	8005e84 <HAL_Delay>

	HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_SET);
 8005d02:	2201      	movs	r2, #1
 8005d04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d08:	4816      	ldr	r0, [pc, #88]	; (8005d64 <tfminiplus_init+0x230>)
 8005d0a:	f001 fa47 	bl	800719c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005d0e:	2064      	movs	r0, #100	; 0x64
 8005d10:	f000 f8b8 	bl	8005e84 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarHaut.pHuart, miniLidarHaut.serialBuffer, 26);
 8005d14:	4b0c      	ldr	r3, [pc, #48]	; (8005d48 <tfminiplus_init+0x214>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	221a      	movs	r2, #26
 8005d1a:	4916      	ldr	r1, [pc, #88]	; (8005d74 <tfminiplus_init+0x240>)
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f004 ffec 	bl	800acfa <HAL_UART_Receive_DMA>
 8005d22:	4603      	mov	r3, r0
 8005d24:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(900);
 8005d26:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005d2a:	f000 f8ab 	bl	8005e84 <HAL_Delay>
//	retour += HAL_UART_Receive_DMA(miniLidarAvant.pHuart, miniLidarAvant.serialBuffer, 9);

//	retour = HAL_UART_Receive(miniLidarDroit.pHuart, miniLidarDroit.serialBuffer, 9, HAL_MAX_DELAY);
//	retour = 0;

	return retour;
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000c30 	.word	0x20000c30
 8005d3c:	200005d4 	.word	0x200005d4
 8005d40:	20000d30 	.word	0x20000d30
 8005d44:	200002f4 	.word	0x200002f4
 8005d48:	20000c78 	.word	0x20000c78
 8005d4c:	2000087c 	.word	0x2000087c
 8005d50:	20000ce8 	.word	0x20000ce8
 8005d54:	20000900 	.word	0x20000900
 8005d58:	40020400 	.word	0x40020400
 8005d5c:	40020000 	.word	0x40020000
 8005d60:	40020800 	.word	0x40020800
 8005d64:	40021400 	.word	0x40021400
 8005d68:	20000cec 	.word	0x20000cec
 8005d6c:	20000d34 	.word	0x20000d34
 8005d70:	20000c34 	.word	0x20000c34
 8005d74:	20000c7c 	.word	0x20000c7c

08005d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005db0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d7c:	480d      	ldr	r0, [pc, #52]	; (8005db4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d7e:	490e      	ldr	r1, [pc, #56]	; (8005db8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d80:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005d84:	e002      	b.n	8005d8c <LoopCopyDataInit>

08005d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005d8a:	3304      	adds	r3, #4

08005d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005d90:	d3f9      	bcc.n	8005d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005d92:	4a0b      	ldr	r2, [pc, #44]	; (8005dc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005d94:	4c0b      	ldr	r4, [pc, #44]	; (8005dc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005d98:	e001      	b.n	8005d9e <LoopFillZerobss>

08005d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005d9c:	3204      	adds	r2, #4

08005d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005da0:	d3fb      	bcc.n	8005d9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005da2:	f7ff fa9f 	bl	80052e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005da6:	f005 ff5b 	bl	800bc60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005daa:	f7fb fde9 	bl	8001980 <main>
  bx  lr    
 8005dae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005db0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005db8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005dbc:	080121d8 	.word	0x080121d8
  ldr r2, =_sbss
 8005dc0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005dc4:	20000d8c 	.word	0x20000d8c

08005dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005dc8:	e7fe      	b.n	8005dc8 <ADC_IRQHandler>

08005dca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dce:	2003      	movs	r0, #3
 8005dd0:	f000 fbd4 	bl	800657c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005dd4:	200f      	movs	r0, #15
 8005dd6:	f000 f805 	bl	8005de4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005dda:	f7fe fbc9 	bl	8004570 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005dec:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <HAL_InitTick+0x54>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b12      	ldr	r3, [pc, #72]	; (8005e3c <HAL_InitTick+0x58>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fbef 	bl	80065e6 <HAL_SYSTICK_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e00e      	b.n	8005e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b0f      	cmp	r3, #15
 8005e16:	d80a      	bhi.n	8005e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	f000 fbb7 	bl	8006592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e24:	4a06      	ldr	r2, [pc, #24]	; (8005e40 <HAL_InitTick+0x5c>)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	2000001c 	.word	0x2000001c
 8005e3c:	20000024 	.word	0x20000024
 8005e40:	20000020 	.word	0x20000020

08005e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e48:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <HAL_IncTick+0x20>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <HAL_IncTick+0x24>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4413      	add	r3, r2
 8005e54:	4a04      	ldr	r2, [pc, #16]	; (8005e68 <HAL_IncTick+0x24>)
 8005e56:	6013      	str	r3, [r2, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000024 	.word	0x20000024
 8005e68:	20000d78 	.word	0x20000d78

08005e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <HAL_GetTick+0x14>)
 8005e72:	681b      	ldr	r3, [r3, #0]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000d78 	.word	0x20000d78

08005e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005e8c:	f7ff ffee 	bl	8005e6c <HAL_GetTick>
 8005e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d005      	beq.n	8005eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <HAL_Delay+0x44>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005eaa:	bf00      	nop
 8005eac:	f7ff ffde 	bl	8005e6c <HAL_GetTick>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	1ad3      	subs	r3, r2, r3
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d8f7      	bhi.n	8005eac <HAL_Delay+0x28>
  {
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000024 	.word	0x20000024

08005ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e031      	b.n	8005f46 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fe fb64 	bl	80045b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d116      	bne.n	8005f38 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f0e:	4b10      	ldr	r3, [pc, #64]	; (8005f50 <HAL_ADC_Init+0x84>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	f043 0202 	orr.w	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f964 	bl	80061e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	f043 0201 	orr.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40
 8005f36:	e001      	b.n	8005f3c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	ffffeefd 	.word	0xffffeefd

08005f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_ADC_ConfigChannel+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e12a      	b.n	80061c6 <HAL_ADC_ConfigChannel+0x272>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b09      	cmp	r3, #9
 8005f7e:	d93a      	bls.n	8005ff6 <HAL_ADC_ConfigChannel+0xa2>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f88:	d035      	beq.n	8005ff6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68d9      	ldr	r1, [r3, #12]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	4613      	mov	r3, r2
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3b1e      	subs	r3, #30
 8005fa0:	2207      	movs	r2, #7
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	400a      	ands	r2, r1
 8005fae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a87      	ldr	r2, [pc, #540]	; (80061d4 <HAL_ADC_ConfigChannel+0x280>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10a      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68d9      	ldr	r1, [r3, #12]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	061a      	lsls	r2, r3, #24
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fce:	e035      	b.n	800603c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68d9      	ldr	r1, [r3, #12]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4403      	add	r3, r0
 8005fe8:	3b1e      	subs	r3, #30
 8005fea:	409a      	lsls	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ff4:	e022      	b.n	800603c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6919      	ldr	r1, [r3, #16]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	2207      	movs	r2, #7
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43da      	mvns	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	400a      	ands	r2, r1
 8006018:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6919      	ldr	r1, [r3, #16]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	4618      	mov	r0, r3
 800602c:	4603      	mov	r3, r0
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	4403      	add	r3, r0
 8006032:	409a      	lsls	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b06      	cmp	r3, #6
 8006042:	d824      	bhi.n	800608e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	3b05      	subs	r3, #5
 8006056:	221f      	movs	r2, #31
 8006058:	fa02 f303 	lsl.w	r3, r2, r3
 800605c:	43da      	mvns	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	400a      	ands	r2, r1
 8006064:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	b29b      	uxth	r3, r3
 8006072:	4618      	mov	r0, r3
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	4613      	mov	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	3b05      	subs	r3, #5
 8006080:	fa00 f203 	lsl.w	r2, r0, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	635a      	str	r2, [r3, #52]	; 0x34
 800608c:	e04c      	b.n	8006128 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	2b0c      	cmp	r3, #12
 8006094:	d824      	bhi.n	80060e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	3b23      	subs	r3, #35	; 0x23
 80060a8:	221f      	movs	r2, #31
 80060aa:	fa02 f303 	lsl.w	r3, r2, r3
 80060ae:	43da      	mvns	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	400a      	ands	r2, r1
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	4618      	mov	r0, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	4613      	mov	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	3b23      	subs	r3, #35	; 0x23
 80060d2:	fa00 f203 	lsl.w	r2, r0, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	631a      	str	r2, [r3, #48]	; 0x30
 80060de:	e023      	b.n	8006128 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	3b41      	subs	r3, #65	; 0x41
 80060f2:	221f      	movs	r2, #31
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43da      	mvns	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	400a      	ands	r2, r1
 8006100:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	b29b      	uxth	r3, r3
 800610e:	4618      	mov	r0, r3
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	3b41      	subs	r3, #65	; 0x41
 800611c:	fa00 f203 	lsl.w	r2, r0, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <HAL_ADC_ConfigChannel+0x284>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d10a      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x1f4>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613a:	d105      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800613c:	4b27      	ldr	r3, [pc, #156]	; (80061dc <HAL_ADC_ConfigChannel+0x288>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	4a26      	ldr	r2, [pc, #152]	; (80061dc <HAL_ADC_ConfigChannel+0x288>)
 8006142:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006146:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <HAL_ADC_ConfigChannel+0x284>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d109      	bne.n	8006166 <HAL_ADC_ConfigChannel+0x212>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b12      	cmp	r3, #18
 8006158:	d105      	bne.n	8006166 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800615a:	4b20      	ldr	r3, [pc, #128]	; (80061dc <HAL_ADC_ConfigChannel+0x288>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	4a1f      	ldr	r2, [pc, #124]	; (80061dc <HAL_ADC_ConfigChannel+0x288>)
 8006160:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006164:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <HAL_ADC_ConfigChannel+0x284>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d125      	bne.n	80061bc <HAL_ADC_ConfigChannel+0x268>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <HAL_ADC_ConfigChannel+0x280>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d003      	beq.n	8006182 <HAL_ADC_ConfigChannel+0x22e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b11      	cmp	r3, #17
 8006180:	d11c      	bne.n	80061bc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006182:	4b16      	ldr	r3, [pc, #88]	; (80061dc <HAL_ADC_ConfigChannel+0x288>)
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	4a15      	ldr	r2, [pc, #84]	; (80061dc <HAL_ADC_ConfigChannel+0x288>)
 8006188:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800618c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <HAL_ADC_ConfigChannel+0x280>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d111      	bne.n	80061bc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006198:	4b11      	ldr	r3, [pc, #68]	; (80061e0 <HAL_ADC_ConfigChannel+0x28c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <HAL_ADC_ConfigChannel+0x290>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	0c9a      	lsrs	r2, r3, #18
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80061ae:	e002      	b.n	80061b6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f9      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	10000012 	.word	0x10000012
 80061d8:	40012000 	.word	0x40012000
 80061dc:	40012300 	.word	0x40012300
 80061e0:	2000001c 	.word	0x2000001c
 80061e4:	431bde83 	.word	0x431bde83

080061e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80061f0:	4b78      	ldr	r3, [pc, #480]	; (80063d4 <ADC_Init+0x1ec>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	4a77      	ldr	r2, [pc, #476]	; (80063d4 <ADC_Init+0x1ec>)
 80061f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80061fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80061fc:	4b75      	ldr	r3, [pc, #468]	; (80063d4 <ADC_Init+0x1ec>)
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4973      	ldr	r1, [pc, #460]	; (80063d4 <ADC_Init+0x1ec>)
 8006206:	4313      	orrs	r3, r2
 8006208:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6859      	ldr	r1, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	021a      	lsls	r2, r3, #8
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800623c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800625e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6899      	ldr	r1, [r3, #8]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68da      	ldr	r2, [r3, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	4a58      	ldr	r2, [pc, #352]	; (80063d8 <ADC_Init+0x1f0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800628a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6899      	ldr	r1, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80062ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6899      	ldr	r1, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
 80062c0:	e00f      	b.n	80062e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80062e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0202 	bic.w	r2, r2, #2
 80062f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6899      	ldr	r1, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	005a      	lsls	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01b      	beq.n	8006348 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800632e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6859      	ldr	r1, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	3b01      	subs	r3, #1
 800633c:	035a      	lsls	r2, r3, #13
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e007      	b.n	8006358 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006356:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	3b01      	subs	r3, #1
 8006374:	051a      	lsls	r2, r3, #20
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800638c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6899      	ldr	r1, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800639a:	025a      	lsls	r2, r3, #9
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689a      	ldr	r2, [r3, #8]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6899      	ldr	r1, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	029a      	lsls	r2, r3, #10
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	40012300 	.word	0x40012300
 80063d8:	0f000001 	.word	0x0f000001

080063dc <__NVIC_SetPriorityGrouping>:
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <__NVIC_SetPriorityGrouping+0x40>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063f8:	4013      	ands	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006404:	4b06      	ldr	r3, [pc, #24]	; (8006420 <__NVIC_SetPriorityGrouping+0x44>)
 8006406:	4313      	orrs	r3, r2
 8006408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800640a:	4a04      	ldr	r2, [pc, #16]	; (800641c <__NVIC_SetPriorityGrouping+0x40>)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	60d3      	str	r3, [r2, #12]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	e000ed00 	.word	0xe000ed00
 8006420:	05fa0000 	.word	0x05fa0000

08006424 <__NVIC_GetPriorityGrouping>:
{
 8006424:	b480      	push	{r7}
 8006426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006428:	4b04      	ldr	r3, [pc, #16]	; (800643c <__NVIC_GetPriorityGrouping+0x18>)
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	0a1b      	lsrs	r3, r3, #8
 800642e:	f003 0307 	and.w	r3, r3, #7
}
 8006432:	4618      	mov	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	e000ed00 	.word	0xe000ed00

08006440 <__NVIC_EnableIRQ>:
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	2b00      	cmp	r3, #0
 8006450:	db0b      	blt.n	800646a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	f003 021f 	and.w	r2, r3, #31
 8006458:	4907      	ldr	r1, [pc, #28]	; (8006478 <__NVIC_EnableIRQ+0x38>)
 800645a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2001      	movs	r0, #1
 8006462:	fa00 f202 	lsl.w	r2, r0, r2
 8006466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	e000e100 	.word	0xe000e100

0800647c <__NVIC_SetPriority>:
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648c:	2b00      	cmp	r3, #0
 800648e:	db0a      	blt.n	80064a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	490c      	ldr	r1, [pc, #48]	; (80064c8 <__NVIC_SetPriority+0x4c>)
 8006496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800649a:	0112      	lsls	r2, r2, #4
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	440b      	add	r3, r1
 80064a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064a4:	e00a      	b.n	80064bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4908      	ldr	r1, [pc, #32]	; (80064cc <__NVIC_SetPriority+0x50>)
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	3b04      	subs	r3, #4
 80064b4:	0112      	lsls	r2, r2, #4
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	440b      	add	r3, r1
 80064ba:	761a      	strb	r2, [r3, #24]
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000e100 	.word	0xe000e100
 80064cc:	e000ed00 	.word	0xe000ed00

080064d0 <NVIC_EncodePriority>:
{
 80064d0:	b480      	push	{r7}
 80064d2:	b089      	sub	sp, #36	; 0x24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	f1c3 0307 	rsb	r3, r3, #7
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	bf28      	it	cs
 80064ee:	2304      	movcs	r3, #4
 80064f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	3304      	adds	r3, #4
 80064f6:	2b06      	cmp	r3, #6
 80064f8:	d902      	bls.n	8006500 <NVIC_EncodePriority+0x30>
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3b03      	subs	r3, #3
 80064fe:	e000      	b.n	8006502 <NVIC_EncodePriority+0x32>
 8006500:	2300      	movs	r3, #0
 8006502:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43da      	mvns	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	401a      	ands	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006518:	f04f 31ff 	mov.w	r1, #4294967295
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	fa01 f303 	lsl.w	r3, r1, r3
 8006522:	43d9      	mvns	r1, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006528:	4313      	orrs	r3, r2
}
 800652a:	4618      	mov	r0, r3
 800652c:	3724      	adds	r7, #36	; 0x24
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
	...

08006538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3b01      	subs	r3, #1
 8006544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006548:	d301      	bcc.n	800654e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800654a:	2301      	movs	r3, #1
 800654c:	e00f      	b.n	800656e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800654e:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <SysTick_Config+0x40>)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3b01      	subs	r3, #1
 8006554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006556:	210f      	movs	r1, #15
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	f7ff ff8e 	bl	800647c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006560:	4b05      	ldr	r3, [pc, #20]	; (8006578 <SysTick_Config+0x40>)
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <SysTick_Config+0x40>)
 8006568:	2207      	movs	r2, #7
 800656a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	e000e010 	.word	0xe000e010

0800657c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff ff29 	bl	80063dc <__NVIC_SetPriorityGrouping>
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006592:	b580      	push	{r7, lr}
 8006594:	b086      	sub	sp, #24
 8006596:	af00      	add	r7, sp, #0
 8006598:	4603      	mov	r3, r0
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	607a      	str	r2, [r7, #4]
 800659e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065a4:	f7ff ff3e 	bl	8006424 <__NVIC_GetPriorityGrouping>
 80065a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff ff8e 	bl	80064d0 <NVIC_EncodePriority>
 80065b4:	4602      	mov	r2, r0
 80065b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ff5d 	bl	800647c <__NVIC_SetPriority>
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	4603      	mov	r3, r0
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff ff31 	bl	8006440 <__NVIC_EnableIRQ>
}
 80065de:	bf00      	nop
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ffa2 	bl	8006538 <SysTick_Config>
 80065f4:	4603      	mov	r3, r0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800660c:	f7ff fc2e 	bl	8005e6c <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e099      	b.n	8006750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800663c:	e00f      	b.n	800665e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800663e:	f7ff fc15 	bl	8005e6c <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b05      	cmp	r3, #5
 800664a:	d908      	bls.n	800665e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2203      	movs	r2, #3
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e078      	b.n	8006750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e8      	bne.n	800663e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4b38      	ldr	r3, [pc, #224]	; (8006758 <HAL_DMA_Init+0x158>)
 8006678:	4013      	ands	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800668a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d107      	bne.n	80066c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4313      	orrs	r3, r2
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0307 	bic.w	r3, r3, #7
 80066de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	d117      	bne.n	8006722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00e      	beq.n	8006722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fb09 	bl	8006d1c <DMA_CheckFifoParam>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d008      	beq.n	8006722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2240      	movs	r2, #64	; 0x40
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800671e:	2301      	movs	r3, #1
 8006720:	e016      	b.n	8006750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fac0 	bl	8006cb0 <DMA_CalcBaseAndBitshift>
 8006730:	4603      	mov	r3, r0
 8006732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006738:	223f      	movs	r2, #63	; 0x3f
 800673a:	409a      	lsls	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	f010803f 	.word	0xf010803f

0800675c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800677a:	2b01      	cmp	r3, #1
 800677c:	d101      	bne.n	8006782 <HAL_DMA_Start_IT+0x26>
 800677e:	2302      	movs	r3, #2
 8006780:	e048      	b.n	8006814 <HAL_DMA_Start_IT+0xb8>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	d137      	bne.n	8006806 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2202      	movs	r2, #2
 800679a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fa52 	bl	8006c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067b4:	223f      	movs	r2, #63	; 0x3f
 80067b6:	409a      	lsls	r2, r3
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0216 	orr.w	r2, r2, #22
 80067ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695a      	ldr	r2, [r3, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0208 	orr.w	r2, r2, #8
 80067f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e005      	b.n	8006812 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800680e:	2302      	movs	r3, #2
 8006810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800682a:	f7ff fb1f 	bl	8005e6c <HAL_GetTick>
 800682e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d008      	beq.n	800684e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e052      	b.n	80068f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0216 	bic.w	r2, r2, #22
 800685c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695a      	ldr	r2, [r3, #20]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800686c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <HAL_DMA_Abort+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	2b00      	cmp	r3, #0
 800687c:	d007      	beq.n	800688e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0208 	bic.w	r2, r2, #8
 800688c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800689e:	e013      	b.n	80068c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80068a0:	f7ff fae4 	bl	8005e6c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b05      	cmp	r3, #5
 80068ac:	d90c      	bls.n	80068c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2220      	movs	r2, #32
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2203      	movs	r2, #3
 80068c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e015      	b.n	80068f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e4      	bne.n	80068a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	223f      	movs	r2, #63	; 0x3f
 80068dc:	409a      	lsls	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b02      	cmp	r3, #2
 800690e:	d004      	beq.n	800691a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2280      	movs	r2, #128	; 0x80
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e00c      	b.n	8006934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2205      	movs	r2, #5
 800691e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800694c:	4b92      	ldr	r3, [pc, #584]	; (8006b98 <HAL_DMA_IRQHandler+0x258>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a92      	ldr	r2, [pc, #584]	; (8006b9c <HAL_DMA_IRQHandler+0x25c>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	0a9b      	lsrs	r3, r3, #10
 8006958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696a:	2208      	movs	r2, #8
 800696c:	409a      	lsls	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d01a      	beq.n	80069ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0204 	bic.w	r2, r2, #4
 8006992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006998:	2208      	movs	r2, #8
 800699a:	409a      	lsls	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	f043 0201 	orr.w	r2, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b0:	2201      	movs	r2, #1
 80069b2:	409a      	lsls	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d012      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ce:	2201      	movs	r2, #1
 80069d0:	409a      	lsls	r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069da:	f043 0202 	orr.w	r2, r3, #2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e6:	2204      	movs	r2, #4
 80069e8:	409a      	lsls	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4013      	ands	r3, r2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d012      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	2204      	movs	r2, #4
 8006a06:	409a      	lsls	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f043 0204 	orr.w	r2, r3, #4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	2210      	movs	r2, #16
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d043      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03c      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d018      	beq.n	8006a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d024      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	e01f      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01b      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	4798      	blx	r3
 8006a80:	e016      	b.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d107      	bne.n	8006aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0208 	bic.w	r2, r2, #8
 8006a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	409a      	lsls	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 808e 	beq.w	8006bde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0310 	and.w	r3, r3, #16
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8086 	beq.w	8006bde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d136      	bne.n	8006b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0216 	bic.w	r2, r2, #22
 8006af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695a      	ldr	r2, [r3, #20]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d103      	bne.n	8006b1a <HAL_DMA_IRQHandler+0x1da>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d007      	beq.n	8006b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f022 0208 	bic.w	r2, r2, #8
 8006b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2e:	223f      	movs	r2, #63	; 0x3f
 8006b30:	409a      	lsls	r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d07d      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	4798      	blx	r3
        }
        return;
 8006b56:	e078      	b.n	8006c4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01c      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d030      	beq.n	8006bde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
 8006b84:	e02b      	b.n	8006bde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d027      	beq.n	8006bde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
 8006b96:	e022      	b.n	8006bde <HAL_DMA_IRQHandler+0x29e>
 8006b98:	2000001c 	.word	0x2000001c
 8006b9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0210 	bic.w	r2, r2, #16
 8006bbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d032      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d022      	beq.n	8006c38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2205      	movs	r2, #5
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 0201 	bic.w	r2, r2, #1
 8006c08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	60bb      	str	r3, [r7, #8]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d307      	bcc.n	8006c26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1f2      	bne.n	8006c0a <HAL_DMA_IRQHandler+0x2ca>
 8006c24:	e000      	b.n	8006c28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006c26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
 8006c48:	e000      	b.n	8006c4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8006c4a:	bf00      	nop
    }
  }
}
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d108      	bne.n	8006c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c92:	e007      	b.n	8006ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	60da      	str	r2, [r3, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	3b10      	subs	r3, #16
 8006cc0:	4a13      	ldr	r2, [pc, #76]	; (8006d10 <DMA_CalcBaseAndBitshift+0x60>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006cca:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <DMA_CalcBaseAndBitshift+0x64>)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d908      	bls.n	8006cf0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <DMA_CalcBaseAndBitshift+0x68>)
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	1d1a      	adds	r2, r3, #4
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	659a      	str	r2, [r3, #88]	; 0x58
 8006cee:	e006      	b.n	8006cfe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4b08      	ldr	r3, [pc, #32]	; (8006d18 <DMA_CalcBaseAndBitshift+0x68>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	aaaaaaab 	.word	0xaaaaaaab
 8006d14:	08011c70 	.word	0x08011c70
 8006d18:	fffffc00 	.word	0xfffffc00

08006d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d11f      	bne.n	8006d76 <DMA_CheckFifoParam+0x5a>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d856      	bhi.n	8006dea <DMA_CheckFifoParam+0xce>
 8006d3c:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <DMA_CheckFifoParam+0x28>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d67 	.word	0x08006d67
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006deb 	.word	0x08006deb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d046      	beq.n	8006dee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d64:	e043      	b.n	8006dee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d6e:	d140      	bne.n	8006df2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d74:	e03d      	b.n	8006df2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7e:	d121      	bne.n	8006dc4 <DMA_CheckFifoParam+0xa8>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d837      	bhi.n	8006df6 <DMA_CheckFifoParam+0xda>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <DMA_CheckFifoParam+0x70>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006da3 	.word	0x08006da3
 8006d94:	08006d9d 	.word	0x08006d9d
 8006d98:	08006db5 	.word	0x08006db5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e030      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d025      	beq.n	8006dfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006db2:	e022      	b.n	8006dfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dbc:	d11f      	bne.n	8006dfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006dc2:	e01c      	b.n	8006dfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d903      	bls.n	8006dd2 <DMA_CheckFifoParam+0xb6>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d003      	beq.n	8006dd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006dd0:	e018      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dd6:	e015      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00e      	beq.n	8006e02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      break;
 8006de8:	e00b      	b.n	8006e02 <DMA_CheckFifoParam+0xe6>
      break;
 8006dea:	bf00      	nop
 8006dec:	e00a      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006dee:	bf00      	nop
 8006df0:	e008      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006df2:	bf00      	nop
 8006df4:	e006      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006df6:	bf00      	nop
 8006df8:	e004      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006dfa:	bf00      	nop
 8006dfc:	e002      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;   
 8006dfe:	bf00      	nop
 8006e00:	e000      	b.n	8006e04 <DMA_CheckFifoParam+0xe8>
      break;
 8006e02:	bf00      	nop
    }
  } 
  
  return status; 
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop

08006e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e26:	2300      	movs	r3, #0
 8006e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	e175      	b.n	8007120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e34:	2201      	movs	r2, #1
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4013      	ands	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	f040 8164 	bne.w	800711a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d00b      	beq.n	8006e72 <HAL_GPIO_Init+0x5e>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d007      	beq.n	8006e72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e66:	2b11      	cmp	r3, #17
 8006e68:	d003      	beq.n	8006e72 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2b12      	cmp	r3, #18
 8006e70:	d130      	bne.n	8006ed4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	43db      	mvns	r3, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	4013      	ands	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	69ba      	ldr	r2, [r7, #24]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	091b      	lsrs	r3, r3, #4
 8006ebe:	f003 0201 	and.w	r2, r3, #1
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	2203      	movs	r2, #3
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d003      	beq.n	8006f14 <HAL_GPIO_Init+0x100>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b12      	cmp	r3, #18
 8006f12:	d123      	bne.n	8006f5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	08da      	lsrs	r2, r3, #3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3208      	adds	r2, #8
 8006f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f003 0307 	and.w	r3, r3, #7
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	220f      	movs	r2, #15
 8006f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f30:	43db      	mvns	r3, r3
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	4013      	ands	r3, r2
 8006f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	691a      	ldr	r2, [r3, #16]
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	f003 0307 	and.w	r3, r3, #7
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	08da      	lsrs	r2, r3, #3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3208      	adds	r2, #8
 8006f56:	69b9      	ldr	r1, [r7, #24]
 8006f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	2203      	movs	r2, #3
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4013      	ands	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f003 0203 	and.w	r2, r3, #3
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	fa02 f303 	lsl.w	r3, r2, r3
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 80be 	beq.w	800711a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f9e:	4b66      	ldr	r3, [pc, #408]	; (8007138 <HAL_GPIO_Init+0x324>)
 8006fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fa2:	4a65      	ldr	r2, [pc, #404]	; (8007138 <HAL_GPIO_Init+0x324>)
 8006fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8006faa:	4b63      	ldr	r3, [pc, #396]	; (8007138 <HAL_GPIO_Init+0x324>)
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fb6:	4a61      	ldr	r2, [pc, #388]	; (800713c <HAL_GPIO_Init+0x328>)
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	089b      	lsrs	r3, r3, #2
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	220f      	movs	r2, #15
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	43db      	mvns	r3, r3
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a58      	ldr	r2, [pc, #352]	; (8007140 <HAL_GPIO_Init+0x32c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d037      	beq.n	8007052 <HAL_GPIO_Init+0x23e>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a57      	ldr	r2, [pc, #348]	; (8007144 <HAL_GPIO_Init+0x330>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d031      	beq.n	800704e <HAL_GPIO_Init+0x23a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a56      	ldr	r2, [pc, #344]	; (8007148 <HAL_GPIO_Init+0x334>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d02b      	beq.n	800704a <HAL_GPIO_Init+0x236>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a55      	ldr	r2, [pc, #340]	; (800714c <HAL_GPIO_Init+0x338>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d025      	beq.n	8007046 <HAL_GPIO_Init+0x232>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a54      	ldr	r2, [pc, #336]	; (8007150 <HAL_GPIO_Init+0x33c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01f      	beq.n	8007042 <HAL_GPIO_Init+0x22e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a53      	ldr	r2, [pc, #332]	; (8007154 <HAL_GPIO_Init+0x340>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d019      	beq.n	800703e <HAL_GPIO_Init+0x22a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a52      	ldr	r2, [pc, #328]	; (8007158 <HAL_GPIO_Init+0x344>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <HAL_GPIO_Init+0x226>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a51      	ldr	r2, [pc, #324]	; (800715c <HAL_GPIO_Init+0x348>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d00d      	beq.n	8007036 <HAL_GPIO_Init+0x222>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a50      	ldr	r2, [pc, #320]	; (8007160 <HAL_GPIO_Init+0x34c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d007      	beq.n	8007032 <HAL_GPIO_Init+0x21e>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a4f      	ldr	r2, [pc, #316]	; (8007164 <HAL_GPIO_Init+0x350>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d101      	bne.n	800702e <HAL_GPIO_Init+0x21a>
 800702a:	2309      	movs	r3, #9
 800702c:	e012      	b.n	8007054 <HAL_GPIO_Init+0x240>
 800702e:	230a      	movs	r3, #10
 8007030:	e010      	b.n	8007054 <HAL_GPIO_Init+0x240>
 8007032:	2308      	movs	r3, #8
 8007034:	e00e      	b.n	8007054 <HAL_GPIO_Init+0x240>
 8007036:	2307      	movs	r3, #7
 8007038:	e00c      	b.n	8007054 <HAL_GPIO_Init+0x240>
 800703a:	2306      	movs	r3, #6
 800703c:	e00a      	b.n	8007054 <HAL_GPIO_Init+0x240>
 800703e:	2305      	movs	r3, #5
 8007040:	e008      	b.n	8007054 <HAL_GPIO_Init+0x240>
 8007042:	2304      	movs	r3, #4
 8007044:	e006      	b.n	8007054 <HAL_GPIO_Init+0x240>
 8007046:	2303      	movs	r3, #3
 8007048:	e004      	b.n	8007054 <HAL_GPIO_Init+0x240>
 800704a:	2302      	movs	r3, #2
 800704c:	e002      	b.n	8007054 <HAL_GPIO_Init+0x240>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <HAL_GPIO_Init+0x240>
 8007052:	2300      	movs	r3, #0
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	f002 0203 	and.w	r2, r2, #3
 800705a:	0092      	lsls	r2, r2, #2
 800705c:	4093      	lsls	r3, r2
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4313      	orrs	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007064:	4935      	ldr	r1, [pc, #212]	; (800713c <HAL_GPIO_Init+0x328>)
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	089b      	lsrs	r3, r3, #2
 800706a:	3302      	adds	r3, #2
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007072:	4b3d      	ldr	r3, [pc, #244]	; (8007168 <HAL_GPIO_Init+0x354>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	43db      	mvns	r3, r3
 800707c:	69ba      	ldr	r2, [r7, #24]
 800707e:	4013      	ands	r3, r2
 8007080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800708e:	69ba      	ldr	r2, [r7, #24]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007096:	4a34      	ldr	r2, [pc, #208]	; (8007168 <HAL_GPIO_Init+0x354>)
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800709c:	4b32      	ldr	r3, [pc, #200]	; (8007168 <HAL_GPIO_Init+0x354>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	43db      	mvns	r3, r3
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	4013      	ands	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070c0:	4a29      	ldr	r2, [pc, #164]	; (8007168 <HAL_GPIO_Init+0x354>)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070c6:	4b28      	ldr	r3, [pc, #160]	; (8007168 <HAL_GPIO_Init+0x354>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	43db      	mvns	r3, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4013      	ands	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070ea:	4a1f      	ldr	r2, [pc, #124]	; (8007168 <HAL_GPIO_Init+0x354>)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <HAL_GPIO_Init+0x354>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	43db      	mvns	r3, r3
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	4013      	ands	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	4313      	orrs	r3, r2
 8007112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007114:	4a14      	ldr	r2, [pc, #80]	; (8007168 <HAL_GPIO_Init+0x354>)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	3301      	adds	r3, #1
 800711e:	61fb      	str	r3, [r7, #28]
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b0f      	cmp	r3, #15
 8007124:	f67f ae86 	bls.w	8006e34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	3724      	adds	r7, #36	; 0x24
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40023800 	.word	0x40023800
 800713c:	40013800 	.word	0x40013800
 8007140:	40020000 	.word	0x40020000
 8007144:	40020400 	.word	0x40020400
 8007148:	40020800 	.word	0x40020800
 800714c:	40020c00 	.word	0x40020c00
 8007150:	40021000 	.word	0x40021000
 8007154:	40021400 	.word	0x40021400
 8007158:	40021800 	.word	0x40021800
 800715c:	40021c00 	.word	0x40021c00
 8007160:	40022000 	.word	0x40022000
 8007164:	40022400 	.word	0x40022400
 8007168:	40013c00 	.word	0x40013c00

0800716c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	887b      	ldrh	r3, [r7, #2]
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
 8007188:	e001      	b.n	800718e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800718a:	2300      	movs	r3, #0
 800718c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800718e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	460b      	mov	r3, r1
 80071a6:	807b      	strh	r3, [r7, #2]
 80071a8:	4613      	mov	r3, r2
 80071aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80071ac:	787b      	ldrb	r3, [r7, #1]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071b2:	887a      	ldrh	r2, [r7, #2]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80071b8:	e003      	b.n	80071c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80071ba:	887b      	ldrh	r3, [r7, #2]
 80071bc:	041a      	lsls	r2, r3, #16
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	619a      	str	r2, [r3, #24]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e07f      	b.n	80072e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fd fa94 	bl	8004724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2224      	movs	r2, #36	; 0x24
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007220:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007230:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d107      	bne.n	800724a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007246:	609a      	str	r2, [r3, #8]
 8007248:	e006      	b.n	8007258 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007256:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	2b02      	cmp	r3, #2
 800725e:	d104      	bne.n	800726a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007268:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6859      	ldr	r1, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b1d      	ldr	r3, [pc, #116]	; (80072ec <HAL_I2C_Init+0x11c>)
 8007276:	430b      	orrs	r3, r1
 8007278:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007288:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	ea42 0103 	orr.w	r1, r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	69d9      	ldr	r1, [r3, #28]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1a      	ldr	r2, [r3, #32]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0201 	orr.w	r2, r2, #1
 80072c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	02008000 	.word	0x02008000

080072f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b088      	sub	sp, #32
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	461a      	mov	r2, r3
 80072fc:	460b      	mov	r3, r1
 80072fe:	817b      	strh	r3, [r7, #10]
 8007300:	4613      	mov	r3, r2
 8007302:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b20      	cmp	r3, #32
 800730e:	f040 80da 	bne.w	80074c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_I2C_Master_Transmit+0x30>
 800731c:	2302      	movs	r3, #2
 800731e:	e0d3      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1d8>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007328:	f7fe fda0 	bl	8005e6c <HAL_GetTick>
 800732c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	2319      	movs	r3, #25
 8007334:	2201      	movs	r2, #1
 8007336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f9e6 	bl	800770c <I2C_WaitOnFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e0be      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2221      	movs	r2, #33	; 0x21
 800734e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2210      	movs	r2, #16
 8007356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	893a      	ldrh	r2, [r7, #8]
 800736a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007376:	b29b      	uxth	r3, r3
 8007378:	2bff      	cmp	r3, #255	; 0xff
 800737a:	d90e      	bls.n	800739a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	22ff      	movs	r2, #255	; 0xff
 8007380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007386:	b2da      	uxtb	r2, r3
 8007388:	8979      	ldrh	r1, [r7, #10]
 800738a:	4b51      	ldr	r3, [pc, #324]	; (80074d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 fb48 	bl	8007a28 <I2C_TransferConfig>
 8007398:	e06c      	b.n	8007474 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	8979      	ldrh	r1, [r7, #10]
 80073ac:	4b48      	ldr	r3, [pc, #288]	; (80074d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 fb37 	bl	8007a28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80073ba:	e05b      	b.n	8007474 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	6a39      	ldr	r1, [r7, #32]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f9e3 	bl	800778c <I2C_WaitOnTXISFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e07b      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d034      	beq.n	8007474 <HAL_I2C_Master_Transmit+0x184>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d130      	bne.n	8007474 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	2200      	movs	r2, #0
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f975 	bl	800770c <I2C_WaitOnFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e04d      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	2bff      	cmp	r3, #255	; 0xff
 8007434:	d90e      	bls.n	8007454 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	22ff      	movs	r2, #255	; 0xff
 800743a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007440:	b2da      	uxtb	r2, r3
 8007442:	8979      	ldrh	r1, [r7, #10]
 8007444:	2300      	movs	r3, #0
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 faeb 	bl	8007a28 <I2C_TransferConfig>
 8007452:	e00f      	b.n	8007474 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007462:	b2da      	uxtb	r2, r3
 8007464:	8979      	ldrh	r1, [r7, #10]
 8007466:	2300      	movs	r3, #0
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 fada 	bl	8007a28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d19e      	bne.n	80073bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	6a39      	ldr	r1, [r7, #32]
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f9c2 	bl	800780c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e01a      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2220      	movs	r2, #32
 8007498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6859      	ldr	r1, [r3, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80074a6:	400b      	ands	r3, r1
 80074a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e000      	b.n	80074c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80074c6:	2302      	movs	r3, #2
  }
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	80002000 	.word	0x80002000
 80074d4:	fe00e800 	.word	0xfe00e800

080074d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af02      	add	r7, sp, #8
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	461a      	mov	r2, r3
 80074e4:	460b      	mov	r3, r1
 80074e6:	817b      	strh	r3, [r7, #10]
 80074e8:	4613      	mov	r3, r2
 80074ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	f040 80db 	bne.w	80076b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_I2C_Master_Receive+0x30>
 8007504:	2302      	movs	r3, #2
 8007506:	e0d4      	b.n	80076b2 <HAL_I2C_Master_Receive+0x1da>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007510:	f7fe fcac 	bl	8005e6c <HAL_GetTick>
 8007514:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	2319      	movs	r3, #25
 800751c:	2201      	movs	r2, #1
 800751e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f8f2 	bl	800770c <I2C_WaitOnFlagUntilTimeout>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e0bf      	b.n	80076b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2222      	movs	r2, #34	; 0x22
 8007536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2210      	movs	r2, #16
 800753e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	893a      	ldrh	r2, [r7, #8]
 8007552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800755e:	b29b      	uxth	r3, r3
 8007560:	2bff      	cmp	r3, #255	; 0xff
 8007562:	d90e      	bls.n	8007582 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	22ff      	movs	r2, #255	; 0xff
 8007568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756e:	b2da      	uxtb	r2, r3
 8007570:	8979      	ldrh	r1, [r7, #10]
 8007572:	4b52      	ldr	r3, [pc, #328]	; (80076bc <HAL_I2C_Master_Receive+0x1e4>)
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fa54 	bl	8007a28 <I2C_TransferConfig>
 8007580:	e06d      	b.n	800765e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	b2da      	uxtb	r2, r3
 8007592:	8979      	ldrh	r1, [r7, #10]
 8007594:	4b49      	ldr	r3, [pc, #292]	; (80076bc <HAL_I2C_Master_Receive+0x1e4>)
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fa43 	bl	8007a28 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80075a2:	e05c      	b.n	800765e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	6a39      	ldr	r1, [r7, #32]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 f96b 	bl	8007884 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d001      	beq.n	80075b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e07c      	b.n	80076b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	1c5a      	adds	r2, r3, #1
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d034      	beq.n	800765e <HAL_I2C_Master_Receive+0x186>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d130      	bne.n	800765e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	2200      	movs	r2, #0
 8007604:	2180      	movs	r1, #128	; 0x80
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f880 	bl	800770c <I2C_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e04d      	b.n	80076b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761a:	b29b      	uxth	r3, r3
 800761c:	2bff      	cmp	r3, #255	; 0xff
 800761e:	d90e      	bls.n	800763e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	22ff      	movs	r2, #255	; 0xff
 8007624:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762a:	b2da      	uxtb	r2, r3
 800762c:	8979      	ldrh	r1, [r7, #10]
 800762e:	2300      	movs	r3, #0
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f000 f9f6 	bl	8007a28 <I2C_TransferConfig>
 800763c:	e00f      	b.n	800765e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764c:	b2da      	uxtb	r2, r3
 800764e:	8979      	ldrh	r1, [r7, #10]
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f9e5 	bl	8007a28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d19d      	bne.n	80075a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	6a39      	ldr	r1, [r7, #32]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f8cd 	bl	800780c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e01a      	b.n	80076b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2220      	movs	r2, #32
 8007682:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	4b0c      	ldr	r3, [pc, #48]	; (80076c0 <HAL_I2C_Master_Receive+0x1e8>)
 8007690:	400b      	ands	r3, r1
 8007692:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e000      	b.n	80076b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	80002400 	.word	0x80002400
 80076c0:	fe00e800 	.word	0xfe00e800

080076c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d103      	bne.n	80076e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d007      	beq.n	8007700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0201 	orr.w	r2, r2, #1
 80076fe:	619a      	str	r2, [r3, #24]
  }
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	4613      	mov	r3, r2
 800771a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800771c:	e022      	b.n	8007764 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007724:	d01e      	beq.n	8007764 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007726:	f7fe fba1 	bl	8005e6c <HAL_GetTick>
 800772a:	4602      	mov	r2, r0
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	429a      	cmp	r2, r3
 8007734:	d302      	bcc.n	800773c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d113      	bne.n	8007764 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007740:	f043 0220 	orr.w	r2, r3, #32
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e00f      	b.n	8007784 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4013      	ands	r3, r2
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	bf0c      	ite	eq
 8007774:	2301      	moveq	r3, #1
 8007776:	2300      	movne	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	429a      	cmp	r2, r3
 8007780:	d0cd      	beq.n	800771e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007798:	e02c      	b.n	80077f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	68b9      	ldr	r1, [r7, #8]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f8dc 	bl	800795c <I2C_IsAcknowledgeFailed>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e02a      	b.n	8007804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d01e      	beq.n	80077f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b6:	f7fe fb59 	bl	8005e6c <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d302      	bcc.n	80077cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d113      	bne.n	80077f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d0:	f043 0220 	orr.w	r2, r3, #32
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e007      	b.n	8007804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d1cb      	bne.n	800779a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007818:	e028      	b.n	800786c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f000 f89c 	bl	800795c <I2C_IsAcknowledgeFailed>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e026      	b.n	800787c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782e:	f7fe fb1d 	bl	8005e6c <HAL_GetTick>
 8007832:	4602      	mov	r2, r0
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	d302      	bcc.n	8007844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d113      	bne.n	800786c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007848:	f043 0220 	orr.w	r2, r3, #32
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007868:	2301      	movs	r3, #1
 800786a:	e007      	b.n	800787c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b20      	cmp	r3, #32
 8007878:	d1cf      	bne.n	800781a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007890:	e055      	b.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 f860 	bl	800795c <I2C_IsAcknowledgeFailed>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e053      	b.n	800794e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b20      	cmp	r3, #32
 80078b2:	d129      	bne.n	8007908 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d105      	bne.n	80078ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e03f      	b.n	800794e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2220      	movs	r2, #32
 80078d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6859      	ldr	r1, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80078e2:	400b      	ands	r3, r1
 80078e4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e022      	b.n	800794e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007908:	f7fe fab0 	bl	8005e6c <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	429a      	cmp	r2, r3
 8007916:	d302      	bcc.n	800791e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10f      	bne.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007922:	f043 0220 	orr.w	r2, r3, #32
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e007      	b.n	800794e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f003 0304 	and.w	r3, r3, #4
 8007948:	2b04      	cmp	r3, #4
 800794a:	d1a2      	bne.n	8007892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	fe00e800 	.word	0xfe00e800

0800795c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f003 0310 	and.w	r3, r3, #16
 8007972:	2b10      	cmp	r3, #16
 8007974:	d151      	bne.n	8007a1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007976:	e022      	b.n	80079be <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d01e      	beq.n	80079be <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007980:	f7fe fa74 	bl	8005e6c <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d302      	bcc.n	8007996 <I2C_IsAcknowledgeFailed+0x3a>
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d113      	bne.n	80079be <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800799a:	f043 0220 	orr.w	r2, r3, #32
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e02e      	b.n	8007a1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d1d5      	bne.n	8007978 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2210      	movs	r2, #16
 80079d2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2220      	movs	r2, #32
 80079da:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f7ff fe71 	bl	80076c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6859      	ldr	r1, [r3, #4]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4b0d      	ldr	r3, [pc, #52]	; (8007a24 <I2C_IsAcknowledgeFailed+0xc8>)
 80079ee:	400b      	ands	r3, r1
 80079f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f6:	f043 0204 	orr.w	r2, r3, #4
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2220      	movs	r2, #32
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	fe00e800 	.word	0xfe00e800

08007a28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	817b      	strh	r3, [r7, #10]
 8007a36:	4613      	mov	r3, r2
 8007a38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	0d5b      	lsrs	r3, r3, #21
 8007a44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007a48:	4b0d      	ldr	r3, [pc, #52]	; (8007a80 <I2C_TransferConfig+0x58>)
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	ea02 0103 	and.w	r1, r2, r3
 8007a52:	897b      	ldrh	r3, [r7, #10]
 8007a54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a58:	7a7b      	ldrb	r3, [r7, #9]
 8007a5a:	041b      	lsls	r3, r3, #16
 8007a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	431a      	orrs	r2, r3
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007a72:	bf00      	nop
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	03ff63ff 	.word	0x03ff63ff

08007a84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b20      	cmp	r3, #32
 8007a98:	d138      	bne.n	8007b0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e032      	b.n	8007b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2224      	movs	r2, #36	; 0x24
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 0201 	bic.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ad6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6819      	ldr	r1, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e000      	b.n	8007b0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b0c:	2302      	movs	r3, #2
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr

08007b1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d139      	bne.n	8007ba4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e033      	b.n	8007ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2224      	movs	r2, #36	; 0x24
 8007b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0201 	bic.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0201 	orr.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
	...

08007bb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007bbe:	4b23      	ldr	r3, [pc, #140]	; (8007c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	4a22      	ldr	r2, [pc, #136]	; (8007c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8007bca:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd2:	603b      	str	r3, [r7, #0]
 8007bd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007bd6:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1d      	ldr	r2, [pc, #116]	; (8007c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007be2:	f7fe f943 	bl	8005e6c <HAL_GetTick>
 8007be6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007be8:	e009      	b.n	8007bfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007bea:	f7fe f93f 	bl	8005e6c <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bf8:	d901      	bls.n	8007bfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e022      	b.n	8007c44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007bfe:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0a:	d1ee      	bne.n	8007bea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c0c:	4b10      	ldr	r3, [pc, #64]	; (8007c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a0f      	ldr	r2, [pc, #60]	; (8007c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c18:	f7fe f928 	bl	8005e6c <HAL_GetTick>
 8007c1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c1e:	e009      	b.n	8007c34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c20:	f7fe f924 	bl	8005e6c <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c2e:	d901      	bls.n	8007c34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007c30:	2303      	movs	r3, #3
 8007c32:	e007      	b.n	8007c44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c40:	d1ee      	bne.n	8007c20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	40007000 	.word	0x40007000

08007c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e291      	b.n	800818e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8087 	beq.w	8007d86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c78:	4b96      	ldr	r3, [pc, #600]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f003 030c 	and.w	r3, r3, #12
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d00c      	beq.n	8007c9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c84:	4b93      	ldr	r3, [pc, #588]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f003 030c 	and.w	r3, r3, #12
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d112      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x62>
 8007c90:	4b90      	ldr	r3, [pc, #576]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c9c:	d10b      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c9e:	4b8d      	ldr	r3, [pc, #564]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d06c      	beq.n	8007d84 <HAL_RCC_OscConfig+0x130>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d168      	bne.n	8007d84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e26b      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbe:	d106      	bne.n	8007cce <HAL_RCC_OscConfig+0x7a>
 8007cc0:	4b84      	ldr	r3, [pc, #528]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a83      	ldr	r2, [pc, #524]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	e02e      	b.n	8007d2c <HAL_RCC_OscConfig+0xd8>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10c      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x9c>
 8007cd6:	4b7f      	ldr	r3, [pc, #508]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a7e      	ldr	r2, [pc, #504]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	4b7c      	ldr	r3, [pc, #496]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a7b      	ldr	r2, [pc, #492]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e01d      	b.n	8007d2c <HAL_RCC_OscConfig+0xd8>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cf8:	d10c      	bne.n	8007d14 <HAL_RCC_OscConfig+0xc0>
 8007cfa:	4b76      	ldr	r3, [pc, #472]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a75      	ldr	r2, [pc, #468]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	4b73      	ldr	r3, [pc, #460]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a72      	ldr	r2, [pc, #456]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e00b      	b.n	8007d2c <HAL_RCC_OscConfig+0xd8>
 8007d14:	4b6f      	ldr	r3, [pc, #444]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a6e      	ldr	r2, [pc, #440]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	4b6c      	ldr	r3, [pc, #432]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a6b      	ldr	r2, [pc, #428]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d013      	beq.n	8007d5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d34:	f7fe f89a 	bl	8005e6c <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d3a:	e008      	b.n	8007d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d3c:	f7fe f896 	bl	8005e6c <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	2b64      	cmp	r3, #100	; 0x64
 8007d48:	d901      	bls.n	8007d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e21f      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d4e:	4b61      	ldr	r3, [pc, #388]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0f0      	beq.n	8007d3c <HAL_RCC_OscConfig+0xe8>
 8007d5a:	e014      	b.n	8007d86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5c:	f7fe f886 	bl	8005e6c <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d64:	f7fe f882 	bl	8005e6c <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b64      	cmp	r3, #100	; 0x64
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e20b      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d76:	4b57      	ldr	r3, [pc, #348]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <HAL_RCC_OscConfig+0x110>
 8007d82:	e000      	b.n	8007d86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d069      	beq.n	8007e66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d92:	4b50      	ldr	r3, [pc, #320]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 030c 	and.w	r3, r3, #12
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d9e:	4b4d      	ldr	r3, [pc, #308]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 030c 	and.w	r3, r3, #12
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d11c      	bne.n	8007de4 <HAL_RCC_OscConfig+0x190>
 8007daa:	4b4a      	ldr	r3, [pc, #296]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d116      	bne.n	8007de4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007db6:	4b47      	ldr	r3, [pc, #284]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_RCC_OscConfig+0x17a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d001      	beq.n	8007dce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e1df      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dce:	4b41      	ldr	r3, [pc, #260]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	493d      	ldr	r1, [pc, #244]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007dde:	4313      	orrs	r3, r2
 8007de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de2:	e040      	b.n	8007e66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d023      	beq.n	8007e34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007dec:	4b39      	ldr	r3, [pc, #228]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a38      	ldr	r2, [pc, #224]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df8:	f7fe f838 	bl	8005e6c <HAL_GetTick>
 8007dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e00:	f7fe f834 	bl	8005e6c <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e1bd      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e12:	4b30      	ldr	r3, [pc, #192]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0302 	and.w	r3, r3, #2
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0f0      	beq.n	8007e00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e1e:	4b2d      	ldr	r3, [pc, #180]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	4929      	ldr	r1, [pc, #164]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	600b      	str	r3, [r1, #0]
 8007e32:	e018      	b.n	8007e66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e34:	4b27      	ldr	r3, [pc, #156]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a26      	ldr	r2, [pc, #152]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e3a:	f023 0301 	bic.w	r3, r3, #1
 8007e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e40:	f7fe f814 	bl	8005e6c <HAL_GetTick>
 8007e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e46:	e008      	b.n	8007e5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e48:	f7fe f810 	bl	8005e6c <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e199      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e5a:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f0      	bne.n	8007e48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0308 	and.w	r3, r3, #8
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d038      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d019      	beq.n	8007eae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e7a:	4b16      	ldr	r3, [pc, #88]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7e:	4a15      	ldr	r2, [pc, #84]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e86:	f7fd fff1 	bl	8005e6c <HAL_GetTick>
 8007e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e8c:	e008      	b.n	8007ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e8e:	f7fd ffed 	bl	8005e6c <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d901      	bls.n	8007ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	e176      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0f0      	beq.n	8007e8e <HAL_RCC_OscConfig+0x23a>
 8007eac:	e01a      	b.n	8007ee4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eb2:	4a08      	ldr	r2, [pc, #32]	; (8007ed4 <HAL_RCC_OscConfig+0x280>)
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eba:	f7fd ffd7 	bl	8005e6c <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ec0:	e00a      	b.n	8007ed8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec2:	f7fd ffd3 	bl	8005e6c <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d903      	bls.n	8007ed8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e15c      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
 8007ed4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed8:	4b91      	ldr	r3, [pc, #580]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ee      	bne.n	8007ec2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 80a4 	beq.w	800803a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ef2:	4b8b      	ldr	r3, [pc, #556]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10d      	bne.n	8007f1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007efe:	4b88      	ldr	r3, [pc, #544]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	4a87      	ldr	r2, [pc, #540]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f08:	6413      	str	r3, [r2, #64]	; 0x40
 8007f0a:	4b85      	ldr	r3, [pc, #532]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f12:	60bb      	str	r3, [r7, #8]
 8007f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f1a:	4b82      	ldr	r3, [pc, #520]	; (8008124 <HAL_RCC_OscConfig+0x4d0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d118      	bne.n	8007f58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007f26:	4b7f      	ldr	r3, [pc, #508]	; (8008124 <HAL_RCC_OscConfig+0x4d0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a7e      	ldr	r2, [pc, #504]	; (8008124 <HAL_RCC_OscConfig+0x4d0>)
 8007f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f32:	f7fd ff9b 	bl	8005e6c <HAL_GetTick>
 8007f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f3a:	f7fd ff97 	bl	8005e6c <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b64      	cmp	r3, #100	; 0x64
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e120      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f4c:	4b75      	ldr	r3, [pc, #468]	; (8008124 <HAL_RCC_OscConfig+0x4d0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d106      	bne.n	8007f6e <HAL_RCC_OscConfig+0x31a>
 8007f60:	4b6f      	ldr	r3, [pc, #444]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	4a6e      	ldr	r2, [pc, #440]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f66:	f043 0301 	orr.w	r3, r3, #1
 8007f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f6c:	e02d      	b.n	8007fca <HAL_RCC_OscConfig+0x376>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10c      	bne.n	8007f90 <HAL_RCC_OscConfig+0x33c>
 8007f76:	4b6a      	ldr	r3, [pc, #424]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	4a69      	ldr	r2, [pc, #420]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	6713      	str	r3, [r2, #112]	; 0x70
 8007f82:	4b67      	ldr	r3, [pc, #412]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f86:	4a66      	ldr	r2, [pc, #408]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f88:	f023 0304 	bic.w	r3, r3, #4
 8007f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f8e:	e01c      	b.n	8007fca <HAL_RCC_OscConfig+0x376>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	2b05      	cmp	r3, #5
 8007f96:	d10c      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x35e>
 8007f98:	4b61      	ldr	r3, [pc, #388]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9c:	4a60      	ldr	r2, [pc, #384]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007f9e:	f043 0304 	orr.w	r3, r3, #4
 8007fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8007fa4:	4b5e      	ldr	r3, [pc, #376]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	4a5d      	ldr	r2, [pc, #372]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007faa:	f043 0301 	orr.w	r3, r3, #1
 8007fae:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb0:	e00b      	b.n	8007fca <HAL_RCC_OscConfig+0x376>
 8007fb2:	4b5b      	ldr	r3, [pc, #364]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb6:	4a5a      	ldr	r2, [pc, #360]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8007fbe:	4b58      	ldr	r3, [pc, #352]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	4a57      	ldr	r2, [pc, #348]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007fc4:	f023 0304 	bic.w	r3, r3, #4
 8007fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d015      	beq.n	8007ffe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd2:	f7fd ff4b 	bl	8005e6c <HAL_GetTick>
 8007fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fd8:	e00a      	b.n	8007ff0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fda:	f7fd ff47 	bl	8005e6c <HAL_GetTick>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d901      	bls.n	8007ff0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e0ce      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff0:	4b4b      	ldr	r3, [pc, #300]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0ee      	beq.n	8007fda <HAL_RCC_OscConfig+0x386>
 8007ffc:	e014      	b.n	8008028 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffe:	f7fd ff35 	bl	8005e6c <HAL_GetTick>
 8008002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008004:	e00a      	b.n	800801c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008006:	f7fd ff31 	bl	8005e6c <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f241 3288 	movw	r2, #5000	; 0x1388
 8008014:	4293      	cmp	r3, r2
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e0b8      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800801c:	4b40      	ldr	r3, [pc, #256]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1ee      	bne.n	8008006 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d105      	bne.n	800803a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800802e:	4b3c      	ldr	r3, [pc, #240]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	4a3b      	ldr	r2, [pc, #236]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8008034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	f000 80a4 	beq.w	800818c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008044:	4b36      	ldr	r3, [pc, #216]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 030c 	and.w	r3, r3, #12
 800804c:	2b08      	cmp	r3, #8
 800804e:	d06b      	beq.n	8008128 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d149      	bne.n	80080ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008058:	4b31      	ldr	r3, [pc, #196]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a30      	ldr	r2, [pc, #192]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 800805e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008064:	f7fd ff02 	bl	8005e6c <HAL_GetTick>
 8008068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806a:	e008      	b.n	800807e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800806c:	f7fd fefe 	bl	8005e6c <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	2b02      	cmp	r3, #2
 8008078:	d901      	bls.n	800807e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e087      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800807e:	4b28      	ldr	r3, [pc, #160]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f0      	bne.n	800806c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	69da      	ldr	r2, [r3, #28]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	019b      	lsls	r3, r3, #6
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a0:	085b      	lsrs	r3, r3, #1
 80080a2:	3b01      	subs	r3, #1
 80080a4:	041b      	lsls	r3, r3, #16
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	061b      	lsls	r3, r3, #24
 80080ae:	4313      	orrs	r3, r2
 80080b0:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 80080b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b8:	4b19      	ldr	r3, [pc, #100]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a18      	ldr	r2, [pc, #96]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 80080be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c4:	f7fd fed2 	bl	8005e6c <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ca:	e008      	b.n	80080de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080cc:	f7fd fece 	bl	8005e6c <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e057      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080de:	4b10      	ldr	r3, [pc, #64]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f0      	beq.n	80080cc <HAL_RCC_OscConfig+0x478>
 80080ea:	e04f      	b.n	800818c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ec:	4b0c      	ldr	r3, [pc, #48]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a0b      	ldr	r2, [pc, #44]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 80080f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f8:	f7fd feb8 	bl	8005e6c <HAL_GetTick>
 80080fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080fe:	e008      	b.n	8008112 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008100:	f7fd feb4 	bl	8005e6c <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d901      	bls.n	8008112 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e03d      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008112:	4b03      	ldr	r3, [pc, #12]	; (8008120 <HAL_RCC_OscConfig+0x4cc>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1f0      	bne.n	8008100 <HAL_RCC_OscConfig+0x4ac>
 800811e:	e035      	b.n	800818c <HAL_RCC_OscConfig+0x538>
 8008120:	40023800 	.word	0x40023800
 8008124:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008128:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <HAL_RCC_OscConfig+0x544>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d028      	beq.n	8008188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008140:	429a      	cmp	r2, r3
 8008142:	d121      	bne.n	8008188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800814e:	429a      	cmp	r2, r3
 8008150:	d11a      	bne.n	8008188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800815e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008160:	4293      	cmp	r3, r2
 8008162:	d111      	bne.n	8008188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	3b01      	subs	r3, #1
 8008172:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008174:	429a      	cmp	r2, r3
 8008176:	d107      	bne.n	8008188 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008184:	429a      	cmp	r2, r3
 8008186:	d001      	beq.n	800818c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3718      	adds	r7, #24
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	40023800 	.word	0x40023800

0800819c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d101      	bne.n	80081b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e0d0      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081b4:	4b6a      	ldr	r3, [pc, #424]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d910      	bls.n	80081e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081c2:	4b67      	ldr	r3, [pc, #412]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f023 020f 	bic.w	r2, r3, #15
 80081ca:	4965      	ldr	r1, [pc, #404]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d2:	4b63      	ldr	r3, [pc, #396]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e0b8      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d020      	beq.n	8008232 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081fc:	4b59      	ldr	r3, [pc, #356]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4a58      	ldr	r2, [pc, #352]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0308 	and.w	r3, r3, #8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008214:	4b53      	ldr	r3, [pc, #332]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	4a52      	ldr	r2, [pc, #328]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 800821a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800821e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008220:	4b50      	ldr	r3, [pc, #320]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	494d      	ldr	r1, [pc, #308]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 800822e:	4313      	orrs	r3, r2
 8008230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	d040      	beq.n	80082c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	2b01      	cmp	r3, #1
 8008244:	d107      	bne.n	8008256 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008246:	4b47      	ldr	r3, [pc, #284]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d115      	bne.n	800827e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e07f      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d107      	bne.n	800826e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800825e:	4b41      	ldr	r3, [pc, #260]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e073      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800826e:	4b3d      	ldr	r3, [pc, #244]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e06b      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800827e:	4b39      	ldr	r3, [pc, #228]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f023 0203 	bic.w	r2, r3, #3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	4936      	ldr	r1, [pc, #216]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 800828c:	4313      	orrs	r3, r2
 800828e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008290:	f7fd fdec 	bl	8005e6c <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008296:	e00a      	b.n	80082ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008298:	f7fd fde8 	bl	8005e6c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d901      	bls.n	80082ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e053      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ae:	4b2d      	ldr	r3, [pc, #180]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 020c 	and.w	r2, r3, #12
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	429a      	cmp	r2, r3
 80082be:	d1eb      	bne.n	8008298 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082c0:	4b27      	ldr	r3, [pc, #156]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d210      	bcs.n	80082f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ce:	4b24      	ldr	r3, [pc, #144]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f023 020f 	bic.w	r2, r3, #15
 80082d6:	4922      	ldr	r1, [pc, #136]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	4313      	orrs	r3, r2
 80082dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	4b20      	ldr	r3, [pc, #128]	; (8008360 <HAL_RCC_ClockConfig+0x1c4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 030f 	and.w	r3, r3, #15
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d001      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e032      	b.n	8008356 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082fc:	4b19      	ldr	r3, [pc, #100]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4916      	ldr	r1, [pc, #88]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 800830a:	4313      	orrs	r3, r2
 800830c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d009      	beq.n	800832e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	490e      	ldr	r1, [pc, #56]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 800832a:	4313      	orrs	r3, r2
 800832c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800832e:	f000 f821 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 8008332:	4602      	mov	r2, r0
 8008334:	4b0b      	ldr	r3, [pc, #44]	; (8008364 <HAL_RCC_ClockConfig+0x1c8>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	091b      	lsrs	r3, r3, #4
 800833a:	f003 030f 	and.w	r3, r3, #15
 800833e:	490a      	ldr	r1, [pc, #40]	; (8008368 <HAL_RCC_ClockConfig+0x1cc>)
 8008340:	5ccb      	ldrb	r3, [r1, r3]
 8008342:	fa22 f303 	lsr.w	r3, r2, r3
 8008346:	4a09      	ldr	r2, [pc, #36]	; (800836c <HAL_RCC_ClockConfig+0x1d0>)
 8008348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800834a:	4b09      	ldr	r3, [pc, #36]	; (8008370 <HAL_RCC_ClockConfig+0x1d4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fd fd48 	bl	8005de4 <HAL_InitTick>

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40023c00 	.word	0x40023c00
 8008364:	40023800 	.word	0x40023800
 8008368:	08011c58 	.word	0x08011c58
 800836c:	2000001c 	.word	0x2000001c
 8008370:	20000020 	.word	0x20000020

08008374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008374:	b5b0      	push	{r4, r5, r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800837a:	2100      	movs	r1, #0
 800837c:	6079      	str	r1, [r7, #4]
 800837e:	2100      	movs	r1, #0
 8008380:	60f9      	str	r1, [r7, #12]
 8008382:	2100      	movs	r1, #0
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008386:	2100      	movs	r1, #0
 8008388:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800838a:	4952      	ldr	r1, [pc, #328]	; (80084d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800838c:	6889      	ldr	r1, [r1, #8]
 800838e:	f001 010c 	and.w	r1, r1, #12
 8008392:	2908      	cmp	r1, #8
 8008394:	d00d      	beq.n	80083b2 <HAL_RCC_GetSysClockFreq+0x3e>
 8008396:	2908      	cmp	r1, #8
 8008398:	f200 8094 	bhi.w	80084c4 <HAL_RCC_GetSysClockFreq+0x150>
 800839c:	2900      	cmp	r1, #0
 800839e:	d002      	beq.n	80083a6 <HAL_RCC_GetSysClockFreq+0x32>
 80083a0:	2904      	cmp	r1, #4
 80083a2:	d003      	beq.n	80083ac <HAL_RCC_GetSysClockFreq+0x38>
 80083a4:	e08e      	b.n	80084c4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80083a6:	4b4c      	ldr	r3, [pc, #304]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80083a8:	60bb      	str	r3, [r7, #8]
      break;
 80083aa:	e08e      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80083ac:	4b4b      	ldr	r3, [pc, #300]	; (80084dc <HAL_RCC_GetSysClockFreq+0x168>)
 80083ae:	60bb      	str	r3, [r7, #8]
      break;
 80083b0:	e08b      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083b2:	4948      	ldr	r1, [pc, #288]	; (80084d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80083b4:	6849      	ldr	r1, [r1, #4]
 80083b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80083ba:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80083bc:	4945      	ldr	r1, [pc, #276]	; (80084d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80083be:	6849      	ldr	r1, [r1, #4]
 80083c0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d024      	beq.n	8008412 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083c8:	4942      	ldr	r1, [pc, #264]	; (80084d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80083ca:	6849      	ldr	r1, [r1, #4]
 80083cc:	0989      	lsrs	r1, r1, #6
 80083ce:	4608      	mov	r0, r1
 80083d0:	f04f 0100 	mov.w	r1, #0
 80083d4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80083d8:	f04f 0500 	mov.w	r5, #0
 80083dc:	ea00 0204 	and.w	r2, r0, r4
 80083e0:	ea01 0305 	and.w	r3, r1, r5
 80083e4:	493d      	ldr	r1, [pc, #244]	; (80084dc <HAL_RCC_GetSysClockFreq+0x168>)
 80083e6:	fb01 f003 	mul.w	r0, r1, r3
 80083ea:	2100      	movs	r1, #0
 80083ec:	fb01 f102 	mul.w	r1, r1, r2
 80083f0:	1844      	adds	r4, r0, r1
 80083f2:	493a      	ldr	r1, [pc, #232]	; (80084dc <HAL_RCC_GetSysClockFreq+0x168>)
 80083f4:	fba2 0101 	umull	r0, r1, r2, r1
 80083f8:	1863      	adds	r3, r4, r1
 80083fa:	4619      	mov	r1, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	461a      	mov	r2, r3
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	f7f8 fc70 	bl	8000ce8 <__aeabi_uldivmod>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4613      	mov	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e04a      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008412:	4b30      	ldr	r3, [pc, #192]	; (80084d4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	461a      	mov	r2, r3
 800841a:	f04f 0300 	mov.w	r3, #0
 800841e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008422:	f04f 0100 	mov.w	r1, #0
 8008426:	ea02 0400 	and.w	r4, r2, r0
 800842a:	ea03 0501 	and.w	r5, r3, r1
 800842e:	4620      	mov	r0, r4
 8008430:	4629      	mov	r1, r5
 8008432:	f04f 0200 	mov.w	r2, #0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	014b      	lsls	r3, r1, #5
 800843c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008440:	0142      	lsls	r2, r0, #5
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	1b00      	subs	r0, r0, r4
 8008448:	eb61 0105 	sbc.w	r1, r1, r5
 800844c:	f04f 0200 	mov.w	r2, #0
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	018b      	lsls	r3, r1, #6
 8008456:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800845a:	0182      	lsls	r2, r0, #6
 800845c:	1a12      	subs	r2, r2, r0
 800845e:	eb63 0301 	sbc.w	r3, r3, r1
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f04f 0100 	mov.w	r1, #0
 800846a:	00d9      	lsls	r1, r3, #3
 800846c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008470:	00d0      	lsls	r0, r2, #3
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	1912      	adds	r2, r2, r4
 8008478:	eb45 0303 	adc.w	r3, r5, r3
 800847c:	f04f 0000 	mov.w	r0, #0
 8008480:	f04f 0100 	mov.w	r1, #0
 8008484:	0299      	lsls	r1, r3, #10
 8008486:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800848a:	0290      	lsls	r0, r2, #10
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4610      	mov	r0, r2
 8008492:	4619      	mov	r1, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	461a      	mov	r2, r3
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	f7f8 fc24 	bl	8000ce8 <__aeabi_uldivmod>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4613      	mov	r3, r2
 80084a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80084a8:	4b0a      	ldr	r3, [pc, #40]	; (80084d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	3301      	adds	r3, #1
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c0:	60bb      	str	r3, [r7, #8]
      break;
 80084c2:	e002      	b.n	80084ca <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80084c6:	60bb      	str	r3, [r7, #8]
      break;
 80084c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084ca:	68bb      	ldr	r3, [r7, #8]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bdb0      	pop	{r4, r5, r7, pc}
 80084d4:	40023800 	.word	0x40023800
 80084d8:	00f42400 	.word	0x00f42400
 80084dc:	017d7840 	.word	0x017d7840

080084e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084e4:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80084e6:	681b      	ldr	r3, [r3, #0]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	2000001c 	.word	0x2000001c

080084f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80084fc:	f7ff fff0 	bl	80084e0 <HAL_RCC_GetHCLKFreq>
 8008500:	4602      	mov	r2, r0
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	0a9b      	lsrs	r3, r3, #10
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	4903      	ldr	r1, [pc, #12]	; (800851c <HAL_RCC_GetPCLK1Freq+0x24>)
 800850e:	5ccb      	ldrb	r3, [r1, r3]
 8008510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008514:	4618      	mov	r0, r3
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40023800 	.word	0x40023800
 800851c:	08011c68 	.word	0x08011c68

08008520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008524:	f7ff ffdc 	bl	80084e0 <HAL_RCC_GetHCLKFreq>
 8008528:	4602      	mov	r2, r0
 800852a:	4b05      	ldr	r3, [pc, #20]	; (8008540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	0b5b      	lsrs	r3, r3, #13
 8008530:	f003 0307 	and.w	r3, r3, #7
 8008534:	4903      	ldr	r1, [pc, #12]	; (8008544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008536:	5ccb      	ldrb	r3, [r1, r3]
 8008538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800853c:	4618      	mov	r0, r3
 800853e:	bd80      	pop	{r7, pc}
 8008540:	40023800 	.word	0x40023800
 8008544:	08011c68 	.word	0x08011c68

08008548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008558:	2300      	movs	r3, #0
 800855a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d012      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008570:	4b69      	ldr	r3, [pc, #420]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	4a68      	ldr	r2, [pc, #416]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800857a:	6093      	str	r3, [r2, #8]
 800857c:	4b66      	ldr	r3, [pc, #408]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008584:	4964      	ldr	r1, [pc, #400]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008586:	4313      	orrs	r3, r2
 8008588:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008592:	2301      	movs	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d017      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085a2:	4b5d      	ldr	r3, [pc, #372]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b0:	4959      	ldr	r1, [pc, #356]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c0:	d101      	bne.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80085c2:	2301      	movs	r3, #1
 80085c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d017      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085de:	4b4e      	ldr	r3, [pc, #312]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	494a      	ldr	r1, [pc, #296]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085fc:	d101      	bne.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80085fe:	2301      	movs	r3, #1
 8008600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800861a:	2301      	movs	r3, #1
 800861c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0320 	and.w	r3, r3, #32
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 808b 	beq.w	8008742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800862c:	4b3a      	ldr	r3, [pc, #232]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	4a39      	ldr	r2, [pc, #228]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008636:	6413      	str	r3, [r2, #64]	; 0x40
 8008638:	4b37      	ldr	r3, [pc, #220]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008640:	60bb      	str	r3, [r7, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008644:	4b35      	ldr	r3, [pc, #212]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a34      	ldr	r2, [pc, #208]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800864a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800864e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008650:	f7fd fc0c 	bl	8005e6c <HAL_GetTick>
 8008654:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008656:	e008      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008658:	f7fd fc08 	bl	8005e6c <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b64      	cmp	r3, #100	; 0x64
 8008664:	d901      	bls.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e357      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800866a:	4b2c      	ldr	r3, [pc, #176]	; (800871c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0f0      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008676:	4b28      	ldr	r3, [pc, #160]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800867a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d035      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	429a      	cmp	r2, r3
 8008692:	d02e      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008694:	4b20      	ldr	r3, [pc, #128]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800869e:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a2:	4a1d      	ldr	r2, [pc, #116]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80086aa:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ae:	4a1a      	ldr	r2, [pc, #104]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80086b6:	4a18      	ldr	r2, [pc, #96]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086bc:	4b16      	ldr	r3, [pc, #88]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d114      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c8:	f7fd fbd0 	bl	8005e6c <HAL_GetTick>
 80086cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ce:	e00a      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086d0:	f7fd fbcc 	bl	8005e6c <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	f241 3288 	movw	r2, #5000	; 0x1388
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e319      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086e6:	4b0c      	ldr	r3, [pc, #48]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0ee      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086fe:	d111      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800870c:	4b04      	ldr	r3, [pc, #16]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800870e:	400b      	ands	r3, r1
 8008710:	4901      	ldr	r1, [pc, #4]	; (8008718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008712:	4313      	orrs	r3, r2
 8008714:	608b      	str	r3, [r1, #8]
 8008716:	e00b      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008718:	40023800 	.word	0x40023800
 800871c:	40007000 	.word	0x40007000
 8008720:	0ffffcff 	.word	0x0ffffcff
 8008724:	4bb1      	ldr	r3, [pc, #708]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	4ab0      	ldr	r2, [pc, #704]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800872a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800872e:	6093      	str	r3, [r2, #8]
 8008730:	4bae      	ldr	r3, [pc, #696]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800873c:	49ab      	ldr	r1, [pc, #684]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800873e:	4313      	orrs	r3, r2
 8008740:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b00      	cmp	r3, #0
 800874c:	d010      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800874e:	4ba7      	ldr	r3, [pc, #668]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008754:	4aa5      	ldr	r2, [pc, #660]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800875a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800875e:	4ba3      	ldr	r3, [pc, #652]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008760:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	49a0      	ldr	r1, [pc, #640]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800877c:	4b9b      	ldr	r3, [pc, #620]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800877e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878a:	4998      	ldr	r1, [pc, #608]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800878c:	4313      	orrs	r3, r2
 800878e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00a      	beq.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800879e:	4b93      	ldr	r3, [pc, #588]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ac:	498f      	ldr	r1, [pc, #572]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00a      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087c0:	4b8a      	ldr	r3, [pc, #552]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ce:	4987      	ldr	r1, [pc, #540]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087e2:	4b82      	ldr	r3, [pc, #520]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f0:	497e      	ldr	r1, [pc, #504]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00a      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008804:	4b79      	ldr	r3, [pc, #484]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880a:	f023 0203 	bic.w	r2, r3, #3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008812:	4976      	ldr	r1, [pc, #472]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008814:	4313      	orrs	r3, r2
 8008816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008826:	4b71      	ldr	r3, [pc, #452]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882c:	f023 020c 	bic.w	r2, r3, #12
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008834:	496d      	ldr	r1, [pc, #436]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008836:	4313      	orrs	r3, r2
 8008838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008848:	4b68      	ldr	r3, [pc, #416]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800884a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	4965      	ldr	r1, [pc, #404]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008858:	4313      	orrs	r3, r2
 800885a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00a      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800886a:	4b60      	ldr	r3, [pc, #384]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008870:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008878:	495c      	ldr	r1, [pc, #368]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00a      	beq.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800888c:	4b57      	ldr	r3, [pc, #348]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800888e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	4954      	ldr	r1, [pc, #336]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800889c:	4313      	orrs	r3, r2
 800889e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80088ae:	4b4f      	ldr	r3, [pc, #316]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088bc:	494b      	ldr	r1, [pc, #300]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80088d0:	4b46      	ldr	r3, [pc, #280]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088de:	4943      	ldr	r1, [pc, #268]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088e0:	4313      	orrs	r3, r2
 80088e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80088f2:	4b3e      	ldr	r3, [pc, #248]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	493a      	ldr	r1, [pc, #232]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008914:	4b35      	ldr	r3, [pc, #212]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008922:	4932      	ldr	r1, [pc, #200]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008924:	4313      	orrs	r3, r2
 8008926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008932:	2b00      	cmp	r3, #0
 8008934:	d011      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008936:	4b2d      	ldr	r3, [pc, #180]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008944:	4929      	ldr	r1, [pc, #164]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008946:	4313      	orrs	r3, r2
 8008948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008954:	d101      	bne.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008966:	2301      	movs	r3, #1
 8008968:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008976:	4b1d      	ldr	r3, [pc, #116]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008984:	4919      	ldr	r1, [pc, #100]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008998:	4b14      	ldr	r3, [pc, #80]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800899a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800899e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a8:	4910      	ldr	r1, [pc, #64]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d006      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80d9 	beq.w	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80089c4:	4b09      	ldr	r3, [pc, #36]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d0:	f7fd fa4c 	bl	8005e6c <HAL_GetTick>
 80089d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089d6:	e00b      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089d8:	f7fd fa48 	bl	8005e6c <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b64      	cmp	r3, #100	; 0x64
 80089e4:	d904      	bls.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e197      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089ea:	bf00      	nop
 80089ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089f0:	4b6c      	ldr	r3, [pc, #432]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ed      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d021      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d11d      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a10:	4b64      	ldr	r3, [pc, #400]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a16:	0c1b      	lsrs	r3, r3, #16
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a1e:	4b61      	ldr	r3, [pc, #388]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a24:	0e1b      	lsrs	r3, r3, #24
 8008a26:	f003 030f 	and.w	r3, r3, #15
 8008a2a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	019a      	lsls	r2, r3, #6
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	041b      	lsls	r3, r3, #16
 8008a36:	431a      	orrs	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	071b      	lsls	r3, r3, #28
 8008a44:	4957      	ldr	r1, [pc, #348]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a60:	d00a      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d02e      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a76:	d129      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a78:	4b4a      	ldr	r3, [pc, #296]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	f003 0303 	and.w	r3, r3, #3
 8008a84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a86:	4b47      	ldr	r3, [pc, #284]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a8c:	0f1b      	lsrs	r3, r3, #28
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	019a      	lsls	r2, r3, #6
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	071b      	lsls	r3, r3, #28
 8008aac:	493d      	ldr	r1, [pc, #244]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008ab4:	4b3b      	ldr	r3, [pc, #236]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aba:	f023 021f 	bic.w	r2, r3, #31
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	4937      	ldr	r1, [pc, #220]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01d      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ad8:	4b32      	ldr	r3, [pc, #200]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ade:	0e1b      	lsrs	r3, r3, #24
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ae6:	4b2f      	ldr	r3, [pc, #188]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aec:	0f1b      	lsrs	r3, r3, #28
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	019a      	lsls	r2, r3, #6
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	041b      	lsls	r3, r3, #16
 8008b00:	431a      	orrs	r2, r3
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	061b      	lsls	r3, r3, #24
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	071b      	lsls	r3, r3, #28
 8008b0c:	4925      	ldr	r1, [pc, #148]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d011      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	019a      	lsls	r2, r3, #6
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	041b      	lsls	r3, r3, #16
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	061b      	lsls	r3, r3, #24
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	071b      	lsls	r3, r3, #28
 8008b3c:	4919      	ldr	r1, [pc, #100]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b44:	4b17      	ldr	r3, [pc, #92]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a16      	ldr	r2, [pc, #88]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b50:	f7fd f98c 	bl	8005e6c <HAL_GetTick>
 8008b54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b56:	e008      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b58:	f7fd f988 	bl	8005e6c <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b64      	cmp	r3, #100	; 0x64
 8008b64:	d901      	bls.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e0d7      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0f0      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	f040 80cd 	bne.w	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b7e:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a08      	ldr	r2, [pc, #32]	; (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8a:	f7fd f96f 	bl	8005e6c <HAL_GetTick>
 8008b8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b90:	e00a      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b92:	f7fd f96b 	bl	8005e6c <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b64      	cmp	r3, #100	; 0x64
 8008b9e:	d903      	bls.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e0ba      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008ba4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008ba8:	4b5e      	ldr	r3, [pc, #376]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb4:	d0ed      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d009      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d02e      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d12a      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bde:	4b51      	ldr	r3, [pc, #324]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be4:	0c1b      	lsrs	r3, r3, #16
 8008be6:	f003 0303 	and.w	r3, r3, #3
 8008bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bec:	4b4d      	ldr	r3, [pc, #308]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf2:	0f1b      	lsrs	r3, r3, #28
 8008bf4:	f003 0307 	and.w	r3, r3, #7
 8008bf8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	695b      	ldr	r3, [r3, #20]
 8008bfe:	019a      	lsls	r2, r3, #6
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	041b      	lsls	r3, r3, #16
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	061b      	lsls	r3, r3, #24
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	071b      	lsls	r3, r3, #28
 8008c12:	4944      	ldr	r1, [pc, #272]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c1a:	4b42      	ldr	r3, [pc, #264]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c20:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	021b      	lsls	r3, r3, #8
 8008c2c:	493d      	ldr	r1, [pc, #244]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d022      	beq.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c48:	d11d      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c4a:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c50:	0e1b      	lsrs	r3, r3, #24
 8008c52:	f003 030f 	and.w	r3, r3, #15
 8008c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c58:	4b32      	ldr	r3, [pc, #200]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c5e:	0f1b      	lsrs	r3, r3, #28
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	019a      	lsls	r2, r3, #6
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	041b      	lsls	r3, r3, #16
 8008c72:	431a      	orrs	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	061b      	lsls	r3, r3, #24
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	071b      	lsls	r3, r3, #28
 8008c7e:	4929      	ldr	r1, [pc, #164]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c80:	4313      	orrs	r3, r2
 8008c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d028      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c98:	0e1b      	lsrs	r3, r3, #24
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ca0:	4b20      	ldr	r3, [pc, #128]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ca6:	0c1b      	lsrs	r3, r3, #16
 8008ca8:	f003 0303 	and.w	r3, r3, #3
 8008cac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	019a      	lsls	r2, r3, #6
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	061b      	lsls	r3, r3, #24
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	071b      	lsls	r3, r3, #28
 8008cc6:	4917      	ldr	r1, [pc, #92]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008cce:	4b15      	ldr	r3, [pc, #84]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cdc:	4911      	ldr	r1, [pc, #68]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ce4:	4b0f      	ldr	r3, [pc, #60]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a0e      	ldr	r2, [pc, #56]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cf0:	f7fd f8bc 	bl	8005e6c <HAL_GetTick>
 8008cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008cf8:	f7fd f8b8 	bl	8005e6c <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b64      	cmp	r3, #100	; 0x64
 8008d04:	d901      	bls.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e007      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d0a:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d16:	d1ef      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40023800 	.word	0x40023800

08008d28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e049      	b.n	8008dce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7fb fd2c 	bl	80047ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f000 ff74 	bl	8009c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e049      	b.n	8008e7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f841 	bl	8008e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4619      	mov	r1, r3
 8008e14:	4610      	mov	r0, r2
 8008e16:	f000 ff1d 	bl	8009c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d109      	bne.n	8008ebc <HAL_TIM_PWM_Start+0x24>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	bf14      	ite	ne
 8008eb4:	2301      	movne	r3, #1
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	e03c      	b.n	8008f36 <HAL_TIM_PWM_Start+0x9e>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d109      	bne.n	8008ed6 <HAL_TIM_PWM_Start+0x3e>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	bf14      	ite	ne
 8008ece:	2301      	movne	r3, #1
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	e02f      	b.n	8008f36 <HAL_TIM_PWM_Start+0x9e>
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b08      	cmp	r3, #8
 8008eda:	d109      	bne.n	8008ef0 <HAL_TIM_PWM_Start+0x58>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	bf14      	ite	ne
 8008ee8:	2301      	movne	r3, #1
 8008eea:	2300      	moveq	r3, #0
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	e022      	b.n	8008f36 <HAL_TIM_PWM_Start+0x9e>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b0c      	cmp	r3, #12
 8008ef4:	d109      	bne.n	8008f0a <HAL_TIM_PWM_Start+0x72>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	bf14      	ite	ne
 8008f02:	2301      	movne	r3, #1
 8008f04:	2300      	moveq	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	e015      	b.n	8008f36 <HAL_TIM_PWM_Start+0x9e>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	2b10      	cmp	r3, #16
 8008f0e:	d109      	bne.n	8008f24 <HAL_TIM_PWM_Start+0x8c>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	bf14      	ite	ne
 8008f1c:	2301      	movne	r3, #1
 8008f1e:	2300      	moveq	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e008      	b.n	8008f36 <HAL_TIM_PWM_Start+0x9e>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e092      	b.n	8009064 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <HAL_TIM_PWM_Start+0xb6>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f4c:	e023      	b.n	8008f96 <HAL_TIM_PWM_Start+0xfe>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b04      	cmp	r3, #4
 8008f52:	d104      	bne.n	8008f5e <HAL_TIM_PWM_Start+0xc6>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2202      	movs	r2, #2
 8008f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f5c:	e01b      	b.n	8008f96 <HAL_TIM_PWM_Start+0xfe>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b08      	cmp	r3, #8
 8008f62:	d104      	bne.n	8008f6e <HAL_TIM_PWM_Start+0xd6>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f6c:	e013      	b.n	8008f96 <HAL_TIM_PWM_Start+0xfe>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b0c      	cmp	r3, #12
 8008f72:	d104      	bne.n	8008f7e <HAL_TIM_PWM_Start+0xe6>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f7c:	e00b      	b.n	8008f96 <HAL_TIM_PWM_Start+0xfe>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b10      	cmp	r3, #16
 8008f82:	d104      	bne.n	8008f8e <HAL_TIM_PWM_Start+0xf6>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f8c:	e003      	b.n	8008f96 <HAL_TIM_PWM_Start+0xfe>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 fbaa 	bl	800a6f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a30      	ldr	r2, [pc, #192]	; (800906c <HAL_TIM_PWM_Start+0x1d4>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d004      	beq.n	8008fb8 <HAL_TIM_PWM_Start+0x120>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a2f      	ldr	r2, [pc, #188]	; (8009070 <HAL_TIM_PWM_Start+0x1d8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d101      	bne.n	8008fbc <HAL_TIM_PWM_Start+0x124>
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e000      	b.n	8008fbe <HAL_TIM_PWM_Start+0x126>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d007      	beq.n	8008fd2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a25      	ldr	r2, [pc, #148]	; (800906c <HAL_TIM_PWM_Start+0x1d4>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d022      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fe4:	d01d      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a22      	ldr	r2, [pc, #136]	; (8009074 <HAL_TIM_PWM_Start+0x1dc>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d018      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a20      	ldr	r2, [pc, #128]	; (8009078 <HAL_TIM_PWM_Start+0x1e0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d013      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a1f      	ldr	r2, [pc, #124]	; (800907c <HAL_TIM_PWM_Start+0x1e4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00e      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a19      	ldr	r2, [pc, #100]	; (8009070 <HAL_TIM_PWM_Start+0x1d8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d009      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a1b      	ldr	r2, [pc, #108]	; (8009080 <HAL_TIM_PWM_Start+0x1e8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d004      	beq.n	8009022 <HAL_TIM_PWM_Start+0x18a>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a19      	ldr	r2, [pc, #100]	; (8009084 <HAL_TIM_PWM_Start+0x1ec>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d115      	bne.n	800904e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689a      	ldr	r2, [r3, #8]
 8009028:	4b17      	ldr	r3, [pc, #92]	; (8009088 <HAL_TIM_PWM_Start+0x1f0>)
 800902a:	4013      	ands	r3, r2
 800902c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b06      	cmp	r3, #6
 8009032:	d015      	beq.n	8009060 <HAL_TIM_PWM_Start+0x1c8>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800903a:	d011      	beq.n	8009060 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0201 	orr.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800904c:	e008      	b.n	8009060 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f042 0201 	orr.w	r2, r2, #1
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e000      	b.n	8009062 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	40010000 	.word	0x40010000
 8009070:	40010400 	.word	0x40010400
 8009074:	40000400 	.word	0x40000400
 8009078:	40000800 	.word	0x40000800
 800907c:	40000c00 	.word	0x40000c00
 8009080:	40014000 	.word	0x40014000
 8009084:	40001800 	.word	0x40001800
 8009088:	00010007 	.word	0x00010007

0800908c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e049      	b.n	8009132 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f841 	bl	800913a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f000 fdc2 	bl	8009c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009142:	bf00      	nop
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <HAL_TIM_IC_Start_IT+0x1a>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009166:	b2db      	uxtb	r3, r3
 8009168:	e023      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x62>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b04      	cmp	r3, #4
 800916e:	d104      	bne.n	800917a <HAL_TIM_IC_Start_IT+0x2a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009176:	b2db      	uxtb	r3, r3
 8009178:	e01b      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x62>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b08      	cmp	r3, #8
 800917e:	d104      	bne.n	800918a <HAL_TIM_IC_Start_IT+0x3a>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009186:	b2db      	uxtb	r3, r3
 8009188:	e013      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x62>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b0c      	cmp	r3, #12
 800918e:	d104      	bne.n	800919a <HAL_TIM_IC_Start_IT+0x4a>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009196:	b2db      	uxtb	r3, r3
 8009198:	e00b      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x62>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	2b10      	cmp	r3, #16
 800919e:	d104      	bne.n	80091aa <HAL_TIM_IC_Start_IT+0x5a>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	e003      	b.n	80091b2 <HAL_TIM_IC_Start_IT+0x62>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <HAL_TIM_IC_Start_IT+0x74>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	e013      	b.n	80091ec <HAL_TIM_IC_Start_IT+0x9c>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d104      	bne.n	80091d4 <HAL_TIM_IC_Start_IT+0x84>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	e00b      	b.n	80091ec <HAL_TIM_IC_Start_IT+0x9c>
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d104      	bne.n	80091e4 <HAL_TIM_IC_Start_IT+0x94>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	e003      	b.n	80091ec <HAL_TIM_IC_Start_IT+0x9c>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d102      	bne.n	80091fa <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80091f4:	7bbb      	ldrb	r3, [r7, #14]
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d001      	beq.n	80091fe <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e0dd      	b.n	80093ba <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <HAL_TIM_IC_Start_IT+0xbe>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800920c:	e023      	b.n	8009256 <HAL_TIM_IC_Start_IT+0x106>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b04      	cmp	r3, #4
 8009212:	d104      	bne.n	800921e <HAL_TIM_IC_Start_IT+0xce>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800921c:	e01b      	b.n	8009256 <HAL_TIM_IC_Start_IT+0x106>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b08      	cmp	r3, #8
 8009222:	d104      	bne.n	800922e <HAL_TIM_IC_Start_IT+0xde>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2202      	movs	r2, #2
 8009228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800922c:	e013      	b.n	8009256 <HAL_TIM_IC_Start_IT+0x106>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b0c      	cmp	r3, #12
 8009232:	d104      	bne.n	800923e <HAL_TIM_IC_Start_IT+0xee>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2202      	movs	r2, #2
 8009238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800923c:	e00b      	b.n	8009256 <HAL_TIM_IC_Start_IT+0x106>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b10      	cmp	r3, #16
 8009242:	d104      	bne.n	800924e <HAL_TIM_IC_Start_IT+0xfe>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800924c:	e003      	b.n	8009256 <HAL_TIM_IC_Start_IT+0x106>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d104      	bne.n	8009266 <HAL_TIM_IC_Start_IT+0x116>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009264:	e013      	b.n	800928e <HAL_TIM_IC_Start_IT+0x13e>
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b04      	cmp	r3, #4
 800926a:	d104      	bne.n	8009276 <HAL_TIM_IC_Start_IT+0x126>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009274:	e00b      	b.n	800928e <HAL_TIM_IC_Start_IT+0x13e>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2b08      	cmp	r3, #8
 800927a:	d104      	bne.n	8009286 <HAL_TIM_IC_Start_IT+0x136>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009284:	e003      	b.n	800928e <HAL_TIM_IC_Start_IT+0x13e>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b0c      	cmp	r3, #12
 8009292:	d841      	bhi.n	8009318 <HAL_TIM_IC_Start_IT+0x1c8>
 8009294:	a201      	add	r2, pc, #4	; (adr r2, 800929c <HAL_TIM_IC_Start_IT+0x14c>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092d1 	.word	0x080092d1
 80092a0:	08009319 	.word	0x08009319
 80092a4:	08009319 	.word	0x08009319
 80092a8:	08009319 	.word	0x08009319
 80092ac:	080092e3 	.word	0x080092e3
 80092b0:	08009319 	.word	0x08009319
 80092b4:	08009319 	.word	0x08009319
 80092b8:	08009319 	.word	0x08009319
 80092bc:	080092f5 	.word	0x080092f5
 80092c0:	08009319 	.word	0x08009319
 80092c4:	08009319 	.word	0x08009319
 80092c8:	08009319 	.word	0x08009319
 80092cc:	08009307 	.word	0x08009307
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0202 	orr.w	r2, r2, #2
 80092de:	60da      	str	r2, [r3, #12]
      break;
 80092e0:	e01b      	b.n	800931a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f042 0204 	orr.w	r2, r2, #4
 80092f0:	60da      	str	r2, [r3, #12]
      break;
 80092f2:	e012      	b.n	800931a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f042 0208 	orr.w	r2, r2, #8
 8009302:	60da      	str	r2, [r3, #12]
      break;
 8009304:	e009      	b.n	800931a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f042 0210 	orr.w	r2, r2, #16
 8009314:	60da      	str	r2, [r3, #12]
      break;
 8009316:	e000      	b.n	800931a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8009318:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2201      	movs	r2, #1
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f001 f9e8 	bl	800a6f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a25      	ldr	r2, [pc, #148]	; (80093c4 <HAL_TIM_IC_Start_IT+0x274>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d022      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800933a:	d01d      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a21      	ldr	r2, [pc, #132]	; (80093c8 <HAL_TIM_IC_Start_IT+0x278>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d018      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a20      	ldr	r2, [pc, #128]	; (80093cc <HAL_TIM_IC_Start_IT+0x27c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d013      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a1e      	ldr	r2, [pc, #120]	; (80093d0 <HAL_TIM_IC_Start_IT+0x280>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00e      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1d      	ldr	r2, [pc, #116]	; (80093d4 <HAL_TIM_IC_Start_IT+0x284>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d009      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a1b      	ldr	r2, [pc, #108]	; (80093d8 <HAL_TIM_IC_Start_IT+0x288>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d004      	beq.n	8009378 <HAL_TIM_IC_Start_IT+0x228>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a1a      	ldr	r2, [pc, #104]	; (80093dc <HAL_TIM_IC_Start_IT+0x28c>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d115      	bne.n	80093a4 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689a      	ldr	r2, [r3, #8]
 800937e:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <HAL_TIM_IC_Start_IT+0x290>)
 8009380:	4013      	ands	r3, r2
 8009382:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b06      	cmp	r3, #6
 8009388:	d015      	beq.n	80093b6 <HAL_TIM_IC_Start_IT+0x266>
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009390:	d011      	beq.n	80093b6 <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0201 	orr.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a2:	e008      	b.n	80093b6 <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e000      	b.n	80093b8 <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00
 80093d4:	40010400 	.word	0x40010400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40001800 	.word	0x40001800
 80093e0:	00010007 	.word	0x00010007

080093e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d122      	bne.n	8009440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b02      	cmp	r3, #2
 8009406:	d11b      	bne.n	8009440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f06f 0202 	mvn.w	r2, #2
 8009410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7f9 fdcc 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 800942c:	e005      	b.n	800943a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fbf2 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fbf9 	bl	8009c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	2b04      	cmp	r3, #4
 800944c:	d122      	bne.n	8009494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b04      	cmp	r3, #4
 800945a:	d11b      	bne.n	8009494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0204 	mvn.w	r2, #4
 8009464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7f9 fda2 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8009480:	e005      	b.n	800948e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fbc8 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fbcf 	bl	8009c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b08      	cmp	r3, #8
 80094a0:	d122      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d11b      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0208 	mvn.w	r2, #8
 80094b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2204      	movs	r2, #4
 80094be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7f9 fd78 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 80094d4:	e005      	b.n	80094e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fb9e 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fba5 	bl	8009c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0310 	and.w	r3, r3, #16
 80094f2:	2b10      	cmp	r3, #16
 80094f4:	d122      	bne.n	800953c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b10      	cmp	r3, #16
 8009502:	d11b      	bne.n	800953c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0210 	mvn.w	r2, #16
 800950c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2208      	movs	r2, #8
 8009512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7f9 fd4e 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8009528:	e005      	b.n	8009536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fb74 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb7b 	bl	8009c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b01      	cmp	r3, #1
 8009548:	d10e      	bne.n	8009568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b01      	cmp	r3, #1
 8009556:	d107      	bne.n	8009568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f06f 0201 	mvn.w	r2, #1
 8009560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fb4e 	bl	8009c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d10e      	bne.n	8009594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d107      	bne.n	8009594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800958c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 f9ee 	bl	800a970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a2:	d10e      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ae:	2b80      	cmp	r3, #128	; 0x80
 80095b0:	d107      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 f9e1 	bl	800a984 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d10e      	bne.n	80095ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d107      	bne.n	80095ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fb29 	bl	8009c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d10e      	bne.n	800961a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b20      	cmp	r3, #32
 8009608:	d107      	bne.n	800961a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f06f 0220 	mvn.w	r2, #32
 8009612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f001 f9a1 	bl	800a95c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009634:	2b01      	cmp	r3, #1
 8009636:	d101      	bne.n	800963c <HAL_TIM_IC_ConfigChannel+0x1a>
 8009638:	2302      	movs	r3, #2
 800963a:	e082      	b.n	8009742 <HAL_TIM_IC_ConfigChannel+0x120>
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2201      	movs	r2, #1
 8009640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d11b      	bne.n	8009682 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6819      	ldr	r1, [r3, #0]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f000 fe89 	bl	800a370 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	699a      	ldr	r2, [r3, #24]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 020c 	bic.w	r2, r2, #12
 800966c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6999      	ldr	r1, [r3, #24]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	619a      	str	r2, [r3, #24]
 8009680:	e05a      	b.n	8009738 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2b04      	cmp	r3, #4
 8009686:	d11c      	bne.n	80096c2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f000 ff0d 	bl	800a4b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80096aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6999      	ldr	r1, [r3, #24]
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	021a      	lsls	r2, r3, #8
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	619a      	str	r2, [r3, #24]
 80096c0:	e03a      	b.n	8009738 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b08      	cmp	r3, #8
 80096c6:	d11b      	bne.n	8009700 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6819      	ldr	r1, [r3, #0]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	f000 ff5a 	bl	800a590 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	69da      	ldr	r2, [r3, #28]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 020c 	bic.w	r2, r2, #12
 80096ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	69d9      	ldr	r1, [r3, #28]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	430a      	orrs	r2, r1
 80096fc:	61da      	str	r2, [r3, #28]
 80096fe:	e01b      	b.n	8009738 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6818      	ldr	r0, [r3, #0]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6819      	ldr	r1, [r3, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f000 ff7a 	bl	800a608 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69da      	ldr	r2, [r3, #28]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009722:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	69d9      	ldr	r1, [r3, #28]
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	021a      	lsls	r2, r3, #8
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
	...

0800974c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800975e:	2b01      	cmp	r3, #1
 8009760:	d101      	bne.n	8009766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009762:	2302      	movs	r3, #2
 8009764:	e0fd      	b.n	8009962 <HAL_TIM_PWM_ConfigChannel+0x216>
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2201      	movs	r2, #1
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b14      	cmp	r3, #20
 8009772:	f200 80f0 	bhi.w	8009956 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009776:	a201      	add	r2, pc, #4	; (adr r2, 800977c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977c:	080097d1 	.word	0x080097d1
 8009780:	08009957 	.word	0x08009957
 8009784:	08009957 	.word	0x08009957
 8009788:	08009957 	.word	0x08009957
 800978c:	08009811 	.word	0x08009811
 8009790:	08009957 	.word	0x08009957
 8009794:	08009957 	.word	0x08009957
 8009798:	08009957 	.word	0x08009957
 800979c:	08009853 	.word	0x08009853
 80097a0:	08009957 	.word	0x08009957
 80097a4:	08009957 	.word	0x08009957
 80097a8:	08009957 	.word	0x08009957
 80097ac:	08009893 	.word	0x08009893
 80097b0:	08009957 	.word	0x08009957
 80097b4:	08009957 	.word	0x08009957
 80097b8:	08009957 	.word	0x08009957
 80097bc:	080098d5 	.word	0x080098d5
 80097c0:	08009957 	.word	0x08009957
 80097c4:	08009957 	.word	0x08009957
 80097c8:	08009957 	.word	0x08009957
 80097cc:	08009915 	.word	0x08009915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 fadc 	bl	8009d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	699a      	ldr	r2, [r3, #24]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f042 0208 	orr.w	r2, r2, #8
 80097ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0204 	bic.w	r2, r2, #4
 80097fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6999      	ldr	r1, [r3, #24]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	691a      	ldr	r2, [r3, #16]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	619a      	str	r2, [r3, #24]
      break;
 800980e:	e0a3      	b.n	8009958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fb2e 	bl	8009e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800982a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800983a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6999      	ldr	r1, [r3, #24]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	021a      	lsls	r2, r3, #8
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	619a      	str	r2, [r3, #24]
      break;
 8009850:	e082      	b.n	8009958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68b9      	ldr	r1, [r7, #8]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 fb85 	bl	8009f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69da      	ldr	r2, [r3, #28]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0208 	orr.w	r2, r2, #8
 800986c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69da      	ldr	r2, [r3, #28]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 0204 	bic.w	r2, r2, #4
 800987c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69d9      	ldr	r1, [r3, #28]
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	691a      	ldr	r2, [r3, #16]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	61da      	str	r2, [r3, #28]
      break;
 8009890:	e062      	b.n	8009958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68b9      	ldr	r1, [r7, #8]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 fbdb 	bl	800a054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	69da      	ldr	r2, [r3, #28]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	69da      	ldr	r2, [r3, #28]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	69d9      	ldr	r1, [r3, #28]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	021a      	lsls	r2, r3, #8
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	61da      	str	r2, [r3, #28]
      break;
 80098d2:	e041      	b.n	8009958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68b9      	ldr	r1, [r7, #8]
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fc12 	bl	800a104 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f042 0208 	orr.w	r2, r2, #8
 80098ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0204 	bic.w	r2, r2, #4
 80098fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	430a      	orrs	r2, r1
 8009910:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009912:	e021      	b.n	8009958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68b9      	ldr	r1, [r7, #8]
 800991a:	4618      	mov	r0, r3
 800991c:	f000 fc44 	bl	800a1a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800992e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800993e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	021a      	lsls	r2, r3, #8
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	430a      	orrs	r2, r1
 8009952:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009954:	e000      	b.n	8009958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8009956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop

0800996c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800997c:	2b01      	cmp	r3, #1
 800997e:	d101      	bne.n	8009984 <HAL_TIM_ConfigClockSource+0x18>
 8009980:	2302      	movs	r3, #2
 8009982:	e0b3      	b.n	8009aec <HAL_TIM_ConfigClockSource+0x180>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	4b55      	ldr	r3, [pc, #340]	; (8009af4 <HAL_TIM_ConfigClockSource+0x188>)
 80099a0:	4013      	ands	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099bc:	d03e      	beq.n	8009a3c <HAL_TIM_ConfigClockSource+0xd0>
 80099be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099c2:	f200 8087 	bhi.w	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ca:	f000 8085 	beq.w	8009ad8 <HAL_TIM_ConfigClockSource+0x16c>
 80099ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d2:	d87f      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099d4:	2b70      	cmp	r3, #112	; 0x70
 80099d6:	d01a      	beq.n	8009a0e <HAL_TIM_ConfigClockSource+0xa2>
 80099d8:	2b70      	cmp	r3, #112	; 0x70
 80099da:	d87b      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099dc:	2b60      	cmp	r3, #96	; 0x60
 80099de:	d050      	beq.n	8009a82 <HAL_TIM_ConfigClockSource+0x116>
 80099e0:	2b60      	cmp	r3, #96	; 0x60
 80099e2:	d877      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099e4:	2b50      	cmp	r3, #80	; 0x50
 80099e6:	d03c      	beq.n	8009a62 <HAL_TIM_ConfigClockSource+0xf6>
 80099e8:	2b50      	cmp	r3, #80	; 0x50
 80099ea:	d873      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	d058      	beq.n	8009aa2 <HAL_TIM_ConfigClockSource+0x136>
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d86f      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099f4:	2b30      	cmp	r3, #48	; 0x30
 80099f6:	d064      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x156>
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d86b      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	d060      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x156>
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d867      	bhi.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d05c      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x156>
 8009a08:	2b10      	cmp	r3, #16
 8009a0a:	d05a      	beq.n	8009ac2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009a0c:	e062      	b.n	8009ad4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6818      	ldr	r0, [r3, #0]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6899      	ldr	r1, [r3, #8]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f000 fe4b 	bl	800a6b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009a30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	609a      	str	r2, [r3, #8]
      break;
 8009a3a:	e04e      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	6899      	ldr	r1, [r3, #8]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f000 fe34 	bl	800a6b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009a5e:	609a      	str	r2, [r3, #8]
      break;
 8009a60:	e03b      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6859      	ldr	r1, [r3, #4]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f000 fcf2 	bl	800a458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2150      	movs	r1, #80	; 0x50
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f000 fe01 	bl	800a682 <TIM_ITRx_SetConfig>
      break;
 8009a80:	e02b      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	6859      	ldr	r1, [r3, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f000 fd4e 	bl	800a530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2160      	movs	r1, #96	; 0x60
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fdf1 	bl	800a682 <TIM_ITRx_SetConfig>
      break;
 8009aa0:	e01b      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6859      	ldr	r1, [r3, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f000 fcd2 	bl	800a458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2140      	movs	r1, #64	; 0x40
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 fde1 	bl	800a682 <TIM_ITRx_SetConfig>
      break;
 8009ac0:	e00b      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4619      	mov	r1, r3
 8009acc:	4610      	mov	r0, r2
 8009ace:	f000 fdd8 	bl	800a682 <TIM_ITRx_SetConfig>
        break;
 8009ad2:	e002      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ad4:	bf00      	nop
 8009ad6:	e000      	b.n	8009ada <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009ad8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	fffeff88 	.word	0xfffeff88

08009af8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e031      	b.n	8009b74 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fb94 	bl	800a250 <TIM_SlaveTimer_SetConfig>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e018      	b.n	8009b74 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b50:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b60:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009b86:	2300      	movs	r3, #0
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	2b0c      	cmp	r3, #12
 8009b8e:	d831      	bhi.n	8009bf4 <HAL_TIM_ReadCapturedValue+0x78>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <HAL_TIM_ReadCapturedValue+0x1c>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bcd 	.word	0x08009bcd
 8009b9c:	08009bf5 	.word	0x08009bf5
 8009ba0:	08009bf5 	.word	0x08009bf5
 8009ba4:	08009bf5 	.word	0x08009bf5
 8009ba8:	08009bd7 	.word	0x08009bd7
 8009bac:	08009bf5 	.word	0x08009bf5
 8009bb0:	08009bf5 	.word	0x08009bf5
 8009bb4:	08009bf5 	.word	0x08009bf5
 8009bb8:	08009be1 	.word	0x08009be1
 8009bbc:	08009bf5 	.word	0x08009bf5
 8009bc0:	08009bf5 	.word	0x08009bf5
 8009bc4:	08009bf5 	.word	0x08009bf5
 8009bc8:	08009beb 	.word	0x08009beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd2:	60fb      	str	r3, [r7, #12]

      break;
 8009bd4:	e00f      	b.n	8009bf6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bdc:	60fb      	str	r3, [r7, #12]

      break;
 8009bde:	e00a      	b.n	8009bf6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be6:	60fb      	str	r3, [r7, #12]

      break;
 8009be8:	e005      	b.n	8009bf6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf0:	60fb      	str	r3, [r7, #12]

      break;
 8009bf2:	e000      	b.n	8009bf6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009bf4:	bf00      	nop
  }

  return tmpreg;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a40      	ldr	r2, [pc, #256]	; (8009d68 <TIM_Base_SetConfig+0x114>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d013      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c72:	d00f      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a3d      	ldr	r2, [pc, #244]	; (8009d6c <TIM_Base_SetConfig+0x118>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00b      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a3c      	ldr	r2, [pc, #240]	; (8009d70 <TIM_Base_SetConfig+0x11c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d007      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a3b      	ldr	r2, [pc, #236]	; (8009d74 <TIM_Base_SetConfig+0x120>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d003      	beq.n	8009c94 <TIM_Base_SetConfig+0x40>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a3a      	ldr	r2, [pc, #232]	; (8009d78 <TIM_Base_SetConfig+0x124>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d108      	bne.n	8009ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a2f      	ldr	r2, [pc, #188]	; (8009d68 <TIM_Base_SetConfig+0x114>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d02b      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb4:	d027      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a2c      	ldr	r2, [pc, #176]	; (8009d6c <TIM_Base_SetConfig+0x118>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d023      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a2b      	ldr	r2, [pc, #172]	; (8009d70 <TIM_Base_SetConfig+0x11c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d01f      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a2a      	ldr	r2, [pc, #168]	; (8009d74 <TIM_Base_SetConfig+0x120>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d01b      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a29      	ldr	r2, [pc, #164]	; (8009d78 <TIM_Base_SetConfig+0x124>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d017      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a28      	ldr	r2, [pc, #160]	; (8009d7c <TIM_Base_SetConfig+0x128>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d013      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a27      	ldr	r2, [pc, #156]	; (8009d80 <TIM_Base_SetConfig+0x12c>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00f      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a26      	ldr	r2, [pc, #152]	; (8009d84 <TIM_Base_SetConfig+0x130>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a25      	ldr	r2, [pc, #148]	; (8009d88 <TIM_Base_SetConfig+0x134>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a24      	ldr	r2, [pc, #144]	; (8009d8c <TIM_Base_SetConfig+0x138>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_Base_SetConfig+0xb2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a23      	ldr	r2, [pc, #140]	; (8009d90 <TIM_Base_SetConfig+0x13c>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d108      	bne.n	8009d18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	695b      	ldr	r3, [r3, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689a      	ldr	r2, [r3, #8]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a0a      	ldr	r2, [pc, #40]	; (8009d68 <TIM_Base_SetConfig+0x114>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d003      	beq.n	8009d4c <TIM_Base_SetConfig+0xf8>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a0c      	ldr	r2, [pc, #48]	; (8009d78 <TIM_Base_SetConfig+0x124>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d103      	bne.n	8009d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	691a      	ldr	r2, [r3, #16]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2201      	movs	r2, #1
 8009d58:	615a      	str	r2, [r3, #20]
}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	40010000 	.word	0x40010000
 8009d6c:	40000400 	.word	0x40000400
 8009d70:	40000800 	.word	0x40000800
 8009d74:	40000c00 	.word	0x40000c00
 8009d78:	40010400 	.word	0x40010400
 8009d7c:	40014000 	.word	0x40014000
 8009d80:	40014400 	.word	0x40014400
 8009d84:	40014800 	.word	0x40014800
 8009d88:	40001800 	.word	0x40001800
 8009d8c:	40001c00 	.word	0x40001c00
 8009d90:	40002000 	.word	0x40002000

08009d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6a1b      	ldr	r3, [r3, #32]
 8009da2:	f023 0201 	bic.w	r2, r3, #1
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	4b2b      	ldr	r3, [pc, #172]	; (8009e6c <TIM_OC1_SetConfig+0xd8>)
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f023 0303 	bic.w	r3, r3, #3
 8009dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f023 0302 	bic.w	r3, r3, #2
 8009ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a21      	ldr	r2, [pc, #132]	; (8009e70 <TIM_OC1_SetConfig+0xdc>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d003      	beq.n	8009df8 <TIM_OC1_SetConfig+0x64>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <TIM_OC1_SetConfig+0xe0>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d10c      	bne.n	8009e12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f023 0308 	bic.w	r3, r3, #8
 8009dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f023 0304 	bic.w	r3, r3, #4
 8009e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a16      	ldr	r2, [pc, #88]	; (8009e70 <TIM_OC1_SetConfig+0xdc>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC1_SetConfig+0x8e>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a15      	ldr	r2, [pc, #84]	; (8009e74 <TIM_OC1_SetConfig+0xe0>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d111      	bne.n	8009e46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	695b      	ldr	r3, [r3, #20]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	621a      	str	r2, [r3, #32]
}
 8009e60:	bf00      	nop
 8009e62:	371c      	adds	r7, #28
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	fffeff8f 	.word	0xfffeff8f
 8009e70:	40010000 	.word	0x40010000
 8009e74:	40010400 	.word	0x40010400

08009e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b087      	sub	sp, #28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	f023 0210 	bic.w	r2, r3, #16
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	699b      	ldr	r3, [r3, #24]
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4b2e      	ldr	r3, [pc, #184]	; (8009f5c <TIM_OC2_SetConfig+0xe4>)
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f023 0320 	bic.w	r3, r3, #32
 8009ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a23      	ldr	r2, [pc, #140]	; (8009f60 <TIM_OC2_SetConfig+0xe8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d003      	beq.n	8009ee0 <TIM_OC2_SetConfig+0x68>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a22      	ldr	r2, [pc, #136]	; (8009f64 <TIM_OC2_SetConfig+0xec>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10d      	bne.n	8009efc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	011b      	lsls	r3, r3, #4
 8009eee:	697a      	ldr	r2, [r7, #20]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009efa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a18      	ldr	r2, [pc, #96]	; (8009f60 <TIM_OC2_SetConfig+0xe8>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d003      	beq.n	8009f0c <TIM_OC2_SetConfig+0x94>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <TIM_OC2_SetConfig+0xec>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d113      	bne.n	8009f34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	695b      	ldr	r3, [r3, #20]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	621a      	str	r2, [r3, #32]
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	feff8fff 	.word	0xfeff8fff
 8009f60:	40010000 	.word	0x40010000
 8009f64:	40010400 	.word	0x40010400

08009f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b087      	sub	sp, #28
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a1b      	ldr	r3, [r3, #32]
 8009f76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4b2d      	ldr	r3, [pc, #180]	; (800a048 <TIM_OC3_SetConfig+0xe0>)
 8009f94:	4013      	ands	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a22      	ldr	r2, [pc, #136]	; (800a04c <TIM_OC3_SetConfig+0xe4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d003      	beq.n	8009fce <TIM_OC3_SetConfig+0x66>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a21      	ldr	r2, [pc, #132]	; (800a050 <TIM_OC3_SetConfig+0xe8>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d10d      	bne.n	8009fea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	021b      	lsls	r3, r3, #8
 8009fdc:	697a      	ldr	r2, [r7, #20]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a17      	ldr	r2, [pc, #92]	; (800a04c <TIM_OC3_SetConfig+0xe4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d003      	beq.n	8009ffa <TIM_OC3_SetConfig+0x92>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a16      	ldr	r2, [pc, #88]	; (800a050 <TIM_OC3_SetConfig+0xe8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d113      	bne.n	800a022 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a000:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a008:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	695b      	ldr	r3, [r3, #20]
 800a00e:	011b      	lsls	r3, r3, #4
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	4313      	orrs	r3, r2
 800a014:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	011b      	lsls	r3, r3, #4
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	621a      	str	r2, [r3, #32]
}
 800a03c:	bf00      	nop
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	fffeff8f 	.word	0xfffeff8f
 800a04c:	40010000 	.word	0x40010000
 800a050:	40010400 	.word	0x40010400

0800a054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4b1e      	ldr	r3, [pc, #120]	; (800a0f8 <TIM_OC4_SetConfig+0xa4>)
 800a080:	4013      	ands	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	031b      	lsls	r3, r3, #12
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a13      	ldr	r2, [pc, #76]	; (800a0fc <TIM_OC4_SetConfig+0xa8>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC4_SetConfig+0x68>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a12      	ldr	r2, [pc, #72]	; (800a100 <TIM_OC4_SetConfig+0xac>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d109      	bne.n	800a0d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	019b      	lsls	r3, r3, #6
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	621a      	str	r2, [r3, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	feff8fff 	.word	0xfeff8fff
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010400 	.word	0x40010400

0800a104 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	4b1b      	ldr	r3, [pc, #108]	; (800a19c <TIM_OC5_SetConfig+0x98>)
 800a130:	4013      	ands	r3, r2
 800a132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a144:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	041b      	lsls	r3, r3, #16
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	4313      	orrs	r3, r2
 800a150:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a12      	ldr	r2, [pc, #72]	; (800a1a0 <TIM_OC5_SetConfig+0x9c>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d003      	beq.n	800a162 <TIM_OC5_SetConfig+0x5e>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a11      	ldr	r2, [pc, #68]	; (800a1a4 <TIM_OC5_SetConfig+0xa0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d109      	bne.n	800a176 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a168:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	4313      	orrs	r3, r2
 800a174:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	621a      	str	r2, [r3, #32]
}
 800a190:	bf00      	nop
 800a192:	371c      	adds	r7, #28
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	fffeff8f 	.word	0xfffeff8f
 800a1a0:	40010000 	.word	0x40010000
 800a1a4:	40010400 	.word	0x40010400

0800a1a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <TIM_OC6_SetConfig+0x9c>)
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	051b      	lsls	r3, r3, #20
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a13      	ldr	r2, [pc, #76]	; (800a248 <TIM_OC6_SetConfig+0xa0>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d003      	beq.n	800a208 <TIM_OC6_SetConfig+0x60>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a12      	ldr	r2, [pc, #72]	; (800a24c <TIM_OC6_SetConfig+0xa4>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d109      	bne.n	800a21c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a20e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	029b      	lsls	r3, r3, #10
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4313      	orrs	r3, r2
 800a21a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	621a      	str	r2, [r3, #32]
}
 800a236:	bf00      	nop
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	feff8fff 	.word	0xfeff8fff
 800a248:	40010000 	.word	0x40010000
 800a24c:	40010400 	.word	0x40010400

0800a250 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a268:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	697a      	ldr	r2, [r7, #20]
 800a270:	4313      	orrs	r3, r2
 800a272:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	4b3d      	ldr	r3, [pc, #244]	; (800a36c <TIM_SlaveTimer_SetConfig+0x11c>)
 800a278:	4013      	ands	r3, r2
 800a27a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	697a      	ldr	r2, [r7, #20]
 800a282:	4313      	orrs	r3, r2
 800a284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	2b70      	cmp	r3, #112	; 0x70
 800a294:	d01a      	beq.n	800a2cc <TIM_SlaveTimer_SetConfig+0x7c>
 800a296:	2b70      	cmp	r3, #112	; 0x70
 800a298:	d860      	bhi.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
 800a29a:	2b60      	cmp	r3, #96	; 0x60
 800a29c:	d054      	beq.n	800a348 <TIM_SlaveTimer_SetConfig+0xf8>
 800a29e:	2b60      	cmp	r3, #96	; 0x60
 800a2a0:	d85c      	bhi.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
 800a2a2:	2b50      	cmp	r3, #80	; 0x50
 800a2a4:	d046      	beq.n	800a334 <TIM_SlaveTimer_SetConfig+0xe4>
 800a2a6:	2b50      	cmp	r3, #80	; 0x50
 800a2a8:	d858      	bhi.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
 800a2aa:	2b40      	cmp	r3, #64	; 0x40
 800a2ac:	d019      	beq.n	800a2e2 <TIM_SlaveTimer_SetConfig+0x92>
 800a2ae:	2b40      	cmp	r3, #64	; 0x40
 800a2b0:	d854      	bhi.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
 800a2b2:	2b30      	cmp	r3, #48	; 0x30
 800a2b4:	d054      	beq.n	800a360 <TIM_SlaveTimer_SetConfig+0x110>
 800a2b6:	2b30      	cmp	r3, #48	; 0x30
 800a2b8:	d850      	bhi.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	d050      	beq.n	800a360 <TIM_SlaveTimer_SetConfig+0x110>
 800a2be:	2b20      	cmp	r3, #32
 800a2c0:	d84c      	bhi.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d04c      	beq.n	800a360 <TIM_SlaveTimer_SetConfig+0x110>
 800a2c6:	2b10      	cmp	r3, #16
 800a2c8:	d04a      	beq.n	800a360 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800a2ca:	e047      	b.n	800a35c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6818      	ldr	r0, [r3, #0]
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	68d9      	ldr	r1, [r3, #12]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f000 f9ec 	bl	800a6b8 <TIM_ETR_SetConfig>
      break;
 800a2e0:	e03f      	b.n	800a362 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b05      	cmp	r3, #5
 800a2e8:	d101      	bne.n	800a2ee <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e03a      	b.n	800a364 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6a1b      	ldr	r3, [r3, #32]
 800a2f4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6a1a      	ldr	r2, [r3, #32]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0201 	bic.w	r2, r2, #1
 800a304:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	699b      	ldr	r3, [r3, #24]
 800a30c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a314:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	691b      	ldr	r3, [r3, #16]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	4313      	orrs	r3, r2
 800a320:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	693a      	ldr	r2, [r7, #16]
 800a330:	621a      	str	r2, [r3, #32]
      break;
 800a332:	e016      	b.n	800a362 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	6899      	ldr	r1, [r3, #8]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	461a      	mov	r2, r3
 800a342:	f000 f889 	bl	800a458 <TIM_TI1_ConfigInputStage>
      break;
 800a346:	e00c      	b.n	800a362 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	6899      	ldr	r1, [r3, #8]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	461a      	mov	r2, r3
 800a356:	f000 f8eb 	bl	800a530 <TIM_TI2_ConfigInputStage>
      break;
 800a35a:	e002      	b.n	800a362 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a35c:	bf00      	nop
 800a35e:	e000      	b.n	800a362 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800a360:	bf00      	nop
  }
  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	fffefff8 	.word	0xfffefff8

0800a370 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f023 0201 	bic.w	r2, r3, #1
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4a28      	ldr	r2, [pc, #160]	; (800a43c <TIM_TI1_SetConfig+0xcc>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d01b      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3a4:	d017      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	4a25      	ldr	r2, [pc, #148]	; (800a440 <TIM_TI1_SetConfig+0xd0>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d013      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4a24      	ldr	r2, [pc, #144]	; (800a444 <TIM_TI1_SetConfig+0xd4>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d00f      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4a23      	ldr	r2, [pc, #140]	; (800a448 <TIM_TI1_SetConfig+0xd8>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d00b      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4a22      	ldr	r2, [pc, #136]	; (800a44c <TIM_TI1_SetConfig+0xdc>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d007      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4a21      	ldr	r2, [pc, #132]	; (800a450 <TIM_TI1_SetConfig+0xe0>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d003      	beq.n	800a3d6 <TIM_TI1_SetConfig+0x66>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4a20      	ldr	r2, [pc, #128]	; (800a454 <TIM_TI1_SetConfig+0xe4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d101      	bne.n	800a3da <TIM_TI1_SetConfig+0x6a>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e000      	b.n	800a3dc <TIM_TI1_SetConfig+0x6c>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d008      	beq.n	800a3f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f023 0303 	bic.w	r3, r3, #3
 800a3e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e003      	b.n	800a3fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f043 0301 	orr.w	r3, r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	011b      	lsls	r3, r3, #4
 800a406:	b2db      	uxtb	r3, r3
 800a408:	697a      	ldr	r2, [r7, #20]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f023 030a 	bic.w	r3, r3, #10
 800a414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f003 030a 	and.w	r3, r3, #10
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	693a      	ldr	r2, [r7, #16]
 800a42c:	621a      	str	r2, [r3, #32]
}
 800a42e:	bf00      	nop
 800a430:	371c      	adds	r7, #28
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40010000 	.word	0x40010000
 800a440:	40000400 	.word	0x40000400
 800a444:	40000800 	.word	0x40000800
 800a448:	40000c00 	.word	0x40000c00
 800a44c:	40010400 	.word	0x40010400
 800a450:	40014000 	.word	0x40014000
 800a454:	40001800 	.word	0x40001800

0800a458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a458:	b480      	push	{r7}
 800a45a:	b087      	sub	sp, #28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	f023 0201 	bic.w	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f023 030a 	bic.w	r3, r3, #10
 800a494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	621a      	str	r2, [r3, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b087      	sub	sp, #28
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	6a1b      	ldr	r3, [r3, #32]
 800a4c8:	f023 0210 	bic.w	r2, r3, #16
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	699b      	ldr	r3, [r3, #24]
 800a4d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6a1b      	ldr	r3, [r3, #32]
 800a4da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	031b      	lsls	r3, r3, #12
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a512:	693a      	ldr	r2, [r7, #16]
 800a514:	4313      	orrs	r3, r2
 800a516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	621a      	str	r2, [r3, #32]
}
 800a524:	bf00      	nop
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a1b      	ldr	r3, [r3, #32]
 800a540:	f023 0210 	bic.w	r2, r3, #16
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a55a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	031b      	lsls	r3, r3, #12
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	4313      	orrs	r3, r2
 800a564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a56c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	4313      	orrs	r3, r2
 800a576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	621a      	str	r2, [r3, #32]
}
 800a584:	bf00      	nop
 800a586:	371c      	adds	r7, #28
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f023 0303 	bic.w	r3, r3, #3
 800a5bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	011b      	lsls	r3, r3, #4
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a5e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	021b      	lsls	r3, r3, #8
 800a5e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a5ea:	693a      	ldr	r2, [r7, #16]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	621a      	str	r2, [r3, #32]
}
 800a5fc:	bf00      	nop
 800a5fe:	371c      	adds	r7, #28
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a1b      	ldr	r3, [r3, #32]
 800a62c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	021b      	lsls	r3, r3, #8
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	031b      	lsls	r3, r3, #12
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	4313      	orrs	r3, r2
 800a652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a65a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	031b      	lsls	r3, r3, #12
 800a660:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	4313      	orrs	r3, r2
 800a668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	621a      	str	r2, [r3, #32]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a682:	b480      	push	{r7}
 800a684:	b085      	sub	sp, #20
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	f043 0307 	orr.w	r3, r3, #7
 800a6a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	609a      	str	r2, [r3, #8]
}
 800a6ac:	bf00      	nop
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	021a      	lsls	r2, r3, #8
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	431a      	orrs	r2, r3
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	609a      	str	r2, [r3, #8]
}
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f003 031f 	and.w	r3, r3, #31
 800a70a:	2201      	movs	r2, #1
 800a70c:	fa02 f303 	lsl.w	r3, r2, r3
 800a710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6a1a      	ldr	r2, [r3, #32]
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	43db      	mvns	r3, r3
 800a71a:	401a      	ands	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a1a      	ldr	r2, [r3, #32]
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f003 031f 	and.w	r3, r3, #31
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	fa01 f303 	lsl.w	r3, r1, r3
 800a730:	431a      	orrs	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	621a      	str	r2, [r3, #32]
}
 800a736:	bf00      	nop
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
	...

0800a744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a754:	2b01      	cmp	r3, #1
 800a756:	d101      	bne.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a758:	2302      	movs	r3, #2
 800a75a:	e06d      	b.n	800a838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2202      	movs	r2, #2
 800a768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a30      	ldr	r2, [pc, #192]	; (800a844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d004      	beq.n	800a790 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a2f      	ldr	r2, [pc, #188]	; (800a848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d108      	bne.n	800a7a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a796:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a20      	ldr	r2, [pc, #128]	; (800a844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d022      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ce:	d01d      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d018      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a1c      	ldr	r2, [pc, #112]	; (800a850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d013      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a1a      	ldr	r2, [pc, #104]	; (800a854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00e      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a15      	ldr	r2, [pc, #84]	; (800a848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d009      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a16      	ldr	r2, [pc, #88]	; (800a858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d004      	beq.n	800a80c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a15      	ldr	r2, [pc, #84]	; (800a85c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d10c      	bne.n	800a826 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68ba      	ldr	r2, [r7, #8]
 800a824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	40010000 	.word	0x40010000
 800a848:	40010400 	.word	0x40010400
 800a84c:	40000400 	.word	0x40000400
 800a850:	40000800 	.word	0x40000800
 800a854:	40000c00 	.word	0x40000c00
 800a858:	40014000 	.word	0x40014000
 800a85c:	40001800 	.word	0x40001800

0800a860 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a874:	2b01      	cmp	r3, #1
 800a876:	d101      	bne.n	800a87c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a878:	2302      	movs	r3, #2
 800a87a:	e065      	b.n	800a948 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685b      	ldr	r3, [r3, #4]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	041b      	lsls	r3, r3, #16
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a16      	ldr	r2, [pc, #88]	; (800a954 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d004      	beq.n	800a90a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a14      	ldr	r2, [pc, #80]	; (800a958 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d115      	bne.n	800a936 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	051b      	lsls	r3, r3, #20
 800a916:	4313      	orrs	r3, r2
 800a918:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	69db      	ldr	r3, [r3, #28]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	6a1b      	ldr	r3, [r3, #32]
 800a932:	4313      	orrs	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3714      	adds	r7, #20
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	40010000 	.word	0x40010000
 800a958:	40010400 	.word	0x40010400

0800a95c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e040      	b.n	800aa2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d106      	bne.n	800a9c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7fa f856 	bl	8004a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2224      	movs	r2, #36	; 0x24
 800a9c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f022 0201 	bic.w	r2, r2, #1
 800a9d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fbec 	bl	800b1b4 <UART_SetConfig>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d101      	bne.n	800a9e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e022      	b.n	800aa2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d002      	beq.n	800a9f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fe42 	bl	800b678 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689a      	ldr	r2, [r3, #8]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f042 0201 	orr.w	r2, r2, #1
 800aa22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fec9 	bl	800b7bc <UART_CheckIdleState>
 800aa2a:	4603      	mov	r3, r0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08a      	sub	sp, #40	; 0x28
 800aa38:	af02      	add	r7, sp, #8
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	4613      	mov	r3, r2
 800aa42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	f040 8081 	bne.w	800ab50 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d002      	beq.n	800aa5a <HAL_UART_Transmit+0x26>
 800aa54:	88fb      	ldrh	r3, [r7, #6]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e079      	b.n	800ab52 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d101      	bne.n	800aa6c <HAL_UART_Transmit+0x38>
 800aa68:	2302      	movs	r3, #2
 800aa6a:	e072      	b.n	800ab52 <HAL_UART_Transmit+0x11e>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2221      	movs	r2, #33	; 0x21
 800aa80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa82:	f7fb f9f3 	bl	8005e6c <HAL_GetTick>
 800aa86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	88fa      	ldrh	r2, [r7, #6]
 800aa8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaa0:	d108      	bne.n	800aab4 <HAL_UART_Transmit+0x80>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d104      	bne.n	800aab4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	61bb      	str	r3, [r7, #24]
 800aab2:	e003      	b.n	800aabc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aab8:	2300      	movs	r3, #0
 800aaba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800aac4:	e02c      	b.n	800ab20 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2200      	movs	r2, #0
 800aace:	2180      	movs	r1, #128	; 0x80
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fea6 	bl	800b822 <UART_WaitOnFlagUntilTimeout>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e038      	b.n	800ab52 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10b      	bne.n	800aafe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	881b      	ldrh	r3, [r3, #0]
 800aaea:	461a      	mov	r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaf4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	3302      	adds	r3, #2
 800aafa:	61bb      	str	r3, [r7, #24]
 800aafc:	e007      	b.n	800ab0e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	781a      	ldrb	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	3b01      	subs	r3, #1
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1cc      	bne.n	800aac6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2200      	movs	r2, #0
 800ab34:	2140      	movs	r1, #64	; 0x40
 800ab36:	68f8      	ldr	r0, [r7, #12]
 800ab38:	f000 fe73 	bl	800b822 <UART_WaitOnFlagUntilTimeout>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e005      	b.n	800ab52 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	e000      	b.n	800ab52 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800ab50:	2302      	movs	r3, #2
  }
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3720      	adds	r7, #32
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b08a      	sub	sp, #40	; 0x28
 800ab5e:	af02      	add	r7, sp, #8
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	603b      	str	r3, [r7, #0]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab6e:	2b20      	cmp	r3, #32
 800ab70:	f040 80be 	bne.w	800acf0 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <HAL_UART_Receive+0x26>
 800ab7a:	88fb      	ldrh	r3, [r7, #6]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	e0b6      	b.n	800acf2 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d101      	bne.n	800ab92 <HAL_UART_Receive+0x38>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e0af      	b.n	800acf2 <HAL_UART_Receive+0x198>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2222      	movs	r2, #34	; 0x22
 800aba6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abae:	f7fb f95d 	bl	8005e6c <HAL_GetTick>
 800abb2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	88fa      	ldrh	r2, [r7, #6]
 800abb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	88fa      	ldrh	r2, [r7, #6]
 800abc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abcc:	d10e      	bne.n	800abec <HAL_UART_Receive+0x92>
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d105      	bne.n	800abe2 <HAL_UART_Receive+0x88>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f240 12ff 	movw	r2, #511	; 0x1ff
 800abdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abe0:	e02d      	b.n	800ac3e <HAL_UART_Receive+0xe4>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	22ff      	movs	r2, #255	; 0xff
 800abe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abea:	e028      	b.n	800ac3e <HAL_UART_Receive+0xe4>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10d      	bne.n	800ac10 <HAL_UART_Receive+0xb6>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d104      	bne.n	800ac06 <HAL_UART_Receive+0xac>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	22ff      	movs	r2, #255	; 0xff
 800ac00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac04:	e01b      	b.n	800ac3e <HAL_UART_Receive+0xe4>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	227f      	movs	r2, #127	; 0x7f
 800ac0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac0e:	e016      	b.n	800ac3e <HAL_UART_Receive+0xe4>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac18:	d10d      	bne.n	800ac36 <HAL_UART_Receive+0xdc>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <HAL_UART_Receive+0xd2>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	227f      	movs	r2, #127	; 0x7f
 800ac26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac2a:	e008      	b.n	800ac3e <HAL_UART_Receive+0xe4>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	223f      	movs	r2, #63	; 0x3f
 800ac30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac34:	e003      	b.n	800ac3e <HAL_UART_Receive+0xe4>
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac44:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4e:	d108      	bne.n	800ac62 <HAL_UART_Receive+0x108>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d104      	bne.n	800ac62 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	61bb      	str	r3, [r7, #24]
 800ac60:	e003      	b.n	800ac6a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ac72:	e032      	b.n	800acda <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2120      	movs	r1, #32
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 fdcf 	bl	800b822 <UART_WaitOnFlagUntilTimeout>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	e031      	b.n	800acf2 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10c      	bne.n	800acae <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	8a7b      	ldrh	r3, [r7, #18]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	3302      	adds	r3, #2
 800acaa:	61bb      	str	r3, [r7, #24]
 800acac:	e00c      	b.n	800acc8 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	8a7b      	ldrh	r3, [r7, #18]
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	4013      	ands	r3, r2
 800acbc:	b2da      	uxtb	r2, r3
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	3301      	adds	r3, #1
 800acc6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800acce:	b29b      	uxth	r3, r3
 800acd0:	3b01      	subs	r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1c6      	bne.n	800ac74 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2220      	movs	r2, #32
 800acea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	e000      	b.n	800acf2 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800acf0:	2302      	movs	r3, #2
  }
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	3720      	adds	r7, #32
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	4613      	mov	r3, r2
 800ad06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0c:	2b20      	cmp	r3, #32
 800ad0e:	d12c      	bne.n	800ad6a <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d002      	beq.n	800ad1c <HAL_UART_Receive_DMA+0x22>
 800ad16:	88fb      	ldrh	r3, [r7, #6]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e025      	b.n	800ad6c <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d101      	bne.n	800ad2e <HAL_UART_Receive_DMA+0x34>
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	e01e      	b.n	800ad6c <HAL_UART_Receive_DMA+0x72>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d007      	beq.n	800ad5a <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ad58:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ad5a:	88fb      	ldrh	r3, [r7, #6]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	68b9      	ldr	r1, [r7, #8]
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 fddb 	bl	800b91c <UART_Start_Receive_DMA>
 800ad66:	4603      	mov	r3, r0
 800ad68:	e000      	b.n	800ad6c <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 800ad6a:	2302      	movs	r3, #2
  }
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d113      	bne.n	800adcc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f003 0320 	and.w	r3, r3, #32
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00e      	beq.n	800adcc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d009      	beq.n	800adcc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 81b9 	beq.w	800b134 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4798      	blx	r3
      }
      return;
 800adca:	e1b3      	b.n	800b134 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	2b00      	cmp	r3, #0
 800add0:	f000 80e3 	beq.w	800af9a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d105      	bne.n	800adea <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	4ba5      	ldr	r3, [pc, #660]	; (800b078 <HAL_UART_IRQHandler+0x304>)
 800ade2:	4013      	ands	r3, r2
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 80d8 	beq.w	800af9a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	f003 0301 	and.w	r3, r3, #1
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d010      	beq.n	800ae16 <HAL_UART_IRQHandler+0xa2>
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2201      	movs	r2, #1
 800ae04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae0c:	f043 0201 	orr.w	r2, r3, #1
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	f003 0302 	and.w	r3, r3, #2
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d010      	beq.n	800ae42 <HAL_UART_IRQHandler+0xce>
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00b      	beq.n	800ae42 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2202      	movs	r2, #2
 800ae30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae38:	f043 0204 	orr.w	r2, r3, #4
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	f003 0304 	and.w	r3, r3, #4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d010      	beq.n	800ae6e <HAL_UART_IRQHandler+0xfa>
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f003 0301 	and.w	r3, r3, #1
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae64:	f043 0202 	orr.w	r2, r3, #2
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	f003 0308 	and.w	r3, r3, #8
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d015      	beq.n	800aea4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d104      	bne.n	800ae8c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00b      	beq.n	800aea4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2208      	movs	r2, #8
 800ae92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae9a:	f043 0208 	orr.w	r2, r3, #8
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d011      	beq.n	800aed2 <HAL_UART_IRQHandler+0x15e>
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00c      	beq.n	800aed2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aec8:	f043 0220 	orr.w	r2, r3, #32
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f000 812d 	beq.w	800b138 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	f003 0320 	and.w	r3, r3, #32
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00c      	beq.n	800af02 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	f003 0320 	and.w	r3, r3, #32
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af08:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af14:	2b40      	cmp	r3, #64	; 0x40
 800af16:	d004      	beq.n	800af22 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d031      	beq.n	800af86 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fd7b 	bl	800ba1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af32:	2b40      	cmp	r3, #64	; 0x40
 800af34:	d123      	bne.n	800af7e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af44:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d013      	beq.n	800af76 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af52:	4a4a      	ldr	r2, [pc, #296]	; (800b07c <HAL_UART_IRQHandler+0x308>)
 800af54:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7fb fcce 	bl	80068fc <HAL_DMA_Abort_IT>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d017      	beq.n	800af96 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800af70:	4610      	mov	r0, r2
 800af72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	e00f      	b.n	800af96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f906 	bl	800b188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	e00b      	b.n	800af96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f902 	bl	800b188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	e007      	b.n	800af96 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f8fe 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800af94:	e0d0      	b.n	800b138 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af96:	bf00      	nop
    return;
 800af98:	e0ce      	b.n	800b138 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	f040 80a7 	bne.w	800b0f2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	f003 0310 	and.w	r3, r3, #16
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 80a1 	beq.w	800b0f2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f003 0310 	and.w	r3, r3, #16
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 809b 	beq.w	800b0f2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2210      	movs	r2, #16
 800afc2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	689b      	ldr	r3, [r3, #8]
 800afca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afce:	2b40      	cmp	r3, #64	; 0x40
 800afd0:	d156      	bne.n	800b080 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800afdc:	893b      	ldrh	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f000 80ac 	beq.w	800b13c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800afea:	893a      	ldrh	r2, [r7, #8]
 800afec:	429a      	cmp	r2, r3
 800afee:	f080 80a5 	bcs.w	800b13c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	893a      	ldrh	r2, [r7, #8]
 800aff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affe:	69db      	ldr	r3, [r3, #28]
 800b000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b004:	d02a      	beq.n	800b05c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b014:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 0201 	bic.w	r2, r2, #1
 800b024:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b034:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2220      	movs	r2, #32
 800b03a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0210 	bic.w	r2, r2, #16
 800b050:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	4618      	mov	r0, r3
 800b058:	f7fb fbe0 	bl	800681c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b068:	b29b      	uxth	r3, r3
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	4619      	mov	r1, r3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f893 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b076:	e061      	b.n	800b13c <HAL_UART_IRQHandler+0x3c8>
 800b078:	04000120 	.word	0x04000120
 800b07c:	0800bbc5 	.word	0x0800bbc5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b098:	b29b      	uxth	r3, r3
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d050      	beq.n	800b140 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800b09e:	897b      	ldrh	r3, [r7, #10]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d04d      	beq.n	800b140 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0b2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	689a      	ldr	r2, [r3, #8]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0201 	bic.w	r2, r2, #1
 800b0c2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f022 0210 	bic.w	r2, r2, #16
 800b0e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b0e6:	897b      	ldrh	r3, [r7, #10]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f856 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0f0:	e026      	b.n	800b140 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00d      	beq.n	800b118 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b102:	2b00      	cmp	r3, #0
 800b104:	d008      	beq.n	800b118 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d01a      	beq.n	800b144 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	4798      	blx	r3
    }
    return;
 800b116:	e015      	b.n	800b144 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d011      	beq.n	800b146 <HAL_UART_IRQHandler+0x3d2>
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00c      	beq.n	800b146 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fd5f 	bl	800bbf0 <UART_EndTransmit_IT>
    return;
 800b132:	e008      	b.n	800b146 <HAL_UART_IRQHandler+0x3d2>
      return;
 800b134:	bf00      	nop
 800b136:	e006      	b.n	800b146 <HAL_UART_IRQHandler+0x3d2>
    return;
 800b138:	bf00      	nop
 800b13a:	e004      	b.n	800b146 <HAL_UART_IRQHandler+0x3d2>
      return;
 800b13c:	bf00      	nop
 800b13e:	e002      	b.n	800b146 <HAL_UART_IRQHandler+0x3d2>
      return;
 800b140:	bf00      	nop
 800b142:	e000      	b.n	800b146 <HAL_UART_IRQHandler+0x3d2>
    return;
 800b144:	bf00      	nop
  }

}
 800b146:	3720      	adds	r7, #32
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b190:	bf00      	nop
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	691b      	ldr	r3, [r3, #16]
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4ba7      	ldr	r3, [pc, #668]	; (800b47c <UART_SetConfig+0x2c8>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6812      	ldr	r2, [r2, #0]
 800b1e6:	6979      	ldr	r1, [r7, #20]
 800b1e8:	430b      	orrs	r3, r1
 800b1ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	68da      	ldr	r2, [r3, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a1b      	ldr	r3, [r3, #32]
 800b20c:	697a      	ldr	r2, [r7, #20]
 800b20e:	4313      	orrs	r3, r2
 800b210:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	430a      	orrs	r2, r1
 800b224:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a95      	ldr	r2, [pc, #596]	; (800b480 <UART_SetConfig+0x2cc>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d120      	bne.n	800b272 <UART_SetConfig+0xbe>
 800b230:	4b94      	ldr	r3, [pc, #592]	; (800b484 <UART_SetConfig+0x2d0>)
 800b232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b236:	f003 0303 	and.w	r3, r3, #3
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d816      	bhi.n	800b26c <UART_SetConfig+0xb8>
 800b23e:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <UART_SetConfig+0x90>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b255 	.word	0x0800b255
 800b248:	0800b261 	.word	0x0800b261
 800b24c:	0800b25b 	.word	0x0800b25b
 800b250:	0800b267 	.word	0x0800b267
 800b254:	2301      	movs	r3, #1
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e14f      	b.n	800b4fa <UART_SetConfig+0x346>
 800b25a:	2302      	movs	r3, #2
 800b25c:	77fb      	strb	r3, [r7, #31]
 800b25e:	e14c      	b.n	800b4fa <UART_SetConfig+0x346>
 800b260:	2304      	movs	r3, #4
 800b262:	77fb      	strb	r3, [r7, #31]
 800b264:	e149      	b.n	800b4fa <UART_SetConfig+0x346>
 800b266:	2308      	movs	r3, #8
 800b268:	77fb      	strb	r3, [r7, #31]
 800b26a:	e146      	b.n	800b4fa <UART_SetConfig+0x346>
 800b26c:	2310      	movs	r3, #16
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	e143      	b.n	800b4fa <UART_SetConfig+0x346>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a84      	ldr	r2, [pc, #528]	; (800b488 <UART_SetConfig+0x2d4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d132      	bne.n	800b2e2 <UART_SetConfig+0x12e>
 800b27c:	4b81      	ldr	r3, [pc, #516]	; (800b484 <UART_SetConfig+0x2d0>)
 800b27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b282:	f003 030c 	and.w	r3, r3, #12
 800b286:	2b0c      	cmp	r3, #12
 800b288:	d828      	bhi.n	800b2dc <UART_SetConfig+0x128>
 800b28a:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <UART_SetConfig+0xdc>)
 800b28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b290:	0800b2c5 	.word	0x0800b2c5
 800b294:	0800b2dd 	.word	0x0800b2dd
 800b298:	0800b2dd 	.word	0x0800b2dd
 800b29c:	0800b2dd 	.word	0x0800b2dd
 800b2a0:	0800b2d1 	.word	0x0800b2d1
 800b2a4:	0800b2dd 	.word	0x0800b2dd
 800b2a8:	0800b2dd 	.word	0x0800b2dd
 800b2ac:	0800b2dd 	.word	0x0800b2dd
 800b2b0:	0800b2cb 	.word	0x0800b2cb
 800b2b4:	0800b2dd 	.word	0x0800b2dd
 800b2b8:	0800b2dd 	.word	0x0800b2dd
 800b2bc:	0800b2dd 	.word	0x0800b2dd
 800b2c0:	0800b2d7 	.word	0x0800b2d7
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	77fb      	strb	r3, [r7, #31]
 800b2c8:	e117      	b.n	800b4fa <UART_SetConfig+0x346>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	77fb      	strb	r3, [r7, #31]
 800b2ce:	e114      	b.n	800b4fa <UART_SetConfig+0x346>
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	77fb      	strb	r3, [r7, #31]
 800b2d4:	e111      	b.n	800b4fa <UART_SetConfig+0x346>
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	77fb      	strb	r3, [r7, #31]
 800b2da:	e10e      	b.n	800b4fa <UART_SetConfig+0x346>
 800b2dc:	2310      	movs	r3, #16
 800b2de:	77fb      	strb	r3, [r7, #31]
 800b2e0:	e10b      	b.n	800b4fa <UART_SetConfig+0x346>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a69      	ldr	r2, [pc, #420]	; (800b48c <UART_SetConfig+0x2d8>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d120      	bne.n	800b32e <UART_SetConfig+0x17a>
 800b2ec:	4b65      	ldr	r3, [pc, #404]	; (800b484 <UART_SetConfig+0x2d0>)
 800b2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b2f6:	2b30      	cmp	r3, #48	; 0x30
 800b2f8:	d013      	beq.n	800b322 <UART_SetConfig+0x16e>
 800b2fa:	2b30      	cmp	r3, #48	; 0x30
 800b2fc:	d814      	bhi.n	800b328 <UART_SetConfig+0x174>
 800b2fe:	2b20      	cmp	r3, #32
 800b300:	d009      	beq.n	800b316 <UART_SetConfig+0x162>
 800b302:	2b20      	cmp	r3, #32
 800b304:	d810      	bhi.n	800b328 <UART_SetConfig+0x174>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d002      	beq.n	800b310 <UART_SetConfig+0x15c>
 800b30a:	2b10      	cmp	r3, #16
 800b30c:	d006      	beq.n	800b31c <UART_SetConfig+0x168>
 800b30e:	e00b      	b.n	800b328 <UART_SetConfig+0x174>
 800b310:	2300      	movs	r3, #0
 800b312:	77fb      	strb	r3, [r7, #31]
 800b314:	e0f1      	b.n	800b4fa <UART_SetConfig+0x346>
 800b316:	2302      	movs	r3, #2
 800b318:	77fb      	strb	r3, [r7, #31]
 800b31a:	e0ee      	b.n	800b4fa <UART_SetConfig+0x346>
 800b31c:	2304      	movs	r3, #4
 800b31e:	77fb      	strb	r3, [r7, #31]
 800b320:	e0eb      	b.n	800b4fa <UART_SetConfig+0x346>
 800b322:	2308      	movs	r3, #8
 800b324:	77fb      	strb	r3, [r7, #31]
 800b326:	e0e8      	b.n	800b4fa <UART_SetConfig+0x346>
 800b328:	2310      	movs	r3, #16
 800b32a:	77fb      	strb	r3, [r7, #31]
 800b32c:	e0e5      	b.n	800b4fa <UART_SetConfig+0x346>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a57      	ldr	r2, [pc, #348]	; (800b490 <UART_SetConfig+0x2dc>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d120      	bne.n	800b37a <UART_SetConfig+0x1c6>
 800b338:	4b52      	ldr	r3, [pc, #328]	; (800b484 <UART_SetConfig+0x2d0>)
 800b33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b342:	2bc0      	cmp	r3, #192	; 0xc0
 800b344:	d013      	beq.n	800b36e <UART_SetConfig+0x1ba>
 800b346:	2bc0      	cmp	r3, #192	; 0xc0
 800b348:	d814      	bhi.n	800b374 <UART_SetConfig+0x1c0>
 800b34a:	2b80      	cmp	r3, #128	; 0x80
 800b34c:	d009      	beq.n	800b362 <UART_SetConfig+0x1ae>
 800b34e:	2b80      	cmp	r3, #128	; 0x80
 800b350:	d810      	bhi.n	800b374 <UART_SetConfig+0x1c0>
 800b352:	2b00      	cmp	r3, #0
 800b354:	d002      	beq.n	800b35c <UART_SetConfig+0x1a8>
 800b356:	2b40      	cmp	r3, #64	; 0x40
 800b358:	d006      	beq.n	800b368 <UART_SetConfig+0x1b4>
 800b35a:	e00b      	b.n	800b374 <UART_SetConfig+0x1c0>
 800b35c:	2300      	movs	r3, #0
 800b35e:	77fb      	strb	r3, [r7, #31]
 800b360:	e0cb      	b.n	800b4fa <UART_SetConfig+0x346>
 800b362:	2302      	movs	r3, #2
 800b364:	77fb      	strb	r3, [r7, #31]
 800b366:	e0c8      	b.n	800b4fa <UART_SetConfig+0x346>
 800b368:	2304      	movs	r3, #4
 800b36a:	77fb      	strb	r3, [r7, #31]
 800b36c:	e0c5      	b.n	800b4fa <UART_SetConfig+0x346>
 800b36e:	2308      	movs	r3, #8
 800b370:	77fb      	strb	r3, [r7, #31]
 800b372:	e0c2      	b.n	800b4fa <UART_SetConfig+0x346>
 800b374:	2310      	movs	r3, #16
 800b376:	77fb      	strb	r3, [r7, #31]
 800b378:	e0bf      	b.n	800b4fa <UART_SetConfig+0x346>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a45      	ldr	r2, [pc, #276]	; (800b494 <UART_SetConfig+0x2e0>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d125      	bne.n	800b3d0 <UART_SetConfig+0x21c>
 800b384:	4b3f      	ldr	r3, [pc, #252]	; (800b484 <UART_SetConfig+0x2d0>)
 800b386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b392:	d017      	beq.n	800b3c4 <UART_SetConfig+0x210>
 800b394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b398:	d817      	bhi.n	800b3ca <UART_SetConfig+0x216>
 800b39a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b39e:	d00b      	beq.n	800b3b8 <UART_SetConfig+0x204>
 800b3a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3a4:	d811      	bhi.n	800b3ca <UART_SetConfig+0x216>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <UART_SetConfig+0x1fe>
 800b3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ae:	d006      	beq.n	800b3be <UART_SetConfig+0x20a>
 800b3b0:	e00b      	b.n	800b3ca <UART_SetConfig+0x216>
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	77fb      	strb	r3, [r7, #31]
 800b3b6:	e0a0      	b.n	800b4fa <UART_SetConfig+0x346>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	77fb      	strb	r3, [r7, #31]
 800b3bc:	e09d      	b.n	800b4fa <UART_SetConfig+0x346>
 800b3be:	2304      	movs	r3, #4
 800b3c0:	77fb      	strb	r3, [r7, #31]
 800b3c2:	e09a      	b.n	800b4fa <UART_SetConfig+0x346>
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	77fb      	strb	r3, [r7, #31]
 800b3c8:	e097      	b.n	800b4fa <UART_SetConfig+0x346>
 800b3ca:	2310      	movs	r3, #16
 800b3cc:	77fb      	strb	r3, [r7, #31]
 800b3ce:	e094      	b.n	800b4fa <UART_SetConfig+0x346>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a30      	ldr	r2, [pc, #192]	; (800b498 <UART_SetConfig+0x2e4>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d125      	bne.n	800b426 <UART_SetConfig+0x272>
 800b3da:	4b2a      	ldr	r3, [pc, #168]	; (800b484 <UART_SetConfig+0x2d0>)
 800b3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b3e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3e8:	d017      	beq.n	800b41a <UART_SetConfig+0x266>
 800b3ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b3ee:	d817      	bhi.n	800b420 <UART_SetConfig+0x26c>
 800b3f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3f4:	d00b      	beq.n	800b40e <UART_SetConfig+0x25a>
 800b3f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3fa:	d811      	bhi.n	800b420 <UART_SetConfig+0x26c>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <UART_SetConfig+0x254>
 800b400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b404:	d006      	beq.n	800b414 <UART_SetConfig+0x260>
 800b406:	e00b      	b.n	800b420 <UART_SetConfig+0x26c>
 800b408:	2301      	movs	r3, #1
 800b40a:	77fb      	strb	r3, [r7, #31]
 800b40c:	e075      	b.n	800b4fa <UART_SetConfig+0x346>
 800b40e:	2302      	movs	r3, #2
 800b410:	77fb      	strb	r3, [r7, #31]
 800b412:	e072      	b.n	800b4fa <UART_SetConfig+0x346>
 800b414:	2304      	movs	r3, #4
 800b416:	77fb      	strb	r3, [r7, #31]
 800b418:	e06f      	b.n	800b4fa <UART_SetConfig+0x346>
 800b41a:	2308      	movs	r3, #8
 800b41c:	77fb      	strb	r3, [r7, #31]
 800b41e:	e06c      	b.n	800b4fa <UART_SetConfig+0x346>
 800b420:	2310      	movs	r3, #16
 800b422:	77fb      	strb	r3, [r7, #31]
 800b424:	e069      	b.n	800b4fa <UART_SetConfig+0x346>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a1c      	ldr	r2, [pc, #112]	; (800b49c <UART_SetConfig+0x2e8>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d137      	bne.n	800b4a0 <UART_SetConfig+0x2ec>
 800b430:	4b14      	ldr	r3, [pc, #80]	; (800b484 <UART_SetConfig+0x2d0>)
 800b432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b436:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b43a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b43e:	d017      	beq.n	800b470 <UART_SetConfig+0x2bc>
 800b440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b444:	d817      	bhi.n	800b476 <UART_SetConfig+0x2c2>
 800b446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b44a:	d00b      	beq.n	800b464 <UART_SetConfig+0x2b0>
 800b44c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b450:	d811      	bhi.n	800b476 <UART_SetConfig+0x2c2>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <UART_SetConfig+0x2aa>
 800b456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45a:	d006      	beq.n	800b46a <UART_SetConfig+0x2b6>
 800b45c:	e00b      	b.n	800b476 <UART_SetConfig+0x2c2>
 800b45e:	2300      	movs	r3, #0
 800b460:	77fb      	strb	r3, [r7, #31]
 800b462:	e04a      	b.n	800b4fa <UART_SetConfig+0x346>
 800b464:	2302      	movs	r3, #2
 800b466:	77fb      	strb	r3, [r7, #31]
 800b468:	e047      	b.n	800b4fa <UART_SetConfig+0x346>
 800b46a:	2304      	movs	r3, #4
 800b46c:	77fb      	strb	r3, [r7, #31]
 800b46e:	e044      	b.n	800b4fa <UART_SetConfig+0x346>
 800b470:	2308      	movs	r3, #8
 800b472:	77fb      	strb	r3, [r7, #31]
 800b474:	e041      	b.n	800b4fa <UART_SetConfig+0x346>
 800b476:	2310      	movs	r3, #16
 800b478:	77fb      	strb	r3, [r7, #31]
 800b47a:	e03e      	b.n	800b4fa <UART_SetConfig+0x346>
 800b47c:	efff69f3 	.word	0xefff69f3
 800b480:	40011000 	.word	0x40011000
 800b484:	40023800 	.word	0x40023800
 800b488:	40004400 	.word	0x40004400
 800b48c:	40004800 	.word	0x40004800
 800b490:	40004c00 	.word	0x40004c00
 800b494:	40005000 	.word	0x40005000
 800b498:	40011400 	.word	0x40011400
 800b49c:	40007800 	.word	0x40007800
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a71      	ldr	r2, [pc, #452]	; (800b66c <UART_SetConfig+0x4b8>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d125      	bne.n	800b4f6 <UART_SetConfig+0x342>
 800b4aa:	4b71      	ldr	r3, [pc, #452]	; (800b670 <UART_SetConfig+0x4bc>)
 800b4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b4b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b4b8:	d017      	beq.n	800b4ea <UART_SetConfig+0x336>
 800b4ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b4be:	d817      	bhi.n	800b4f0 <UART_SetConfig+0x33c>
 800b4c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c4:	d00b      	beq.n	800b4de <UART_SetConfig+0x32a>
 800b4c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4ca:	d811      	bhi.n	800b4f0 <UART_SetConfig+0x33c>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d003      	beq.n	800b4d8 <UART_SetConfig+0x324>
 800b4d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4d4:	d006      	beq.n	800b4e4 <UART_SetConfig+0x330>
 800b4d6:	e00b      	b.n	800b4f0 <UART_SetConfig+0x33c>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	77fb      	strb	r3, [r7, #31]
 800b4dc:	e00d      	b.n	800b4fa <UART_SetConfig+0x346>
 800b4de:	2302      	movs	r3, #2
 800b4e0:	77fb      	strb	r3, [r7, #31]
 800b4e2:	e00a      	b.n	800b4fa <UART_SetConfig+0x346>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e007      	b.n	800b4fa <UART_SetConfig+0x346>
 800b4ea:	2308      	movs	r3, #8
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e004      	b.n	800b4fa <UART_SetConfig+0x346>
 800b4f0:	2310      	movs	r3, #16
 800b4f2:	77fb      	strb	r3, [r7, #31]
 800b4f4:	e001      	b.n	800b4fa <UART_SetConfig+0x346>
 800b4f6:	2310      	movs	r3, #16
 800b4f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b502:	d15b      	bne.n	800b5bc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b504:	7ffb      	ldrb	r3, [r7, #31]
 800b506:	2b08      	cmp	r3, #8
 800b508:	d827      	bhi.n	800b55a <UART_SetConfig+0x3a6>
 800b50a:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <UART_SetConfig+0x35c>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b535 	.word	0x0800b535
 800b514:	0800b53d 	.word	0x0800b53d
 800b518:	0800b545 	.word	0x0800b545
 800b51c:	0800b55b 	.word	0x0800b55b
 800b520:	0800b54b 	.word	0x0800b54b
 800b524:	0800b55b 	.word	0x0800b55b
 800b528:	0800b55b 	.word	0x0800b55b
 800b52c:	0800b55b 	.word	0x0800b55b
 800b530:	0800b553 	.word	0x0800b553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b534:	f7fc ffe0 	bl	80084f8 <HAL_RCC_GetPCLK1Freq>
 800b538:	61b8      	str	r0, [r7, #24]
        break;
 800b53a:	e013      	b.n	800b564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b53c:	f7fc fff0 	bl	8008520 <HAL_RCC_GetPCLK2Freq>
 800b540:	61b8      	str	r0, [r7, #24]
        break;
 800b542:	e00f      	b.n	800b564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b544:	4b4b      	ldr	r3, [pc, #300]	; (800b674 <UART_SetConfig+0x4c0>)
 800b546:	61bb      	str	r3, [r7, #24]
        break;
 800b548:	e00c      	b.n	800b564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b54a:	f7fc ff13 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 800b54e:	61b8      	str	r0, [r7, #24]
        break;
 800b550:	e008      	b.n	800b564 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b556:	61bb      	str	r3, [r7, #24]
        break;
 800b558:	e004      	b.n	800b564 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	77bb      	strb	r3, [r7, #30]
        break;
 800b562:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d074      	beq.n	800b654 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	005a      	lsls	r2, r3, #1
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	085b      	lsrs	r3, r3, #1
 800b574:	441a      	add	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57e:	b29b      	uxth	r3, r3
 800b580:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	2b0f      	cmp	r3, #15
 800b586:	d916      	bls.n	800b5b6 <UART_SetConfig+0x402>
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b58e:	d212      	bcs.n	800b5b6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	b29b      	uxth	r3, r3
 800b594:	f023 030f 	bic.w	r3, r3, #15
 800b598:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	085b      	lsrs	r3, r3, #1
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	f003 0307 	and.w	r3, r3, #7
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	89fb      	ldrh	r3, [r7, #14]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	89fa      	ldrh	r2, [r7, #14]
 800b5b2:	60da      	str	r2, [r3, #12]
 800b5b4:	e04e      	b.n	800b654 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	77bb      	strb	r3, [r7, #30]
 800b5ba:	e04b      	b.n	800b654 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5bc:	7ffb      	ldrb	r3, [r7, #31]
 800b5be:	2b08      	cmp	r3, #8
 800b5c0:	d827      	bhi.n	800b612 <UART_SetConfig+0x45e>
 800b5c2:	a201      	add	r2, pc, #4	; (adr r2, 800b5c8 <UART_SetConfig+0x414>)
 800b5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c8:	0800b5ed 	.word	0x0800b5ed
 800b5cc:	0800b5f5 	.word	0x0800b5f5
 800b5d0:	0800b5fd 	.word	0x0800b5fd
 800b5d4:	0800b613 	.word	0x0800b613
 800b5d8:	0800b603 	.word	0x0800b603
 800b5dc:	0800b613 	.word	0x0800b613
 800b5e0:	0800b613 	.word	0x0800b613
 800b5e4:	0800b613 	.word	0x0800b613
 800b5e8:	0800b60b 	.word	0x0800b60b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5ec:	f7fc ff84 	bl	80084f8 <HAL_RCC_GetPCLK1Freq>
 800b5f0:	61b8      	str	r0, [r7, #24]
        break;
 800b5f2:	e013      	b.n	800b61c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5f4:	f7fc ff94 	bl	8008520 <HAL_RCC_GetPCLK2Freq>
 800b5f8:	61b8      	str	r0, [r7, #24]
        break;
 800b5fa:	e00f      	b.n	800b61c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5fc:	4b1d      	ldr	r3, [pc, #116]	; (800b674 <UART_SetConfig+0x4c0>)
 800b5fe:	61bb      	str	r3, [r7, #24]
        break;
 800b600:	e00c      	b.n	800b61c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b602:	f7fc feb7 	bl	8008374 <HAL_RCC_GetSysClockFreq>
 800b606:	61b8      	str	r0, [r7, #24]
        break;
 800b608:	e008      	b.n	800b61c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b60a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b60e:	61bb      	str	r3, [r7, #24]
        break;
 800b610:	e004      	b.n	800b61c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	77bb      	strb	r3, [r7, #30]
        break;
 800b61a:	bf00      	nop
    }

    if (pclk != 0U)
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d018      	beq.n	800b654 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	085a      	lsrs	r2, r3, #1
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	441a      	add	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	fbb2 f3f3 	udiv	r3, r2, r3
 800b634:	b29b      	uxth	r3, r3
 800b636:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	2b0f      	cmp	r3, #15
 800b63c:	d908      	bls.n	800b650 <UART_SetConfig+0x49c>
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b644:	d204      	bcs.n	800b650 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	60da      	str	r2, [r3, #12]
 800b64e:	e001      	b.n	800b654 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b660:	7fbb      	ldrb	r3, [r7, #30]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3720      	adds	r7, #32
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	40007c00 	.word	0x40007c00
 800b670:	40023800 	.word	0x40023800
 800b674:	00f42400 	.word	0x00f42400

0800b678 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00a      	beq.n	800b6a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	f003 0302 	and.w	r3, r3, #2
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00a      	beq.n	800b6c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	f003 0304 	and.w	r3, r3, #4
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00a      	beq.n	800b6e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	430a      	orrs	r2, r1
 800b6e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ea:	f003 0308 	and.w	r3, r3, #8
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00a      	beq.n	800b708 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	430a      	orrs	r2, r1
 800b706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70c:	f003 0310 	and.w	r3, r3, #16
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00a      	beq.n	800b72a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	430a      	orrs	r2, r1
 800b728:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	f003 0320 	and.w	r3, r3, #32
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00a      	beq.n	800b74c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	430a      	orrs	r2, r1
 800b74a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b754:	2b00      	cmp	r3, #0
 800b756:	d01a      	beq.n	800b78e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	430a      	orrs	r2, r1
 800b76c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b776:	d10a      	bne.n	800b78e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	430a      	orrs	r2, r1
 800b78c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00a      	beq.n	800b7b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	430a      	orrs	r2, r1
 800b7ae:	605a      	str	r2, [r3, #4]
  }
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af02      	add	r7, sp, #8
 800b7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7cc:	f7fa fb4e 	bl	8005e6c <HAL_GetTick>
 800b7d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0308 	and.w	r3, r3, #8
 800b7dc:	2b08      	cmp	r3, #8
 800b7de:	d10e      	bne.n	800b7fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f817 	bl	800b822 <UART_WaitOnFlagUntilTimeout>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	e00d      	b.n	800b81a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2220      	movs	r2, #32
 800b802:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2220      	movs	r2, #32
 800b808:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	60f8      	str	r0, [r7, #12]
 800b82a:	60b9      	str	r1, [r7, #8]
 800b82c:	603b      	str	r3, [r7, #0]
 800b82e:	4613      	mov	r3, r2
 800b830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b832:	e05e      	b.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d05a      	beq.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b83c:	f7fa fb16 	bl	8005e6c <HAL_GetTick>
 800b840:	4602      	mov	r2, r0
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d302      	bcc.n	800b852 <UART_WaitOnFlagUntilTimeout+0x30>
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d11b      	bne.n	800b88a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b860:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f022 0201 	bic.w	r2, r2, #1
 800b870:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2220      	movs	r2, #32
 800b876:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2220      	movs	r2, #32
 800b87c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e043      	b.n	800b912 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0304 	and.w	r3, r3, #4
 800b894:	2b00      	cmp	r3, #0
 800b896:	d02c      	beq.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8a6:	d124      	bne.n	800b8f2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b8c0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	689a      	ldr	r2, [r3, #8]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f022 0201 	bic.w	r2, r2, #1
 800b8d0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	2220      	movs	r2, #32
 800b8dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2220      	movs	r2, #32
 800b8e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e00f      	b.n	800b912 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69da      	ldr	r2, [r3, #28]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	bf0c      	ite	eq
 800b902:	2301      	moveq	r3, #1
 800b904:	2300      	movne	r3, #0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	461a      	mov	r2, r3
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d091      	beq.n	800b834 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	88fa      	ldrh	r2, [r7, #6]
 800b934:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2222      	movs	r2, #34	; 0x22
 800b944:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d02b      	beq.n	800b9a6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b952:	4a25      	ldr	r2, [pc, #148]	; (800b9e8 <UART_Start_Receive_DMA+0xcc>)
 800b954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b95a:	4a24      	ldr	r2, [pc, #144]	; (800b9ec <UART_Start_Receive_DMA+0xd0>)
 800b95c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b962:	4a23      	ldr	r2, [pc, #140]	; (800b9f0 <UART_Start_Receive_DMA+0xd4>)
 800b964:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b96a:	2200      	movs	r2, #0
 800b96c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3324      	adds	r3, #36	; 0x24
 800b978:	4619      	mov	r1, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b97e:	461a      	mov	r2, r3
 800b980:	88fb      	ldrh	r3, [r7, #6]
 800b982:	f7fa feeb 	bl	800675c <HAL_DMA_Start_IT>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00c      	beq.n	800b9a6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2210      	movs	r2, #16
 800b990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2220      	movs	r2, #32
 800b9a0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e01c      	b.n	800b9e0 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b9bc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f042 0201 	orr.w	r2, r2, #1
 800b9cc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b9dc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	0800ba7d 	.word	0x0800ba7d
 800b9ec:	0800bb11 	.word	0x0800bb11
 800b9f0:	0800bb49 	.word	0x0800bb49

0800b9f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba0a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ba12:	bf00      	nop
 800ba14:	370c      	adds	r7, #12
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ba34:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	689a      	ldr	r2, [r3, #8]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f022 0201 	bic.w	r2, r2, #1
 800ba44:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d107      	bne.n	800ba5e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f022 0210 	bic.w	r2, r2, #16
 800ba5c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2220      	movs	r2, #32
 800ba62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ba70:	bf00      	nop
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba92:	d02a      	beq.n	800baea <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800baaa:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	689a      	ldr	r2, [r3, #8]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0201 	bic.w	r2, r2, #1
 800baba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	689a      	ldr	r2, [r3, #8]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baca:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2220      	movs	r2, #32
 800bad0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d107      	bne.n	800baea <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f022 0210 	bic.w	r2, r2, #16
 800bae8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d107      	bne.n	800bb02 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800baf8:	4619      	mov	r1, r3
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f7ff fb4e 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb00:	e002      	b.n	800bb08 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f7ff fb2c 	bl	800b160 <HAL_UART_RxCpltCallback>
}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d109      	bne.n	800bb3a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb2c:	085b      	lsrs	r3, r3, #1
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	4619      	mov	r1, r3
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7ff fb32 	bl	800b19c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb38:	e002      	b.n	800bb40 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff fb1a 	bl	800b174 <HAL_UART_RxHalfCpltCallback>
}
 800bb40:	bf00      	nop
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b086      	sub	sp, #24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb5a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb6c:	2b80      	cmp	r3, #128	; 0x80
 800bb6e:	d109      	bne.n	800bb84 <UART_DMAError+0x3c>
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	2b21      	cmp	r3, #33	; 0x21
 800bb74:	d106      	bne.n	800bb84 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f7ff ff38 	bl	800b9f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8e:	2b40      	cmp	r3, #64	; 0x40
 800bb90:	d109      	bne.n	800bba6 <UART_DMAError+0x5e>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b22      	cmp	r3, #34	; 0x22
 800bb96:	d106      	bne.n	800bba6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bba0:	6978      	ldr	r0, [r7, #20]
 800bba2:	f7ff ff3c 	bl	800ba1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbac:	f043 0210 	orr.w	r2, r3, #16
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbb6:	6978      	ldr	r0, [r7, #20]
 800bbb8:	f7ff fae6 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbbc:	bf00      	nop
 800bbbe:	3718      	adds	r7, #24
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7ff fad0 	bl	800b188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbe8:	bf00      	nop
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc06:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2220      	movs	r2, #32
 800bc0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff fa99 	bl	800b14c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc1a:	bf00      	nop
 800bc1c:	3708      	adds	r7, #8
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <atof>:
 800bc22:	2100      	movs	r1, #0
 800bc24:	f001 bb86 	b.w	800d334 <strtod>

0800bc28 <atoi>:
 800bc28:	220a      	movs	r2, #10
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	f001 bc6e 	b.w	800d50c <strtol>

0800bc30 <__errno>:
 800bc30:	4b01      	ldr	r3, [pc, #4]	; (800bc38 <__errno+0x8>)
 800bc32:	6818      	ldr	r0, [r3, #0]
 800bc34:	4770      	bx	lr
 800bc36:	bf00      	nop
 800bc38:	20000028 	.word	0x20000028

0800bc3c <getchar>:
 800bc3c:	4b07      	ldr	r3, [pc, #28]	; (800bc5c <getchar+0x20>)
 800bc3e:	b510      	push	{r4, lr}
 800bc40:	681c      	ldr	r4, [r3, #0]
 800bc42:	b124      	cbz	r4, 800bc4e <getchar+0x12>
 800bc44:	69a3      	ldr	r3, [r4, #24]
 800bc46:	b913      	cbnz	r3, 800bc4e <getchar+0x12>
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f002 fced 	bl	800e628 <__sinit>
 800bc4e:	6861      	ldr	r1, [r4, #4]
 800bc50:	4620      	mov	r0, r4
 800bc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc56:	f003 b923 	b.w	800eea0 <_getc_r>
 800bc5a:	bf00      	nop
 800bc5c:	20000028 	.word	0x20000028

0800bc60 <__libc_init_array>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	4d0d      	ldr	r5, [pc, #52]	; (800bc98 <__libc_init_array+0x38>)
 800bc64:	4c0d      	ldr	r4, [pc, #52]	; (800bc9c <__libc_init_array+0x3c>)
 800bc66:	1b64      	subs	r4, r4, r5
 800bc68:	10a4      	asrs	r4, r4, #2
 800bc6a:	2600      	movs	r6, #0
 800bc6c:	42a6      	cmp	r6, r4
 800bc6e:	d109      	bne.n	800bc84 <__libc_init_array+0x24>
 800bc70:	4d0b      	ldr	r5, [pc, #44]	; (800bca0 <__libc_init_array+0x40>)
 800bc72:	4c0c      	ldr	r4, [pc, #48]	; (800bca4 <__libc_init_array+0x44>)
 800bc74:	f005 faa2 	bl	80111bc <_init>
 800bc78:	1b64      	subs	r4, r4, r5
 800bc7a:	10a4      	asrs	r4, r4, #2
 800bc7c:	2600      	movs	r6, #0
 800bc7e:	42a6      	cmp	r6, r4
 800bc80:	d105      	bne.n	800bc8e <__libc_init_array+0x2e>
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
 800bc84:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc88:	4798      	blx	r3
 800bc8a:	3601      	adds	r6, #1
 800bc8c:	e7ee      	b.n	800bc6c <__libc_init_array+0xc>
 800bc8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc92:	4798      	blx	r3
 800bc94:	3601      	adds	r6, #1
 800bc96:	e7f2      	b.n	800bc7e <__libc_init_array+0x1e>
 800bc98:	080121d0 	.word	0x080121d0
 800bc9c:	080121d0 	.word	0x080121d0
 800bca0:	080121d0 	.word	0x080121d0
 800bca4:	080121d4 	.word	0x080121d4

0800bca8 <memset>:
 800bca8:	4402      	add	r2, r0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d100      	bne.n	800bcb2 <memset+0xa>
 800bcb0:	4770      	bx	lr
 800bcb2:	f803 1b01 	strb.w	r1, [r3], #1
 800bcb6:	e7f9      	b.n	800bcac <memset+0x4>

0800bcb8 <__cvt>:
 800bcb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcbc:	ec55 4b10 	vmov	r4, r5, d0
 800bcc0:	2d00      	cmp	r5, #0
 800bcc2:	460e      	mov	r6, r1
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	bfbb      	ittet	lt
 800bcca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcce:	461d      	movlt	r5, r3
 800bcd0:	2300      	movge	r3, #0
 800bcd2:	232d      	movlt	r3, #45	; 0x2d
 800bcd4:	700b      	strb	r3, [r1, #0]
 800bcd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bcdc:	4691      	mov	r9, r2
 800bcde:	f023 0820 	bic.w	r8, r3, #32
 800bce2:	bfbc      	itt	lt
 800bce4:	4622      	movlt	r2, r4
 800bce6:	4614      	movlt	r4, r2
 800bce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcec:	d005      	beq.n	800bcfa <__cvt+0x42>
 800bcee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcf2:	d100      	bne.n	800bcf6 <__cvt+0x3e>
 800bcf4:	3601      	adds	r6, #1
 800bcf6:	2102      	movs	r1, #2
 800bcf8:	e000      	b.n	800bcfc <__cvt+0x44>
 800bcfa:	2103      	movs	r1, #3
 800bcfc:	ab03      	add	r3, sp, #12
 800bcfe:	9301      	str	r3, [sp, #4]
 800bd00:	ab02      	add	r3, sp, #8
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	ec45 4b10 	vmov	d0, r4, r5
 800bd08:	4653      	mov	r3, sl
 800bd0a:	4632      	mov	r2, r6
 800bd0c:	f001 fd74 	bl	800d7f8 <_dtoa_r>
 800bd10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd14:	4607      	mov	r7, r0
 800bd16:	d102      	bne.n	800bd1e <__cvt+0x66>
 800bd18:	f019 0f01 	tst.w	r9, #1
 800bd1c:	d022      	beq.n	800bd64 <__cvt+0xac>
 800bd1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd22:	eb07 0906 	add.w	r9, r7, r6
 800bd26:	d110      	bne.n	800bd4a <__cvt+0x92>
 800bd28:	783b      	ldrb	r3, [r7, #0]
 800bd2a:	2b30      	cmp	r3, #48	; 0x30
 800bd2c:	d10a      	bne.n	800bd44 <__cvt+0x8c>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	2300      	movs	r3, #0
 800bd32:	4620      	mov	r0, r4
 800bd34:	4629      	mov	r1, r5
 800bd36:	f7f4 fef7 	bl	8000b28 <__aeabi_dcmpeq>
 800bd3a:	b918      	cbnz	r0, 800bd44 <__cvt+0x8c>
 800bd3c:	f1c6 0601 	rsb	r6, r6, #1
 800bd40:	f8ca 6000 	str.w	r6, [sl]
 800bd44:	f8da 3000 	ldr.w	r3, [sl]
 800bd48:	4499      	add	r9, r3
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	4620      	mov	r0, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7f4 fee9 	bl	8000b28 <__aeabi_dcmpeq>
 800bd56:	b108      	cbz	r0, 800bd5c <__cvt+0xa4>
 800bd58:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd5c:	2230      	movs	r2, #48	; 0x30
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	454b      	cmp	r3, r9
 800bd62:	d307      	bcc.n	800bd74 <__cvt+0xbc>
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd68:	1bdb      	subs	r3, r3, r7
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	6013      	str	r3, [r2, #0]
 800bd6e:	b004      	add	sp, #16
 800bd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd74:	1c59      	adds	r1, r3, #1
 800bd76:	9103      	str	r1, [sp, #12]
 800bd78:	701a      	strb	r2, [r3, #0]
 800bd7a:	e7f0      	b.n	800bd5e <__cvt+0xa6>

0800bd7c <__exponent>:
 800bd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2900      	cmp	r1, #0
 800bd82:	bfb8      	it	lt
 800bd84:	4249      	neglt	r1, r1
 800bd86:	f803 2b02 	strb.w	r2, [r3], #2
 800bd8a:	bfb4      	ite	lt
 800bd8c:	222d      	movlt	r2, #45	; 0x2d
 800bd8e:	222b      	movge	r2, #43	; 0x2b
 800bd90:	2909      	cmp	r1, #9
 800bd92:	7042      	strb	r2, [r0, #1]
 800bd94:	dd2a      	ble.n	800bdec <__exponent+0x70>
 800bd96:	f10d 0407 	add.w	r4, sp, #7
 800bd9a:	46a4      	mov	ip, r4
 800bd9c:	270a      	movs	r7, #10
 800bd9e:	46a6      	mov	lr, r4
 800bda0:	460a      	mov	r2, r1
 800bda2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bda6:	fb07 1516 	mls	r5, r7, r6, r1
 800bdaa:	3530      	adds	r5, #48	; 0x30
 800bdac:	2a63      	cmp	r2, #99	; 0x63
 800bdae:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	dcf1      	bgt.n	800bd9e <__exponent+0x22>
 800bdba:	3130      	adds	r1, #48	; 0x30
 800bdbc:	f1ae 0502 	sub.w	r5, lr, #2
 800bdc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bdc4:	1c44      	adds	r4, r0, #1
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4561      	cmp	r1, ip
 800bdca:	d30a      	bcc.n	800bde2 <__exponent+0x66>
 800bdcc:	f10d 0209 	add.w	r2, sp, #9
 800bdd0:	eba2 020e 	sub.w	r2, r2, lr
 800bdd4:	4565      	cmp	r5, ip
 800bdd6:	bf88      	it	hi
 800bdd8:	2200      	movhi	r2, #0
 800bdda:	4413      	add	r3, r2
 800bddc:	1a18      	subs	r0, r3, r0
 800bdde:	b003      	add	sp, #12
 800bde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bde6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bdea:	e7ed      	b.n	800bdc8 <__exponent+0x4c>
 800bdec:	2330      	movs	r3, #48	; 0x30
 800bdee:	3130      	adds	r1, #48	; 0x30
 800bdf0:	7083      	strb	r3, [r0, #2]
 800bdf2:	70c1      	strb	r1, [r0, #3]
 800bdf4:	1d03      	adds	r3, r0, #4
 800bdf6:	e7f1      	b.n	800bddc <__exponent+0x60>

0800bdf8 <_printf_float>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	ed2d 8b02 	vpush	{d8}
 800be00:	b08d      	sub	sp, #52	; 0x34
 800be02:	460c      	mov	r4, r1
 800be04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be08:	4616      	mov	r6, r2
 800be0a:	461f      	mov	r7, r3
 800be0c:	4605      	mov	r5, r0
 800be0e:	f003 f887 	bl	800ef20 <_localeconv_r>
 800be12:	f8d0 a000 	ldr.w	sl, [r0]
 800be16:	4650      	mov	r0, sl
 800be18:	f7f4 fa04 	bl	8000224 <strlen>
 800be1c:	2300      	movs	r3, #0
 800be1e:	930a      	str	r3, [sp, #40]	; 0x28
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	9305      	str	r3, [sp, #20]
 800be24:	f8d8 3000 	ldr.w	r3, [r8]
 800be28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be2c:	3307      	adds	r3, #7
 800be2e:	f023 0307 	bic.w	r3, r3, #7
 800be32:	f103 0208 	add.w	r2, r3, #8
 800be36:	f8c8 2000 	str.w	r2, [r8]
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be4a:	9307      	str	r3, [sp, #28]
 800be4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800be50:	ee08 0a10 	vmov	s16, r0
 800be54:	4b9f      	ldr	r3, [pc, #636]	; (800c0d4 <_printf_float+0x2dc>)
 800be56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be5a:	f04f 32ff 	mov.w	r2, #4294967295
 800be5e:	f7f4 fe95 	bl	8000b8c <__aeabi_dcmpun>
 800be62:	bb88      	cbnz	r0, 800bec8 <_printf_float+0xd0>
 800be64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be68:	4b9a      	ldr	r3, [pc, #616]	; (800c0d4 <_printf_float+0x2dc>)
 800be6a:	f04f 32ff 	mov.w	r2, #4294967295
 800be6e:	f7f4 fe6f 	bl	8000b50 <__aeabi_dcmple>
 800be72:	bb48      	cbnz	r0, 800bec8 <_printf_float+0xd0>
 800be74:	2200      	movs	r2, #0
 800be76:	2300      	movs	r3, #0
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 fe5e 	bl	8000b3c <__aeabi_dcmplt>
 800be80:	b110      	cbz	r0, 800be88 <_printf_float+0x90>
 800be82:	232d      	movs	r3, #45	; 0x2d
 800be84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be88:	4b93      	ldr	r3, [pc, #588]	; (800c0d8 <_printf_float+0x2e0>)
 800be8a:	4894      	ldr	r0, [pc, #592]	; (800c0dc <_printf_float+0x2e4>)
 800be8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be90:	bf94      	ite	ls
 800be92:	4698      	movls	r8, r3
 800be94:	4680      	movhi	r8, r0
 800be96:	2303      	movs	r3, #3
 800be98:	6123      	str	r3, [r4, #16]
 800be9a:	9b05      	ldr	r3, [sp, #20]
 800be9c:	f023 0204 	bic.w	r2, r3, #4
 800bea0:	6022      	str	r2, [r4, #0]
 800bea2:	f04f 0900 	mov.w	r9, #0
 800bea6:	9700      	str	r7, [sp, #0]
 800bea8:	4633      	mov	r3, r6
 800beaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800beac:	4621      	mov	r1, r4
 800beae:	4628      	mov	r0, r5
 800beb0:	f000 f9d8 	bl	800c264 <_printf_common>
 800beb4:	3001      	adds	r0, #1
 800beb6:	f040 8090 	bne.w	800bfda <_printf_float+0x1e2>
 800beba:	f04f 30ff 	mov.w	r0, #4294967295
 800bebe:	b00d      	add	sp, #52	; 0x34
 800bec0:	ecbd 8b02 	vpop	{d8}
 800bec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec8:	4642      	mov	r2, r8
 800beca:	464b      	mov	r3, r9
 800becc:	4640      	mov	r0, r8
 800bece:	4649      	mov	r1, r9
 800bed0:	f7f4 fe5c 	bl	8000b8c <__aeabi_dcmpun>
 800bed4:	b140      	cbz	r0, 800bee8 <_printf_float+0xf0>
 800bed6:	464b      	mov	r3, r9
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bfbc      	itt	lt
 800bedc:	232d      	movlt	r3, #45	; 0x2d
 800bede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bee2:	487f      	ldr	r0, [pc, #508]	; (800c0e0 <_printf_float+0x2e8>)
 800bee4:	4b7f      	ldr	r3, [pc, #508]	; (800c0e4 <_printf_float+0x2ec>)
 800bee6:	e7d1      	b.n	800be8c <_printf_float+0x94>
 800bee8:	6863      	ldr	r3, [r4, #4]
 800beea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800beee:	9206      	str	r2, [sp, #24]
 800bef0:	1c5a      	adds	r2, r3, #1
 800bef2:	d13f      	bne.n	800bf74 <_printf_float+0x17c>
 800bef4:	2306      	movs	r3, #6
 800bef6:	6063      	str	r3, [r4, #4]
 800bef8:	9b05      	ldr	r3, [sp, #20]
 800befa:	6861      	ldr	r1, [r4, #4]
 800befc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf00:	2300      	movs	r3, #0
 800bf02:	9303      	str	r3, [sp, #12]
 800bf04:	ab0a      	add	r3, sp, #40	; 0x28
 800bf06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf0a:	ab09      	add	r3, sp, #36	; 0x24
 800bf0c:	ec49 8b10 	vmov	d0, r8, r9
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	6022      	str	r2, [r4, #0]
 800bf14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf18:	4628      	mov	r0, r5
 800bf1a:	f7ff fecd 	bl	800bcb8 <__cvt>
 800bf1e:	9b06      	ldr	r3, [sp, #24]
 800bf20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf22:	2b47      	cmp	r3, #71	; 0x47
 800bf24:	4680      	mov	r8, r0
 800bf26:	d108      	bne.n	800bf3a <_printf_float+0x142>
 800bf28:	1cc8      	adds	r0, r1, #3
 800bf2a:	db02      	blt.n	800bf32 <_printf_float+0x13a>
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	dd41      	ble.n	800bfb6 <_printf_float+0x1be>
 800bf32:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf36:	fa5f fb8b 	uxtb.w	fp, fp
 800bf3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf3e:	d820      	bhi.n	800bf82 <_printf_float+0x18a>
 800bf40:	3901      	subs	r1, #1
 800bf42:	465a      	mov	r2, fp
 800bf44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf48:	9109      	str	r1, [sp, #36]	; 0x24
 800bf4a:	f7ff ff17 	bl	800bd7c <__exponent>
 800bf4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf50:	1813      	adds	r3, r2, r0
 800bf52:	2a01      	cmp	r2, #1
 800bf54:	4681      	mov	r9, r0
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	dc02      	bgt.n	800bf60 <_printf_float+0x168>
 800bf5a:	6822      	ldr	r2, [r4, #0]
 800bf5c:	07d2      	lsls	r2, r2, #31
 800bf5e:	d501      	bpl.n	800bf64 <_printf_float+0x16c>
 800bf60:	3301      	adds	r3, #1
 800bf62:	6123      	str	r3, [r4, #16]
 800bf64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d09c      	beq.n	800bea6 <_printf_float+0xae>
 800bf6c:	232d      	movs	r3, #45	; 0x2d
 800bf6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf72:	e798      	b.n	800bea6 <_printf_float+0xae>
 800bf74:	9a06      	ldr	r2, [sp, #24]
 800bf76:	2a47      	cmp	r2, #71	; 0x47
 800bf78:	d1be      	bne.n	800bef8 <_printf_float+0x100>
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1bc      	bne.n	800bef8 <_printf_float+0x100>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	e7b9      	b.n	800bef6 <_printf_float+0xfe>
 800bf82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf86:	d118      	bne.n	800bfba <_printf_float+0x1c2>
 800bf88:	2900      	cmp	r1, #0
 800bf8a:	6863      	ldr	r3, [r4, #4]
 800bf8c:	dd0b      	ble.n	800bfa6 <_printf_float+0x1ae>
 800bf8e:	6121      	str	r1, [r4, #16]
 800bf90:	b913      	cbnz	r3, 800bf98 <_printf_float+0x1a0>
 800bf92:	6822      	ldr	r2, [r4, #0]
 800bf94:	07d0      	lsls	r0, r2, #31
 800bf96:	d502      	bpl.n	800bf9e <_printf_float+0x1a6>
 800bf98:	3301      	adds	r3, #1
 800bf9a:	440b      	add	r3, r1
 800bf9c:	6123      	str	r3, [r4, #16]
 800bf9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfa0:	f04f 0900 	mov.w	r9, #0
 800bfa4:	e7de      	b.n	800bf64 <_printf_float+0x16c>
 800bfa6:	b913      	cbnz	r3, 800bfae <_printf_float+0x1b6>
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	07d2      	lsls	r2, r2, #31
 800bfac:	d501      	bpl.n	800bfb2 <_printf_float+0x1ba>
 800bfae:	3302      	adds	r3, #2
 800bfb0:	e7f4      	b.n	800bf9c <_printf_float+0x1a4>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e7f2      	b.n	800bf9c <_printf_float+0x1a4>
 800bfb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfbc:	4299      	cmp	r1, r3
 800bfbe:	db05      	blt.n	800bfcc <_printf_float+0x1d4>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	6121      	str	r1, [r4, #16]
 800bfc4:	07d8      	lsls	r0, r3, #31
 800bfc6:	d5ea      	bpl.n	800bf9e <_printf_float+0x1a6>
 800bfc8:	1c4b      	adds	r3, r1, #1
 800bfca:	e7e7      	b.n	800bf9c <_printf_float+0x1a4>
 800bfcc:	2900      	cmp	r1, #0
 800bfce:	bfd4      	ite	le
 800bfd0:	f1c1 0202 	rsble	r2, r1, #2
 800bfd4:	2201      	movgt	r2, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	e7e0      	b.n	800bf9c <_printf_float+0x1a4>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	055a      	lsls	r2, r3, #21
 800bfde:	d407      	bmi.n	800bff0 <_printf_float+0x1f8>
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	4642      	mov	r2, r8
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	47b8      	blx	r7
 800bfea:	3001      	adds	r0, #1
 800bfec:	d12c      	bne.n	800c048 <_printf_float+0x250>
 800bfee:	e764      	b.n	800beba <_printf_float+0xc2>
 800bff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bff4:	f240 80e0 	bls.w	800c1b8 <_printf_float+0x3c0>
 800bff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bffc:	2200      	movs	r2, #0
 800bffe:	2300      	movs	r3, #0
 800c000:	f7f4 fd92 	bl	8000b28 <__aeabi_dcmpeq>
 800c004:	2800      	cmp	r0, #0
 800c006:	d034      	beq.n	800c072 <_printf_float+0x27a>
 800c008:	4a37      	ldr	r2, [pc, #220]	; (800c0e8 <_printf_float+0x2f0>)
 800c00a:	2301      	movs	r3, #1
 800c00c:	4631      	mov	r1, r6
 800c00e:	4628      	mov	r0, r5
 800c010:	47b8      	blx	r7
 800c012:	3001      	adds	r0, #1
 800c014:	f43f af51 	beq.w	800beba <_printf_float+0xc2>
 800c018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c01c:	429a      	cmp	r2, r3
 800c01e:	db02      	blt.n	800c026 <_printf_float+0x22e>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	07d8      	lsls	r0, r3, #31
 800c024:	d510      	bpl.n	800c048 <_printf_float+0x250>
 800c026:	ee18 3a10 	vmov	r3, s16
 800c02a:	4652      	mov	r2, sl
 800c02c:	4631      	mov	r1, r6
 800c02e:	4628      	mov	r0, r5
 800c030:	47b8      	blx	r7
 800c032:	3001      	adds	r0, #1
 800c034:	f43f af41 	beq.w	800beba <_printf_float+0xc2>
 800c038:	f04f 0800 	mov.w	r8, #0
 800c03c:	f104 091a 	add.w	r9, r4, #26
 800c040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c042:	3b01      	subs	r3, #1
 800c044:	4543      	cmp	r3, r8
 800c046:	dc09      	bgt.n	800c05c <_printf_float+0x264>
 800c048:	6823      	ldr	r3, [r4, #0]
 800c04a:	079b      	lsls	r3, r3, #30
 800c04c:	f100 8105 	bmi.w	800c25a <_printf_float+0x462>
 800c050:	68e0      	ldr	r0, [r4, #12]
 800c052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c054:	4298      	cmp	r0, r3
 800c056:	bfb8      	it	lt
 800c058:	4618      	movlt	r0, r3
 800c05a:	e730      	b.n	800bebe <_printf_float+0xc6>
 800c05c:	2301      	movs	r3, #1
 800c05e:	464a      	mov	r2, r9
 800c060:	4631      	mov	r1, r6
 800c062:	4628      	mov	r0, r5
 800c064:	47b8      	blx	r7
 800c066:	3001      	adds	r0, #1
 800c068:	f43f af27 	beq.w	800beba <_printf_float+0xc2>
 800c06c:	f108 0801 	add.w	r8, r8, #1
 800c070:	e7e6      	b.n	800c040 <_printf_float+0x248>
 800c072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c074:	2b00      	cmp	r3, #0
 800c076:	dc39      	bgt.n	800c0ec <_printf_float+0x2f4>
 800c078:	4a1b      	ldr	r2, [pc, #108]	; (800c0e8 <_printf_float+0x2f0>)
 800c07a:	2301      	movs	r3, #1
 800c07c:	4631      	mov	r1, r6
 800c07e:	4628      	mov	r0, r5
 800c080:	47b8      	blx	r7
 800c082:	3001      	adds	r0, #1
 800c084:	f43f af19 	beq.w	800beba <_printf_float+0xc2>
 800c088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c08c:	4313      	orrs	r3, r2
 800c08e:	d102      	bne.n	800c096 <_printf_float+0x29e>
 800c090:	6823      	ldr	r3, [r4, #0]
 800c092:	07d9      	lsls	r1, r3, #31
 800c094:	d5d8      	bpl.n	800c048 <_printf_float+0x250>
 800c096:	ee18 3a10 	vmov	r3, s16
 800c09a:	4652      	mov	r2, sl
 800c09c:	4631      	mov	r1, r6
 800c09e:	4628      	mov	r0, r5
 800c0a0:	47b8      	blx	r7
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	f43f af09 	beq.w	800beba <_printf_float+0xc2>
 800c0a8:	f04f 0900 	mov.w	r9, #0
 800c0ac:	f104 0a1a 	add.w	sl, r4, #26
 800c0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b2:	425b      	negs	r3, r3
 800c0b4:	454b      	cmp	r3, r9
 800c0b6:	dc01      	bgt.n	800c0bc <_printf_float+0x2c4>
 800c0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ba:	e792      	b.n	800bfe2 <_printf_float+0x1ea>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	4652      	mov	r2, sl
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b8      	blx	r7
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	f43f aef7 	beq.w	800beba <_printf_float+0xc2>
 800c0cc:	f109 0901 	add.w	r9, r9, #1
 800c0d0:	e7ee      	b.n	800c0b0 <_printf_float+0x2b8>
 800c0d2:	bf00      	nop
 800c0d4:	7fefffff 	.word	0x7fefffff
 800c0d8:	08011c7c 	.word	0x08011c7c
 800c0dc:	08011c80 	.word	0x08011c80
 800c0e0:	08011c88 	.word	0x08011c88
 800c0e4:	08011c84 	.word	0x08011c84
 800c0e8:	08011c8c 	.word	0x08011c8c
 800c0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	bfa8      	it	ge
 800c0f4:	461a      	movge	r2, r3
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	4691      	mov	r9, r2
 800c0fa:	dc37      	bgt.n	800c16c <_printf_float+0x374>
 800c0fc:	f04f 0b00 	mov.w	fp, #0
 800c100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c104:	f104 021a 	add.w	r2, r4, #26
 800c108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c10a:	9305      	str	r3, [sp, #20]
 800c10c:	eba3 0309 	sub.w	r3, r3, r9
 800c110:	455b      	cmp	r3, fp
 800c112:	dc33      	bgt.n	800c17c <_printf_float+0x384>
 800c114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c118:	429a      	cmp	r2, r3
 800c11a:	db3b      	blt.n	800c194 <_printf_float+0x39c>
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	07da      	lsls	r2, r3, #31
 800c120:	d438      	bmi.n	800c194 <_printf_float+0x39c>
 800c122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	eba2 0901 	sub.w	r9, r2, r1
 800c12e:	4599      	cmp	r9, r3
 800c130:	bfa8      	it	ge
 800c132:	4699      	movge	r9, r3
 800c134:	f1b9 0f00 	cmp.w	r9, #0
 800c138:	dc35      	bgt.n	800c1a6 <_printf_float+0x3ae>
 800c13a:	f04f 0800 	mov.w	r8, #0
 800c13e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c142:	f104 0a1a 	add.w	sl, r4, #26
 800c146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c14a:	1a9b      	subs	r3, r3, r2
 800c14c:	eba3 0309 	sub.w	r3, r3, r9
 800c150:	4543      	cmp	r3, r8
 800c152:	f77f af79 	ble.w	800c048 <_printf_float+0x250>
 800c156:	2301      	movs	r3, #1
 800c158:	4652      	mov	r2, sl
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	f43f aeaa 	beq.w	800beba <_printf_float+0xc2>
 800c166:	f108 0801 	add.w	r8, r8, #1
 800c16a:	e7ec      	b.n	800c146 <_printf_float+0x34e>
 800c16c:	4613      	mov	r3, r2
 800c16e:	4631      	mov	r1, r6
 800c170:	4642      	mov	r2, r8
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	d1c0      	bne.n	800c0fc <_printf_float+0x304>
 800c17a:	e69e      	b.n	800beba <_printf_float+0xc2>
 800c17c:	2301      	movs	r3, #1
 800c17e:	4631      	mov	r1, r6
 800c180:	4628      	mov	r0, r5
 800c182:	9205      	str	r2, [sp, #20]
 800c184:	47b8      	blx	r7
 800c186:	3001      	adds	r0, #1
 800c188:	f43f ae97 	beq.w	800beba <_printf_float+0xc2>
 800c18c:	9a05      	ldr	r2, [sp, #20]
 800c18e:	f10b 0b01 	add.w	fp, fp, #1
 800c192:	e7b9      	b.n	800c108 <_printf_float+0x310>
 800c194:	ee18 3a10 	vmov	r3, s16
 800c198:	4652      	mov	r2, sl
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d1be      	bne.n	800c122 <_printf_float+0x32a>
 800c1a4:	e689      	b.n	800beba <_printf_float+0xc2>
 800c1a6:	9a05      	ldr	r2, [sp, #20]
 800c1a8:	464b      	mov	r3, r9
 800c1aa:	4442      	add	r2, r8
 800c1ac:	4631      	mov	r1, r6
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	47b8      	blx	r7
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d1c1      	bne.n	800c13a <_printf_float+0x342>
 800c1b6:	e680      	b.n	800beba <_printf_float+0xc2>
 800c1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1ba:	2a01      	cmp	r2, #1
 800c1bc:	dc01      	bgt.n	800c1c2 <_printf_float+0x3ca>
 800c1be:	07db      	lsls	r3, r3, #31
 800c1c0:	d538      	bpl.n	800c234 <_printf_float+0x43c>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	4642      	mov	r2, r8
 800c1c6:	4631      	mov	r1, r6
 800c1c8:	4628      	mov	r0, r5
 800c1ca:	47b8      	blx	r7
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	f43f ae74 	beq.w	800beba <_printf_float+0xc2>
 800c1d2:	ee18 3a10 	vmov	r3, s16
 800c1d6:	4652      	mov	r2, sl
 800c1d8:	4631      	mov	r1, r6
 800c1da:	4628      	mov	r0, r5
 800c1dc:	47b8      	blx	r7
 800c1de:	3001      	adds	r0, #1
 800c1e0:	f43f ae6b 	beq.w	800beba <_printf_float+0xc2>
 800c1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	f7f4 fc9c 	bl	8000b28 <__aeabi_dcmpeq>
 800c1f0:	b9d8      	cbnz	r0, 800c22a <_printf_float+0x432>
 800c1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f4:	f108 0201 	add.w	r2, r8, #1
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	4631      	mov	r1, r6
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	47b8      	blx	r7
 800c200:	3001      	adds	r0, #1
 800c202:	d10e      	bne.n	800c222 <_printf_float+0x42a>
 800c204:	e659      	b.n	800beba <_printf_float+0xc2>
 800c206:	2301      	movs	r3, #1
 800c208:	4652      	mov	r2, sl
 800c20a:	4631      	mov	r1, r6
 800c20c:	4628      	mov	r0, r5
 800c20e:	47b8      	blx	r7
 800c210:	3001      	adds	r0, #1
 800c212:	f43f ae52 	beq.w	800beba <_printf_float+0xc2>
 800c216:	f108 0801 	add.w	r8, r8, #1
 800c21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c21c:	3b01      	subs	r3, #1
 800c21e:	4543      	cmp	r3, r8
 800c220:	dcf1      	bgt.n	800c206 <_printf_float+0x40e>
 800c222:	464b      	mov	r3, r9
 800c224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c228:	e6dc      	b.n	800bfe4 <_printf_float+0x1ec>
 800c22a:	f04f 0800 	mov.w	r8, #0
 800c22e:	f104 0a1a 	add.w	sl, r4, #26
 800c232:	e7f2      	b.n	800c21a <_printf_float+0x422>
 800c234:	2301      	movs	r3, #1
 800c236:	4642      	mov	r2, r8
 800c238:	e7df      	b.n	800c1fa <_printf_float+0x402>
 800c23a:	2301      	movs	r3, #1
 800c23c:	464a      	mov	r2, r9
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	f43f ae38 	beq.w	800beba <_printf_float+0xc2>
 800c24a:	f108 0801 	add.w	r8, r8, #1
 800c24e:	68e3      	ldr	r3, [r4, #12]
 800c250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c252:	1a5b      	subs	r3, r3, r1
 800c254:	4543      	cmp	r3, r8
 800c256:	dcf0      	bgt.n	800c23a <_printf_float+0x442>
 800c258:	e6fa      	b.n	800c050 <_printf_float+0x258>
 800c25a:	f04f 0800 	mov.w	r8, #0
 800c25e:	f104 0919 	add.w	r9, r4, #25
 800c262:	e7f4      	b.n	800c24e <_printf_float+0x456>

0800c264 <_printf_common>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	4616      	mov	r6, r2
 800c26a:	4699      	mov	r9, r3
 800c26c:	688a      	ldr	r2, [r1, #8]
 800c26e:	690b      	ldr	r3, [r1, #16]
 800c270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c274:	4293      	cmp	r3, r2
 800c276:	bfb8      	it	lt
 800c278:	4613      	movlt	r3, r2
 800c27a:	6033      	str	r3, [r6, #0]
 800c27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c280:	4607      	mov	r7, r0
 800c282:	460c      	mov	r4, r1
 800c284:	b10a      	cbz	r2, 800c28a <_printf_common+0x26>
 800c286:	3301      	adds	r3, #1
 800c288:	6033      	str	r3, [r6, #0]
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	0699      	lsls	r1, r3, #26
 800c28e:	bf42      	ittt	mi
 800c290:	6833      	ldrmi	r3, [r6, #0]
 800c292:	3302      	addmi	r3, #2
 800c294:	6033      	strmi	r3, [r6, #0]
 800c296:	6825      	ldr	r5, [r4, #0]
 800c298:	f015 0506 	ands.w	r5, r5, #6
 800c29c:	d106      	bne.n	800c2ac <_printf_common+0x48>
 800c29e:	f104 0a19 	add.w	sl, r4, #25
 800c2a2:	68e3      	ldr	r3, [r4, #12]
 800c2a4:	6832      	ldr	r2, [r6, #0]
 800c2a6:	1a9b      	subs	r3, r3, r2
 800c2a8:	42ab      	cmp	r3, r5
 800c2aa:	dc26      	bgt.n	800c2fa <_printf_common+0x96>
 800c2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2b0:	1e13      	subs	r3, r2, #0
 800c2b2:	6822      	ldr	r2, [r4, #0]
 800c2b4:	bf18      	it	ne
 800c2b6:	2301      	movne	r3, #1
 800c2b8:	0692      	lsls	r2, r2, #26
 800c2ba:	d42b      	bmi.n	800c314 <_printf_common+0xb0>
 800c2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	47c0      	blx	r8
 800c2c6:	3001      	adds	r0, #1
 800c2c8:	d01e      	beq.n	800c308 <_printf_common+0xa4>
 800c2ca:	6823      	ldr	r3, [r4, #0]
 800c2cc:	68e5      	ldr	r5, [r4, #12]
 800c2ce:	6832      	ldr	r2, [r6, #0]
 800c2d0:	f003 0306 	and.w	r3, r3, #6
 800c2d4:	2b04      	cmp	r3, #4
 800c2d6:	bf08      	it	eq
 800c2d8:	1aad      	subeq	r5, r5, r2
 800c2da:	68a3      	ldr	r3, [r4, #8]
 800c2dc:	6922      	ldr	r2, [r4, #16]
 800c2de:	bf0c      	ite	eq
 800c2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2e4:	2500      	movne	r5, #0
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	bfc4      	itt	gt
 800c2ea:	1a9b      	subgt	r3, r3, r2
 800c2ec:	18ed      	addgt	r5, r5, r3
 800c2ee:	2600      	movs	r6, #0
 800c2f0:	341a      	adds	r4, #26
 800c2f2:	42b5      	cmp	r5, r6
 800c2f4:	d11a      	bne.n	800c32c <_printf_common+0xc8>
 800c2f6:	2000      	movs	r0, #0
 800c2f8:	e008      	b.n	800c30c <_printf_common+0xa8>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4652      	mov	r2, sl
 800c2fe:	4649      	mov	r1, r9
 800c300:	4638      	mov	r0, r7
 800c302:	47c0      	blx	r8
 800c304:	3001      	adds	r0, #1
 800c306:	d103      	bne.n	800c310 <_printf_common+0xac>
 800c308:	f04f 30ff 	mov.w	r0, #4294967295
 800c30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c310:	3501      	adds	r5, #1
 800c312:	e7c6      	b.n	800c2a2 <_printf_common+0x3e>
 800c314:	18e1      	adds	r1, r4, r3
 800c316:	1c5a      	adds	r2, r3, #1
 800c318:	2030      	movs	r0, #48	; 0x30
 800c31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c31e:	4422      	add	r2, r4
 800c320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c328:	3302      	adds	r3, #2
 800c32a:	e7c7      	b.n	800c2bc <_printf_common+0x58>
 800c32c:	2301      	movs	r3, #1
 800c32e:	4622      	mov	r2, r4
 800c330:	4649      	mov	r1, r9
 800c332:	4638      	mov	r0, r7
 800c334:	47c0      	blx	r8
 800c336:	3001      	adds	r0, #1
 800c338:	d0e6      	beq.n	800c308 <_printf_common+0xa4>
 800c33a:	3601      	adds	r6, #1
 800c33c:	e7d9      	b.n	800c2f2 <_printf_common+0x8e>
	...

0800c340 <_printf_i>:
 800c340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c344:	460c      	mov	r4, r1
 800c346:	4691      	mov	r9, r2
 800c348:	7e27      	ldrb	r7, [r4, #24]
 800c34a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c34c:	2f78      	cmp	r7, #120	; 0x78
 800c34e:	4680      	mov	r8, r0
 800c350:	469a      	mov	sl, r3
 800c352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c356:	d807      	bhi.n	800c368 <_printf_i+0x28>
 800c358:	2f62      	cmp	r7, #98	; 0x62
 800c35a:	d80a      	bhi.n	800c372 <_printf_i+0x32>
 800c35c:	2f00      	cmp	r7, #0
 800c35e:	f000 80d8 	beq.w	800c512 <_printf_i+0x1d2>
 800c362:	2f58      	cmp	r7, #88	; 0x58
 800c364:	f000 80a3 	beq.w	800c4ae <_printf_i+0x16e>
 800c368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c370:	e03a      	b.n	800c3e8 <_printf_i+0xa8>
 800c372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c376:	2b15      	cmp	r3, #21
 800c378:	d8f6      	bhi.n	800c368 <_printf_i+0x28>
 800c37a:	a001      	add	r0, pc, #4	; (adr r0, 800c380 <_printf_i+0x40>)
 800c37c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c380:	0800c3d9 	.word	0x0800c3d9
 800c384:	0800c3ed 	.word	0x0800c3ed
 800c388:	0800c369 	.word	0x0800c369
 800c38c:	0800c369 	.word	0x0800c369
 800c390:	0800c369 	.word	0x0800c369
 800c394:	0800c369 	.word	0x0800c369
 800c398:	0800c3ed 	.word	0x0800c3ed
 800c39c:	0800c369 	.word	0x0800c369
 800c3a0:	0800c369 	.word	0x0800c369
 800c3a4:	0800c369 	.word	0x0800c369
 800c3a8:	0800c369 	.word	0x0800c369
 800c3ac:	0800c4f9 	.word	0x0800c4f9
 800c3b0:	0800c41d 	.word	0x0800c41d
 800c3b4:	0800c4db 	.word	0x0800c4db
 800c3b8:	0800c369 	.word	0x0800c369
 800c3bc:	0800c369 	.word	0x0800c369
 800c3c0:	0800c51b 	.word	0x0800c51b
 800c3c4:	0800c369 	.word	0x0800c369
 800c3c8:	0800c41d 	.word	0x0800c41d
 800c3cc:	0800c369 	.word	0x0800c369
 800c3d0:	0800c369 	.word	0x0800c369
 800c3d4:	0800c4e3 	.word	0x0800c4e3
 800c3d8:	680b      	ldr	r3, [r1, #0]
 800c3da:	1d1a      	adds	r2, r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	600a      	str	r2, [r1, #0]
 800c3e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	e0a3      	b.n	800c534 <_printf_i+0x1f4>
 800c3ec:	6825      	ldr	r5, [r4, #0]
 800c3ee:	6808      	ldr	r0, [r1, #0]
 800c3f0:	062e      	lsls	r6, r5, #24
 800c3f2:	f100 0304 	add.w	r3, r0, #4
 800c3f6:	d50a      	bpl.n	800c40e <_printf_i+0xce>
 800c3f8:	6805      	ldr	r5, [r0, #0]
 800c3fa:	600b      	str	r3, [r1, #0]
 800c3fc:	2d00      	cmp	r5, #0
 800c3fe:	da03      	bge.n	800c408 <_printf_i+0xc8>
 800c400:	232d      	movs	r3, #45	; 0x2d
 800c402:	426d      	negs	r5, r5
 800c404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c408:	485e      	ldr	r0, [pc, #376]	; (800c584 <_printf_i+0x244>)
 800c40a:	230a      	movs	r3, #10
 800c40c:	e019      	b.n	800c442 <_printf_i+0x102>
 800c40e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c412:	6805      	ldr	r5, [r0, #0]
 800c414:	600b      	str	r3, [r1, #0]
 800c416:	bf18      	it	ne
 800c418:	b22d      	sxthne	r5, r5
 800c41a:	e7ef      	b.n	800c3fc <_printf_i+0xbc>
 800c41c:	680b      	ldr	r3, [r1, #0]
 800c41e:	6825      	ldr	r5, [r4, #0]
 800c420:	1d18      	adds	r0, r3, #4
 800c422:	6008      	str	r0, [r1, #0]
 800c424:	0628      	lsls	r0, r5, #24
 800c426:	d501      	bpl.n	800c42c <_printf_i+0xec>
 800c428:	681d      	ldr	r5, [r3, #0]
 800c42a:	e002      	b.n	800c432 <_printf_i+0xf2>
 800c42c:	0669      	lsls	r1, r5, #25
 800c42e:	d5fb      	bpl.n	800c428 <_printf_i+0xe8>
 800c430:	881d      	ldrh	r5, [r3, #0]
 800c432:	4854      	ldr	r0, [pc, #336]	; (800c584 <_printf_i+0x244>)
 800c434:	2f6f      	cmp	r7, #111	; 0x6f
 800c436:	bf0c      	ite	eq
 800c438:	2308      	moveq	r3, #8
 800c43a:	230a      	movne	r3, #10
 800c43c:	2100      	movs	r1, #0
 800c43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c442:	6866      	ldr	r6, [r4, #4]
 800c444:	60a6      	str	r6, [r4, #8]
 800c446:	2e00      	cmp	r6, #0
 800c448:	bfa2      	ittt	ge
 800c44a:	6821      	ldrge	r1, [r4, #0]
 800c44c:	f021 0104 	bicge.w	r1, r1, #4
 800c450:	6021      	strge	r1, [r4, #0]
 800c452:	b90d      	cbnz	r5, 800c458 <_printf_i+0x118>
 800c454:	2e00      	cmp	r6, #0
 800c456:	d04d      	beq.n	800c4f4 <_printf_i+0x1b4>
 800c458:	4616      	mov	r6, r2
 800c45a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c45e:	fb03 5711 	mls	r7, r3, r1, r5
 800c462:	5dc7      	ldrb	r7, [r0, r7]
 800c464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c468:	462f      	mov	r7, r5
 800c46a:	42bb      	cmp	r3, r7
 800c46c:	460d      	mov	r5, r1
 800c46e:	d9f4      	bls.n	800c45a <_printf_i+0x11a>
 800c470:	2b08      	cmp	r3, #8
 800c472:	d10b      	bne.n	800c48c <_printf_i+0x14c>
 800c474:	6823      	ldr	r3, [r4, #0]
 800c476:	07df      	lsls	r7, r3, #31
 800c478:	d508      	bpl.n	800c48c <_printf_i+0x14c>
 800c47a:	6923      	ldr	r3, [r4, #16]
 800c47c:	6861      	ldr	r1, [r4, #4]
 800c47e:	4299      	cmp	r1, r3
 800c480:	bfde      	ittt	le
 800c482:	2330      	movle	r3, #48	; 0x30
 800c484:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c48c:	1b92      	subs	r2, r2, r6
 800c48e:	6122      	str	r2, [r4, #16]
 800c490:	f8cd a000 	str.w	sl, [sp]
 800c494:	464b      	mov	r3, r9
 800c496:	aa03      	add	r2, sp, #12
 800c498:	4621      	mov	r1, r4
 800c49a:	4640      	mov	r0, r8
 800c49c:	f7ff fee2 	bl	800c264 <_printf_common>
 800c4a0:	3001      	adds	r0, #1
 800c4a2:	d14c      	bne.n	800c53e <_printf_i+0x1fe>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4a8:	b004      	add	sp, #16
 800c4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ae:	4835      	ldr	r0, [pc, #212]	; (800c584 <_printf_i+0x244>)
 800c4b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	680e      	ldr	r6, [r1, #0]
 800c4b8:	061f      	lsls	r7, r3, #24
 800c4ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800c4be:	600e      	str	r6, [r1, #0]
 800c4c0:	d514      	bpl.n	800c4ec <_printf_i+0x1ac>
 800c4c2:	07d9      	lsls	r1, r3, #31
 800c4c4:	bf44      	itt	mi
 800c4c6:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ca:	6023      	strmi	r3, [r4, #0]
 800c4cc:	b91d      	cbnz	r5, 800c4d6 <_printf_i+0x196>
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	f023 0320 	bic.w	r3, r3, #32
 800c4d4:	6023      	str	r3, [r4, #0]
 800c4d6:	2310      	movs	r3, #16
 800c4d8:	e7b0      	b.n	800c43c <_printf_i+0xfc>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	f043 0320 	orr.w	r3, r3, #32
 800c4e0:	6023      	str	r3, [r4, #0]
 800c4e2:	2378      	movs	r3, #120	; 0x78
 800c4e4:	4828      	ldr	r0, [pc, #160]	; (800c588 <_printf_i+0x248>)
 800c4e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4ea:	e7e3      	b.n	800c4b4 <_printf_i+0x174>
 800c4ec:	065e      	lsls	r6, r3, #25
 800c4ee:	bf48      	it	mi
 800c4f0:	b2ad      	uxthmi	r5, r5
 800c4f2:	e7e6      	b.n	800c4c2 <_printf_i+0x182>
 800c4f4:	4616      	mov	r6, r2
 800c4f6:	e7bb      	b.n	800c470 <_printf_i+0x130>
 800c4f8:	680b      	ldr	r3, [r1, #0]
 800c4fa:	6826      	ldr	r6, [r4, #0]
 800c4fc:	6960      	ldr	r0, [r4, #20]
 800c4fe:	1d1d      	adds	r5, r3, #4
 800c500:	600d      	str	r5, [r1, #0]
 800c502:	0635      	lsls	r5, r6, #24
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	d501      	bpl.n	800c50c <_printf_i+0x1cc>
 800c508:	6018      	str	r0, [r3, #0]
 800c50a:	e002      	b.n	800c512 <_printf_i+0x1d2>
 800c50c:	0671      	lsls	r1, r6, #25
 800c50e:	d5fb      	bpl.n	800c508 <_printf_i+0x1c8>
 800c510:	8018      	strh	r0, [r3, #0]
 800c512:	2300      	movs	r3, #0
 800c514:	6123      	str	r3, [r4, #16]
 800c516:	4616      	mov	r6, r2
 800c518:	e7ba      	b.n	800c490 <_printf_i+0x150>
 800c51a:	680b      	ldr	r3, [r1, #0]
 800c51c:	1d1a      	adds	r2, r3, #4
 800c51e:	600a      	str	r2, [r1, #0]
 800c520:	681e      	ldr	r6, [r3, #0]
 800c522:	6862      	ldr	r2, [r4, #4]
 800c524:	2100      	movs	r1, #0
 800c526:	4630      	mov	r0, r6
 800c528:	f7f3 fe8a 	bl	8000240 <memchr>
 800c52c:	b108      	cbz	r0, 800c532 <_printf_i+0x1f2>
 800c52e:	1b80      	subs	r0, r0, r6
 800c530:	6060      	str	r0, [r4, #4]
 800c532:	6863      	ldr	r3, [r4, #4]
 800c534:	6123      	str	r3, [r4, #16]
 800c536:	2300      	movs	r3, #0
 800c538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c53c:	e7a8      	b.n	800c490 <_printf_i+0x150>
 800c53e:	6923      	ldr	r3, [r4, #16]
 800c540:	4632      	mov	r2, r6
 800c542:	4649      	mov	r1, r9
 800c544:	4640      	mov	r0, r8
 800c546:	47d0      	blx	sl
 800c548:	3001      	adds	r0, #1
 800c54a:	d0ab      	beq.n	800c4a4 <_printf_i+0x164>
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	079b      	lsls	r3, r3, #30
 800c550:	d413      	bmi.n	800c57a <_printf_i+0x23a>
 800c552:	68e0      	ldr	r0, [r4, #12]
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	4298      	cmp	r0, r3
 800c558:	bfb8      	it	lt
 800c55a:	4618      	movlt	r0, r3
 800c55c:	e7a4      	b.n	800c4a8 <_printf_i+0x168>
 800c55e:	2301      	movs	r3, #1
 800c560:	4632      	mov	r2, r6
 800c562:	4649      	mov	r1, r9
 800c564:	4640      	mov	r0, r8
 800c566:	47d0      	blx	sl
 800c568:	3001      	adds	r0, #1
 800c56a:	d09b      	beq.n	800c4a4 <_printf_i+0x164>
 800c56c:	3501      	adds	r5, #1
 800c56e:	68e3      	ldr	r3, [r4, #12]
 800c570:	9903      	ldr	r1, [sp, #12]
 800c572:	1a5b      	subs	r3, r3, r1
 800c574:	42ab      	cmp	r3, r5
 800c576:	dcf2      	bgt.n	800c55e <_printf_i+0x21e>
 800c578:	e7eb      	b.n	800c552 <_printf_i+0x212>
 800c57a:	2500      	movs	r5, #0
 800c57c:	f104 0619 	add.w	r6, r4, #25
 800c580:	e7f5      	b.n	800c56e <_printf_i+0x22e>
 800c582:	bf00      	nop
 800c584:	08011c8e 	.word	0x08011c8e
 800c588:	08011c9f 	.word	0x08011c9f

0800c58c <iprintf>:
 800c58c:	b40f      	push	{r0, r1, r2, r3}
 800c58e:	4b0a      	ldr	r3, [pc, #40]	; (800c5b8 <iprintf+0x2c>)
 800c590:	b513      	push	{r0, r1, r4, lr}
 800c592:	681c      	ldr	r4, [r3, #0]
 800c594:	b124      	cbz	r4, 800c5a0 <iprintf+0x14>
 800c596:	69a3      	ldr	r3, [r4, #24]
 800c598:	b913      	cbnz	r3, 800c5a0 <iprintf+0x14>
 800c59a:	4620      	mov	r0, r4
 800c59c:	f002 f844 	bl	800e628 <__sinit>
 800c5a0:	ab05      	add	r3, sp, #20
 800c5a2:	9a04      	ldr	r2, [sp, #16]
 800c5a4:	68a1      	ldr	r1, [r4, #8]
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f003 faeb 	bl	800fb84 <_vfiprintf_r>
 800c5ae:	b002      	add	sp, #8
 800c5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b4:	b004      	add	sp, #16
 800c5b6:	4770      	bx	lr
 800c5b8:	20000028 	.word	0x20000028

0800c5bc <putchar>:
 800c5bc:	4b09      	ldr	r3, [pc, #36]	; (800c5e4 <putchar+0x28>)
 800c5be:	b513      	push	{r0, r1, r4, lr}
 800c5c0:	681c      	ldr	r4, [r3, #0]
 800c5c2:	4601      	mov	r1, r0
 800c5c4:	b134      	cbz	r4, 800c5d4 <putchar+0x18>
 800c5c6:	69a3      	ldr	r3, [r4, #24]
 800c5c8:	b923      	cbnz	r3, 800c5d4 <putchar+0x18>
 800c5ca:	9001      	str	r0, [sp, #4]
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f002 f82b 	bl	800e628 <__sinit>
 800c5d2:	9901      	ldr	r1, [sp, #4]
 800c5d4:	68a2      	ldr	r2, [r4, #8]
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	b002      	add	sp, #8
 800c5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5de:	f003 bc01 	b.w	800fde4 <_putc_r>
 800c5e2:	bf00      	nop
 800c5e4:	20000028 	.word	0x20000028

0800c5e8 <_puts_r>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	460e      	mov	r6, r1
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	b118      	cbz	r0, 800c5f8 <_puts_r+0x10>
 800c5f0:	6983      	ldr	r3, [r0, #24]
 800c5f2:	b90b      	cbnz	r3, 800c5f8 <_puts_r+0x10>
 800c5f4:	f002 f818 	bl	800e628 <__sinit>
 800c5f8:	69ab      	ldr	r3, [r5, #24]
 800c5fa:	68ac      	ldr	r4, [r5, #8]
 800c5fc:	b913      	cbnz	r3, 800c604 <_puts_r+0x1c>
 800c5fe:	4628      	mov	r0, r5
 800c600:	f002 f812 	bl	800e628 <__sinit>
 800c604:	4b2c      	ldr	r3, [pc, #176]	; (800c6b8 <_puts_r+0xd0>)
 800c606:	429c      	cmp	r4, r3
 800c608:	d120      	bne.n	800c64c <_puts_r+0x64>
 800c60a:	686c      	ldr	r4, [r5, #4]
 800c60c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c60e:	07db      	lsls	r3, r3, #31
 800c610:	d405      	bmi.n	800c61e <_puts_r+0x36>
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	0598      	lsls	r0, r3, #22
 800c616:	d402      	bmi.n	800c61e <_puts_r+0x36>
 800c618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c61a:	f002 fc86 	bl	800ef2a <__retarget_lock_acquire_recursive>
 800c61e:	89a3      	ldrh	r3, [r4, #12]
 800c620:	0719      	lsls	r1, r3, #28
 800c622:	d51d      	bpl.n	800c660 <_puts_r+0x78>
 800c624:	6923      	ldr	r3, [r4, #16]
 800c626:	b1db      	cbz	r3, 800c660 <_puts_r+0x78>
 800c628:	3e01      	subs	r6, #1
 800c62a:	68a3      	ldr	r3, [r4, #8]
 800c62c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c630:	3b01      	subs	r3, #1
 800c632:	60a3      	str	r3, [r4, #8]
 800c634:	bb39      	cbnz	r1, 800c686 <_puts_r+0x9e>
 800c636:	2b00      	cmp	r3, #0
 800c638:	da38      	bge.n	800c6ac <_puts_r+0xc4>
 800c63a:	4622      	mov	r2, r4
 800c63c:	210a      	movs	r1, #10
 800c63e:	4628      	mov	r0, r5
 800c640:	f000 ff6e 	bl	800d520 <__swbuf_r>
 800c644:	3001      	adds	r0, #1
 800c646:	d011      	beq.n	800c66c <_puts_r+0x84>
 800c648:	250a      	movs	r5, #10
 800c64a:	e011      	b.n	800c670 <_puts_r+0x88>
 800c64c:	4b1b      	ldr	r3, [pc, #108]	; (800c6bc <_puts_r+0xd4>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	d101      	bne.n	800c656 <_puts_r+0x6e>
 800c652:	68ac      	ldr	r4, [r5, #8]
 800c654:	e7da      	b.n	800c60c <_puts_r+0x24>
 800c656:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <_puts_r+0xd8>)
 800c658:	429c      	cmp	r4, r3
 800c65a:	bf08      	it	eq
 800c65c:	68ec      	ldreq	r4, [r5, #12]
 800c65e:	e7d5      	b.n	800c60c <_puts_r+0x24>
 800c660:	4621      	mov	r1, r4
 800c662:	4628      	mov	r0, r5
 800c664:	f000 ffae 	bl	800d5c4 <__swsetup_r>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d0dd      	beq.n	800c628 <_puts_r+0x40>
 800c66c:	f04f 35ff 	mov.w	r5, #4294967295
 800c670:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c672:	07da      	lsls	r2, r3, #31
 800c674:	d405      	bmi.n	800c682 <_puts_r+0x9a>
 800c676:	89a3      	ldrh	r3, [r4, #12]
 800c678:	059b      	lsls	r3, r3, #22
 800c67a:	d402      	bmi.n	800c682 <_puts_r+0x9a>
 800c67c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c67e:	f002 fc55 	bl	800ef2c <__retarget_lock_release_recursive>
 800c682:	4628      	mov	r0, r5
 800c684:	bd70      	pop	{r4, r5, r6, pc}
 800c686:	2b00      	cmp	r3, #0
 800c688:	da04      	bge.n	800c694 <_puts_r+0xac>
 800c68a:	69a2      	ldr	r2, [r4, #24]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	dc06      	bgt.n	800c69e <_puts_r+0xb6>
 800c690:	290a      	cmp	r1, #10
 800c692:	d004      	beq.n	800c69e <_puts_r+0xb6>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	1c5a      	adds	r2, r3, #1
 800c698:	6022      	str	r2, [r4, #0]
 800c69a:	7019      	strb	r1, [r3, #0]
 800c69c:	e7c5      	b.n	800c62a <_puts_r+0x42>
 800c69e:	4622      	mov	r2, r4
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f000 ff3d 	bl	800d520 <__swbuf_r>
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	d1bf      	bne.n	800c62a <_puts_r+0x42>
 800c6aa:	e7df      	b.n	800c66c <_puts_r+0x84>
 800c6ac:	6823      	ldr	r3, [r4, #0]
 800c6ae:	250a      	movs	r5, #10
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	6022      	str	r2, [r4, #0]
 800c6b4:	701d      	strb	r5, [r3, #0]
 800c6b6:	e7db      	b.n	800c670 <_puts_r+0x88>
 800c6b8:	08011f54 	.word	0x08011f54
 800c6bc:	08011f74 	.word	0x08011f74
 800c6c0:	08011f34 	.word	0x08011f34

0800c6c4 <puts>:
 800c6c4:	4b02      	ldr	r3, [pc, #8]	; (800c6d0 <puts+0xc>)
 800c6c6:	4601      	mov	r1, r0
 800c6c8:	6818      	ldr	r0, [r3, #0]
 800c6ca:	f7ff bf8d 	b.w	800c5e8 <_puts_r>
 800c6ce:	bf00      	nop
 800c6d0:	20000028 	.word	0x20000028

0800c6d4 <strcpy>:
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6da:	f803 2b01 	strb.w	r2, [r3], #1
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	d1f9      	bne.n	800c6d6 <strcpy+0x2>
 800c6e2:	4770      	bx	lr

0800c6e4 <sulp>:
 800c6e4:	b570      	push	{r4, r5, r6, lr}
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	460d      	mov	r5, r1
 800c6ea:	ec45 4b10 	vmov	d0, r4, r5
 800c6ee:	4616      	mov	r6, r2
 800c6f0:	f003 f816 	bl	800f720 <__ulp>
 800c6f4:	ec51 0b10 	vmov	r0, r1, d0
 800c6f8:	b17e      	cbz	r6, 800c71a <sulp+0x36>
 800c6fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c6fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c702:	2b00      	cmp	r3, #0
 800c704:	dd09      	ble.n	800c71a <sulp+0x36>
 800c706:	051b      	lsls	r3, r3, #20
 800c708:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c70c:	2400      	movs	r4, #0
 800c70e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c712:	4622      	mov	r2, r4
 800c714:	462b      	mov	r3, r5
 800c716:	f7f3 ff9f 	bl	8000658 <__aeabi_dmul>
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	0000      	movs	r0, r0
	...

0800c720 <_strtod_l>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	b0a3      	sub	sp, #140	; 0x8c
 800c726:	461f      	mov	r7, r3
 800c728:	2300      	movs	r3, #0
 800c72a:	931e      	str	r3, [sp, #120]	; 0x78
 800c72c:	4ba4      	ldr	r3, [pc, #656]	; (800c9c0 <_strtod_l+0x2a0>)
 800c72e:	9219      	str	r2, [sp, #100]	; 0x64
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	9307      	str	r3, [sp, #28]
 800c734:	4604      	mov	r4, r0
 800c736:	4618      	mov	r0, r3
 800c738:	4688      	mov	r8, r1
 800c73a:	f7f3 fd73 	bl	8000224 <strlen>
 800c73e:	f04f 0a00 	mov.w	sl, #0
 800c742:	4605      	mov	r5, r0
 800c744:	f04f 0b00 	mov.w	fp, #0
 800c748:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c74c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c74e:	781a      	ldrb	r2, [r3, #0]
 800c750:	2a2b      	cmp	r2, #43	; 0x2b
 800c752:	d04c      	beq.n	800c7ee <_strtod_l+0xce>
 800c754:	d839      	bhi.n	800c7ca <_strtod_l+0xaa>
 800c756:	2a0d      	cmp	r2, #13
 800c758:	d832      	bhi.n	800c7c0 <_strtod_l+0xa0>
 800c75a:	2a08      	cmp	r2, #8
 800c75c:	d832      	bhi.n	800c7c4 <_strtod_l+0xa4>
 800c75e:	2a00      	cmp	r2, #0
 800c760:	d03c      	beq.n	800c7dc <_strtod_l+0xbc>
 800c762:	2300      	movs	r3, #0
 800c764:	930e      	str	r3, [sp, #56]	; 0x38
 800c766:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c768:	7833      	ldrb	r3, [r6, #0]
 800c76a:	2b30      	cmp	r3, #48	; 0x30
 800c76c:	f040 80b4 	bne.w	800c8d8 <_strtod_l+0x1b8>
 800c770:	7873      	ldrb	r3, [r6, #1]
 800c772:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c776:	2b58      	cmp	r3, #88	; 0x58
 800c778:	d16c      	bne.n	800c854 <_strtod_l+0x134>
 800c77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	ab1e      	add	r3, sp, #120	; 0x78
 800c780:	9702      	str	r7, [sp, #8]
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	4a8f      	ldr	r2, [pc, #572]	; (800c9c4 <_strtod_l+0x2a4>)
 800c786:	ab1f      	add	r3, sp, #124	; 0x7c
 800c788:	a91d      	add	r1, sp, #116	; 0x74
 800c78a:	4620      	mov	r0, r4
 800c78c:	f002 f880 	bl	800e890 <__gethex>
 800c790:	f010 0707 	ands.w	r7, r0, #7
 800c794:	4605      	mov	r5, r0
 800c796:	d005      	beq.n	800c7a4 <_strtod_l+0x84>
 800c798:	2f06      	cmp	r7, #6
 800c79a:	d12a      	bne.n	800c7f2 <_strtod_l+0xd2>
 800c79c:	3601      	adds	r6, #1
 800c79e:	2300      	movs	r3, #0
 800c7a0:	961d      	str	r6, [sp, #116]	; 0x74
 800c7a2:	930e      	str	r3, [sp, #56]	; 0x38
 800c7a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 8596 	bne.w	800d2d8 <_strtod_l+0xbb8>
 800c7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ae:	b1db      	cbz	r3, 800c7e8 <_strtod_l+0xc8>
 800c7b0:	4652      	mov	r2, sl
 800c7b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7b6:	ec43 2b10 	vmov	d0, r2, r3
 800c7ba:	b023      	add	sp, #140	; 0x8c
 800c7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c0:	2a20      	cmp	r2, #32
 800c7c2:	d1ce      	bne.n	800c762 <_strtod_l+0x42>
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	931d      	str	r3, [sp, #116]	; 0x74
 800c7c8:	e7c0      	b.n	800c74c <_strtod_l+0x2c>
 800c7ca:	2a2d      	cmp	r2, #45	; 0x2d
 800c7cc:	d1c9      	bne.n	800c762 <_strtod_l+0x42>
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	920e      	str	r2, [sp, #56]	; 0x38
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	921d      	str	r2, [sp, #116]	; 0x74
 800c7d6:	785b      	ldrb	r3, [r3, #1]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1c4      	bne.n	800c766 <_strtod_l+0x46>
 800c7dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	f040 8576 	bne.w	800d2d4 <_strtod_l+0xbb4>
 800c7e8:	4652      	mov	r2, sl
 800c7ea:	465b      	mov	r3, fp
 800c7ec:	e7e3      	b.n	800c7b6 <_strtod_l+0x96>
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	e7ee      	b.n	800c7d0 <_strtod_l+0xb0>
 800c7f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c7f4:	b13a      	cbz	r2, 800c806 <_strtod_l+0xe6>
 800c7f6:	2135      	movs	r1, #53	; 0x35
 800c7f8:	a820      	add	r0, sp, #128	; 0x80
 800c7fa:	f003 f89c 	bl	800f936 <__copybits>
 800c7fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c800:	4620      	mov	r0, r4
 800c802:	f002 fc61 	bl	800f0c8 <_Bfree>
 800c806:	3f01      	subs	r7, #1
 800c808:	2f05      	cmp	r7, #5
 800c80a:	d807      	bhi.n	800c81c <_strtod_l+0xfc>
 800c80c:	e8df f007 	tbb	[pc, r7]
 800c810:	1d180b0e 	.word	0x1d180b0e
 800c814:	030e      	.short	0x030e
 800c816:	f04f 0b00 	mov.w	fp, #0
 800c81a:	46da      	mov	sl, fp
 800c81c:	0728      	lsls	r0, r5, #28
 800c81e:	d5c1      	bpl.n	800c7a4 <_strtod_l+0x84>
 800c820:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c824:	e7be      	b.n	800c7a4 <_strtod_l+0x84>
 800c826:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c82a:	e7f7      	b.n	800c81c <_strtod_l+0xfc>
 800c82c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c830:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c832:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c836:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c83a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c83e:	e7ed      	b.n	800c81c <_strtod_l+0xfc>
 800c840:	f8df b184 	ldr.w	fp, [pc, #388]	; 800c9c8 <_strtod_l+0x2a8>
 800c844:	f04f 0a00 	mov.w	sl, #0
 800c848:	e7e8      	b.n	800c81c <_strtod_l+0xfc>
 800c84a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c84e:	f04f 3aff 	mov.w	sl, #4294967295
 800c852:	e7e3      	b.n	800c81c <_strtod_l+0xfc>
 800c854:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c856:	1c5a      	adds	r2, r3, #1
 800c858:	921d      	str	r2, [sp, #116]	; 0x74
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	2b30      	cmp	r3, #48	; 0x30
 800c85e:	d0f9      	beq.n	800c854 <_strtod_l+0x134>
 800c860:	2b00      	cmp	r3, #0
 800c862:	d09f      	beq.n	800c7a4 <_strtod_l+0x84>
 800c864:	2301      	movs	r3, #1
 800c866:	f04f 0900 	mov.w	r9, #0
 800c86a:	9304      	str	r3, [sp, #16]
 800c86c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c86e:	930a      	str	r3, [sp, #40]	; 0x28
 800c870:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c874:	464f      	mov	r7, r9
 800c876:	220a      	movs	r2, #10
 800c878:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c87a:	7806      	ldrb	r6, [r0, #0]
 800c87c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c880:	b2d9      	uxtb	r1, r3
 800c882:	2909      	cmp	r1, #9
 800c884:	d92a      	bls.n	800c8dc <_strtod_l+0x1bc>
 800c886:	9907      	ldr	r1, [sp, #28]
 800c888:	462a      	mov	r2, r5
 800c88a:	f003 fb7c 	bl	800ff86 <strncmp>
 800c88e:	b398      	cbz	r0, 800c8f8 <_strtod_l+0x1d8>
 800c890:	2000      	movs	r0, #0
 800c892:	4633      	mov	r3, r6
 800c894:	463d      	mov	r5, r7
 800c896:	9007      	str	r0, [sp, #28]
 800c898:	4602      	mov	r2, r0
 800c89a:	2b65      	cmp	r3, #101	; 0x65
 800c89c:	d001      	beq.n	800c8a2 <_strtod_l+0x182>
 800c89e:	2b45      	cmp	r3, #69	; 0x45
 800c8a0:	d118      	bne.n	800c8d4 <_strtod_l+0x1b4>
 800c8a2:	b91d      	cbnz	r5, 800c8ac <_strtod_l+0x18c>
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	4303      	orrs	r3, r0
 800c8a8:	d098      	beq.n	800c7dc <_strtod_l+0xbc>
 800c8aa:	2500      	movs	r5, #0
 800c8ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c8b0:	f108 0301 	add.w	r3, r8, #1
 800c8b4:	931d      	str	r3, [sp, #116]	; 0x74
 800c8b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c8ba:	2b2b      	cmp	r3, #43	; 0x2b
 800c8bc:	d075      	beq.n	800c9aa <_strtod_l+0x28a>
 800c8be:	2b2d      	cmp	r3, #45	; 0x2d
 800c8c0:	d07b      	beq.n	800c9ba <_strtod_l+0x29a>
 800c8c2:	f04f 0c00 	mov.w	ip, #0
 800c8c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c8ca:	2909      	cmp	r1, #9
 800c8cc:	f240 8082 	bls.w	800c9d4 <_strtod_l+0x2b4>
 800c8d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c8d4:	2600      	movs	r6, #0
 800c8d6:	e09d      	b.n	800ca14 <_strtod_l+0x2f4>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e7c4      	b.n	800c866 <_strtod_l+0x146>
 800c8dc:	2f08      	cmp	r7, #8
 800c8de:	bfd8      	it	le
 800c8e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c8e2:	f100 0001 	add.w	r0, r0, #1
 800c8e6:	bfda      	itte	le
 800c8e8:	fb02 3301 	mlale	r3, r2, r1, r3
 800c8ec:	9309      	strle	r3, [sp, #36]	; 0x24
 800c8ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c8f2:	3701      	adds	r7, #1
 800c8f4:	901d      	str	r0, [sp, #116]	; 0x74
 800c8f6:	e7bf      	b.n	800c878 <_strtod_l+0x158>
 800c8f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8fa:	195a      	adds	r2, r3, r5
 800c8fc:	921d      	str	r2, [sp, #116]	; 0x74
 800c8fe:	5d5b      	ldrb	r3, [r3, r5]
 800c900:	2f00      	cmp	r7, #0
 800c902:	d037      	beq.n	800c974 <_strtod_l+0x254>
 800c904:	9007      	str	r0, [sp, #28]
 800c906:	463d      	mov	r5, r7
 800c908:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c90c:	2a09      	cmp	r2, #9
 800c90e:	d912      	bls.n	800c936 <_strtod_l+0x216>
 800c910:	2201      	movs	r2, #1
 800c912:	e7c2      	b.n	800c89a <_strtod_l+0x17a>
 800c914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	921d      	str	r2, [sp, #116]	; 0x74
 800c91a:	785b      	ldrb	r3, [r3, #1]
 800c91c:	3001      	adds	r0, #1
 800c91e:	2b30      	cmp	r3, #48	; 0x30
 800c920:	d0f8      	beq.n	800c914 <_strtod_l+0x1f4>
 800c922:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c926:	2a08      	cmp	r2, #8
 800c928:	f200 84db 	bhi.w	800d2e2 <_strtod_l+0xbc2>
 800c92c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c92e:	9007      	str	r0, [sp, #28]
 800c930:	2000      	movs	r0, #0
 800c932:	920a      	str	r2, [sp, #40]	; 0x28
 800c934:	4605      	mov	r5, r0
 800c936:	3b30      	subs	r3, #48	; 0x30
 800c938:	f100 0201 	add.w	r2, r0, #1
 800c93c:	d014      	beq.n	800c968 <_strtod_l+0x248>
 800c93e:	9907      	ldr	r1, [sp, #28]
 800c940:	4411      	add	r1, r2
 800c942:	9107      	str	r1, [sp, #28]
 800c944:	462a      	mov	r2, r5
 800c946:	eb00 0e05 	add.w	lr, r0, r5
 800c94a:	210a      	movs	r1, #10
 800c94c:	4572      	cmp	r2, lr
 800c94e:	d113      	bne.n	800c978 <_strtod_l+0x258>
 800c950:	182a      	adds	r2, r5, r0
 800c952:	2a08      	cmp	r2, #8
 800c954:	f105 0501 	add.w	r5, r5, #1
 800c958:	4405      	add	r5, r0
 800c95a:	dc1c      	bgt.n	800c996 <_strtod_l+0x276>
 800c95c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c95e:	220a      	movs	r2, #10
 800c960:	fb02 3301 	mla	r3, r2, r1, r3
 800c964:	9309      	str	r3, [sp, #36]	; 0x24
 800c966:	2200      	movs	r2, #0
 800c968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c96a:	1c59      	adds	r1, r3, #1
 800c96c:	911d      	str	r1, [sp, #116]	; 0x74
 800c96e:	785b      	ldrb	r3, [r3, #1]
 800c970:	4610      	mov	r0, r2
 800c972:	e7c9      	b.n	800c908 <_strtod_l+0x1e8>
 800c974:	4638      	mov	r0, r7
 800c976:	e7d2      	b.n	800c91e <_strtod_l+0x1fe>
 800c978:	2a08      	cmp	r2, #8
 800c97a:	dc04      	bgt.n	800c986 <_strtod_l+0x266>
 800c97c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c97e:	434e      	muls	r6, r1
 800c980:	9609      	str	r6, [sp, #36]	; 0x24
 800c982:	3201      	adds	r2, #1
 800c984:	e7e2      	b.n	800c94c <_strtod_l+0x22c>
 800c986:	f102 0c01 	add.w	ip, r2, #1
 800c98a:	f1bc 0f10 	cmp.w	ip, #16
 800c98e:	bfd8      	it	le
 800c990:	fb01 f909 	mulle.w	r9, r1, r9
 800c994:	e7f5      	b.n	800c982 <_strtod_l+0x262>
 800c996:	2d10      	cmp	r5, #16
 800c998:	bfdc      	itt	le
 800c99a:	220a      	movle	r2, #10
 800c99c:	fb02 3909 	mlale	r9, r2, r9, r3
 800c9a0:	e7e1      	b.n	800c966 <_strtod_l+0x246>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9307      	str	r3, [sp, #28]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	e77c      	b.n	800c8a4 <_strtod_l+0x184>
 800c9aa:	f04f 0c00 	mov.w	ip, #0
 800c9ae:	f108 0302 	add.w	r3, r8, #2
 800c9b2:	931d      	str	r3, [sp, #116]	; 0x74
 800c9b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c9b8:	e785      	b.n	800c8c6 <_strtod_l+0x1a6>
 800c9ba:	f04f 0c01 	mov.w	ip, #1
 800c9be:	e7f6      	b.n	800c9ae <_strtod_l+0x28e>
 800c9c0:	08012000 	.word	0x08012000
 800c9c4:	08011cb0 	.word	0x08011cb0
 800c9c8:	7ff00000 	.word	0x7ff00000
 800c9cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9ce:	1c59      	adds	r1, r3, #1
 800c9d0:	911d      	str	r1, [sp, #116]	; 0x74
 800c9d2:	785b      	ldrb	r3, [r3, #1]
 800c9d4:	2b30      	cmp	r3, #48	; 0x30
 800c9d6:	d0f9      	beq.n	800c9cc <_strtod_l+0x2ac>
 800c9d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800c9dc:	2908      	cmp	r1, #8
 800c9de:	f63f af79 	bhi.w	800c8d4 <_strtod_l+0x1b4>
 800c9e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c9e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9e8:	9308      	str	r3, [sp, #32]
 800c9ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9ec:	1c59      	adds	r1, r3, #1
 800c9ee:	911d      	str	r1, [sp, #116]	; 0x74
 800c9f0:	785b      	ldrb	r3, [r3, #1]
 800c9f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800c9f6:	2e09      	cmp	r6, #9
 800c9f8:	d937      	bls.n	800ca6a <_strtod_l+0x34a>
 800c9fa:	9e08      	ldr	r6, [sp, #32]
 800c9fc:	1b89      	subs	r1, r1, r6
 800c9fe:	2908      	cmp	r1, #8
 800ca00:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ca04:	dc02      	bgt.n	800ca0c <_strtod_l+0x2ec>
 800ca06:	4576      	cmp	r6, lr
 800ca08:	bfa8      	it	ge
 800ca0a:	4676      	movge	r6, lr
 800ca0c:	f1bc 0f00 	cmp.w	ip, #0
 800ca10:	d000      	beq.n	800ca14 <_strtod_l+0x2f4>
 800ca12:	4276      	negs	r6, r6
 800ca14:	2d00      	cmp	r5, #0
 800ca16:	d14f      	bne.n	800cab8 <_strtod_l+0x398>
 800ca18:	9904      	ldr	r1, [sp, #16]
 800ca1a:	4301      	orrs	r1, r0
 800ca1c:	f47f aec2 	bne.w	800c7a4 <_strtod_l+0x84>
 800ca20:	2a00      	cmp	r2, #0
 800ca22:	f47f aedb 	bne.w	800c7dc <_strtod_l+0xbc>
 800ca26:	2b69      	cmp	r3, #105	; 0x69
 800ca28:	d027      	beq.n	800ca7a <_strtod_l+0x35a>
 800ca2a:	dc24      	bgt.n	800ca76 <_strtod_l+0x356>
 800ca2c:	2b49      	cmp	r3, #73	; 0x49
 800ca2e:	d024      	beq.n	800ca7a <_strtod_l+0x35a>
 800ca30:	2b4e      	cmp	r3, #78	; 0x4e
 800ca32:	f47f aed3 	bne.w	800c7dc <_strtod_l+0xbc>
 800ca36:	499e      	ldr	r1, [pc, #632]	; (800ccb0 <_strtod_l+0x590>)
 800ca38:	a81d      	add	r0, sp, #116	; 0x74
 800ca3a:	f002 f981 	bl	800ed40 <__match>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	f43f aecc 	beq.w	800c7dc <_strtod_l+0xbc>
 800ca44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b28      	cmp	r3, #40	; 0x28
 800ca4a:	d12d      	bne.n	800caa8 <_strtod_l+0x388>
 800ca4c:	4999      	ldr	r1, [pc, #612]	; (800ccb4 <_strtod_l+0x594>)
 800ca4e:	aa20      	add	r2, sp, #128	; 0x80
 800ca50:	a81d      	add	r0, sp, #116	; 0x74
 800ca52:	f002 f989 	bl	800ed68 <__hexnan>
 800ca56:	2805      	cmp	r0, #5
 800ca58:	d126      	bne.n	800caa8 <_strtod_l+0x388>
 800ca5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca5c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ca60:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ca64:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ca68:	e69c      	b.n	800c7a4 <_strtod_l+0x84>
 800ca6a:	210a      	movs	r1, #10
 800ca6c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ca70:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ca74:	e7b9      	b.n	800c9ea <_strtod_l+0x2ca>
 800ca76:	2b6e      	cmp	r3, #110	; 0x6e
 800ca78:	e7db      	b.n	800ca32 <_strtod_l+0x312>
 800ca7a:	498f      	ldr	r1, [pc, #572]	; (800ccb8 <_strtod_l+0x598>)
 800ca7c:	a81d      	add	r0, sp, #116	; 0x74
 800ca7e:	f002 f95f 	bl	800ed40 <__match>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	f43f aeaa 	beq.w	800c7dc <_strtod_l+0xbc>
 800ca88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca8a:	498c      	ldr	r1, [pc, #560]	; (800ccbc <_strtod_l+0x59c>)
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	a81d      	add	r0, sp, #116	; 0x74
 800ca90:	931d      	str	r3, [sp, #116]	; 0x74
 800ca92:	f002 f955 	bl	800ed40 <__match>
 800ca96:	b910      	cbnz	r0, 800ca9e <_strtod_l+0x37e>
 800ca98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	931d      	str	r3, [sp, #116]	; 0x74
 800ca9e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cccc <_strtod_l+0x5ac>
 800caa2:	f04f 0a00 	mov.w	sl, #0
 800caa6:	e67d      	b.n	800c7a4 <_strtod_l+0x84>
 800caa8:	4885      	ldr	r0, [pc, #532]	; (800ccc0 <_strtod_l+0x5a0>)
 800caaa:	f003 fa11 	bl	800fed0 <nan>
 800caae:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cab2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cab6:	e675      	b.n	800c7a4 <_strtod_l+0x84>
 800cab8:	9b07      	ldr	r3, [sp, #28]
 800caba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cabc:	1af3      	subs	r3, r6, r3
 800cabe:	2f00      	cmp	r7, #0
 800cac0:	bf08      	it	eq
 800cac2:	462f      	moveq	r7, r5
 800cac4:	2d10      	cmp	r5, #16
 800cac6:	9308      	str	r3, [sp, #32]
 800cac8:	46a8      	mov	r8, r5
 800caca:	bfa8      	it	ge
 800cacc:	f04f 0810 	movge.w	r8, #16
 800cad0:	f7f3 fd48 	bl	8000564 <__aeabi_ui2d>
 800cad4:	2d09      	cmp	r5, #9
 800cad6:	4682      	mov	sl, r0
 800cad8:	468b      	mov	fp, r1
 800cada:	dd13      	ble.n	800cb04 <_strtod_l+0x3e4>
 800cadc:	4b79      	ldr	r3, [pc, #484]	; (800ccc4 <_strtod_l+0x5a4>)
 800cade:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cae2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cae6:	f7f3 fdb7 	bl	8000658 <__aeabi_dmul>
 800caea:	4682      	mov	sl, r0
 800caec:	4648      	mov	r0, r9
 800caee:	468b      	mov	fp, r1
 800caf0:	f7f3 fd38 	bl	8000564 <__aeabi_ui2d>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4650      	mov	r0, sl
 800cafa:	4659      	mov	r1, fp
 800cafc:	f7f3 fbf6 	bl	80002ec <__adddf3>
 800cb00:	4682      	mov	sl, r0
 800cb02:	468b      	mov	fp, r1
 800cb04:	2d0f      	cmp	r5, #15
 800cb06:	dc38      	bgt.n	800cb7a <_strtod_l+0x45a>
 800cb08:	9b08      	ldr	r3, [sp, #32]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	f43f ae4a 	beq.w	800c7a4 <_strtod_l+0x84>
 800cb10:	dd24      	ble.n	800cb5c <_strtod_l+0x43c>
 800cb12:	2b16      	cmp	r3, #22
 800cb14:	dc0b      	bgt.n	800cb2e <_strtod_l+0x40e>
 800cb16:	4d6b      	ldr	r5, [pc, #428]	; (800ccc4 <_strtod_l+0x5a4>)
 800cb18:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cb1c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cb20:	4652      	mov	r2, sl
 800cb22:	465b      	mov	r3, fp
 800cb24:	f7f3 fd98 	bl	8000658 <__aeabi_dmul>
 800cb28:	4682      	mov	sl, r0
 800cb2a:	468b      	mov	fp, r1
 800cb2c:	e63a      	b.n	800c7a4 <_strtod_l+0x84>
 800cb2e:	9a08      	ldr	r2, [sp, #32]
 800cb30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cb34:	4293      	cmp	r3, r2
 800cb36:	db20      	blt.n	800cb7a <_strtod_l+0x45a>
 800cb38:	4c62      	ldr	r4, [pc, #392]	; (800ccc4 <_strtod_l+0x5a4>)
 800cb3a:	f1c5 050f 	rsb	r5, r5, #15
 800cb3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb42:	4652      	mov	r2, sl
 800cb44:	465b      	mov	r3, fp
 800cb46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb4a:	f7f3 fd85 	bl	8000658 <__aeabi_dmul>
 800cb4e:	9b08      	ldr	r3, [sp, #32]
 800cb50:	1b5d      	subs	r5, r3, r5
 800cb52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb5a:	e7e3      	b.n	800cb24 <_strtod_l+0x404>
 800cb5c:	9b08      	ldr	r3, [sp, #32]
 800cb5e:	3316      	adds	r3, #22
 800cb60:	db0b      	blt.n	800cb7a <_strtod_l+0x45a>
 800cb62:	9b07      	ldr	r3, [sp, #28]
 800cb64:	4a57      	ldr	r2, [pc, #348]	; (800ccc4 <_strtod_l+0x5a4>)
 800cb66:	1b9e      	subs	r6, r3, r6
 800cb68:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cb6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb70:	4650      	mov	r0, sl
 800cb72:	4659      	mov	r1, fp
 800cb74:	f7f3 fe9a 	bl	80008ac <__aeabi_ddiv>
 800cb78:	e7d6      	b.n	800cb28 <_strtod_l+0x408>
 800cb7a:	9b08      	ldr	r3, [sp, #32]
 800cb7c:	eba5 0808 	sub.w	r8, r5, r8
 800cb80:	4498      	add	r8, r3
 800cb82:	f1b8 0f00 	cmp.w	r8, #0
 800cb86:	dd71      	ble.n	800cc6c <_strtod_l+0x54c>
 800cb88:	f018 030f 	ands.w	r3, r8, #15
 800cb8c:	d00a      	beq.n	800cba4 <_strtod_l+0x484>
 800cb8e:	494d      	ldr	r1, [pc, #308]	; (800ccc4 <_strtod_l+0x5a4>)
 800cb90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb94:	4652      	mov	r2, sl
 800cb96:	465b      	mov	r3, fp
 800cb98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb9c:	f7f3 fd5c 	bl	8000658 <__aeabi_dmul>
 800cba0:	4682      	mov	sl, r0
 800cba2:	468b      	mov	fp, r1
 800cba4:	f038 080f 	bics.w	r8, r8, #15
 800cba8:	d04d      	beq.n	800cc46 <_strtod_l+0x526>
 800cbaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cbae:	dd22      	ble.n	800cbf6 <_strtod_l+0x4d6>
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	462e      	mov	r6, r5
 800cbb4:	9509      	str	r5, [sp, #36]	; 0x24
 800cbb6:	9507      	str	r5, [sp, #28]
 800cbb8:	2322      	movs	r3, #34	; 0x22
 800cbba:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cccc <_strtod_l+0x5ac>
 800cbbe:	6023      	str	r3, [r4, #0]
 800cbc0:	f04f 0a00 	mov.w	sl, #0
 800cbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f43f adec 	beq.w	800c7a4 <_strtod_l+0x84>
 800cbcc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f002 fa7a 	bl	800f0c8 <_Bfree>
 800cbd4:	9907      	ldr	r1, [sp, #28]
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f002 fa76 	bl	800f0c8 <_Bfree>
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f002 fa72 	bl	800f0c8 <_Bfree>
 800cbe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f002 fa6e 	bl	800f0c8 <_Bfree>
 800cbec:	4629      	mov	r1, r5
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f002 fa6a 	bl	800f0c8 <_Bfree>
 800cbf4:	e5d6      	b.n	800c7a4 <_strtod_l+0x84>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	4659      	mov	r1, fp
 800cc00:	4699      	mov	r9, r3
 800cc02:	f1b8 0f01 	cmp.w	r8, #1
 800cc06:	dc21      	bgt.n	800cc4c <_strtod_l+0x52c>
 800cc08:	b10b      	cbz	r3, 800cc0e <_strtod_l+0x4ee>
 800cc0a:	4682      	mov	sl, r0
 800cc0c:	468b      	mov	fp, r1
 800cc0e:	4b2e      	ldr	r3, [pc, #184]	; (800ccc8 <_strtod_l+0x5a8>)
 800cc10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cc14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cc18:	4652      	mov	r2, sl
 800cc1a:	465b      	mov	r3, fp
 800cc1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cc20:	f7f3 fd1a 	bl	8000658 <__aeabi_dmul>
 800cc24:	4b29      	ldr	r3, [pc, #164]	; (800cccc <_strtod_l+0x5ac>)
 800cc26:	460a      	mov	r2, r1
 800cc28:	400b      	ands	r3, r1
 800cc2a:	4929      	ldr	r1, [pc, #164]	; (800ccd0 <_strtod_l+0x5b0>)
 800cc2c:	428b      	cmp	r3, r1
 800cc2e:	4682      	mov	sl, r0
 800cc30:	d8be      	bhi.n	800cbb0 <_strtod_l+0x490>
 800cc32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc36:	428b      	cmp	r3, r1
 800cc38:	bf86      	itte	hi
 800cc3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ccd4 <_strtod_l+0x5b4>
 800cc3e:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cc46:	2300      	movs	r3, #0
 800cc48:	9304      	str	r3, [sp, #16]
 800cc4a:	e081      	b.n	800cd50 <_strtod_l+0x630>
 800cc4c:	f018 0f01 	tst.w	r8, #1
 800cc50:	d007      	beq.n	800cc62 <_strtod_l+0x542>
 800cc52:	4b1d      	ldr	r3, [pc, #116]	; (800ccc8 <_strtod_l+0x5a8>)
 800cc54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f7f3 fcfc 	bl	8000658 <__aeabi_dmul>
 800cc60:	2301      	movs	r3, #1
 800cc62:	f109 0901 	add.w	r9, r9, #1
 800cc66:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cc6a:	e7ca      	b.n	800cc02 <_strtod_l+0x4e2>
 800cc6c:	d0eb      	beq.n	800cc46 <_strtod_l+0x526>
 800cc6e:	f1c8 0800 	rsb	r8, r8, #0
 800cc72:	f018 020f 	ands.w	r2, r8, #15
 800cc76:	d00a      	beq.n	800cc8e <_strtod_l+0x56e>
 800cc78:	4b12      	ldr	r3, [pc, #72]	; (800ccc4 <_strtod_l+0x5a4>)
 800cc7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc7e:	4650      	mov	r0, sl
 800cc80:	4659      	mov	r1, fp
 800cc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc86:	f7f3 fe11 	bl	80008ac <__aeabi_ddiv>
 800cc8a:	4682      	mov	sl, r0
 800cc8c:	468b      	mov	fp, r1
 800cc8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cc92:	d0d8      	beq.n	800cc46 <_strtod_l+0x526>
 800cc94:	f1b8 0f1f 	cmp.w	r8, #31
 800cc98:	dd1e      	ble.n	800ccd8 <_strtod_l+0x5b8>
 800cc9a:	2500      	movs	r5, #0
 800cc9c:	462e      	mov	r6, r5
 800cc9e:	9509      	str	r5, [sp, #36]	; 0x24
 800cca0:	9507      	str	r5, [sp, #28]
 800cca2:	2322      	movs	r3, #34	; 0x22
 800cca4:	f04f 0a00 	mov.w	sl, #0
 800cca8:	f04f 0b00 	mov.w	fp, #0
 800ccac:	6023      	str	r3, [r4, #0]
 800ccae:	e789      	b.n	800cbc4 <_strtod_l+0x4a4>
 800ccb0:	08011c89 	.word	0x08011c89
 800ccb4:	08011cc4 	.word	0x08011cc4
 800ccb8:	08011c81 	.word	0x08011c81
 800ccbc:	08011eb8 	.word	0x08011eb8
 800ccc0:	08011db3 	.word	0x08011db3
 800ccc4:	080120a0 	.word	0x080120a0
 800ccc8:	08012078 	.word	0x08012078
 800cccc:	7ff00000 	.word	0x7ff00000
 800ccd0:	7ca00000 	.word	0x7ca00000
 800ccd4:	7fefffff 	.word	0x7fefffff
 800ccd8:	f018 0310 	ands.w	r3, r8, #16
 800ccdc:	bf18      	it	ne
 800ccde:	236a      	movne	r3, #106	; 0x6a
 800cce0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d098 <_strtod_l+0x978>
 800cce4:	9304      	str	r3, [sp, #16]
 800cce6:	4650      	mov	r0, sl
 800cce8:	4659      	mov	r1, fp
 800ccea:	2300      	movs	r3, #0
 800ccec:	f018 0f01 	tst.w	r8, #1
 800ccf0:	d004      	beq.n	800ccfc <_strtod_l+0x5dc>
 800ccf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ccf6:	f7f3 fcaf 	bl	8000658 <__aeabi_dmul>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cd00:	f109 0908 	add.w	r9, r9, #8
 800cd04:	d1f2      	bne.n	800ccec <_strtod_l+0x5cc>
 800cd06:	b10b      	cbz	r3, 800cd0c <_strtod_l+0x5ec>
 800cd08:	4682      	mov	sl, r0
 800cd0a:	468b      	mov	fp, r1
 800cd0c:	9b04      	ldr	r3, [sp, #16]
 800cd0e:	b1bb      	cbz	r3, 800cd40 <_strtod_l+0x620>
 800cd10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cd14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	4659      	mov	r1, fp
 800cd1c:	dd10      	ble.n	800cd40 <_strtod_l+0x620>
 800cd1e:	2b1f      	cmp	r3, #31
 800cd20:	f340 8128 	ble.w	800cf74 <_strtod_l+0x854>
 800cd24:	2b34      	cmp	r3, #52	; 0x34
 800cd26:	bfde      	ittt	le
 800cd28:	3b20      	suble	r3, #32
 800cd2a:	f04f 32ff 	movle.w	r2, #4294967295
 800cd2e:	fa02 f303 	lslle.w	r3, r2, r3
 800cd32:	f04f 0a00 	mov.w	sl, #0
 800cd36:	bfcc      	ite	gt
 800cd38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cd3c:	ea03 0b01 	andle.w	fp, r3, r1
 800cd40:	2200      	movs	r2, #0
 800cd42:	2300      	movs	r3, #0
 800cd44:	4650      	mov	r0, sl
 800cd46:	4659      	mov	r1, fp
 800cd48:	f7f3 feee 	bl	8000b28 <__aeabi_dcmpeq>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d1a4      	bne.n	800cc9a <_strtod_l+0x57a>
 800cd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd56:	462b      	mov	r3, r5
 800cd58:	463a      	mov	r2, r7
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f002 fa20 	bl	800f1a0 <__s2b>
 800cd60:	9009      	str	r0, [sp, #36]	; 0x24
 800cd62:	2800      	cmp	r0, #0
 800cd64:	f43f af24 	beq.w	800cbb0 <_strtod_l+0x490>
 800cd68:	9b07      	ldr	r3, [sp, #28]
 800cd6a:	1b9e      	subs	r6, r3, r6
 800cd6c:	9b08      	ldr	r3, [sp, #32]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	bfb4      	ite	lt
 800cd72:	4633      	movlt	r3, r6
 800cd74:	2300      	movge	r3, #0
 800cd76:	9310      	str	r3, [sp, #64]	; 0x40
 800cd78:	9b08      	ldr	r3, [sp, #32]
 800cd7a:	2500      	movs	r5, #0
 800cd7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cd80:	9318      	str	r3, [sp, #96]	; 0x60
 800cd82:	462e      	mov	r6, r5
 800cd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd86:	4620      	mov	r0, r4
 800cd88:	6859      	ldr	r1, [r3, #4]
 800cd8a:	f002 f95d 	bl	800f048 <_Balloc>
 800cd8e:	9007      	str	r0, [sp, #28]
 800cd90:	2800      	cmp	r0, #0
 800cd92:	f43f af11 	beq.w	800cbb8 <_strtod_l+0x498>
 800cd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd98:	691a      	ldr	r2, [r3, #16]
 800cd9a:	3202      	adds	r2, #2
 800cd9c:	f103 010c 	add.w	r1, r3, #12
 800cda0:	0092      	lsls	r2, r2, #2
 800cda2:	300c      	adds	r0, #12
 800cda4:	f002 f942 	bl	800f02c <memcpy>
 800cda8:	ec4b ab10 	vmov	d0, sl, fp
 800cdac:	aa20      	add	r2, sp, #128	; 0x80
 800cdae:	a91f      	add	r1, sp, #124	; 0x7c
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800cdb6:	f002 fd2f 	bl	800f818 <__d2b>
 800cdba:	901e      	str	r0, [sp, #120]	; 0x78
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	f43f aefb 	beq.w	800cbb8 <_strtod_l+0x498>
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f002 fa85 	bl	800f2d4 <__i2b>
 800cdca:	4606      	mov	r6, r0
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	f43f aef3 	beq.w	800cbb8 <_strtod_l+0x498>
 800cdd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cdd4:	9904      	ldr	r1, [sp, #16]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	bfab      	itete	ge
 800cdda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800cddc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800cdde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800cde0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800cde4:	bfac      	ite	ge
 800cde6:	eb03 0902 	addge.w	r9, r3, r2
 800cdea:	1ad7      	sublt	r7, r2, r3
 800cdec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cdee:	eba3 0801 	sub.w	r8, r3, r1
 800cdf2:	4490      	add	r8, r2
 800cdf4:	4ba3      	ldr	r3, [pc, #652]	; (800d084 <_strtod_l+0x964>)
 800cdf6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cdfa:	4598      	cmp	r8, r3
 800cdfc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ce00:	f280 80cc 	bge.w	800cf9c <_strtod_l+0x87c>
 800ce04:	eba3 0308 	sub.w	r3, r3, r8
 800ce08:	2b1f      	cmp	r3, #31
 800ce0a:	eba2 0203 	sub.w	r2, r2, r3
 800ce0e:	f04f 0101 	mov.w	r1, #1
 800ce12:	f300 80b6 	bgt.w	800cf82 <_strtod_l+0x862>
 800ce16:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce20:	eb09 0802 	add.w	r8, r9, r2
 800ce24:	9b04      	ldr	r3, [sp, #16]
 800ce26:	45c1      	cmp	r9, r8
 800ce28:	4417      	add	r7, r2
 800ce2a:	441f      	add	r7, r3
 800ce2c:	464b      	mov	r3, r9
 800ce2e:	bfa8      	it	ge
 800ce30:	4643      	movge	r3, r8
 800ce32:	42bb      	cmp	r3, r7
 800ce34:	bfa8      	it	ge
 800ce36:	463b      	movge	r3, r7
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bfc2      	ittt	gt
 800ce3c:	eba8 0803 	subgt.w	r8, r8, r3
 800ce40:	1aff      	subgt	r7, r7, r3
 800ce42:	eba9 0903 	subgt.w	r9, r9, r3
 800ce46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	dd17      	ble.n	800ce7c <_strtod_l+0x75c>
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	461a      	mov	r2, r3
 800ce50:	4620      	mov	r0, r4
 800ce52:	f002 fafb 	bl	800f44c <__pow5mult>
 800ce56:	4606      	mov	r6, r0
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	f43f aead 	beq.w	800cbb8 <_strtod_l+0x498>
 800ce5e:	4601      	mov	r1, r0
 800ce60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce62:	4620      	mov	r0, r4
 800ce64:	f002 fa4c 	bl	800f300 <__multiply>
 800ce68:	900f      	str	r0, [sp, #60]	; 0x3c
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	f43f aea4 	beq.w	800cbb8 <_strtod_l+0x498>
 800ce70:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ce72:	4620      	mov	r0, r4
 800ce74:	f002 f928 	bl	800f0c8 <_Bfree>
 800ce78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce7a:	931e      	str	r3, [sp, #120]	; 0x78
 800ce7c:	f1b8 0f00 	cmp.w	r8, #0
 800ce80:	f300 8091 	bgt.w	800cfa6 <_strtod_l+0x886>
 800ce84:	9b08      	ldr	r3, [sp, #32]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	dd08      	ble.n	800ce9c <_strtod_l+0x77c>
 800ce8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ce8c:	9907      	ldr	r1, [sp, #28]
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f002 fadc 	bl	800f44c <__pow5mult>
 800ce94:	9007      	str	r0, [sp, #28]
 800ce96:	2800      	cmp	r0, #0
 800ce98:	f43f ae8e 	beq.w	800cbb8 <_strtod_l+0x498>
 800ce9c:	2f00      	cmp	r7, #0
 800ce9e:	dd08      	ble.n	800ceb2 <_strtod_l+0x792>
 800cea0:	9907      	ldr	r1, [sp, #28]
 800cea2:	463a      	mov	r2, r7
 800cea4:	4620      	mov	r0, r4
 800cea6:	f002 fb2b 	bl	800f500 <__lshift>
 800ceaa:	9007      	str	r0, [sp, #28]
 800ceac:	2800      	cmp	r0, #0
 800ceae:	f43f ae83 	beq.w	800cbb8 <_strtod_l+0x498>
 800ceb2:	f1b9 0f00 	cmp.w	r9, #0
 800ceb6:	dd08      	ble.n	800ceca <_strtod_l+0x7aa>
 800ceb8:	4631      	mov	r1, r6
 800ceba:	464a      	mov	r2, r9
 800cebc:	4620      	mov	r0, r4
 800cebe:	f002 fb1f 	bl	800f500 <__lshift>
 800cec2:	4606      	mov	r6, r0
 800cec4:	2800      	cmp	r0, #0
 800cec6:	f43f ae77 	beq.w	800cbb8 <_strtod_l+0x498>
 800ceca:	9a07      	ldr	r2, [sp, #28]
 800cecc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cece:	4620      	mov	r0, r4
 800ced0:	f002 fb9e 	bl	800f610 <__mdiff>
 800ced4:	4605      	mov	r5, r0
 800ced6:	2800      	cmp	r0, #0
 800ced8:	f43f ae6e 	beq.w	800cbb8 <_strtod_l+0x498>
 800cedc:	68c3      	ldr	r3, [r0, #12]
 800cede:	930f      	str	r3, [sp, #60]	; 0x3c
 800cee0:	2300      	movs	r3, #0
 800cee2:	60c3      	str	r3, [r0, #12]
 800cee4:	4631      	mov	r1, r6
 800cee6:	f002 fb77 	bl	800f5d8 <__mcmp>
 800ceea:	2800      	cmp	r0, #0
 800ceec:	da65      	bge.n	800cfba <_strtod_l+0x89a>
 800ceee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cef0:	ea53 030a 	orrs.w	r3, r3, sl
 800cef4:	f040 8087 	bne.w	800d006 <_strtod_l+0x8e6>
 800cef8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f040 8082 	bne.w	800d006 <_strtod_l+0x8e6>
 800cf02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf06:	0d1b      	lsrs	r3, r3, #20
 800cf08:	051b      	lsls	r3, r3, #20
 800cf0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cf0e:	d97a      	bls.n	800d006 <_strtod_l+0x8e6>
 800cf10:	696b      	ldr	r3, [r5, #20]
 800cf12:	b913      	cbnz	r3, 800cf1a <_strtod_l+0x7fa>
 800cf14:	692b      	ldr	r3, [r5, #16]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	dd75      	ble.n	800d006 <_strtod_l+0x8e6>
 800cf1a:	4629      	mov	r1, r5
 800cf1c:	2201      	movs	r2, #1
 800cf1e:	4620      	mov	r0, r4
 800cf20:	f002 faee 	bl	800f500 <__lshift>
 800cf24:	4631      	mov	r1, r6
 800cf26:	4605      	mov	r5, r0
 800cf28:	f002 fb56 	bl	800f5d8 <__mcmp>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	dd6a      	ble.n	800d006 <_strtod_l+0x8e6>
 800cf30:	9904      	ldr	r1, [sp, #16]
 800cf32:	4a55      	ldr	r2, [pc, #340]	; (800d088 <_strtod_l+0x968>)
 800cf34:	465b      	mov	r3, fp
 800cf36:	2900      	cmp	r1, #0
 800cf38:	f000 8085 	beq.w	800d046 <_strtod_l+0x926>
 800cf3c:	ea02 010b 	and.w	r1, r2, fp
 800cf40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf44:	dc7f      	bgt.n	800d046 <_strtod_l+0x926>
 800cf46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf4a:	f77f aeaa 	ble.w	800cca2 <_strtod_l+0x582>
 800cf4e:	4a4f      	ldr	r2, [pc, #316]	; (800d08c <_strtod_l+0x96c>)
 800cf50:	2300      	movs	r3, #0
 800cf52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cf56:	4650      	mov	r0, sl
 800cf58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cf5c:	4659      	mov	r1, fp
 800cf5e:	f7f3 fb7b 	bl	8000658 <__aeabi_dmul>
 800cf62:	460b      	mov	r3, r1
 800cf64:	4303      	orrs	r3, r0
 800cf66:	bf08      	it	eq
 800cf68:	2322      	moveq	r3, #34	; 0x22
 800cf6a:	4682      	mov	sl, r0
 800cf6c:	468b      	mov	fp, r1
 800cf6e:	bf08      	it	eq
 800cf70:	6023      	streq	r3, [r4, #0]
 800cf72:	e62b      	b.n	800cbcc <_strtod_l+0x4ac>
 800cf74:	f04f 32ff 	mov.w	r2, #4294967295
 800cf78:	fa02 f303 	lsl.w	r3, r2, r3
 800cf7c:	ea03 0a0a 	and.w	sl, r3, sl
 800cf80:	e6de      	b.n	800cd40 <_strtod_l+0x620>
 800cf82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cf86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cf8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cf8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cf92:	fa01 f308 	lsl.w	r3, r1, r8
 800cf96:	930c      	str	r3, [sp, #48]	; 0x30
 800cf98:	9111      	str	r1, [sp, #68]	; 0x44
 800cf9a:	e741      	b.n	800ce20 <_strtod_l+0x700>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	930c      	str	r3, [sp, #48]	; 0x30
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	9311      	str	r3, [sp, #68]	; 0x44
 800cfa4:	e73c      	b.n	800ce20 <_strtod_l+0x700>
 800cfa6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cfa8:	4642      	mov	r2, r8
 800cfaa:	4620      	mov	r0, r4
 800cfac:	f002 faa8 	bl	800f500 <__lshift>
 800cfb0:	901e      	str	r0, [sp, #120]	; 0x78
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	f47f af66 	bne.w	800ce84 <_strtod_l+0x764>
 800cfb8:	e5fe      	b.n	800cbb8 <_strtod_l+0x498>
 800cfba:	465f      	mov	r7, fp
 800cfbc:	d16e      	bne.n	800d09c <_strtod_l+0x97c>
 800cfbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cfc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfc4:	b342      	cbz	r2, 800d018 <_strtod_l+0x8f8>
 800cfc6:	4a32      	ldr	r2, [pc, #200]	; (800d090 <_strtod_l+0x970>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d128      	bne.n	800d01e <_strtod_l+0x8fe>
 800cfcc:	9b04      	ldr	r3, [sp, #16]
 800cfce:	4650      	mov	r0, sl
 800cfd0:	b1eb      	cbz	r3, 800d00e <_strtod_l+0x8ee>
 800cfd2:	4a2d      	ldr	r2, [pc, #180]	; (800d088 <_strtod_l+0x968>)
 800cfd4:	403a      	ands	r2, r7
 800cfd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cfda:	f04f 31ff 	mov.w	r1, #4294967295
 800cfde:	d819      	bhi.n	800d014 <_strtod_l+0x8f4>
 800cfe0:	0d12      	lsrs	r2, r2, #20
 800cfe2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfea:	4298      	cmp	r0, r3
 800cfec:	d117      	bne.n	800d01e <_strtod_l+0x8fe>
 800cfee:	4b29      	ldr	r3, [pc, #164]	; (800d094 <_strtod_l+0x974>)
 800cff0:	429f      	cmp	r7, r3
 800cff2:	d102      	bne.n	800cffa <_strtod_l+0x8da>
 800cff4:	3001      	adds	r0, #1
 800cff6:	f43f addf 	beq.w	800cbb8 <_strtod_l+0x498>
 800cffa:	4b23      	ldr	r3, [pc, #140]	; (800d088 <_strtod_l+0x968>)
 800cffc:	403b      	ands	r3, r7
 800cffe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d002:	f04f 0a00 	mov.w	sl, #0
 800d006:	9b04      	ldr	r3, [sp, #16]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1a0      	bne.n	800cf4e <_strtod_l+0x82e>
 800d00c:	e5de      	b.n	800cbcc <_strtod_l+0x4ac>
 800d00e:	f04f 33ff 	mov.w	r3, #4294967295
 800d012:	e7ea      	b.n	800cfea <_strtod_l+0x8ca>
 800d014:	460b      	mov	r3, r1
 800d016:	e7e8      	b.n	800cfea <_strtod_l+0x8ca>
 800d018:	ea53 030a 	orrs.w	r3, r3, sl
 800d01c:	d088      	beq.n	800cf30 <_strtod_l+0x810>
 800d01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d020:	b1db      	cbz	r3, 800d05a <_strtod_l+0x93a>
 800d022:	423b      	tst	r3, r7
 800d024:	d0ef      	beq.n	800d006 <_strtod_l+0x8e6>
 800d026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d028:	9a04      	ldr	r2, [sp, #16]
 800d02a:	4650      	mov	r0, sl
 800d02c:	4659      	mov	r1, fp
 800d02e:	b1c3      	cbz	r3, 800d062 <_strtod_l+0x942>
 800d030:	f7ff fb58 	bl	800c6e4 <sulp>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d03c:	f7f3 f956 	bl	80002ec <__adddf3>
 800d040:	4682      	mov	sl, r0
 800d042:	468b      	mov	fp, r1
 800d044:	e7df      	b.n	800d006 <_strtod_l+0x8e6>
 800d046:	4013      	ands	r3, r2
 800d048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d04c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d050:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d054:	f04f 3aff 	mov.w	sl, #4294967295
 800d058:	e7d5      	b.n	800d006 <_strtod_l+0x8e6>
 800d05a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d05c:	ea13 0f0a 	tst.w	r3, sl
 800d060:	e7e0      	b.n	800d024 <_strtod_l+0x904>
 800d062:	f7ff fb3f 	bl	800c6e4 <sulp>
 800d066:	4602      	mov	r2, r0
 800d068:	460b      	mov	r3, r1
 800d06a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d06e:	f7f3 f93b 	bl	80002e8 <__aeabi_dsub>
 800d072:	2200      	movs	r2, #0
 800d074:	2300      	movs	r3, #0
 800d076:	4682      	mov	sl, r0
 800d078:	468b      	mov	fp, r1
 800d07a:	f7f3 fd55 	bl	8000b28 <__aeabi_dcmpeq>
 800d07e:	2800      	cmp	r0, #0
 800d080:	d0c1      	beq.n	800d006 <_strtod_l+0x8e6>
 800d082:	e60e      	b.n	800cca2 <_strtod_l+0x582>
 800d084:	fffffc02 	.word	0xfffffc02
 800d088:	7ff00000 	.word	0x7ff00000
 800d08c:	39500000 	.word	0x39500000
 800d090:	000fffff 	.word	0x000fffff
 800d094:	7fefffff 	.word	0x7fefffff
 800d098:	08011cd8 	.word	0x08011cd8
 800d09c:	4631      	mov	r1, r6
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f002 fc16 	bl	800f8d0 <__ratio>
 800d0a4:	ec59 8b10 	vmov	r8, r9, d0
 800d0a8:	ee10 0a10 	vmov	r0, s0
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0b2:	4649      	mov	r1, r9
 800d0b4:	f7f3 fd4c 	bl	8000b50 <__aeabi_dcmple>
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	d07c      	beq.n	800d1b6 <_strtod_l+0xa96>
 800d0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d04c      	beq.n	800d15c <_strtod_l+0xa3c>
 800d0c2:	4b95      	ldr	r3, [pc, #596]	; (800d318 <_strtod_l+0xbf8>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d0ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d318 <_strtod_l+0xbf8>
 800d0ce:	f04f 0800 	mov.w	r8, #0
 800d0d2:	4b92      	ldr	r3, [pc, #584]	; (800d31c <_strtod_l+0xbfc>)
 800d0d4:	403b      	ands	r3, r7
 800d0d6:	9311      	str	r3, [sp, #68]	; 0x44
 800d0d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d0da:	4b91      	ldr	r3, [pc, #580]	; (800d320 <_strtod_l+0xc00>)
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	f040 80b2 	bne.w	800d246 <_strtod_l+0xb26>
 800d0e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d0e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0ea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d0ee:	ec4b ab10 	vmov	d0, sl, fp
 800d0f2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d0f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d0fa:	f002 fb11 	bl	800f720 <__ulp>
 800d0fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d102:	ec53 2b10 	vmov	r2, r3, d0
 800d106:	f7f3 faa7 	bl	8000658 <__aeabi_dmul>
 800d10a:	4652      	mov	r2, sl
 800d10c:	465b      	mov	r3, fp
 800d10e:	f7f3 f8ed 	bl	80002ec <__adddf3>
 800d112:	460b      	mov	r3, r1
 800d114:	4981      	ldr	r1, [pc, #516]	; (800d31c <_strtod_l+0xbfc>)
 800d116:	4a83      	ldr	r2, [pc, #524]	; (800d324 <_strtod_l+0xc04>)
 800d118:	4019      	ands	r1, r3
 800d11a:	4291      	cmp	r1, r2
 800d11c:	4682      	mov	sl, r0
 800d11e:	d95e      	bls.n	800d1de <_strtod_l+0xabe>
 800d120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d122:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d126:	4293      	cmp	r3, r2
 800d128:	d103      	bne.n	800d132 <_strtod_l+0xa12>
 800d12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d12c:	3301      	adds	r3, #1
 800d12e:	f43f ad43 	beq.w	800cbb8 <_strtod_l+0x498>
 800d132:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d330 <_strtod_l+0xc10>
 800d136:	f04f 3aff 	mov.w	sl, #4294967295
 800d13a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d13c:	4620      	mov	r0, r4
 800d13e:	f001 ffc3 	bl	800f0c8 <_Bfree>
 800d142:	9907      	ldr	r1, [sp, #28]
 800d144:	4620      	mov	r0, r4
 800d146:	f001 ffbf 	bl	800f0c8 <_Bfree>
 800d14a:	4631      	mov	r1, r6
 800d14c:	4620      	mov	r0, r4
 800d14e:	f001 ffbb 	bl	800f0c8 <_Bfree>
 800d152:	4629      	mov	r1, r5
 800d154:	4620      	mov	r0, r4
 800d156:	f001 ffb7 	bl	800f0c8 <_Bfree>
 800d15a:	e613      	b.n	800cd84 <_strtod_l+0x664>
 800d15c:	f1ba 0f00 	cmp.w	sl, #0
 800d160:	d11b      	bne.n	800d19a <_strtod_l+0xa7a>
 800d162:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d166:	b9f3      	cbnz	r3, 800d1a6 <_strtod_l+0xa86>
 800d168:	4b6b      	ldr	r3, [pc, #428]	; (800d318 <_strtod_l+0xbf8>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	4640      	mov	r0, r8
 800d16e:	4649      	mov	r1, r9
 800d170:	f7f3 fce4 	bl	8000b3c <__aeabi_dcmplt>
 800d174:	b9d0      	cbnz	r0, 800d1ac <_strtod_l+0xa8c>
 800d176:	4640      	mov	r0, r8
 800d178:	4649      	mov	r1, r9
 800d17a:	4b6b      	ldr	r3, [pc, #428]	; (800d328 <_strtod_l+0xc08>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	f7f3 fa6b 	bl	8000658 <__aeabi_dmul>
 800d182:	4680      	mov	r8, r0
 800d184:	4689      	mov	r9, r1
 800d186:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d18a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d18e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d190:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d194:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d198:	e79b      	b.n	800d0d2 <_strtod_l+0x9b2>
 800d19a:	f1ba 0f01 	cmp.w	sl, #1
 800d19e:	d102      	bne.n	800d1a6 <_strtod_l+0xa86>
 800d1a0:	2f00      	cmp	r7, #0
 800d1a2:	f43f ad7e 	beq.w	800cca2 <_strtod_l+0x582>
 800d1a6:	4b61      	ldr	r3, [pc, #388]	; (800d32c <_strtod_l+0xc0c>)
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	e78c      	b.n	800d0c6 <_strtod_l+0x9a6>
 800d1ac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d328 <_strtod_l+0xc08>
 800d1b0:	f04f 0800 	mov.w	r8, #0
 800d1b4:	e7e7      	b.n	800d186 <_strtod_l+0xa66>
 800d1b6:	4b5c      	ldr	r3, [pc, #368]	; (800d328 <_strtod_l+0xc08>)
 800d1b8:	4640      	mov	r0, r8
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f7f3 fa4b 	bl	8000658 <__aeabi_dmul>
 800d1c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1c4:	4680      	mov	r8, r0
 800d1c6:	4689      	mov	r9, r1
 800d1c8:	b933      	cbnz	r3, 800d1d8 <_strtod_l+0xab8>
 800d1ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1ce:	9012      	str	r0, [sp, #72]	; 0x48
 800d1d0:	9313      	str	r3, [sp, #76]	; 0x4c
 800d1d2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d1d6:	e7dd      	b.n	800d194 <_strtod_l+0xa74>
 800d1d8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d1dc:	e7f9      	b.n	800d1d2 <_strtod_l+0xab2>
 800d1de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d1e2:	9b04      	ldr	r3, [sp, #16]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1a8      	bne.n	800d13a <_strtod_l+0xa1a>
 800d1e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d1ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d1ee:	0d1b      	lsrs	r3, r3, #20
 800d1f0:	051b      	lsls	r3, r3, #20
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d1a1      	bne.n	800d13a <_strtod_l+0xa1a>
 800d1f6:	4640      	mov	r0, r8
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	f7f3 fd8d 	bl	8000d18 <__aeabi_d2lz>
 800d1fe:	f7f3 f9fd 	bl	80005fc <__aeabi_l2d>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	4640      	mov	r0, r8
 800d208:	4649      	mov	r1, r9
 800d20a:	f7f3 f86d 	bl	80002e8 <__aeabi_dsub>
 800d20e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d210:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d214:	ea43 030a 	orr.w	r3, r3, sl
 800d218:	4313      	orrs	r3, r2
 800d21a:	4680      	mov	r8, r0
 800d21c:	4689      	mov	r9, r1
 800d21e:	d053      	beq.n	800d2c8 <_strtod_l+0xba8>
 800d220:	a335      	add	r3, pc, #212	; (adr r3, 800d2f8 <_strtod_l+0xbd8>)
 800d222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d226:	f7f3 fc89 	bl	8000b3c <__aeabi_dcmplt>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	f47f acce 	bne.w	800cbcc <_strtod_l+0x4ac>
 800d230:	a333      	add	r3, pc, #204	; (adr r3, 800d300 <_strtod_l+0xbe0>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	4640      	mov	r0, r8
 800d238:	4649      	mov	r1, r9
 800d23a:	f7f3 fc9d 	bl	8000b78 <__aeabi_dcmpgt>
 800d23e:	2800      	cmp	r0, #0
 800d240:	f43f af7b 	beq.w	800d13a <_strtod_l+0xa1a>
 800d244:	e4c2      	b.n	800cbcc <_strtod_l+0x4ac>
 800d246:	9b04      	ldr	r3, [sp, #16]
 800d248:	b333      	cbz	r3, 800d298 <_strtod_l+0xb78>
 800d24a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d24c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d250:	d822      	bhi.n	800d298 <_strtod_l+0xb78>
 800d252:	a32d      	add	r3, pc, #180	; (adr r3, 800d308 <_strtod_l+0xbe8>)
 800d254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d258:	4640      	mov	r0, r8
 800d25a:	4649      	mov	r1, r9
 800d25c:	f7f3 fc78 	bl	8000b50 <__aeabi_dcmple>
 800d260:	b1a0      	cbz	r0, 800d28c <_strtod_l+0xb6c>
 800d262:	4649      	mov	r1, r9
 800d264:	4640      	mov	r0, r8
 800d266:	f7f3 fccf 	bl	8000c08 <__aeabi_d2uiz>
 800d26a:	2801      	cmp	r0, #1
 800d26c:	bf38      	it	cc
 800d26e:	2001      	movcc	r0, #1
 800d270:	f7f3 f978 	bl	8000564 <__aeabi_ui2d>
 800d274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d276:	4680      	mov	r8, r0
 800d278:	4689      	mov	r9, r1
 800d27a:	bb13      	cbnz	r3, 800d2c2 <_strtod_l+0xba2>
 800d27c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d280:	9014      	str	r0, [sp, #80]	; 0x50
 800d282:	9315      	str	r3, [sp, #84]	; 0x54
 800d284:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d288:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d28c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d28e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d290:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d294:	1a9b      	subs	r3, r3, r2
 800d296:	930d      	str	r3, [sp, #52]	; 0x34
 800d298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d29c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d2a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2a4:	f002 fa3c 	bl	800f720 <__ulp>
 800d2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2ac:	ec53 2b10 	vmov	r2, r3, d0
 800d2b0:	f7f3 f9d2 	bl	8000658 <__aeabi_dmul>
 800d2b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d2b8:	f7f3 f818 	bl	80002ec <__adddf3>
 800d2bc:	4682      	mov	sl, r0
 800d2be:	468b      	mov	fp, r1
 800d2c0:	e78f      	b.n	800d1e2 <_strtod_l+0xac2>
 800d2c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d2c6:	e7dd      	b.n	800d284 <_strtod_l+0xb64>
 800d2c8:	a311      	add	r3, pc, #68	; (adr r3, 800d310 <_strtod_l+0xbf0>)
 800d2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ce:	f7f3 fc35 	bl	8000b3c <__aeabi_dcmplt>
 800d2d2:	e7b4      	b.n	800d23e <_strtod_l+0xb1e>
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	930e      	str	r3, [sp, #56]	; 0x38
 800d2d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d2da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d2dc:	6013      	str	r3, [r2, #0]
 800d2de:	f7ff ba65 	b.w	800c7ac <_strtod_l+0x8c>
 800d2e2:	2b65      	cmp	r3, #101	; 0x65
 800d2e4:	f43f ab5d 	beq.w	800c9a2 <_strtod_l+0x282>
 800d2e8:	2b45      	cmp	r3, #69	; 0x45
 800d2ea:	f43f ab5a 	beq.w	800c9a2 <_strtod_l+0x282>
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f7ff bb92 	b.w	800ca18 <_strtod_l+0x2f8>
 800d2f4:	f3af 8000 	nop.w
 800d2f8:	94a03595 	.word	0x94a03595
 800d2fc:	3fdfffff 	.word	0x3fdfffff
 800d300:	35afe535 	.word	0x35afe535
 800d304:	3fe00000 	.word	0x3fe00000
 800d308:	ffc00000 	.word	0xffc00000
 800d30c:	41dfffff 	.word	0x41dfffff
 800d310:	94a03595 	.word	0x94a03595
 800d314:	3fcfffff 	.word	0x3fcfffff
 800d318:	3ff00000 	.word	0x3ff00000
 800d31c:	7ff00000 	.word	0x7ff00000
 800d320:	7fe00000 	.word	0x7fe00000
 800d324:	7c9fffff 	.word	0x7c9fffff
 800d328:	3fe00000 	.word	0x3fe00000
 800d32c:	bff00000 	.word	0xbff00000
 800d330:	7fefffff 	.word	0x7fefffff

0800d334 <strtod>:
 800d334:	460a      	mov	r2, r1
 800d336:	4601      	mov	r1, r0
 800d338:	4802      	ldr	r0, [pc, #8]	; (800d344 <strtod+0x10>)
 800d33a:	4b03      	ldr	r3, [pc, #12]	; (800d348 <strtod+0x14>)
 800d33c:	6800      	ldr	r0, [r0, #0]
 800d33e:	f7ff b9ef 	b.w	800c720 <_strtod_l>
 800d342:	bf00      	nop
 800d344:	20000028 	.word	0x20000028
 800d348:	20000090 	.word	0x20000090

0800d34c <strtok>:
 800d34c:	4b16      	ldr	r3, [pc, #88]	; (800d3a8 <strtok+0x5c>)
 800d34e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d350:	681e      	ldr	r6, [r3, #0]
 800d352:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d354:	4605      	mov	r5, r0
 800d356:	b9fc      	cbnz	r4, 800d398 <strtok+0x4c>
 800d358:	2050      	movs	r0, #80	; 0x50
 800d35a:	9101      	str	r1, [sp, #4]
 800d35c:	f001 fe4c 	bl	800eff8 <malloc>
 800d360:	9901      	ldr	r1, [sp, #4]
 800d362:	65b0      	str	r0, [r6, #88]	; 0x58
 800d364:	4602      	mov	r2, r0
 800d366:	b920      	cbnz	r0, 800d372 <strtok+0x26>
 800d368:	4b10      	ldr	r3, [pc, #64]	; (800d3ac <strtok+0x60>)
 800d36a:	4811      	ldr	r0, [pc, #68]	; (800d3b0 <strtok+0x64>)
 800d36c:	2157      	movs	r1, #87	; 0x57
 800d36e:	f000 f997 	bl	800d6a0 <__assert_func>
 800d372:	e9c0 4400 	strd	r4, r4, [r0]
 800d376:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d37a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d37e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d382:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d386:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d38a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d38e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d392:	6184      	str	r4, [r0, #24]
 800d394:	7704      	strb	r4, [r0, #28]
 800d396:	6244      	str	r4, [r0, #36]	; 0x24
 800d398:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d39a:	2301      	movs	r3, #1
 800d39c:	4628      	mov	r0, r5
 800d39e:	b002      	add	sp, #8
 800d3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3a4:	f000 b806 	b.w	800d3b4 <__strtok_r>
 800d3a8:	20000028 	.word	0x20000028
 800d3ac:	08011d00 	.word	0x08011d00
 800d3b0:	08011d17 	.word	0x08011d17

0800d3b4 <__strtok_r>:
 800d3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3b6:	b908      	cbnz	r0, 800d3bc <__strtok_r+0x8>
 800d3b8:	6810      	ldr	r0, [r2, #0]
 800d3ba:	b188      	cbz	r0, 800d3e0 <__strtok_r+0x2c>
 800d3bc:	4604      	mov	r4, r0
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d3c4:	460f      	mov	r7, r1
 800d3c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d3ca:	b91e      	cbnz	r6, 800d3d4 <__strtok_r+0x20>
 800d3cc:	b965      	cbnz	r5, 800d3e8 <__strtok_r+0x34>
 800d3ce:	6015      	str	r5, [r2, #0]
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	e005      	b.n	800d3e0 <__strtok_r+0x2c>
 800d3d4:	42b5      	cmp	r5, r6
 800d3d6:	d1f6      	bne.n	800d3c6 <__strtok_r+0x12>
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1f0      	bne.n	800d3be <__strtok_r+0xa>
 800d3dc:	6014      	str	r4, [r2, #0]
 800d3de:	7003      	strb	r3, [r0, #0]
 800d3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e2:	461c      	mov	r4, r3
 800d3e4:	e00c      	b.n	800d400 <__strtok_r+0x4c>
 800d3e6:	b915      	cbnz	r5, 800d3ee <__strtok_r+0x3a>
 800d3e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d3ec:	460e      	mov	r6, r1
 800d3ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d3f2:	42ab      	cmp	r3, r5
 800d3f4:	d1f7      	bne.n	800d3e6 <__strtok_r+0x32>
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d0f3      	beq.n	800d3e2 <__strtok_r+0x2e>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d400:	6014      	str	r4, [r2, #0]
 800d402:	e7ed      	b.n	800d3e0 <__strtok_r+0x2c>

0800d404 <_strtol_l.isra.0>:
 800d404:	2b01      	cmp	r3, #1
 800d406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d40a:	d001      	beq.n	800d410 <_strtol_l.isra.0+0xc>
 800d40c:	2b24      	cmp	r3, #36	; 0x24
 800d40e:	d906      	bls.n	800d41e <_strtol_l.isra.0+0x1a>
 800d410:	f7fe fc0e 	bl	800bc30 <__errno>
 800d414:	2316      	movs	r3, #22
 800d416:	6003      	str	r3, [r0, #0]
 800d418:	2000      	movs	r0, #0
 800d41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d41e:	4f3a      	ldr	r7, [pc, #232]	; (800d508 <_strtol_l.isra.0+0x104>)
 800d420:	468e      	mov	lr, r1
 800d422:	4676      	mov	r6, lr
 800d424:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d428:	5de5      	ldrb	r5, [r4, r7]
 800d42a:	f015 0508 	ands.w	r5, r5, #8
 800d42e:	d1f8      	bne.n	800d422 <_strtol_l.isra.0+0x1e>
 800d430:	2c2d      	cmp	r4, #45	; 0x2d
 800d432:	d134      	bne.n	800d49e <_strtol_l.isra.0+0x9a>
 800d434:	f89e 4000 	ldrb.w	r4, [lr]
 800d438:	f04f 0801 	mov.w	r8, #1
 800d43c:	f106 0e02 	add.w	lr, r6, #2
 800d440:	2b00      	cmp	r3, #0
 800d442:	d05c      	beq.n	800d4fe <_strtol_l.isra.0+0xfa>
 800d444:	2b10      	cmp	r3, #16
 800d446:	d10c      	bne.n	800d462 <_strtol_l.isra.0+0x5e>
 800d448:	2c30      	cmp	r4, #48	; 0x30
 800d44a:	d10a      	bne.n	800d462 <_strtol_l.isra.0+0x5e>
 800d44c:	f89e 4000 	ldrb.w	r4, [lr]
 800d450:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d454:	2c58      	cmp	r4, #88	; 0x58
 800d456:	d14d      	bne.n	800d4f4 <_strtol_l.isra.0+0xf0>
 800d458:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d45c:	2310      	movs	r3, #16
 800d45e:	f10e 0e02 	add.w	lr, lr, #2
 800d462:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d466:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d46a:	2600      	movs	r6, #0
 800d46c:	fbbc f9f3 	udiv	r9, ip, r3
 800d470:	4635      	mov	r5, r6
 800d472:	fb03 ca19 	mls	sl, r3, r9, ip
 800d476:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d47a:	2f09      	cmp	r7, #9
 800d47c:	d818      	bhi.n	800d4b0 <_strtol_l.isra.0+0xac>
 800d47e:	463c      	mov	r4, r7
 800d480:	42a3      	cmp	r3, r4
 800d482:	dd24      	ble.n	800d4ce <_strtol_l.isra.0+0xca>
 800d484:	2e00      	cmp	r6, #0
 800d486:	db1f      	blt.n	800d4c8 <_strtol_l.isra.0+0xc4>
 800d488:	45a9      	cmp	r9, r5
 800d48a:	d31d      	bcc.n	800d4c8 <_strtol_l.isra.0+0xc4>
 800d48c:	d101      	bne.n	800d492 <_strtol_l.isra.0+0x8e>
 800d48e:	45a2      	cmp	sl, r4
 800d490:	db1a      	blt.n	800d4c8 <_strtol_l.isra.0+0xc4>
 800d492:	fb05 4503 	mla	r5, r5, r3, r4
 800d496:	2601      	movs	r6, #1
 800d498:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d49c:	e7eb      	b.n	800d476 <_strtol_l.isra.0+0x72>
 800d49e:	2c2b      	cmp	r4, #43	; 0x2b
 800d4a0:	bf08      	it	eq
 800d4a2:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d4a6:	46a8      	mov	r8, r5
 800d4a8:	bf08      	it	eq
 800d4aa:	f106 0e02 	addeq.w	lr, r6, #2
 800d4ae:	e7c7      	b.n	800d440 <_strtol_l.isra.0+0x3c>
 800d4b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d4b4:	2f19      	cmp	r7, #25
 800d4b6:	d801      	bhi.n	800d4bc <_strtol_l.isra.0+0xb8>
 800d4b8:	3c37      	subs	r4, #55	; 0x37
 800d4ba:	e7e1      	b.n	800d480 <_strtol_l.isra.0+0x7c>
 800d4bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d4c0:	2f19      	cmp	r7, #25
 800d4c2:	d804      	bhi.n	800d4ce <_strtol_l.isra.0+0xca>
 800d4c4:	3c57      	subs	r4, #87	; 0x57
 800d4c6:	e7db      	b.n	800d480 <_strtol_l.isra.0+0x7c>
 800d4c8:	f04f 36ff 	mov.w	r6, #4294967295
 800d4cc:	e7e4      	b.n	800d498 <_strtol_l.isra.0+0x94>
 800d4ce:	2e00      	cmp	r6, #0
 800d4d0:	da05      	bge.n	800d4de <_strtol_l.isra.0+0xda>
 800d4d2:	2322      	movs	r3, #34	; 0x22
 800d4d4:	6003      	str	r3, [r0, #0]
 800d4d6:	4665      	mov	r5, ip
 800d4d8:	b942      	cbnz	r2, 800d4ec <_strtol_l.isra.0+0xe8>
 800d4da:	4628      	mov	r0, r5
 800d4dc:	e79d      	b.n	800d41a <_strtol_l.isra.0+0x16>
 800d4de:	f1b8 0f00 	cmp.w	r8, #0
 800d4e2:	d000      	beq.n	800d4e6 <_strtol_l.isra.0+0xe2>
 800d4e4:	426d      	negs	r5, r5
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	d0f7      	beq.n	800d4da <_strtol_l.isra.0+0xd6>
 800d4ea:	b10e      	cbz	r6, 800d4f0 <_strtol_l.isra.0+0xec>
 800d4ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d4f0:	6011      	str	r1, [r2, #0]
 800d4f2:	e7f2      	b.n	800d4da <_strtol_l.isra.0+0xd6>
 800d4f4:	2430      	movs	r4, #48	; 0x30
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1b3      	bne.n	800d462 <_strtol_l.isra.0+0x5e>
 800d4fa:	2308      	movs	r3, #8
 800d4fc:	e7b1      	b.n	800d462 <_strtol_l.isra.0+0x5e>
 800d4fe:	2c30      	cmp	r4, #48	; 0x30
 800d500:	d0a4      	beq.n	800d44c <_strtol_l.isra.0+0x48>
 800d502:	230a      	movs	r3, #10
 800d504:	e7ad      	b.n	800d462 <_strtol_l.isra.0+0x5e>
 800d506:	bf00      	nop
 800d508:	08011db5 	.word	0x08011db5

0800d50c <strtol>:
 800d50c:	4613      	mov	r3, r2
 800d50e:	460a      	mov	r2, r1
 800d510:	4601      	mov	r1, r0
 800d512:	4802      	ldr	r0, [pc, #8]	; (800d51c <strtol+0x10>)
 800d514:	6800      	ldr	r0, [r0, #0]
 800d516:	f7ff bf75 	b.w	800d404 <_strtol_l.isra.0>
 800d51a:	bf00      	nop
 800d51c:	20000028 	.word	0x20000028

0800d520 <__swbuf_r>:
 800d520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d522:	460e      	mov	r6, r1
 800d524:	4614      	mov	r4, r2
 800d526:	4605      	mov	r5, r0
 800d528:	b118      	cbz	r0, 800d532 <__swbuf_r+0x12>
 800d52a:	6983      	ldr	r3, [r0, #24]
 800d52c:	b90b      	cbnz	r3, 800d532 <__swbuf_r+0x12>
 800d52e:	f001 f87b 	bl	800e628 <__sinit>
 800d532:	4b21      	ldr	r3, [pc, #132]	; (800d5b8 <__swbuf_r+0x98>)
 800d534:	429c      	cmp	r4, r3
 800d536:	d12b      	bne.n	800d590 <__swbuf_r+0x70>
 800d538:	686c      	ldr	r4, [r5, #4]
 800d53a:	69a3      	ldr	r3, [r4, #24]
 800d53c:	60a3      	str	r3, [r4, #8]
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	071a      	lsls	r2, r3, #28
 800d542:	d52f      	bpl.n	800d5a4 <__swbuf_r+0x84>
 800d544:	6923      	ldr	r3, [r4, #16]
 800d546:	b36b      	cbz	r3, 800d5a4 <__swbuf_r+0x84>
 800d548:	6923      	ldr	r3, [r4, #16]
 800d54a:	6820      	ldr	r0, [r4, #0]
 800d54c:	1ac0      	subs	r0, r0, r3
 800d54e:	6963      	ldr	r3, [r4, #20]
 800d550:	b2f6      	uxtb	r6, r6
 800d552:	4283      	cmp	r3, r0
 800d554:	4637      	mov	r7, r6
 800d556:	dc04      	bgt.n	800d562 <__swbuf_r+0x42>
 800d558:	4621      	mov	r1, r4
 800d55a:	4628      	mov	r0, r5
 800d55c:	f000 ffbe 	bl	800e4dc <_fflush_r>
 800d560:	bb30      	cbnz	r0, 800d5b0 <__swbuf_r+0x90>
 800d562:	68a3      	ldr	r3, [r4, #8]
 800d564:	3b01      	subs	r3, #1
 800d566:	60a3      	str	r3, [r4, #8]
 800d568:	6823      	ldr	r3, [r4, #0]
 800d56a:	1c5a      	adds	r2, r3, #1
 800d56c:	6022      	str	r2, [r4, #0]
 800d56e:	701e      	strb	r6, [r3, #0]
 800d570:	6963      	ldr	r3, [r4, #20]
 800d572:	3001      	adds	r0, #1
 800d574:	4283      	cmp	r3, r0
 800d576:	d004      	beq.n	800d582 <__swbuf_r+0x62>
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	07db      	lsls	r3, r3, #31
 800d57c:	d506      	bpl.n	800d58c <__swbuf_r+0x6c>
 800d57e:	2e0a      	cmp	r6, #10
 800d580:	d104      	bne.n	800d58c <__swbuf_r+0x6c>
 800d582:	4621      	mov	r1, r4
 800d584:	4628      	mov	r0, r5
 800d586:	f000 ffa9 	bl	800e4dc <_fflush_r>
 800d58a:	b988      	cbnz	r0, 800d5b0 <__swbuf_r+0x90>
 800d58c:	4638      	mov	r0, r7
 800d58e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d590:	4b0a      	ldr	r3, [pc, #40]	; (800d5bc <__swbuf_r+0x9c>)
 800d592:	429c      	cmp	r4, r3
 800d594:	d101      	bne.n	800d59a <__swbuf_r+0x7a>
 800d596:	68ac      	ldr	r4, [r5, #8]
 800d598:	e7cf      	b.n	800d53a <__swbuf_r+0x1a>
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <__swbuf_r+0xa0>)
 800d59c:	429c      	cmp	r4, r3
 800d59e:	bf08      	it	eq
 800d5a0:	68ec      	ldreq	r4, [r5, #12]
 800d5a2:	e7ca      	b.n	800d53a <__swbuf_r+0x1a>
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	f000 f80c 	bl	800d5c4 <__swsetup_r>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	d0cb      	beq.n	800d548 <__swbuf_r+0x28>
 800d5b0:	f04f 37ff 	mov.w	r7, #4294967295
 800d5b4:	e7ea      	b.n	800d58c <__swbuf_r+0x6c>
 800d5b6:	bf00      	nop
 800d5b8:	08011f54 	.word	0x08011f54
 800d5bc:	08011f74 	.word	0x08011f74
 800d5c0:	08011f34 	.word	0x08011f34

0800d5c4 <__swsetup_r>:
 800d5c4:	4b32      	ldr	r3, [pc, #200]	; (800d690 <__swsetup_r+0xcc>)
 800d5c6:	b570      	push	{r4, r5, r6, lr}
 800d5c8:	681d      	ldr	r5, [r3, #0]
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	b125      	cbz	r5, 800d5da <__swsetup_r+0x16>
 800d5d0:	69ab      	ldr	r3, [r5, #24]
 800d5d2:	b913      	cbnz	r3, 800d5da <__swsetup_r+0x16>
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f001 f827 	bl	800e628 <__sinit>
 800d5da:	4b2e      	ldr	r3, [pc, #184]	; (800d694 <__swsetup_r+0xd0>)
 800d5dc:	429c      	cmp	r4, r3
 800d5de:	d10f      	bne.n	800d600 <__swsetup_r+0x3c>
 800d5e0:	686c      	ldr	r4, [r5, #4]
 800d5e2:	89a3      	ldrh	r3, [r4, #12]
 800d5e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5e8:	0719      	lsls	r1, r3, #28
 800d5ea:	d42c      	bmi.n	800d646 <__swsetup_r+0x82>
 800d5ec:	06dd      	lsls	r5, r3, #27
 800d5ee:	d411      	bmi.n	800d614 <__swsetup_r+0x50>
 800d5f0:	2309      	movs	r3, #9
 800d5f2:	6033      	str	r3, [r6, #0]
 800d5f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5f8:	81a3      	strh	r3, [r4, #12]
 800d5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d5fe:	e03e      	b.n	800d67e <__swsetup_r+0xba>
 800d600:	4b25      	ldr	r3, [pc, #148]	; (800d698 <__swsetup_r+0xd4>)
 800d602:	429c      	cmp	r4, r3
 800d604:	d101      	bne.n	800d60a <__swsetup_r+0x46>
 800d606:	68ac      	ldr	r4, [r5, #8]
 800d608:	e7eb      	b.n	800d5e2 <__swsetup_r+0x1e>
 800d60a:	4b24      	ldr	r3, [pc, #144]	; (800d69c <__swsetup_r+0xd8>)
 800d60c:	429c      	cmp	r4, r3
 800d60e:	bf08      	it	eq
 800d610:	68ec      	ldreq	r4, [r5, #12]
 800d612:	e7e6      	b.n	800d5e2 <__swsetup_r+0x1e>
 800d614:	0758      	lsls	r0, r3, #29
 800d616:	d512      	bpl.n	800d63e <__swsetup_r+0x7a>
 800d618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d61a:	b141      	cbz	r1, 800d62e <__swsetup_r+0x6a>
 800d61c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d620:	4299      	cmp	r1, r3
 800d622:	d002      	beq.n	800d62a <__swsetup_r+0x66>
 800d624:	4630      	mov	r0, r6
 800d626:	f002 f9d9 	bl	800f9dc <_free_r>
 800d62a:	2300      	movs	r3, #0
 800d62c:	6363      	str	r3, [r4, #52]	; 0x34
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d634:	81a3      	strh	r3, [r4, #12]
 800d636:	2300      	movs	r3, #0
 800d638:	6063      	str	r3, [r4, #4]
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	6023      	str	r3, [r4, #0]
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	f043 0308 	orr.w	r3, r3, #8
 800d644:	81a3      	strh	r3, [r4, #12]
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	b94b      	cbnz	r3, 800d65e <__swsetup_r+0x9a>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d654:	d003      	beq.n	800d65e <__swsetup_r+0x9a>
 800d656:	4621      	mov	r1, r4
 800d658:	4630      	mov	r0, r6
 800d65a:	f001 fc8d 	bl	800ef78 <__smakebuf_r>
 800d65e:	89a0      	ldrh	r0, [r4, #12]
 800d660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d664:	f010 0301 	ands.w	r3, r0, #1
 800d668:	d00a      	beq.n	800d680 <__swsetup_r+0xbc>
 800d66a:	2300      	movs	r3, #0
 800d66c:	60a3      	str	r3, [r4, #8]
 800d66e:	6963      	ldr	r3, [r4, #20]
 800d670:	425b      	negs	r3, r3
 800d672:	61a3      	str	r3, [r4, #24]
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	b943      	cbnz	r3, 800d68a <__swsetup_r+0xc6>
 800d678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d67c:	d1ba      	bne.n	800d5f4 <__swsetup_r+0x30>
 800d67e:	bd70      	pop	{r4, r5, r6, pc}
 800d680:	0781      	lsls	r1, r0, #30
 800d682:	bf58      	it	pl
 800d684:	6963      	ldrpl	r3, [r4, #20]
 800d686:	60a3      	str	r3, [r4, #8]
 800d688:	e7f4      	b.n	800d674 <__swsetup_r+0xb0>
 800d68a:	2000      	movs	r0, #0
 800d68c:	e7f7      	b.n	800d67e <__swsetup_r+0xba>
 800d68e:	bf00      	nop
 800d690:	20000028 	.word	0x20000028
 800d694:	08011f54 	.word	0x08011f54
 800d698:	08011f74 	.word	0x08011f74
 800d69c:	08011f34 	.word	0x08011f34

0800d6a0 <__assert_func>:
 800d6a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6a2:	4614      	mov	r4, r2
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <__assert_func+0x2c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	68d8      	ldr	r0, [r3, #12]
 800d6ae:	b14c      	cbz	r4, 800d6c4 <__assert_func+0x24>
 800d6b0:	4b07      	ldr	r3, [pc, #28]	; (800d6d0 <__assert_func+0x30>)
 800d6b2:	9100      	str	r1, [sp, #0]
 800d6b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6b8:	4906      	ldr	r1, [pc, #24]	; (800d6d4 <__assert_func+0x34>)
 800d6ba:	462b      	mov	r3, r5
 800d6bc:	f001 f832 	bl	800e724 <fiprintf>
 800d6c0:	f002 fc92 	bl	800ffe8 <abort>
 800d6c4:	4b04      	ldr	r3, [pc, #16]	; (800d6d8 <__assert_func+0x38>)
 800d6c6:	461c      	mov	r4, r3
 800d6c8:	e7f3      	b.n	800d6b2 <__assert_func+0x12>
 800d6ca:	bf00      	nop
 800d6cc:	20000028 	.word	0x20000028
 800d6d0:	08011d78 	.word	0x08011d78
 800d6d4:	08011d85 	.word	0x08011d85
 800d6d8:	08011db3 	.word	0x08011db3

0800d6dc <quorem>:
 800d6dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e0:	6903      	ldr	r3, [r0, #16]
 800d6e2:	690c      	ldr	r4, [r1, #16]
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	4607      	mov	r7, r0
 800d6e8:	f2c0 8081 	blt.w	800d7ee <quorem+0x112>
 800d6ec:	3c01      	subs	r4, #1
 800d6ee:	f101 0814 	add.w	r8, r1, #20
 800d6f2:	f100 0514 	add.w	r5, r0, #20
 800d6f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d700:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d704:	3301      	adds	r3, #1
 800d706:	429a      	cmp	r2, r3
 800d708:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d70c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d710:	fbb2 f6f3 	udiv	r6, r2, r3
 800d714:	d331      	bcc.n	800d77a <quorem+0x9e>
 800d716:	f04f 0e00 	mov.w	lr, #0
 800d71a:	4640      	mov	r0, r8
 800d71c:	46ac      	mov	ip, r5
 800d71e:	46f2      	mov	sl, lr
 800d720:	f850 2b04 	ldr.w	r2, [r0], #4
 800d724:	b293      	uxth	r3, r2
 800d726:	fb06 e303 	mla	r3, r6, r3, lr
 800d72a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d72e:	b29b      	uxth	r3, r3
 800d730:	ebaa 0303 	sub.w	r3, sl, r3
 800d734:	0c12      	lsrs	r2, r2, #16
 800d736:	f8dc a000 	ldr.w	sl, [ip]
 800d73a:	fb06 e202 	mla	r2, r6, r2, lr
 800d73e:	fa13 f38a 	uxtah	r3, r3, sl
 800d742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d746:	fa1f fa82 	uxth.w	sl, r2
 800d74a:	f8dc 2000 	ldr.w	r2, [ip]
 800d74e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d752:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d756:	b29b      	uxth	r3, r3
 800d758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d75c:	4581      	cmp	r9, r0
 800d75e:	f84c 3b04 	str.w	r3, [ip], #4
 800d762:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d766:	d2db      	bcs.n	800d720 <quorem+0x44>
 800d768:	f855 300b 	ldr.w	r3, [r5, fp]
 800d76c:	b92b      	cbnz	r3, 800d77a <quorem+0x9e>
 800d76e:	9b01      	ldr	r3, [sp, #4]
 800d770:	3b04      	subs	r3, #4
 800d772:	429d      	cmp	r5, r3
 800d774:	461a      	mov	r2, r3
 800d776:	d32e      	bcc.n	800d7d6 <quorem+0xfa>
 800d778:	613c      	str	r4, [r7, #16]
 800d77a:	4638      	mov	r0, r7
 800d77c:	f001 ff2c 	bl	800f5d8 <__mcmp>
 800d780:	2800      	cmp	r0, #0
 800d782:	db24      	blt.n	800d7ce <quorem+0xf2>
 800d784:	3601      	adds	r6, #1
 800d786:	4628      	mov	r0, r5
 800d788:	f04f 0c00 	mov.w	ip, #0
 800d78c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d790:	f8d0 e000 	ldr.w	lr, [r0]
 800d794:	b293      	uxth	r3, r2
 800d796:	ebac 0303 	sub.w	r3, ip, r3
 800d79a:	0c12      	lsrs	r2, r2, #16
 800d79c:	fa13 f38e 	uxtah	r3, r3, lr
 800d7a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d7a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7ae:	45c1      	cmp	r9, r8
 800d7b0:	f840 3b04 	str.w	r3, [r0], #4
 800d7b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d7b8:	d2e8      	bcs.n	800d78c <quorem+0xb0>
 800d7ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7c2:	b922      	cbnz	r2, 800d7ce <quorem+0xf2>
 800d7c4:	3b04      	subs	r3, #4
 800d7c6:	429d      	cmp	r5, r3
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	d30a      	bcc.n	800d7e2 <quorem+0x106>
 800d7cc:	613c      	str	r4, [r7, #16]
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	b003      	add	sp, #12
 800d7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d6:	6812      	ldr	r2, [r2, #0]
 800d7d8:	3b04      	subs	r3, #4
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	d1cc      	bne.n	800d778 <quorem+0x9c>
 800d7de:	3c01      	subs	r4, #1
 800d7e0:	e7c7      	b.n	800d772 <quorem+0x96>
 800d7e2:	6812      	ldr	r2, [r2, #0]
 800d7e4:	3b04      	subs	r3, #4
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	d1f0      	bne.n	800d7cc <quorem+0xf0>
 800d7ea:	3c01      	subs	r4, #1
 800d7ec:	e7eb      	b.n	800d7c6 <quorem+0xea>
 800d7ee:	2000      	movs	r0, #0
 800d7f0:	e7ee      	b.n	800d7d0 <quorem+0xf4>
 800d7f2:	0000      	movs	r0, r0
 800d7f4:	0000      	movs	r0, r0
	...

0800d7f8 <_dtoa_r>:
 800d7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fc:	ed2d 8b02 	vpush	{d8}
 800d800:	ec57 6b10 	vmov	r6, r7, d0
 800d804:	b095      	sub	sp, #84	; 0x54
 800d806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d80c:	9105      	str	r1, [sp, #20]
 800d80e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d812:	4604      	mov	r4, r0
 800d814:	9209      	str	r2, [sp, #36]	; 0x24
 800d816:	930f      	str	r3, [sp, #60]	; 0x3c
 800d818:	b975      	cbnz	r5, 800d838 <_dtoa_r+0x40>
 800d81a:	2010      	movs	r0, #16
 800d81c:	f001 fbec 	bl	800eff8 <malloc>
 800d820:	4602      	mov	r2, r0
 800d822:	6260      	str	r0, [r4, #36]	; 0x24
 800d824:	b920      	cbnz	r0, 800d830 <_dtoa_r+0x38>
 800d826:	4bb2      	ldr	r3, [pc, #712]	; (800daf0 <_dtoa_r+0x2f8>)
 800d828:	21ea      	movs	r1, #234	; 0xea
 800d82a:	48b2      	ldr	r0, [pc, #712]	; (800daf4 <_dtoa_r+0x2fc>)
 800d82c:	f7ff ff38 	bl	800d6a0 <__assert_func>
 800d830:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d834:	6005      	str	r5, [r0, #0]
 800d836:	60c5      	str	r5, [r0, #12]
 800d838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d83a:	6819      	ldr	r1, [r3, #0]
 800d83c:	b151      	cbz	r1, 800d854 <_dtoa_r+0x5c>
 800d83e:	685a      	ldr	r2, [r3, #4]
 800d840:	604a      	str	r2, [r1, #4]
 800d842:	2301      	movs	r3, #1
 800d844:	4093      	lsls	r3, r2
 800d846:	608b      	str	r3, [r1, #8]
 800d848:	4620      	mov	r0, r4
 800d84a:	f001 fc3d 	bl	800f0c8 <_Bfree>
 800d84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d850:	2200      	movs	r2, #0
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	1e3b      	subs	r3, r7, #0
 800d856:	bfb9      	ittee	lt
 800d858:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d85c:	9303      	strlt	r3, [sp, #12]
 800d85e:	2300      	movge	r3, #0
 800d860:	f8c8 3000 	strge.w	r3, [r8]
 800d864:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d868:	4ba3      	ldr	r3, [pc, #652]	; (800daf8 <_dtoa_r+0x300>)
 800d86a:	bfbc      	itt	lt
 800d86c:	2201      	movlt	r2, #1
 800d86e:	f8c8 2000 	strlt.w	r2, [r8]
 800d872:	ea33 0309 	bics.w	r3, r3, r9
 800d876:	d11b      	bne.n	800d8b0 <_dtoa_r+0xb8>
 800d878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d87a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d884:	4333      	orrs	r3, r6
 800d886:	f000 857a 	beq.w	800e37e <_dtoa_r+0xb86>
 800d88a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d88c:	b963      	cbnz	r3, 800d8a8 <_dtoa_r+0xb0>
 800d88e:	4b9b      	ldr	r3, [pc, #620]	; (800dafc <_dtoa_r+0x304>)
 800d890:	e024      	b.n	800d8dc <_dtoa_r+0xe4>
 800d892:	4b9b      	ldr	r3, [pc, #620]	; (800db00 <_dtoa_r+0x308>)
 800d894:	9300      	str	r3, [sp, #0]
 800d896:	3308      	adds	r3, #8
 800d898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d89a:	6013      	str	r3, [r2, #0]
 800d89c:	9800      	ldr	r0, [sp, #0]
 800d89e:	b015      	add	sp, #84	; 0x54
 800d8a0:	ecbd 8b02 	vpop	{d8}
 800d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a8:	4b94      	ldr	r3, [pc, #592]	; (800dafc <_dtoa_r+0x304>)
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	3303      	adds	r3, #3
 800d8ae:	e7f3      	b.n	800d898 <_dtoa_r+0xa0>
 800d8b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	ec51 0b17 	vmov	r0, r1, d7
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d8c0:	f7f3 f932 	bl	8000b28 <__aeabi_dcmpeq>
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	b158      	cbz	r0, 800d8e0 <_dtoa_r+0xe8>
 800d8c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	6013      	str	r3, [r2, #0]
 800d8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 8551 	beq.w	800e378 <_dtoa_r+0xb80>
 800d8d6:	488b      	ldr	r0, [pc, #556]	; (800db04 <_dtoa_r+0x30c>)
 800d8d8:	6018      	str	r0, [r3, #0]
 800d8da:	1e43      	subs	r3, r0, #1
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	e7dd      	b.n	800d89c <_dtoa_r+0xa4>
 800d8e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d8e4:	aa12      	add	r2, sp, #72	; 0x48
 800d8e6:	a913      	add	r1, sp, #76	; 0x4c
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	f001 ff95 	bl	800f818 <__d2b>
 800d8ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8f2:	4683      	mov	fp, r0
 800d8f4:	2d00      	cmp	r5, #0
 800d8f6:	d07c      	beq.n	800d9f2 <_dtoa_r+0x1fa>
 800d8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d8fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d902:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d906:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d90a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d90e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d912:	4b7d      	ldr	r3, [pc, #500]	; (800db08 <_dtoa_r+0x310>)
 800d914:	2200      	movs	r2, #0
 800d916:	4630      	mov	r0, r6
 800d918:	4639      	mov	r1, r7
 800d91a:	f7f2 fce5 	bl	80002e8 <__aeabi_dsub>
 800d91e:	a36e      	add	r3, pc, #440	; (adr r3, 800dad8 <_dtoa_r+0x2e0>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fe98 	bl	8000658 <__aeabi_dmul>
 800d928:	a36d      	add	r3, pc, #436	; (adr r3, 800dae0 <_dtoa_r+0x2e8>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fcdd 	bl	80002ec <__adddf3>
 800d932:	4606      	mov	r6, r0
 800d934:	4628      	mov	r0, r5
 800d936:	460f      	mov	r7, r1
 800d938:	f7f2 fe24 	bl	8000584 <__aeabi_i2d>
 800d93c:	a36a      	add	r3, pc, #424	; (adr r3, 800dae8 <_dtoa_r+0x2f0>)
 800d93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d942:	f7f2 fe89 	bl	8000658 <__aeabi_dmul>
 800d946:	4602      	mov	r2, r0
 800d948:	460b      	mov	r3, r1
 800d94a:	4630      	mov	r0, r6
 800d94c:	4639      	mov	r1, r7
 800d94e:	f7f2 fccd 	bl	80002ec <__adddf3>
 800d952:	4606      	mov	r6, r0
 800d954:	460f      	mov	r7, r1
 800d956:	f7f3 f92f 	bl	8000bb8 <__aeabi_d2iz>
 800d95a:	2200      	movs	r2, #0
 800d95c:	4682      	mov	sl, r0
 800d95e:	2300      	movs	r3, #0
 800d960:	4630      	mov	r0, r6
 800d962:	4639      	mov	r1, r7
 800d964:	f7f3 f8ea 	bl	8000b3c <__aeabi_dcmplt>
 800d968:	b148      	cbz	r0, 800d97e <_dtoa_r+0x186>
 800d96a:	4650      	mov	r0, sl
 800d96c:	f7f2 fe0a 	bl	8000584 <__aeabi_i2d>
 800d970:	4632      	mov	r2, r6
 800d972:	463b      	mov	r3, r7
 800d974:	f7f3 f8d8 	bl	8000b28 <__aeabi_dcmpeq>
 800d978:	b908      	cbnz	r0, 800d97e <_dtoa_r+0x186>
 800d97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d97e:	f1ba 0f16 	cmp.w	sl, #22
 800d982:	d854      	bhi.n	800da2e <_dtoa_r+0x236>
 800d984:	4b61      	ldr	r3, [pc, #388]	; (800db0c <_dtoa_r+0x314>)
 800d986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d992:	f7f3 f8d3 	bl	8000b3c <__aeabi_dcmplt>
 800d996:	2800      	cmp	r0, #0
 800d998:	d04b      	beq.n	800da32 <_dtoa_r+0x23a>
 800d99a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d99e:	2300      	movs	r3, #0
 800d9a0:	930e      	str	r3, [sp, #56]	; 0x38
 800d9a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9a4:	1b5d      	subs	r5, r3, r5
 800d9a6:	1e6b      	subs	r3, r5, #1
 800d9a8:	9304      	str	r3, [sp, #16]
 800d9aa:	bf43      	ittte	mi
 800d9ac:	2300      	movmi	r3, #0
 800d9ae:	f1c5 0801 	rsbmi	r8, r5, #1
 800d9b2:	9304      	strmi	r3, [sp, #16]
 800d9b4:	f04f 0800 	movpl.w	r8, #0
 800d9b8:	f1ba 0f00 	cmp.w	sl, #0
 800d9bc:	db3b      	blt.n	800da36 <_dtoa_r+0x23e>
 800d9be:	9b04      	ldr	r3, [sp, #16]
 800d9c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d9c4:	4453      	add	r3, sl
 800d9c6:	9304      	str	r3, [sp, #16]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9306      	str	r3, [sp, #24]
 800d9cc:	9b05      	ldr	r3, [sp, #20]
 800d9ce:	2b09      	cmp	r3, #9
 800d9d0:	d869      	bhi.n	800daa6 <_dtoa_r+0x2ae>
 800d9d2:	2b05      	cmp	r3, #5
 800d9d4:	bfc4      	itt	gt
 800d9d6:	3b04      	subgt	r3, #4
 800d9d8:	9305      	strgt	r3, [sp, #20]
 800d9da:	9b05      	ldr	r3, [sp, #20]
 800d9dc:	f1a3 0302 	sub.w	r3, r3, #2
 800d9e0:	bfcc      	ite	gt
 800d9e2:	2500      	movgt	r5, #0
 800d9e4:	2501      	movle	r5, #1
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d869      	bhi.n	800dabe <_dtoa_r+0x2c6>
 800d9ea:	e8df f003 	tbb	[pc, r3]
 800d9ee:	4e2c      	.short	0x4e2c
 800d9f0:	5a4c      	.short	0x5a4c
 800d9f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d9f6:	441d      	add	r5, r3
 800d9f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d9fc:	2b20      	cmp	r3, #32
 800d9fe:	bfc1      	itttt	gt
 800da00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da04:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800da08:	fa09 f303 	lslgt.w	r3, r9, r3
 800da0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800da10:	bfda      	itte	le
 800da12:	f1c3 0320 	rsble	r3, r3, #32
 800da16:	fa06 f003 	lslle.w	r0, r6, r3
 800da1a:	4318      	orrgt	r0, r3
 800da1c:	f7f2 fda2 	bl	8000564 <__aeabi_ui2d>
 800da20:	2301      	movs	r3, #1
 800da22:	4606      	mov	r6, r0
 800da24:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800da28:	3d01      	subs	r5, #1
 800da2a:	9310      	str	r3, [sp, #64]	; 0x40
 800da2c:	e771      	b.n	800d912 <_dtoa_r+0x11a>
 800da2e:	2301      	movs	r3, #1
 800da30:	e7b6      	b.n	800d9a0 <_dtoa_r+0x1a8>
 800da32:	900e      	str	r0, [sp, #56]	; 0x38
 800da34:	e7b5      	b.n	800d9a2 <_dtoa_r+0x1aa>
 800da36:	f1ca 0300 	rsb	r3, sl, #0
 800da3a:	9306      	str	r3, [sp, #24]
 800da3c:	2300      	movs	r3, #0
 800da3e:	eba8 080a 	sub.w	r8, r8, sl
 800da42:	930d      	str	r3, [sp, #52]	; 0x34
 800da44:	e7c2      	b.n	800d9cc <_dtoa_r+0x1d4>
 800da46:	2300      	movs	r3, #0
 800da48:	9308      	str	r3, [sp, #32]
 800da4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dc39      	bgt.n	800dac4 <_dtoa_r+0x2cc>
 800da50:	f04f 0901 	mov.w	r9, #1
 800da54:	f8cd 9004 	str.w	r9, [sp, #4]
 800da58:	464b      	mov	r3, r9
 800da5a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800da5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da60:	2200      	movs	r2, #0
 800da62:	6042      	str	r2, [r0, #4]
 800da64:	2204      	movs	r2, #4
 800da66:	f102 0614 	add.w	r6, r2, #20
 800da6a:	429e      	cmp	r6, r3
 800da6c:	6841      	ldr	r1, [r0, #4]
 800da6e:	d92f      	bls.n	800dad0 <_dtoa_r+0x2d8>
 800da70:	4620      	mov	r0, r4
 800da72:	f001 fae9 	bl	800f048 <_Balloc>
 800da76:	9000      	str	r0, [sp, #0]
 800da78:	2800      	cmp	r0, #0
 800da7a:	d14b      	bne.n	800db14 <_dtoa_r+0x31c>
 800da7c:	4b24      	ldr	r3, [pc, #144]	; (800db10 <_dtoa_r+0x318>)
 800da7e:	4602      	mov	r2, r0
 800da80:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da84:	e6d1      	b.n	800d82a <_dtoa_r+0x32>
 800da86:	2301      	movs	r3, #1
 800da88:	e7de      	b.n	800da48 <_dtoa_r+0x250>
 800da8a:	2300      	movs	r3, #0
 800da8c:	9308      	str	r3, [sp, #32]
 800da8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da90:	eb0a 0903 	add.w	r9, sl, r3
 800da94:	f109 0301 	add.w	r3, r9, #1
 800da98:	2b01      	cmp	r3, #1
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	bfb8      	it	lt
 800da9e:	2301      	movlt	r3, #1
 800daa0:	e7dd      	b.n	800da5e <_dtoa_r+0x266>
 800daa2:	2301      	movs	r3, #1
 800daa4:	e7f2      	b.n	800da8c <_dtoa_r+0x294>
 800daa6:	2501      	movs	r5, #1
 800daa8:	2300      	movs	r3, #0
 800daaa:	9305      	str	r3, [sp, #20]
 800daac:	9508      	str	r5, [sp, #32]
 800daae:	f04f 39ff 	mov.w	r9, #4294967295
 800dab2:	2200      	movs	r2, #0
 800dab4:	f8cd 9004 	str.w	r9, [sp, #4]
 800dab8:	2312      	movs	r3, #18
 800daba:	9209      	str	r2, [sp, #36]	; 0x24
 800dabc:	e7cf      	b.n	800da5e <_dtoa_r+0x266>
 800dabe:	2301      	movs	r3, #1
 800dac0:	9308      	str	r3, [sp, #32]
 800dac2:	e7f4      	b.n	800daae <_dtoa_r+0x2b6>
 800dac4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dac8:	f8cd 9004 	str.w	r9, [sp, #4]
 800dacc:	464b      	mov	r3, r9
 800dace:	e7c6      	b.n	800da5e <_dtoa_r+0x266>
 800dad0:	3101      	adds	r1, #1
 800dad2:	6041      	str	r1, [r0, #4]
 800dad4:	0052      	lsls	r2, r2, #1
 800dad6:	e7c6      	b.n	800da66 <_dtoa_r+0x26e>
 800dad8:	636f4361 	.word	0x636f4361
 800dadc:	3fd287a7 	.word	0x3fd287a7
 800dae0:	8b60c8b3 	.word	0x8b60c8b3
 800dae4:	3fc68a28 	.word	0x3fc68a28
 800dae8:	509f79fb 	.word	0x509f79fb
 800daec:	3fd34413 	.word	0x3fd34413
 800daf0:	08011d00 	.word	0x08011d00
 800daf4:	08011ec2 	.word	0x08011ec2
 800daf8:	7ff00000 	.word	0x7ff00000
 800dafc:	08011ebe 	.word	0x08011ebe
 800db00:	08011eb5 	.word	0x08011eb5
 800db04:	08011c8d 	.word	0x08011c8d
 800db08:	3ff80000 	.word	0x3ff80000
 800db0c:	080120a0 	.word	0x080120a0
 800db10:	08011f21 	.word	0x08011f21
 800db14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db16:	9a00      	ldr	r2, [sp, #0]
 800db18:	601a      	str	r2, [r3, #0]
 800db1a:	9b01      	ldr	r3, [sp, #4]
 800db1c:	2b0e      	cmp	r3, #14
 800db1e:	f200 80ad 	bhi.w	800dc7c <_dtoa_r+0x484>
 800db22:	2d00      	cmp	r5, #0
 800db24:	f000 80aa 	beq.w	800dc7c <_dtoa_r+0x484>
 800db28:	f1ba 0f00 	cmp.w	sl, #0
 800db2c:	dd36      	ble.n	800db9c <_dtoa_r+0x3a4>
 800db2e:	4ac3      	ldr	r2, [pc, #780]	; (800de3c <_dtoa_r+0x644>)
 800db30:	f00a 030f 	and.w	r3, sl, #15
 800db34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db38:	ed93 7b00 	vldr	d7, [r3]
 800db3c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800db40:	ea4f 172a 	mov.w	r7, sl, asr #4
 800db44:	eeb0 8a47 	vmov.f32	s16, s14
 800db48:	eef0 8a67 	vmov.f32	s17, s15
 800db4c:	d016      	beq.n	800db7c <_dtoa_r+0x384>
 800db4e:	4bbc      	ldr	r3, [pc, #752]	; (800de40 <_dtoa_r+0x648>)
 800db50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db58:	f7f2 fea8 	bl	80008ac <__aeabi_ddiv>
 800db5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db60:	f007 070f 	and.w	r7, r7, #15
 800db64:	2503      	movs	r5, #3
 800db66:	4eb6      	ldr	r6, [pc, #728]	; (800de40 <_dtoa_r+0x648>)
 800db68:	b957      	cbnz	r7, 800db80 <_dtoa_r+0x388>
 800db6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db6e:	ec53 2b18 	vmov	r2, r3, d8
 800db72:	f7f2 fe9b 	bl	80008ac <__aeabi_ddiv>
 800db76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db7a:	e029      	b.n	800dbd0 <_dtoa_r+0x3d8>
 800db7c:	2502      	movs	r5, #2
 800db7e:	e7f2      	b.n	800db66 <_dtoa_r+0x36e>
 800db80:	07f9      	lsls	r1, r7, #31
 800db82:	d508      	bpl.n	800db96 <_dtoa_r+0x39e>
 800db84:	ec51 0b18 	vmov	r0, r1, d8
 800db88:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db8c:	f7f2 fd64 	bl	8000658 <__aeabi_dmul>
 800db90:	ec41 0b18 	vmov	d8, r0, r1
 800db94:	3501      	adds	r5, #1
 800db96:	107f      	asrs	r7, r7, #1
 800db98:	3608      	adds	r6, #8
 800db9a:	e7e5      	b.n	800db68 <_dtoa_r+0x370>
 800db9c:	f000 80a6 	beq.w	800dcec <_dtoa_r+0x4f4>
 800dba0:	f1ca 0600 	rsb	r6, sl, #0
 800dba4:	4ba5      	ldr	r3, [pc, #660]	; (800de3c <_dtoa_r+0x644>)
 800dba6:	4fa6      	ldr	r7, [pc, #664]	; (800de40 <_dtoa_r+0x648>)
 800dba8:	f006 020f 	and.w	r2, r6, #15
 800dbac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dbb8:	f7f2 fd4e 	bl	8000658 <__aeabi_dmul>
 800dbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbc0:	1136      	asrs	r6, r6, #4
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2502      	movs	r5, #2
 800dbc6:	2e00      	cmp	r6, #0
 800dbc8:	f040 8085 	bne.w	800dcd6 <_dtoa_r+0x4de>
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d1d2      	bne.n	800db76 <_dtoa_r+0x37e>
 800dbd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f000 808c 	beq.w	800dcf0 <_dtoa_r+0x4f8>
 800dbd8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbdc:	4b99      	ldr	r3, [pc, #612]	; (800de44 <_dtoa_r+0x64c>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7f2 ffaa 	bl	8000b3c <__aeabi_dcmplt>
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	f000 8081 	beq.w	800dcf0 <_dtoa_r+0x4f8>
 800dbee:	9b01      	ldr	r3, [sp, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d07d      	beq.n	800dcf0 <_dtoa_r+0x4f8>
 800dbf4:	f1b9 0f00 	cmp.w	r9, #0
 800dbf8:	dd3c      	ble.n	800dc74 <_dtoa_r+0x47c>
 800dbfa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dbfe:	9307      	str	r3, [sp, #28]
 800dc00:	2200      	movs	r2, #0
 800dc02:	4b91      	ldr	r3, [pc, #580]	; (800de48 <_dtoa_r+0x650>)
 800dc04:	4630      	mov	r0, r6
 800dc06:	4639      	mov	r1, r7
 800dc08:	f7f2 fd26 	bl	8000658 <__aeabi_dmul>
 800dc0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc10:	3501      	adds	r5, #1
 800dc12:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dc16:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	f7f2 fcb2 	bl	8000584 <__aeabi_i2d>
 800dc20:	4632      	mov	r2, r6
 800dc22:	463b      	mov	r3, r7
 800dc24:	f7f2 fd18 	bl	8000658 <__aeabi_dmul>
 800dc28:	4b88      	ldr	r3, [pc, #544]	; (800de4c <_dtoa_r+0x654>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f7f2 fb5e 	bl	80002ec <__adddf3>
 800dc30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc38:	9303      	str	r3, [sp, #12]
 800dc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d15c      	bne.n	800dcfa <_dtoa_r+0x502>
 800dc40:	4b83      	ldr	r3, [pc, #524]	; (800de50 <_dtoa_r+0x658>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	4630      	mov	r0, r6
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 fb4e 	bl	80002e8 <__aeabi_dsub>
 800dc4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc50:	4606      	mov	r6, r0
 800dc52:	460f      	mov	r7, r1
 800dc54:	f7f2 ff90 	bl	8000b78 <__aeabi_dcmpgt>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	f040 8296 	bne.w	800e18a <_dtoa_r+0x992>
 800dc5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dc62:	4630      	mov	r0, r6
 800dc64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc68:	4639      	mov	r1, r7
 800dc6a:	f7f2 ff67 	bl	8000b3c <__aeabi_dcmplt>
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	f040 8288 	bne.w	800e184 <_dtoa_r+0x98c>
 800dc74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dc78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f2c0 8158 	blt.w	800df34 <_dtoa_r+0x73c>
 800dc84:	f1ba 0f0e 	cmp.w	sl, #14
 800dc88:	f300 8154 	bgt.w	800df34 <_dtoa_r+0x73c>
 800dc8c:	4b6b      	ldr	r3, [pc, #428]	; (800de3c <_dtoa_r+0x644>)
 800dc8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc92:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	f280 80e3 	bge.w	800de64 <_dtoa_r+0x66c>
 800dc9e:	9b01      	ldr	r3, [sp, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f300 80df 	bgt.w	800de64 <_dtoa_r+0x66c>
 800dca6:	f040 826d 	bne.w	800e184 <_dtoa_r+0x98c>
 800dcaa:	4b69      	ldr	r3, [pc, #420]	; (800de50 <_dtoa_r+0x658>)
 800dcac:	2200      	movs	r2, #0
 800dcae:	4640      	mov	r0, r8
 800dcb0:	4649      	mov	r1, r9
 800dcb2:	f7f2 fcd1 	bl	8000658 <__aeabi_dmul>
 800dcb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcba:	f7f2 ff53 	bl	8000b64 <__aeabi_dcmpge>
 800dcbe:	9e01      	ldr	r6, [sp, #4]
 800dcc0:	4637      	mov	r7, r6
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	f040 8243 	bne.w	800e14e <_dtoa_r+0x956>
 800dcc8:	9d00      	ldr	r5, [sp, #0]
 800dcca:	2331      	movs	r3, #49	; 0x31
 800dccc:	f805 3b01 	strb.w	r3, [r5], #1
 800dcd0:	f10a 0a01 	add.w	sl, sl, #1
 800dcd4:	e23f      	b.n	800e156 <_dtoa_r+0x95e>
 800dcd6:	07f2      	lsls	r2, r6, #31
 800dcd8:	d505      	bpl.n	800dce6 <_dtoa_r+0x4ee>
 800dcda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcde:	f7f2 fcbb 	bl	8000658 <__aeabi_dmul>
 800dce2:	3501      	adds	r5, #1
 800dce4:	2301      	movs	r3, #1
 800dce6:	1076      	asrs	r6, r6, #1
 800dce8:	3708      	adds	r7, #8
 800dcea:	e76c      	b.n	800dbc6 <_dtoa_r+0x3ce>
 800dcec:	2502      	movs	r5, #2
 800dcee:	e76f      	b.n	800dbd0 <_dtoa_r+0x3d8>
 800dcf0:	9b01      	ldr	r3, [sp, #4]
 800dcf2:	f8cd a01c 	str.w	sl, [sp, #28]
 800dcf6:	930c      	str	r3, [sp, #48]	; 0x30
 800dcf8:	e78d      	b.n	800dc16 <_dtoa_r+0x41e>
 800dcfa:	9900      	ldr	r1, [sp, #0]
 800dcfc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dcfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd00:	4b4e      	ldr	r3, [pc, #312]	; (800de3c <_dtoa_r+0x644>)
 800dd02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd06:	4401      	add	r1, r0
 800dd08:	9102      	str	r1, [sp, #8]
 800dd0a:	9908      	ldr	r1, [sp, #32]
 800dd0c:	eeb0 8a47 	vmov.f32	s16, s14
 800dd10:	eef0 8a67 	vmov.f32	s17, s15
 800dd14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd1c:	2900      	cmp	r1, #0
 800dd1e:	d045      	beq.n	800ddac <_dtoa_r+0x5b4>
 800dd20:	494c      	ldr	r1, [pc, #304]	; (800de54 <_dtoa_r+0x65c>)
 800dd22:	2000      	movs	r0, #0
 800dd24:	f7f2 fdc2 	bl	80008ac <__aeabi_ddiv>
 800dd28:	ec53 2b18 	vmov	r2, r3, d8
 800dd2c:	f7f2 fadc 	bl	80002e8 <__aeabi_dsub>
 800dd30:	9d00      	ldr	r5, [sp, #0]
 800dd32:	ec41 0b18 	vmov	d8, r0, r1
 800dd36:	4639      	mov	r1, r7
 800dd38:	4630      	mov	r0, r6
 800dd3a:	f7f2 ff3d 	bl	8000bb8 <__aeabi_d2iz>
 800dd3e:	900c      	str	r0, [sp, #48]	; 0x30
 800dd40:	f7f2 fc20 	bl	8000584 <__aeabi_i2d>
 800dd44:	4602      	mov	r2, r0
 800dd46:	460b      	mov	r3, r1
 800dd48:	4630      	mov	r0, r6
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	f7f2 facc 	bl	80002e8 <__aeabi_dsub>
 800dd50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd52:	3330      	adds	r3, #48	; 0x30
 800dd54:	f805 3b01 	strb.w	r3, [r5], #1
 800dd58:	ec53 2b18 	vmov	r2, r3, d8
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	460f      	mov	r7, r1
 800dd60:	f7f2 feec 	bl	8000b3c <__aeabi_dcmplt>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d165      	bne.n	800de34 <_dtoa_r+0x63c>
 800dd68:	4632      	mov	r2, r6
 800dd6a:	463b      	mov	r3, r7
 800dd6c:	4935      	ldr	r1, [pc, #212]	; (800de44 <_dtoa_r+0x64c>)
 800dd6e:	2000      	movs	r0, #0
 800dd70:	f7f2 faba 	bl	80002e8 <__aeabi_dsub>
 800dd74:	ec53 2b18 	vmov	r2, r3, d8
 800dd78:	f7f2 fee0 	bl	8000b3c <__aeabi_dcmplt>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	f040 80b9 	bne.w	800def4 <_dtoa_r+0x6fc>
 800dd82:	9b02      	ldr	r3, [sp, #8]
 800dd84:	429d      	cmp	r5, r3
 800dd86:	f43f af75 	beq.w	800dc74 <_dtoa_r+0x47c>
 800dd8a:	4b2f      	ldr	r3, [pc, #188]	; (800de48 <_dtoa_r+0x650>)
 800dd8c:	ec51 0b18 	vmov	r0, r1, d8
 800dd90:	2200      	movs	r2, #0
 800dd92:	f7f2 fc61 	bl	8000658 <__aeabi_dmul>
 800dd96:	4b2c      	ldr	r3, [pc, #176]	; (800de48 <_dtoa_r+0x650>)
 800dd98:	ec41 0b18 	vmov	d8, r0, r1
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	4630      	mov	r0, r6
 800dda0:	4639      	mov	r1, r7
 800dda2:	f7f2 fc59 	bl	8000658 <__aeabi_dmul>
 800dda6:	4606      	mov	r6, r0
 800dda8:	460f      	mov	r7, r1
 800ddaa:	e7c4      	b.n	800dd36 <_dtoa_r+0x53e>
 800ddac:	ec51 0b17 	vmov	r0, r1, d7
 800ddb0:	f7f2 fc52 	bl	8000658 <__aeabi_dmul>
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	9d00      	ldr	r5, [sp, #0]
 800ddb8:	930c      	str	r3, [sp, #48]	; 0x30
 800ddba:	ec41 0b18 	vmov	d8, r0, r1
 800ddbe:	4639      	mov	r1, r7
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	f7f2 fef9 	bl	8000bb8 <__aeabi_d2iz>
 800ddc6:	9011      	str	r0, [sp, #68]	; 0x44
 800ddc8:	f7f2 fbdc 	bl	8000584 <__aeabi_i2d>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	460b      	mov	r3, r1
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	4639      	mov	r1, r7
 800ddd4:	f7f2 fa88 	bl	80002e8 <__aeabi_dsub>
 800ddd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddda:	3330      	adds	r3, #48	; 0x30
 800dddc:	f805 3b01 	strb.w	r3, [r5], #1
 800dde0:	9b02      	ldr	r3, [sp, #8]
 800dde2:	429d      	cmp	r5, r3
 800dde4:	4606      	mov	r6, r0
 800dde6:	460f      	mov	r7, r1
 800dde8:	f04f 0200 	mov.w	r2, #0
 800ddec:	d134      	bne.n	800de58 <_dtoa_r+0x660>
 800ddee:	4b19      	ldr	r3, [pc, #100]	; (800de54 <_dtoa_r+0x65c>)
 800ddf0:	ec51 0b18 	vmov	r0, r1, d8
 800ddf4:	f7f2 fa7a 	bl	80002ec <__adddf3>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	4630      	mov	r0, r6
 800ddfe:	4639      	mov	r1, r7
 800de00:	f7f2 feba 	bl	8000b78 <__aeabi_dcmpgt>
 800de04:	2800      	cmp	r0, #0
 800de06:	d175      	bne.n	800def4 <_dtoa_r+0x6fc>
 800de08:	ec53 2b18 	vmov	r2, r3, d8
 800de0c:	4911      	ldr	r1, [pc, #68]	; (800de54 <_dtoa_r+0x65c>)
 800de0e:	2000      	movs	r0, #0
 800de10:	f7f2 fa6a 	bl	80002e8 <__aeabi_dsub>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4630      	mov	r0, r6
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 fe8e 	bl	8000b3c <__aeabi_dcmplt>
 800de20:	2800      	cmp	r0, #0
 800de22:	f43f af27 	beq.w	800dc74 <_dtoa_r+0x47c>
 800de26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de28:	1e6b      	subs	r3, r5, #1
 800de2a:	930c      	str	r3, [sp, #48]	; 0x30
 800de2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de30:	2b30      	cmp	r3, #48	; 0x30
 800de32:	d0f8      	beq.n	800de26 <_dtoa_r+0x62e>
 800de34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de38:	e04a      	b.n	800ded0 <_dtoa_r+0x6d8>
 800de3a:	bf00      	nop
 800de3c:	080120a0 	.word	0x080120a0
 800de40:	08012078 	.word	0x08012078
 800de44:	3ff00000 	.word	0x3ff00000
 800de48:	40240000 	.word	0x40240000
 800de4c:	401c0000 	.word	0x401c0000
 800de50:	40140000 	.word	0x40140000
 800de54:	3fe00000 	.word	0x3fe00000
 800de58:	4baf      	ldr	r3, [pc, #700]	; (800e118 <_dtoa_r+0x920>)
 800de5a:	f7f2 fbfd 	bl	8000658 <__aeabi_dmul>
 800de5e:	4606      	mov	r6, r0
 800de60:	460f      	mov	r7, r1
 800de62:	e7ac      	b.n	800ddbe <_dtoa_r+0x5c6>
 800de64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de68:	9d00      	ldr	r5, [sp, #0]
 800de6a:	4642      	mov	r2, r8
 800de6c:	464b      	mov	r3, r9
 800de6e:	4630      	mov	r0, r6
 800de70:	4639      	mov	r1, r7
 800de72:	f7f2 fd1b 	bl	80008ac <__aeabi_ddiv>
 800de76:	f7f2 fe9f 	bl	8000bb8 <__aeabi_d2iz>
 800de7a:	9002      	str	r0, [sp, #8]
 800de7c:	f7f2 fb82 	bl	8000584 <__aeabi_i2d>
 800de80:	4642      	mov	r2, r8
 800de82:	464b      	mov	r3, r9
 800de84:	f7f2 fbe8 	bl	8000658 <__aeabi_dmul>
 800de88:	4602      	mov	r2, r0
 800de8a:	460b      	mov	r3, r1
 800de8c:	4630      	mov	r0, r6
 800de8e:	4639      	mov	r1, r7
 800de90:	f7f2 fa2a 	bl	80002e8 <__aeabi_dsub>
 800de94:	9e02      	ldr	r6, [sp, #8]
 800de96:	9f01      	ldr	r7, [sp, #4]
 800de98:	3630      	adds	r6, #48	; 0x30
 800de9a:	f805 6b01 	strb.w	r6, [r5], #1
 800de9e:	9e00      	ldr	r6, [sp, #0]
 800dea0:	1bae      	subs	r6, r5, r6
 800dea2:	42b7      	cmp	r7, r6
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	d137      	bne.n	800df1a <_dtoa_r+0x722>
 800deaa:	f7f2 fa1f 	bl	80002ec <__adddf3>
 800deae:	4642      	mov	r2, r8
 800deb0:	464b      	mov	r3, r9
 800deb2:	4606      	mov	r6, r0
 800deb4:	460f      	mov	r7, r1
 800deb6:	f7f2 fe5f 	bl	8000b78 <__aeabi_dcmpgt>
 800deba:	b9c8      	cbnz	r0, 800def0 <_dtoa_r+0x6f8>
 800debc:	4642      	mov	r2, r8
 800debe:	464b      	mov	r3, r9
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 fe30 	bl	8000b28 <__aeabi_dcmpeq>
 800dec8:	b110      	cbz	r0, 800ded0 <_dtoa_r+0x6d8>
 800deca:	9b02      	ldr	r3, [sp, #8]
 800decc:	07d9      	lsls	r1, r3, #31
 800dece:	d40f      	bmi.n	800def0 <_dtoa_r+0x6f8>
 800ded0:	4620      	mov	r0, r4
 800ded2:	4659      	mov	r1, fp
 800ded4:	f001 f8f8 	bl	800f0c8 <_Bfree>
 800ded8:	2300      	movs	r3, #0
 800deda:	702b      	strb	r3, [r5, #0]
 800dedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dede:	f10a 0001 	add.w	r0, sl, #1
 800dee2:	6018      	str	r0, [r3, #0]
 800dee4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f43f acd8 	beq.w	800d89c <_dtoa_r+0xa4>
 800deec:	601d      	str	r5, [r3, #0]
 800deee:	e4d5      	b.n	800d89c <_dtoa_r+0xa4>
 800def0:	f8cd a01c 	str.w	sl, [sp, #28]
 800def4:	462b      	mov	r3, r5
 800def6:	461d      	mov	r5, r3
 800def8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800defc:	2a39      	cmp	r2, #57	; 0x39
 800defe:	d108      	bne.n	800df12 <_dtoa_r+0x71a>
 800df00:	9a00      	ldr	r2, [sp, #0]
 800df02:	429a      	cmp	r2, r3
 800df04:	d1f7      	bne.n	800def6 <_dtoa_r+0x6fe>
 800df06:	9a07      	ldr	r2, [sp, #28]
 800df08:	9900      	ldr	r1, [sp, #0]
 800df0a:	3201      	adds	r2, #1
 800df0c:	9207      	str	r2, [sp, #28]
 800df0e:	2230      	movs	r2, #48	; 0x30
 800df10:	700a      	strb	r2, [r1, #0]
 800df12:	781a      	ldrb	r2, [r3, #0]
 800df14:	3201      	adds	r2, #1
 800df16:	701a      	strb	r2, [r3, #0]
 800df18:	e78c      	b.n	800de34 <_dtoa_r+0x63c>
 800df1a:	4b7f      	ldr	r3, [pc, #508]	; (800e118 <_dtoa_r+0x920>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	f7f2 fb9b 	bl	8000658 <__aeabi_dmul>
 800df22:	2200      	movs	r2, #0
 800df24:	2300      	movs	r3, #0
 800df26:	4606      	mov	r6, r0
 800df28:	460f      	mov	r7, r1
 800df2a:	f7f2 fdfd 	bl	8000b28 <__aeabi_dcmpeq>
 800df2e:	2800      	cmp	r0, #0
 800df30:	d09b      	beq.n	800de6a <_dtoa_r+0x672>
 800df32:	e7cd      	b.n	800ded0 <_dtoa_r+0x6d8>
 800df34:	9a08      	ldr	r2, [sp, #32]
 800df36:	2a00      	cmp	r2, #0
 800df38:	f000 80c4 	beq.w	800e0c4 <_dtoa_r+0x8cc>
 800df3c:	9a05      	ldr	r2, [sp, #20]
 800df3e:	2a01      	cmp	r2, #1
 800df40:	f300 80a8 	bgt.w	800e094 <_dtoa_r+0x89c>
 800df44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df46:	2a00      	cmp	r2, #0
 800df48:	f000 80a0 	beq.w	800e08c <_dtoa_r+0x894>
 800df4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df50:	9e06      	ldr	r6, [sp, #24]
 800df52:	4645      	mov	r5, r8
 800df54:	9a04      	ldr	r2, [sp, #16]
 800df56:	2101      	movs	r1, #1
 800df58:	441a      	add	r2, r3
 800df5a:	4620      	mov	r0, r4
 800df5c:	4498      	add	r8, r3
 800df5e:	9204      	str	r2, [sp, #16]
 800df60:	f001 f9b8 	bl	800f2d4 <__i2b>
 800df64:	4607      	mov	r7, r0
 800df66:	2d00      	cmp	r5, #0
 800df68:	dd0b      	ble.n	800df82 <_dtoa_r+0x78a>
 800df6a:	9b04      	ldr	r3, [sp, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dd08      	ble.n	800df82 <_dtoa_r+0x78a>
 800df70:	42ab      	cmp	r3, r5
 800df72:	9a04      	ldr	r2, [sp, #16]
 800df74:	bfa8      	it	ge
 800df76:	462b      	movge	r3, r5
 800df78:	eba8 0803 	sub.w	r8, r8, r3
 800df7c:	1aed      	subs	r5, r5, r3
 800df7e:	1ad3      	subs	r3, r2, r3
 800df80:	9304      	str	r3, [sp, #16]
 800df82:	9b06      	ldr	r3, [sp, #24]
 800df84:	b1fb      	cbz	r3, 800dfc6 <_dtoa_r+0x7ce>
 800df86:	9b08      	ldr	r3, [sp, #32]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f000 809f 	beq.w	800e0cc <_dtoa_r+0x8d4>
 800df8e:	2e00      	cmp	r6, #0
 800df90:	dd11      	ble.n	800dfb6 <_dtoa_r+0x7be>
 800df92:	4639      	mov	r1, r7
 800df94:	4632      	mov	r2, r6
 800df96:	4620      	mov	r0, r4
 800df98:	f001 fa58 	bl	800f44c <__pow5mult>
 800df9c:	465a      	mov	r2, fp
 800df9e:	4601      	mov	r1, r0
 800dfa0:	4607      	mov	r7, r0
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f001 f9ac 	bl	800f300 <__multiply>
 800dfa8:	4659      	mov	r1, fp
 800dfaa:	9007      	str	r0, [sp, #28]
 800dfac:	4620      	mov	r0, r4
 800dfae:	f001 f88b 	bl	800f0c8 <_Bfree>
 800dfb2:	9b07      	ldr	r3, [sp, #28]
 800dfb4:	469b      	mov	fp, r3
 800dfb6:	9b06      	ldr	r3, [sp, #24]
 800dfb8:	1b9a      	subs	r2, r3, r6
 800dfba:	d004      	beq.n	800dfc6 <_dtoa_r+0x7ce>
 800dfbc:	4659      	mov	r1, fp
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f001 fa44 	bl	800f44c <__pow5mult>
 800dfc4:	4683      	mov	fp, r0
 800dfc6:	2101      	movs	r1, #1
 800dfc8:	4620      	mov	r0, r4
 800dfca:	f001 f983 	bl	800f2d4 <__i2b>
 800dfce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	dd7c      	ble.n	800e0d0 <_dtoa_r+0x8d8>
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	4601      	mov	r1, r0
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f001 fa36 	bl	800f44c <__pow5mult>
 800dfe0:	9b05      	ldr	r3, [sp, #20]
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	dd76      	ble.n	800e0d6 <_dtoa_r+0x8de>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	9306      	str	r3, [sp, #24]
 800dfec:	6933      	ldr	r3, [r6, #16]
 800dfee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dff2:	6918      	ldr	r0, [r3, #16]
 800dff4:	f001 f91e 	bl	800f234 <__hi0bits>
 800dff8:	f1c0 0020 	rsb	r0, r0, #32
 800dffc:	9b04      	ldr	r3, [sp, #16]
 800dffe:	4418      	add	r0, r3
 800e000:	f010 001f 	ands.w	r0, r0, #31
 800e004:	f000 8086 	beq.w	800e114 <_dtoa_r+0x91c>
 800e008:	f1c0 0320 	rsb	r3, r0, #32
 800e00c:	2b04      	cmp	r3, #4
 800e00e:	dd7f      	ble.n	800e110 <_dtoa_r+0x918>
 800e010:	f1c0 001c 	rsb	r0, r0, #28
 800e014:	9b04      	ldr	r3, [sp, #16]
 800e016:	4403      	add	r3, r0
 800e018:	4480      	add	r8, r0
 800e01a:	4405      	add	r5, r0
 800e01c:	9304      	str	r3, [sp, #16]
 800e01e:	f1b8 0f00 	cmp.w	r8, #0
 800e022:	dd05      	ble.n	800e030 <_dtoa_r+0x838>
 800e024:	4659      	mov	r1, fp
 800e026:	4642      	mov	r2, r8
 800e028:	4620      	mov	r0, r4
 800e02a:	f001 fa69 	bl	800f500 <__lshift>
 800e02e:	4683      	mov	fp, r0
 800e030:	9b04      	ldr	r3, [sp, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	dd05      	ble.n	800e042 <_dtoa_r+0x84a>
 800e036:	4631      	mov	r1, r6
 800e038:	461a      	mov	r2, r3
 800e03a:	4620      	mov	r0, r4
 800e03c:	f001 fa60 	bl	800f500 <__lshift>
 800e040:	4606      	mov	r6, r0
 800e042:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e044:	2b00      	cmp	r3, #0
 800e046:	d069      	beq.n	800e11c <_dtoa_r+0x924>
 800e048:	4631      	mov	r1, r6
 800e04a:	4658      	mov	r0, fp
 800e04c:	f001 fac4 	bl	800f5d8 <__mcmp>
 800e050:	2800      	cmp	r0, #0
 800e052:	da63      	bge.n	800e11c <_dtoa_r+0x924>
 800e054:	2300      	movs	r3, #0
 800e056:	4659      	mov	r1, fp
 800e058:	220a      	movs	r2, #10
 800e05a:	4620      	mov	r0, r4
 800e05c:	f001 f856 	bl	800f10c <__multadd>
 800e060:	9b08      	ldr	r3, [sp, #32]
 800e062:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e066:	4683      	mov	fp, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	f000 818f 	beq.w	800e38c <_dtoa_r+0xb94>
 800e06e:	4639      	mov	r1, r7
 800e070:	2300      	movs	r3, #0
 800e072:	220a      	movs	r2, #10
 800e074:	4620      	mov	r0, r4
 800e076:	f001 f849 	bl	800f10c <__multadd>
 800e07a:	f1b9 0f00 	cmp.w	r9, #0
 800e07e:	4607      	mov	r7, r0
 800e080:	f300 808e 	bgt.w	800e1a0 <_dtoa_r+0x9a8>
 800e084:	9b05      	ldr	r3, [sp, #20]
 800e086:	2b02      	cmp	r3, #2
 800e088:	dc50      	bgt.n	800e12c <_dtoa_r+0x934>
 800e08a:	e089      	b.n	800e1a0 <_dtoa_r+0x9a8>
 800e08c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e08e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e092:	e75d      	b.n	800df50 <_dtoa_r+0x758>
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	1e5e      	subs	r6, r3, #1
 800e098:	9b06      	ldr	r3, [sp, #24]
 800e09a:	42b3      	cmp	r3, r6
 800e09c:	bfbf      	itttt	lt
 800e09e:	9b06      	ldrlt	r3, [sp, #24]
 800e0a0:	9606      	strlt	r6, [sp, #24]
 800e0a2:	1af2      	sublt	r2, r6, r3
 800e0a4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e0a6:	bfb6      	itet	lt
 800e0a8:	189b      	addlt	r3, r3, r2
 800e0aa:	1b9e      	subge	r6, r3, r6
 800e0ac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e0ae:	9b01      	ldr	r3, [sp, #4]
 800e0b0:	bfb8      	it	lt
 800e0b2:	2600      	movlt	r6, #0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	bfb5      	itete	lt
 800e0b8:	eba8 0503 	sublt.w	r5, r8, r3
 800e0bc:	9b01      	ldrge	r3, [sp, #4]
 800e0be:	2300      	movlt	r3, #0
 800e0c0:	4645      	movge	r5, r8
 800e0c2:	e747      	b.n	800df54 <_dtoa_r+0x75c>
 800e0c4:	9e06      	ldr	r6, [sp, #24]
 800e0c6:	9f08      	ldr	r7, [sp, #32]
 800e0c8:	4645      	mov	r5, r8
 800e0ca:	e74c      	b.n	800df66 <_dtoa_r+0x76e>
 800e0cc:	9a06      	ldr	r2, [sp, #24]
 800e0ce:	e775      	b.n	800dfbc <_dtoa_r+0x7c4>
 800e0d0:	9b05      	ldr	r3, [sp, #20]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	dc18      	bgt.n	800e108 <_dtoa_r+0x910>
 800e0d6:	9b02      	ldr	r3, [sp, #8]
 800e0d8:	b9b3      	cbnz	r3, 800e108 <_dtoa_r+0x910>
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0e0:	b9a3      	cbnz	r3, 800e10c <_dtoa_r+0x914>
 800e0e2:	9b03      	ldr	r3, [sp, #12]
 800e0e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0e8:	0d1b      	lsrs	r3, r3, #20
 800e0ea:	051b      	lsls	r3, r3, #20
 800e0ec:	b12b      	cbz	r3, 800e0fa <_dtoa_r+0x902>
 800e0ee:	9b04      	ldr	r3, [sp, #16]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	9304      	str	r3, [sp, #16]
 800e0f4:	f108 0801 	add.w	r8, r8, #1
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	9306      	str	r3, [sp, #24]
 800e0fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	f47f af74 	bne.w	800dfec <_dtoa_r+0x7f4>
 800e104:	2001      	movs	r0, #1
 800e106:	e779      	b.n	800dffc <_dtoa_r+0x804>
 800e108:	2300      	movs	r3, #0
 800e10a:	e7f6      	b.n	800e0fa <_dtoa_r+0x902>
 800e10c:	9b02      	ldr	r3, [sp, #8]
 800e10e:	e7f4      	b.n	800e0fa <_dtoa_r+0x902>
 800e110:	d085      	beq.n	800e01e <_dtoa_r+0x826>
 800e112:	4618      	mov	r0, r3
 800e114:	301c      	adds	r0, #28
 800e116:	e77d      	b.n	800e014 <_dtoa_r+0x81c>
 800e118:	40240000 	.word	0x40240000
 800e11c:	9b01      	ldr	r3, [sp, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	dc38      	bgt.n	800e194 <_dtoa_r+0x99c>
 800e122:	9b05      	ldr	r3, [sp, #20]
 800e124:	2b02      	cmp	r3, #2
 800e126:	dd35      	ble.n	800e194 <_dtoa_r+0x99c>
 800e128:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e12c:	f1b9 0f00 	cmp.w	r9, #0
 800e130:	d10d      	bne.n	800e14e <_dtoa_r+0x956>
 800e132:	4631      	mov	r1, r6
 800e134:	464b      	mov	r3, r9
 800e136:	2205      	movs	r2, #5
 800e138:	4620      	mov	r0, r4
 800e13a:	f000 ffe7 	bl	800f10c <__multadd>
 800e13e:	4601      	mov	r1, r0
 800e140:	4606      	mov	r6, r0
 800e142:	4658      	mov	r0, fp
 800e144:	f001 fa48 	bl	800f5d8 <__mcmp>
 800e148:	2800      	cmp	r0, #0
 800e14a:	f73f adbd 	bgt.w	800dcc8 <_dtoa_r+0x4d0>
 800e14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e150:	9d00      	ldr	r5, [sp, #0]
 800e152:	ea6f 0a03 	mvn.w	sl, r3
 800e156:	f04f 0800 	mov.w	r8, #0
 800e15a:	4631      	mov	r1, r6
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 ffb3 	bl	800f0c8 <_Bfree>
 800e162:	2f00      	cmp	r7, #0
 800e164:	f43f aeb4 	beq.w	800ded0 <_dtoa_r+0x6d8>
 800e168:	f1b8 0f00 	cmp.w	r8, #0
 800e16c:	d005      	beq.n	800e17a <_dtoa_r+0x982>
 800e16e:	45b8      	cmp	r8, r7
 800e170:	d003      	beq.n	800e17a <_dtoa_r+0x982>
 800e172:	4641      	mov	r1, r8
 800e174:	4620      	mov	r0, r4
 800e176:	f000 ffa7 	bl	800f0c8 <_Bfree>
 800e17a:	4639      	mov	r1, r7
 800e17c:	4620      	mov	r0, r4
 800e17e:	f000 ffa3 	bl	800f0c8 <_Bfree>
 800e182:	e6a5      	b.n	800ded0 <_dtoa_r+0x6d8>
 800e184:	2600      	movs	r6, #0
 800e186:	4637      	mov	r7, r6
 800e188:	e7e1      	b.n	800e14e <_dtoa_r+0x956>
 800e18a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e18c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e190:	4637      	mov	r7, r6
 800e192:	e599      	b.n	800dcc8 <_dtoa_r+0x4d0>
 800e194:	9b08      	ldr	r3, [sp, #32]
 800e196:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	f000 80fd 	beq.w	800e39a <_dtoa_r+0xba2>
 800e1a0:	2d00      	cmp	r5, #0
 800e1a2:	dd05      	ble.n	800e1b0 <_dtoa_r+0x9b8>
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	462a      	mov	r2, r5
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f001 f9a9 	bl	800f500 <__lshift>
 800e1ae:	4607      	mov	r7, r0
 800e1b0:	9b06      	ldr	r3, [sp, #24]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d05c      	beq.n	800e270 <_dtoa_r+0xa78>
 800e1b6:	6879      	ldr	r1, [r7, #4]
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	f000 ff45 	bl	800f048 <_Balloc>
 800e1be:	4605      	mov	r5, r0
 800e1c0:	b928      	cbnz	r0, 800e1ce <_dtoa_r+0x9d6>
 800e1c2:	4b80      	ldr	r3, [pc, #512]	; (800e3c4 <_dtoa_r+0xbcc>)
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e1ca:	f7ff bb2e 	b.w	800d82a <_dtoa_r+0x32>
 800e1ce:	693a      	ldr	r2, [r7, #16]
 800e1d0:	3202      	adds	r2, #2
 800e1d2:	0092      	lsls	r2, r2, #2
 800e1d4:	f107 010c 	add.w	r1, r7, #12
 800e1d8:	300c      	adds	r0, #12
 800e1da:	f000 ff27 	bl	800f02c <memcpy>
 800e1de:	2201      	movs	r2, #1
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f001 f98c 	bl	800f500 <__lshift>
 800e1e8:	9b00      	ldr	r3, [sp, #0]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	9b00      	ldr	r3, [sp, #0]
 800e1f0:	444b      	add	r3, r9
 800e1f2:	9307      	str	r3, [sp, #28]
 800e1f4:	9b02      	ldr	r3, [sp, #8]
 800e1f6:	f003 0301 	and.w	r3, r3, #1
 800e1fa:	46b8      	mov	r8, r7
 800e1fc:	9306      	str	r3, [sp, #24]
 800e1fe:	4607      	mov	r7, r0
 800e200:	9b01      	ldr	r3, [sp, #4]
 800e202:	4631      	mov	r1, r6
 800e204:	3b01      	subs	r3, #1
 800e206:	4658      	mov	r0, fp
 800e208:	9302      	str	r3, [sp, #8]
 800e20a:	f7ff fa67 	bl	800d6dc <quorem>
 800e20e:	4603      	mov	r3, r0
 800e210:	3330      	adds	r3, #48	; 0x30
 800e212:	9004      	str	r0, [sp, #16]
 800e214:	4641      	mov	r1, r8
 800e216:	4658      	mov	r0, fp
 800e218:	9308      	str	r3, [sp, #32]
 800e21a:	f001 f9dd 	bl	800f5d8 <__mcmp>
 800e21e:	463a      	mov	r2, r7
 800e220:	4681      	mov	r9, r0
 800e222:	4631      	mov	r1, r6
 800e224:	4620      	mov	r0, r4
 800e226:	f001 f9f3 	bl	800f610 <__mdiff>
 800e22a:	68c2      	ldr	r2, [r0, #12]
 800e22c:	9b08      	ldr	r3, [sp, #32]
 800e22e:	4605      	mov	r5, r0
 800e230:	bb02      	cbnz	r2, 800e274 <_dtoa_r+0xa7c>
 800e232:	4601      	mov	r1, r0
 800e234:	4658      	mov	r0, fp
 800e236:	f001 f9cf 	bl	800f5d8 <__mcmp>
 800e23a:	9b08      	ldr	r3, [sp, #32]
 800e23c:	4602      	mov	r2, r0
 800e23e:	4629      	mov	r1, r5
 800e240:	4620      	mov	r0, r4
 800e242:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e246:	f000 ff3f 	bl	800f0c8 <_Bfree>
 800e24a:	9b05      	ldr	r3, [sp, #20]
 800e24c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e24e:	9d01      	ldr	r5, [sp, #4]
 800e250:	ea43 0102 	orr.w	r1, r3, r2
 800e254:	9b06      	ldr	r3, [sp, #24]
 800e256:	430b      	orrs	r3, r1
 800e258:	9b08      	ldr	r3, [sp, #32]
 800e25a:	d10d      	bne.n	800e278 <_dtoa_r+0xa80>
 800e25c:	2b39      	cmp	r3, #57	; 0x39
 800e25e:	d029      	beq.n	800e2b4 <_dtoa_r+0xabc>
 800e260:	f1b9 0f00 	cmp.w	r9, #0
 800e264:	dd01      	ble.n	800e26a <_dtoa_r+0xa72>
 800e266:	9b04      	ldr	r3, [sp, #16]
 800e268:	3331      	adds	r3, #49	; 0x31
 800e26a:	9a02      	ldr	r2, [sp, #8]
 800e26c:	7013      	strb	r3, [r2, #0]
 800e26e:	e774      	b.n	800e15a <_dtoa_r+0x962>
 800e270:	4638      	mov	r0, r7
 800e272:	e7b9      	b.n	800e1e8 <_dtoa_r+0x9f0>
 800e274:	2201      	movs	r2, #1
 800e276:	e7e2      	b.n	800e23e <_dtoa_r+0xa46>
 800e278:	f1b9 0f00 	cmp.w	r9, #0
 800e27c:	db06      	blt.n	800e28c <_dtoa_r+0xa94>
 800e27e:	9905      	ldr	r1, [sp, #20]
 800e280:	ea41 0909 	orr.w	r9, r1, r9
 800e284:	9906      	ldr	r1, [sp, #24]
 800e286:	ea59 0101 	orrs.w	r1, r9, r1
 800e28a:	d120      	bne.n	800e2ce <_dtoa_r+0xad6>
 800e28c:	2a00      	cmp	r2, #0
 800e28e:	ddec      	ble.n	800e26a <_dtoa_r+0xa72>
 800e290:	4659      	mov	r1, fp
 800e292:	2201      	movs	r2, #1
 800e294:	4620      	mov	r0, r4
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	f001 f932 	bl	800f500 <__lshift>
 800e29c:	4631      	mov	r1, r6
 800e29e:	4683      	mov	fp, r0
 800e2a0:	f001 f99a 	bl	800f5d8 <__mcmp>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	9b01      	ldr	r3, [sp, #4]
 800e2a8:	dc02      	bgt.n	800e2b0 <_dtoa_r+0xab8>
 800e2aa:	d1de      	bne.n	800e26a <_dtoa_r+0xa72>
 800e2ac:	07da      	lsls	r2, r3, #31
 800e2ae:	d5dc      	bpl.n	800e26a <_dtoa_r+0xa72>
 800e2b0:	2b39      	cmp	r3, #57	; 0x39
 800e2b2:	d1d8      	bne.n	800e266 <_dtoa_r+0xa6e>
 800e2b4:	9a02      	ldr	r2, [sp, #8]
 800e2b6:	2339      	movs	r3, #57	; 0x39
 800e2b8:	7013      	strb	r3, [r2, #0]
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	461d      	mov	r5, r3
 800e2be:	3b01      	subs	r3, #1
 800e2c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e2c4:	2a39      	cmp	r2, #57	; 0x39
 800e2c6:	d050      	beq.n	800e36a <_dtoa_r+0xb72>
 800e2c8:	3201      	adds	r2, #1
 800e2ca:	701a      	strb	r2, [r3, #0]
 800e2cc:	e745      	b.n	800e15a <_dtoa_r+0x962>
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	dd03      	ble.n	800e2da <_dtoa_r+0xae2>
 800e2d2:	2b39      	cmp	r3, #57	; 0x39
 800e2d4:	d0ee      	beq.n	800e2b4 <_dtoa_r+0xabc>
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	e7c7      	b.n	800e26a <_dtoa_r+0xa72>
 800e2da:	9a01      	ldr	r2, [sp, #4]
 800e2dc:	9907      	ldr	r1, [sp, #28]
 800e2de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e2e2:	428a      	cmp	r2, r1
 800e2e4:	d02a      	beq.n	800e33c <_dtoa_r+0xb44>
 800e2e6:	4659      	mov	r1, fp
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	220a      	movs	r2, #10
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f000 ff0d 	bl	800f10c <__multadd>
 800e2f2:	45b8      	cmp	r8, r7
 800e2f4:	4683      	mov	fp, r0
 800e2f6:	f04f 0300 	mov.w	r3, #0
 800e2fa:	f04f 020a 	mov.w	r2, #10
 800e2fe:	4641      	mov	r1, r8
 800e300:	4620      	mov	r0, r4
 800e302:	d107      	bne.n	800e314 <_dtoa_r+0xb1c>
 800e304:	f000 ff02 	bl	800f10c <__multadd>
 800e308:	4680      	mov	r8, r0
 800e30a:	4607      	mov	r7, r0
 800e30c:	9b01      	ldr	r3, [sp, #4]
 800e30e:	3301      	adds	r3, #1
 800e310:	9301      	str	r3, [sp, #4]
 800e312:	e775      	b.n	800e200 <_dtoa_r+0xa08>
 800e314:	f000 fefa 	bl	800f10c <__multadd>
 800e318:	4639      	mov	r1, r7
 800e31a:	4680      	mov	r8, r0
 800e31c:	2300      	movs	r3, #0
 800e31e:	220a      	movs	r2, #10
 800e320:	4620      	mov	r0, r4
 800e322:	f000 fef3 	bl	800f10c <__multadd>
 800e326:	4607      	mov	r7, r0
 800e328:	e7f0      	b.n	800e30c <_dtoa_r+0xb14>
 800e32a:	f1b9 0f00 	cmp.w	r9, #0
 800e32e:	9a00      	ldr	r2, [sp, #0]
 800e330:	bfcc      	ite	gt
 800e332:	464d      	movgt	r5, r9
 800e334:	2501      	movle	r5, #1
 800e336:	4415      	add	r5, r2
 800e338:	f04f 0800 	mov.w	r8, #0
 800e33c:	4659      	mov	r1, fp
 800e33e:	2201      	movs	r2, #1
 800e340:	4620      	mov	r0, r4
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	f001 f8dc 	bl	800f500 <__lshift>
 800e348:	4631      	mov	r1, r6
 800e34a:	4683      	mov	fp, r0
 800e34c:	f001 f944 	bl	800f5d8 <__mcmp>
 800e350:	2800      	cmp	r0, #0
 800e352:	dcb2      	bgt.n	800e2ba <_dtoa_r+0xac2>
 800e354:	d102      	bne.n	800e35c <_dtoa_r+0xb64>
 800e356:	9b01      	ldr	r3, [sp, #4]
 800e358:	07db      	lsls	r3, r3, #31
 800e35a:	d4ae      	bmi.n	800e2ba <_dtoa_r+0xac2>
 800e35c:	462b      	mov	r3, r5
 800e35e:	461d      	mov	r5, r3
 800e360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e364:	2a30      	cmp	r2, #48	; 0x30
 800e366:	d0fa      	beq.n	800e35e <_dtoa_r+0xb66>
 800e368:	e6f7      	b.n	800e15a <_dtoa_r+0x962>
 800e36a:	9a00      	ldr	r2, [sp, #0]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d1a5      	bne.n	800e2bc <_dtoa_r+0xac4>
 800e370:	f10a 0a01 	add.w	sl, sl, #1
 800e374:	2331      	movs	r3, #49	; 0x31
 800e376:	e779      	b.n	800e26c <_dtoa_r+0xa74>
 800e378:	4b13      	ldr	r3, [pc, #76]	; (800e3c8 <_dtoa_r+0xbd0>)
 800e37a:	f7ff baaf 	b.w	800d8dc <_dtoa_r+0xe4>
 800e37e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e380:	2b00      	cmp	r3, #0
 800e382:	f47f aa86 	bne.w	800d892 <_dtoa_r+0x9a>
 800e386:	4b11      	ldr	r3, [pc, #68]	; (800e3cc <_dtoa_r+0xbd4>)
 800e388:	f7ff baa8 	b.w	800d8dc <_dtoa_r+0xe4>
 800e38c:	f1b9 0f00 	cmp.w	r9, #0
 800e390:	dc03      	bgt.n	800e39a <_dtoa_r+0xba2>
 800e392:	9b05      	ldr	r3, [sp, #20]
 800e394:	2b02      	cmp	r3, #2
 800e396:	f73f aec9 	bgt.w	800e12c <_dtoa_r+0x934>
 800e39a:	9d00      	ldr	r5, [sp, #0]
 800e39c:	4631      	mov	r1, r6
 800e39e:	4658      	mov	r0, fp
 800e3a0:	f7ff f99c 	bl	800d6dc <quorem>
 800e3a4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e3a8:	f805 3b01 	strb.w	r3, [r5], #1
 800e3ac:	9a00      	ldr	r2, [sp, #0]
 800e3ae:	1aaa      	subs	r2, r5, r2
 800e3b0:	4591      	cmp	r9, r2
 800e3b2:	ddba      	ble.n	800e32a <_dtoa_r+0xb32>
 800e3b4:	4659      	mov	r1, fp
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	220a      	movs	r2, #10
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 fea6 	bl	800f10c <__multadd>
 800e3c0:	4683      	mov	fp, r0
 800e3c2:	e7eb      	b.n	800e39c <_dtoa_r+0xba4>
 800e3c4:	08011f21 	.word	0x08011f21
 800e3c8:	08011c8c 	.word	0x08011c8c
 800e3cc:	08011eb5 	.word	0x08011eb5

0800e3d0 <__sflush_r>:
 800e3d0:	898a      	ldrh	r2, [r1, #12]
 800e3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	0710      	lsls	r0, r2, #28
 800e3da:	460c      	mov	r4, r1
 800e3dc:	d458      	bmi.n	800e490 <__sflush_r+0xc0>
 800e3de:	684b      	ldr	r3, [r1, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	dc05      	bgt.n	800e3f0 <__sflush_r+0x20>
 800e3e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	dc02      	bgt.n	800e3f0 <__sflush_r+0x20>
 800e3ea:	2000      	movs	r0, #0
 800e3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3f2:	2e00      	cmp	r6, #0
 800e3f4:	d0f9      	beq.n	800e3ea <__sflush_r+0x1a>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3fc:	682f      	ldr	r7, [r5, #0]
 800e3fe:	602b      	str	r3, [r5, #0]
 800e400:	d032      	beq.n	800e468 <__sflush_r+0x98>
 800e402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e404:	89a3      	ldrh	r3, [r4, #12]
 800e406:	075a      	lsls	r2, r3, #29
 800e408:	d505      	bpl.n	800e416 <__sflush_r+0x46>
 800e40a:	6863      	ldr	r3, [r4, #4]
 800e40c:	1ac0      	subs	r0, r0, r3
 800e40e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e410:	b10b      	cbz	r3, 800e416 <__sflush_r+0x46>
 800e412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e414:	1ac0      	subs	r0, r0, r3
 800e416:	2300      	movs	r3, #0
 800e418:	4602      	mov	r2, r0
 800e41a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e41c:	6a21      	ldr	r1, [r4, #32]
 800e41e:	4628      	mov	r0, r5
 800e420:	47b0      	blx	r6
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	89a3      	ldrh	r3, [r4, #12]
 800e426:	d106      	bne.n	800e436 <__sflush_r+0x66>
 800e428:	6829      	ldr	r1, [r5, #0]
 800e42a:	291d      	cmp	r1, #29
 800e42c:	d82c      	bhi.n	800e488 <__sflush_r+0xb8>
 800e42e:	4a2a      	ldr	r2, [pc, #168]	; (800e4d8 <__sflush_r+0x108>)
 800e430:	40ca      	lsrs	r2, r1
 800e432:	07d6      	lsls	r6, r2, #31
 800e434:	d528      	bpl.n	800e488 <__sflush_r+0xb8>
 800e436:	2200      	movs	r2, #0
 800e438:	6062      	str	r2, [r4, #4]
 800e43a:	04d9      	lsls	r1, r3, #19
 800e43c:	6922      	ldr	r2, [r4, #16]
 800e43e:	6022      	str	r2, [r4, #0]
 800e440:	d504      	bpl.n	800e44c <__sflush_r+0x7c>
 800e442:	1c42      	adds	r2, r0, #1
 800e444:	d101      	bne.n	800e44a <__sflush_r+0x7a>
 800e446:	682b      	ldr	r3, [r5, #0]
 800e448:	b903      	cbnz	r3, 800e44c <__sflush_r+0x7c>
 800e44a:	6560      	str	r0, [r4, #84]	; 0x54
 800e44c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e44e:	602f      	str	r7, [r5, #0]
 800e450:	2900      	cmp	r1, #0
 800e452:	d0ca      	beq.n	800e3ea <__sflush_r+0x1a>
 800e454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e458:	4299      	cmp	r1, r3
 800e45a:	d002      	beq.n	800e462 <__sflush_r+0x92>
 800e45c:	4628      	mov	r0, r5
 800e45e:	f001 fabd 	bl	800f9dc <_free_r>
 800e462:	2000      	movs	r0, #0
 800e464:	6360      	str	r0, [r4, #52]	; 0x34
 800e466:	e7c1      	b.n	800e3ec <__sflush_r+0x1c>
 800e468:	6a21      	ldr	r1, [r4, #32]
 800e46a:	2301      	movs	r3, #1
 800e46c:	4628      	mov	r0, r5
 800e46e:	47b0      	blx	r6
 800e470:	1c41      	adds	r1, r0, #1
 800e472:	d1c7      	bne.n	800e404 <__sflush_r+0x34>
 800e474:	682b      	ldr	r3, [r5, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0c4      	beq.n	800e404 <__sflush_r+0x34>
 800e47a:	2b1d      	cmp	r3, #29
 800e47c:	d001      	beq.n	800e482 <__sflush_r+0xb2>
 800e47e:	2b16      	cmp	r3, #22
 800e480:	d101      	bne.n	800e486 <__sflush_r+0xb6>
 800e482:	602f      	str	r7, [r5, #0]
 800e484:	e7b1      	b.n	800e3ea <__sflush_r+0x1a>
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e48c:	81a3      	strh	r3, [r4, #12]
 800e48e:	e7ad      	b.n	800e3ec <__sflush_r+0x1c>
 800e490:	690f      	ldr	r7, [r1, #16]
 800e492:	2f00      	cmp	r7, #0
 800e494:	d0a9      	beq.n	800e3ea <__sflush_r+0x1a>
 800e496:	0793      	lsls	r3, r2, #30
 800e498:	680e      	ldr	r6, [r1, #0]
 800e49a:	bf08      	it	eq
 800e49c:	694b      	ldreq	r3, [r1, #20]
 800e49e:	600f      	str	r7, [r1, #0]
 800e4a0:	bf18      	it	ne
 800e4a2:	2300      	movne	r3, #0
 800e4a4:	eba6 0807 	sub.w	r8, r6, r7
 800e4a8:	608b      	str	r3, [r1, #8]
 800e4aa:	f1b8 0f00 	cmp.w	r8, #0
 800e4ae:	dd9c      	ble.n	800e3ea <__sflush_r+0x1a>
 800e4b0:	6a21      	ldr	r1, [r4, #32]
 800e4b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4b4:	4643      	mov	r3, r8
 800e4b6:	463a      	mov	r2, r7
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	47b0      	blx	r6
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	dc06      	bgt.n	800e4ce <__sflush_r+0xfe>
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4cc:	e78e      	b.n	800e3ec <__sflush_r+0x1c>
 800e4ce:	4407      	add	r7, r0
 800e4d0:	eba8 0800 	sub.w	r8, r8, r0
 800e4d4:	e7e9      	b.n	800e4aa <__sflush_r+0xda>
 800e4d6:	bf00      	nop
 800e4d8:	20400001 	.word	0x20400001

0800e4dc <_fflush_r>:
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	690b      	ldr	r3, [r1, #16]
 800e4e0:	4605      	mov	r5, r0
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	b913      	cbnz	r3, 800e4ec <_fflush_r+0x10>
 800e4e6:	2500      	movs	r5, #0
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	bd38      	pop	{r3, r4, r5, pc}
 800e4ec:	b118      	cbz	r0, 800e4f6 <_fflush_r+0x1a>
 800e4ee:	6983      	ldr	r3, [r0, #24]
 800e4f0:	b90b      	cbnz	r3, 800e4f6 <_fflush_r+0x1a>
 800e4f2:	f000 f899 	bl	800e628 <__sinit>
 800e4f6:	4b14      	ldr	r3, [pc, #80]	; (800e548 <_fflush_r+0x6c>)
 800e4f8:	429c      	cmp	r4, r3
 800e4fa:	d11b      	bne.n	800e534 <_fflush_r+0x58>
 800e4fc:	686c      	ldr	r4, [r5, #4]
 800e4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d0ef      	beq.n	800e4e6 <_fflush_r+0xa>
 800e506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e508:	07d0      	lsls	r0, r2, #31
 800e50a:	d404      	bmi.n	800e516 <_fflush_r+0x3a>
 800e50c:	0599      	lsls	r1, r3, #22
 800e50e:	d402      	bmi.n	800e516 <_fflush_r+0x3a>
 800e510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e512:	f000 fd0a 	bl	800ef2a <__retarget_lock_acquire_recursive>
 800e516:	4628      	mov	r0, r5
 800e518:	4621      	mov	r1, r4
 800e51a:	f7ff ff59 	bl	800e3d0 <__sflush_r>
 800e51e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e520:	07da      	lsls	r2, r3, #31
 800e522:	4605      	mov	r5, r0
 800e524:	d4e0      	bmi.n	800e4e8 <_fflush_r+0xc>
 800e526:	89a3      	ldrh	r3, [r4, #12]
 800e528:	059b      	lsls	r3, r3, #22
 800e52a:	d4dd      	bmi.n	800e4e8 <_fflush_r+0xc>
 800e52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e52e:	f000 fcfd 	bl	800ef2c <__retarget_lock_release_recursive>
 800e532:	e7d9      	b.n	800e4e8 <_fflush_r+0xc>
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <_fflush_r+0x70>)
 800e536:	429c      	cmp	r4, r3
 800e538:	d101      	bne.n	800e53e <_fflush_r+0x62>
 800e53a:	68ac      	ldr	r4, [r5, #8]
 800e53c:	e7df      	b.n	800e4fe <_fflush_r+0x22>
 800e53e:	4b04      	ldr	r3, [pc, #16]	; (800e550 <_fflush_r+0x74>)
 800e540:	429c      	cmp	r4, r3
 800e542:	bf08      	it	eq
 800e544:	68ec      	ldreq	r4, [r5, #12]
 800e546:	e7da      	b.n	800e4fe <_fflush_r+0x22>
 800e548:	08011f54 	.word	0x08011f54
 800e54c:	08011f74 	.word	0x08011f74
 800e550:	08011f34 	.word	0x08011f34

0800e554 <fflush>:
 800e554:	4601      	mov	r1, r0
 800e556:	b920      	cbnz	r0, 800e562 <fflush+0xe>
 800e558:	4b04      	ldr	r3, [pc, #16]	; (800e56c <fflush+0x18>)
 800e55a:	4905      	ldr	r1, [pc, #20]	; (800e570 <fflush+0x1c>)
 800e55c:	6818      	ldr	r0, [r3, #0]
 800e55e:	f000 b910 	b.w	800e782 <_fwalk_reent>
 800e562:	4b04      	ldr	r3, [pc, #16]	; (800e574 <fflush+0x20>)
 800e564:	6818      	ldr	r0, [r3, #0]
 800e566:	f7ff bfb9 	b.w	800e4dc <_fflush_r>
 800e56a:	bf00      	nop
 800e56c:	08011c78 	.word	0x08011c78
 800e570:	0800e4dd 	.word	0x0800e4dd
 800e574:	20000028 	.word	0x20000028

0800e578 <std>:
 800e578:	2300      	movs	r3, #0
 800e57a:	b510      	push	{r4, lr}
 800e57c:	4604      	mov	r4, r0
 800e57e:	e9c0 3300 	strd	r3, r3, [r0]
 800e582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e586:	6083      	str	r3, [r0, #8]
 800e588:	8181      	strh	r1, [r0, #12]
 800e58a:	6643      	str	r3, [r0, #100]	; 0x64
 800e58c:	81c2      	strh	r2, [r0, #14]
 800e58e:	6183      	str	r3, [r0, #24]
 800e590:	4619      	mov	r1, r3
 800e592:	2208      	movs	r2, #8
 800e594:	305c      	adds	r0, #92	; 0x5c
 800e596:	f7fd fb87 	bl	800bca8 <memset>
 800e59a:	4b05      	ldr	r3, [pc, #20]	; (800e5b0 <std+0x38>)
 800e59c:	6263      	str	r3, [r4, #36]	; 0x24
 800e59e:	4b05      	ldr	r3, [pc, #20]	; (800e5b4 <std+0x3c>)
 800e5a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x40>)
 800e5a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5a6:	4b05      	ldr	r3, [pc, #20]	; (800e5bc <std+0x44>)
 800e5a8:	6224      	str	r4, [r4, #32]
 800e5aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e5ac:	bd10      	pop	{r4, pc}
 800e5ae:	bf00      	nop
 800e5b0:	0800ff01 	.word	0x0800ff01
 800e5b4:	0800ff23 	.word	0x0800ff23
 800e5b8:	0800ff5b 	.word	0x0800ff5b
 800e5bc:	0800ff7f 	.word	0x0800ff7f

0800e5c0 <_cleanup_r>:
 800e5c0:	4901      	ldr	r1, [pc, #4]	; (800e5c8 <_cleanup_r+0x8>)
 800e5c2:	f000 b8de 	b.w	800e782 <_fwalk_reent>
 800e5c6:	bf00      	nop
 800e5c8:	0800e4dd 	.word	0x0800e4dd

0800e5cc <__sfmoreglue>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	1e4a      	subs	r2, r1, #1
 800e5d0:	2568      	movs	r5, #104	; 0x68
 800e5d2:	4355      	muls	r5, r2
 800e5d4:	460e      	mov	r6, r1
 800e5d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5da:	f001 fa4f 	bl	800fa7c <_malloc_r>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	b140      	cbz	r0, 800e5f4 <__sfmoreglue+0x28>
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e5e8:	300c      	adds	r0, #12
 800e5ea:	60a0      	str	r0, [r4, #8]
 800e5ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5f0:	f7fd fb5a 	bl	800bca8 <memset>
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}

0800e5f8 <__sfp_lock_acquire>:
 800e5f8:	4801      	ldr	r0, [pc, #4]	; (800e600 <__sfp_lock_acquire+0x8>)
 800e5fa:	f000 bc96 	b.w	800ef2a <__retarget_lock_acquire_recursive>
 800e5fe:	bf00      	nop
 800e600:	20000d84 	.word	0x20000d84

0800e604 <__sfp_lock_release>:
 800e604:	4801      	ldr	r0, [pc, #4]	; (800e60c <__sfp_lock_release+0x8>)
 800e606:	f000 bc91 	b.w	800ef2c <__retarget_lock_release_recursive>
 800e60a:	bf00      	nop
 800e60c:	20000d84 	.word	0x20000d84

0800e610 <__sinit_lock_acquire>:
 800e610:	4801      	ldr	r0, [pc, #4]	; (800e618 <__sinit_lock_acquire+0x8>)
 800e612:	f000 bc8a 	b.w	800ef2a <__retarget_lock_acquire_recursive>
 800e616:	bf00      	nop
 800e618:	20000d7f 	.word	0x20000d7f

0800e61c <__sinit_lock_release>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__sinit_lock_release+0x8>)
 800e61e:	f000 bc85 	b.w	800ef2c <__retarget_lock_release_recursive>
 800e622:	bf00      	nop
 800e624:	20000d7f 	.word	0x20000d7f

0800e628 <__sinit>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	f7ff fff0 	bl	800e610 <__sinit_lock_acquire>
 800e630:	69a3      	ldr	r3, [r4, #24]
 800e632:	b11b      	cbz	r3, 800e63c <__sinit+0x14>
 800e634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e638:	f7ff bff0 	b.w	800e61c <__sinit_lock_release>
 800e63c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e640:	6523      	str	r3, [r4, #80]	; 0x50
 800e642:	4b13      	ldr	r3, [pc, #76]	; (800e690 <__sinit+0x68>)
 800e644:	4a13      	ldr	r2, [pc, #76]	; (800e694 <__sinit+0x6c>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	62a2      	str	r2, [r4, #40]	; 0x28
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	bf04      	itt	eq
 800e64e:	2301      	moveq	r3, #1
 800e650:	61a3      	streq	r3, [r4, #24]
 800e652:	4620      	mov	r0, r4
 800e654:	f000 f820 	bl	800e698 <__sfp>
 800e658:	6060      	str	r0, [r4, #4]
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 f81c 	bl	800e698 <__sfp>
 800e660:	60a0      	str	r0, [r4, #8]
 800e662:	4620      	mov	r0, r4
 800e664:	f000 f818 	bl	800e698 <__sfp>
 800e668:	2200      	movs	r2, #0
 800e66a:	60e0      	str	r0, [r4, #12]
 800e66c:	2104      	movs	r1, #4
 800e66e:	6860      	ldr	r0, [r4, #4]
 800e670:	f7ff ff82 	bl	800e578 <std>
 800e674:	68a0      	ldr	r0, [r4, #8]
 800e676:	2201      	movs	r2, #1
 800e678:	2109      	movs	r1, #9
 800e67a:	f7ff ff7d 	bl	800e578 <std>
 800e67e:	68e0      	ldr	r0, [r4, #12]
 800e680:	2202      	movs	r2, #2
 800e682:	2112      	movs	r1, #18
 800e684:	f7ff ff78 	bl	800e578 <std>
 800e688:	2301      	movs	r3, #1
 800e68a:	61a3      	str	r3, [r4, #24]
 800e68c:	e7d2      	b.n	800e634 <__sinit+0xc>
 800e68e:	bf00      	nop
 800e690:	08011c78 	.word	0x08011c78
 800e694:	0800e5c1 	.word	0x0800e5c1

0800e698 <__sfp>:
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	4607      	mov	r7, r0
 800e69c:	f7ff ffac 	bl	800e5f8 <__sfp_lock_acquire>
 800e6a0:	4b1e      	ldr	r3, [pc, #120]	; (800e71c <__sfp+0x84>)
 800e6a2:	681e      	ldr	r6, [r3, #0]
 800e6a4:	69b3      	ldr	r3, [r6, #24]
 800e6a6:	b913      	cbnz	r3, 800e6ae <__sfp+0x16>
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	f7ff ffbd 	bl	800e628 <__sinit>
 800e6ae:	3648      	adds	r6, #72	; 0x48
 800e6b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	d503      	bpl.n	800e6c0 <__sfp+0x28>
 800e6b8:	6833      	ldr	r3, [r6, #0]
 800e6ba:	b30b      	cbz	r3, 800e700 <__sfp+0x68>
 800e6bc:	6836      	ldr	r6, [r6, #0]
 800e6be:	e7f7      	b.n	800e6b0 <__sfp+0x18>
 800e6c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6c4:	b9d5      	cbnz	r5, 800e6fc <__sfp+0x64>
 800e6c6:	4b16      	ldr	r3, [pc, #88]	; (800e720 <__sfp+0x88>)
 800e6c8:	60e3      	str	r3, [r4, #12]
 800e6ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6ce:	6665      	str	r5, [r4, #100]	; 0x64
 800e6d0:	f000 fc2a 	bl	800ef28 <__retarget_lock_init_recursive>
 800e6d4:	f7ff ff96 	bl	800e604 <__sfp_lock_release>
 800e6d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6e0:	6025      	str	r5, [r4, #0]
 800e6e2:	61a5      	str	r5, [r4, #24]
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6ec:	f7fd fadc 	bl	800bca8 <memset>
 800e6f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6fc:	3468      	adds	r4, #104	; 0x68
 800e6fe:	e7d9      	b.n	800e6b4 <__sfp+0x1c>
 800e700:	2104      	movs	r1, #4
 800e702:	4638      	mov	r0, r7
 800e704:	f7ff ff62 	bl	800e5cc <__sfmoreglue>
 800e708:	4604      	mov	r4, r0
 800e70a:	6030      	str	r0, [r6, #0]
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d1d5      	bne.n	800e6bc <__sfp+0x24>
 800e710:	f7ff ff78 	bl	800e604 <__sfp_lock_release>
 800e714:	230c      	movs	r3, #12
 800e716:	603b      	str	r3, [r7, #0]
 800e718:	e7ee      	b.n	800e6f8 <__sfp+0x60>
 800e71a:	bf00      	nop
 800e71c:	08011c78 	.word	0x08011c78
 800e720:	ffff0001 	.word	0xffff0001

0800e724 <fiprintf>:
 800e724:	b40e      	push	{r1, r2, r3}
 800e726:	b503      	push	{r0, r1, lr}
 800e728:	4601      	mov	r1, r0
 800e72a:	ab03      	add	r3, sp, #12
 800e72c:	4805      	ldr	r0, [pc, #20]	; (800e744 <fiprintf+0x20>)
 800e72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e732:	6800      	ldr	r0, [r0, #0]
 800e734:	9301      	str	r3, [sp, #4]
 800e736:	f001 fa25 	bl	800fb84 <_vfiprintf_r>
 800e73a:	b002      	add	sp, #8
 800e73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e740:	b003      	add	sp, #12
 800e742:	4770      	bx	lr
 800e744:	20000028 	.word	0x20000028

0800e748 <_fwalk>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	460f      	mov	r7, r1
 800e74e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e752:	2600      	movs	r6, #0
 800e754:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800e758:	f1b8 0801 	subs.w	r8, r8, #1
 800e75c:	d505      	bpl.n	800e76a <_fwalk+0x22>
 800e75e:	6824      	ldr	r4, [r4, #0]
 800e760:	2c00      	cmp	r4, #0
 800e762:	d1f7      	bne.n	800e754 <_fwalk+0xc>
 800e764:	4630      	mov	r0, r6
 800e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76a:	89ab      	ldrh	r3, [r5, #12]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d906      	bls.n	800e77e <_fwalk+0x36>
 800e770:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e774:	3301      	adds	r3, #1
 800e776:	d002      	beq.n	800e77e <_fwalk+0x36>
 800e778:	4628      	mov	r0, r5
 800e77a:	47b8      	blx	r7
 800e77c:	4306      	orrs	r6, r0
 800e77e:	3568      	adds	r5, #104	; 0x68
 800e780:	e7ea      	b.n	800e758 <_fwalk+0x10>

0800e782 <_fwalk_reent>:
 800e782:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e786:	4606      	mov	r6, r0
 800e788:	4688      	mov	r8, r1
 800e78a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e78e:	2700      	movs	r7, #0
 800e790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e794:	f1b9 0901 	subs.w	r9, r9, #1
 800e798:	d505      	bpl.n	800e7a6 <_fwalk_reent+0x24>
 800e79a:	6824      	ldr	r4, [r4, #0]
 800e79c:	2c00      	cmp	r4, #0
 800e79e:	d1f7      	bne.n	800e790 <_fwalk_reent+0xe>
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7a6:	89ab      	ldrh	r3, [r5, #12]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d907      	bls.n	800e7bc <_fwalk_reent+0x3a>
 800e7ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	d003      	beq.n	800e7bc <_fwalk_reent+0x3a>
 800e7b4:	4629      	mov	r1, r5
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	47c0      	blx	r8
 800e7ba:	4307      	orrs	r7, r0
 800e7bc:	3568      	adds	r5, #104	; 0x68
 800e7be:	e7e9      	b.n	800e794 <_fwalk_reent+0x12>

0800e7c0 <rshift>:
 800e7c0:	6903      	ldr	r3, [r0, #16]
 800e7c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e7c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e7ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e7ce:	f100 0414 	add.w	r4, r0, #20
 800e7d2:	dd45      	ble.n	800e860 <rshift+0xa0>
 800e7d4:	f011 011f 	ands.w	r1, r1, #31
 800e7d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7e0:	d10c      	bne.n	800e7fc <rshift+0x3c>
 800e7e2:	f100 0710 	add.w	r7, r0, #16
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	42b1      	cmp	r1, r6
 800e7ea:	d334      	bcc.n	800e856 <rshift+0x96>
 800e7ec:	1a9b      	subs	r3, r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	1eea      	subs	r2, r5, #3
 800e7f2:	4296      	cmp	r6, r2
 800e7f4:	bf38      	it	cc
 800e7f6:	2300      	movcc	r3, #0
 800e7f8:	4423      	add	r3, r4
 800e7fa:	e015      	b.n	800e828 <rshift+0x68>
 800e7fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e800:	f1c1 0820 	rsb	r8, r1, #32
 800e804:	40cf      	lsrs	r7, r1
 800e806:	f105 0e04 	add.w	lr, r5, #4
 800e80a:	46a1      	mov	r9, r4
 800e80c:	4576      	cmp	r6, lr
 800e80e:	46f4      	mov	ip, lr
 800e810:	d815      	bhi.n	800e83e <rshift+0x7e>
 800e812:	1a9b      	subs	r3, r3, r2
 800e814:	009a      	lsls	r2, r3, #2
 800e816:	3a04      	subs	r2, #4
 800e818:	3501      	adds	r5, #1
 800e81a:	42ae      	cmp	r6, r5
 800e81c:	bf38      	it	cc
 800e81e:	2200      	movcc	r2, #0
 800e820:	18a3      	adds	r3, r4, r2
 800e822:	50a7      	str	r7, [r4, r2]
 800e824:	b107      	cbz	r7, 800e828 <rshift+0x68>
 800e826:	3304      	adds	r3, #4
 800e828:	1b1a      	subs	r2, r3, r4
 800e82a:	42a3      	cmp	r3, r4
 800e82c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e830:	bf08      	it	eq
 800e832:	2300      	moveq	r3, #0
 800e834:	6102      	str	r2, [r0, #16]
 800e836:	bf08      	it	eq
 800e838:	6143      	streq	r3, [r0, #20]
 800e83a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e83e:	f8dc c000 	ldr.w	ip, [ip]
 800e842:	fa0c fc08 	lsl.w	ip, ip, r8
 800e846:	ea4c 0707 	orr.w	r7, ip, r7
 800e84a:	f849 7b04 	str.w	r7, [r9], #4
 800e84e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e852:	40cf      	lsrs	r7, r1
 800e854:	e7da      	b.n	800e80c <rshift+0x4c>
 800e856:	f851 cb04 	ldr.w	ip, [r1], #4
 800e85a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e85e:	e7c3      	b.n	800e7e8 <rshift+0x28>
 800e860:	4623      	mov	r3, r4
 800e862:	e7e1      	b.n	800e828 <rshift+0x68>

0800e864 <__hexdig_fun>:
 800e864:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e868:	2b09      	cmp	r3, #9
 800e86a:	d802      	bhi.n	800e872 <__hexdig_fun+0xe>
 800e86c:	3820      	subs	r0, #32
 800e86e:	b2c0      	uxtb	r0, r0
 800e870:	4770      	bx	lr
 800e872:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e876:	2b05      	cmp	r3, #5
 800e878:	d801      	bhi.n	800e87e <__hexdig_fun+0x1a>
 800e87a:	3847      	subs	r0, #71	; 0x47
 800e87c:	e7f7      	b.n	800e86e <__hexdig_fun+0xa>
 800e87e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e882:	2b05      	cmp	r3, #5
 800e884:	d801      	bhi.n	800e88a <__hexdig_fun+0x26>
 800e886:	3827      	subs	r0, #39	; 0x27
 800e888:	e7f1      	b.n	800e86e <__hexdig_fun+0xa>
 800e88a:	2000      	movs	r0, #0
 800e88c:	4770      	bx	lr
	...

0800e890 <__gethex>:
 800e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e894:	ed2d 8b02 	vpush	{d8}
 800e898:	b089      	sub	sp, #36	; 0x24
 800e89a:	ee08 0a10 	vmov	s16, r0
 800e89e:	9304      	str	r3, [sp, #16]
 800e8a0:	4bbc      	ldr	r3, [pc, #752]	; (800eb94 <__gethex+0x304>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	468b      	mov	fp, r1
 800e8aa:	4690      	mov	r8, r2
 800e8ac:	f7f1 fcba 	bl	8000224 <strlen>
 800e8b0:	9b01      	ldr	r3, [sp, #4]
 800e8b2:	f8db 2000 	ldr.w	r2, [fp]
 800e8b6:	4403      	add	r3, r0
 800e8b8:	4682      	mov	sl, r0
 800e8ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e8be:	9305      	str	r3, [sp, #20]
 800e8c0:	1c93      	adds	r3, r2, #2
 800e8c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e8c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e8ca:	32fe      	adds	r2, #254	; 0xfe
 800e8cc:	18d1      	adds	r1, r2, r3
 800e8ce:	461f      	mov	r7, r3
 800e8d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e8d4:	9100      	str	r1, [sp, #0]
 800e8d6:	2830      	cmp	r0, #48	; 0x30
 800e8d8:	d0f8      	beq.n	800e8cc <__gethex+0x3c>
 800e8da:	f7ff ffc3 	bl	800e864 <__hexdig_fun>
 800e8de:	4604      	mov	r4, r0
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d13a      	bne.n	800e95a <__gethex+0xca>
 800e8e4:	9901      	ldr	r1, [sp, #4]
 800e8e6:	4652      	mov	r2, sl
 800e8e8:	4638      	mov	r0, r7
 800e8ea:	f001 fb4c 	bl	800ff86 <strncmp>
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d168      	bne.n	800e9c6 <__gethex+0x136>
 800e8f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e8f8:	eb07 060a 	add.w	r6, r7, sl
 800e8fc:	f7ff ffb2 	bl	800e864 <__hexdig_fun>
 800e900:	2800      	cmp	r0, #0
 800e902:	d062      	beq.n	800e9ca <__gethex+0x13a>
 800e904:	4633      	mov	r3, r6
 800e906:	7818      	ldrb	r0, [r3, #0]
 800e908:	2830      	cmp	r0, #48	; 0x30
 800e90a:	461f      	mov	r7, r3
 800e90c:	f103 0301 	add.w	r3, r3, #1
 800e910:	d0f9      	beq.n	800e906 <__gethex+0x76>
 800e912:	f7ff ffa7 	bl	800e864 <__hexdig_fun>
 800e916:	2301      	movs	r3, #1
 800e918:	fab0 f480 	clz	r4, r0
 800e91c:	0964      	lsrs	r4, r4, #5
 800e91e:	4635      	mov	r5, r6
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	463a      	mov	r2, r7
 800e924:	4616      	mov	r6, r2
 800e926:	3201      	adds	r2, #1
 800e928:	7830      	ldrb	r0, [r6, #0]
 800e92a:	f7ff ff9b 	bl	800e864 <__hexdig_fun>
 800e92e:	2800      	cmp	r0, #0
 800e930:	d1f8      	bne.n	800e924 <__gethex+0x94>
 800e932:	9901      	ldr	r1, [sp, #4]
 800e934:	4652      	mov	r2, sl
 800e936:	4630      	mov	r0, r6
 800e938:	f001 fb25 	bl	800ff86 <strncmp>
 800e93c:	b980      	cbnz	r0, 800e960 <__gethex+0xd0>
 800e93e:	b94d      	cbnz	r5, 800e954 <__gethex+0xc4>
 800e940:	eb06 050a 	add.w	r5, r6, sl
 800e944:	462a      	mov	r2, r5
 800e946:	4616      	mov	r6, r2
 800e948:	3201      	adds	r2, #1
 800e94a:	7830      	ldrb	r0, [r6, #0]
 800e94c:	f7ff ff8a 	bl	800e864 <__hexdig_fun>
 800e950:	2800      	cmp	r0, #0
 800e952:	d1f8      	bne.n	800e946 <__gethex+0xb6>
 800e954:	1bad      	subs	r5, r5, r6
 800e956:	00ad      	lsls	r5, r5, #2
 800e958:	e004      	b.n	800e964 <__gethex+0xd4>
 800e95a:	2400      	movs	r4, #0
 800e95c:	4625      	mov	r5, r4
 800e95e:	e7e0      	b.n	800e922 <__gethex+0x92>
 800e960:	2d00      	cmp	r5, #0
 800e962:	d1f7      	bne.n	800e954 <__gethex+0xc4>
 800e964:	7833      	ldrb	r3, [r6, #0]
 800e966:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e96a:	2b50      	cmp	r3, #80	; 0x50
 800e96c:	d13b      	bne.n	800e9e6 <__gethex+0x156>
 800e96e:	7873      	ldrb	r3, [r6, #1]
 800e970:	2b2b      	cmp	r3, #43	; 0x2b
 800e972:	d02c      	beq.n	800e9ce <__gethex+0x13e>
 800e974:	2b2d      	cmp	r3, #45	; 0x2d
 800e976:	d02e      	beq.n	800e9d6 <__gethex+0x146>
 800e978:	1c71      	adds	r1, r6, #1
 800e97a:	f04f 0900 	mov.w	r9, #0
 800e97e:	7808      	ldrb	r0, [r1, #0]
 800e980:	f7ff ff70 	bl	800e864 <__hexdig_fun>
 800e984:	1e43      	subs	r3, r0, #1
 800e986:	b2db      	uxtb	r3, r3
 800e988:	2b18      	cmp	r3, #24
 800e98a:	d82c      	bhi.n	800e9e6 <__gethex+0x156>
 800e98c:	f1a0 0210 	sub.w	r2, r0, #16
 800e990:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e994:	f7ff ff66 	bl	800e864 <__hexdig_fun>
 800e998:	1e43      	subs	r3, r0, #1
 800e99a:	b2db      	uxtb	r3, r3
 800e99c:	2b18      	cmp	r3, #24
 800e99e:	d91d      	bls.n	800e9dc <__gethex+0x14c>
 800e9a0:	f1b9 0f00 	cmp.w	r9, #0
 800e9a4:	d000      	beq.n	800e9a8 <__gethex+0x118>
 800e9a6:	4252      	negs	r2, r2
 800e9a8:	4415      	add	r5, r2
 800e9aa:	f8cb 1000 	str.w	r1, [fp]
 800e9ae:	b1e4      	cbz	r4, 800e9ea <__gethex+0x15a>
 800e9b0:	9b00      	ldr	r3, [sp, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	bf14      	ite	ne
 800e9b6:	2700      	movne	r7, #0
 800e9b8:	2706      	moveq	r7, #6
 800e9ba:	4638      	mov	r0, r7
 800e9bc:	b009      	add	sp, #36	; 0x24
 800e9be:	ecbd 8b02 	vpop	{d8}
 800e9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c6:	463e      	mov	r6, r7
 800e9c8:	4625      	mov	r5, r4
 800e9ca:	2401      	movs	r4, #1
 800e9cc:	e7ca      	b.n	800e964 <__gethex+0xd4>
 800e9ce:	f04f 0900 	mov.w	r9, #0
 800e9d2:	1cb1      	adds	r1, r6, #2
 800e9d4:	e7d3      	b.n	800e97e <__gethex+0xee>
 800e9d6:	f04f 0901 	mov.w	r9, #1
 800e9da:	e7fa      	b.n	800e9d2 <__gethex+0x142>
 800e9dc:	230a      	movs	r3, #10
 800e9de:	fb03 0202 	mla	r2, r3, r2, r0
 800e9e2:	3a10      	subs	r2, #16
 800e9e4:	e7d4      	b.n	800e990 <__gethex+0x100>
 800e9e6:	4631      	mov	r1, r6
 800e9e8:	e7df      	b.n	800e9aa <__gethex+0x11a>
 800e9ea:	1bf3      	subs	r3, r6, r7
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	2b07      	cmp	r3, #7
 800e9f2:	dc0b      	bgt.n	800ea0c <__gethex+0x17c>
 800e9f4:	ee18 0a10 	vmov	r0, s16
 800e9f8:	f000 fb26 	bl	800f048 <_Balloc>
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	b940      	cbnz	r0, 800ea12 <__gethex+0x182>
 800ea00:	4b65      	ldr	r3, [pc, #404]	; (800eb98 <__gethex+0x308>)
 800ea02:	4602      	mov	r2, r0
 800ea04:	21de      	movs	r1, #222	; 0xde
 800ea06:	4865      	ldr	r0, [pc, #404]	; (800eb9c <__gethex+0x30c>)
 800ea08:	f7fe fe4a 	bl	800d6a0 <__assert_func>
 800ea0c:	3101      	adds	r1, #1
 800ea0e:	105b      	asrs	r3, r3, #1
 800ea10:	e7ee      	b.n	800e9f0 <__gethex+0x160>
 800ea12:	f100 0914 	add.w	r9, r0, #20
 800ea16:	f04f 0b00 	mov.w	fp, #0
 800ea1a:	f1ca 0301 	rsb	r3, sl, #1
 800ea1e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea22:	f8cd b000 	str.w	fp, [sp]
 800ea26:	9306      	str	r3, [sp, #24]
 800ea28:	42b7      	cmp	r7, r6
 800ea2a:	d340      	bcc.n	800eaae <__gethex+0x21e>
 800ea2c:	9802      	ldr	r0, [sp, #8]
 800ea2e:	9b00      	ldr	r3, [sp, #0]
 800ea30:	f840 3b04 	str.w	r3, [r0], #4
 800ea34:	eba0 0009 	sub.w	r0, r0, r9
 800ea38:	1080      	asrs	r0, r0, #2
 800ea3a:	0146      	lsls	r6, r0, #5
 800ea3c:	6120      	str	r0, [r4, #16]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 fbf8 	bl	800f234 <__hi0bits>
 800ea44:	1a30      	subs	r0, r6, r0
 800ea46:	f8d8 6000 	ldr.w	r6, [r8]
 800ea4a:	42b0      	cmp	r0, r6
 800ea4c:	dd63      	ble.n	800eb16 <__gethex+0x286>
 800ea4e:	1b87      	subs	r7, r0, r6
 800ea50:	4639      	mov	r1, r7
 800ea52:	4620      	mov	r0, r4
 800ea54:	f000 ff92 	bl	800f97c <__any_on>
 800ea58:	4682      	mov	sl, r0
 800ea5a:	b1a8      	cbz	r0, 800ea88 <__gethex+0x1f8>
 800ea5c:	1e7b      	subs	r3, r7, #1
 800ea5e:	1159      	asrs	r1, r3, #5
 800ea60:	f003 021f 	and.w	r2, r3, #31
 800ea64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ea68:	f04f 0a01 	mov.w	sl, #1
 800ea6c:	fa0a f202 	lsl.w	r2, sl, r2
 800ea70:	420a      	tst	r2, r1
 800ea72:	d009      	beq.n	800ea88 <__gethex+0x1f8>
 800ea74:	4553      	cmp	r3, sl
 800ea76:	dd05      	ble.n	800ea84 <__gethex+0x1f4>
 800ea78:	1eb9      	subs	r1, r7, #2
 800ea7a:	4620      	mov	r0, r4
 800ea7c:	f000 ff7e 	bl	800f97c <__any_on>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d145      	bne.n	800eb10 <__gethex+0x280>
 800ea84:	f04f 0a02 	mov.w	sl, #2
 800ea88:	4639      	mov	r1, r7
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f7ff fe98 	bl	800e7c0 <rshift>
 800ea90:	443d      	add	r5, r7
 800ea92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea96:	42ab      	cmp	r3, r5
 800ea98:	da4c      	bge.n	800eb34 <__gethex+0x2a4>
 800ea9a:	ee18 0a10 	vmov	r0, s16
 800ea9e:	4621      	mov	r1, r4
 800eaa0:	f000 fb12 	bl	800f0c8 <_Bfree>
 800eaa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	6013      	str	r3, [r2, #0]
 800eaaa:	27a3      	movs	r7, #163	; 0xa3
 800eaac:	e785      	b.n	800e9ba <__gethex+0x12a>
 800eaae:	1e73      	subs	r3, r6, #1
 800eab0:	9a05      	ldr	r2, [sp, #20]
 800eab2:	9303      	str	r3, [sp, #12]
 800eab4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d019      	beq.n	800eaf0 <__gethex+0x260>
 800eabc:	f1bb 0f20 	cmp.w	fp, #32
 800eac0:	d107      	bne.n	800ead2 <__gethex+0x242>
 800eac2:	9b02      	ldr	r3, [sp, #8]
 800eac4:	9a00      	ldr	r2, [sp, #0]
 800eac6:	f843 2b04 	str.w	r2, [r3], #4
 800eaca:	9302      	str	r3, [sp, #8]
 800eacc:	2300      	movs	r3, #0
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	469b      	mov	fp, r3
 800ead2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ead6:	f7ff fec5 	bl	800e864 <__hexdig_fun>
 800eada:	9b00      	ldr	r3, [sp, #0]
 800eadc:	f000 000f 	and.w	r0, r0, #15
 800eae0:	fa00 f00b 	lsl.w	r0, r0, fp
 800eae4:	4303      	orrs	r3, r0
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	f10b 0b04 	add.w	fp, fp, #4
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	e00d      	b.n	800eb0c <__gethex+0x27c>
 800eaf0:	9b03      	ldr	r3, [sp, #12]
 800eaf2:	9a06      	ldr	r2, [sp, #24]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	42bb      	cmp	r3, r7
 800eaf8:	d3e0      	bcc.n	800eabc <__gethex+0x22c>
 800eafa:	4618      	mov	r0, r3
 800eafc:	9901      	ldr	r1, [sp, #4]
 800eafe:	9307      	str	r3, [sp, #28]
 800eb00:	4652      	mov	r2, sl
 800eb02:	f001 fa40 	bl	800ff86 <strncmp>
 800eb06:	9b07      	ldr	r3, [sp, #28]
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d1d7      	bne.n	800eabc <__gethex+0x22c>
 800eb0c:	461e      	mov	r6, r3
 800eb0e:	e78b      	b.n	800ea28 <__gethex+0x198>
 800eb10:	f04f 0a03 	mov.w	sl, #3
 800eb14:	e7b8      	b.n	800ea88 <__gethex+0x1f8>
 800eb16:	da0a      	bge.n	800eb2e <__gethex+0x29e>
 800eb18:	1a37      	subs	r7, r6, r0
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	ee18 0a10 	vmov	r0, s16
 800eb20:	463a      	mov	r2, r7
 800eb22:	f000 fced 	bl	800f500 <__lshift>
 800eb26:	1bed      	subs	r5, r5, r7
 800eb28:	4604      	mov	r4, r0
 800eb2a:	f100 0914 	add.w	r9, r0, #20
 800eb2e:	f04f 0a00 	mov.w	sl, #0
 800eb32:	e7ae      	b.n	800ea92 <__gethex+0x202>
 800eb34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb38:	42a8      	cmp	r0, r5
 800eb3a:	dd72      	ble.n	800ec22 <__gethex+0x392>
 800eb3c:	1b45      	subs	r5, r0, r5
 800eb3e:	42ae      	cmp	r6, r5
 800eb40:	dc36      	bgt.n	800ebb0 <__gethex+0x320>
 800eb42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d02a      	beq.n	800eba0 <__gethex+0x310>
 800eb4a:	2b03      	cmp	r3, #3
 800eb4c:	d02c      	beq.n	800eba8 <__gethex+0x318>
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d115      	bne.n	800eb7e <__gethex+0x2ee>
 800eb52:	42ae      	cmp	r6, r5
 800eb54:	d113      	bne.n	800eb7e <__gethex+0x2ee>
 800eb56:	2e01      	cmp	r6, #1
 800eb58:	d10b      	bne.n	800eb72 <__gethex+0x2e2>
 800eb5a:	9a04      	ldr	r2, [sp, #16]
 800eb5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eb60:	6013      	str	r3, [r2, #0]
 800eb62:	2301      	movs	r3, #1
 800eb64:	6123      	str	r3, [r4, #16]
 800eb66:	f8c9 3000 	str.w	r3, [r9]
 800eb6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb6c:	2762      	movs	r7, #98	; 0x62
 800eb6e:	601c      	str	r4, [r3, #0]
 800eb70:	e723      	b.n	800e9ba <__gethex+0x12a>
 800eb72:	1e71      	subs	r1, r6, #1
 800eb74:	4620      	mov	r0, r4
 800eb76:	f000 ff01 	bl	800f97c <__any_on>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d1ed      	bne.n	800eb5a <__gethex+0x2ca>
 800eb7e:	ee18 0a10 	vmov	r0, s16
 800eb82:	4621      	mov	r1, r4
 800eb84:	f000 faa0 	bl	800f0c8 <_Bfree>
 800eb88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	6013      	str	r3, [r2, #0]
 800eb8e:	2750      	movs	r7, #80	; 0x50
 800eb90:	e713      	b.n	800e9ba <__gethex+0x12a>
 800eb92:	bf00      	nop
 800eb94:	08012000 	.word	0x08012000
 800eb98:	08011f21 	.word	0x08011f21
 800eb9c:	08011f94 	.word	0x08011f94
 800eba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1eb      	bne.n	800eb7e <__gethex+0x2ee>
 800eba6:	e7d8      	b.n	800eb5a <__gethex+0x2ca>
 800eba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1d5      	bne.n	800eb5a <__gethex+0x2ca>
 800ebae:	e7e6      	b.n	800eb7e <__gethex+0x2ee>
 800ebb0:	1e6f      	subs	r7, r5, #1
 800ebb2:	f1ba 0f00 	cmp.w	sl, #0
 800ebb6:	d131      	bne.n	800ec1c <__gethex+0x38c>
 800ebb8:	b127      	cbz	r7, 800ebc4 <__gethex+0x334>
 800ebba:	4639      	mov	r1, r7
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f000 fedd 	bl	800f97c <__any_on>
 800ebc2:	4682      	mov	sl, r0
 800ebc4:	117b      	asrs	r3, r7, #5
 800ebc6:	2101      	movs	r1, #1
 800ebc8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ebcc:	f007 071f 	and.w	r7, r7, #31
 800ebd0:	fa01 f707 	lsl.w	r7, r1, r7
 800ebd4:	421f      	tst	r7, r3
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	4620      	mov	r0, r4
 800ebda:	bf18      	it	ne
 800ebdc:	f04a 0a02 	orrne.w	sl, sl, #2
 800ebe0:	1b76      	subs	r6, r6, r5
 800ebe2:	f7ff fded 	bl	800e7c0 <rshift>
 800ebe6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ebea:	2702      	movs	r7, #2
 800ebec:	f1ba 0f00 	cmp.w	sl, #0
 800ebf0:	d048      	beq.n	800ec84 <__gethex+0x3f4>
 800ebf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d015      	beq.n	800ec26 <__gethex+0x396>
 800ebfa:	2b03      	cmp	r3, #3
 800ebfc:	d017      	beq.n	800ec2e <__gethex+0x39e>
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d109      	bne.n	800ec16 <__gethex+0x386>
 800ec02:	f01a 0f02 	tst.w	sl, #2
 800ec06:	d006      	beq.n	800ec16 <__gethex+0x386>
 800ec08:	f8d9 0000 	ldr.w	r0, [r9]
 800ec0c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec10:	f01a 0f01 	tst.w	sl, #1
 800ec14:	d10e      	bne.n	800ec34 <__gethex+0x3a4>
 800ec16:	f047 0710 	orr.w	r7, r7, #16
 800ec1a:	e033      	b.n	800ec84 <__gethex+0x3f4>
 800ec1c:	f04f 0a01 	mov.w	sl, #1
 800ec20:	e7d0      	b.n	800ebc4 <__gethex+0x334>
 800ec22:	2701      	movs	r7, #1
 800ec24:	e7e2      	b.n	800ebec <__gethex+0x35c>
 800ec26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec28:	f1c3 0301 	rsb	r3, r3, #1
 800ec2c:	9315      	str	r3, [sp, #84]	; 0x54
 800ec2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d0f0      	beq.n	800ec16 <__gethex+0x386>
 800ec34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec38:	f104 0314 	add.w	r3, r4, #20
 800ec3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec44:	f04f 0c00 	mov.w	ip, #0
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec4e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec52:	d01c      	beq.n	800ec8e <__gethex+0x3fe>
 800ec54:	3201      	adds	r2, #1
 800ec56:	6002      	str	r2, [r0, #0]
 800ec58:	2f02      	cmp	r7, #2
 800ec5a:	f104 0314 	add.w	r3, r4, #20
 800ec5e:	d13f      	bne.n	800ece0 <__gethex+0x450>
 800ec60:	f8d8 2000 	ldr.w	r2, [r8]
 800ec64:	3a01      	subs	r2, #1
 800ec66:	42b2      	cmp	r2, r6
 800ec68:	d10a      	bne.n	800ec80 <__gethex+0x3f0>
 800ec6a:	1171      	asrs	r1, r6, #5
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec72:	f006 061f 	and.w	r6, r6, #31
 800ec76:	fa02 f606 	lsl.w	r6, r2, r6
 800ec7a:	421e      	tst	r6, r3
 800ec7c:	bf18      	it	ne
 800ec7e:	4617      	movne	r7, r2
 800ec80:	f047 0720 	orr.w	r7, r7, #32
 800ec84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec86:	601c      	str	r4, [r3, #0]
 800ec88:	9b04      	ldr	r3, [sp, #16]
 800ec8a:	601d      	str	r5, [r3, #0]
 800ec8c:	e695      	b.n	800e9ba <__gethex+0x12a>
 800ec8e:	4299      	cmp	r1, r3
 800ec90:	f843 cc04 	str.w	ip, [r3, #-4]
 800ec94:	d8d8      	bhi.n	800ec48 <__gethex+0x3b8>
 800ec96:	68a3      	ldr	r3, [r4, #8]
 800ec98:	459b      	cmp	fp, r3
 800ec9a:	db19      	blt.n	800ecd0 <__gethex+0x440>
 800ec9c:	6861      	ldr	r1, [r4, #4]
 800ec9e:	ee18 0a10 	vmov	r0, s16
 800eca2:	3101      	adds	r1, #1
 800eca4:	f000 f9d0 	bl	800f048 <_Balloc>
 800eca8:	4681      	mov	r9, r0
 800ecaa:	b918      	cbnz	r0, 800ecb4 <__gethex+0x424>
 800ecac:	4b1a      	ldr	r3, [pc, #104]	; (800ed18 <__gethex+0x488>)
 800ecae:	4602      	mov	r2, r0
 800ecb0:	2184      	movs	r1, #132	; 0x84
 800ecb2:	e6a8      	b.n	800ea06 <__gethex+0x176>
 800ecb4:	6922      	ldr	r2, [r4, #16]
 800ecb6:	3202      	adds	r2, #2
 800ecb8:	f104 010c 	add.w	r1, r4, #12
 800ecbc:	0092      	lsls	r2, r2, #2
 800ecbe:	300c      	adds	r0, #12
 800ecc0:	f000 f9b4 	bl	800f02c <memcpy>
 800ecc4:	4621      	mov	r1, r4
 800ecc6:	ee18 0a10 	vmov	r0, s16
 800ecca:	f000 f9fd 	bl	800f0c8 <_Bfree>
 800ecce:	464c      	mov	r4, r9
 800ecd0:	6923      	ldr	r3, [r4, #16]
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ecd8:	6122      	str	r2, [r4, #16]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	615a      	str	r2, [r3, #20]
 800ecde:	e7bb      	b.n	800ec58 <__gethex+0x3c8>
 800ece0:	6922      	ldr	r2, [r4, #16]
 800ece2:	455a      	cmp	r2, fp
 800ece4:	dd0b      	ble.n	800ecfe <__gethex+0x46e>
 800ece6:	2101      	movs	r1, #1
 800ece8:	4620      	mov	r0, r4
 800ecea:	f7ff fd69 	bl	800e7c0 <rshift>
 800ecee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ecf2:	3501      	adds	r5, #1
 800ecf4:	42ab      	cmp	r3, r5
 800ecf6:	f6ff aed0 	blt.w	800ea9a <__gethex+0x20a>
 800ecfa:	2701      	movs	r7, #1
 800ecfc:	e7c0      	b.n	800ec80 <__gethex+0x3f0>
 800ecfe:	f016 061f 	ands.w	r6, r6, #31
 800ed02:	d0fa      	beq.n	800ecfa <__gethex+0x46a>
 800ed04:	449a      	add	sl, r3
 800ed06:	f1c6 0620 	rsb	r6, r6, #32
 800ed0a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ed0e:	f000 fa91 	bl	800f234 <__hi0bits>
 800ed12:	42b0      	cmp	r0, r6
 800ed14:	dbe7      	blt.n	800ece6 <__gethex+0x456>
 800ed16:	e7f0      	b.n	800ecfa <__gethex+0x46a>
 800ed18:	08011f21 	.word	0x08011f21

0800ed1c <L_shift>:
 800ed1c:	f1c2 0208 	rsb	r2, r2, #8
 800ed20:	0092      	lsls	r2, r2, #2
 800ed22:	b570      	push	{r4, r5, r6, lr}
 800ed24:	f1c2 0620 	rsb	r6, r2, #32
 800ed28:	6843      	ldr	r3, [r0, #4]
 800ed2a:	6804      	ldr	r4, [r0, #0]
 800ed2c:	fa03 f506 	lsl.w	r5, r3, r6
 800ed30:	432c      	orrs	r4, r5
 800ed32:	40d3      	lsrs	r3, r2
 800ed34:	6004      	str	r4, [r0, #0]
 800ed36:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed3a:	4288      	cmp	r0, r1
 800ed3c:	d3f4      	bcc.n	800ed28 <L_shift+0xc>
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}

0800ed40 <__match>:
 800ed40:	b530      	push	{r4, r5, lr}
 800ed42:	6803      	ldr	r3, [r0, #0]
 800ed44:	3301      	adds	r3, #1
 800ed46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed4a:	b914      	cbnz	r4, 800ed52 <__match+0x12>
 800ed4c:	6003      	str	r3, [r0, #0]
 800ed4e:	2001      	movs	r0, #1
 800ed50:	bd30      	pop	{r4, r5, pc}
 800ed52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed56:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ed5a:	2d19      	cmp	r5, #25
 800ed5c:	bf98      	it	ls
 800ed5e:	3220      	addls	r2, #32
 800ed60:	42a2      	cmp	r2, r4
 800ed62:	d0f0      	beq.n	800ed46 <__match+0x6>
 800ed64:	2000      	movs	r0, #0
 800ed66:	e7f3      	b.n	800ed50 <__match+0x10>

0800ed68 <__hexnan>:
 800ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed6c:	680b      	ldr	r3, [r1, #0]
 800ed6e:	6801      	ldr	r1, [r0, #0]
 800ed70:	115e      	asrs	r6, r3, #5
 800ed72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ed76:	f013 031f 	ands.w	r3, r3, #31
 800ed7a:	b087      	sub	sp, #28
 800ed7c:	bf18      	it	ne
 800ed7e:	3604      	addne	r6, #4
 800ed80:	2500      	movs	r5, #0
 800ed82:	1f37      	subs	r7, r6, #4
 800ed84:	4682      	mov	sl, r0
 800ed86:	4690      	mov	r8, r2
 800ed88:	9301      	str	r3, [sp, #4]
 800ed8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ed8e:	46b9      	mov	r9, r7
 800ed90:	463c      	mov	r4, r7
 800ed92:	9502      	str	r5, [sp, #8]
 800ed94:	46ab      	mov	fp, r5
 800ed96:	784a      	ldrb	r2, [r1, #1]
 800ed98:	1c4b      	adds	r3, r1, #1
 800ed9a:	9303      	str	r3, [sp, #12]
 800ed9c:	b342      	cbz	r2, 800edf0 <__hexnan+0x88>
 800ed9e:	4610      	mov	r0, r2
 800eda0:	9105      	str	r1, [sp, #20]
 800eda2:	9204      	str	r2, [sp, #16]
 800eda4:	f7ff fd5e 	bl	800e864 <__hexdig_fun>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d14f      	bne.n	800ee4c <__hexnan+0xe4>
 800edac:	9a04      	ldr	r2, [sp, #16]
 800edae:	9905      	ldr	r1, [sp, #20]
 800edb0:	2a20      	cmp	r2, #32
 800edb2:	d818      	bhi.n	800ede6 <__hexnan+0x7e>
 800edb4:	9b02      	ldr	r3, [sp, #8]
 800edb6:	459b      	cmp	fp, r3
 800edb8:	dd13      	ble.n	800ede2 <__hexnan+0x7a>
 800edba:	454c      	cmp	r4, r9
 800edbc:	d206      	bcs.n	800edcc <__hexnan+0x64>
 800edbe:	2d07      	cmp	r5, #7
 800edc0:	dc04      	bgt.n	800edcc <__hexnan+0x64>
 800edc2:	462a      	mov	r2, r5
 800edc4:	4649      	mov	r1, r9
 800edc6:	4620      	mov	r0, r4
 800edc8:	f7ff ffa8 	bl	800ed1c <L_shift>
 800edcc:	4544      	cmp	r4, r8
 800edce:	d950      	bls.n	800ee72 <__hexnan+0x10a>
 800edd0:	2300      	movs	r3, #0
 800edd2:	f1a4 0904 	sub.w	r9, r4, #4
 800edd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800edda:	f8cd b008 	str.w	fp, [sp, #8]
 800edde:	464c      	mov	r4, r9
 800ede0:	461d      	mov	r5, r3
 800ede2:	9903      	ldr	r1, [sp, #12]
 800ede4:	e7d7      	b.n	800ed96 <__hexnan+0x2e>
 800ede6:	2a29      	cmp	r2, #41	; 0x29
 800ede8:	d156      	bne.n	800ee98 <__hexnan+0x130>
 800edea:	3102      	adds	r1, #2
 800edec:	f8ca 1000 	str.w	r1, [sl]
 800edf0:	f1bb 0f00 	cmp.w	fp, #0
 800edf4:	d050      	beq.n	800ee98 <__hexnan+0x130>
 800edf6:	454c      	cmp	r4, r9
 800edf8:	d206      	bcs.n	800ee08 <__hexnan+0xa0>
 800edfa:	2d07      	cmp	r5, #7
 800edfc:	dc04      	bgt.n	800ee08 <__hexnan+0xa0>
 800edfe:	462a      	mov	r2, r5
 800ee00:	4649      	mov	r1, r9
 800ee02:	4620      	mov	r0, r4
 800ee04:	f7ff ff8a 	bl	800ed1c <L_shift>
 800ee08:	4544      	cmp	r4, r8
 800ee0a:	d934      	bls.n	800ee76 <__hexnan+0x10e>
 800ee0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ee10:	4623      	mov	r3, r4
 800ee12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee1a:	429f      	cmp	r7, r3
 800ee1c:	d2f9      	bcs.n	800ee12 <__hexnan+0xaa>
 800ee1e:	1b3b      	subs	r3, r7, r4
 800ee20:	f023 0303 	bic.w	r3, r3, #3
 800ee24:	3304      	adds	r3, #4
 800ee26:	3401      	adds	r4, #1
 800ee28:	3e03      	subs	r6, #3
 800ee2a:	42b4      	cmp	r4, r6
 800ee2c:	bf88      	it	hi
 800ee2e:	2304      	movhi	r3, #4
 800ee30:	4443      	add	r3, r8
 800ee32:	2200      	movs	r2, #0
 800ee34:	f843 2b04 	str.w	r2, [r3], #4
 800ee38:	429f      	cmp	r7, r3
 800ee3a:	d2fb      	bcs.n	800ee34 <__hexnan+0xcc>
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	b91b      	cbnz	r3, 800ee48 <__hexnan+0xe0>
 800ee40:	4547      	cmp	r7, r8
 800ee42:	d127      	bne.n	800ee94 <__hexnan+0x12c>
 800ee44:	2301      	movs	r3, #1
 800ee46:	603b      	str	r3, [r7, #0]
 800ee48:	2005      	movs	r0, #5
 800ee4a:	e026      	b.n	800ee9a <__hexnan+0x132>
 800ee4c:	3501      	adds	r5, #1
 800ee4e:	2d08      	cmp	r5, #8
 800ee50:	f10b 0b01 	add.w	fp, fp, #1
 800ee54:	dd06      	ble.n	800ee64 <__hexnan+0xfc>
 800ee56:	4544      	cmp	r4, r8
 800ee58:	d9c3      	bls.n	800ede2 <__hexnan+0x7a>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee60:	2501      	movs	r5, #1
 800ee62:	3c04      	subs	r4, #4
 800ee64:	6822      	ldr	r2, [r4, #0]
 800ee66:	f000 000f 	and.w	r0, r0, #15
 800ee6a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ee6e:	6022      	str	r2, [r4, #0]
 800ee70:	e7b7      	b.n	800ede2 <__hexnan+0x7a>
 800ee72:	2508      	movs	r5, #8
 800ee74:	e7b5      	b.n	800ede2 <__hexnan+0x7a>
 800ee76:	9b01      	ldr	r3, [sp, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d0df      	beq.n	800ee3c <__hexnan+0xd4>
 800ee7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ee80:	f1c3 0320 	rsb	r3, r3, #32
 800ee84:	fa22 f303 	lsr.w	r3, r2, r3
 800ee88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ee8c:	401a      	ands	r2, r3
 800ee8e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ee92:	e7d3      	b.n	800ee3c <__hexnan+0xd4>
 800ee94:	3f04      	subs	r7, #4
 800ee96:	e7d1      	b.n	800ee3c <__hexnan+0xd4>
 800ee98:	2004      	movs	r0, #4
 800ee9a:	b007      	add	sp, #28
 800ee9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eea0 <_getc_r>:
 800eea0:	b538      	push	{r3, r4, r5, lr}
 800eea2:	460c      	mov	r4, r1
 800eea4:	4605      	mov	r5, r0
 800eea6:	b118      	cbz	r0, 800eeb0 <_getc_r+0x10>
 800eea8:	6983      	ldr	r3, [r0, #24]
 800eeaa:	b90b      	cbnz	r3, 800eeb0 <_getc_r+0x10>
 800eeac:	f7ff fbbc 	bl	800e628 <__sinit>
 800eeb0:	4b18      	ldr	r3, [pc, #96]	; (800ef14 <_getc_r+0x74>)
 800eeb2:	429c      	cmp	r4, r3
 800eeb4:	d11e      	bne.n	800eef4 <_getc_r+0x54>
 800eeb6:	686c      	ldr	r4, [r5, #4]
 800eeb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eeba:	07d8      	lsls	r0, r3, #31
 800eebc:	d405      	bmi.n	800eeca <_getc_r+0x2a>
 800eebe:	89a3      	ldrh	r3, [r4, #12]
 800eec0:	0599      	lsls	r1, r3, #22
 800eec2:	d402      	bmi.n	800eeca <_getc_r+0x2a>
 800eec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eec6:	f000 f830 	bl	800ef2a <__retarget_lock_acquire_recursive>
 800eeca:	6863      	ldr	r3, [r4, #4]
 800eecc:	3b01      	subs	r3, #1
 800eece:	2b00      	cmp	r3, #0
 800eed0:	6063      	str	r3, [r4, #4]
 800eed2:	da19      	bge.n	800ef08 <_getc_r+0x68>
 800eed4:	4628      	mov	r0, r5
 800eed6:	4621      	mov	r1, r4
 800eed8:	f000 ffcc 	bl	800fe74 <__srget_r>
 800eedc:	4605      	mov	r5, r0
 800eede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eee0:	07da      	lsls	r2, r3, #31
 800eee2:	d405      	bmi.n	800eef0 <_getc_r+0x50>
 800eee4:	89a3      	ldrh	r3, [r4, #12]
 800eee6:	059b      	lsls	r3, r3, #22
 800eee8:	d402      	bmi.n	800eef0 <_getc_r+0x50>
 800eeea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eeec:	f000 f81e 	bl	800ef2c <__retarget_lock_release_recursive>
 800eef0:	4628      	mov	r0, r5
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
 800eef4:	4b08      	ldr	r3, [pc, #32]	; (800ef18 <_getc_r+0x78>)
 800eef6:	429c      	cmp	r4, r3
 800eef8:	d101      	bne.n	800eefe <_getc_r+0x5e>
 800eefa:	68ac      	ldr	r4, [r5, #8]
 800eefc:	e7dc      	b.n	800eeb8 <_getc_r+0x18>
 800eefe:	4b07      	ldr	r3, [pc, #28]	; (800ef1c <_getc_r+0x7c>)
 800ef00:	429c      	cmp	r4, r3
 800ef02:	bf08      	it	eq
 800ef04:	68ec      	ldreq	r4, [r5, #12]
 800ef06:	e7d7      	b.n	800eeb8 <_getc_r+0x18>
 800ef08:	6823      	ldr	r3, [r4, #0]
 800ef0a:	1c5a      	adds	r2, r3, #1
 800ef0c:	6022      	str	r2, [r4, #0]
 800ef0e:	781d      	ldrb	r5, [r3, #0]
 800ef10:	e7e5      	b.n	800eede <_getc_r+0x3e>
 800ef12:	bf00      	nop
 800ef14:	08011f54 	.word	0x08011f54
 800ef18:	08011f74 	.word	0x08011f74
 800ef1c:	08011f34 	.word	0x08011f34

0800ef20 <_localeconv_r>:
 800ef20:	4800      	ldr	r0, [pc, #0]	; (800ef24 <_localeconv_r+0x4>)
 800ef22:	4770      	bx	lr
 800ef24:	20000180 	.word	0x20000180

0800ef28 <__retarget_lock_init_recursive>:
 800ef28:	4770      	bx	lr

0800ef2a <__retarget_lock_acquire_recursive>:
 800ef2a:	4770      	bx	lr

0800ef2c <__retarget_lock_release_recursive>:
 800ef2c:	4770      	bx	lr

0800ef2e <__swhatbuf_r>:
 800ef2e:	b570      	push	{r4, r5, r6, lr}
 800ef30:	460e      	mov	r6, r1
 800ef32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef36:	2900      	cmp	r1, #0
 800ef38:	b096      	sub	sp, #88	; 0x58
 800ef3a:	4614      	mov	r4, r2
 800ef3c:	461d      	mov	r5, r3
 800ef3e:	da07      	bge.n	800ef50 <__swhatbuf_r+0x22>
 800ef40:	2300      	movs	r3, #0
 800ef42:	602b      	str	r3, [r5, #0]
 800ef44:	89b3      	ldrh	r3, [r6, #12]
 800ef46:	061a      	lsls	r2, r3, #24
 800ef48:	d410      	bmi.n	800ef6c <__swhatbuf_r+0x3e>
 800ef4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef4e:	e00e      	b.n	800ef6e <__swhatbuf_r+0x40>
 800ef50:	466a      	mov	r2, sp
 800ef52:	f001 f861 	bl	8010018 <_fstat_r>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	dbf2      	blt.n	800ef40 <__swhatbuf_r+0x12>
 800ef5a:	9a01      	ldr	r2, [sp, #4]
 800ef5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef64:	425a      	negs	r2, r3
 800ef66:	415a      	adcs	r2, r3
 800ef68:	602a      	str	r2, [r5, #0]
 800ef6a:	e7ee      	b.n	800ef4a <__swhatbuf_r+0x1c>
 800ef6c:	2340      	movs	r3, #64	; 0x40
 800ef6e:	2000      	movs	r0, #0
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	b016      	add	sp, #88	; 0x58
 800ef74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef78 <__smakebuf_r>:
 800ef78:	898b      	ldrh	r3, [r1, #12]
 800ef7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef7c:	079d      	lsls	r5, r3, #30
 800ef7e:	4606      	mov	r6, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	d507      	bpl.n	800ef94 <__smakebuf_r+0x1c>
 800ef84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	6123      	str	r3, [r4, #16]
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	6163      	str	r3, [r4, #20]
 800ef90:	b002      	add	sp, #8
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	ab01      	add	r3, sp, #4
 800ef96:	466a      	mov	r2, sp
 800ef98:	f7ff ffc9 	bl	800ef2e <__swhatbuf_r>
 800ef9c:	9900      	ldr	r1, [sp, #0]
 800ef9e:	4605      	mov	r5, r0
 800efa0:	4630      	mov	r0, r6
 800efa2:	f000 fd6b 	bl	800fa7c <_malloc_r>
 800efa6:	b948      	cbnz	r0, 800efbc <__smakebuf_r+0x44>
 800efa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efac:	059a      	lsls	r2, r3, #22
 800efae:	d4ef      	bmi.n	800ef90 <__smakebuf_r+0x18>
 800efb0:	f023 0303 	bic.w	r3, r3, #3
 800efb4:	f043 0302 	orr.w	r3, r3, #2
 800efb8:	81a3      	strh	r3, [r4, #12]
 800efba:	e7e3      	b.n	800ef84 <__smakebuf_r+0xc>
 800efbc:	4b0d      	ldr	r3, [pc, #52]	; (800eff4 <__smakebuf_r+0x7c>)
 800efbe:	62b3      	str	r3, [r6, #40]	; 0x28
 800efc0:	89a3      	ldrh	r3, [r4, #12]
 800efc2:	6020      	str	r0, [r4, #0]
 800efc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efc8:	81a3      	strh	r3, [r4, #12]
 800efca:	9b00      	ldr	r3, [sp, #0]
 800efcc:	6163      	str	r3, [r4, #20]
 800efce:	9b01      	ldr	r3, [sp, #4]
 800efd0:	6120      	str	r0, [r4, #16]
 800efd2:	b15b      	cbz	r3, 800efec <__smakebuf_r+0x74>
 800efd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efd8:	4630      	mov	r0, r6
 800efda:	f001 f82f 	bl	801003c <_isatty_r>
 800efde:	b128      	cbz	r0, 800efec <__smakebuf_r+0x74>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	f023 0303 	bic.w	r3, r3, #3
 800efe6:	f043 0301 	orr.w	r3, r3, #1
 800efea:	81a3      	strh	r3, [r4, #12]
 800efec:	89a0      	ldrh	r0, [r4, #12]
 800efee:	4305      	orrs	r5, r0
 800eff0:	81a5      	strh	r5, [r4, #12]
 800eff2:	e7cd      	b.n	800ef90 <__smakebuf_r+0x18>
 800eff4:	0800e5c1 	.word	0x0800e5c1

0800eff8 <malloc>:
 800eff8:	4b02      	ldr	r3, [pc, #8]	; (800f004 <malloc+0xc>)
 800effa:	4601      	mov	r1, r0
 800effc:	6818      	ldr	r0, [r3, #0]
 800effe:	f000 bd3d 	b.w	800fa7c <_malloc_r>
 800f002:	bf00      	nop
 800f004:	20000028 	.word	0x20000028

0800f008 <__ascii_mbtowc>:
 800f008:	b082      	sub	sp, #8
 800f00a:	b901      	cbnz	r1, 800f00e <__ascii_mbtowc+0x6>
 800f00c:	a901      	add	r1, sp, #4
 800f00e:	b142      	cbz	r2, 800f022 <__ascii_mbtowc+0x1a>
 800f010:	b14b      	cbz	r3, 800f026 <__ascii_mbtowc+0x1e>
 800f012:	7813      	ldrb	r3, [r2, #0]
 800f014:	600b      	str	r3, [r1, #0]
 800f016:	7812      	ldrb	r2, [r2, #0]
 800f018:	1e10      	subs	r0, r2, #0
 800f01a:	bf18      	it	ne
 800f01c:	2001      	movne	r0, #1
 800f01e:	b002      	add	sp, #8
 800f020:	4770      	bx	lr
 800f022:	4610      	mov	r0, r2
 800f024:	e7fb      	b.n	800f01e <__ascii_mbtowc+0x16>
 800f026:	f06f 0001 	mvn.w	r0, #1
 800f02a:	e7f8      	b.n	800f01e <__ascii_mbtowc+0x16>

0800f02c <memcpy>:
 800f02c:	440a      	add	r2, r1
 800f02e:	4291      	cmp	r1, r2
 800f030:	f100 33ff 	add.w	r3, r0, #4294967295
 800f034:	d100      	bne.n	800f038 <memcpy+0xc>
 800f036:	4770      	bx	lr
 800f038:	b510      	push	{r4, lr}
 800f03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f03e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f042:	4291      	cmp	r1, r2
 800f044:	d1f9      	bne.n	800f03a <memcpy+0xe>
 800f046:	bd10      	pop	{r4, pc}

0800f048 <_Balloc>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f04c:	4604      	mov	r4, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	b976      	cbnz	r6, 800f070 <_Balloc+0x28>
 800f052:	2010      	movs	r0, #16
 800f054:	f7ff ffd0 	bl	800eff8 <malloc>
 800f058:	4602      	mov	r2, r0
 800f05a:	6260      	str	r0, [r4, #36]	; 0x24
 800f05c:	b920      	cbnz	r0, 800f068 <_Balloc+0x20>
 800f05e:	4b18      	ldr	r3, [pc, #96]	; (800f0c0 <_Balloc+0x78>)
 800f060:	4818      	ldr	r0, [pc, #96]	; (800f0c4 <_Balloc+0x7c>)
 800f062:	2166      	movs	r1, #102	; 0x66
 800f064:	f7fe fb1c 	bl	800d6a0 <__assert_func>
 800f068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f06c:	6006      	str	r6, [r0, #0]
 800f06e:	60c6      	str	r6, [r0, #12]
 800f070:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f072:	68f3      	ldr	r3, [r6, #12]
 800f074:	b183      	cbz	r3, 800f098 <_Balloc+0x50>
 800f076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f07e:	b9b8      	cbnz	r0, 800f0b0 <_Balloc+0x68>
 800f080:	2101      	movs	r1, #1
 800f082:	fa01 f605 	lsl.w	r6, r1, r5
 800f086:	1d72      	adds	r2, r6, #5
 800f088:	0092      	lsls	r2, r2, #2
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 fc97 	bl	800f9be <_calloc_r>
 800f090:	b160      	cbz	r0, 800f0ac <_Balloc+0x64>
 800f092:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f096:	e00e      	b.n	800f0b6 <_Balloc+0x6e>
 800f098:	2221      	movs	r2, #33	; 0x21
 800f09a:	2104      	movs	r1, #4
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 fc8e 	bl	800f9be <_calloc_r>
 800f0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0a4:	60f0      	str	r0, [r6, #12]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1e4      	bne.n	800f076 <_Balloc+0x2e>
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	6802      	ldr	r2, [r0, #0]
 800f0b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0bc:	e7f7      	b.n	800f0ae <_Balloc+0x66>
 800f0be:	bf00      	nop
 800f0c0:	08011d00 	.word	0x08011d00
 800f0c4:	08012014 	.word	0x08012014

0800f0c8 <_Bfree>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	b976      	cbnz	r6, 800f0f0 <_Bfree+0x28>
 800f0d2:	2010      	movs	r0, #16
 800f0d4:	f7ff ff90 	bl	800eff8 <malloc>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	6268      	str	r0, [r5, #36]	; 0x24
 800f0dc:	b920      	cbnz	r0, 800f0e8 <_Bfree+0x20>
 800f0de:	4b09      	ldr	r3, [pc, #36]	; (800f104 <_Bfree+0x3c>)
 800f0e0:	4809      	ldr	r0, [pc, #36]	; (800f108 <_Bfree+0x40>)
 800f0e2:	218a      	movs	r1, #138	; 0x8a
 800f0e4:	f7fe fadc 	bl	800d6a0 <__assert_func>
 800f0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0ec:	6006      	str	r6, [r0, #0]
 800f0ee:	60c6      	str	r6, [r0, #12]
 800f0f0:	b13c      	cbz	r4, 800f102 <_Bfree+0x3a>
 800f0f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0f4:	6862      	ldr	r2, [r4, #4]
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0fc:	6021      	str	r1, [r4, #0]
 800f0fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	08011d00 	.word	0x08011d00
 800f108:	08012014 	.word	0x08012014

0800f10c <__multadd>:
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	690e      	ldr	r6, [r1, #16]
 800f112:	4607      	mov	r7, r0
 800f114:	4698      	mov	r8, r3
 800f116:	460c      	mov	r4, r1
 800f118:	f101 0014 	add.w	r0, r1, #20
 800f11c:	2300      	movs	r3, #0
 800f11e:	6805      	ldr	r5, [r0, #0]
 800f120:	b2a9      	uxth	r1, r5
 800f122:	fb02 8101 	mla	r1, r2, r1, r8
 800f126:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f12a:	0c2d      	lsrs	r5, r5, #16
 800f12c:	fb02 c505 	mla	r5, r2, r5, ip
 800f130:	b289      	uxth	r1, r1
 800f132:	3301      	adds	r3, #1
 800f134:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f138:	429e      	cmp	r6, r3
 800f13a:	f840 1b04 	str.w	r1, [r0], #4
 800f13e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f142:	dcec      	bgt.n	800f11e <__multadd+0x12>
 800f144:	f1b8 0f00 	cmp.w	r8, #0
 800f148:	d022      	beq.n	800f190 <__multadd+0x84>
 800f14a:	68a3      	ldr	r3, [r4, #8]
 800f14c:	42b3      	cmp	r3, r6
 800f14e:	dc19      	bgt.n	800f184 <__multadd+0x78>
 800f150:	6861      	ldr	r1, [r4, #4]
 800f152:	4638      	mov	r0, r7
 800f154:	3101      	adds	r1, #1
 800f156:	f7ff ff77 	bl	800f048 <_Balloc>
 800f15a:	4605      	mov	r5, r0
 800f15c:	b928      	cbnz	r0, 800f16a <__multadd+0x5e>
 800f15e:	4602      	mov	r2, r0
 800f160:	4b0d      	ldr	r3, [pc, #52]	; (800f198 <__multadd+0x8c>)
 800f162:	480e      	ldr	r0, [pc, #56]	; (800f19c <__multadd+0x90>)
 800f164:	21b5      	movs	r1, #181	; 0xb5
 800f166:	f7fe fa9b 	bl	800d6a0 <__assert_func>
 800f16a:	6922      	ldr	r2, [r4, #16]
 800f16c:	3202      	adds	r2, #2
 800f16e:	f104 010c 	add.w	r1, r4, #12
 800f172:	0092      	lsls	r2, r2, #2
 800f174:	300c      	adds	r0, #12
 800f176:	f7ff ff59 	bl	800f02c <memcpy>
 800f17a:	4621      	mov	r1, r4
 800f17c:	4638      	mov	r0, r7
 800f17e:	f7ff ffa3 	bl	800f0c8 <_Bfree>
 800f182:	462c      	mov	r4, r5
 800f184:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f188:	3601      	adds	r6, #1
 800f18a:	f8c3 8014 	str.w	r8, [r3, #20]
 800f18e:	6126      	str	r6, [r4, #16]
 800f190:	4620      	mov	r0, r4
 800f192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f196:	bf00      	nop
 800f198:	08011f21 	.word	0x08011f21
 800f19c:	08012014 	.word	0x08012014

0800f1a0 <__s2b>:
 800f1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a4:	460c      	mov	r4, r1
 800f1a6:	4615      	mov	r5, r2
 800f1a8:	461f      	mov	r7, r3
 800f1aa:	2209      	movs	r2, #9
 800f1ac:	3308      	adds	r3, #8
 800f1ae:	4606      	mov	r6, r0
 800f1b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1b4:	2100      	movs	r1, #0
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	db09      	blt.n	800f1d0 <__s2b+0x30>
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7ff ff43 	bl	800f048 <_Balloc>
 800f1c2:	b940      	cbnz	r0, 800f1d6 <__s2b+0x36>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	4b19      	ldr	r3, [pc, #100]	; (800f22c <__s2b+0x8c>)
 800f1c8:	4819      	ldr	r0, [pc, #100]	; (800f230 <__s2b+0x90>)
 800f1ca:	21ce      	movs	r1, #206	; 0xce
 800f1cc:	f7fe fa68 	bl	800d6a0 <__assert_func>
 800f1d0:	0052      	lsls	r2, r2, #1
 800f1d2:	3101      	adds	r1, #1
 800f1d4:	e7f0      	b.n	800f1b8 <__s2b+0x18>
 800f1d6:	9b08      	ldr	r3, [sp, #32]
 800f1d8:	6143      	str	r3, [r0, #20]
 800f1da:	2d09      	cmp	r5, #9
 800f1dc:	f04f 0301 	mov.w	r3, #1
 800f1e0:	6103      	str	r3, [r0, #16]
 800f1e2:	dd16      	ble.n	800f212 <__s2b+0x72>
 800f1e4:	f104 0909 	add.w	r9, r4, #9
 800f1e8:	46c8      	mov	r8, r9
 800f1ea:	442c      	add	r4, r5
 800f1ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f1f0:	4601      	mov	r1, r0
 800f1f2:	3b30      	subs	r3, #48	; 0x30
 800f1f4:	220a      	movs	r2, #10
 800f1f6:	4630      	mov	r0, r6
 800f1f8:	f7ff ff88 	bl	800f10c <__multadd>
 800f1fc:	45a0      	cmp	r8, r4
 800f1fe:	d1f5      	bne.n	800f1ec <__s2b+0x4c>
 800f200:	f1a5 0408 	sub.w	r4, r5, #8
 800f204:	444c      	add	r4, r9
 800f206:	1b2d      	subs	r5, r5, r4
 800f208:	1963      	adds	r3, r4, r5
 800f20a:	42bb      	cmp	r3, r7
 800f20c:	db04      	blt.n	800f218 <__s2b+0x78>
 800f20e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f212:	340a      	adds	r4, #10
 800f214:	2509      	movs	r5, #9
 800f216:	e7f6      	b.n	800f206 <__s2b+0x66>
 800f218:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f21c:	4601      	mov	r1, r0
 800f21e:	3b30      	subs	r3, #48	; 0x30
 800f220:	220a      	movs	r2, #10
 800f222:	4630      	mov	r0, r6
 800f224:	f7ff ff72 	bl	800f10c <__multadd>
 800f228:	e7ee      	b.n	800f208 <__s2b+0x68>
 800f22a:	bf00      	nop
 800f22c:	08011f21 	.word	0x08011f21
 800f230:	08012014 	.word	0x08012014

0800f234 <__hi0bits>:
 800f234:	0c03      	lsrs	r3, r0, #16
 800f236:	041b      	lsls	r3, r3, #16
 800f238:	b9d3      	cbnz	r3, 800f270 <__hi0bits+0x3c>
 800f23a:	0400      	lsls	r0, r0, #16
 800f23c:	2310      	movs	r3, #16
 800f23e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f242:	bf04      	itt	eq
 800f244:	0200      	lsleq	r0, r0, #8
 800f246:	3308      	addeq	r3, #8
 800f248:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f24c:	bf04      	itt	eq
 800f24e:	0100      	lsleq	r0, r0, #4
 800f250:	3304      	addeq	r3, #4
 800f252:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f256:	bf04      	itt	eq
 800f258:	0080      	lsleq	r0, r0, #2
 800f25a:	3302      	addeq	r3, #2
 800f25c:	2800      	cmp	r0, #0
 800f25e:	db05      	blt.n	800f26c <__hi0bits+0x38>
 800f260:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f264:	f103 0301 	add.w	r3, r3, #1
 800f268:	bf08      	it	eq
 800f26a:	2320      	moveq	r3, #32
 800f26c:	4618      	mov	r0, r3
 800f26e:	4770      	bx	lr
 800f270:	2300      	movs	r3, #0
 800f272:	e7e4      	b.n	800f23e <__hi0bits+0xa>

0800f274 <__lo0bits>:
 800f274:	6803      	ldr	r3, [r0, #0]
 800f276:	f013 0207 	ands.w	r2, r3, #7
 800f27a:	4601      	mov	r1, r0
 800f27c:	d00b      	beq.n	800f296 <__lo0bits+0x22>
 800f27e:	07da      	lsls	r2, r3, #31
 800f280:	d424      	bmi.n	800f2cc <__lo0bits+0x58>
 800f282:	0798      	lsls	r0, r3, #30
 800f284:	bf49      	itett	mi
 800f286:	085b      	lsrmi	r3, r3, #1
 800f288:	089b      	lsrpl	r3, r3, #2
 800f28a:	2001      	movmi	r0, #1
 800f28c:	600b      	strmi	r3, [r1, #0]
 800f28e:	bf5c      	itt	pl
 800f290:	600b      	strpl	r3, [r1, #0]
 800f292:	2002      	movpl	r0, #2
 800f294:	4770      	bx	lr
 800f296:	b298      	uxth	r0, r3
 800f298:	b9b0      	cbnz	r0, 800f2c8 <__lo0bits+0x54>
 800f29a:	0c1b      	lsrs	r3, r3, #16
 800f29c:	2010      	movs	r0, #16
 800f29e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f2a2:	bf04      	itt	eq
 800f2a4:	0a1b      	lsreq	r3, r3, #8
 800f2a6:	3008      	addeq	r0, #8
 800f2a8:	071a      	lsls	r2, r3, #28
 800f2aa:	bf04      	itt	eq
 800f2ac:	091b      	lsreq	r3, r3, #4
 800f2ae:	3004      	addeq	r0, #4
 800f2b0:	079a      	lsls	r2, r3, #30
 800f2b2:	bf04      	itt	eq
 800f2b4:	089b      	lsreq	r3, r3, #2
 800f2b6:	3002      	addeq	r0, #2
 800f2b8:	07da      	lsls	r2, r3, #31
 800f2ba:	d403      	bmi.n	800f2c4 <__lo0bits+0x50>
 800f2bc:	085b      	lsrs	r3, r3, #1
 800f2be:	f100 0001 	add.w	r0, r0, #1
 800f2c2:	d005      	beq.n	800f2d0 <__lo0bits+0x5c>
 800f2c4:	600b      	str	r3, [r1, #0]
 800f2c6:	4770      	bx	lr
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	e7e8      	b.n	800f29e <__lo0bits+0x2a>
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	4770      	bx	lr
 800f2d0:	2020      	movs	r0, #32
 800f2d2:	4770      	bx	lr

0800f2d4 <__i2b>:
 800f2d4:	b510      	push	{r4, lr}
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	2101      	movs	r1, #1
 800f2da:	f7ff feb5 	bl	800f048 <_Balloc>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	b928      	cbnz	r0, 800f2ee <__i2b+0x1a>
 800f2e2:	4b05      	ldr	r3, [pc, #20]	; (800f2f8 <__i2b+0x24>)
 800f2e4:	4805      	ldr	r0, [pc, #20]	; (800f2fc <__i2b+0x28>)
 800f2e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f2ea:	f7fe f9d9 	bl	800d6a0 <__assert_func>
 800f2ee:	2301      	movs	r3, #1
 800f2f0:	6144      	str	r4, [r0, #20]
 800f2f2:	6103      	str	r3, [r0, #16]
 800f2f4:	bd10      	pop	{r4, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08011f21 	.word	0x08011f21
 800f2fc:	08012014 	.word	0x08012014

0800f300 <__multiply>:
 800f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f304:	4614      	mov	r4, r2
 800f306:	690a      	ldr	r2, [r1, #16]
 800f308:	6923      	ldr	r3, [r4, #16]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	bfb8      	it	lt
 800f30e:	460b      	movlt	r3, r1
 800f310:	460d      	mov	r5, r1
 800f312:	bfbc      	itt	lt
 800f314:	4625      	movlt	r5, r4
 800f316:	461c      	movlt	r4, r3
 800f318:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f31c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f320:	68ab      	ldr	r3, [r5, #8]
 800f322:	6869      	ldr	r1, [r5, #4]
 800f324:	eb0a 0709 	add.w	r7, sl, r9
 800f328:	42bb      	cmp	r3, r7
 800f32a:	b085      	sub	sp, #20
 800f32c:	bfb8      	it	lt
 800f32e:	3101      	addlt	r1, #1
 800f330:	f7ff fe8a 	bl	800f048 <_Balloc>
 800f334:	b930      	cbnz	r0, 800f344 <__multiply+0x44>
 800f336:	4602      	mov	r2, r0
 800f338:	4b42      	ldr	r3, [pc, #264]	; (800f444 <__multiply+0x144>)
 800f33a:	4843      	ldr	r0, [pc, #268]	; (800f448 <__multiply+0x148>)
 800f33c:	f240 115d 	movw	r1, #349	; 0x15d
 800f340:	f7fe f9ae 	bl	800d6a0 <__assert_func>
 800f344:	f100 0614 	add.w	r6, r0, #20
 800f348:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f34c:	4633      	mov	r3, r6
 800f34e:	2200      	movs	r2, #0
 800f350:	4543      	cmp	r3, r8
 800f352:	d31e      	bcc.n	800f392 <__multiply+0x92>
 800f354:	f105 0c14 	add.w	ip, r5, #20
 800f358:	f104 0314 	add.w	r3, r4, #20
 800f35c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f360:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f364:	9202      	str	r2, [sp, #8]
 800f366:	ebac 0205 	sub.w	r2, ip, r5
 800f36a:	3a15      	subs	r2, #21
 800f36c:	f022 0203 	bic.w	r2, r2, #3
 800f370:	3204      	adds	r2, #4
 800f372:	f105 0115 	add.w	r1, r5, #21
 800f376:	458c      	cmp	ip, r1
 800f378:	bf38      	it	cc
 800f37a:	2204      	movcc	r2, #4
 800f37c:	9201      	str	r2, [sp, #4]
 800f37e:	9a02      	ldr	r2, [sp, #8]
 800f380:	9303      	str	r3, [sp, #12]
 800f382:	429a      	cmp	r2, r3
 800f384:	d808      	bhi.n	800f398 <__multiply+0x98>
 800f386:	2f00      	cmp	r7, #0
 800f388:	dc55      	bgt.n	800f436 <__multiply+0x136>
 800f38a:	6107      	str	r7, [r0, #16]
 800f38c:	b005      	add	sp, #20
 800f38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f392:	f843 2b04 	str.w	r2, [r3], #4
 800f396:	e7db      	b.n	800f350 <__multiply+0x50>
 800f398:	f8b3 a000 	ldrh.w	sl, [r3]
 800f39c:	f1ba 0f00 	cmp.w	sl, #0
 800f3a0:	d020      	beq.n	800f3e4 <__multiply+0xe4>
 800f3a2:	f105 0e14 	add.w	lr, r5, #20
 800f3a6:	46b1      	mov	r9, r6
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f3ae:	f8d9 b000 	ldr.w	fp, [r9]
 800f3b2:	b2a1      	uxth	r1, r4
 800f3b4:	fa1f fb8b 	uxth.w	fp, fp
 800f3b8:	fb0a b101 	mla	r1, sl, r1, fp
 800f3bc:	4411      	add	r1, r2
 800f3be:	f8d9 2000 	ldr.w	r2, [r9]
 800f3c2:	0c24      	lsrs	r4, r4, #16
 800f3c4:	0c12      	lsrs	r2, r2, #16
 800f3c6:	fb0a 2404 	mla	r4, sl, r4, r2
 800f3ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f3ce:	b289      	uxth	r1, r1
 800f3d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f3d4:	45f4      	cmp	ip, lr
 800f3d6:	f849 1b04 	str.w	r1, [r9], #4
 800f3da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f3de:	d8e4      	bhi.n	800f3aa <__multiply+0xaa>
 800f3e0:	9901      	ldr	r1, [sp, #4]
 800f3e2:	5072      	str	r2, [r6, r1]
 800f3e4:	9a03      	ldr	r2, [sp, #12]
 800f3e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	f1b9 0f00 	cmp.w	r9, #0
 800f3f0:	d01f      	beq.n	800f432 <__multiply+0x132>
 800f3f2:	6834      	ldr	r4, [r6, #0]
 800f3f4:	f105 0114 	add.w	r1, r5, #20
 800f3f8:	46b6      	mov	lr, r6
 800f3fa:	f04f 0a00 	mov.w	sl, #0
 800f3fe:	880a      	ldrh	r2, [r1, #0]
 800f400:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f404:	fb09 b202 	mla	r2, r9, r2, fp
 800f408:	4492      	add	sl, r2
 800f40a:	b2a4      	uxth	r4, r4
 800f40c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f410:	f84e 4b04 	str.w	r4, [lr], #4
 800f414:	f851 4b04 	ldr.w	r4, [r1], #4
 800f418:	f8be 2000 	ldrh.w	r2, [lr]
 800f41c:	0c24      	lsrs	r4, r4, #16
 800f41e:	fb09 2404 	mla	r4, r9, r4, r2
 800f422:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f426:	458c      	cmp	ip, r1
 800f428:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f42c:	d8e7      	bhi.n	800f3fe <__multiply+0xfe>
 800f42e:	9a01      	ldr	r2, [sp, #4]
 800f430:	50b4      	str	r4, [r6, r2]
 800f432:	3604      	adds	r6, #4
 800f434:	e7a3      	b.n	800f37e <__multiply+0x7e>
 800f436:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1a5      	bne.n	800f38a <__multiply+0x8a>
 800f43e:	3f01      	subs	r7, #1
 800f440:	e7a1      	b.n	800f386 <__multiply+0x86>
 800f442:	bf00      	nop
 800f444:	08011f21 	.word	0x08011f21
 800f448:	08012014 	.word	0x08012014

0800f44c <__pow5mult>:
 800f44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f450:	4615      	mov	r5, r2
 800f452:	f012 0203 	ands.w	r2, r2, #3
 800f456:	4606      	mov	r6, r0
 800f458:	460f      	mov	r7, r1
 800f45a:	d007      	beq.n	800f46c <__pow5mult+0x20>
 800f45c:	4c25      	ldr	r4, [pc, #148]	; (800f4f4 <__pow5mult+0xa8>)
 800f45e:	3a01      	subs	r2, #1
 800f460:	2300      	movs	r3, #0
 800f462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f466:	f7ff fe51 	bl	800f10c <__multadd>
 800f46a:	4607      	mov	r7, r0
 800f46c:	10ad      	asrs	r5, r5, #2
 800f46e:	d03d      	beq.n	800f4ec <__pow5mult+0xa0>
 800f470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f472:	b97c      	cbnz	r4, 800f494 <__pow5mult+0x48>
 800f474:	2010      	movs	r0, #16
 800f476:	f7ff fdbf 	bl	800eff8 <malloc>
 800f47a:	4602      	mov	r2, r0
 800f47c:	6270      	str	r0, [r6, #36]	; 0x24
 800f47e:	b928      	cbnz	r0, 800f48c <__pow5mult+0x40>
 800f480:	4b1d      	ldr	r3, [pc, #116]	; (800f4f8 <__pow5mult+0xac>)
 800f482:	481e      	ldr	r0, [pc, #120]	; (800f4fc <__pow5mult+0xb0>)
 800f484:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f488:	f7fe f90a 	bl	800d6a0 <__assert_func>
 800f48c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f490:	6004      	str	r4, [r0, #0]
 800f492:	60c4      	str	r4, [r0, #12]
 800f494:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f49c:	b94c      	cbnz	r4, 800f4b2 <__pow5mult+0x66>
 800f49e:	f240 2171 	movw	r1, #625	; 0x271
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f7ff ff16 	bl	800f2d4 <__i2b>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4ae:	4604      	mov	r4, r0
 800f4b0:	6003      	str	r3, [r0, #0]
 800f4b2:	f04f 0900 	mov.w	r9, #0
 800f4b6:	07eb      	lsls	r3, r5, #31
 800f4b8:	d50a      	bpl.n	800f4d0 <__pow5mult+0x84>
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	4622      	mov	r2, r4
 800f4be:	4630      	mov	r0, r6
 800f4c0:	f7ff ff1e 	bl	800f300 <__multiply>
 800f4c4:	4639      	mov	r1, r7
 800f4c6:	4680      	mov	r8, r0
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f7ff fdfd 	bl	800f0c8 <_Bfree>
 800f4ce:	4647      	mov	r7, r8
 800f4d0:	106d      	asrs	r5, r5, #1
 800f4d2:	d00b      	beq.n	800f4ec <__pow5mult+0xa0>
 800f4d4:	6820      	ldr	r0, [r4, #0]
 800f4d6:	b938      	cbnz	r0, 800f4e8 <__pow5mult+0x9c>
 800f4d8:	4622      	mov	r2, r4
 800f4da:	4621      	mov	r1, r4
 800f4dc:	4630      	mov	r0, r6
 800f4de:	f7ff ff0f 	bl	800f300 <__multiply>
 800f4e2:	6020      	str	r0, [r4, #0]
 800f4e4:	f8c0 9000 	str.w	r9, [r0]
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	e7e4      	b.n	800f4b6 <__pow5mult+0x6a>
 800f4ec:	4638      	mov	r0, r7
 800f4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4f2:	bf00      	nop
 800f4f4:	08012168 	.word	0x08012168
 800f4f8:	08011d00 	.word	0x08011d00
 800f4fc:	08012014 	.word	0x08012014

0800f500 <__lshift>:
 800f500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f504:	460c      	mov	r4, r1
 800f506:	6849      	ldr	r1, [r1, #4]
 800f508:	6923      	ldr	r3, [r4, #16]
 800f50a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f50e:	68a3      	ldr	r3, [r4, #8]
 800f510:	4607      	mov	r7, r0
 800f512:	4691      	mov	r9, r2
 800f514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f518:	f108 0601 	add.w	r6, r8, #1
 800f51c:	42b3      	cmp	r3, r6
 800f51e:	db0b      	blt.n	800f538 <__lshift+0x38>
 800f520:	4638      	mov	r0, r7
 800f522:	f7ff fd91 	bl	800f048 <_Balloc>
 800f526:	4605      	mov	r5, r0
 800f528:	b948      	cbnz	r0, 800f53e <__lshift+0x3e>
 800f52a:	4602      	mov	r2, r0
 800f52c:	4b28      	ldr	r3, [pc, #160]	; (800f5d0 <__lshift+0xd0>)
 800f52e:	4829      	ldr	r0, [pc, #164]	; (800f5d4 <__lshift+0xd4>)
 800f530:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f534:	f7fe f8b4 	bl	800d6a0 <__assert_func>
 800f538:	3101      	adds	r1, #1
 800f53a:	005b      	lsls	r3, r3, #1
 800f53c:	e7ee      	b.n	800f51c <__lshift+0x1c>
 800f53e:	2300      	movs	r3, #0
 800f540:	f100 0114 	add.w	r1, r0, #20
 800f544:	f100 0210 	add.w	r2, r0, #16
 800f548:	4618      	mov	r0, r3
 800f54a:	4553      	cmp	r3, sl
 800f54c:	db33      	blt.n	800f5b6 <__lshift+0xb6>
 800f54e:	6920      	ldr	r0, [r4, #16]
 800f550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f554:	f104 0314 	add.w	r3, r4, #20
 800f558:	f019 091f 	ands.w	r9, r9, #31
 800f55c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f564:	d02b      	beq.n	800f5be <__lshift+0xbe>
 800f566:	f1c9 0e20 	rsb	lr, r9, #32
 800f56a:	468a      	mov	sl, r1
 800f56c:	2200      	movs	r2, #0
 800f56e:	6818      	ldr	r0, [r3, #0]
 800f570:	fa00 f009 	lsl.w	r0, r0, r9
 800f574:	4302      	orrs	r2, r0
 800f576:	f84a 2b04 	str.w	r2, [sl], #4
 800f57a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f57e:	459c      	cmp	ip, r3
 800f580:	fa22 f20e 	lsr.w	r2, r2, lr
 800f584:	d8f3      	bhi.n	800f56e <__lshift+0x6e>
 800f586:	ebac 0304 	sub.w	r3, ip, r4
 800f58a:	3b15      	subs	r3, #21
 800f58c:	f023 0303 	bic.w	r3, r3, #3
 800f590:	3304      	adds	r3, #4
 800f592:	f104 0015 	add.w	r0, r4, #21
 800f596:	4584      	cmp	ip, r0
 800f598:	bf38      	it	cc
 800f59a:	2304      	movcc	r3, #4
 800f59c:	50ca      	str	r2, [r1, r3]
 800f59e:	b10a      	cbz	r2, 800f5a4 <__lshift+0xa4>
 800f5a0:	f108 0602 	add.w	r6, r8, #2
 800f5a4:	3e01      	subs	r6, #1
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	612e      	str	r6, [r5, #16]
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	f7ff fd8c 	bl	800f0c8 <_Bfree>
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5ba:	3301      	adds	r3, #1
 800f5bc:	e7c5      	b.n	800f54a <__lshift+0x4a>
 800f5be:	3904      	subs	r1, #4
 800f5c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5c8:	459c      	cmp	ip, r3
 800f5ca:	d8f9      	bhi.n	800f5c0 <__lshift+0xc0>
 800f5cc:	e7ea      	b.n	800f5a4 <__lshift+0xa4>
 800f5ce:	bf00      	nop
 800f5d0:	08011f21 	.word	0x08011f21
 800f5d4:	08012014 	.word	0x08012014

0800f5d8 <__mcmp>:
 800f5d8:	b530      	push	{r4, r5, lr}
 800f5da:	6902      	ldr	r2, [r0, #16]
 800f5dc:	690c      	ldr	r4, [r1, #16]
 800f5de:	1b12      	subs	r2, r2, r4
 800f5e0:	d10e      	bne.n	800f600 <__mcmp+0x28>
 800f5e2:	f100 0314 	add.w	r3, r0, #20
 800f5e6:	3114      	adds	r1, #20
 800f5e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5f8:	42a5      	cmp	r5, r4
 800f5fa:	d003      	beq.n	800f604 <__mcmp+0x2c>
 800f5fc:	d305      	bcc.n	800f60a <__mcmp+0x32>
 800f5fe:	2201      	movs	r2, #1
 800f600:	4610      	mov	r0, r2
 800f602:	bd30      	pop	{r4, r5, pc}
 800f604:	4283      	cmp	r3, r0
 800f606:	d3f3      	bcc.n	800f5f0 <__mcmp+0x18>
 800f608:	e7fa      	b.n	800f600 <__mcmp+0x28>
 800f60a:	f04f 32ff 	mov.w	r2, #4294967295
 800f60e:	e7f7      	b.n	800f600 <__mcmp+0x28>

0800f610 <__mdiff>:
 800f610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f614:	460c      	mov	r4, r1
 800f616:	4606      	mov	r6, r0
 800f618:	4611      	mov	r1, r2
 800f61a:	4620      	mov	r0, r4
 800f61c:	4617      	mov	r7, r2
 800f61e:	f7ff ffdb 	bl	800f5d8 <__mcmp>
 800f622:	1e05      	subs	r5, r0, #0
 800f624:	d110      	bne.n	800f648 <__mdiff+0x38>
 800f626:	4629      	mov	r1, r5
 800f628:	4630      	mov	r0, r6
 800f62a:	f7ff fd0d 	bl	800f048 <_Balloc>
 800f62e:	b930      	cbnz	r0, 800f63e <__mdiff+0x2e>
 800f630:	4b39      	ldr	r3, [pc, #228]	; (800f718 <__mdiff+0x108>)
 800f632:	4602      	mov	r2, r0
 800f634:	f240 2132 	movw	r1, #562	; 0x232
 800f638:	4838      	ldr	r0, [pc, #224]	; (800f71c <__mdiff+0x10c>)
 800f63a:	f7fe f831 	bl	800d6a0 <__assert_func>
 800f63e:	2301      	movs	r3, #1
 800f640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f644:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f648:	bfa4      	itt	ge
 800f64a:	463b      	movge	r3, r7
 800f64c:	4627      	movge	r7, r4
 800f64e:	4630      	mov	r0, r6
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	bfa6      	itte	ge
 800f654:	461c      	movge	r4, r3
 800f656:	2500      	movge	r5, #0
 800f658:	2501      	movlt	r5, #1
 800f65a:	f7ff fcf5 	bl	800f048 <_Balloc>
 800f65e:	b920      	cbnz	r0, 800f66a <__mdiff+0x5a>
 800f660:	4b2d      	ldr	r3, [pc, #180]	; (800f718 <__mdiff+0x108>)
 800f662:	4602      	mov	r2, r0
 800f664:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f668:	e7e6      	b.n	800f638 <__mdiff+0x28>
 800f66a:	693e      	ldr	r6, [r7, #16]
 800f66c:	60c5      	str	r5, [r0, #12]
 800f66e:	6925      	ldr	r5, [r4, #16]
 800f670:	f107 0114 	add.w	r1, r7, #20
 800f674:	f104 0914 	add.w	r9, r4, #20
 800f678:	f100 0e14 	add.w	lr, r0, #20
 800f67c:	f107 0210 	add.w	r2, r7, #16
 800f680:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f684:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f688:	46f2      	mov	sl, lr
 800f68a:	2700      	movs	r7, #0
 800f68c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f690:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f694:	fa1f f883 	uxth.w	r8, r3
 800f698:	fa17 f78b 	uxtah	r7, r7, fp
 800f69c:	0c1b      	lsrs	r3, r3, #16
 800f69e:	eba7 0808 	sub.w	r8, r7, r8
 800f6a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6aa:	fa1f f888 	uxth.w	r8, r8
 800f6ae:	141f      	asrs	r7, r3, #16
 800f6b0:	454d      	cmp	r5, r9
 800f6b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6b6:	f84a 3b04 	str.w	r3, [sl], #4
 800f6ba:	d8e7      	bhi.n	800f68c <__mdiff+0x7c>
 800f6bc:	1b2b      	subs	r3, r5, r4
 800f6be:	3b15      	subs	r3, #21
 800f6c0:	f023 0303 	bic.w	r3, r3, #3
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	3415      	adds	r4, #21
 800f6c8:	42a5      	cmp	r5, r4
 800f6ca:	bf38      	it	cc
 800f6cc:	2304      	movcc	r3, #4
 800f6ce:	4419      	add	r1, r3
 800f6d0:	4473      	add	r3, lr
 800f6d2:	469e      	mov	lr, r3
 800f6d4:	460d      	mov	r5, r1
 800f6d6:	4565      	cmp	r5, ip
 800f6d8:	d30e      	bcc.n	800f6f8 <__mdiff+0xe8>
 800f6da:	f10c 0203 	add.w	r2, ip, #3
 800f6de:	1a52      	subs	r2, r2, r1
 800f6e0:	f022 0203 	bic.w	r2, r2, #3
 800f6e4:	3903      	subs	r1, #3
 800f6e6:	458c      	cmp	ip, r1
 800f6e8:	bf38      	it	cc
 800f6ea:	2200      	movcc	r2, #0
 800f6ec:	441a      	add	r2, r3
 800f6ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f6f2:	b17b      	cbz	r3, 800f714 <__mdiff+0x104>
 800f6f4:	6106      	str	r6, [r0, #16]
 800f6f6:	e7a5      	b.n	800f644 <__mdiff+0x34>
 800f6f8:	f855 8b04 	ldr.w	r8, [r5], #4
 800f6fc:	fa17 f488 	uxtah	r4, r7, r8
 800f700:	1422      	asrs	r2, r4, #16
 800f702:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f706:	b2a4      	uxth	r4, r4
 800f708:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f70c:	f84e 4b04 	str.w	r4, [lr], #4
 800f710:	1417      	asrs	r7, r2, #16
 800f712:	e7e0      	b.n	800f6d6 <__mdiff+0xc6>
 800f714:	3e01      	subs	r6, #1
 800f716:	e7ea      	b.n	800f6ee <__mdiff+0xde>
 800f718:	08011f21 	.word	0x08011f21
 800f71c:	08012014 	.word	0x08012014

0800f720 <__ulp>:
 800f720:	b082      	sub	sp, #8
 800f722:	ed8d 0b00 	vstr	d0, [sp]
 800f726:	9b01      	ldr	r3, [sp, #4]
 800f728:	4912      	ldr	r1, [pc, #72]	; (800f774 <__ulp+0x54>)
 800f72a:	4019      	ands	r1, r3
 800f72c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f730:	2900      	cmp	r1, #0
 800f732:	dd05      	ble.n	800f740 <__ulp+0x20>
 800f734:	2200      	movs	r2, #0
 800f736:	460b      	mov	r3, r1
 800f738:	ec43 2b10 	vmov	d0, r2, r3
 800f73c:	b002      	add	sp, #8
 800f73e:	4770      	bx	lr
 800f740:	4249      	negs	r1, r1
 800f742:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f746:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f74a:	f04f 0200 	mov.w	r2, #0
 800f74e:	f04f 0300 	mov.w	r3, #0
 800f752:	da04      	bge.n	800f75e <__ulp+0x3e>
 800f754:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f758:	fa41 f300 	asr.w	r3, r1, r0
 800f75c:	e7ec      	b.n	800f738 <__ulp+0x18>
 800f75e:	f1a0 0114 	sub.w	r1, r0, #20
 800f762:	291e      	cmp	r1, #30
 800f764:	bfda      	itte	le
 800f766:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f76a:	fa20 f101 	lsrle.w	r1, r0, r1
 800f76e:	2101      	movgt	r1, #1
 800f770:	460a      	mov	r2, r1
 800f772:	e7e1      	b.n	800f738 <__ulp+0x18>
 800f774:	7ff00000 	.word	0x7ff00000

0800f778 <__b2d>:
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77a:	6905      	ldr	r5, [r0, #16]
 800f77c:	f100 0714 	add.w	r7, r0, #20
 800f780:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f784:	1f2e      	subs	r6, r5, #4
 800f786:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f78a:	4620      	mov	r0, r4
 800f78c:	f7ff fd52 	bl	800f234 <__hi0bits>
 800f790:	f1c0 0320 	rsb	r3, r0, #32
 800f794:	280a      	cmp	r0, #10
 800f796:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f814 <__b2d+0x9c>
 800f79a:	600b      	str	r3, [r1, #0]
 800f79c:	dc14      	bgt.n	800f7c8 <__b2d+0x50>
 800f79e:	f1c0 0e0b 	rsb	lr, r0, #11
 800f7a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800f7a6:	42b7      	cmp	r7, r6
 800f7a8:	ea41 030c 	orr.w	r3, r1, ip
 800f7ac:	bf34      	ite	cc
 800f7ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7b2:	2100      	movcs	r1, #0
 800f7b4:	3015      	adds	r0, #21
 800f7b6:	fa04 f000 	lsl.w	r0, r4, r0
 800f7ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800f7be:	ea40 0201 	orr.w	r2, r0, r1
 800f7c2:	ec43 2b10 	vmov	d0, r2, r3
 800f7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7c8:	42b7      	cmp	r7, r6
 800f7ca:	bf3a      	itte	cc
 800f7cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800f7d4:	2100      	movcs	r1, #0
 800f7d6:	380b      	subs	r0, #11
 800f7d8:	d017      	beq.n	800f80a <__b2d+0x92>
 800f7da:	f1c0 0c20 	rsb	ip, r0, #32
 800f7de:	fa04 f500 	lsl.w	r5, r4, r0
 800f7e2:	42be      	cmp	r6, r7
 800f7e4:	fa21 f40c 	lsr.w	r4, r1, ip
 800f7e8:	ea45 0504 	orr.w	r5, r5, r4
 800f7ec:	bf8c      	ite	hi
 800f7ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f7f2:	2400      	movls	r4, #0
 800f7f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f7f8:	fa01 f000 	lsl.w	r0, r1, r0
 800f7fc:	fa24 f40c 	lsr.w	r4, r4, ip
 800f800:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f804:	ea40 0204 	orr.w	r2, r0, r4
 800f808:	e7db      	b.n	800f7c2 <__b2d+0x4a>
 800f80a:	ea44 030c 	orr.w	r3, r4, ip
 800f80e:	460a      	mov	r2, r1
 800f810:	e7d7      	b.n	800f7c2 <__b2d+0x4a>
 800f812:	bf00      	nop
 800f814:	3ff00000 	.word	0x3ff00000

0800f818 <__d2b>:
 800f818:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f81c:	4689      	mov	r9, r1
 800f81e:	2101      	movs	r1, #1
 800f820:	ec57 6b10 	vmov	r6, r7, d0
 800f824:	4690      	mov	r8, r2
 800f826:	f7ff fc0f 	bl	800f048 <_Balloc>
 800f82a:	4604      	mov	r4, r0
 800f82c:	b930      	cbnz	r0, 800f83c <__d2b+0x24>
 800f82e:	4602      	mov	r2, r0
 800f830:	4b25      	ldr	r3, [pc, #148]	; (800f8c8 <__d2b+0xb0>)
 800f832:	4826      	ldr	r0, [pc, #152]	; (800f8cc <__d2b+0xb4>)
 800f834:	f240 310a 	movw	r1, #778	; 0x30a
 800f838:	f7fd ff32 	bl	800d6a0 <__assert_func>
 800f83c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f844:	bb35      	cbnz	r5, 800f894 <__d2b+0x7c>
 800f846:	2e00      	cmp	r6, #0
 800f848:	9301      	str	r3, [sp, #4]
 800f84a:	d028      	beq.n	800f89e <__d2b+0x86>
 800f84c:	4668      	mov	r0, sp
 800f84e:	9600      	str	r6, [sp, #0]
 800f850:	f7ff fd10 	bl	800f274 <__lo0bits>
 800f854:	9900      	ldr	r1, [sp, #0]
 800f856:	b300      	cbz	r0, 800f89a <__d2b+0x82>
 800f858:	9a01      	ldr	r2, [sp, #4]
 800f85a:	f1c0 0320 	rsb	r3, r0, #32
 800f85e:	fa02 f303 	lsl.w	r3, r2, r3
 800f862:	430b      	orrs	r3, r1
 800f864:	40c2      	lsrs	r2, r0
 800f866:	6163      	str	r3, [r4, #20]
 800f868:	9201      	str	r2, [sp, #4]
 800f86a:	9b01      	ldr	r3, [sp, #4]
 800f86c:	61a3      	str	r3, [r4, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	bf14      	ite	ne
 800f872:	2202      	movne	r2, #2
 800f874:	2201      	moveq	r2, #1
 800f876:	6122      	str	r2, [r4, #16]
 800f878:	b1d5      	cbz	r5, 800f8b0 <__d2b+0x98>
 800f87a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f87e:	4405      	add	r5, r0
 800f880:	f8c9 5000 	str.w	r5, [r9]
 800f884:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f888:	f8c8 0000 	str.w	r0, [r8]
 800f88c:	4620      	mov	r0, r4
 800f88e:	b003      	add	sp, #12
 800f890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f898:	e7d5      	b.n	800f846 <__d2b+0x2e>
 800f89a:	6161      	str	r1, [r4, #20]
 800f89c:	e7e5      	b.n	800f86a <__d2b+0x52>
 800f89e:	a801      	add	r0, sp, #4
 800f8a0:	f7ff fce8 	bl	800f274 <__lo0bits>
 800f8a4:	9b01      	ldr	r3, [sp, #4]
 800f8a6:	6163      	str	r3, [r4, #20]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	6122      	str	r2, [r4, #16]
 800f8ac:	3020      	adds	r0, #32
 800f8ae:	e7e3      	b.n	800f878 <__d2b+0x60>
 800f8b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f8b8:	f8c9 0000 	str.w	r0, [r9]
 800f8bc:	6918      	ldr	r0, [r3, #16]
 800f8be:	f7ff fcb9 	bl	800f234 <__hi0bits>
 800f8c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f8c6:	e7df      	b.n	800f888 <__d2b+0x70>
 800f8c8:	08011f21 	.word	0x08011f21
 800f8cc:	08012014 	.word	0x08012014

0800f8d0 <__ratio>:
 800f8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	4688      	mov	r8, r1
 800f8d6:	4669      	mov	r1, sp
 800f8d8:	4681      	mov	r9, r0
 800f8da:	f7ff ff4d 	bl	800f778 <__b2d>
 800f8de:	a901      	add	r1, sp, #4
 800f8e0:	4640      	mov	r0, r8
 800f8e2:	ec55 4b10 	vmov	r4, r5, d0
 800f8e6:	f7ff ff47 	bl	800f778 <__b2d>
 800f8ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f8f2:	eba3 0c02 	sub.w	ip, r3, r2
 800f8f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f8fa:	1a9b      	subs	r3, r3, r2
 800f8fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f900:	ec51 0b10 	vmov	r0, r1, d0
 800f904:	2b00      	cmp	r3, #0
 800f906:	bfd6      	itet	le
 800f908:	460a      	movle	r2, r1
 800f90a:	462a      	movgt	r2, r5
 800f90c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f910:	468b      	mov	fp, r1
 800f912:	462f      	mov	r7, r5
 800f914:	bfd4      	ite	le
 800f916:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f91a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f91e:	4620      	mov	r0, r4
 800f920:	ee10 2a10 	vmov	r2, s0
 800f924:	465b      	mov	r3, fp
 800f926:	4639      	mov	r1, r7
 800f928:	f7f0 ffc0 	bl	80008ac <__aeabi_ddiv>
 800f92c:	ec41 0b10 	vmov	d0, r0, r1
 800f930:	b003      	add	sp, #12
 800f932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f936 <__copybits>:
 800f936:	3901      	subs	r1, #1
 800f938:	b570      	push	{r4, r5, r6, lr}
 800f93a:	1149      	asrs	r1, r1, #5
 800f93c:	6914      	ldr	r4, [r2, #16]
 800f93e:	3101      	adds	r1, #1
 800f940:	f102 0314 	add.w	r3, r2, #20
 800f944:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f948:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f94c:	1f05      	subs	r5, r0, #4
 800f94e:	42a3      	cmp	r3, r4
 800f950:	d30c      	bcc.n	800f96c <__copybits+0x36>
 800f952:	1aa3      	subs	r3, r4, r2
 800f954:	3b11      	subs	r3, #17
 800f956:	f023 0303 	bic.w	r3, r3, #3
 800f95a:	3211      	adds	r2, #17
 800f95c:	42a2      	cmp	r2, r4
 800f95e:	bf88      	it	hi
 800f960:	2300      	movhi	r3, #0
 800f962:	4418      	add	r0, r3
 800f964:	2300      	movs	r3, #0
 800f966:	4288      	cmp	r0, r1
 800f968:	d305      	bcc.n	800f976 <__copybits+0x40>
 800f96a:	bd70      	pop	{r4, r5, r6, pc}
 800f96c:	f853 6b04 	ldr.w	r6, [r3], #4
 800f970:	f845 6f04 	str.w	r6, [r5, #4]!
 800f974:	e7eb      	b.n	800f94e <__copybits+0x18>
 800f976:	f840 3b04 	str.w	r3, [r0], #4
 800f97a:	e7f4      	b.n	800f966 <__copybits+0x30>

0800f97c <__any_on>:
 800f97c:	f100 0214 	add.w	r2, r0, #20
 800f980:	6900      	ldr	r0, [r0, #16]
 800f982:	114b      	asrs	r3, r1, #5
 800f984:	4298      	cmp	r0, r3
 800f986:	b510      	push	{r4, lr}
 800f988:	db11      	blt.n	800f9ae <__any_on+0x32>
 800f98a:	dd0a      	ble.n	800f9a2 <__any_on+0x26>
 800f98c:	f011 011f 	ands.w	r1, r1, #31
 800f990:	d007      	beq.n	800f9a2 <__any_on+0x26>
 800f992:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f996:	fa24 f001 	lsr.w	r0, r4, r1
 800f99a:	fa00 f101 	lsl.w	r1, r0, r1
 800f99e:	428c      	cmp	r4, r1
 800f9a0:	d10b      	bne.n	800f9ba <__any_on+0x3e>
 800f9a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d803      	bhi.n	800f9b2 <__any_on+0x36>
 800f9aa:	2000      	movs	r0, #0
 800f9ac:	bd10      	pop	{r4, pc}
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	e7f7      	b.n	800f9a2 <__any_on+0x26>
 800f9b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9b6:	2900      	cmp	r1, #0
 800f9b8:	d0f5      	beq.n	800f9a6 <__any_on+0x2a>
 800f9ba:	2001      	movs	r0, #1
 800f9bc:	e7f6      	b.n	800f9ac <__any_on+0x30>

0800f9be <_calloc_r>:
 800f9be:	b513      	push	{r0, r1, r4, lr}
 800f9c0:	434a      	muls	r2, r1
 800f9c2:	4611      	mov	r1, r2
 800f9c4:	9201      	str	r2, [sp, #4]
 800f9c6:	f000 f859 	bl	800fa7c <_malloc_r>
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	b118      	cbz	r0, 800f9d6 <_calloc_r+0x18>
 800f9ce:	9a01      	ldr	r2, [sp, #4]
 800f9d0:	2100      	movs	r1, #0
 800f9d2:	f7fc f969 	bl	800bca8 <memset>
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	b002      	add	sp, #8
 800f9da:	bd10      	pop	{r4, pc}

0800f9dc <_free_r>:
 800f9dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f9de:	2900      	cmp	r1, #0
 800f9e0:	d048      	beq.n	800fa74 <_free_r+0x98>
 800f9e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9e6:	9001      	str	r0, [sp, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	f1a1 0404 	sub.w	r4, r1, #4
 800f9ee:	bfb8      	it	lt
 800f9f0:	18e4      	addlt	r4, r4, r3
 800f9f2:	f000 fb45 	bl	8010080 <__malloc_lock>
 800f9f6:	4a20      	ldr	r2, [pc, #128]	; (800fa78 <_free_r+0x9c>)
 800f9f8:	9801      	ldr	r0, [sp, #4]
 800f9fa:	6813      	ldr	r3, [r2, #0]
 800f9fc:	4615      	mov	r5, r2
 800f9fe:	b933      	cbnz	r3, 800fa0e <_free_r+0x32>
 800fa00:	6063      	str	r3, [r4, #4]
 800fa02:	6014      	str	r4, [r2, #0]
 800fa04:	b003      	add	sp, #12
 800fa06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa0a:	f000 bb3f 	b.w	801008c <__malloc_unlock>
 800fa0e:	42a3      	cmp	r3, r4
 800fa10:	d90b      	bls.n	800fa2a <_free_r+0x4e>
 800fa12:	6821      	ldr	r1, [r4, #0]
 800fa14:	1862      	adds	r2, r4, r1
 800fa16:	4293      	cmp	r3, r2
 800fa18:	bf04      	itt	eq
 800fa1a:	681a      	ldreq	r2, [r3, #0]
 800fa1c:	685b      	ldreq	r3, [r3, #4]
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	bf04      	itt	eq
 800fa22:	1852      	addeq	r2, r2, r1
 800fa24:	6022      	streq	r2, [r4, #0]
 800fa26:	602c      	str	r4, [r5, #0]
 800fa28:	e7ec      	b.n	800fa04 <_free_r+0x28>
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	b10b      	cbz	r3, 800fa34 <_free_r+0x58>
 800fa30:	42a3      	cmp	r3, r4
 800fa32:	d9fa      	bls.n	800fa2a <_free_r+0x4e>
 800fa34:	6811      	ldr	r1, [r2, #0]
 800fa36:	1855      	adds	r5, r2, r1
 800fa38:	42a5      	cmp	r5, r4
 800fa3a:	d10b      	bne.n	800fa54 <_free_r+0x78>
 800fa3c:	6824      	ldr	r4, [r4, #0]
 800fa3e:	4421      	add	r1, r4
 800fa40:	1854      	adds	r4, r2, r1
 800fa42:	42a3      	cmp	r3, r4
 800fa44:	6011      	str	r1, [r2, #0]
 800fa46:	d1dd      	bne.n	800fa04 <_free_r+0x28>
 800fa48:	681c      	ldr	r4, [r3, #0]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	6053      	str	r3, [r2, #4]
 800fa4e:	4421      	add	r1, r4
 800fa50:	6011      	str	r1, [r2, #0]
 800fa52:	e7d7      	b.n	800fa04 <_free_r+0x28>
 800fa54:	d902      	bls.n	800fa5c <_free_r+0x80>
 800fa56:	230c      	movs	r3, #12
 800fa58:	6003      	str	r3, [r0, #0]
 800fa5a:	e7d3      	b.n	800fa04 <_free_r+0x28>
 800fa5c:	6825      	ldr	r5, [r4, #0]
 800fa5e:	1961      	adds	r1, r4, r5
 800fa60:	428b      	cmp	r3, r1
 800fa62:	bf04      	itt	eq
 800fa64:	6819      	ldreq	r1, [r3, #0]
 800fa66:	685b      	ldreq	r3, [r3, #4]
 800fa68:	6063      	str	r3, [r4, #4]
 800fa6a:	bf04      	itt	eq
 800fa6c:	1949      	addeq	r1, r1, r5
 800fa6e:	6021      	streq	r1, [r4, #0]
 800fa70:	6054      	str	r4, [r2, #4]
 800fa72:	e7c7      	b.n	800fa04 <_free_r+0x28>
 800fa74:	b003      	add	sp, #12
 800fa76:	bd30      	pop	{r4, r5, pc}
 800fa78:	20000288 	.word	0x20000288

0800fa7c <_malloc_r>:
 800fa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa7e:	1ccd      	adds	r5, r1, #3
 800fa80:	f025 0503 	bic.w	r5, r5, #3
 800fa84:	3508      	adds	r5, #8
 800fa86:	2d0c      	cmp	r5, #12
 800fa88:	bf38      	it	cc
 800fa8a:	250c      	movcc	r5, #12
 800fa8c:	2d00      	cmp	r5, #0
 800fa8e:	4606      	mov	r6, r0
 800fa90:	db01      	blt.n	800fa96 <_malloc_r+0x1a>
 800fa92:	42a9      	cmp	r1, r5
 800fa94:	d903      	bls.n	800fa9e <_malloc_r+0x22>
 800fa96:	230c      	movs	r3, #12
 800fa98:	6033      	str	r3, [r6, #0]
 800fa9a:	2000      	movs	r0, #0
 800fa9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa9e:	f000 faef 	bl	8010080 <__malloc_lock>
 800faa2:	4921      	ldr	r1, [pc, #132]	; (800fb28 <_malloc_r+0xac>)
 800faa4:	680a      	ldr	r2, [r1, #0]
 800faa6:	4614      	mov	r4, r2
 800faa8:	b99c      	cbnz	r4, 800fad2 <_malloc_r+0x56>
 800faaa:	4f20      	ldr	r7, [pc, #128]	; (800fb2c <_malloc_r+0xb0>)
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	b923      	cbnz	r3, 800faba <_malloc_r+0x3e>
 800fab0:	4621      	mov	r1, r4
 800fab2:	4630      	mov	r0, r6
 800fab4:	f000 fa14 	bl	800fee0 <_sbrk_r>
 800fab8:	6038      	str	r0, [r7, #0]
 800faba:	4629      	mov	r1, r5
 800fabc:	4630      	mov	r0, r6
 800fabe:	f000 fa0f 	bl	800fee0 <_sbrk_r>
 800fac2:	1c43      	adds	r3, r0, #1
 800fac4:	d123      	bne.n	800fb0e <_malloc_r+0x92>
 800fac6:	230c      	movs	r3, #12
 800fac8:	6033      	str	r3, [r6, #0]
 800faca:	4630      	mov	r0, r6
 800facc:	f000 fade 	bl	801008c <__malloc_unlock>
 800fad0:	e7e3      	b.n	800fa9a <_malloc_r+0x1e>
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	1b5b      	subs	r3, r3, r5
 800fad6:	d417      	bmi.n	800fb08 <_malloc_r+0x8c>
 800fad8:	2b0b      	cmp	r3, #11
 800fada:	d903      	bls.n	800fae4 <_malloc_r+0x68>
 800fadc:	6023      	str	r3, [r4, #0]
 800fade:	441c      	add	r4, r3
 800fae0:	6025      	str	r5, [r4, #0]
 800fae2:	e004      	b.n	800faee <_malloc_r+0x72>
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	42a2      	cmp	r2, r4
 800fae8:	bf0c      	ite	eq
 800faea:	600b      	streq	r3, [r1, #0]
 800faec:	6053      	strne	r3, [r2, #4]
 800faee:	4630      	mov	r0, r6
 800faf0:	f000 facc 	bl	801008c <__malloc_unlock>
 800faf4:	f104 000b 	add.w	r0, r4, #11
 800faf8:	1d23      	adds	r3, r4, #4
 800fafa:	f020 0007 	bic.w	r0, r0, #7
 800fafe:	1ac2      	subs	r2, r0, r3
 800fb00:	d0cc      	beq.n	800fa9c <_malloc_r+0x20>
 800fb02:	1a1b      	subs	r3, r3, r0
 800fb04:	50a3      	str	r3, [r4, r2]
 800fb06:	e7c9      	b.n	800fa9c <_malloc_r+0x20>
 800fb08:	4622      	mov	r2, r4
 800fb0a:	6864      	ldr	r4, [r4, #4]
 800fb0c:	e7cc      	b.n	800faa8 <_malloc_r+0x2c>
 800fb0e:	1cc4      	adds	r4, r0, #3
 800fb10:	f024 0403 	bic.w	r4, r4, #3
 800fb14:	42a0      	cmp	r0, r4
 800fb16:	d0e3      	beq.n	800fae0 <_malloc_r+0x64>
 800fb18:	1a21      	subs	r1, r4, r0
 800fb1a:	4630      	mov	r0, r6
 800fb1c:	f000 f9e0 	bl	800fee0 <_sbrk_r>
 800fb20:	3001      	adds	r0, #1
 800fb22:	d1dd      	bne.n	800fae0 <_malloc_r+0x64>
 800fb24:	e7cf      	b.n	800fac6 <_malloc_r+0x4a>
 800fb26:	bf00      	nop
 800fb28:	20000288 	.word	0x20000288
 800fb2c:	2000028c 	.word	0x2000028c

0800fb30 <__sfputc_r>:
 800fb30:	6893      	ldr	r3, [r2, #8]
 800fb32:	3b01      	subs	r3, #1
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	b410      	push	{r4}
 800fb38:	6093      	str	r3, [r2, #8]
 800fb3a:	da08      	bge.n	800fb4e <__sfputc_r+0x1e>
 800fb3c:	6994      	ldr	r4, [r2, #24]
 800fb3e:	42a3      	cmp	r3, r4
 800fb40:	db01      	blt.n	800fb46 <__sfputc_r+0x16>
 800fb42:	290a      	cmp	r1, #10
 800fb44:	d103      	bne.n	800fb4e <__sfputc_r+0x1e>
 800fb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb4a:	f7fd bce9 	b.w	800d520 <__swbuf_r>
 800fb4e:	6813      	ldr	r3, [r2, #0]
 800fb50:	1c58      	adds	r0, r3, #1
 800fb52:	6010      	str	r0, [r2, #0]
 800fb54:	7019      	strb	r1, [r3, #0]
 800fb56:	4608      	mov	r0, r1
 800fb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb5c:	4770      	bx	lr

0800fb5e <__sfputs_r>:
 800fb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb60:	4606      	mov	r6, r0
 800fb62:	460f      	mov	r7, r1
 800fb64:	4614      	mov	r4, r2
 800fb66:	18d5      	adds	r5, r2, r3
 800fb68:	42ac      	cmp	r4, r5
 800fb6a:	d101      	bne.n	800fb70 <__sfputs_r+0x12>
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e007      	b.n	800fb80 <__sfputs_r+0x22>
 800fb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb74:	463a      	mov	r2, r7
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7ff ffda 	bl	800fb30 <__sfputc_r>
 800fb7c:	1c43      	adds	r3, r0, #1
 800fb7e:	d1f3      	bne.n	800fb68 <__sfputs_r+0xa>
 800fb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb84 <_vfiprintf_r>:
 800fb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb88:	460d      	mov	r5, r1
 800fb8a:	b09d      	sub	sp, #116	; 0x74
 800fb8c:	4614      	mov	r4, r2
 800fb8e:	4698      	mov	r8, r3
 800fb90:	4606      	mov	r6, r0
 800fb92:	b118      	cbz	r0, 800fb9c <_vfiprintf_r+0x18>
 800fb94:	6983      	ldr	r3, [r0, #24]
 800fb96:	b90b      	cbnz	r3, 800fb9c <_vfiprintf_r+0x18>
 800fb98:	f7fe fd46 	bl	800e628 <__sinit>
 800fb9c:	4b89      	ldr	r3, [pc, #548]	; (800fdc4 <_vfiprintf_r+0x240>)
 800fb9e:	429d      	cmp	r5, r3
 800fba0:	d11b      	bne.n	800fbda <_vfiprintf_r+0x56>
 800fba2:	6875      	ldr	r5, [r6, #4]
 800fba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fba6:	07d9      	lsls	r1, r3, #31
 800fba8:	d405      	bmi.n	800fbb6 <_vfiprintf_r+0x32>
 800fbaa:	89ab      	ldrh	r3, [r5, #12]
 800fbac:	059a      	lsls	r2, r3, #22
 800fbae:	d402      	bmi.n	800fbb6 <_vfiprintf_r+0x32>
 800fbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbb2:	f7ff f9ba 	bl	800ef2a <__retarget_lock_acquire_recursive>
 800fbb6:	89ab      	ldrh	r3, [r5, #12]
 800fbb8:	071b      	lsls	r3, r3, #28
 800fbba:	d501      	bpl.n	800fbc0 <_vfiprintf_r+0x3c>
 800fbbc:	692b      	ldr	r3, [r5, #16]
 800fbbe:	b9eb      	cbnz	r3, 800fbfc <_vfiprintf_r+0x78>
 800fbc0:	4629      	mov	r1, r5
 800fbc2:	4630      	mov	r0, r6
 800fbc4:	f7fd fcfe 	bl	800d5c4 <__swsetup_r>
 800fbc8:	b1c0      	cbz	r0, 800fbfc <_vfiprintf_r+0x78>
 800fbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbcc:	07dc      	lsls	r4, r3, #31
 800fbce:	d50e      	bpl.n	800fbee <_vfiprintf_r+0x6a>
 800fbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd4:	b01d      	add	sp, #116	; 0x74
 800fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbda:	4b7b      	ldr	r3, [pc, #492]	; (800fdc8 <_vfiprintf_r+0x244>)
 800fbdc:	429d      	cmp	r5, r3
 800fbde:	d101      	bne.n	800fbe4 <_vfiprintf_r+0x60>
 800fbe0:	68b5      	ldr	r5, [r6, #8]
 800fbe2:	e7df      	b.n	800fba4 <_vfiprintf_r+0x20>
 800fbe4:	4b79      	ldr	r3, [pc, #484]	; (800fdcc <_vfiprintf_r+0x248>)
 800fbe6:	429d      	cmp	r5, r3
 800fbe8:	bf08      	it	eq
 800fbea:	68f5      	ldreq	r5, [r6, #12]
 800fbec:	e7da      	b.n	800fba4 <_vfiprintf_r+0x20>
 800fbee:	89ab      	ldrh	r3, [r5, #12]
 800fbf0:	0598      	lsls	r0, r3, #22
 800fbf2:	d4ed      	bmi.n	800fbd0 <_vfiprintf_r+0x4c>
 800fbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbf6:	f7ff f999 	bl	800ef2c <__retarget_lock_release_recursive>
 800fbfa:	e7e9      	b.n	800fbd0 <_vfiprintf_r+0x4c>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800fc00:	2320      	movs	r3, #32
 800fc02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc0a:	2330      	movs	r3, #48	; 0x30
 800fc0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fdd0 <_vfiprintf_r+0x24c>
 800fc10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc14:	f04f 0901 	mov.w	r9, #1
 800fc18:	4623      	mov	r3, r4
 800fc1a:	469a      	mov	sl, r3
 800fc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc20:	b10a      	cbz	r2, 800fc26 <_vfiprintf_r+0xa2>
 800fc22:	2a25      	cmp	r2, #37	; 0x25
 800fc24:	d1f9      	bne.n	800fc1a <_vfiprintf_r+0x96>
 800fc26:	ebba 0b04 	subs.w	fp, sl, r4
 800fc2a:	d00b      	beq.n	800fc44 <_vfiprintf_r+0xc0>
 800fc2c:	465b      	mov	r3, fp
 800fc2e:	4622      	mov	r2, r4
 800fc30:	4629      	mov	r1, r5
 800fc32:	4630      	mov	r0, r6
 800fc34:	f7ff ff93 	bl	800fb5e <__sfputs_r>
 800fc38:	3001      	adds	r0, #1
 800fc3a:	f000 80aa 	beq.w	800fd92 <_vfiprintf_r+0x20e>
 800fc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc40:	445a      	add	r2, fp
 800fc42:	9209      	str	r2, [sp, #36]	; 0x24
 800fc44:	f89a 3000 	ldrb.w	r3, [sl]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 80a2 	beq.w	800fd92 <_vfiprintf_r+0x20e>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	f04f 32ff 	mov.w	r2, #4294967295
 800fc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc58:	f10a 0a01 	add.w	sl, sl, #1
 800fc5c:	9304      	str	r3, [sp, #16]
 800fc5e:	9307      	str	r3, [sp, #28]
 800fc60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc64:	931a      	str	r3, [sp, #104]	; 0x68
 800fc66:	4654      	mov	r4, sl
 800fc68:	2205      	movs	r2, #5
 800fc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc6e:	4858      	ldr	r0, [pc, #352]	; (800fdd0 <_vfiprintf_r+0x24c>)
 800fc70:	f7f0 fae6 	bl	8000240 <memchr>
 800fc74:	9a04      	ldr	r2, [sp, #16]
 800fc76:	b9d8      	cbnz	r0, 800fcb0 <_vfiprintf_r+0x12c>
 800fc78:	06d1      	lsls	r1, r2, #27
 800fc7a:	bf44      	itt	mi
 800fc7c:	2320      	movmi	r3, #32
 800fc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc82:	0713      	lsls	r3, r2, #28
 800fc84:	bf44      	itt	mi
 800fc86:	232b      	movmi	r3, #43	; 0x2b
 800fc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc90:	2b2a      	cmp	r3, #42	; 0x2a
 800fc92:	d015      	beq.n	800fcc0 <_vfiprintf_r+0x13c>
 800fc94:	9a07      	ldr	r2, [sp, #28]
 800fc96:	4654      	mov	r4, sl
 800fc98:	2000      	movs	r0, #0
 800fc9a:	f04f 0c0a 	mov.w	ip, #10
 800fc9e:	4621      	mov	r1, r4
 800fca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fca4:	3b30      	subs	r3, #48	; 0x30
 800fca6:	2b09      	cmp	r3, #9
 800fca8:	d94e      	bls.n	800fd48 <_vfiprintf_r+0x1c4>
 800fcaa:	b1b0      	cbz	r0, 800fcda <_vfiprintf_r+0x156>
 800fcac:	9207      	str	r2, [sp, #28]
 800fcae:	e014      	b.n	800fcda <_vfiprintf_r+0x156>
 800fcb0:	eba0 0308 	sub.w	r3, r0, r8
 800fcb4:	fa09 f303 	lsl.w	r3, r9, r3
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	9304      	str	r3, [sp, #16]
 800fcbc:	46a2      	mov	sl, r4
 800fcbe:	e7d2      	b.n	800fc66 <_vfiprintf_r+0xe2>
 800fcc0:	9b03      	ldr	r3, [sp, #12]
 800fcc2:	1d19      	adds	r1, r3, #4
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	9103      	str	r1, [sp, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	bfbb      	ittet	lt
 800fccc:	425b      	neglt	r3, r3
 800fcce:	f042 0202 	orrlt.w	r2, r2, #2
 800fcd2:	9307      	strge	r3, [sp, #28]
 800fcd4:	9307      	strlt	r3, [sp, #28]
 800fcd6:	bfb8      	it	lt
 800fcd8:	9204      	strlt	r2, [sp, #16]
 800fcda:	7823      	ldrb	r3, [r4, #0]
 800fcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800fcde:	d10c      	bne.n	800fcfa <_vfiprintf_r+0x176>
 800fce0:	7863      	ldrb	r3, [r4, #1]
 800fce2:	2b2a      	cmp	r3, #42	; 0x2a
 800fce4:	d135      	bne.n	800fd52 <_vfiprintf_r+0x1ce>
 800fce6:	9b03      	ldr	r3, [sp, #12]
 800fce8:	1d1a      	adds	r2, r3, #4
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	9203      	str	r2, [sp, #12]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	bfb8      	it	lt
 800fcf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcf6:	3402      	adds	r4, #2
 800fcf8:	9305      	str	r3, [sp, #20]
 800fcfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fde0 <_vfiprintf_r+0x25c>
 800fcfe:	7821      	ldrb	r1, [r4, #0]
 800fd00:	2203      	movs	r2, #3
 800fd02:	4650      	mov	r0, sl
 800fd04:	f7f0 fa9c 	bl	8000240 <memchr>
 800fd08:	b140      	cbz	r0, 800fd1c <_vfiprintf_r+0x198>
 800fd0a:	2340      	movs	r3, #64	; 0x40
 800fd0c:	eba0 000a 	sub.w	r0, r0, sl
 800fd10:	fa03 f000 	lsl.w	r0, r3, r0
 800fd14:	9b04      	ldr	r3, [sp, #16]
 800fd16:	4303      	orrs	r3, r0
 800fd18:	3401      	adds	r4, #1
 800fd1a:	9304      	str	r3, [sp, #16]
 800fd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd20:	482c      	ldr	r0, [pc, #176]	; (800fdd4 <_vfiprintf_r+0x250>)
 800fd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd26:	2206      	movs	r2, #6
 800fd28:	f7f0 fa8a 	bl	8000240 <memchr>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d03f      	beq.n	800fdb0 <_vfiprintf_r+0x22c>
 800fd30:	4b29      	ldr	r3, [pc, #164]	; (800fdd8 <_vfiprintf_r+0x254>)
 800fd32:	bb1b      	cbnz	r3, 800fd7c <_vfiprintf_r+0x1f8>
 800fd34:	9b03      	ldr	r3, [sp, #12]
 800fd36:	3307      	adds	r3, #7
 800fd38:	f023 0307 	bic.w	r3, r3, #7
 800fd3c:	3308      	adds	r3, #8
 800fd3e:	9303      	str	r3, [sp, #12]
 800fd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd42:	443b      	add	r3, r7
 800fd44:	9309      	str	r3, [sp, #36]	; 0x24
 800fd46:	e767      	b.n	800fc18 <_vfiprintf_r+0x94>
 800fd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd4c:	460c      	mov	r4, r1
 800fd4e:	2001      	movs	r0, #1
 800fd50:	e7a5      	b.n	800fc9e <_vfiprintf_r+0x11a>
 800fd52:	2300      	movs	r3, #0
 800fd54:	3401      	adds	r4, #1
 800fd56:	9305      	str	r3, [sp, #20]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	f04f 0c0a 	mov.w	ip, #10
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd64:	3a30      	subs	r2, #48	; 0x30
 800fd66:	2a09      	cmp	r2, #9
 800fd68:	d903      	bls.n	800fd72 <_vfiprintf_r+0x1ee>
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d0c5      	beq.n	800fcfa <_vfiprintf_r+0x176>
 800fd6e:	9105      	str	r1, [sp, #20]
 800fd70:	e7c3      	b.n	800fcfa <_vfiprintf_r+0x176>
 800fd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd76:	4604      	mov	r4, r0
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e7f0      	b.n	800fd5e <_vfiprintf_r+0x1da>
 800fd7c:	ab03      	add	r3, sp, #12
 800fd7e:	9300      	str	r3, [sp, #0]
 800fd80:	462a      	mov	r2, r5
 800fd82:	4b16      	ldr	r3, [pc, #88]	; (800fddc <_vfiprintf_r+0x258>)
 800fd84:	a904      	add	r1, sp, #16
 800fd86:	4630      	mov	r0, r6
 800fd88:	f7fc f836 	bl	800bdf8 <_printf_float>
 800fd8c:	4607      	mov	r7, r0
 800fd8e:	1c78      	adds	r0, r7, #1
 800fd90:	d1d6      	bne.n	800fd40 <_vfiprintf_r+0x1bc>
 800fd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd94:	07d9      	lsls	r1, r3, #31
 800fd96:	d405      	bmi.n	800fda4 <_vfiprintf_r+0x220>
 800fd98:	89ab      	ldrh	r3, [r5, #12]
 800fd9a:	059a      	lsls	r2, r3, #22
 800fd9c:	d402      	bmi.n	800fda4 <_vfiprintf_r+0x220>
 800fd9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fda0:	f7ff f8c4 	bl	800ef2c <__retarget_lock_release_recursive>
 800fda4:	89ab      	ldrh	r3, [r5, #12]
 800fda6:	065b      	lsls	r3, r3, #25
 800fda8:	f53f af12 	bmi.w	800fbd0 <_vfiprintf_r+0x4c>
 800fdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdae:	e711      	b.n	800fbd4 <_vfiprintf_r+0x50>
 800fdb0:	ab03      	add	r3, sp, #12
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	462a      	mov	r2, r5
 800fdb6:	4b09      	ldr	r3, [pc, #36]	; (800fddc <_vfiprintf_r+0x258>)
 800fdb8:	a904      	add	r1, sp, #16
 800fdba:	4630      	mov	r0, r6
 800fdbc:	f7fc fac0 	bl	800c340 <_printf_i>
 800fdc0:	e7e4      	b.n	800fd8c <_vfiprintf_r+0x208>
 800fdc2:	bf00      	nop
 800fdc4:	08011f54 	.word	0x08011f54
 800fdc8:	08011f74 	.word	0x08011f74
 800fdcc:	08011f34 	.word	0x08011f34
 800fdd0:	08012174 	.word	0x08012174
 800fdd4:	0801217e 	.word	0x0801217e
 800fdd8:	0800bdf9 	.word	0x0800bdf9
 800fddc:	0800fb5f 	.word	0x0800fb5f
 800fde0:	0801217a 	.word	0x0801217a

0800fde4 <_putc_r>:
 800fde4:	b570      	push	{r4, r5, r6, lr}
 800fde6:	460d      	mov	r5, r1
 800fde8:	4614      	mov	r4, r2
 800fdea:	4606      	mov	r6, r0
 800fdec:	b118      	cbz	r0, 800fdf6 <_putc_r+0x12>
 800fdee:	6983      	ldr	r3, [r0, #24]
 800fdf0:	b90b      	cbnz	r3, 800fdf6 <_putc_r+0x12>
 800fdf2:	f7fe fc19 	bl	800e628 <__sinit>
 800fdf6:	4b1c      	ldr	r3, [pc, #112]	; (800fe68 <_putc_r+0x84>)
 800fdf8:	429c      	cmp	r4, r3
 800fdfa:	d124      	bne.n	800fe46 <_putc_r+0x62>
 800fdfc:	6874      	ldr	r4, [r6, #4]
 800fdfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe00:	07d8      	lsls	r0, r3, #31
 800fe02:	d405      	bmi.n	800fe10 <_putc_r+0x2c>
 800fe04:	89a3      	ldrh	r3, [r4, #12]
 800fe06:	0599      	lsls	r1, r3, #22
 800fe08:	d402      	bmi.n	800fe10 <_putc_r+0x2c>
 800fe0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe0c:	f7ff f88d 	bl	800ef2a <__retarget_lock_acquire_recursive>
 800fe10:	68a3      	ldr	r3, [r4, #8]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	60a3      	str	r3, [r4, #8]
 800fe18:	da05      	bge.n	800fe26 <_putc_r+0x42>
 800fe1a:	69a2      	ldr	r2, [r4, #24]
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	db1c      	blt.n	800fe5a <_putc_r+0x76>
 800fe20:	b2eb      	uxtb	r3, r5
 800fe22:	2b0a      	cmp	r3, #10
 800fe24:	d019      	beq.n	800fe5a <_putc_r+0x76>
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	6022      	str	r2, [r4, #0]
 800fe2c:	701d      	strb	r5, [r3, #0]
 800fe2e:	b2ed      	uxtb	r5, r5
 800fe30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe32:	07da      	lsls	r2, r3, #31
 800fe34:	d405      	bmi.n	800fe42 <_putc_r+0x5e>
 800fe36:	89a3      	ldrh	r3, [r4, #12]
 800fe38:	059b      	lsls	r3, r3, #22
 800fe3a:	d402      	bmi.n	800fe42 <_putc_r+0x5e>
 800fe3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe3e:	f7ff f875 	bl	800ef2c <__retarget_lock_release_recursive>
 800fe42:	4628      	mov	r0, r5
 800fe44:	bd70      	pop	{r4, r5, r6, pc}
 800fe46:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <_putc_r+0x88>)
 800fe48:	429c      	cmp	r4, r3
 800fe4a:	d101      	bne.n	800fe50 <_putc_r+0x6c>
 800fe4c:	68b4      	ldr	r4, [r6, #8]
 800fe4e:	e7d6      	b.n	800fdfe <_putc_r+0x1a>
 800fe50:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <_putc_r+0x8c>)
 800fe52:	429c      	cmp	r4, r3
 800fe54:	bf08      	it	eq
 800fe56:	68f4      	ldreq	r4, [r6, #12]
 800fe58:	e7d1      	b.n	800fdfe <_putc_r+0x1a>
 800fe5a:	4629      	mov	r1, r5
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7fd fb5e 	bl	800d520 <__swbuf_r>
 800fe64:	4605      	mov	r5, r0
 800fe66:	e7e3      	b.n	800fe30 <_putc_r+0x4c>
 800fe68:	08011f54 	.word	0x08011f54
 800fe6c:	08011f74 	.word	0x08011f74
 800fe70:	08011f34 	.word	0x08011f34

0800fe74 <__srget_r>:
 800fe74:	b538      	push	{r3, r4, r5, lr}
 800fe76:	460c      	mov	r4, r1
 800fe78:	4605      	mov	r5, r0
 800fe7a:	b118      	cbz	r0, 800fe84 <__srget_r+0x10>
 800fe7c:	6983      	ldr	r3, [r0, #24]
 800fe7e:	b90b      	cbnz	r3, 800fe84 <__srget_r+0x10>
 800fe80:	f7fe fbd2 	bl	800e628 <__sinit>
 800fe84:	4b0e      	ldr	r3, [pc, #56]	; (800fec0 <__srget_r+0x4c>)
 800fe86:	429c      	cmp	r4, r3
 800fe88:	d10d      	bne.n	800fea6 <__srget_r+0x32>
 800fe8a:	686c      	ldr	r4, [r5, #4]
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f000 f91e 	bl	80100d0 <__srefill_r>
 800fe94:	b988      	cbnz	r0, 800feba <__srget_r+0x46>
 800fe96:	6863      	ldr	r3, [r4, #4]
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	6063      	str	r3, [r4, #4]
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	6022      	str	r2, [r4, #0]
 800fea2:	7818      	ldrb	r0, [r3, #0]
 800fea4:	bd38      	pop	{r3, r4, r5, pc}
 800fea6:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <__srget_r+0x50>)
 800fea8:	429c      	cmp	r4, r3
 800feaa:	d101      	bne.n	800feb0 <__srget_r+0x3c>
 800feac:	68ac      	ldr	r4, [r5, #8]
 800feae:	e7ed      	b.n	800fe8c <__srget_r+0x18>
 800feb0:	4b05      	ldr	r3, [pc, #20]	; (800fec8 <__srget_r+0x54>)
 800feb2:	429c      	cmp	r4, r3
 800feb4:	bf08      	it	eq
 800feb6:	68ec      	ldreq	r4, [r5, #12]
 800feb8:	e7e8      	b.n	800fe8c <__srget_r+0x18>
 800feba:	f04f 30ff 	mov.w	r0, #4294967295
 800febe:	e7f1      	b.n	800fea4 <__srget_r+0x30>
 800fec0:	08011f54 	.word	0x08011f54
 800fec4:	08011f74 	.word	0x08011f74
 800fec8:	08011f34 	.word	0x08011f34
 800fecc:	00000000 	.word	0x00000000

0800fed0 <nan>:
 800fed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fed8 <nan+0x8>
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop
 800fed8:	00000000 	.word	0x00000000
 800fedc:	7ff80000 	.word	0x7ff80000

0800fee0 <_sbrk_r>:
 800fee0:	b538      	push	{r3, r4, r5, lr}
 800fee2:	4d06      	ldr	r5, [pc, #24]	; (800fefc <_sbrk_r+0x1c>)
 800fee4:	2300      	movs	r3, #0
 800fee6:	4604      	mov	r4, r0
 800fee8:	4608      	mov	r0, r1
 800feea:	602b      	str	r3, [r5, #0]
 800feec:	f7f5 f9c4 	bl	8005278 <_sbrk>
 800fef0:	1c43      	adds	r3, r0, #1
 800fef2:	d102      	bne.n	800fefa <_sbrk_r+0x1a>
 800fef4:	682b      	ldr	r3, [r5, #0]
 800fef6:	b103      	cbz	r3, 800fefa <_sbrk_r+0x1a>
 800fef8:	6023      	str	r3, [r4, #0]
 800fefa:	bd38      	pop	{r3, r4, r5, pc}
 800fefc:	20000d88 	.word	0x20000d88

0800ff00 <__sread>:
 800ff00:	b510      	push	{r4, lr}
 800ff02:	460c      	mov	r4, r1
 800ff04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff08:	f000 f8c6 	bl	8010098 <_read_r>
 800ff0c:	2800      	cmp	r0, #0
 800ff0e:	bfab      	itete	ge
 800ff10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff12:	89a3      	ldrhlt	r3, [r4, #12]
 800ff14:	181b      	addge	r3, r3, r0
 800ff16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff1a:	bfac      	ite	ge
 800ff1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff1e:	81a3      	strhlt	r3, [r4, #12]
 800ff20:	bd10      	pop	{r4, pc}

0800ff22 <__swrite>:
 800ff22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff26:	461f      	mov	r7, r3
 800ff28:	898b      	ldrh	r3, [r1, #12]
 800ff2a:	05db      	lsls	r3, r3, #23
 800ff2c:	4605      	mov	r5, r0
 800ff2e:	460c      	mov	r4, r1
 800ff30:	4616      	mov	r6, r2
 800ff32:	d505      	bpl.n	800ff40 <__swrite+0x1e>
 800ff34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff38:	2302      	movs	r3, #2
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	f000 f88e 	bl	801005c <_lseek_r>
 800ff40:	89a3      	ldrh	r3, [r4, #12]
 800ff42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff4a:	81a3      	strh	r3, [r4, #12]
 800ff4c:	4632      	mov	r2, r6
 800ff4e:	463b      	mov	r3, r7
 800ff50:	4628      	mov	r0, r5
 800ff52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff56:	f000 b835 	b.w	800ffc4 <_write_r>

0800ff5a <__sseek>:
 800ff5a:	b510      	push	{r4, lr}
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff62:	f000 f87b 	bl	801005c <_lseek_r>
 800ff66:	1c43      	adds	r3, r0, #1
 800ff68:	89a3      	ldrh	r3, [r4, #12]
 800ff6a:	bf15      	itete	ne
 800ff6c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff76:	81a3      	strheq	r3, [r4, #12]
 800ff78:	bf18      	it	ne
 800ff7a:	81a3      	strhne	r3, [r4, #12]
 800ff7c:	bd10      	pop	{r4, pc}

0800ff7e <__sclose>:
 800ff7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff82:	f000 b839 	b.w	800fff8 <_close_r>

0800ff86 <strncmp>:
 800ff86:	b510      	push	{r4, lr}
 800ff88:	b16a      	cbz	r2, 800ffa6 <strncmp+0x20>
 800ff8a:	3901      	subs	r1, #1
 800ff8c:	1884      	adds	r4, r0, r2
 800ff8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ff92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d103      	bne.n	800ffa2 <strncmp+0x1c>
 800ff9a:	42a0      	cmp	r0, r4
 800ff9c:	d001      	beq.n	800ffa2 <strncmp+0x1c>
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1f5      	bne.n	800ff8e <strncmp+0x8>
 800ffa2:	1a98      	subs	r0, r3, r2
 800ffa4:	bd10      	pop	{r4, pc}
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	e7fc      	b.n	800ffa4 <strncmp+0x1e>

0800ffaa <__ascii_wctomb>:
 800ffaa:	b149      	cbz	r1, 800ffc0 <__ascii_wctomb+0x16>
 800ffac:	2aff      	cmp	r2, #255	; 0xff
 800ffae:	bf85      	ittet	hi
 800ffb0:	238a      	movhi	r3, #138	; 0x8a
 800ffb2:	6003      	strhi	r3, [r0, #0]
 800ffb4:	700a      	strbls	r2, [r1, #0]
 800ffb6:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffba:	bf98      	it	ls
 800ffbc:	2001      	movls	r0, #1
 800ffbe:	4770      	bx	lr
 800ffc0:	4608      	mov	r0, r1
 800ffc2:	4770      	bx	lr

0800ffc4 <_write_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d07      	ldr	r5, [pc, #28]	; (800ffe4 <_write_r+0x20>)
 800ffc8:	4604      	mov	r4, r0
 800ffca:	4608      	mov	r0, r1
 800ffcc:	4611      	mov	r1, r2
 800ffce:	2200      	movs	r2, #0
 800ffd0:	602a      	str	r2, [r5, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	f7f5 f8ff 	bl	80051d6 <_write>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d102      	bne.n	800ffe2 <_write_r+0x1e>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	b103      	cbz	r3, 800ffe2 <_write_r+0x1e>
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	20000d88 	.word	0x20000d88

0800ffe8 <abort>:
 800ffe8:	b508      	push	{r3, lr}
 800ffea:	2006      	movs	r0, #6
 800ffec:	f000 f922 	bl	8010234 <raise>
 800fff0:	2001      	movs	r0, #1
 800fff2:	f7f5 f8d5 	bl	80051a0 <_exit>
	...

0800fff8 <_close_r>:
 800fff8:	b538      	push	{r3, r4, r5, lr}
 800fffa:	4d06      	ldr	r5, [pc, #24]	; (8010014 <_close_r+0x1c>)
 800fffc:	2300      	movs	r3, #0
 800fffe:	4604      	mov	r4, r0
 8010000:	4608      	mov	r0, r1
 8010002:	602b      	str	r3, [r5, #0]
 8010004:	f7f5 f903 	bl	800520e <_close>
 8010008:	1c43      	adds	r3, r0, #1
 801000a:	d102      	bne.n	8010012 <_close_r+0x1a>
 801000c:	682b      	ldr	r3, [r5, #0]
 801000e:	b103      	cbz	r3, 8010012 <_close_r+0x1a>
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	bd38      	pop	{r3, r4, r5, pc}
 8010014:	20000d88 	.word	0x20000d88

08010018 <_fstat_r>:
 8010018:	b538      	push	{r3, r4, r5, lr}
 801001a:	4d07      	ldr	r5, [pc, #28]	; (8010038 <_fstat_r+0x20>)
 801001c:	2300      	movs	r3, #0
 801001e:	4604      	mov	r4, r0
 8010020:	4608      	mov	r0, r1
 8010022:	4611      	mov	r1, r2
 8010024:	602b      	str	r3, [r5, #0]
 8010026:	f7f5 f8fe 	bl	8005226 <_fstat>
 801002a:	1c43      	adds	r3, r0, #1
 801002c:	d102      	bne.n	8010034 <_fstat_r+0x1c>
 801002e:	682b      	ldr	r3, [r5, #0]
 8010030:	b103      	cbz	r3, 8010034 <_fstat_r+0x1c>
 8010032:	6023      	str	r3, [r4, #0]
 8010034:	bd38      	pop	{r3, r4, r5, pc}
 8010036:	bf00      	nop
 8010038:	20000d88 	.word	0x20000d88

0801003c <_isatty_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4d06      	ldr	r5, [pc, #24]	; (8010058 <_isatty_r+0x1c>)
 8010040:	2300      	movs	r3, #0
 8010042:	4604      	mov	r4, r0
 8010044:	4608      	mov	r0, r1
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	f7f5 f8fd 	bl	8005246 <_isatty>
 801004c:	1c43      	adds	r3, r0, #1
 801004e:	d102      	bne.n	8010056 <_isatty_r+0x1a>
 8010050:	682b      	ldr	r3, [r5, #0]
 8010052:	b103      	cbz	r3, 8010056 <_isatty_r+0x1a>
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	bd38      	pop	{r3, r4, r5, pc}
 8010058:	20000d88 	.word	0x20000d88

0801005c <_lseek_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4d07      	ldr	r5, [pc, #28]	; (801007c <_lseek_r+0x20>)
 8010060:	4604      	mov	r4, r0
 8010062:	4608      	mov	r0, r1
 8010064:	4611      	mov	r1, r2
 8010066:	2200      	movs	r2, #0
 8010068:	602a      	str	r2, [r5, #0]
 801006a:	461a      	mov	r2, r3
 801006c:	f7f5 f8f6 	bl	800525c <_lseek>
 8010070:	1c43      	adds	r3, r0, #1
 8010072:	d102      	bne.n	801007a <_lseek_r+0x1e>
 8010074:	682b      	ldr	r3, [r5, #0]
 8010076:	b103      	cbz	r3, 801007a <_lseek_r+0x1e>
 8010078:	6023      	str	r3, [r4, #0]
 801007a:	bd38      	pop	{r3, r4, r5, pc}
 801007c:	20000d88 	.word	0x20000d88

08010080 <__malloc_lock>:
 8010080:	4801      	ldr	r0, [pc, #4]	; (8010088 <__malloc_lock+0x8>)
 8010082:	f7fe bf52 	b.w	800ef2a <__retarget_lock_acquire_recursive>
 8010086:	bf00      	nop
 8010088:	20000d80 	.word	0x20000d80

0801008c <__malloc_unlock>:
 801008c:	4801      	ldr	r0, [pc, #4]	; (8010094 <__malloc_unlock+0x8>)
 801008e:	f7fe bf4d 	b.w	800ef2c <__retarget_lock_release_recursive>
 8010092:	bf00      	nop
 8010094:	20000d80 	.word	0x20000d80

08010098 <_read_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d07      	ldr	r5, [pc, #28]	; (80100b8 <_read_r+0x20>)
 801009c:	4604      	mov	r4, r0
 801009e:	4608      	mov	r0, r1
 80100a0:	4611      	mov	r1, r2
 80100a2:	2200      	movs	r2, #0
 80100a4:	602a      	str	r2, [r5, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	f7f5 f884 	bl	80051b4 <_read>
 80100ac:	1c43      	adds	r3, r0, #1
 80100ae:	d102      	bne.n	80100b6 <_read_r+0x1e>
 80100b0:	682b      	ldr	r3, [r5, #0]
 80100b2:	b103      	cbz	r3, 80100b6 <_read_r+0x1e>
 80100b4:	6023      	str	r3, [r4, #0]
 80100b6:	bd38      	pop	{r3, r4, r5, pc}
 80100b8:	20000d88 	.word	0x20000d88

080100bc <lflush>:
 80100bc:	8983      	ldrh	r3, [r0, #12]
 80100be:	f003 0309 	and.w	r3, r3, #9
 80100c2:	2b09      	cmp	r3, #9
 80100c4:	d101      	bne.n	80100ca <lflush+0xe>
 80100c6:	f7fe ba45 	b.w	800e554 <fflush>
 80100ca:	2000      	movs	r0, #0
 80100cc:	4770      	bx	lr
	...

080100d0 <__srefill_r>:
 80100d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d2:	460c      	mov	r4, r1
 80100d4:	4605      	mov	r5, r0
 80100d6:	b118      	cbz	r0, 80100e0 <__srefill_r+0x10>
 80100d8:	6983      	ldr	r3, [r0, #24]
 80100da:	b90b      	cbnz	r3, 80100e0 <__srefill_r+0x10>
 80100dc:	f7fe faa4 	bl	800e628 <__sinit>
 80100e0:	4b3b      	ldr	r3, [pc, #236]	; (80101d0 <__srefill_r+0x100>)
 80100e2:	429c      	cmp	r4, r3
 80100e4:	d10a      	bne.n	80100fc <__srefill_r+0x2c>
 80100e6:	686c      	ldr	r4, [r5, #4]
 80100e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100ec:	2300      	movs	r3, #0
 80100ee:	6063      	str	r3, [r4, #4]
 80100f0:	89a3      	ldrh	r3, [r4, #12]
 80100f2:	069e      	lsls	r6, r3, #26
 80100f4:	d50c      	bpl.n	8010110 <__srefill_r+0x40>
 80100f6:	f04f 30ff 	mov.w	r0, #4294967295
 80100fa:	e066      	b.n	80101ca <__srefill_r+0xfa>
 80100fc:	4b35      	ldr	r3, [pc, #212]	; (80101d4 <__srefill_r+0x104>)
 80100fe:	429c      	cmp	r4, r3
 8010100:	d101      	bne.n	8010106 <__srefill_r+0x36>
 8010102:	68ac      	ldr	r4, [r5, #8]
 8010104:	e7f0      	b.n	80100e8 <__srefill_r+0x18>
 8010106:	4b34      	ldr	r3, [pc, #208]	; (80101d8 <__srefill_r+0x108>)
 8010108:	429c      	cmp	r4, r3
 801010a:	bf08      	it	eq
 801010c:	68ec      	ldreq	r4, [r5, #12]
 801010e:	e7eb      	b.n	80100e8 <__srefill_r+0x18>
 8010110:	0758      	lsls	r0, r3, #29
 8010112:	d448      	bmi.n	80101a6 <__srefill_r+0xd6>
 8010114:	06d9      	lsls	r1, r3, #27
 8010116:	d405      	bmi.n	8010124 <__srefill_r+0x54>
 8010118:	2309      	movs	r3, #9
 801011a:	602b      	str	r3, [r5, #0]
 801011c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010120:	81a3      	strh	r3, [r4, #12]
 8010122:	e7e8      	b.n	80100f6 <__srefill_r+0x26>
 8010124:	071a      	lsls	r2, r3, #28
 8010126:	d50b      	bpl.n	8010140 <__srefill_r+0x70>
 8010128:	4621      	mov	r1, r4
 801012a:	4628      	mov	r0, r5
 801012c:	f7fe f9d6 	bl	800e4dc <_fflush_r>
 8010130:	2800      	cmp	r0, #0
 8010132:	d1e0      	bne.n	80100f6 <__srefill_r+0x26>
 8010134:	89a3      	ldrh	r3, [r4, #12]
 8010136:	60a0      	str	r0, [r4, #8]
 8010138:	f023 0308 	bic.w	r3, r3, #8
 801013c:	81a3      	strh	r3, [r4, #12]
 801013e:	61a0      	str	r0, [r4, #24]
 8010140:	89a3      	ldrh	r3, [r4, #12]
 8010142:	f043 0304 	orr.w	r3, r3, #4
 8010146:	81a3      	strh	r3, [r4, #12]
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	b91b      	cbnz	r3, 8010154 <__srefill_r+0x84>
 801014c:	4621      	mov	r1, r4
 801014e:	4628      	mov	r0, r5
 8010150:	f7fe ff12 	bl	800ef78 <__smakebuf_r>
 8010154:	89a6      	ldrh	r6, [r4, #12]
 8010156:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 801015a:	07b3      	lsls	r3, r6, #30
 801015c:	d00f      	beq.n	801017e <__srefill_r+0xae>
 801015e:	2301      	movs	r3, #1
 8010160:	81a3      	strh	r3, [r4, #12]
 8010162:	4b1e      	ldr	r3, [pc, #120]	; (80101dc <__srefill_r+0x10c>)
 8010164:	491e      	ldr	r1, [pc, #120]	; (80101e0 <__srefill_r+0x110>)
 8010166:	6818      	ldr	r0, [r3, #0]
 8010168:	f006 0609 	and.w	r6, r6, #9
 801016c:	f7fe faec 	bl	800e748 <_fwalk>
 8010170:	2e09      	cmp	r6, #9
 8010172:	81a7      	strh	r7, [r4, #12]
 8010174:	d103      	bne.n	801017e <__srefill_r+0xae>
 8010176:	4621      	mov	r1, r4
 8010178:	4628      	mov	r0, r5
 801017a:	f7fe f929 	bl	800e3d0 <__sflush_r>
 801017e:	6922      	ldr	r2, [r4, #16]
 8010180:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010182:	6963      	ldr	r3, [r4, #20]
 8010184:	6a21      	ldr	r1, [r4, #32]
 8010186:	6022      	str	r2, [r4, #0]
 8010188:	4628      	mov	r0, r5
 801018a:	47b0      	blx	r6
 801018c:	2800      	cmp	r0, #0
 801018e:	6060      	str	r0, [r4, #4]
 8010190:	dc1c      	bgt.n	80101cc <__srefill_r+0xfc>
 8010192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010196:	bf17      	itett	ne
 8010198:	2200      	movne	r2, #0
 801019a:	f043 0320 	orreq.w	r3, r3, #32
 801019e:	6062      	strne	r2, [r4, #4]
 80101a0:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80101a4:	e7bc      	b.n	8010120 <__srefill_r+0x50>
 80101a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101a8:	2900      	cmp	r1, #0
 80101aa:	d0cd      	beq.n	8010148 <__srefill_r+0x78>
 80101ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101b0:	4299      	cmp	r1, r3
 80101b2:	d002      	beq.n	80101ba <__srefill_r+0xea>
 80101b4:	4628      	mov	r0, r5
 80101b6:	f7ff fc11 	bl	800f9dc <_free_r>
 80101ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80101bc:	6063      	str	r3, [r4, #4]
 80101be:	2000      	movs	r0, #0
 80101c0:	6360      	str	r0, [r4, #52]	; 0x34
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0c0      	beq.n	8010148 <__srefill_r+0x78>
 80101c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80101c8:	6023      	str	r3, [r4, #0]
 80101ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101cc:	2000      	movs	r0, #0
 80101ce:	e7fc      	b.n	80101ca <__srefill_r+0xfa>
 80101d0:	08011f54 	.word	0x08011f54
 80101d4:	08011f74 	.word	0x08011f74
 80101d8:	08011f34 	.word	0x08011f34
 80101dc:	08011c78 	.word	0x08011c78
 80101e0:	080100bd 	.word	0x080100bd

080101e4 <_raise_r>:
 80101e4:	291f      	cmp	r1, #31
 80101e6:	b538      	push	{r3, r4, r5, lr}
 80101e8:	4604      	mov	r4, r0
 80101ea:	460d      	mov	r5, r1
 80101ec:	d904      	bls.n	80101f8 <_raise_r+0x14>
 80101ee:	2316      	movs	r3, #22
 80101f0:	6003      	str	r3, [r0, #0]
 80101f2:	f04f 30ff 	mov.w	r0, #4294967295
 80101f6:	bd38      	pop	{r3, r4, r5, pc}
 80101f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101fa:	b112      	cbz	r2, 8010202 <_raise_r+0x1e>
 80101fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010200:	b94b      	cbnz	r3, 8010216 <_raise_r+0x32>
 8010202:	4620      	mov	r0, r4
 8010204:	f000 f830 	bl	8010268 <_getpid_r>
 8010208:	462a      	mov	r2, r5
 801020a:	4601      	mov	r1, r0
 801020c:	4620      	mov	r0, r4
 801020e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010212:	f000 b817 	b.w	8010244 <_kill_r>
 8010216:	2b01      	cmp	r3, #1
 8010218:	d00a      	beq.n	8010230 <_raise_r+0x4c>
 801021a:	1c59      	adds	r1, r3, #1
 801021c:	d103      	bne.n	8010226 <_raise_r+0x42>
 801021e:	2316      	movs	r3, #22
 8010220:	6003      	str	r3, [r0, #0]
 8010222:	2001      	movs	r0, #1
 8010224:	e7e7      	b.n	80101f6 <_raise_r+0x12>
 8010226:	2400      	movs	r4, #0
 8010228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801022c:	4628      	mov	r0, r5
 801022e:	4798      	blx	r3
 8010230:	2000      	movs	r0, #0
 8010232:	e7e0      	b.n	80101f6 <_raise_r+0x12>

08010234 <raise>:
 8010234:	4b02      	ldr	r3, [pc, #8]	; (8010240 <raise+0xc>)
 8010236:	4601      	mov	r1, r0
 8010238:	6818      	ldr	r0, [r3, #0]
 801023a:	f7ff bfd3 	b.w	80101e4 <_raise_r>
 801023e:	bf00      	nop
 8010240:	20000028 	.word	0x20000028

08010244 <_kill_r>:
 8010244:	b538      	push	{r3, r4, r5, lr}
 8010246:	4d07      	ldr	r5, [pc, #28]	; (8010264 <_kill_r+0x20>)
 8010248:	2300      	movs	r3, #0
 801024a:	4604      	mov	r4, r0
 801024c:	4608      	mov	r0, r1
 801024e:	4611      	mov	r1, r2
 8010250:	602b      	str	r3, [r5, #0]
 8010252:	f7f4 ff95 	bl	8005180 <_kill>
 8010256:	1c43      	adds	r3, r0, #1
 8010258:	d102      	bne.n	8010260 <_kill_r+0x1c>
 801025a:	682b      	ldr	r3, [r5, #0]
 801025c:	b103      	cbz	r3, 8010260 <_kill_r+0x1c>
 801025e:	6023      	str	r3, [r4, #0]
 8010260:	bd38      	pop	{r3, r4, r5, pc}
 8010262:	bf00      	nop
 8010264:	20000d88 	.word	0x20000d88

08010268 <_getpid_r>:
 8010268:	f7f4 bf82 	b.w	8005170 <_getpid>

0801026c <pow>:
 801026c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010270:	ec59 8b10 	vmov	r8, r9, d0
 8010274:	ec57 6b11 	vmov	r6, r7, d1
 8010278:	f000 f8a6 	bl	80103c8 <__ieee754_pow>
 801027c:	4b4e      	ldr	r3, [pc, #312]	; (80103b8 <pow+0x14c>)
 801027e:	f993 3000 	ldrsb.w	r3, [r3]
 8010282:	3301      	adds	r3, #1
 8010284:	ec55 4b10 	vmov	r4, r5, d0
 8010288:	d015      	beq.n	80102b6 <pow+0x4a>
 801028a:	4632      	mov	r2, r6
 801028c:	463b      	mov	r3, r7
 801028e:	4630      	mov	r0, r6
 8010290:	4639      	mov	r1, r7
 8010292:	f7f0 fc7b 	bl	8000b8c <__aeabi_dcmpun>
 8010296:	b970      	cbnz	r0, 80102b6 <pow+0x4a>
 8010298:	4642      	mov	r2, r8
 801029a:	464b      	mov	r3, r9
 801029c:	4640      	mov	r0, r8
 801029e:	4649      	mov	r1, r9
 80102a0:	f7f0 fc74 	bl	8000b8c <__aeabi_dcmpun>
 80102a4:	2200      	movs	r2, #0
 80102a6:	2300      	movs	r3, #0
 80102a8:	b148      	cbz	r0, 80102be <pow+0x52>
 80102aa:	4630      	mov	r0, r6
 80102ac:	4639      	mov	r1, r7
 80102ae:	f7f0 fc3b 	bl	8000b28 <__aeabi_dcmpeq>
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d17d      	bne.n	80103b2 <pow+0x146>
 80102b6:	ec45 4b10 	vmov	d0, r4, r5
 80102ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102be:	4640      	mov	r0, r8
 80102c0:	4649      	mov	r1, r9
 80102c2:	f7f0 fc31 	bl	8000b28 <__aeabi_dcmpeq>
 80102c6:	b1e0      	cbz	r0, 8010302 <pow+0x96>
 80102c8:	2200      	movs	r2, #0
 80102ca:	2300      	movs	r3, #0
 80102cc:	4630      	mov	r0, r6
 80102ce:	4639      	mov	r1, r7
 80102d0:	f7f0 fc2a 	bl	8000b28 <__aeabi_dcmpeq>
 80102d4:	2800      	cmp	r0, #0
 80102d6:	d16c      	bne.n	80103b2 <pow+0x146>
 80102d8:	ec47 6b10 	vmov	d0, r6, r7
 80102dc:	f000 fe53 	bl	8010f86 <finite>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d0e8      	beq.n	80102b6 <pow+0x4a>
 80102e4:	2200      	movs	r2, #0
 80102e6:	2300      	movs	r3, #0
 80102e8:	4630      	mov	r0, r6
 80102ea:	4639      	mov	r1, r7
 80102ec:	f7f0 fc26 	bl	8000b3c <__aeabi_dcmplt>
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d0e0      	beq.n	80102b6 <pow+0x4a>
 80102f4:	f7fb fc9c 	bl	800bc30 <__errno>
 80102f8:	2321      	movs	r3, #33	; 0x21
 80102fa:	6003      	str	r3, [r0, #0]
 80102fc:	2400      	movs	r4, #0
 80102fe:	4d2f      	ldr	r5, [pc, #188]	; (80103bc <pow+0x150>)
 8010300:	e7d9      	b.n	80102b6 <pow+0x4a>
 8010302:	ec45 4b10 	vmov	d0, r4, r5
 8010306:	f000 fe3e 	bl	8010f86 <finite>
 801030a:	bbb8      	cbnz	r0, 801037c <pow+0x110>
 801030c:	ec49 8b10 	vmov	d0, r8, r9
 8010310:	f000 fe39 	bl	8010f86 <finite>
 8010314:	b390      	cbz	r0, 801037c <pow+0x110>
 8010316:	ec47 6b10 	vmov	d0, r6, r7
 801031a:	f000 fe34 	bl	8010f86 <finite>
 801031e:	b368      	cbz	r0, 801037c <pow+0x110>
 8010320:	4622      	mov	r2, r4
 8010322:	462b      	mov	r3, r5
 8010324:	4620      	mov	r0, r4
 8010326:	4629      	mov	r1, r5
 8010328:	f7f0 fc30 	bl	8000b8c <__aeabi_dcmpun>
 801032c:	b160      	cbz	r0, 8010348 <pow+0xdc>
 801032e:	f7fb fc7f 	bl	800bc30 <__errno>
 8010332:	2321      	movs	r3, #33	; 0x21
 8010334:	6003      	str	r3, [r0, #0]
 8010336:	2200      	movs	r2, #0
 8010338:	2300      	movs	r3, #0
 801033a:	4610      	mov	r0, r2
 801033c:	4619      	mov	r1, r3
 801033e:	f7f0 fab5 	bl	80008ac <__aeabi_ddiv>
 8010342:	4604      	mov	r4, r0
 8010344:	460d      	mov	r5, r1
 8010346:	e7b6      	b.n	80102b6 <pow+0x4a>
 8010348:	f7fb fc72 	bl	800bc30 <__errno>
 801034c:	2322      	movs	r3, #34	; 0x22
 801034e:	6003      	str	r3, [r0, #0]
 8010350:	2200      	movs	r2, #0
 8010352:	2300      	movs	r3, #0
 8010354:	4640      	mov	r0, r8
 8010356:	4649      	mov	r1, r9
 8010358:	f7f0 fbf0 	bl	8000b3c <__aeabi_dcmplt>
 801035c:	2400      	movs	r4, #0
 801035e:	b158      	cbz	r0, 8010378 <pow+0x10c>
 8010360:	ec47 6b10 	vmov	d0, r6, r7
 8010364:	f000 fe1a 	bl	8010f9c <rint>
 8010368:	4632      	mov	r2, r6
 801036a:	ec51 0b10 	vmov	r0, r1, d0
 801036e:	463b      	mov	r3, r7
 8010370:	f7f0 fbda 	bl	8000b28 <__aeabi_dcmpeq>
 8010374:	2800      	cmp	r0, #0
 8010376:	d0c2      	beq.n	80102fe <pow+0x92>
 8010378:	4d11      	ldr	r5, [pc, #68]	; (80103c0 <pow+0x154>)
 801037a:	e79c      	b.n	80102b6 <pow+0x4a>
 801037c:	2200      	movs	r2, #0
 801037e:	2300      	movs	r3, #0
 8010380:	4620      	mov	r0, r4
 8010382:	4629      	mov	r1, r5
 8010384:	f7f0 fbd0 	bl	8000b28 <__aeabi_dcmpeq>
 8010388:	2800      	cmp	r0, #0
 801038a:	d094      	beq.n	80102b6 <pow+0x4a>
 801038c:	ec49 8b10 	vmov	d0, r8, r9
 8010390:	f000 fdf9 	bl	8010f86 <finite>
 8010394:	2800      	cmp	r0, #0
 8010396:	d08e      	beq.n	80102b6 <pow+0x4a>
 8010398:	ec47 6b10 	vmov	d0, r6, r7
 801039c:	f000 fdf3 	bl	8010f86 <finite>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d088      	beq.n	80102b6 <pow+0x4a>
 80103a4:	f7fb fc44 	bl	800bc30 <__errno>
 80103a8:	2322      	movs	r3, #34	; 0x22
 80103aa:	6003      	str	r3, [r0, #0]
 80103ac:	2400      	movs	r4, #0
 80103ae:	2500      	movs	r5, #0
 80103b0:	e781      	b.n	80102b6 <pow+0x4a>
 80103b2:	4d04      	ldr	r5, [pc, #16]	; (80103c4 <pow+0x158>)
 80103b4:	2400      	movs	r4, #0
 80103b6:	e77e      	b.n	80102b6 <pow+0x4a>
 80103b8:	200001fc 	.word	0x200001fc
 80103bc:	fff00000 	.word	0xfff00000
 80103c0:	7ff00000 	.word	0x7ff00000
 80103c4:	3ff00000 	.word	0x3ff00000

080103c8 <__ieee754_pow>:
 80103c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103cc:	ed2d 8b06 	vpush	{d8-d10}
 80103d0:	b08d      	sub	sp, #52	; 0x34
 80103d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80103d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80103da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80103de:	ea56 0100 	orrs.w	r1, r6, r0
 80103e2:	ec53 2b10 	vmov	r2, r3, d0
 80103e6:	f000 84d1 	beq.w	8010d8c <__ieee754_pow+0x9c4>
 80103ea:	497f      	ldr	r1, [pc, #508]	; (80105e8 <__ieee754_pow+0x220>)
 80103ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80103f0:	428c      	cmp	r4, r1
 80103f2:	ee10 8a10 	vmov	r8, s0
 80103f6:	4699      	mov	r9, r3
 80103f8:	dc09      	bgt.n	801040e <__ieee754_pow+0x46>
 80103fa:	d103      	bne.n	8010404 <__ieee754_pow+0x3c>
 80103fc:	b97a      	cbnz	r2, 801041e <__ieee754_pow+0x56>
 80103fe:	42a6      	cmp	r6, r4
 8010400:	dd02      	ble.n	8010408 <__ieee754_pow+0x40>
 8010402:	e00c      	b.n	801041e <__ieee754_pow+0x56>
 8010404:	428e      	cmp	r6, r1
 8010406:	dc02      	bgt.n	801040e <__ieee754_pow+0x46>
 8010408:	428e      	cmp	r6, r1
 801040a:	d110      	bne.n	801042e <__ieee754_pow+0x66>
 801040c:	b178      	cbz	r0, 801042e <__ieee754_pow+0x66>
 801040e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010412:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010416:	ea54 0308 	orrs.w	r3, r4, r8
 801041a:	f000 84b7 	beq.w	8010d8c <__ieee754_pow+0x9c4>
 801041e:	4873      	ldr	r0, [pc, #460]	; (80105ec <__ieee754_pow+0x224>)
 8010420:	b00d      	add	sp, #52	; 0x34
 8010422:	ecbd 8b06 	vpop	{d8-d10}
 8010426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042a:	f7ff bd51 	b.w	800fed0 <nan>
 801042e:	f1b9 0f00 	cmp.w	r9, #0
 8010432:	da36      	bge.n	80104a2 <__ieee754_pow+0xda>
 8010434:	496e      	ldr	r1, [pc, #440]	; (80105f0 <__ieee754_pow+0x228>)
 8010436:	428e      	cmp	r6, r1
 8010438:	dc51      	bgt.n	80104de <__ieee754_pow+0x116>
 801043a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801043e:	428e      	cmp	r6, r1
 8010440:	f340 84af 	ble.w	8010da2 <__ieee754_pow+0x9da>
 8010444:	1531      	asrs	r1, r6, #20
 8010446:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801044a:	2914      	cmp	r1, #20
 801044c:	dd0f      	ble.n	801046e <__ieee754_pow+0xa6>
 801044e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010452:	fa20 fc01 	lsr.w	ip, r0, r1
 8010456:	fa0c f101 	lsl.w	r1, ip, r1
 801045a:	4281      	cmp	r1, r0
 801045c:	f040 84a1 	bne.w	8010da2 <__ieee754_pow+0x9da>
 8010460:	f00c 0c01 	and.w	ip, ip, #1
 8010464:	f1cc 0102 	rsb	r1, ip, #2
 8010468:	9100      	str	r1, [sp, #0]
 801046a:	b180      	cbz	r0, 801048e <__ieee754_pow+0xc6>
 801046c:	e059      	b.n	8010522 <__ieee754_pow+0x15a>
 801046e:	2800      	cmp	r0, #0
 8010470:	d155      	bne.n	801051e <__ieee754_pow+0x156>
 8010472:	f1c1 0114 	rsb	r1, r1, #20
 8010476:	fa46 fc01 	asr.w	ip, r6, r1
 801047a:	fa0c f101 	lsl.w	r1, ip, r1
 801047e:	42b1      	cmp	r1, r6
 8010480:	f040 848c 	bne.w	8010d9c <__ieee754_pow+0x9d4>
 8010484:	f00c 0c01 	and.w	ip, ip, #1
 8010488:	f1cc 0102 	rsb	r1, ip, #2
 801048c:	9100      	str	r1, [sp, #0]
 801048e:	4959      	ldr	r1, [pc, #356]	; (80105f4 <__ieee754_pow+0x22c>)
 8010490:	428e      	cmp	r6, r1
 8010492:	d12d      	bne.n	80104f0 <__ieee754_pow+0x128>
 8010494:	2f00      	cmp	r7, #0
 8010496:	da79      	bge.n	801058c <__ieee754_pow+0x1c4>
 8010498:	4956      	ldr	r1, [pc, #344]	; (80105f4 <__ieee754_pow+0x22c>)
 801049a:	2000      	movs	r0, #0
 801049c:	f7f0 fa06 	bl	80008ac <__aeabi_ddiv>
 80104a0:	e016      	b.n	80104d0 <__ieee754_pow+0x108>
 80104a2:	2100      	movs	r1, #0
 80104a4:	9100      	str	r1, [sp, #0]
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d13b      	bne.n	8010522 <__ieee754_pow+0x15a>
 80104aa:	494f      	ldr	r1, [pc, #316]	; (80105e8 <__ieee754_pow+0x220>)
 80104ac:	428e      	cmp	r6, r1
 80104ae:	d1ee      	bne.n	801048e <__ieee754_pow+0xc6>
 80104b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80104b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80104b8:	ea53 0308 	orrs.w	r3, r3, r8
 80104bc:	f000 8466 	beq.w	8010d8c <__ieee754_pow+0x9c4>
 80104c0:	4b4d      	ldr	r3, [pc, #308]	; (80105f8 <__ieee754_pow+0x230>)
 80104c2:	429c      	cmp	r4, r3
 80104c4:	dd0d      	ble.n	80104e2 <__ieee754_pow+0x11a>
 80104c6:	2f00      	cmp	r7, #0
 80104c8:	f280 8464 	bge.w	8010d94 <__ieee754_pow+0x9cc>
 80104cc:	2000      	movs	r0, #0
 80104ce:	2100      	movs	r1, #0
 80104d0:	ec41 0b10 	vmov	d0, r0, r1
 80104d4:	b00d      	add	sp, #52	; 0x34
 80104d6:	ecbd 8b06 	vpop	{d8-d10}
 80104da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104de:	2102      	movs	r1, #2
 80104e0:	e7e0      	b.n	80104a4 <__ieee754_pow+0xdc>
 80104e2:	2f00      	cmp	r7, #0
 80104e4:	daf2      	bge.n	80104cc <__ieee754_pow+0x104>
 80104e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80104ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104ee:	e7ef      	b.n	80104d0 <__ieee754_pow+0x108>
 80104f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80104f4:	d104      	bne.n	8010500 <__ieee754_pow+0x138>
 80104f6:	4610      	mov	r0, r2
 80104f8:	4619      	mov	r1, r3
 80104fa:	f7f0 f8ad 	bl	8000658 <__aeabi_dmul>
 80104fe:	e7e7      	b.n	80104d0 <__ieee754_pow+0x108>
 8010500:	493e      	ldr	r1, [pc, #248]	; (80105fc <__ieee754_pow+0x234>)
 8010502:	428f      	cmp	r7, r1
 8010504:	d10d      	bne.n	8010522 <__ieee754_pow+0x15a>
 8010506:	f1b9 0f00 	cmp.w	r9, #0
 801050a:	db0a      	blt.n	8010522 <__ieee754_pow+0x15a>
 801050c:	ec43 2b10 	vmov	d0, r2, r3
 8010510:	b00d      	add	sp, #52	; 0x34
 8010512:	ecbd 8b06 	vpop	{d8-d10}
 8010516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051a:	f000 bc77 	b.w	8010e0c <__ieee754_sqrt>
 801051e:	2100      	movs	r1, #0
 8010520:	9100      	str	r1, [sp, #0]
 8010522:	ec43 2b10 	vmov	d0, r2, r3
 8010526:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801052a:	f000 fd23 	bl	8010f74 <fabs>
 801052e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010532:	ec51 0b10 	vmov	r0, r1, d0
 8010536:	f1b8 0f00 	cmp.w	r8, #0
 801053a:	d12a      	bne.n	8010592 <__ieee754_pow+0x1ca>
 801053c:	b12c      	cbz	r4, 801054a <__ieee754_pow+0x182>
 801053e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80105f4 <__ieee754_pow+0x22c>
 8010542:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010546:	45e6      	cmp	lr, ip
 8010548:	d123      	bne.n	8010592 <__ieee754_pow+0x1ca>
 801054a:	2f00      	cmp	r7, #0
 801054c:	da05      	bge.n	801055a <__ieee754_pow+0x192>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	2000      	movs	r0, #0
 8010554:	4927      	ldr	r1, [pc, #156]	; (80105f4 <__ieee754_pow+0x22c>)
 8010556:	f7f0 f9a9 	bl	80008ac <__aeabi_ddiv>
 801055a:	f1b9 0f00 	cmp.w	r9, #0
 801055e:	dab7      	bge.n	80104d0 <__ieee754_pow+0x108>
 8010560:	9b00      	ldr	r3, [sp, #0]
 8010562:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010566:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801056a:	4323      	orrs	r3, r4
 801056c:	d108      	bne.n	8010580 <__ieee754_pow+0x1b8>
 801056e:	4602      	mov	r2, r0
 8010570:	460b      	mov	r3, r1
 8010572:	4610      	mov	r0, r2
 8010574:	4619      	mov	r1, r3
 8010576:	f7ef feb7 	bl	80002e8 <__aeabi_dsub>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	e78d      	b.n	801049c <__ieee754_pow+0xd4>
 8010580:	9b00      	ldr	r3, [sp, #0]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d1a4      	bne.n	80104d0 <__ieee754_pow+0x108>
 8010586:	4602      	mov	r2, r0
 8010588:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801058c:	4610      	mov	r0, r2
 801058e:	4619      	mov	r1, r3
 8010590:	e79e      	b.n	80104d0 <__ieee754_pow+0x108>
 8010592:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010596:	f10c 35ff 	add.w	r5, ip, #4294967295
 801059a:	950a      	str	r5, [sp, #40]	; 0x28
 801059c:	9d00      	ldr	r5, [sp, #0]
 801059e:	46ac      	mov	ip, r5
 80105a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80105a2:	ea5c 0505 	orrs.w	r5, ip, r5
 80105a6:	d0e4      	beq.n	8010572 <__ieee754_pow+0x1aa>
 80105a8:	4b15      	ldr	r3, [pc, #84]	; (8010600 <__ieee754_pow+0x238>)
 80105aa:	429e      	cmp	r6, r3
 80105ac:	f340 80fc 	ble.w	80107a8 <__ieee754_pow+0x3e0>
 80105b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80105b4:	429e      	cmp	r6, r3
 80105b6:	4b10      	ldr	r3, [pc, #64]	; (80105f8 <__ieee754_pow+0x230>)
 80105b8:	dd07      	ble.n	80105ca <__ieee754_pow+0x202>
 80105ba:	429c      	cmp	r4, r3
 80105bc:	dc0a      	bgt.n	80105d4 <__ieee754_pow+0x20c>
 80105be:	2f00      	cmp	r7, #0
 80105c0:	da84      	bge.n	80104cc <__ieee754_pow+0x104>
 80105c2:	a307      	add	r3, pc, #28	; (adr r3, 80105e0 <__ieee754_pow+0x218>)
 80105c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c8:	e795      	b.n	80104f6 <__ieee754_pow+0x12e>
 80105ca:	429c      	cmp	r4, r3
 80105cc:	dbf7      	blt.n	80105be <__ieee754_pow+0x1f6>
 80105ce:	4b09      	ldr	r3, [pc, #36]	; (80105f4 <__ieee754_pow+0x22c>)
 80105d0:	429c      	cmp	r4, r3
 80105d2:	dd17      	ble.n	8010604 <__ieee754_pow+0x23c>
 80105d4:	2f00      	cmp	r7, #0
 80105d6:	dcf4      	bgt.n	80105c2 <__ieee754_pow+0x1fa>
 80105d8:	e778      	b.n	80104cc <__ieee754_pow+0x104>
 80105da:	bf00      	nop
 80105dc:	f3af 8000 	nop.w
 80105e0:	8800759c 	.word	0x8800759c
 80105e4:	7e37e43c 	.word	0x7e37e43c
 80105e8:	7ff00000 	.word	0x7ff00000
 80105ec:	08011db3 	.word	0x08011db3
 80105f0:	433fffff 	.word	0x433fffff
 80105f4:	3ff00000 	.word	0x3ff00000
 80105f8:	3fefffff 	.word	0x3fefffff
 80105fc:	3fe00000 	.word	0x3fe00000
 8010600:	41e00000 	.word	0x41e00000
 8010604:	4b64      	ldr	r3, [pc, #400]	; (8010798 <__ieee754_pow+0x3d0>)
 8010606:	2200      	movs	r2, #0
 8010608:	f7ef fe6e 	bl	80002e8 <__aeabi_dsub>
 801060c:	a356      	add	r3, pc, #344	; (adr r3, 8010768 <__ieee754_pow+0x3a0>)
 801060e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010612:	4604      	mov	r4, r0
 8010614:	460d      	mov	r5, r1
 8010616:	f7f0 f81f 	bl	8000658 <__aeabi_dmul>
 801061a:	a355      	add	r3, pc, #340	; (adr r3, 8010770 <__ieee754_pow+0x3a8>)
 801061c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010620:	4606      	mov	r6, r0
 8010622:	460f      	mov	r7, r1
 8010624:	4620      	mov	r0, r4
 8010626:	4629      	mov	r1, r5
 8010628:	f7f0 f816 	bl	8000658 <__aeabi_dmul>
 801062c:	4b5b      	ldr	r3, [pc, #364]	; (801079c <__ieee754_pow+0x3d4>)
 801062e:	4682      	mov	sl, r0
 8010630:	468b      	mov	fp, r1
 8010632:	2200      	movs	r2, #0
 8010634:	4620      	mov	r0, r4
 8010636:	4629      	mov	r1, r5
 8010638:	f7f0 f80e 	bl	8000658 <__aeabi_dmul>
 801063c:	4602      	mov	r2, r0
 801063e:	460b      	mov	r3, r1
 8010640:	a14d      	add	r1, pc, #308	; (adr r1, 8010778 <__ieee754_pow+0x3b0>)
 8010642:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010646:	f7ef fe4f 	bl	80002e8 <__aeabi_dsub>
 801064a:	4622      	mov	r2, r4
 801064c:	462b      	mov	r3, r5
 801064e:	f7f0 f803 	bl	8000658 <__aeabi_dmul>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	2000      	movs	r0, #0
 8010658:	4951      	ldr	r1, [pc, #324]	; (80107a0 <__ieee754_pow+0x3d8>)
 801065a:	f7ef fe45 	bl	80002e8 <__aeabi_dsub>
 801065e:	4622      	mov	r2, r4
 8010660:	4680      	mov	r8, r0
 8010662:	4689      	mov	r9, r1
 8010664:	462b      	mov	r3, r5
 8010666:	4620      	mov	r0, r4
 8010668:	4629      	mov	r1, r5
 801066a:	f7ef fff5 	bl	8000658 <__aeabi_dmul>
 801066e:	4602      	mov	r2, r0
 8010670:	460b      	mov	r3, r1
 8010672:	4640      	mov	r0, r8
 8010674:	4649      	mov	r1, r9
 8010676:	f7ef ffef 	bl	8000658 <__aeabi_dmul>
 801067a:	a341      	add	r3, pc, #260	; (adr r3, 8010780 <__ieee754_pow+0x3b8>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	f7ef ffea 	bl	8000658 <__aeabi_dmul>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	4650      	mov	r0, sl
 801068a:	4659      	mov	r1, fp
 801068c:	f7ef fe2c 	bl	80002e8 <__aeabi_dsub>
 8010690:	4602      	mov	r2, r0
 8010692:	460b      	mov	r3, r1
 8010694:	4680      	mov	r8, r0
 8010696:	4689      	mov	r9, r1
 8010698:	4630      	mov	r0, r6
 801069a:	4639      	mov	r1, r7
 801069c:	f7ef fe26 	bl	80002ec <__adddf3>
 80106a0:	2400      	movs	r4, #0
 80106a2:	4632      	mov	r2, r6
 80106a4:	463b      	mov	r3, r7
 80106a6:	4620      	mov	r0, r4
 80106a8:	460d      	mov	r5, r1
 80106aa:	f7ef fe1d 	bl	80002e8 <__aeabi_dsub>
 80106ae:	4602      	mov	r2, r0
 80106b0:	460b      	mov	r3, r1
 80106b2:	4640      	mov	r0, r8
 80106b4:	4649      	mov	r1, r9
 80106b6:	f7ef fe17 	bl	80002e8 <__aeabi_dsub>
 80106ba:	9b00      	ldr	r3, [sp, #0]
 80106bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106be:	3b01      	subs	r3, #1
 80106c0:	4313      	orrs	r3, r2
 80106c2:	4682      	mov	sl, r0
 80106c4:	468b      	mov	fp, r1
 80106c6:	f040 81f1 	bne.w	8010aac <__ieee754_pow+0x6e4>
 80106ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010788 <__ieee754_pow+0x3c0>
 80106ce:	eeb0 8a47 	vmov.f32	s16, s14
 80106d2:	eef0 8a67 	vmov.f32	s17, s15
 80106d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80106da:	2600      	movs	r6, #0
 80106dc:	4632      	mov	r2, r6
 80106de:	463b      	mov	r3, r7
 80106e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80106e4:	f7ef fe00 	bl	80002e8 <__aeabi_dsub>
 80106e8:	4622      	mov	r2, r4
 80106ea:	462b      	mov	r3, r5
 80106ec:	f7ef ffb4 	bl	8000658 <__aeabi_dmul>
 80106f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106f4:	4680      	mov	r8, r0
 80106f6:	4689      	mov	r9, r1
 80106f8:	4650      	mov	r0, sl
 80106fa:	4659      	mov	r1, fp
 80106fc:	f7ef ffac 	bl	8000658 <__aeabi_dmul>
 8010700:	4602      	mov	r2, r0
 8010702:	460b      	mov	r3, r1
 8010704:	4640      	mov	r0, r8
 8010706:	4649      	mov	r1, r9
 8010708:	f7ef fdf0 	bl	80002ec <__adddf3>
 801070c:	4632      	mov	r2, r6
 801070e:	463b      	mov	r3, r7
 8010710:	4680      	mov	r8, r0
 8010712:	4689      	mov	r9, r1
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7ef ff9e 	bl	8000658 <__aeabi_dmul>
 801071c:	460b      	mov	r3, r1
 801071e:	4604      	mov	r4, r0
 8010720:	460d      	mov	r5, r1
 8010722:	4602      	mov	r2, r0
 8010724:	4649      	mov	r1, r9
 8010726:	4640      	mov	r0, r8
 8010728:	f7ef fde0 	bl	80002ec <__adddf3>
 801072c:	4b1d      	ldr	r3, [pc, #116]	; (80107a4 <__ieee754_pow+0x3dc>)
 801072e:	4299      	cmp	r1, r3
 8010730:	ec45 4b19 	vmov	d9, r4, r5
 8010734:	4606      	mov	r6, r0
 8010736:	460f      	mov	r7, r1
 8010738:	468b      	mov	fp, r1
 801073a:	f340 82fe 	ble.w	8010d3a <__ieee754_pow+0x972>
 801073e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010742:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010746:	4303      	orrs	r3, r0
 8010748:	f000 81f0 	beq.w	8010b2c <__ieee754_pow+0x764>
 801074c:	a310      	add	r3, pc, #64	; (adr r3, 8010790 <__ieee754_pow+0x3c8>)
 801074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010752:	ec51 0b18 	vmov	r0, r1, d8
 8010756:	f7ef ff7f 	bl	8000658 <__aeabi_dmul>
 801075a:	a30d      	add	r3, pc, #52	; (adr r3, 8010790 <__ieee754_pow+0x3c8>)
 801075c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010760:	e6cb      	b.n	80104fa <__ieee754_pow+0x132>
 8010762:	bf00      	nop
 8010764:	f3af 8000 	nop.w
 8010768:	60000000 	.word	0x60000000
 801076c:	3ff71547 	.word	0x3ff71547
 8010770:	f85ddf44 	.word	0xf85ddf44
 8010774:	3e54ae0b 	.word	0x3e54ae0b
 8010778:	55555555 	.word	0x55555555
 801077c:	3fd55555 	.word	0x3fd55555
 8010780:	652b82fe 	.word	0x652b82fe
 8010784:	3ff71547 	.word	0x3ff71547
 8010788:	00000000 	.word	0x00000000
 801078c:	bff00000 	.word	0xbff00000
 8010790:	8800759c 	.word	0x8800759c
 8010794:	7e37e43c 	.word	0x7e37e43c
 8010798:	3ff00000 	.word	0x3ff00000
 801079c:	3fd00000 	.word	0x3fd00000
 80107a0:	3fe00000 	.word	0x3fe00000
 80107a4:	408fffff 	.word	0x408fffff
 80107a8:	4bd7      	ldr	r3, [pc, #860]	; (8010b08 <__ieee754_pow+0x740>)
 80107aa:	ea03 0309 	and.w	r3, r3, r9
 80107ae:	2200      	movs	r2, #0
 80107b0:	b92b      	cbnz	r3, 80107be <__ieee754_pow+0x3f6>
 80107b2:	4bd6      	ldr	r3, [pc, #856]	; (8010b0c <__ieee754_pow+0x744>)
 80107b4:	f7ef ff50 	bl	8000658 <__aeabi_dmul>
 80107b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80107bc:	460c      	mov	r4, r1
 80107be:	1523      	asrs	r3, r4, #20
 80107c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80107c4:	4413      	add	r3, r2
 80107c6:	9309      	str	r3, [sp, #36]	; 0x24
 80107c8:	4bd1      	ldr	r3, [pc, #836]	; (8010b10 <__ieee754_pow+0x748>)
 80107ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80107ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80107d2:	429c      	cmp	r4, r3
 80107d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80107d8:	dd08      	ble.n	80107ec <__ieee754_pow+0x424>
 80107da:	4bce      	ldr	r3, [pc, #824]	; (8010b14 <__ieee754_pow+0x74c>)
 80107dc:	429c      	cmp	r4, r3
 80107de:	f340 8163 	ble.w	8010aa8 <__ieee754_pow+0x6e0>
 80107e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107e4:	3301      	adds	r3, #1
 80107e6:	9309      	str	r3, [sp, #36]	; 0x24
 80107e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80107ec:	2400      	movs	r4, #0
 80107ee:	00e3      	lsls	r3, r4, #3
 80107f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80107f2:	4bc9      	ldr	r3, [pc, #804]	; (8010b18 <__ieee754_pow+0x750>)
 80107f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107f8:	ed93 7b00 	vldr	d7, [r3]
 80107fc:	4629      	mov	r1, r5
 80107fe:	ec53 2b17 	vmov	r2, r3, d7
 8010802:	eeb0 8a47 	vmov.f32	s16, s14
 8010806:	eef0 8a67 	vmov.f32	s17, s15
 801080a:	4682      	mov	sl, r0
 801080c:	f7ef fd6c 	bl	80002e8 <__aeabi_dsub>
 8010810:	4652      	mov	r2, sl
 8010812:	4606      	mov	r6, r0
 8010814:	460f      	mov	r7, r1
 8010816:	462b      	mov	r3, r5
 8010818:	ec51 0b18 	vmov	r0, r1, d8
 801081c:	f7ef fd66 	bl	80002ec <__adddf3>
 8010820:	4602      	mov	r2, r0
 8010822:	460b      	mov	r3, r1
 8010824:	2000      	movs	r0, #0
 8010826:	49bd      	ldr	r1, [pc, #756]	; (8010b1c <__ieee754_pow+0x754>)
 8010828:	f7f0 f840 	bl	80008ac <__aeabi_ddiv>
 801082c:	ec41 0b19 	vmov	d9, r0, r1
 8010830:	4602      	mov	r2, r0
 8010832:	460b      	mov	r3, r1
 8010834:	4630      	mov	r0, r6
 8010836:	4639      	mov	r1, r7
 8010838:	f7ef ff0e 	bl	8000658 <__aeabi_dmul>
 801083c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010844:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010848:	2300      	movs	r3, #0
 801084a:	9304      	str	r3, [sp, #16]
 801084c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010850:	46ab      	mov	fp, r5
 8010852:	106d      	asrs	r5, r5, #1
 8010854:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010858:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801085c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010860:	2200      	movs	r2, #0
 8010862:	4640      	mov	r0, r8
 8010864:	4649      	mov	r1, r9
 8010866:	4614      	mov	r4, r2
 8010868:	461d      	mov	r5, r3
 801086a:	f7ef fef5 	bl	8000658 <__aeabi_dmul>
 801086e:	4602      	mov	r2, r0
 8010870:	460b      	mov	r3, r1
 8010872:	4630      	mov	r0, r6
 8010874:	4639      	mov	r1, r7
 8010876:	f7ef fd37 	bl	80002e8 <__aeabi_dsub>
 801087a:	ec53 2b18 	vmov	r2, r3, d8
 801087e:	4606      	mov	r6, r0
 8010880:	460f      	mov	r7, r1
 8010882:	4620      	mov	r0, r4
 8010884:	4629      	mov	r1, r5
 8010886:	f7ef fd2f 	bl	80002e8 <__aeabi_dsub>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	4650      	mov	r0, sl
 8010890:	4659      	mov	r1, fp
 8010892:	f7ef fd29 	bl	80002e8 <__aeabi_dsub>
 8010896:	4642      	mov	r2, r8
 8010898:	464b      	mov	r3, r9
 801089a:	f7ef fedd 	bl	8000658 <__aeabi_dmul>
 801089e:	4602      	mov	r2, r0
 80108a0:	460b      	mov	r3, r1
 80108a2:	4630      	mov	r0, r6
 80108a4:	4639      	mov	r1, r7
 80108a6:	f7ef fd1f 	bl	80002e8 <__aeabi_dsub>
 80108aa:	ec53 2b19 	vmov	r2, r3, d9
 80108ae:	f7ef fed3 	bl	8000658 <__aeabi_dmul>
 80108b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80108b6:	ec41 0b18 	vmov	d8, r0, r1
 80108ba:	4610      	mov	r0, r2
 80108bc:	4619      	mov	r1, r3
 80108be:	f7ef fecb 	bl	8000658 <__aeabi_dmul>
 80108c2:	a37d      	add	r3, pc, #500	; (adr r3, 8010ab8 <__ieee754_pow+0x6f0>)
 80108c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c8:	4604      	mov	r4, r0
 80108ca:	460d      	mov	r5, r1
 80108cc:	f7ef fec4 	bl	8000658 <__aeabi_dmul>
 80108d0:	a37b      	add	r3, pc, #492	; (adr r3, 8010ac0 <__ieee754_pow+0x6f8>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	f7ef fd09 	bl	80002ec <__adddf3>
 80108da:	4622      	mov	r2, r4
 80108dc:	462b      	mov	r3, r5
 80108de:	f7ef febb 	bl	8000658 <__aeabi_dmul>
 80108e2:	a379      	add	r3, pc, #484	; (adr r3, 8010ac8 <__ieee754_pow+0x700>)
 80108e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e8:	f7ef fd00 	bl	80002ec <__adddf3>
 80108ec:	4622      	mov	r2, r4
 80108ee:	462b      	mov	r3, r5
 80108f0:	f7ef feb2 	bl	8000658 <__aeabi_dmul>
 80108f4:	a376      	add	r3, pc, #472	; (adr r3, 8010ad0 <__ieee754_pow+0x708>)
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef fcf7 	bl	80002ec <__adddf3>
 80108fe:	4622      	mov	r2, r4
 8010900:	462b      	mov	r3, r5
 8010902:	f7ef fea9 	bl	8000658 <__aeabi_dmul>
 8010906:	a374      	add	r3, pc, #464	; (adr r3, 8010ad8 <__ieee754_pow+0x710>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fcee 	bl	80002ec <__adddf3>
 8010910:	4622      	mov	r2, r4
 8010912:	462b      	mov	r3, r5
 8010914:	f7ef fea0 	bl	8000658 <__aeabi_dmul>
 8010918:	a371      	add	r3, pc, #452	; (adr r3, 8010ae0 <__ieee754_pow+0x718>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	f7ef fce5 	bl	80002ec <__adddf3>
 8010922:	4622      	mov	r2, r4
 8010924:	4606      	mov	r6, r0
 8010926:	460f      	mov	r7, r1
 8010928:	462b      	mov	r3, r5
 801092a:	4620      	mov	r0, r4
 801092c:	4629      	mov	r1, r5
 801092e:	f7ef fe93 	bl	8000658 <__aeabi_dmul>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	4630      	mov	r0, r6
 8010938:	4639      	mov	r1, r7
 801093a:	f7ef fe8d 	bl	8000658 <__aeabi_dmul>
 801093e:	4642      	mov	r2, r8
 8010940:	4604      	mov	r4, r0
 8010942:	460d      	mov	r5, r1
 8010944:	464b      	mov	r3, r9
 8010946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801094a:	f7ef fccf 	bl	80002ec <__adddf3>
 801094e:	ec53 2b18 	vmov	r2, r3, d8
 8010952:	f7ef fe81 	bl	8000658 <__aeabi_dmul>
 8010956:	4622      	mov	r2, r4
 8010958:	462b      	mov	r3, r5
 801095a:	f7ef fcc7 	bl	80002ec <__adddf3>
 801095e:	4642      	mov	r2, r8
 8010960:	4682      	mov	sl, r0
 8010962:	468b      	mov	fp, r1
 8010964:	464b      	mov	r3, r9
 8010966:	4640      	mov	r0, r8
 8010968:	4649      	mov	r1, r9
 801096a:	f7ef fe75 	bl	8000658 <__aeabi_dmul>
 801096e:	4b6c      	ldr	r3, [pc, #432]	; (8010b20 <__ieee754_pow+0x758>)
 8010970:	2200      	movs	r2, #0
 8010972:	4606      	mov	r6, r0
 8010974:	460f      	mov	r7, r1
 8010976:	f7ef fcb9 	bl	80002ec <__adddf3>
 801097a:	4652      	mov	r2, sl
 801097c:	465b      	mov	r3, fp
 801097e:	f7ef fcb5 	bl	80002ec <__adddf3>
 8010982:	9c04      	ldr	r4, [sp, #16]
 8010984:	460d      	mov	r5, r1
 8010986:	4622      	mov	r2, r4
 8010988:	460b      	mov	r3, r1
 801098a:	4640      	mov	r0, r8
 801098c:	4649      	mov	r1, r9
 801098e:	f7ef fe63 	bl	8000658 <__aeabi_dmul>
 8010992:	4b63      	ldr	r3, [pc, #396]	; (8010b20 <__ieee754_pow+0x758>)
 8010994:	4680      	mov	r8, r0
 8010996:	4689      	mov	r9, r1
 8010998:	2200      	movs	r2, #0
 801099a:	4620      	mov	r0, r4
 801099c:	4629      	mov	r1, r5
 801099e:	f7ef fca3 	bl	80002e8 <__aeabi_dsub>
 80109a2:	4632      	mov	r2, r6
 80109a4:	463b      	mov	r3, r7
 80109a6:	f7ef fc9f 	bl	80002e8 <__aeabi_dsub>
 80109aa:	4602      	mov	r2, r0
 80109ac:	460b      	mov	r3, r1
 80109ae:	4650      	mov	r0, sl
 80109b0:	4659      	mov	r1, fp
 80109b2:	f7ef fc99 	bl	80002e8 <__aeabi_dsub>
 80109b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80109ba:	f7ef fe4d 	bl	8000658 <__aeabi_dmul>
 80109be:	4622      	mov	r2, r4
 80109c0:	4606      	mov	r6, r0
 80109c2:	460f      	mov	r7, r1
 80109c4:	462b      	mov	r3, r5
 80109c6:	ec51 0b18 	vmov	r0, r1, d8
 80109ca:	f7ef fe45 	bl	8000658 <__aeabi_dmul>
 80109ce:	4602      	mov	r2, r0
 80109d0:	460b      	mov	r3, r1
 80109d2:	4630      	mov	r0, r6
 80109d4:	4639      	mov	r1, r7
 80109d6:	f7ef fc89 	bl	80002ec <__adddf3>
 80109da:	4606      	mov	r6, r0
 80109dc:	460f      	mov	r7, r1
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
 80109e2:	4640      	mov	r0, r8
 80109e4:	4649      	mov	r1, r9
 80109e6:	f7ef fc81 	bl	80002ec <__adddf3>
 80109ea:	9c04      	ldr	r4, [sp, #16]
 80109ec:	a33e      	add	r3, pc, #248	; (adr r3, 8010ae8 <__ieee754_pow+0x720>)
 80109ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f2:	4620      	mov	r0, r4
 80109f4:	460d      	mov	r5, r1
 80109f6:	f7ef fe2f 	bl	8000658 <__aeabi_dmul>
 80109fa:	4642      	mov	r2, r8
 80109fc:	ec41 0b18 	vmov	d8, r0, r1
 8010a00:	464b      	mov	r3, r9
 8010a02:	4620      	mov	r0, r4
 8010a04:	4629      	mov	r1, r5
 8010a06:	f7ef fc6f 	bl	80002e8 <__aeabi_dsub>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	4630      	mov	r0, r6
 8010a10:	4639      	mov	r1, r7
 8010a12:	f7ef fc69 	bl	80002e8 <__aeabi_dsub>
 8010a16:	a336      	add	r3, pc, #216	; (adr r3, 8010af0 <__ieee754_pow+0x728>)
 8010a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1c:	f7ef fe1c 	bl	8000658 <__aeabi_dmul>
 8010a20:	a335      	add	r3, pc, #212	; (adr r3, 8010af8 <__ieee754_pow+0x730>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	4606      	mov	r6, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	f7ef fe13 	bl	8000658 <__aeabi_dmul>
 8010a32:	4602      	mov	r2, r0
 8010a34:	460b      	mov	r3, r1
 8010a36:	4630      	mov	r0, r6
 8010a38:	4639      	mov	r1, r7
 8010a3a:	f7ef fc57 	bl	80002ec <__adddf3>
 8010a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a40:	4b38      	ldr	r3, [pc, #224]	; (8010b24 <__ieee754_pow+0x75c>)
 8010a42:	4413      	add	r3, r2
 8010a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a48:	f7ef fc50 	bl	80002ec <__adddf3>
 8010a4c:	4682      	mov	sl, r0
 8010a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a50:	468b      	mov	fp, r1
 8010a52:	f7ef fd97 	bl	8000584 <__aeabi_i2d>
 8010a56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a58:	4b33      	ldr	r3, [pc, #204]	; (8010b28 <__ieee754_pow+0x760>)
 8010a5a:	4413      	add	r3, r2
 8010a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a60:	4606      	mov	r6, r0
 8010a62:	460f      	mov	r7, r1
 8010a64:	4652      	mov	r2, sl
 8010a66:	465b      	mov	r3, fp
 8010a68:	ec51 0b18 	vmov	r0, r1, d8
 8010a6c:	f7ef fc3e 	bl	80002ec <__adddf3>
 8010a70:	4642      	mov	r2, r8
 8010a72:	464b      	mov	r3, r9
 8010a74:	f7ef fc3a 	bl	80002ec <__adddf3>
 8010a78:	4632      	mov	r2, r6
 8010a7a:	463b      	mov	r3, r7
 8010a7c:	f7ef fc36 	bl	80002ec <__adddf3>
 8010a80:	9c04      	ldr	r4, [sp, #16]
 8010a82:	4632      	mov	r2, r6
 8010a84:	463b      	mov	r3, r7
 8010a86:	4620      	mov	r0, r4
 8010a88:	460d      	mov	r5, r1
 8010a8a:	f7ef fc2d 	bl	80002e8 <__aeabi_dsub>
 8010a8e:	4642      	mov	r2, r8
 8010a90:	464b      	mov	r3, r9
 8010a92:	f7ef fc29 	bl	80002e8 <__aeabi_dsub>
 8010a96:	ec53 2b18 	vmov	r2, r3, d8
 8010a9a:	f7ef fc25 	bl	80002e8 <__aeabi_dsub>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	4650      	mov	r0, sl
 8010aa4:	4659      	mov	r1, fp
 8010aa6:	e606      	b.n	80106b6 <__ieee754_pow+0x2ee>
 8010aa8:	2401      	movs	r4, #1
 8010aaa:	e6a0      	b.n	80107ee <__ieee754_pow+0x426>
 8010aac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010b00 <__ieee754_pow+0x738>
 8010ab0:	e60d      	b.n	80106ce <__ieee754_pow+0x306>
 8010ab2:	bf00      	nop
 8010ab4:	f3af 8000 	nop.w
 8010ab8:	4a454eef 	.word	0x4a454eef
 8010abc:	3fca7e28 	.word	0x3fca7e28
 8010ac0:	93c9db65 	.word	0x93c9db65
 8010ac4:	3fcd864a 	.word	0x3fcd864a
 8010ac8:	a91d4101 	.word	0xa91d4101
 8010acc:	3fd17460 	.word	0x3fd17460
 8010ad0:	518f264d 	.word	0x518f264d
 8010ad4:	3fd55555 	.word	0x3fd55555
 8010ad8:	db6fabff 	.word	0xdb6fabff
 8010adc:	3fdb6db6 	.word	0x3fdb6db6
 8010ae0:	33333303 	.word	0x33333303
 8010ae4:	3fe33333 	.word	0x3fe33333
 8010ae8:	e0000000 	.word	0xe0000000
 8010aec:	3feec709 	.word	0x3feec709
 8010af0:	dc3a03fd 	.word	0xdc3a03fd
 8010af4:	3feec709 	.word	0x3feec709
 8010af8:	145b01f5 	.word	0x145b01f5
 8010afc:	be3e2fe0 	.word	0xbe3e2fe0
 8010b00:	00000000 	.word	0x00000000
 8010b04:	3ff00000 	.word	0x3ff00000
 8010b08:	7ff00000 	.word	0x7ff00000
 8010b0c:	43400000 	.word	0x43400000
 8010b10:	0003988e 	.word	0x0003988e
 8010b14:	000bb679 	.word	0x000bb679
 8010b18:	08012188 	.word	0x08012188
 8010b1c:	3ff00000 	.word	0x3ff00000
 8010b20:	40080000 	.word	0x40080000
 8010b24:	080121a8 	.word	0x080121a8
 8010b28:	08012198 	.word	0x08012198
 8010b2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010e04 <__ieee754_pow+0xa3c>)
 8010b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b32:	4640      	mov	r0, r8
 8010b34:	4649      	mov	r1, r9
 8010b36:	f7ef fbd9 	bl	80002ec <__adddf3>
 8010b3a:	4622      	mov	r2, r4
 8010b3c:	ec41 0b1a 	vmov	d10, r0, r1
 8010b40:	462b      	mov	r3, r5
 8010b42:	4630      	mov	r0, r6
 8010b44:	4639      	mov	r1, r7
 8010b46:	f7ef fbcf 	bl	80002e8 <__aeabi_dsub>
 8010b4a:	4602      	mov	r2, r0
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	ec51 0b1a 	vmov	r0, r1, d10
 8010b52:	f7f0 f811 	bl	8000b78 <__aeabi_dcmpgt>
 8010b56:	2800      	cmp	r0, #0
 8010b58:	f47f adf8 	bne.w	801074c <__ieee754_pow+0x384>
 8010b5c:	4aa4      	ldr	r2, [pc, #656]	; (8010df0 <__ieee754_pow+0xa28>)
 8010b5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b62:	4293      	cmp	r3, r2
 8010b64:	f340 810b 	ble.w	8010d7e <__ieee754_pow+0x9b6>
 8010b68:	151b      	asrs	r3, r3, #20
 8010b6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010b6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010b72:	fa4a f303 	asr.w	r3, sl, r3
 8010b76:	445b      	add	r3, fp
 8010b78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010b7c:	4e9d      	ldr	r6, [pc, #628]	; (8010df4 <__ieee754_pow+0xa2c>)
 8010b7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010b82:	4116      	asrs	r6, r2
 8010b84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010b88:	2000      	movs	r0, #0
 8010b8a:	ea23 0106 	bic.w	r1, r3, r6
 8010b8e:	f1c2 0214 	rsb	r2, r2, #20
 8010b92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010b96:	fa4a fa02 	asr.w	sl, sl, r2
 8010b9a:	f1bb 0f00 	cmp.w	fp, #0
 8010b9e:	4602      	mov	r2, r0
 8010ba0:	460b      	mov	r3, r1
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	bfb8      	it	lt
 8010ba8:	f1ca 0a00 	rsblt	sl, sl, #0
 8010bac:	f7ef fb9c 	bl	80002e8 <__aeabi_dsub>
 8010bb0:	ec41 0b19 	vmov	d9, r0, r1
 8010bb4:	4642      	mov	r2, r8
 8010bb6:	464b      	mov	r3, r9
 8010bb8:	ec51 0b19 	vmov	r0, r1, d9
 8010bbc:	f7ef fb96 	bl	80002ec <__adddf3>
 8010bc0:	2400      	movs	r4, #0
 8010bc2:	a379      	add	r3, pc, #484	; (adr r3, 8010da8 <__ieee754_pow+0x9e0>)
 8010bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc8:	4620      	mov	r0, r4
 8010bca:	460d      	mov	r5, r1
 8010bcc:	f7ef fd44 	bl	8000658 <__aeabi_dmul>
 8010bd0:	ec53 2b19 	vmov	r2, r3, d9
 8010bd4:	4606      	mov	r6, r0
 8010bd6:	460f      	mov	r7, r1
 8010bd8:	4620      	mov	r0, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7ef fb84 	bl	80002e8 <__aeabi_dsub>
 8010be0:	4602      	mov	r2, r0
 8010be2:	460b      	mov	r3, r1
 8010be4:	4640      	mov	r0, r8
 8010be6:	4649      	mov	r1, r9
 8010be8:	f7ef fb7e 	bl	80002e8 <__aeabi_dsub>
 8010bec:	a370      	add	r3, pc, #448	; (adr r3, 8010db0 <__ieee754_pow+0x9e8>)
 8010bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf2:	f7ef fd31 	bl	8000658 <__aeabi_dmul>
 8010bf6:	a370      	add	r3, pc, #448	; (adr r3, 8010db8 <__ieee754_pow+0x9f0>)
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	4680      	mov	r8, r0
 8010bfe:	4689      	mov	r9, r1
 8010c00:	4620      	mov	r0, r4
 8010c02:	4629      	mov	r1, r5
 8010c04:	f7ef fd28 	bl	8000658 <__aeabi_dmul>
 8010c08:	4602      	mov	r2, r0
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	4640      	mov	r0, r8
 8010c0e:	4649      	mov	r1, r9
 8010c10:	f7ef fb6c 	bl	80002ec <__adddf3>
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	4602      	mov	r2, r0
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	4639      	mov	r1, r7
 8010c20:	f7ef fb64 	bl	80002ec <__adddf3>
 8010c24:	4632      	mov	r2, r6
 8010c26:	463b      	mov	r3, r7
 8010c28:	4680      	mov	r8, r0
 8010c2a:	4689      	mov	r9, r1
 8010c2c:	f7ef fb5c 	bl	80002e8 <__aeabi_dsub>
 8010c30:	4602      	mov	r2, r0
 8010c32:	460b      	mov	r3, r1
 8010c34:	4620      	mov	r0, r4
 8010c36:	4629      	mov	r1, r5
 8010c38:	f7ef fb56 	bl	80002e8 <__aeabi_dsub>
 8010c3c:	4642      	mov	r2, r8
 8010c3e:	4606      	mov	r6, r0
 8010c40:	460f      	mov	r7, r1
 8010c42:	464b      	mov	r3, r9
 8010c44:	4640      	mov	r0, r8
 8010c46:	4649      	mov	r1, r9
 8010c48:	f7ef fd06 	bl	8000658 <__aeabi_dmul>
 8010c4c:	a35c      	add	r3, pc, #368	; (adr r3, 8010dc0 <__ieee754_pow+0x9f8>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	4604      	mov	r4, r0
 8010c54:	460d      	mov	r5, r1
 8010c56:	f7ef fcff 	bl	8000658 <__aeabi_dmul>
 8010c5a:	a35b      	add	r3, pc, #364	; (adr r3, 8010dc8 <__ieee754_pow+0xa00>)
 8010c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c60:	f7ef fb42 	bl	80002e8 <__aeabi_dsub>
 8010c64:	4622      	mov	r2, r4
 8010c66:	462b      	mov	r3, r5
 8010c68:	f7ef fcf6 	bl	8000658 <__aeabi_dmul>
 8010c6c:	a358      	add	r3, pc, #352	; (adr r3, 8010dd0 <__ieee754_pow+0xa08>)
 8010c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c72:	f7ef fb3b 	bl	80002ec <__adddf3>
 8010c76:	4622      	mov	r2, r4
 8010c78:	462b      	mov	r3, r5
 8010c7a:	f7ef fced 	bl	8000658 <__aeabi_dmul>
 8010c7e:	a356      	add	r3, pc, #344	; (adr r3, 8010dd8 <__ieee754_pow+0xa10>)
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	f7ef fb30 	bl	80002e8 <__aeabi_dsub>
 8010c88:	4622      	mov	r2, r4
 8010c8a:	462b      	mov	r3, r5
 8010c8c:	f7ef fce4 	bl	8000658 <__aeabi_dmul>
 8010c90:	a353      	add	r3, pc, #332	; (adr r3, 8010de0 <__ieee754_pow+0xa18>)
 8010c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c96:	f7ef fb29 	bl	80002ec <__adddf3>
 8010c9a:	4622      	mov	r2, r4
 8010c9c:	462b      	mov	r3, r5
 8010c9e:	f7ef fcdb 	bl	8000658 <__aeabi_dmul>
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	4640      	mov	r0, r8
 8010ca8:	4649      	mov	r1, r9
 8010caa:	f7ef fb1d 	bl	80002e8 <__aeabi_dsub>
 8010cae:	4604      	mov	r4, r0
 8010cb0:	460d      	mov	r5, r1
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	4640      	mov	r0, r8
 8010cb8:	4649      	mov	r1, r9
 8010cba:	f7ef fccd 	bl	8000658 <__aeabi_dmul>
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	ec41 0b19 	vmov	d9, r0, r1
 8010cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010cc8:	4620      	mov	r0, r4
 8010cca:	4629      	mov	r1, r5
 8010ccc:	f7ef fb0c 	bl	80002e8 <__aeabi_dsub>
 8010cd0:	4602      	mov	r2, r0
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	ec51 0b19 	vmov	r0, r1, d9
 8010cd8:	f7ef fde8 	bl	80008ac <__aeabi_ddiv>
 8010cdc:	4632      	mov	r2, r6
 8010cde:	4604      	mov	r4, r0
 8010ce0:	460d      	mov	r5, r1
 8010ce2:	463b      	mov	r3, r7
 8010ce4:	4640      	mov	r0, r8
 8010ce6:	4649      	mov	r1, r9
 8010ce8:	f7ef fcb6 	bl	8000658 <__aeabi_dmul>
 8010cec:	4632      	mov	r2, r6
 8010cee:	463b      	mov	r3, r7
 8010cf0:	f7ef fafc 	bl	80002ec <__adddf3>
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	460b      	mov	r3, r1
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	f7ef faf4 	bl	80002e8 <__aeabi_dsub>
 8010d00:	4642      	mov	r2, r8
 8010d02:	464b      	mov	r3, r9
 8010d04:	f7ef faf0 	bl	80002e8 <__aeabi_dsub>
 8010d08:	460b      	mov	r3, r1
 8010d0a:	4602      	mov	r2, r0
 8010d0c:	493a      	ldr	r1, [pc, #232]	; (8010df8 <__ieee754_pow+0xa30>)
 8010d0e:	2000      	movs	r0, #0
 8010d10:	f7ef faea 	bl	80002e8 <__aeabi_dsub>
 8010d14:	e9cd 0100 	strd	r0, r1, [sp]
 8010d18:	9b01      	ldr	r3, [sp, #4]
 8010d1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d22:	da2f      	bge.n	8010d84 <__ieee754_pow+0x9bc>
 8010d24:	4650      	mov	r0, sl
 8010d26:	ed9d 0b00 	vldr	d0, [sp]
 8010d2a:	f000 f9c1 	bl	80110b0 <scalbn>
 8010d2e:	ec51 0b10 	vmov	r0, r1, d0
 8010d32:	ec53 2b18 	vmov	r2, r3, d8
 8010d36:	f7ff bbe0 	b.w	80104fa <__ieee754_pow+0x132>
 8010d3a:	4b30      	ldr	r3, [pc, #192]	; (8010dfc <__ieee754_pow+0xa34>)
 8010d3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010d40:	429e      	cmp	r6, r3
 8010d42:	f77f af0b 	ble.w	8010b5c <__ieee754_pow+0x794>
 8010d46:	4b2e      	ldr	r3, [pc, #184]	; (8010e00 <__ieee754_pow+0xa38>)
 8010d48:	440b      	add	r3, r1
 8010d4a:	4303      	orrs	r3, r0
 8010d4c:	d00b      	beq.n	8010d66 <__ieee754_pow+0x99e>
 8010d4e:	a326      	add	r3, pc, #152	; (adr r3, 8010de8 <__ieee754_pow+0xa20>)
 8010d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d54:	ec51 0b18 	vmov	r0, r1, d8
 8010d58:	f7ef fc7e 	bl	8000658 <__aeabi_dmul>
 8010d5c:	a322      	add	r3, pc, #136	; (adr r3, 8010de8 <__ieee754_pow+0xa20>)
 8010d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d62:	f7ff bbca 	b.w	80104fa <__ieee754_pow+0x132>
 8010d66:	4622      	mov	r2, r4
 8010d68:	462b      	mov	r3, r5
 8010d6a:	f7ef fabd 	bl	80002e8 <__aeabi_dsub>
 8010d6e:	4642      	mov	r2, r8
 8010d70:	464b      	mov	r3, r9
 8010d72:	f7ef fef7 	bl	8000b64 <__aeabi_dcmpge>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	f43f aef0 	beq.w	8010b5c <__ieee754_pow+0x794>
 8010d7c:	e7e7      	b.n	8010d4e <__ieee754_pow+0x986>
 8010d7e:	f04f 0a00 	mov.w	sl, #0
 8010d82:	e717      	b.n	8010bb4 <__ieee754_pow+0x7ec>
 8010d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d88:	4619      	mov	r1, r3
 8010d8a:	e7d2      	b.n	8010d32 <__ieee754_pow+0x96a>
 8010d8c:	491a      	ldr	r1, [pc, #104]	; (8010df8 <__ieee754_pow+0xa30>)
 8010d8e:	2000      	movs	r0, #0
 8010d90:	f7ff bb9e 	b.w	80104d0 <__ieee754_pow+0x108>
 8010d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d98:	f7ff bb9a 	b.w	80104d0 <__ieee754_pow+0x108>
 8010d9c:	9000      	str	r0, [sp, #0]
 8010d9e:	f7ff bb76 	b.w	801048e <__ieee754_pow+0xc6>
 8010da2:	2100      	movs	r1, #0
 8010da4:	f7ff bb60 	b.w	8010468 <__ieee754_pow+0xa0>
 8010da8:	00000000 	.word	0x00000000
 8010dac:	3fe62e43 	.word	0x3fe62e43
 8010db0:	fefa39ef 	.word	0xfefa39ef
 8010db4:	3fe62e42 	.word	0x3fe62e42
 8010db8:	0ca86c39 	.word	0x0ca86c39
 8010dbc:	be205c61 	.word	0xbe205c61
 8010dc0:	72bea4d0 	.word	0x72bea4d0
 8010dc4:	3e663769 	.word	0x3e663769
 8010dc8:	c5d26bf1 	.word	0xc5d26bf1
 8010dcc:	3ebbbd41 	.word	0x3ebbbd41
 8010dd0:	af25de2c 	.word	0xaf25de2c
 8010dd4:	3f11566a 	.word	0x3f11566a
 8010dd8:	16bebd93 	.word	0x16bebd93
 8010ddc:	3f66c16c 	.word	0x3f66c16c
 8010de0:	5555553e 	.word	0x5555553e
 8010de4:	3fc55555 	.word	0x3fc55555
 8010de8:	c2f8f359 	.word	0xc2f8f359
 8010dec:	01a56e1f 	.word	0x01a56e1f
 8010df0:	3fe00000 	.word	0x3fe00000
 8010df4:	000fffff 	.word	0x000fffff
 8010df8:	3ff00000 	.word	0x3ff00000
 8010dfc:	4090cbff 	.word	0x4090cbff
 8010e00:	3f6f3400 	.word	0x3f6f3400
 8010e04:	652b82fe 	.word	0x652b82fe
 8010e08:	3c971547 	.word	0x3c971547

08010e0c <__ieee754_sqrt>:
 8010e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e10:	ec55 4b10 	vmov	r4, r5, d0
 8010e14:	4e56      	ldr	r6, [pc, #344]	; (8010f70 <__ieee754_sqrt+0x164>)
 8010e16:	43ae      	bics	r6, r5
 8010e18:	ee10 0a10 	vmov	r0, s0
 8010e1c:	ee10 3a10 	vmov	r3, s0
 8010e20:	4629      	mov	r1, r5
 8010e22:	462a      	mov	r2, r5
 8010e24:	d110      	bne.n	8010e48 <__ieee754_sqrt+0x3c>
 8010e26:	ee10 2a10 	vmov	r2, s0
 8010e2a:	462b      	mov	r3, r5
 8010e2c:	f7ef fc14 	bl	8000658 <__aeabi_dmul>
 8010e30:	4602      	mov	r2, r0
 8010e32:	460b      	mov	r3, r1
 8010e34:	4620      	mov	r0, r4
 8010e36:	4629      	mov	r1, r5
 8010e38:	f7ef fa58 	bl	80002ec <__adddf3>
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	460d      	mov	r5, r1
 8010e40:	ec45 4b10 	vmov	d0, r4, r5
 8010e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e48:	2d00      	cmp	r5, #0
 8010e4a:	dc10      	bgt.n	8010e6e <__ieee754_sqrt+0x62>
 8010e4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e50:	4330      	orrs	r0, r6
 8010e52:	d0f5      	beq.n	8010e40 <__ieee754_sqrt+0x34>
 8010e54:	b15d      	cbz	r5, 8010e6e <__ieee754_sqrt+0x62>
 8010e56:	ee10 2a10 	vmov	r2, s0
 8010e5a:	462b      	mov	r3, r5
 8010e5c:	ee10 0a10 	vmov	r0, s0
 8010e60:	f7ef fa42 	bl	80002e8 <__aeabi_dsub>
 8010e64:	4602      	mov	r2, r0
 8010e66:	460b      	mov	r3, r1
 8010e68:	f7ef fd20 	bl	80008ac <__aeabi_ddiv>
 8010e6c:	e7e6      	b.n	8010e3c <__ieee754_sqrt+0x30>
 8010e6e:	1509      	asrs	r1, r1, #20
 8010e70:	d076      	beq.n	8010f60 <__ieee754_sqrt+0x154>
 8010e72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010e76:	07ce      	lsls	r6, r1, #31
 8010e78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010e7c:	bf5e      	ittt	pl
 8010e7e:	0fda      	lsrpl	r2, r3, #31
 8010e80:	005b      	lslpl	r3, r3, #1
 8010e82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010e86:	0fda      	lsrs	r2, r3, #31
 8010e88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010e8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010e90:	2000      	movs	r0, #0
 8010e92:	106d      	asrs	r5, r5, #1
 8010e94:	005b      	lsls	r3, r3, #1
 8010e96:	f04f 0e16 	mov.w	lr, #22
 8010e9a:	4684      	mov	ip, r0
 8010e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ea0:	eb0c 0401 	add.w	r4, ip, r1
 8010ea4:	4294      	cmp	r4, r2
 8010ea6:	bfde      	ittt	le
 8010ea8:	1b12      	suble	r2, r2, r4
 8010eaa:	eb04 0c01 	addle.w	ip, r4, r1
 8010eae:	1840      	addle	r0, r0, r1
 8010eb0:	0052      	lsls	r2, r2, #1
 8010eb2:	f1be 0e01 	subs.w	lr, lr, #1
 8010eb6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010eba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010ebe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ec2:	d1ed      	bne.n	8010ea0 <__ieee754_sqrt+0x94>
 8010ec4:	4671      	mov	r1, lr
 8010ec6:	2720      	movs	r7, #32
 8010ec8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010ecc:	4562      	cmp	r2, ip
 8010ece:	eb04 060e 	add.w	r6, r4, lr
 8010ed2:	dc02      	bgt.n	8010eda <__ieee754_sqrt+0xce>
 8010ed4:	d113      	bne.n	8010efe <__ieee754_sqrt+0xf2>
 8010ed6:	429e      	cmp	r6, r3
 8010ed8:	d811      	bhi.n	8010efe <__ieee754_sqrt+0xf2>
 8010eda:	2e00      	cmp	r6, #0
 8010edc:	eb06 0e04 	add.w	lr, r6, r4
 8010ee0:	da43      	bge.n	8010f6a <__ieee754_sqrt+0x15e>
 8010ee2:	f1be 0f00 	cmp.w	lr, #0
 8010ee6:	db40      	blt.n	8010f6a <__ieee754_sqrt+0x15e>
 8010ee8:	f10c 0801 	add.w	r8, ip, #1
 8010eec:	eba2 020c 	sub.w	r2, r2, ip
 8010ef0:	429e      	cmp	r6, r3
 8010ef2:	bf88      	it	hi
 8010ef4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010ef8:	1b9b      	subs	r3, r3, r6
 8010efa:	4421      	add	r1, r4
 8010efc:	46c4      	mov	ip, r8
 8010efe:	0052      	lsls	r2, r2, #1
 8010f00:	3f01      	subs	r7, #1
 8010f02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010f06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010f0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f0e:	d1dd      	bne.n	8010ecc <__ieee754_sqrt+0xc0>
 8010f10:	4313      	orrs	r3, r2
 8010f12:	d006      	beq.n	8010f22 <__ieee754_sqrt+0x116>
 8010f14:	1c4c      	adds	r4, r1, #1
 8010f16:	bf13      	iteet	ne
 8010f18:	3101      	addne	r1, #1
 8010f1a:	3001      	addeq	r0, #1
 8010f1c:	4639      	moveq	r1, r7
 8010f1e:	f021 0101 	bicne.w	r1, r1, #1
 8010f22:	1043      	asrs	r3, r0, #1
 8010f24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010f28:	0849      	lsrs	r1, r1, #1
 8010f2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010f2e:	07c2      	lsls	r2, r0, #31
 8010f30:	bf48      	it	mi
 8010f32:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010f36:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010f3a:	460c      	mov	r4, r1
 8010f3c:	463d      	mov	r5, r7
 8010f3e:	e77f      	b.n	8010e40 <__ieee754_sqrt+0x34>
 8010f40:	0ada      	lsrs	r2, r3, #11
 8010f42:	3815      	subs	r0, #21
 8010f44:	055b      	lsls	r3, r3, #21
 8010f46:	2a00      	cmp	r2, #0
 8010f48:	d0fa      	beq.n	8010f40 <__ieee754_sqrt+0x134>
 8010f4a:	02d7      	lsls	r7, r2, #11
 8010f4c:	d50a      	bpl.n	8010f64 <__ieee754_sqrt+0x158>
 8010f4e:	f1c1 0420 	rsb	r4, r1, #32
 8010f52:	fa23 f404 	lsr.w	r4, r3, r4
 8010f56:	1e4d      	subs	r5, r1, #1
 8010f58:	408b      	lsls	r3, r1
 8010f5a:	4322      	orrs	r2, r4
 8010f5c:	1b41      	subs	r1, r0, r5
 8010f5e:	e788      	b.n	8010e72 <__ieee754_sqrt+0x66>
 8010f60:	4608      	mov	r0, r1
 8010f62:	e7f0      	b.n	8010f46 <__ieee754_sqrt+0x13a>
 8010f64:	0052      	lsls	r2, r2, #1
 8010f66:	3101      	adds	r1, #1
 8010f68:	e7ef      	b.n	8010f4a <__ieee754_sqrt+0x13e>
 8010f6a:	46e0      	mov	r8, ip
 8010f6c:	e7be      	b.n	8010eec <__ieee754_sqrt+0xe0>
 8010f6e:	bf00      	nop
 8010f70:	7ff00000 	.word	0x7ff00000

08010f74 <fabs>:
 8010f74:	ec51 0b10 	vmov	r0, r1, d0
 8010f78:	ee10 2a10 	vmov	r2, s0
 8010f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f80:	ec43 2b10 	vmov	d0, r2, r3
 8010f84:	4770      	bx	lr

08010f86 <finite>:
 8010f86:	b082      	sub	sp, #8
 8010f88:	ed8d 0b00 	vstr	d0, [sp]
 8010f8c:	9801      	ldr	r0, [sp, #4]
 8010f8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010f92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f96:	0fc0      	lsrs	r0, r0, #31
 8010f98:	b002      	add	sp, #8
 8010f9a:	4770      	bx	lr

08010f9c <rint>:
 8010f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f9e:	ec51 0b10 	vmov	r0, r1, d0
 8010fa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010fa6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8010faa:	2e13      	cmp	r6, #19
 8010fac:	ee10 4a10 	vmov	r4, s0
 8010fb0:	460b      	mov	r3, r1
 8010fb2:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8010fb6:	dc58      	bgt.n	801106a <rint+0xce>
 8010fb8:	2e00      	cmp	r6, #0
 8010fba:	da2b      	bge.n	8011014 <rint+0x78>
 8010fbc:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010fc0:	4302      	orrs	r2, r0
 8010fc2:	d023      	beq.n	801100c <rint+0x70>
 8010fc4:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8010fc8:	4302      	orrs	r2, r0
 8010fca:	4254      	negs	r4, r2
 8010fcc:	4314      	orrs	r4, r2
 8010fce:	0c4b      	lsrs	r3, r1, #17
 8010fd0:	0b24      	lsrs	r4, r4, #12
 8010fd2:	045b      	lsls	r3, r3, #17
 8010fd4:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8010fd8:	ea44 0103 	orr.w	r1, r4, r3
 8010fdc:	4b32      	ldr	r3, [pc, #200]	; (80110a8 <rint+0x10c>)
 8010fde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010fe2:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4630      	mov	r0, r6
 8010fec:	4639      	mov	r1, r7
 8010fee:	f7ef f97d 	bl	80002ec <__adddf3>
 8010ff2:	e9cd 0100 	strd	r0, r1, [sp]
 8010ff6:	463b      	mov	r3, r7
 8010ff8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ffc:	4632      	mov	r2, r6
 8010ffe:	f7ef f973 	bl	80002e8 <__aeabi_dsub>
 8011002:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011006:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801100a:	4639      	mov	r1, r7
 801100c:	ec41 0b10 	vmov	d0, r0, r1
 8011010:	b003      	add	sp, #12
 8011012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011014:	4a25      	ldr	r2, [pc, #148]	; (80110ac <rint+0x110>)
 8011016:	4132      	asrs	r2, r6
 8011018:	ea01 0702 	and.w	r7, r1, r2
 801101c:	4307      	orrs	r7, r0
 801101e:	d0f5      	beq.n	801100c <rint+0x70>
 8011020:	0851      	lsrs	r1, r2, #1
 8011022:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8011026:	4314      	orrs	r4, r2
 8011028:	d00c      	beq.n	8011044 <rint+0xa8>
 801102a:	ea23 0201 	bic.w	r2, r3, r1
 801102e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011032:	2e13      	cmp	r6, #19
 8011034:	fa43 f606 	asr.w	r6, r3, r6
 8011038:	bf0c      	ite	eq
 801103a:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801103e:	2400      	movne	r4, #0
 8011040:	ea42 0306 	orr.w	r3, r2, r6
 8011044:	4918      	ldr	r1, [pc, #96]	; (80110a8 <rint+0x10c>)
 8011046:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801104a:	4622      	mov	r2, r4
 801104c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011050:	4620      	mov	r0, r4
 8011052:	4629      	mov	r1, r5
 8011054:	f7ef f94a 	bl	80002ec <__adddf3>
 8011058:	e9cd 0100 	strd	r0, r1, [sp]
 801105c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011060:	4622      	mov	r2, r4
 8011062:	462b      	mov	r3, r5
 8011064:	f7ef f940 	bl	80002e8 <__aeabi_dsub>
 8011068:	e7d0      	b.n	801100c <rint+0x70>
 801106a:	2e33      	cmp	r6, #51	; 0x33
 801106c:	dd07      	ble.n	801107e <rint+0xe2>
 801106e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011072:	d1cb      	bne.n	801100c <rint+0x70>
 8011074:	ee10 2a10 	vmov	r2, s0
 8011078:	f7ef f938 	bl	80002ec <__adddf3>
 801107c:	e7c6      	b.n	801100c <rint+0x70>
 801107e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8011082:	f04f 36ff 	mov.w	r6, #4294967295
 8011086:	40d6      	lsrs	r6, r2
 8011088:	4230      	tst	r0, r6
 801108a:	d0bf      	beq.n	801100c <rint+0x70>
 801108c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011090:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8011094:	bf1f      	itttt	ne
 8011096:	ea24 0101 	bicne.w	r1, r4, r1
 801109a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801109e:	fa44 f202 	asrne.w	r2, r4, r2
 80110a2:	ea41 0402 	orrne.w	r4, r1, r2
 80110a6:	e7cd      	b.n	8011044 <rint+0xa8>
 80110a8:	080121b8 	.word	0x080121b8
 80110ac:	000fffff 	.word	0x000fffff

080110b0 <scalbn>:
 80110b0:	b570      	push	{r4, r5, r6, lr}
 80110b2:	ec55 4b10 	vmov	r4, r5, d0
 80110b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80110ba:	4606      	mov	r6, r0
 80110bc:	462b      	mov	r3, r5
 80110be:	b99a      	cbnz	r2, 80110e8 <scalbn+0x38>
 80110c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80110c4:	4323      	orrs	r3, r4
 80110c6:	d036      	beq.n	8011136 <scalbn+0x86>
 80110c8:	4b39      	ldr	r3, [pc, #228]	; (80111b0 <scalbn+0x100>)
 80110ca:	4629      	mov	r1, r5
 80110cc:	ee10 0a10 	vmov	r0, s0
 80110d0:	2200      	movs	r2, #0
 80110d2:	f7ef fac1 	bl	8000658 <__aeabi_dmul>
 80110d6:	4b37      	ldr	r3, [pc, #220]	; (80111b4 <scalbn+0x104>)
 80110d8:	429e      	cmp	r6, r3
 80110da:	4604      	mov	r4, r0
 80110dc:	460d      	mov	r5, r1
 80110de:	da10      	bge.n	8011102 <scalbn+0x52>
 80110e0:	a32b      	add	r3, pc, #172	; (adr r3, 8011190 <scalbn+0xe0>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	e03a      	b.n	801115e <scalbn+0xae>
 80110e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80110ec:	428a      	cmp	r2, r1
 80110ee:	d10c      	bne.n	801110a <scalbn+0x5a>
 80110f0:	ee10 2a10 	vmov	r2, s0
 80110f4:	4620      	mov	r0, r4
 80110f6:	4629      	mov	r1, r5
 80110f8:	f7ef f8f8 	bl	80002ec <__adddf3>
 80110fc:	4604      	mov	r4, r0
 80110fe:	460d      	mov	r5, r1
 8011100:	e019      	b.n	8011136 <scalbn+0x86>
 8011102:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011106:	460b      	mov	r3, r1
 8011108:	3a36      	subs	r2, #54	; 0x36
 801110a:	4432      	add	r2, r6
 801110c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011110:	428a      	cmp	r2, r1
 8011112:	dd08      	ble.n	8011126 <scalbn+0x76>
 8011114:	2d00      	cmp	r5, #0
 8011116:	a120      	add	r1, pc, #128	; (adr r1, 8011198 <scalbn+0xe8>)
 8011118:	e9d1 0100 	ldrd	r0, r1, [r1]
 801111c:	da1c      	bge.n	8011158 <scalbn+0xa8>
 801111e:	a120      	add	r1, pc, #128	; (adr r1, 80111a0 <scalbn+0xf0>)
 8011120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011124:	e018      	b.n	8011158 <scalbn+0xa8>
 8011126:	2a00      	cmp	r2, #0
 8011128:	dd08      	ble.n	801113c <scalbn+0x8c>
 801112a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801112e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011132:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011136:	ec45 4b10 	vmov	d0, r4, r5
 801113a:	bd70      	pop	{r4, r5, r6, pc}
 801113c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011140:	da19      	bge.n	8011176 <scalbn+0xc6>
 8011142:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011146:	429e      	cmp	r6, r3
 8011148:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801114c:	dd0a      	ble.n	8011164 <scalbn+0xb4>
 801114e:	a112      	add	r1, pc, #72	; (adr r1, 8011198 <scalbn+0xe8>)
 8011150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d1e2      	bne.n	801111e <scalbn+0x6e>
 8011158:	a30f      	add	r3, pc, #60	; (adr r3, 8011198 <scalbn+0xe8>)
 801115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801115e:	f7ef fa7b 	bl	8000658 <__aeabi_dmul>
 8011162:	e7cb      	b.n	80110fc <scalbn+0x4c>
 8011164:	a10a      	add	r1, pc, #40	; (adr r1, 8011190 <scalbn+0xe0>)
 8011166:	e9d1 0100 	ldrd	r0, r1, [r1]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d0b8      	beq.n	80110e0 <scalbn+0x30>
 801116e:	a10e      	add	r1, pc, #56	; (adr r1, 80111a8 <scalbn+0xf8>)
 8011170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011174:	e7b4      	b.n	80110e0 <scalbn+0x30>
 8011176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801117a:	3236      	adds	r2, #54	; 0x36
 801117c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011180:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011184:	4620      	mov	r0, r4
 8011186:	4b0c      	ldr	r3, [pc, #48]	; (80111b8 <scalbn+0x108>)
 8011188:	2200      	movs	r2, #0
 801118a:	e7e8      	b.n	801115e <scalbn+0xae>
 801118c:	f3af 8000 	nop.w
 8011190:	c2f8f359 	.word	0xc2f8f359
 8011194:	01a56e1f 	.word	0x01a56e1f
 8011198:	8800759c 	.word	0x8800759c
 801119c:	7e37e43c 	.word	0x7e37e43c
 80111a0:	8800759c 	.word	0x8800759c
 80111a4:	fe37e43c 	.word	0xfe37e43c
 80111a8:	c2f8f359 	.word	0xc2f8f359
 80111ac:	81a56e1f 	.word	0x81a56e1f
 80111b0:	43500000 	.word	0x43500000
 80111b4:	ffff3cb0 	.word	0xffff3cb0
 80111b8:	3c900000 	.word	0x3c900000

080111bc <_init>:
 80111bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111be:	bf00      	nop
 80111c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111c2:	bc08      	pop	{r3}
 80111c4:	469e      	mov	lr, r3
 80111c6:	4770      	bx	lr

080111c8 <_fini>:
 80111c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ca:	bf00      	nop
 80111cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111ce:	bc08      	pop	{r3}
 80111d0:	469e      	mov	lr, r3
 80111d2:	4770      	bx	lr
