
TRR2021_Roulant_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001140  08011190  08011190  00021190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122d0  080122d0  0007a984  2**0
                  CONTENTS
  4 .ARM          00000008  080122d0  080122d0  000222d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122d8  080122d8  0007a984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122d8  080122d8  000222d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080122dc  080122dc  000222dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080122e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000200  080124e0  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d2c  080124e0  00030d2c  2**0
                  ALLOC
 11 .mem_telemetrie 0003a984  20010000  080124e0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  0007a984  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c11a  00000000  00000000  0007a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a95  00000000  00000000  00096ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0009a568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001380  00000000  00000000  0009ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1ce  00000000  00000000  0009cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b066  00000000  00000000  000c6f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc1cd  00000000  00000000  000e1ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001de1c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e68  00000000  00000000  001de214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011174 	.word	0x08011174

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	08011174 	.word	0x08011174

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <calculConsigneTrapezoidaleVitesse>:

extern st_param_conf gParametresConfiguration;
typedef enum { automate_principal_radio, automate_principal_autonome, automate_principal_shell } eEtatsAutomatePrincipal;

void calculConsigneTrapezoidaleVitesse(st_context_robot *a_pRobot, float deltaT)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
//            vitesse_courante -= ROBOT_DEC_MAX;
//    }
//
    float difference;

    difference = a_pRobot->vitesse_cible - a_pRobot->vitesse_cmd_courante;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001064:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001068:	edc7 7a03 	vstr	s15, [r7, #12]

    if(difference > 0.0)
 800106c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	dd22      	ble.n	80010c0 <calculConsigneTrapezoidaleVitesse+0x74>
    {
    	if(difference > gParametresConfiguration.acceleration_max/deltaT)
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <calculConsigneTrapezoidaleVitesse+0xd8>)
 800107c:	edd3 6a00 	vldr	s13, [r3]
 8001080:	ed97 7a00 	vldr	s14, [r7]
 8001084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001088:	ed97 7a03 	vldr	s14, [r7, #12]
 800108c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	dd0f      	ble.n	80010b6 <calculConsigneTrapezoidaleVitesse+0x6a>
    		a_pRobot->vitesse_cmd_courante += gParametresConfiguration.acceleration_max/deltaT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800109c:	4b21      	ldr	r3, [pc, #132]	; (8001124 <calculConsigneTrapezoidaleVitesse+0xd8>)
 800109e:	ed93 6a00 	vldr	s12, [r3]
 80010a2:	edd7 6a00 	vldr	s13, [r7]
 80010a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
    	if(fabs(difference) > gParametresConfiguration.deceleration_max/deltaT)
    		a_pRobot->vitesse_cmd_courante -= gParametresConfiguration.deceleration_max/deltaT;
    	else
    		a_pRobot->vitesse_cmd_courante = a_pRobot->vitesse_cible;
    }
}
 80010b4:	e030      	b.n	8001118 <calculConsigneTrapezoidaleVitesse+0xcc>
    		a_pRobot->vitesse_cmd_courante = a_pRobot->vitesse_cible;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	645a      	str	r2, [r3, #68]	; 0x44
}
 80010be:	e02b      	b.n	8001118 <calculConsigneTrapezoidaleVitesse+0xcc>
    else if(difference < 0.0)
 80010c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d400      	bmi.n	80010d0 <calculConsigneTrapezoidaleVitesse+0x84>
}
 80010ce:	e023      	b.n	8001118 <calculConsigneTrapezoidaleVitesse+0xcc>
    	if(fabs(difference) > gParametresConfiguration.deceleration_max/deltaT)
 80010d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d4:	eeb0 7ae7 	vabs.f32	s14, s15
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <calculConsigneTrapezoidaleVitesse+0xd8>)
 80010da:	ed93 6a01 	vldr	s12, [r3, #4]
 80010de:	edd7 6a00 	vldr	s13, [r7]
 80010e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd0f      	ble.n	8001110 <calculConsigneTrapezoidaleVitesse+0xc4>
    		a_pRobot->vitesse_cmd_courante -= gParametresConfiguration.deceleration_max/deltaT;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <calculConsigneTrapezoidaleVitesse+0xd8>)
 80010f8:	ed93 6a01 	vldr	s12, [r3, #4]
 80010fc:	edd7 6a00 	vldr	s13, [r7]
 8001100:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800110e:	e003      	b.n	8001118 <calculConsigneTrapezoidaleVitesse+0xcc>
    		a_pRobot->vitesse_cmd_courante = a_pRobot->vitesse_cible;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000aa0 	.word	0x20000aa0

08001128 <algo_decouverte>:
//typedef enum { automate_auto_depart, automate_auto_stop, automate_auto_decouverte, automate_auto_fini } eEtatsAutomateAutomatique;

eEtatsAutomateAutomatique etat_automate_automatique;

void algo_decouverte(st_context_robot *a_pRobot, float a_deltaT)
{
 8001128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800112c:	ed2d 8b02 	vpush	{d8}
 8001130:	b0ab      	sub	sp, #172	; 0xac
 8001132:	af10      	add	r7, sp, #64	; 0x40
 8001134:	61f8      	str	r0, [r7, #28]
 8001136:	ed87 0a06 	vstr	s0, [r7, #24]
	float throttle, direction;
	st_tele_element *pTeleElement;
	int erreur;

	// Acquisition des distances
	tfminiplus_getLastAcquisition(MINILIDAR_DROIT, &lidarDroitDistance, &lidarDroitStrength, &lidarDroitTemperature);
 800113a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800113e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001142:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001146:	2000      	movs	r0, #0
 8001148:	f004 fcb4 	bl	8005ab4 <tfminiplus_getLastAcquisition>
	tfminiplus_getLastAcquisition(MINILIDAR_GAUCHE, &lidarGaucheDistance, &lidarGaucheStrength, &lidarGaucheTemperature);
 800114c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001150:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001154:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001158:	2001      	movs	r0, #1
 800115a:	f004 fcab 	bl	8005ab4 <tfminiplus_getLastAcquisition>
	tfminiplus_getLastAcquisition(MINILIDAR_AVANT, &lidarAvantDistance, &lidarAvantStrength, &lidarAvantTemperature);
 800115e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001162:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001166:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800116a:	2003      	movs	r0, #3
 800116c:	f004 fca2 	bl	8005ab4 <tfminiplus_getLastAcquisition>
	tfminiplus_getLastAcquisition(MINILIDAR_HAUT, &lidarHautDistance, &lidarHautStrength, &lidarHautTemperature);
 8001170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001174:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001178:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800117c:	2002      	movs	r0, #2
 800117e:	f004 fc99 	bl	8005ab4 <tfminiplus_getLastAcquisition>

	// Acquisition de la vitesse instantannée du robot
	//vehicule_speed_aimant_get(&robot_vitesse);
	vehicule_distance_aimant_get(&robot_distance);
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	4618      	mov	r0, r3
 8001188:	f002 f9f6 	bl	8003578 <vehicule_distance_aimant_get>
	robot_vitesse = (robot_distance - a_pRobot->travelledDistance) / a_deltaT;
 800118c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001196:	ee77 6a67 	vsub.f32	s13, s14, s15
 800119a:	ed97 7a06 	vldr	s14, [r7, #24]
 800119e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

	a_pRobot->elapsedTime += a_deltaT;
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80011b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011be:	ee17 2a90 	vmov	r2, s15
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
	a_pRobot->travelledDistance = robot_distance;
 80011c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	639a      	str	r2, [r3, #56]	; 0x38

	// Automate
	switch(etat_automate_automatique)
 80011cc:	4b9a      	ldr	r3, [pc, #616]	; (8001438 <algo_decouverte+0x310>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d01e      	beq.n	8001212 <algo_decouverte+0xea>
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	dc53      	bgt.n	8001280 <algo_decouverte+0x158>
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d002      	beq.n	80011e2 <algo_decouverte+0xba>
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d035      	beq.n	800124c <algo_decouverte+0x124>
 80011e0:	e04e      	b.n	8001280 <algo_decouverte+0x158>
	{
	case automate_auto_depart :
	  // Demarrage jursuqu'à la vitesse de croisière
		a_pRobot->vitesse_cible = gParametresConfiguration.vitesse_max_decouverte;
 80011e2:	4b96      	ldr	r3, [pc, #600]	; (800143c <algo_decouverte+0x314>)
 80011e4:	691a      	ldr	r2, [r3, #16]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40

		calculConsigneTrapezoidaleVitesse(a_pRobot, a_deltaT);
 80011ea:	ed97 0a06 	vldr	s0, [r7, #24]
 80011ee:	69f8      	ldr	r0, [r7, #28]
 80011f0:	f7ff ff2c 	bl	800104c <calculConsigneTrapezoidaleVitesse>

	  // Lorsque le robot passe sous l'arche alors passage à l'état automate_auto_decouverte
//		if((lidarHautDistance != -2) && ((lidarHautDistance>30) || (lidarHautDistance<150)))
//			// Detection de l'arche
//			etat_automate_automatique = automate_auto_decouverte;
		if(a_pRobot->vitesse_cmd_courante == a_pRobot->vitesse_cible)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001200:	eeb4 7a67 	vcmp.f32	s14, s15
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	d13e      	bne.n	8001288 <algo_decouverte+0x160>
			etat_automate_automatique = automate_auto_decouverte;
 800120a:	4b8b      	ldr	r3, [pc, #556]	; (8001438 <algo_decouverte+0x310>)
 800120c:	2202      	movs	r2, #2
 800120e:	701a      	strb	r2, [r3, #0]
		break;
 8001210:	e03a      	b.n	8001288 <algo_decouverte+0x160>
	case automate_auto_decouverte :
	  // Suivi de la piste et enregistrement de la position, du sens des virages

	  // Si passage sous l'arche, alors passage à l'état automate_auto_stop
		// Pour commencer on met une limite de distance (7m) pour pas que le robot file partout
		if( ((lidarHautDistance != -2) && ((lidarHautDistance>30) && (lidarHautDistance<150))) ||
 8001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001214:	f113 0f02 	cmn.w	r3, #2
 8001218:	d005      	beq.n	8001226 <algo_decouverte+0xfe>
 800121a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121c:	2b1e      	cmp	r3, #30
 800121e:	dd02      	ble.n	8001226 <algo_decouverte+0xfe>
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	2b95      	cmp	r3, #149	; 0x95
 8001224:	dd0a      	ble.n	800123c <algo_decouverte+0x114>
			(a_pRobot->travelledDistance > 7.0) )
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
		if( ((lidarHautDistance != -2) && ((lidarHautDistance>30) && (lidarHautDistance<150))) ||
 800122c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	dc00      	bgt.n	800123c <algo_decouverte+0x114>
		{
			// Detection de l'arche
			a_pRobot->vitesse_cible = 0.0;
			etat_automate_automatique = automate_auto_stop;
		}
	  break;
 800123a:	e026      	b.n	800128a <algo_decouverte+0x162>
			a_pRobot->vitesse_cible = 0.0;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
			etat_automate_automatique = automate_auto_stop;
 8001244:	4b7c      	ldr	r3, [pc, #496]	; (8001438 <algo_decouverte+0x310>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
	  break;
 800124a:	e01e      	b.n	800128a <algo_decouverte+0x162>
	case automate_auto_stop :
	  // Decelleration jusqu'à l'arrêt total
		calculConsigneTrapezoidaleVitesse(a_pRobot, a_deltaT);
 800124c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001250:	69f8      	ldr	r0, [r7, #28]
 8001252:	f7ff fefb 	bl	800104c <calculConsigneTrapezoidaleVitesse>
	  // Quand la vitesse reelle est à 0, alors passage à l'état automate_auto_fini
		if(fabs(robot_vitesse) < 0.1) // 0.1 m/s
 8001256:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800125a:	eef0 7ae7 	vabs.f32	s15, s15
 800125e:	ee17 0a90 	vmov	r0, s15
 8001262:	f7ff f9a1 	bl	80005a8 <__aeabi_f2d>
 8001266:	a372      	add	r3, pc, #456	; (adr r3, 8001430 <algo_decouverte+0x308>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff fc66 	bl	8000b3c <__aeabi_dcmplt>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <algo_decouverte+0x150>
			etat_automate_automatique = automate_auto_fini;
	  break;
 8001276:	e008      	b.n	800128a <algo_decouverte+0x162>
			etat_automate_automatique = automate_auto_fini;
 8001278:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <algo_decouverte+0x310>)
 800127a:	2203      	movs	r2, #3
 800127c:	701a      	strb	r2, [r3, #0]
	  break;
 800127e:	e004      	b.n	800128a <algo_decouverte+0x162>
	default :
	  etat_automate_automatique = automate_auto_depart;
 8001280:	4b6d      	ldr	r3, [pc, #436]	; (8001438 <algo_decouverte+0x310>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]
 8001286:	e000      	b.n	800128a <algo_decouverte+0x162>
		break;
 8001288:	bf00      	nop
	}

	// Calculs des PID
	throttle = a_pRobot->vitesse_cmd_courante + pid_output(&(a_pRobot->pidVitesse), a_pRobot->vitesse_cmd_courante - robot_vitesse);
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001298:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800129c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	4610      	mov	r0, r2
 80012a6:	f001 feef 	bl	8003088 <pid_output>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012b2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	if(throttle > VEHICULE_SPEED_MAX)
 80012b6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80012ba:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80012be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	dd02      	ble.n	80012ce <algo_decouverte+0x1a6>
		throttle = VEHICULE_SPEED_MAX;
 80012c8:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <algo_decouverte+0x318>)
 80012ca:	663b      	str	r3, [r7, #96]	; 0x60
 80012cc:	e00a      	b.n	80012e4 <algo_decouverte+0x1bc>
	else if (throttle < -VEHICULE_SPEED_MAX)
 80012ce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80012d2:	eebb 7a01 	vmov.f32	s14, #177	; 0xc1880000 -17.0
 80012d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	d501      	bpl.n	80012e4 <algo_decouverte+0x1bc>
		throttle = -VEHICULE_SPEED_MAX;
 80012e0:	4b58      	ldr	r3, [pc, #352]	; (8001444 <algo_decouverte+0x31c>)
 80012e2:	663b      	str	r3, [r7, #96]	; 0x60

	if((lidarDroitDistance != -2) && (lidarGaucheDistance != -2))
 80012e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e6:	f113 0f02 	cmn.w	r3, #2
 80012ea:	d008      	beq.n	80012fe <algo_decouverte+0x1d6>
 80012ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012ee:	f113 0f02 	cmn.w	r3, #2
 80012f2:	d004      	beq.n	80012fe <algo_decouverte+0x1d6>
		erreur_direction = lidarDroitDistance - lidarGaucheDistance;
 80012f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	667b      	str	r3, [r7, #100]	; 0x64
 80012fc:	e01a      	b.n	8001334 <algo_decouverte+0x20c>
	else
	{
		// Les lidars mesures les distances des bords à 45°.
		// La piste fait 1.5m de largeur
		// La distance mesurée lorsque le robot est au milieu est de  75/cos(45°) soit 106 cm
		if((lidarDroitDistance == -2) && (lidarGaucheDistance == -2))
 80012fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001300:	f113 0f02 	cmn.w	r3, #2
 8001304:	d106      	bne.n	8001314 <algo_decouverte+0x1ec>
 8001306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001308:	f113 0f02 	cmn.w	r3, #2
 800130c:	d102      	bne.n	8001314 <algo_decouverte+0x1ec>
			// On est mal !!!!
			erreur_direction = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	667b      	str	r3, [r7, #100]	; 0x64
 8001312:	e00f      	b.n	8001334 <algo_decouverte+0x20c>
		else if(lidarDroitDistance == -2)
 8001314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001316:	f113 0f02 	cmn.w	r3, #2
 800131a:	d104      	bne.n	8001326 <algo_decouverte+0x1fe>
			erreur_direction = 106 - lidarGaucheDistance;
 800131c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800131e:	f1c3 036a 	rsb	r3, r3, #106	; 0x6a
 8001322:	667b      	str	r3, [r7, #100]	; 0x64
 8001324:	e006      	b.n	8001334 <algo_decouverte+0x20c>
		else if(lidarGaucheDistance == -2)
 8001326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001328:	f113 0f02 	cmn.w	r3, #2
 800132c:	d102      	bne.n	8001334 <algo_decouverte+0x20c>
			erreur_direction = lidarDroitDistance - 106;
 800132e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001330:	3b6a      	subs	r3, #106	; 0x6a
 8001332:	667b      	str	r3, [r7, #100]	; 0x64
	}

	direction = pid_output(&(a_pRobot->pidDirection), (float)erreur_direction);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	331c      	adds	r3, #28
 8001338:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800133a:	ee07 2a90 	vmov	s15, r2
 800133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fe9e 	bl	8003088 <pid_output>
 800134c:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
	if(direction > VEHICULE_DIR_MAX)
 8001350:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001354:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	dd02      	ble.n	8001368 <algo_decouverte+0x240>
		direction = VEHICULE_DIR_MAX;
 8001362:	4b39      	ldr	r3, [pc, #228]	; (8001448 <algo_decouverte+0x320>)
 8001364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001366:	e00a      	b.n	800137e <algo_decouverte+0x256>
	else if (direction < -VEHICULE_DIR_MAX)
 8001368:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800136c:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	d501      	bpl.n	800137e <algo_decouverte+0x256>
		direction = -VEHICULE_DIR_MAX;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <algo_decouverte+0x324>)
 800137c:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Envoi des commandes
	vehicule_dir_set(direction);
 800137e:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8001382:	f002 f933 	bl	80035ec <vehicule_dir_set>
	vehicule_throttle_set(throttle);
 8001386:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800138a:	f002 f971 	bl	8003670 <vehicule_throttle_set>

	// Télémétrie
	printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 800138e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001390:	f7ff f90a 	bl	80005a8 <__aeabi_f2d>
 8001394:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001398:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800139a:	f7ff f905 	bl	80005a8 <__aeabi_f2d>
 800139e:	4604      	mov	r4, r0
 80013a0:	460d      	mov	r5, r1
 80013a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80013a4:	f7ff f900 	bl	80005a8 <__aeabi_f2d>
 80013a8:	4680      	mov	r8, r0
 80013aa:	4689      	mov	r9, r1
			throttle, direction,
			robot_vitesse, gyro_get_heading(),
 80013ac:	f000 fa82 	bl	80018b4 <gyro_get_heading>
 80013b0:	ee10 3a10 	vmov	r3, s0
	printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff f8f7 	bl	80005a8 <__aeabi_f2d>
 80013ba:	4682      	mov	sl, r0
 80013bc:	468b      	mov	fp, r1
			gyro_get_dps(), a_pRobot->travelledDistance,
 80013be:	f000 fa59 	bl	8001874 <gyro_get_dps>
 80013c2:	ee10 3a10 	vmov	r3, s0
	printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8ee 	bl	80005a8 <__aeabi_f2d>
 80013cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
			gyro_get_dps(), a_pRobot->travelledDistance,
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8e7 	bl	80005a8 <__aeabi_f2d>
 80013da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80013e0:	603e      	str	r6, [r7, #0]
 80013e2:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 80013e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <algo_decouverte+0x310>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80013ec:	2301      	movs	r3, #1
 80013ee:	930e      	str	r3, [sp, #56]	; 0x38
 80013f0:	920d      	str	r2, [sp, #52]	; 0x34
 80013f2:	960c      	str	r6, [sp, #48]	; 0x30
 80013f4:	683e      	ldr	r6, [r7, #0]
 80013f6:	960b      	str	r6, [sp, #44]	; 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	930a      	str	r3, [sp, #40]	; 0x28
 80013fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001400:	ed97 7b02 	vldr	d7, [r7, #8]
 8001404:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001408:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800140c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001410:	e9cd 4500 	strd	r4, r5, [sp]
 8001414:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001418:	480d      	ldr	r0, [pc, #52]	; (8001450 <algo_decouverte+0x328>)
 800141a:	f00b f8f1 	bl	800c600 <iprintf>
//		pTeleElement->gyro_dps = gyro_get_dps();
//		pTeleElement->etat_automate_principal = automate_principal_autonome;
//		pTeleElement->etat_automate_auto = etat_automate_automatique;
//	}

}
 800141e:	bf00      	nop
 8001420:	376c      	adds	r7, #108	; 0x6c
 8001422:	46bd      	mov	sp, r7
 8001424:	ecbd 8b02 	vpop	{d8}
 8001428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142c:	f3af 8000 	nop.w
 8001430:	9999999a 	.word	0x9999999a
 8001434:	3fb99999 	.word	0x3fb99999
 8001438:	20000290 	.word	0x20000290
 800143c:	20000aa0 	.word	0x20000aa0
 8001440:	41880000 	.word	0x41880000
 8001444:	c1880000 	.word	0xc1880000
 8001448:	41d00000 	.word	0x41d00000
 800144c:	c1d00000 	.word	0xc1d00000
 8001450:	08011190 	.word	0x08011190

08001454 <algo_init>:

void algo_init(st_context_robot *a_pRobot)
{
 8001454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001458:	b0a4      	sub	sp, #144	; 0x90
 800145a:	af14      	add	r7, sp, #80	; 0x50
 800145c:	63f8      	str	r0, [r7, #60]	; 0x3c
	etat_automate_automatique = automate_auto_depart;
 800145e:	4b60      	ldr	r3, [pc, #384]	; (80015e0 <algo_init+0x18c>)
 8001460:	2200      	movs	r2, #0
 8001462:	701a      	strb	r2, [r3, #0]

	// Initialisation de la télémétrie
	telemetrie_init();
 8001464:	f004 f890 	bl	8005588 <telemetrie_init>
	gyro_reset_heading();
 8001468:	f000 fa16 	bl	8001898 <gyro_reset_heading>
	vehicule_distance_aimant_reset();
 800146c:	f002 f8b0 	bl	80035d0 <vehicule_distance_aimant_reset>

	// Initialisation des éléments de base du robot
	a_pRobot->travelledDistance = 0.0;
 8001470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
	a_pRobot->vitesse_cible = 0.0;
 8001478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
	a_pRobot->vitesse_cmd_courante = 0.0;
 8001480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44
	a_pRobot->elapsedTime = 0.0;
 8001488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148a:	2200      	movs	r2, #0
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c

	// Initialisation des PID
	pid_init(&(a_pRobot->pidVitesse), gParametresConfiguration.pid_vitesse_kp, gParametresConfiguration.pid_vitesse_ki, gParametresConfiguration.pid_vitesse_kd, 0.3);
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	4a54      	ldr	r2, [pc, #336]	; (80015e4 <algo_init+0x190>)
 8001492:	edd2 7a05 	vldr	s15, [r2, #20]
 8001496:	4a53      	ldr	r2, [pc, #332]	; (80015e4 <algo_init+0x190>)
 8001498:	ed92 7a06 	vldr	s14, [r2, #24]
 800149c:	4a51      	ldr	r2, [pc, #324]	; (80015e4 <algo_init+0x190>)
 800149e:	edd2 6a07 	vldr	s13, [r2, #28]
 80014a2:	eddf 1a51 	vldr	s3, [pc, #324]	; 80015e8 <algo_init+0x194>
 80014a6:	eeb0 1a66 	vmov.f32	s2, s13
 80014aa:	eef0 0a47 	vmov.f32	s1, s14
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	4618      	mov	r0, r3
 80014b4:	f001 fdbe 	bl	8003034 <pid_init>
	pid_init(&(a_pRobot->pidDirection), gParametresConfiguration.pid_direction_kp, gParametresConfiguration.pid_direction_ki, gParametresConfiguration.pid_direction_kd, 0.3);
 80014b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014ba:	331c      	adds	r3, #28
 80014bc:	4a49      	ldr	r2, [pc, #292]	; (80015e4 <algo_init+0x190>)
 80014be:	edd2 7a08 	vldr	s15, [r2, #32]
 80014c2:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <algo_init+0x190>)
 80014c4:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 80014c8:	4a46      	ldr	r2, [pc, #280]	; (80015e4 <algo_init+0x190>)
 80014ca:	edd2 6a0a 	vldr	s13, [r2, #40]	; 0x28
 80014ce:	eddf 1a46 	vldr	s3, [pc, #280]	; 80015e8 <algo_init+0x194>
 80014d2:	eeb0 1a66 	vmov.f32	s2, s13
 80014d6:	eef0 0a47 	vmov.f32	s1, s14
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fda8 	bl	8003034 <pid_init>

	// Affichage pour enregistrer dans le fichier de trace sur la Raspberry si necessaire
	printf("T;RobotRoulant;\r\n");
 80014e4:	4841      	ldr	r0, [pc, #260]	; (80015ec <algo_init+0x198>)
 80014e6:	f00b f911 	bl	800c70c <puts>
	// Affichage des parametres courants
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
			gParametresConfiguration.acceleration_max,
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <algo_init+0x190>)
 80014ec:	681b      	ldr	r3, [r3, #0]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f85a 	bl	80005a8 <__aeabi_f2d>
 80014f4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			gParametresConfiguration.deceleration_max,
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <algo_init+0x190>)
 80014fa:	685b      	ldr	r3, [r3, #4]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f853 	bl	80005a8 <__aeabi_f2d>
 8001502:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			gParametresConfiguration.vitesse_max_ligne_droite,
 8001506:	4b37      	ldr	r3, [pc, #220]	; (80015e4 <algo_init+0x190>)
 8001508:	689b      	ldr	r3, [r3, #8]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f84c 	bl	80005a8 <__aeabi_f2d>
 8001510:	e9c7 0108 	strd	r0, r1, [r7, #32]
			gParametresConfiguration.vitesse_max_virage,
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <algo_init+0x190>)
 8001516:	68db      	ldr	r3, [r3, #12]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f845 	bl	80005a8 <__aeabi_f2d>
 800151e:	e9c7 0106 	strd	r0, r1, [r7, #24]
			gParametresConfiguration.vitesse_max_decouverte,
 8001522:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <algo_init+0x190>)
 8001524:	691b      	ldr	r3, [r3, #16]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f83e 	bl	80005a8 <__aeabi_f2d>
 800152c:	e9c7 0104 	strd	r0, r1, [r7, #16]
			gParametresConfiguration.pid_vitesse_kp,
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <algo_init+0x190>)
 8001532:	695b      	ldr	r3, [r3, #20]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f837 	bl	80005a8 <__aeabi_f2d>
 800153a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			gParametresConfiguration.pid_vitesse_ki,
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <algo_init+0x190>)
 8001540:	699b      	ldr	r3, [r3, #24]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f830 	bl	80005a8 <__aeabi_f2d>
 8001548:	e9c7 0100 	strd	r0, r1, [r7]
			gParametresConfiguration.pid_vitesse_kd,
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <algo_init+0x190>)
 800154e:	69db      	ldr	r3, [r3, #28]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f829 	bl	80005a8 <__aeabi_f2d>
 8001556:	4682      	mov	sl, r0
 8001558:	468b      	mov	fp, r1
			gParametresConfiguration.pid_direction_kp,
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <algo_init+0x190>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f822 	bl	80005a8 <__aeabi_f2d>
 8001564:	4680      	mov	r8, r0
 8001566:	4689      	mov	r9, r1
			gParametresConfiguration.pid_direction_ki,
 8001568:	4b1e      	ldr	r3, [pc, #120]	; (80015e4 <algo_init+0x190>)
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f81b 	bl	80005a8 <__aeabi_f2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
			gParametresConfiguration.pid_direction_kd );
 8001576:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <algo_init+0x190>)
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	printf("T;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;\r\n",
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f814 	bl	80005a8 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8001588:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 800158c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8001590:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8001594:	ed97 7b00 	vldr	d7, [r7]
 8001598:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800159c:	ed97 7b02 	vldr	d7, [r7, #8]
 80015a0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80015a4:	ed97 7b04 	vldr	d7, [r7, #16]
 80015a8:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015ac:	ed97 7b06 	vldr	d7, [r7, #24]
 80015b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80015b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80015b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80015bc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80015c0:	ed8d 7b00 	vstr	d7, [sp]
 80015c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <algo_init+0x19c>)
 80015ca:	f00b f819 	bl	800c600 <iprintf>
	printf("T;throttle;direction;robot_vitesse;heading;dps;travelled_distance;lidar_droit;lidar_gauche;lidar_avant;lidar_haut;automate_principal_autonome;etat_automate_automatique;\r\n");
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <algo_init+0x1a0>)
 80015d0:	f00b f89c 	bl	800c70c <puts>

}
 80015d4:	bf00      	nop
 80015d6:	3740      	adds	r7, #64	; 0x40
 80015d8:	46bd      	mov	sp, r7
 80015da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015de:	bf00      	nop
 80015e0:	20000290 	.word	0x20000290
 80015e4:	20000aa0 	.word	0x20000aa0
 80015e8:	3e99999a 	.word	0x3e99999a
 80015ec:	080111b8 	.word	0x080111b8
 80015f0:	080111cc 	.word	0x080111cc
 80015f4:	080111f4 	.word	0x080111f4

080015f8 <gyro_read_8bit_register>:
uint8_t gyro_read_8bit_register(
		uint8_t device_address,
		uint8_t register_address,
		HAL_StatusTypeDef * res
	)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4603      	mov	r3, r0
 8001600:	603a      	str	r2, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	460b      	mov	r3, r1
 8001606:	71bb      	strb	r3, [r7, #6]
	// send the register address to I2C device
	*res = HAL_I2C_Master_Transmit(&hi2c1, device_address << 1, &register_address , 1, 10);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	b29b      	uxth	r3, r3
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b299      	uxth	r1, r3
 8001610:	1dba      	adds	r2, r7, #6
 8001612:	230a      	movs	r3, #10
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	4814      	ldr	r0, [pc, #80]	; (800166c <gyro_read_8bit_register+0x74>)
 800161a:	f005 fea3 	bl	8007364 <HAL_I2C_Master_Transmit>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	701a      	strb	r2, [r3, #0]
	if(*res==HAL_OK)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d119      	bne.n	8001662 <gyro_read_8bit_register+0x6a>
	{
		uint8_t data = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
		// read the register value from I2C device
		*res = HAL_I2C_Master_Receive(&hi2c1, device_address << 1, &data, 1, 10);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	b29b      	uxth	r3, r3
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	b299      	uxth	r1, r3
 800163a:	f107 020f 	add.w	r2, r7, #15
 800163e:	230a      	movs	r3, #10
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <gyro_read_8bit_register+0x74>)
 8001646:	f005 ff81 	bl	800754c <HAL_I2C_Master_Receive>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	701a      	strb	r2, [r3, #0]
		if(*res==HAL_OK)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <gyro_read_8bit_register+0x66>
		{
			// return the register value
			return data;
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	e002      	b.n	8001664 <gyro_read_8bit_register+0x6c>
		}
		else
		{
			return 0xFF;
 800165e:	23ff      	movs	r3, #255	; 0xff
 8001660:	e000      	b.n	8001664 <gyro_read_8bit_register+0x6c>
		}
	}
	else
	{
		return 0xFF;
 8001662:	23ff      	movs	r3, #255	; 0xff
	}
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200004dc 	.word	0x200004dc

08001670 <gyro_write_8bit_register>:
		uint8_t device_address,
		uint8_t register_address,
		uint8_t data,
		HAL_StatusTypeDef * res
	)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af02      	add	r7, sp, #8
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
 800167c:	460b      	mov	r3, r1
 800167e:	71bb      	strb	r3, [r7, #6]
 8001680:	4613      	mov	r3, r2
 8001682:	717b      	strb	r3, [r7, #5]
	// send the register address and data to I2C device
	uint8_t data_buf[]= {register_address, data};
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	733b      	strb	r3, [r7, #12]
 8001688:	797b      	ldrb	r3, [r7, #5]
 800168a:	737b      	strb	r3, [r7, #13]
	*res = HAL_I2C_Master_Transmit(&hi2c1, device_address << 1, data_buf , 2, 10);
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	b29b      	uxth	r3, r3
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	b299      	uxth	r1, r3
 8001694:	f107 020c 	add.w	r2, r7, #12
 8001698:	230a      	movs	r3, #10
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2302      	movs	r3, #2
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <gyro_write_8bit_register+0x44>)
 80016a0:	f005 fe60 	bl	8007364 <HAL_I2C_Master_Transmit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200004dc 	.word	0x200004dc

080016b8 <gyro_init>:

// public functions ///////////////////////////////////////////////////////////

uint32_t gyro_init()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	uint8_t res_read;
	HAL_StatusTypeDef result;
	uint8_t who_am_i;

	ctx.raw_value = 0;
 80016be:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <gyro_init+0xf0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	801a      	strh	r2, [r3, #0]
	ctx.rate = 0.0;
 80016c4:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <gyro_init+0xf0>)
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	605a      	str	r2, [r3, #4]
	ctx.bias = INIT_GYRO_BIAS;
 80016cc:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <gyro_init+0xf0>)
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
	ctx.heading = 0.0f;
 80016d4:	4b34      	ldr	r3, [pc, #208]	; (80017a8 <gyro_init+0xf0>)
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
	ctx.locked = 0;
 80016dc:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <gyro_init+0xf0>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]

	who_am_i = gyro_read_8bit_register(GYRO_I2C_ADDRESS,WHO_AM_I_ADDRESS,&result);
 80016e2:	1d7b      	adds	r3, r7, #5
 80016e4:	461a      	mov	r2, r3
 80016e6:	210f      	movs	r1, #15
 80016e8:	206b      	movs	r0, #107	; 0x6b
 80016ea:	f7ff ff85 	bl	80015f8 <gyro_read_8bit_register>
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	if(result != HAL_OK)
 80016f2:	797b      	ldrb	r3, [r7, #5]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <gyro_init+0x44>
	{
		return GYRO_NOT_DETECTED;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e051      	b.n	80017a0 <gyro_init+0xe8>
	}
	if(who_am_i != WHO_AM_I_VALUE)
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b69      	cmp	r3, #105	; 0x69
 8001700:	d001      	beq.n	8001706 <gyro_init+0x4e>
	{
		return GYRO_NOT_IDENTIFIED;
 8001702:	2302      	movs	r3, #2
 8001704:	e04c      	b.n	80017a0 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL2, CTRL2_value_init, &result);
 8001706:	1d7b      	adds	r3, r7, #5
 8001708:	2230      	movs	r2, #48	; 0x30
 800170a:	2111      	movs	r1, #17
 800170c:	206b      	movs	r0, #107	; 0x6b
 800170e:	f7ff ffaf 	bl	8001670 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL2, &result);
 8001712:	1d7b      	adds	r3, r7, #5
 8001714:	461a      	mov	r2, r3
 8001716:	2111      	movs	r1, #17
 8001718:	206b      	movs	r0, #107	; 0x6b
 800171a:	f7ff ff6d 	bl	80015f8 <gyro_read_8bit_register>
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL2_value_init)
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	2b30      	cmp	r3, #48	; 0x30
 8001726:	d001      	beq.n	800172c <gyro_init+0x74>
	{
		return GYRO_SETUP_FAILURE;
 8001728:	2302      	movs	r3, #2
 800172a:	e039      	b.n	80017a0 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL3, CTRL3_value_init, &result);
 800172c:	1d7b      	adds	r3, r7, #5
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	2112      	movs	r1, #18
 8001732:	206b      	movs	r0, #107	; 0x6b
 8001734:	f7ff ff9c 	bl	8001670 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL3, &result);
 8001738:	1d7b      	adds	r3, r7, #5
 800173a:	461a      	mov	r2, r3
 800173c:	2112      	movs	r1, #18
 800173e:	206b      	movs	r0, #107	; 0x6b
 8001740:	f7ff ff5a 	bl	80015f8 <gyro_read_8bit_register>
 8001744:	4603      	mov	r3, r0
 8001746:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL3_value_init)
 8001748:	79bb      	ldrb	r3, [r7, #6]
 800174a:	2b40      	cmp	r3, #64	; 0x40
 800174c:	d001      	beq.n	8001752 <gyro_init+0x9a>
	{
		return GYRO_SETUP_FAILURE;
 800174e:	2302      	movs	r3, #2
 8001750:	e026      	b.n	80017a0 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL7, CTRL7_value_init, &result);
 8001752:	1d7b      	adds	r3, r7, #5
 8001754:	2243      	movs	r2, #67	; 0x43
 8001756:	2116      	movs	r1, #22
 8001758:	206b      	movs	r0, #107	; 0x6b
 800175a:	f7ff ff89 	bl	8001670 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL7, &result);
 800175e:	1d7b      	adds	r3, r7, #5
 8001760:	461a      	mov	r2, r3
 8001762:	2116      	movs	r1, #22
 8001764:	206b      	movs	r0, #107	; 0x6b
 8001766:	f7ff ff47 	bl	80015f8 <gyro_read_8bit_register>
 800176a:	4603      	mov	r3, r0
 800176c:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL7_value_init)
 800176e:	79bb      	ldrb	r3, [r7, #6]
 8001770:	2b43      	cmp	r3, #67	; 0x43
 8001772:	d001      	beq.n	8001778 <gyro_init+0xc0>
	{
		return GYRO_SETUP_FAILURE;
 8001774:	2302      	movs	r3, #2
 8001776:	e013      	b.n	80017a0 <gyro_init+0xe8>
	}
	gyro_write_8bit_register(GYRO_I2C_ADDRESS, CTRL10, CTRL10_value_init, &result);
 8001778:	1d7b      	adds	r3, r7, #5
 800177a:	2220      	movs	r2, #32
 800177c:	2119      	movs	r1, #25
 800177e:	206b      	movs	r0, #107	; 0x6b
 8001780:	f7ff ff76 	bl	8001670 <gyro_write_8bit_register>
	res_read = gyro_read_8bit_register(GYRO_I2C_ADDRESS, CTRL10, &result);
 8001784:	1d7b      	adds	r3, r7, #5
 8001786:	461a      	mov	r2, r3
 8001788:	2119      	movs	r1, #25
 800178a:	206b      	movs	r0, #107	; 0x6b
 800178c:	f7ff ff34 	bl	80015f8 <gyro_read_8bit_register>
 8001790:	4603      	mov	r3, r0
 8001792:	71bb      	strb	r3, [r7, #6]
	if(res_read!=CTRL10_value_init)
 8001794:	79bb      	ldrb	r3, [r7, #6]
 8001796:	2b20      	cmp	r3, #32
 8001798:	d001      	beq.n	800179e <gyro_init+0xe6>
	{
		return GYRO_SETUP_FAILURE;
 800179a:	2302      	movs	r3, #2
 800179c:	e000      	b.n	80017a0 <gyro_init+0xe8>
	}
	return GYRO_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000021c 	.word	0x2000021c
 80017ac:	00000000 	.word	0x00000000

080017b0 <gyro_update>:

void gyro_update(float duration_s)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	ed87 0a01 	vstr	s0, [r7, #4]
	HAL_StatusTypeDef result;
	// TODO : burst read (16bits)
	uint8_t res_read_H = gyro_read_8bit_register(GYRO_I2C_ADDRESS, OUT_Z_H, &result);
 80017ba:	f107 030d 	add.w	r3, r7, #13
 80017be:	461a      	mov	r2, r3
 80017c0:	2127      	movs	r1, #39	; 0x27
 80017c2:	206b      	movs	r0, #107	; 0x6b
 80017c4:	f7ff ff18 	bl	80015f8 <gyro_read_8bit_register>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73fb      	strb	r3, [r7, #15]
	uint8_t res_read_L = gyro_read_8bit_register(GYRO_I2C_ADDRESS, OUT_Z_L, &result);
 80017cc:	f107 030d 	add.w	r3, r7, #13
 80017d0:	461a      	mov	r2, r3
 80017d2:	2126      	movs	r1, #38	; 0x26
 80017d4:	206b      	movs	r0, #107	; 0x6b
 80017d6:	f7ff ff0f 	bl	80015f8 <gyro_read_8bit_register>
 80017da:	4603      	mov	r3, r0
 80017dc:	73bb      	strb	r3, [r7, #14]
	ctx.raw_value = ((uint16_t)(res_read_H) << 8) + (uint16_t) res_read_L;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4413      	add	r3, r2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <gyro_update+0xc0>)
 80017f2:	801a      	strh	r2, [r3, #0]
	ctx.rate = (float)(ctx.raw_value*ANGULAR_RATE_SENSITIVITY_245*GYRO_SENSITIVITY_CORRECTION);
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <gyro_update+0xc0>)
 80017f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fec2 	bl	8000584 <__aeabi_i2d>
 8001800:	a317      	add	r3, pc, #92	; (adr r3, 8001860 <gyro_update+0xb0>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe ff27 	bl	8000658 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	a315      	add	r3, pc, #84	; (adr r3, 8001868 <gyro_update+0xb8>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe ff1e 	bl	8000658 <__aeabi_dmul>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff fa10 	bl	8000c48 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <gyro_update+0xc0>)
 800182c:	6053      	str	r3, [r2, #4]
	ctx.heading += (ctx.rate - ctx.bias)*duration_s;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <gyro_update+0xc0>)
 8001830:	ed93 7a03 	vldr	s14, [r3, #12]
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <gyro_update+0xc0>)
 8001836:	edd3 6a01 	vldr	s13, [r3, #4]
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <gyro_update+0xc0>)
 800183c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001840:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001844:	edd7 7a01 	vldr	s15, [r7, #4]
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <gyro_update+0xc0>)
 8001852:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	1eb851ec 	.word	0x1eb851ec
 8001864:	3f81eb85 	.word	0x3f81eb85
 8001868:	00000000 	.word	0x00000000
 800186c:	3fef5c29 	.word	0x3fef5c29
 8001870:	2000021c 	.word	0x2000021c

08001874 <gyro_get_dps>:

float gyro_get_dps()
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	return ctx.rate- ctx.bias;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <gyro_get_dps+0x20>)
 800187a:	ed93 7a01 	vldr	s14, [r3, #4]
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <gyro_get_dps+0x20>)
 8001880:	edd3 7a02 	vldr	s15, [r3, #8]
 8001884:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	2000021c 	.word	0x2000021c

08001898 <gyro_reset_heading>:

void gyro_reset_heading()
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
	ctx.heading = 0.0F;
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <gyro_reset_heading+0x18>)
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000021c 	.word	0x2000021c

080018b4 <gyro_get_heading>:

float gyro_get_heading()
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
	return ctx.heading;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <gyro_get_heading+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	ee07 3a90 	vmov	s15, r3
}
 80018c0:	eeb0 0a67 	vmov.f32	s0, s15
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	2000021c 	.word	0x2000021c

080018d0 <gyro_is_calibrated>:

bool gyro_is_calibrated()
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return ctx.locked >= 128;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <gyro_is_calibrated+0x1c>)
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	2b7f      	cmp	r3, #127	; 0x7f
 80018da:	bf8c      	ite	hi
 80018dc:	2301      	movhi	r3, #1
 80018de:	2300      	movls	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	2000021c 	.word	0x2000021c

080018f0 <gyro_auto_calibrate>:
float alpha_mean_update = 0.01;
float alpha_variance_update = 0.05;
float alpha_bias_update = 0.01;

void gyro_auto_calibrate(float duration_s)
{
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	ed87 0a01 	vstr	s0, [r7, #4]
	gyro_update(duration_s);
 80018fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8001900:	f7ff ff56 	bl	80017b0 <gyro_update>
	// update mean and variance
	mean = alpha_mean_update *ctx.rate + (1.0-alpha_mean_update) * mean;
 8001904:	4b6e      	ldr	r3, [pc, #440]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001906:	ed93 7a01 	vldr	s14, [r3, #4]
 800190a:	4b6e      	ldr	r3, [pc, #440]	; (8001ac4 <gyro_auto_calibrate+0x1d4>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	ee17 0a90 	vmov	r0, s15
 8001918:	f7fe fe46 	bl	80005a8 <__aeabi_f2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <gyro_auto_calibrate+0x1d4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe3f 	bl	80005a8 <__aeabi_f2d>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	f04f 0000 	mov.w	r0, #0
 8001932:	4965      	ldr	r1, [pc, #404]	; (8001ac8 <gyro_auto_calibrate+0x1d8>)
 8001934:	f7fe fcd8 	bl	80002e8 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4690      	mov	r8, r2
 800193e:	4699      	mov	r9, r3
 8001940:	4b62      	ldr	r3, [pc, #392]	; (8001acc <gyro_auto_calibrate+0x1dc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe2f 	bl	80005a8 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4640      	mov	r0, r8
 8001950:	4649      	mov	r1, r9
 8001952:	f7fe fe81 	bl	8000658 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fcc5 	bl	80002ec <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f96d 	bl	8000c48 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	4a56      	ldr	r2, [pc, #344]	; (8001acc <gyro_auto_calibrate+0x1dc>)
 8001972:	6013      	str	r3, [r2, #0]
	variance = alpha_variance_update * pow( ctx.rate-mean,2)  + (1.0-alpha_variance_update) * variance;
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <gyro_auto_calibrate+0x1e0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fe15 	bl	80005a8 <__aeabi_f2d>
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001984:	ed93 7a01 	vldr	s14, [r3, #4]
 8001988:	4b50      	ldr	r3, [pc, #320]	; (8001acc <gyro_auto_calibrate+0x1dc>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001992:	ee17 0a90 	vmov	r0, s15
 8001996:	f7fe fe07 	bl	80005a8 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001ab8 <gyro_auto_calibrate+0x1c8>
 80019a2:	ec43 2b10 	vmov	d0, r2, r3
 80019a6:	f00e fc3d 	bl	8010224 <pow>
 80019aa:	ec53 2b10 	vmov	r2, r3, d0
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fe51 	bl	8000658 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <gyro_auto_calibrate+0x1e0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdf0 	bl	80005a8 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	f04f 0000 	mov.w	r0, #0
 80019d0:	493d      	ldr	r1, [pc, #244]	; (8001ac8 <gyro_auto_calibrate+0x1d8>)
 80019d2:	f7fe fc89 	bl	80002e8 <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	4b3d      	ldr	r3, [pc, #244]	; (8001ad4 <gyro_auto_calibrate+0x1e4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fde0 	bl	80005a8 <__aeabi_f2d>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4640      	mov	r0, r8
 80019ee:	4649      	mov	r1, r9
 80019f0:	f7fe fe32 	bl	8000658 <__aeabi_dmul>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4620      	mov	r0, r4
 80019fa:	4629      	mov	r1, r5
 80019fc:	f7fe fc76 	bl	80002ec <__adddf3>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f7ff f91e 	bl	8000c48 <__aeabi_d2f>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <gyro_auto_calibrate+0x1e4>)
 8001a10:	6013      	str	r3, [r2, #0]
	// if mean stable, update bias
	if(variance<GYRO_AUTOCAL_VARIANCE_THRESHOLD)
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <gyro_auto_calibrate+0x1e4>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ad8 <gyro_auto_calibrate+0x1e8>
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	d400      	bmi.n	8001a28 <gyro_auto_calibrate+0x138>
				(int32_t)(ctx.bias*1000.0),
				(int32_t)(ctx.heading),
				(int32_t)(gyro_get_dps()*1000.0)
								  );
#endif
}
 8001a26:	e041      	b.n	8001aac <gyro_auto_calibrate+0x1bc>
		ctx.bias = alpha_bias_update*mean + (1.0-alpha_bias_update)* ctx.bias;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <gyro_auto_calibrate+0x1ec>)
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <gyro_auto_calibrate+0x1dc>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ee17 0a90 	vmov	r0, s15
 8001a3c:	f7fe fdb4 	bl	80005a8 <__aeabi_f2d>
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <gyro_auto_calibrate+0x1ec>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fdad 	bl	80005a8 <__aeabi_f2d>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	491c      	ldr	r1, [pc, #112]	; (8001ac8 <gyro_auto_calibrate+0x1d8>)
 8001a58:	f7fe fc46 	bl	80002e8 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4690      	mov	r8, r2
 8001a62:	4699      	mov	r9, r3
 8001a64:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd9d 	bl	80005a8 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4640      	mov	r0, r8
 8001a74:	4649      	mov	r1, r9
 8001a76:	f7fe fdef 	bl	8000658 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4629      	mov	r1, r5
 8001a82:	f7fe fc33 	bl	80002ec <__adddf3>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff f8db 	bl	8000c48 <__aeabi_d2f>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001a96:	6093      	str	r3, [r2, #8]
		if(ctx.locked<1024)
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa0:	d204      	bcs.n	8001aac <gyro_auto_calibrate+0x1bc>
			++ctx.locked;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <gyro_auto_calibrate+0x1d0>)
 8001aaa:	6113      	str	r3, [r2, #16]
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab6:	bf00      	nop
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	40000000 	.word	0x40000000
 8001ac0:	2000021c 	.word	0x2000021c
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	3ff00000 	.word	0x3ff00000
 8001acc:	20000230 	.word	0x20000230
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	20000234 	.word	0x20000234
 8001ad8:	3d23d70a 	.word	0x3d23d70a
 8001adc:	20000008 	.word	0x20000008

08001ae0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

	uint8_t ch8=ch;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart2,(uint8_t *)&ch8,1,HAL_MAX_DELAY);
 8001aee:	f107 010f 	add.w	r1, r7, #15
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	2201      	movs	r2, #1
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <__io_putchar+0x28>)
 8001afa:	f008 ffd5 	bl	800aaa8 <HAL_UART_Transmit>

	return ch;
 8001afe:	687b      	ldr	r3, [r7, #4]

}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000970 	.word	0x20000970

08001b0c <__io_getchar>:

int __io_getchar()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0

	int ch8;
	HAL_StatusTypeDef retour;

	ch8 = ' ';
 8001b12:	2320      	movs	r3, #32
 8001b14:	603b      	str	r3, [r7, #0]

	do {
		retour = HAL_UART_Receive(&huart2,(uint8_t*)&ch8,1,HAL_MAX_DELAY);
 8001b16:	4639      	mov	r1, r7
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4809      	ldr	r0, [pc, #36]	; (8001b44 <__io_getchar+0x38>)
 8001b20:	f009 f855 	bl	800abce <HAL_UART_Receive>
 8001b24:	4603      	mov	r3, r0
 8001b26:	71fb      	strb	r3, [r7, #7]
		//delay_ms(1);
	} while(retour != HAL_OK);
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f3      	bne.n	8001b16 <__io_getchar+0xa>

		if(retour != HAL_OK)
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <__io_getchar+0x2e>
			ch8 = -1;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295
 8001b38:	603b      	str	r3, [r7, #0]

return ch8;
 8001b3a:	683b      	ldr	r3, [r7, #0]

}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000970 	.word	0x20000970

08001b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b09e      	sub	sp, #120	; 0x78
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b4e:	f004 f976 	bl	8005e3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b52:	f000 f961 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b56:	f001 f83d 	bl	8002bd4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b5a:	f001 f805 	bl	8002b68 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b5e:	f000 faef 	bl	8002140 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001b62:	f000 fb2d 	bl	80021c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b66:	f000 fbf5 	bl	8002354 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b6a:	f000 fc91 	bl	8002490 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b6e:	f000 fd2d 	bl	80025cc <MX_TIM4_Init>
  MX_TIM8_Init();
 8001b72:	f000 fdc9 	bl	8002708 <MX_TIM8_Init>
  MX_UART4_Init();
 8001b76:	f000 fea3 	bl	80028c0 <MX_UART4_Init>
  MX_UART5_Init();
 8001b7a:	f000 fed1 	bl	8002920 <MX_UART5_Init>
  MX_UART7_Init();
 8001b7e:	f000 ff03 	bl	8002988 <MX_UART7_Init>
  MX_UART8_Init();
 8001b82:	f000 ff31 	bl	80029e8 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001b86:	f000 ff5f 	bl	8002a48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001b8a:	f000 ff8d 	bl	8002aa8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b8e:	f000 ffbb 	bl	8002b08 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001b92:	f000 f9df 	bl	8001f54 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001b96:	f000 fa81 	bl	800209c <MX_ADC3_Init>
  MX_ADC2_Init();
 8001b9a:	f000 fa2d 	bl	8001ff8 <MX_ADC2_Init>

  MX_TIM12_Init();
 8001b9e:	f000 fe07 	bl	80027b0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  printf("+++++++ Buggy TRR 2022 Roulant +++++++\r\n");
 8001ba2:	4893      	ldr	r0, [pc, #588]	; (8001df0 <main+0x2a8>)
 8001ba4:	f00a fdb2 	bl	800c70c <puts>

  // Initialisation des Lidars
  tfminiplus_init();
 8001ba8:	f003 ffee 	bl	8005b88 <tfminiplus_init>

  // Initialisation de la gestion radio et commande vehicule
  init_radio_commandes();
 8001bac:	f001 fdb4 	bl	8003718 <init_radio_commandes>

  // Récupération des parametres de conf
  paramConf_restaure();
 8001bb0:	f001 f940 	bl	8002e34 <paramConf_restaure>

  // Gyro
  if(gyro_init() == GYRO_OK)
 8001bb4:	f7ff fd80 	bl	80016b8 <gyro_init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d124      	bne.n	8001c08 <main+0xc0>
  {
	  last_time_gyro = HAL_GetTick();
 8001bbe:	f004 f98f 	bl	8005ee0 <HAL_GetTick>
 8001bc2:	6738      	str	r0, [r7, #112]	; 0x70
	  while(gyro_is_calibrated())
 8001bc4:	e012      	b.n	8001bec <main+0xa4>
	  {
		  HAL_Delay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f004 f996 	bl	8005ef8 <HAL_Delay>
		  current_time = HAL_GetTick();
 8001bcc:	f004 f988 	bl	8005ee0 <HAL_GetTick>
 8001bd0:	6678      	str	r0, [r7, #100]	; 0x64
		  gyro_auto_calibrate(current_time - last_time_gyro);
 8001bd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be0:	eeb0 0a67 	vmov.f32	s0, s15
 8001be4:	f7ff fe84 	bl	80018f0 <gyro_auto_calibrate>
		  last_time_gyro = current_time;
 8001be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
	  while(gyro_is_calibrated())
 8001bec:	f7ff fe70 	bl	80018d0 <gyro_is_calibrated>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e7      	bne.n	8001bc6 <main+0x7e>
	  }
	  printf("Gyro calibrated\r\n");
 8001bf6:	487f      	ldr	r0, [pc, #508]	; (8001df4 <main+0x2ac>)
 8001bf8:	f00a fd88 	bl	800c70c <puts>
	  gUpdateGyro = 1;
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <main+0x2b0>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
	  gyro_reset_heading();
 8001c02:	f7ff fe49 	bl	8001898 <gyro_reset_heading>
 8001c06:	e002      	b.n	8001c0e <main+0xc6>
  }
  else
	  printf("Erreur d'initialisation du Gyro\r\n");
 8001c08:	487c      	ldr	r0, [pc, #496]	; (8001dfc <main+0x2b4>)
 8001c0a:	f00a fd7f 	bl	800c70c <puts>

  // Télémetrie
  telemetrie_init();
 8001c0e:	f003 fcbb 	bl	8005588 <telemetrie_init>
  pTeleElement = telemetrie_pt_enreg_en_cours();
 8001c12:	f003 fc51 	bl	80054b8 <telemetrie_pt_enreg_en_cours>
 8001c16:	6638      	str	r0, [r7, #96]	; 0x60
  erreur = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Initialisation des variables
  temps_appui_boutonext1 = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  temps_relachement_boutonext1 = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  temps_appui_boutonext2 = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  distance = 0;
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	65bb      	str	r3, [r7, #88]	; 0x58
  distance_precedente = 0;
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	657b      	str	r3, [r7, #84]	; 0x54
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin)==GPIO_PIN_RESET)
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	4870      	ldr	r0, [pc, #448]	; (8001e00 <main+0x2b8>)
 8001c3e:	f005 facf 	bl	80071e0 <HAL_GPIO_ReadPin>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d108      	bne.n	8001c5a <main+0x112>
	  {
		  temps_appui_boutonext1 += 10; // La durée d'appui du bouton est allongée de 10 ms
 8001c48:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c4c:	330a      	adds	r3, #10
 8001c4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		  temps_relachement_boutonext1 = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001c58:	e00d      	b.n	8001c76 <main+0x12e>
	  }
	  else
	  {
		  temps_appui_boutonext1 = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		  if(temps_relachement_boutonext1 < 60000) // on limite sinon le compteur partirait en dépassement
 8001c60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001c64:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d804      	bhi.n	8001c76 <main+0x12e>
			  temps_relachement_boutonext1 += 10;
 8001c6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001c70:	330a      	adds	r3, #10
 8001c72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  }
	  if(HAL_GPIO_ReadPin(boutonExt2_GPIO_Port, boutonExt2_Pin)==GPIO_PIN_RESET)
 8001c76:	2120      	movs	r1, #32
 8001c78:	4861      	ldr	r0, [pc, #388]	; (8001e00 <main+0x2b8>)
 8001c7a:	f005 fab1 	bl	80071e0 <HAL_GPIO_ReadPin>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <main+0x148>
		  temps_appui_boutonext2 += 10; // La durée d'appui du bouton est allongée de 10 ms
 8001c84:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001c88:	330a      	adds	r3, #10
 8001c8a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c8e:	e002      	b.n	8001c96 <main+0x14e>
	  else
		  temps_appui_boutonext2 = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	  gyro_update(0.01);
 8001c96:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8001e04 <main+0x2bc>
 8001c9a:	f7ff fd89 	bl	80017b0 <gyro_update>

	  switch(etat_automate_principal)
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <main+0x2c0>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d07d      	beq.n	8001da2 <main+0x25a>
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	f300 8098 	bgt.w	8001ddc <main+0x294>
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <main+0x16e>
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d040      	beq.n	8001d36 <main+0x1ee>
 8001cb4:	e092      	b.n	8001ddc <main+0x294>
	  {
	  case automate_principal_radio :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led verte
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cbc:	4853      	ldr	r0, [pc, #332]	; (8001e0c <main+0x2c4>)
 8001cbe:	f005 faa7 	bl	8007210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	484e      	ldr	r0, [pc, #312]	; (8001e00 <main+0x2b8>)
 8001cc8:	f005 faa2 	bl	8007210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	484b      	ldr	r0, [pc, #300]	; (8001e00 <main+0x2b8>)
 8001cd2:	f005 fa9d 	bl	8007210 <HAL_GPIO_WritePin>

		  if(temps_appui_boutonext1 > 1000)
 8001cd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cde:	d90a      	bls.n	8001cf6 <main+0x1ae>
		  {
			  algo_init(&robot_contexte);
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fbb6 	bl	8001454 <algo_init>
			  filtre_declenchement_auto = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			  etat_automate_principal = automate_principal_autonome;
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <main+0x2c0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
//				vitesse = (distance-distance_precedente)/0.01;
//				distance_precedente = distance;
//
//				printf("%f;%f;%f\r\n", throttle, vitesse, distance);
		  }
		  break;
 8001cf4:	e077      	b.n	8001de6 <main+0x29e>
		  else if(temps_appui_boutonext2 > 1000)
 8001cf6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cfe:	d903      	bls.n	8001d08 <main+0x1c0>
			  etat_automate_principal = automate_principal_shell;
 8001d00:	4b41      	ldr	r3, [pc, #260]	; (8001e08 <main+0x2c0>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	701a      	strb	r2, [r3, #0]
		  break;
 8001d06:	e06e      	b.n	8001de6 <main+0x29e>
				radio_dir_get(&direction);
 8001d08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 faab 	bl	8003268 <radio_dir_get>
				radio_throttle_get(&throttle);
 8001d12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fb00 	bl	800331c <radio_throttle_get>
				vehicule_dir_set(direction);
 8001d1c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001d20:	eeb0 0a67 	vmov.f32	s0, s15
 8001d24:	f001 fc62 	bl	80035ec <vehicule_dir_set>
				vehicule_throttle_set(throttle);
 8001d28:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	f001 fc9e 	bl	8003670 <vehicule_throttle_set>
		  break;
 8001d34:	e057      	b.n	8001de6 <main+0x29e>
	  case automate_principal_autonome :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led rouge
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d3c:	4833      	ldr	r0, [pc, #204]	; (8001e0c <main+0x2c4>)
 8001d3e:	f005 fa67 	bl	8007210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	482e      	ldr	r0, [pc, #184]	; (8001e00 <main+0x2b8>)
 8001d48:	f005 fa62 	bl	8007210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	482b      	ldr	r0, [pc, #172]	; (8001e00 <main+0x2b8>)
 8001d52:	f005 fa5d 	bl	8007210 <HAL_GPIO_WritePin>

		  // On attend le relachement du bouton puis 2 secondes,
		  // le temps que la personne retire complètement son doigt de l'environnement du robot
		  if((temps_relachement_boutonext1>2000) && (filtre_declenchement_auto == 0))
 8001d56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001d5a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d5e:	d906      	bls.n	8001d6e <main+0x226>
 8001d60:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <main+0x226>
			  filtre_declenchement_auto = 1;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		  if(filtre_declenchement_auto == 1)
 8001d6e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <main+0x23a>
			  // Appel automate
			  algo_decouverte(&robot_contexte, 0.01);
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001e04 <main+0x2bc>
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f9d3 	bl	8001128 <algo_decouverte>

		  // Si le pilote tente de reprendre le controle passage immédiat des commandes
		  // Si le tour de piste en automatique est fini alors passage des commandes à la radio
		  if((radio_isThereCommand() != 0) || (etat_automate_automatique == automate_auto_fini))
 8001d82:	f001 fb25 	bl	80033d0 <radio_isThereCommand>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <main+0x24c>
 8001d8c:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <main+0x2c8>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d127      	bne.n	8001de4 <main+0x29c>
		  {
			  printf("T;Fin;\r\n");
 8001d94:	481f      	ldr	r0, [pc, #124]	; (8001e14 <main+0x2cc>)
 8001d96:	f00a fcb9 	bl	800c70c <puts>
			  etat_automate_principal = automate_principal_radio;
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <main+0x2c0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
		  }
//		  else
//		  {
//			  // Appel de l'automate automatique
//		  }
		  break;
 8001da0:	e020      	b.n	8001de4 <main+0x29c>
	  case automate_principal_shell :
		  // Bandeau de lumière couleur xxx
		  // Par défaut aujourd'hui allume led bleue
		  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001da8:	4818      	ldr	r0, [pc, #96]	; (8001e0c <main+0x2c4>)
 8001daa:	f005 fa31 	bl	8007210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	4813      	ldr	r0, [pc, #76]	; (8001e00 <main+0x2b8>)
 8001db4:	f005 fa2c 	bl	8007210 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2140      	movs	r1, #64	; 0x40
 8001dbc:	4810      	ldr	r0, [pc, #64]	; (8001e00 <main+0x2b8>)
 8001dbe:	f005 fa27 	bl	8007210 <HAL_GPIO_WritePin>

		  // Lancement du shell
		  shell();
 8001dc2:	f001 fe67 	bl	8003a94 <shell>

		  telemetrie_init();
 8001dc6:	f003 fbdf 	bl	8005588 <telemetrie_init>
		  pTeleElement = telemetrie_pt_enreg_en_cours();
 8001dca:	f003 fb75 	bl	80054b8 <telemetrie_pt_enreg_en_cours>
 8001dce:	6638      	str	r0, [r7, #96]	; 0x60
		  erreur = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	65fb      	str	r3, [r7, #92]	; 0x5c

		  etat_automate_principal = automate_principal_radio;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <main+0x2c0>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
		  break;
 8001dda:	e004      	b.n	8001de6 <main+0x29e>
	  default :
		  etat_automate_principal = automate_principal_radio;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <main+0x2c0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
		  break;
 8001de2:	e000      	b.n	8001de6 <main+0x29e>
		  break;
 8001de4:	bf00      	nop

	  }

	  // Iteration de l'automate principale toutes les 10 ms.
	  HAL_Delay(10);
 8001de6:	200a      	movs	r0, #10
 8001de8:	f004 f886 	bl	8005ef8 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin)==GPIO_PIN_RESET)
 8001dec:	e725      	b.n	8001c3a <main+0xf2>
 8001dee:	bf00      	nop
 8001df0:	080112a0 	.word	0x080112a0
 8001df4:	080112c8 	.word	0x080112c8
 8001df8:	2000027c 	.word	0x2000027c
 8001dfc:	080112dc 	.word	0x080112dc
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	3c23d70a 	.word	0x3c23d70a
 8001e08:	200007cc 	.word	0x200007cc
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	20000290 	.word	0x20000290
 8001e14:	08011300 	.word	0x08011300

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b0b4      	sub	sp, #208	; 0xd0
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e22:	2230      	movs	r2, #48	; 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f009 ff78 	bl	800bd1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 0308 	add.w	r3, r7, #8
 8001e40:	2284      	movs	r2, #132	; 0x84
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f009 ff69 	bl	800bd1c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <SystemClock_Config+0x134>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <SystemClock_Config+0x134>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <SystemClock_Config+0x134>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <SystemClock_Config+0x138>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a3a      	ldr	r2, [pc, #232]	; (8001f50 <SystemClock_Config+0x138>)
 8001e68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <SystemClock_Config+0x138>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e80:	2301      	movs	r3, #1
 8001e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e86:	2310      	movs	r3, #16
 8001e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e9e:	23d8      	movs	r3, #216	; 0xd8
 8001ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f005 ff07 	bl	8007cc8 <HAL_RCC_OscConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001ec0:	f000 ffb2 	bl	8002e28 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ec4:	f005 feb0 	bl	8007c28 <HAL_PWREx_EnableOverDrive>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001ece:	f000 ffab 	bl	8002e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ee4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001ef4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ef8:	2107      	movs	r1, #7
 8001efa:	4618      	mov	r0, r3
 8001efc:	f006 f988 	bl	8008210 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001f06:	f000 ff8f 	bl	8002e28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001f0a:	f247 73c0 	movw	r3, #30656	; 0x77c0
 8001f0e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f10:	2300      	movs	r3, #0
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001f24:	2300      	movs	r3, #0
 8001f26:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4618      	mov	r0, r3
 8001f36:	f006 fb41 	bl	80085bc <HAL_RCCEx_PeriphCLKConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001f40:	f000 ff72 	bl	8002e28 <Error_Handler>
  }
}
 8001f44:	bf00      	nop
 8001f46:	37d0      	adds	r7, #208	; 0xd0
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40007000 	.word	0x40007000

08001f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <MX_ADC1_Init+0x9c>)
 8001f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f96:	4a17      	ldr	r2, [pc, #92]	; (8001ff4 <MX_ADC1_Init+0xa0>)
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_ADC1_Init+0x98>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fb6:	f003 ffc3 	bl	8005f40 <HAL_ADC_Init>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fc0:	f000 ff32 	bl	8002e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fd0:	463b      	mov	r3, r7
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_ADC1_Init+0x98>)
 8001fd6:	f003 fff7 	bl	8005fc8 <HAL_ADC_ConfigChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fe0:	f000 ff22 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200005f8 	.word	0x200005f8
 8001ff0:	40012000 	.word	0x40012000
 8001ff4:	0f000001 	.word	0x0f000001

08001ff8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ffe:	463b      	mov	r3, r7
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <MX_ADC2_Init+0x98>)
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <MX_ADC2_Init+0x9c>)
 800200e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MX_ADC2_Init+0x98>)
 8002012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002016:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <MX_ADC2_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800201e:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <MX_ADC2_Init+0x98>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <MX_ADC2_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <MX_ADC2_Init+0x98>)
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002032:	4b17      	ldr	r3, [pc, #92]	; (8002090 <MX_ADC2_Init+0x98>)
 8002034:	2200      	movs	r2, #0
 8002036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002038:	4b15      	ldr	r3, [pc, #84]	; (8002090 <MX_ADC2_Init+0x98>)
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <MX_ADC2_Init+0xa0>)
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <MX_ADC2_Init+0x98>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002044:	4b12      	ldr	r3, [pc, #72]	; (8002090 <MX_ADC2_Init+0x98>)
 8002046:	2201      	movs	r2, #1
 8002048:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <MX_ADC2_Init+0x98>)
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <MX_ADC2_Init+0x98>)
 8002054:	2201      	movs	r2, #1
 8002056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <MX_ADC2_Init+0x98>)
 800205a:	f003 ff71 	bl	8005f40 <HAL_ADC_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002064:	f000 fee0 	bl	8002e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002068:	2307      	movs	r3, #7
 800206a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800206c:	2301      	movs	r3, #1
 800206e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002074:	463b      	mov	r3, r7
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_ADC2_Init+0x98>)
 800207a:	f003 ffa5 	bl	8005fc8 <HAL_ADC_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002084:	f000 fed0 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000494 	.word	0x20000494
 8002094:	40012100 	.word	0x40012100
 8002098:	0f000001 	.word	0x0f000001

0800209c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020a2:	463b      	mov	r3, r7
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_ADC3_Init+0x98>)
 80020b0:	4a21      	ldr	r2, [pc, #132]	; (8002138 <MX_ADC3_Init+0x9c>)
 80020b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_ADC3_Init+0x98>)
 80020b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_ADC3_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_ADC3_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_ADC3_Init+0x98>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80020ce:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_ADC3_Init+0x98>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_ADC3_Init+0x98>)
 80020d8:	2200      	movs	r2, #0
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_ADC3_Init+0x98>)
 80020de:	4a17      	ldr	r2, [pc, #92]	; (800213c <MX_ADC3_Init+0xa0>)
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_ADC3_Init+0x98>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_ADC3_Init+0x98>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_ADC3_Init+0x98>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_ADC3_Init+0x98>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80020fc:	480d      	ldr	r0, [pc, #52]	; (8002134 <MX_ADC3_Init+0x98>)
 80020fe:	f003 ff1f 	bl	8005f40 <HAL_ADC_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002108:	f000 fe8e 	bl	8002e28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800210c:	230f      	movs	r3, #15
 800210e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002110:	2301      	movs	r3, #1
 8002112:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002114:	2300      	movs	r3, #0
 8002116:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_ADC3_Init+0x98>)
 800211e:	f003 ff53 	bl	8005fc8 <HAL_ADC_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002128:	f000 fe7e 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	200006a0 	.word	0x200006a0
 8002138:	40012200 	.word	0x40012200
 800213c:	0f000001 	.word	0x0f000001

08002140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <MX_I2C1_Init+0x78>)
 8002148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_I2C1_Init+0x74>)
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <MX_I2C1_Init+0x7c>)
 800214e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002158:	2201      	movs	r2, #1
 800215a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_I2C1_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_I2C1_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <MX_I2C1_Init+0x74>)
 800217c:	f005 f862 	bl	8007244 <HAL_I2C_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002186:	f000 fe4f 	bl	8002e28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218a:	2100      	movs	r1, #0
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <MX_I2C1_Init+0x74>)
 800218e:	f005 fcb3 	bl	8007af8 <HAL_I2CEx_ConfigAnalogFilter>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002198:	f000 fe46 	bl	8002e28 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800219c:	2100      	movs	r1, #0
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_I2C1_Init+0x74>)
 80021a0:	f005 fcf5 	bl	8007b8e <HAL_I2CEx_ConfigDigitalFilter>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021aa:	f000 fe3d 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200004dc 	.word	0x200004dc
 80021b8:	40005400 	.word	0x40005400
 80021bc:	20404768 	.word	0x20404768

080021c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b09a      	sub	sp, #104	; 0x68
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
 80021f0:	615a      	str	r2, [r3, #20]
 80021f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	222c      	movs	r2, #44	; 0x2c
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f009 fd8e 	bl	800bd1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002200:	4b52      	ldr	r3, [pc, #328]	; (800234c <MX_TIM1_Init+0x18c>)
 8002202:	4a53      	ldr	r2, [pc, #332]	; (8002350 <MX_TIM1_Init+0x190>)
 8002204:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 8002206:	4b51      	ldr	r3, [pc, #324]	; (800234c <MX_TIM1_Init+0x18c>)
 8002208:	22d8      	movs	r2, #216	; 0xd8
 800220a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <MX_TIM1_Init+0x18c>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <MX_TIM1_Init+0x18c>)
 8002214:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002218:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221a:	4b4c      	ldr	r3, [pc, #304]	; (800234c <MX_TIM1_Init+0x18c>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002220:	4b4a      	ldr	r3, [pc, #296]	; (800234c <MX_TIM1_Init+0x18c>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <MX_TIM1_Init+0x18c>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800222c:	4847      	ldr	r0, [pc, #284]	; (800234c <MX_TIM1_Init+0x18c>)
 800222e:	f006 fdb5 	bl	8008d9c <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002238:	f000 fdf6 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002242:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002246:	4619      	mov	r1, r3
 8002248:	4840      	ldr	r0, [pc, #256]	; (800234c <MX_TIM1_Init+0x18c>)
 800224a:	f007 fbc9 	bl	80099e0 <HAL_TIM_ConfigClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002254:	f000 fde8 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002258:	483c      	ldr	r0, [pc, #240]	; (800234c <MX_TIM1_Init+0x18c>)
 800225a:	f006 fdf6 	bl	8008e4a <HAL_TIM_PWM_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002264:	f000 fde0 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002274:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002278:	4619      	mov	r1, r3
 800227a:	4834      	ldr	r0, [pc, #208]	; (800234c <MX_TIM1_Init+0x18c>)
 800227c:	f008 fa9c 	bl	800a7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002286:	f000 fdcf 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800228a:	2360      	movs	r3, #96	; 0x60
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 800228e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002294:	2300      	movs	r3, #0
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002298:	2300      	movs	r3, #0
 800229a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ac:	2200      	movs	r2, #0
 80022ae:	4619      	mov	r1, r3
 80022b0:	4826      	ldr	r0, [pc, #152]	; (800234c <MX_TIM1_Init+0x18c>)
 80022b2:	f007 fa85 	bl	80097c0 <HAL_TIM_PWM_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80022bc:	f000 fdb4 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80022c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ca:	2204      	movs	r2, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	481f      	ldr	r0, [pc, #124]	; (800234c <MX_TIM1_Init+0x18c>)
 80022d0:	f007 fa76 	bl	80097c0 <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80022da:	f000 fda5 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022e6:	2208      	movs	r2, #8
 80022e8:	4619      	mov	r1, r3
 80022ea:	4818      	ldr	r0, [pc, #96]	; (800234c <MX_TIM1_Init+0x18c>)
 80022ec:	f007 fa68 	bl	80097c0 <HAL_TIM_PWM_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80022f6:	f000 fd97 	bl	8002e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800230e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002312:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800231c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4807      	ldr	r0, [pc, #28]	; (800234c <MX_TIM1_Init+0x18c>)
 8002330:	f008 fad0 	bl	800a8d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 800233a:	f000 fd75 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800233e:	4803      	ldr	r0, [pc, #12]	; (800234c <MX_TIM1_Init+0x18c>)
 8002340:	f002 fc74 	bl	8004c2c <HAL_TIM_MspPostInit>

}
 8002344:	bf00      	nop
 8002346:	3768      	adds	r7, #104	; 0x68
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200007d0 	.word	0x200007d0
 8002350:	40010000 	.word	0x40010000

08002354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b090      	sub	sp, #64	; 0x40
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002386:	463b      	mov	r3, r7
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <MX_TIM2_Init+0x138>)
 8002392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 8002398:	4b3c      	ldr	r3, [pc, #240]	; (800248c <MX_TIM2_Init+0x138>)
 800239a:	226c      	movs	r2, #108	; 0x6c
 800239c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b3b      	ldr	r3, [pc, #236]	; (800248c <MX_TIM2_Init+0x138>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <MX_TIM2_Init+0x138>)
 80023a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <MX_TIM2_Init+0x138>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <MX_TIM2_Init+0x138>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023b8:	4834      	ldr	r0, [pc, #208]	; (800248c <MX_TIM2_Init+0x138>)
 80023ba:	f006 fcef 	bl	8008d9c <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023c4:	f000 fd30 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d2:	4619      	mov	r1, r3
 80023d4:	482d      	ldr	r0, [pc, #180]	; (800248c <MX_TIM2_Init+0x138>)
 80023d6:	f007 fb03 	bl	80099e0 <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80023e0:	f000 fd22 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023e4:	4829      	ldr	r0, [pc, #164]	; (800248c <MX_TIM2_Init+0x138>)
 80023e6:	f006 fe8b 	bl	8009100 <HAL_TIM_IC_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80023f0:	f000 fd1a 	bl	8002e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80023f4:	2304      	movs	r3, #4
 80023f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80023f8:	2350      	movs	r3, #80	; 0x50
 80023fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023fc:	2300      	movs	r3, #0
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	481f      	ldr	r0, [pc, #124]	; (800248c <MX_TIM2_Init+0x138>)
 8002410:	f007 fbac 	bl	8009b6c <HAL_TIM_SlaveConfigSynchro>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800241a:	f000 fd05 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800241e:	2300      	movs	r3, #0
 8002420:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002422:	2301      	movs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	4815      	ldr	r0, [pc, #84]	; (800248c <MX_TIM2_Init+0x138>)
 8002438:	f007 f92d 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8002442:	f000 fcf1 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002446:	2302      	movs	r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800244a:	2302      	movs	r3, #2
 800244c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	2204      	movs	r2, #4
 8002454:	4619      	mov	r1, r3
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_TIM2_Init+0x138>)
 8002458:	f007 f91d 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8002462:	f000 fce1 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <MX_TIM2_Init+0x138>)
 8002474:	f008 f9a0 	bl	800a7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 800247e:	f000 fcd3 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3740      	adds	r7, #64	; 0x40
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000924 	.word	0x20000924

08002490 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b090      	sub	sp, #64	; 0x40
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c2:	463b      	mov	r3, r7
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024cc:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024ce:	4a3e      	ldr	r2, [pc, #248]	; (80025c8 <MX_TIM3_Init+0x138>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108;
 80024d2:	4b3c      	ldr	r3, [pc, #240]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024d4:	226c      	movs	r2, #108	; 0x6c
 80024d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e6:	4b37      	ldr	r3, [pc, #220]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024f2:	4834      	ldr	r0, [pc, #208]	; (80025c4 <MX_TIM3_Init+0x134>)
 80024f4:	f006 fc52 	bl	8008d9c <HAL_TIM_Base_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80024fe:	f000 fc93 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002508:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800250c:	4619      	mov	r1, r3
 800250e:	482d      	ldr	r0, [pc, #180]	; (80025c4 <MX_TIM3_Init+0x134>)
 8002510:	f007 fa66 	bl	80099e0 <HAL_TIM_ConfigClockSource>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800251a:	f000 fc85 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800251e:	4829      	ldr	r0, [pc, #164]	; (80025c4 <MX_TIM3_Init+0x134>)
 8002520:	f006 fdee 	bl	8009100 <HAL_TIM_IC_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800252a:	f000 fc7d 	bl	8002e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800252e:	2304      	movs	r3, #4
 8002530:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002532:	2350      	movs	r3, #80	; 0x50
 8002534:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8002542:	f107 031c 	add.w	r3, r7, #28
 8002546:	4619      	mov	r1, r3
 8002548:	481e      	ldr	r0, [pc, #120]	; (80025c4 <MX_TIM3_Init+0x134>)
 800254a:	f007 fb0f 	bl	8009b6c <HAL_TIM_SlaveConfigSynchro>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8002554:	f000 fc68 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800255c:	2301      	movs	r3, #1
 800255e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2200      	movs	r2, #0
 800256e:	4619      	mov	r1, r3
 8002570:	4814      	ldr	r0, [pc, #80]	; (80025c4 <MX_TIM3_Init+0x134>)
 8002572:	f007 f890 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800257c:	f000 fc54 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002580:	2302      	movs	r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002584:	2302      	movs	r3, #2
 8002586:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002588:	f107 030c 	add.w	r3, r7, #12
 800258c:	2204      	movs	r2, #4
 800258e:	4619      	mov	r1, r3
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <MX_TIM3_Init+0x134>)
 8002592:	f007 f880 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM3_Init+0x110>
  {
    Error_Handler();
 800259c:	f000 fc44 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025a8:	463b      	mov	r3, r7
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_TIM3_Init+0x134>)
 80025ae:	f008 f903 	bl	800a7b8 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM3_Init+0x12c>
  {
    Error_Handler();
 80025b8:	f000 fc36 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	3740      	adds	r7, #64	; 0x40
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000528 	.word	0x20000528
 80025c8:	40000400 	.word	0x40000400

080025cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b090      	sub	sp, #64	; 0x40
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fe:	463b      	mov	r3, r7
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002608:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <MX_TIM4_Init+0x134>)
 800260a:	4a3e      	ldr	r2, [pc, #248]	; (8002704 <MX_TIM4_Init+0x138>)
 800260c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 108;
 800260e:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <MX_TIM4_Init+0x134>)
 8002610:	226c      	movs	r2, #108	; 0x6c
 8002612:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b3a      	ldr	r3, [pc, #232]	; (8002700 <MX_TIM4_Init+0x134>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <MX_TIM4_Init+0x134>)
 800261c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002620:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002622:	4b37      	ldr	r3, [pc, #220]	; (8002700 <MX_TIM4_Init+0x134>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002628:	4b35      	ldr	r3, [pc, #212]	; (8002700 <MX_TIM4_Init+0x134>)
 800262a:	2200      	movs	r2, #0
 800262c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800262e:	4834      	ldr	r0, [pc, #208]	; (8002700 <MX_TIM4_Init+0x134>)
 8002630:	f006 fbb4 	bl	8008d9c <HAL_TIM_Base_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800263a:	f000 fbf5 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002648:	4619      	mov	r1, r3
 800264a:	482d      	ldr	r0, [pc, #180]	; (8002700 <MX_TIM4_Init+0x134>)
 800264c:	f007 f9c8 	bl	80099e0 <HAL_TIM_ConfigClockSource>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002656:	f000 fbe7 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800265a:	4829      	ldr	r0, [pc, #164]	; (8002700 <MX_TIM4_Init+0x134>)
 800265c:	f006 fd50 	bl	8009100 <HAL_TIM_IC_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002666:	f000 fbdf 	bl	8002e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800266a:	2304      	movs	r3, #4
 800266c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800266e:	2350      	movs	r3, #80	; 0x50
 8002670:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	481e      	ldr	r0, [pc, #120]	; (8002700 <MX_TIM4_Init+0x134>)
 8002686:	f007 fa71 	bl	8009b6c <HAL_TIM_SlaveConfigSynchro>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002690:	f000 fbca 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80026a4:	f107 030c 	add.w	r3, r7, #12
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4814      	ldr	r0, [pc, #80]	; (8002700 <MX_TIM4_Init+0x134>)
 80026ae:	f006 fff2 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 80026b8:	f000 fbb6 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80026bc:	2302      	movs	r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80026c0:	2302      	movs	r3, #2
 80026c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	2204      	movs	r2, #4
 80026ca:	4619      	mov	r1, r3
 80026cc:	480c      	ldr	r0, [pc, #48]	; (8002700 <MX_TIM4_Init+0x134>)
 80026ce:	f006 ffe2 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80026d8:	f000 fba6 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026dc:	2300      	movs	r3, #0
 80026de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026e4:	463b      	mov	r3, r7
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_TIM4_Init+0x134>)
 80026ea:	f008 f865 	bl	800a7b8 <HAL_TIMEx_MasterConfigSynchronization>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 80026f4:	f000 fb98 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	3740      	adds	r7, #64	; 0x40
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200003c4 	.word	0x200003c4
 8002704:	40000800 	.word	0x40000800

08002708 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270e:	f107 0310 	add.w	r3, r7, #16
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	605a      	str	r2, [r3, #4]
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002728:	4a20      	ldr	r2, [pc, #128]	; (80027ac <MX_TIM8_Init+0xa4>)
 800272a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_TIM8_Init+0xa0>)
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_TIM8_Init+0xa0>)
 800273a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800273e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002748:	2200      	movs	r2, #0
 800274a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_TIM8_Init+0xa0>)
 800274e:	2200      	movs	r2, #0
 8002750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002752:	4815      	ldr	r0, [pc, #84]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002754:	f006 fb22 	bl	8008d9c <HAL_TIM_Base_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800275e:	f000 fb63 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002768:	f107 0310 	add.w	r3, r7, #16
 800276c:	4619      	mov	r1, r3
 800276e:	480e      	ldr	r0, [pc, #56]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002770:	f007 f936 	bl	80099e0 <HAL_TIM_ConfigClockSource>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800277a:	f000 fb55 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <MX_TIM8_Init+0xa0>)
 8002790:	f008 f812 	bl	800a7b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800279a:	f000 fb45 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000378 	.word	0x20000378
 80027ac:	40010400 	.word	0x40010400

080027b0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027e0:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <MX_TIM12_Init+0x108>)
 80027e2:	4a36      	ldr	r2, [pc, #216]	; (80028bc <MX_TIM12_Init+0x10c>)
 80027e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 108;
 80027e6:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <MX_TIM12_Init+0x108>)
 80027e8:	226c      	movs	r2, #108	; 0x6c
 80027ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <MX_TIM12_Init+0x108>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <MX_TIM12_Init+0x108>)
 80027f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fa:	4b2f      	ldr	r3, [pc, #188]	; (80028b8 <MX_TIM12_Init+0x108>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002800:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <MX_TIM12_Init+0x108>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002806:	482c      	ldr	r0, [pc, #176]	; (80028b8 <MX_TIM12_Init+0x108>)
 8002808:	f006 fac8 	bl	8008d9c <HAL_TIM_Base_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM12_Init+0x66>
  {
    Error_Handler();
 8002812:	f000 fb09 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800281c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002820:	4619      	mov	r1, r3
 8002822:	4825      	ldr	r0, [pc, #148]	; (80028b8 <MX_TIM12_Init+0x108>)
 8002824:	f007 f8dc 	bl	80099e0 <HAL_TIM_ConfigClockSource>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 800282e:	f000 fafb 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 8002832:	4821      	ldr	r0, [pc, #132]	; (80028b8 <MX_TIM12_Init+0x108>)
 8002834:	f006 fc64 	bl	8009100 <HAL_TIM_IC_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_TIM12_Init+0x92>
  {
    Error_Handler();
 800283e:	f000 faf3 	bl	8002e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002842:	2304      	movs	r3, #4
 8002844:	617b      	str	r3, [r7, #20]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002846:	2350      	movs	r3, #80	; 0x50
 8002848:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerFilter = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	4619      	mov	r1, r3
 800285c:	4816      	ldr	r0, [pc, #88]	; (80028b8 <MX_TIM12_Init+0x108>)
 800285e:	f007 f985 	bl	8009b6c <HAL_TIM_SlaveConfigSynchro>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM12_Init+0xbc>
  {
    Error_Handler();
 8002868:	f000 fade 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800286c:	2300      	movs	r3, #0
 800286e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002870:	2301      	movs	r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800287c:	1d3b      	adds	r3, r7, #4
 800287e:	2200      	movs	r2, #0
 8002880:	4619      	mov	r1, r3
 8002882:	480d      	ldr	r0, [pc, #52]	; (80028b8 <MX_TIM12_Init+0x108>)
 8002884:	f006 ff07 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM12_Init+0xe2>
  {
    Error_Handler();
 800288e:	f000 facb 	bl	8002e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002892:	2302      	movs	r3, #2
 8002894:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002896:	2302      	movs	r3, #2
 8002898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2204      	movs	r2, #4
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_TIM12_Init+0x108>)
 80028a2:	f006 fef8 	bl	8009696 <HAL_TIM_IC_ConfigChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM12_Init+0x100>
  {
    Error_Handler();
 80028ac:	f000 fabc 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000a54 	.word	0x20000a54
 80028bc:	40001800 	.word	0x40001800

080028c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <MX_UART4_Init+0x58>)
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <MX_UART4_Init+0x5c>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <MX_UART4_Init+0x58>)
 80028cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_UART4_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <MX_UART4_Init+0x58>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <MX_UART4_Init+0x58>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <MX_UART4_Init+0x58>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <MX_UART4_Init+0x58>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b09      	ldr	r3, [pc, #36]	; (8002918 <MX_UART4_Init+0x58>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <MX_UART4_Init+0x58>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_UART4_Init+0x58>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_UART4_Init+0x58>)
 8002904:	f008 f882 	bl	800aa0c <HAL_UART_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800290e:	f000 fa8b 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200008a0 	.word	0x200008a0
 800291c:	40004c00 	.word	0x40004c00

08002920 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <MX_UART5_Init+0x60>)
 8002926:	4a17      	ldr	r2, [pc, #92]	; (8002984 <MX_UART5_Init+0x64>)
 8002928:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <MX_UART5_Init+0x60>)
 800292c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002930:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <MX_UART5_Init+0x60>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <MX_UART5_Init+0x60>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <MX_UART5_Init+0x60>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002944:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <MX_UART5_Init+0x60>)
 8002946:	220c      	movs	r2, #12
 8002948:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <MX_UART5_Init+0x60>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <MX_UART5_Init+0x60>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <MX_UART5_Init+0x60>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800295c:	4b08      	ldr	r3, [pc, #32]	; (8002980 <MX_UART5_Init+0x60>)
 800295e:	2210      	movs	r2, #16
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <MX_UART5_Init+0x60>)
 8002964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002968:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800296a:	4805      	ldr	r0, [pc, #20]	; (8002980 <MX_UART5_Init+0x60>)
 800296c:	f008 f84e 	bl	800aa0c <HAL_UART_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 8002976:	f000 fa57 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000574 	.word	0x20000574
 8002984:	40005000 	.word	0x40005000

08002988 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800298c:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_UART7_Init+0x58>)
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <MX_UART7_Init+0x5c>)
 8002990:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <MX_UART7_Init+0x58>)
 8002994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002998:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_UART7_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80029a0:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_UART7_Init+0x58>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	; (80029e0 <MX_UART7_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <MX_UART7_Init+0x58>)
 80029ae:	220c      	movs	r2, #12
 80029b0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <MX_UART7_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <MX_UART7_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029be:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <MX_UART7_Init+0x58>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <MX_UART7_Init+0x58>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_UART7_Init+0x58>)
 80029cc:	f008 f81e 	bl	800aa0c <HAL_UART_Init>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80029d6:	f000 fa27 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200002f4 	.word	0x200002f4
 80029e4:	40007800 	.word	0x40007800

080029e8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80029ec:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_UART8_Init+0x58>)
 80029ee:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <MX_UART8_Init+0x5c>)
 80029f0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80029f2:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <MX_UART8_Init+0x58>)
 80029f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029f8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_UART8_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a0e:	220c      	movs	r2, #12
 8002a10:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a24:	4b06      	ldr	r3, [pc, #24]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <MX_UART8_Init+0x58>)
 8002a2c:	f007 ffee 	bl	800aa0c <HAL_UART_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8002a36:	f000 f9f7 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000081c 	.word	0x2000081c
 8002a44:	40007c00 	.word	0x40007c00

08002a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <MX_USART1_UART_Init+0x5c>)
 8002a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a6e:	220c      	movs	r2, #12
 8002a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a8a:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_USART1_UART_Init+0x58>)
 8002a8c:	f007 ffbe 	bl	800aa0c <HAL_UART_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a96:	f000 f9c7 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000748 	.word	0x20000748
 8002aa4:	40011000 	.word	0x40011000

08002aa8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002aae:	4a15      	ldr	r2, [pc, #84]	; (8002b04 <MX_USART2_UART_Init+0x5c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <MX_USART2_UART_Init+0x58>)
 8002aec:	f007 ff8e 	bl	800aa0c <HAL_UART_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002af6:	f000 f997 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000970 	.word	0x20000970
 8002b04:	40004400 	.word	0x40004400

08002b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <MX_USART3_UART_Init+0x5c>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_USART3_UART_Init+0x58>)
 8002b4c:	f007 ff5e 	bl	800aa0c <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b56:	f000 f967 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000410 	.word	0x20000410
 8002b64:	40004800 	.word	0x40004800

08002b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <MX_DMA_Init+0x68>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <MX_DMA_Init+0x68>)
 8002b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <MX_DMA_Init+0x68>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	200b      	movs	r0, #11
 8002b8c:	f003 fd3b 	bl	8006606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b90:	200b      	movs	r0, #11
 8002b92:	f003 fd54 	bl	800663e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	200d      	movs	r0, #13
 8002b9c:	f003 fd33 	bl	8006606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ba0:	200d      	movs	r0, #13
 8002ba2:	f003 fd4c 	bl	800663e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	200e      	movs	r0, #14
 8002bac:	f003 fd2b 	bl	8006606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002bb0:	200e      	movs	r0, #14
 8002bb2:	f003 fd44 	bl	800663e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2011      	movs	r0, #17
 8002bbc:	f003 fd23 	bl	8006606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002bc0:	2011      	movs	r0, #17
 8002bc2:	f003 fd3c 	bl	800663e <HAL_NVIC_EnableIRQ>

}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bea:	4b87      	ldr	r3, [pc, #540]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a86      	ldr	r2, [pc, #536]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002bf0:	f043 0320 	orr.w	r3, r3, #32
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b84      	ldr	r3, [pc, #528]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c02:	4b81      	ldr	r3, [pc, #516]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a80      	ldr	r2, [pc, #512]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b7e      	ldr	r3, [pc, #504]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	4b7b      	ldr	r3, [pc, #492]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a7a      	ldr	r2, [pc, #488]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a74      	ldr	r2, [pc, #464]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b72      	ldr	r3, [pc, #456]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c62:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a68      	ldr	r2, [pc, #416]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c68:	f043 0310 	orr.w	r3, r3, #16
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b66      	ldr	r3, [pc, #408]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a62      	ldr	r2, [pc, #392]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b60      	ldr	r3, [pc, #384]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c92:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a5c      	ldr	r2, [pc, #368]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b5a      	ldr	r3, [pc, #360]	; (8002e08 <MX_GPIO_Init+0x234>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin, GPIO_PIN_RESET);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2103      	movs	r1, #3
 8002cae:	4857      	ldr	r0, [pc, #348]	; (8002e0c <MX_GPIO_Init+0x238>)
 8002cb0:	f004 faae 	bl	8007210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin, GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f243 0124 	movw	r1, #12324	; 0x3024
 8002cba:	4855      	ldr	r0, [pc, #340]	; (8002e10 <MX_GPIO_Init+0x23c>)
 8002cbc:	f004 faa8 	bl	8007210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cc6:	4853      	ldr	r0, [pc, #332]	; (8002e14 <MX_GPIO_Init+0x240>)
 8002cc8:	f004 faa2 	bl	8007210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Spare7_Pin|led3_Pin|led2_Pin, GPIO_PIN_RESET);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f248 01c0 	movw	r1, #32960	; 0x80c0
 8002cd2:	4851      	ldr	r0, [pc, #324]	; (8002e18 <MX_GPIO_Init+0x244>)
 8002cd4:	f004 fa9c 	bl	8007210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8002cde:	484f      	ldr	r0, [pc, #316]	; (8002e1c <MX_GPIO_Init+0x248>)
 8002ce0:	f004 fa96 	bl	8007210 <HAL_GPIO_WritePin>
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cea:	484d      	ldr	r0, [pc, #308]	; (8002e20 <MX_GPIO_Init+0x24c>)
 8002cec:	f004 fa90 	bl	8007210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cf6:	484b      	ldr	r0, [pc, #300]	; (8002e24 <MX_GPIO_Init+0x250>)
 8002cf8:	f004 fa8a 	bl	8007210 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : qtr_ctrl_odd_Pin qtr_ctrl_even_Pin */
  GPIO_InitStruct.Pin = qtr_ctrl_odd_Pin|qtr_ctrl_even_Pin;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d00:	2301      	movs	r3, #1
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d10:	4619      	mov	r1, r3
 8002d12:	483e      	ldr	r0, [pc, #248]	; (8002e0c <MX_GPIO_Init+0x238>)
 8002d14:	f004 f8b8 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : lid1_pwr_en_Pin lid2_pwr_en_Pin lid3_pwr_en_Pin cmdLeds_Pin */
  GPIO_InitStruct.Pin = lid1_pwr_en_Pin|lid2_pwr_en_Pin|lid3_pwr_en_Pin|cmdLeds_Pin;
 8002d18:	f243 0324 	movw	r3, #12324	; 0x3024
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d26:	2300      	movs	r3, #0
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4837      	ldr	r0, [pc, #220]	; (8002e10 <MX_GPIO_Init+0x23c>)
 8002d32:	f004 f8a9 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid6_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid6_pwr_en_Pin;
 8002d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid6_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4831      	ldr	r0, [pc, #196]	; (8002e14 <MX_GPIO_Init+0x240>)
 8002d50:	f004 f89a 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare7_Pin led3_Pin led2_Pin */
  GPIO_InitStruct.Pin = Spare7_Pin|led3_Pin|led2_Pin;
 8002d54:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d62:	2300      	movs	r3, #0
 8002d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	482a      	ldr	r0, [pc, #168]	; (8002e18 <MX_GPIO_Init+0x244>)
 8002d6e:	f004 f88b 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Spare6_Pin Spare5_Pin Spare4_Pin Spare3_Pin
                           Spare2_Pin Spare1_Pin Spare0_Pin led1_Pin */
  GPIO_InitStruct.Pin = Spare6_Pin|Spare5_Pin|Spare4_Pin|Spare3_Pin
 8002d72:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
                          |Spare2_Pin|Spare1_Pin|Spare0_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d80:	2300      	movs	r3, #0
 8002d82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4824      	ldr	r0, [pc, #144]	; (8002e1c <MX_GPIO_Init+0x248>)
 8002d8c:	f004 f87c 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid4_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid4_pwr_en_Pin;
 8002d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid4_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da6:	4619      	mov	r1, r3
 8002da8:	481d      	ldr	r0, [pc, #116]	; (8002e20 <MX_GPIO_Init+0x24c>)
 8002daa:	f004 f86d 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : lid5_pwr_en_Pin */
  GPIO_InitStruct.Pin = lid5_pwr_en_Pin;
 8002dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002db4:	2301      	movs	r3, #1
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(lid5_pwr_en_GPIO_Port, &GPIO_InitStruct);
 8002dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4817      	ldr	r0, [pc, #92]	; (8002e24 <MX_GPIO_Init+0x250>)
 8002dc8:	f004 f85e 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : boutonExt1_Pin boutonExt2_Pin */
  GPIO_InitStruct.Pin = boutonExt1_Pin|boutonExt2_Pin;
 8002dcc:	2330      	movs	r3, #48	; 0x30
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ddc:	4619      	mov	r1, r3
 8002dde:	480e      	ldr	r0, [pc, #56]	; (8002e18 <MX_GPIO_Init+0x244>)
 8002de0:	f004 f852 	bl	8006e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : bouton3_Pin bouton2_Pin bouton1_Pin */
  GPIO_InitStruct.Pin = bouton3_Pin|bouton2_Pin|bouton1_Pin;
 8002de4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002df6:	4619      	mov	r1, r3
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <MX_GPIO_Init+0x248>)
 8002dfa:	f004 f845 	bl	8006e88 <HAL_GPIO_Init>

}
 8002dfe:	bf00      	nop
 8002e00:	3738      	adds	r7, #56	; 0x38
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40021c00 	.word	0x40021c00
 8002e10:	40020400 	.word	0x40020400
 8002e14:	40021400 	.word	0x40021400
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	40021800 	.word	0x40021800
 8002e20:	40020000 	.word	0x40020000
 8002e24:	40020800 	.word	0x40020800

08002e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2c:	b672      	cpsid	i
}
 8002e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e30:	e7fe      	b.n	8002e30 <Error_Handler+0x8>
	...

08002e34 <paramConf_restaure>:
#include "parametres_configuration.h"

st_param_conf gParametresConfiguration;

void paramConf_restaure()
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
	// Relecture dans la flash
	gParametresConfiguration.acceleration_max = 12.0; // mesuré le 24 Jan 2022 : 24.34 m/s²
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <paramConf_restaure+0x58>)
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <paramConf_restaure+0x5c>)
 8002e3c:	601a      	str	r2, [r3, #0]
	gParametresConfiguration.deceleration_max = 12.0;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <paramConf_restaure+0x58>)
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <paramConf_restaure+0x5c>)
 8002e42:	605a      	str	r2, [r3, #4]
	gParametresConfiguration.vitesse_max_ligne_droite = 5.0;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <paramConf_restaure+0x58>)
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <paramConf_restaure+0x60>)
 8002e48:	609a      	str	r2, [r3, #8]
	gParametresConfiguration.vitesse_max_virage = 3.0;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <paramConf_restaure+0x58>)
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <paramConf_restaure+0x64>)
 8002e4e:	60da      	str	r2, [r3, #12]
	gParametresConfiguration.vitesse_max_decouverte = 5.0;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <paramConf_restaure+0x58>)
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <paramConf_restaure+0x60>)
 8002e54:	611a      	str	r2, [r3, #16]
	gParametresConfiguration.pid_vitesse_kp = 1.0;
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <paramConf_restaure+0x58>)
 8002e58:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e5c:	615a      	str	r2, [r3, #20]
	gParametresConfiguration.pid_vitesse_ki = 0.0;
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <paramConf_restaure+0x58>)
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	619a      	str	r2, [r3, #24]
	gParametresConfiguration.pid_vitesse_kd = 5.0;
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <paramConf_restaure+0x58>)
 8002e68:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <paramConf_restaure+0x60>)
 8002e6a:	61da      	str	r2, [r3, #28]
	gParametresConfiguration.pid_direction_kp = 0.5;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <paramConf_restaure+0x58>)
 8002e6e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002e72:	621a      	str	r2, [r3, #32]
	gParametresConfiguration.pid_direction_ki = 0.0;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <paramConf_restaure+0x58>)
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
	gParametresConfiguration.pid_direction_kd = 10.0;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	; (8002e8c <paramConf_restaure+0x58>)
 8002e7e:	4a07      	ldr	r2, [pc, #28]	; (8002e9c <paramConf_restaure+0x68>)
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28

}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	20000aa0 	.word	0x20000aa0
 8002e90:	41400000 	.word	0x41400000
 8002e94:	40a00000 	.word	0x40a00000
 8002e98:	40400000 	.word	0x40400000
 8002e9c:	41200000 	.word	0x41200000

08002ea0 <paramConf_sauvegarde>:

void paramConf_sauvegarde()
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	// Ecritude dans la flash
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <paramConf_lecture>:

void paramConf_lecture()
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0a2      	sub	sp, #136	; 0x88
 8002eb6:	af14      	add	r7, sp, #80	; 0x50
	// Affichage des parametres courants
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
			gParametresConfiguration.acceleration_max,
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fd fb73 	bl	80005a8 <__aeabi_f2d>
 8002ec2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			gParametresConfiguration.deceleration_max,
 8002ec6:	4b38      	ldr	r3, [pc, #224]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb6c 	bl	80005a8 <__aeabi_f2d>
 8002ed0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			gParametresConfiguration.vitesse_max_ligne_droite,
 8002ed4:	4b34      	ldr	r3, [pc, #208]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb65 	bl	80005a8 <__aeabi_f2d>
 8002ede:	e9c7 0108 	strd	r0, r1, [r7, #32]
			gParametresConfiguration.vitesse_max_virage,
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb5e 	bl	80005a8 <__aeabi_f2d>
 8002eec:	e9c7 0106 	strd	r0, r1, [r7, #24]
			gParametresConfiguration.vitesse_max_decouverte,
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb57 	bl	80005a8 <__aeabi_f2d>
 8002efa:	e9c7 0104 	strd	r0, r1, [r7, #16]
			gParametresConfiguration.pid_vitesse_kp,
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002f00:	695b      	ldr	r3, [r3, #20]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb50 	bl	80005a8 <__aeabi_f2d>
 8002f08:	e9c7 0102 	strd	r0, r1, [r7, #8]
			gParametresConfiguration.pid_vitesse_ki,
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fb49 	bl	80005a8 <__aeabi_f2d>
 8002f16:	e9c7 0100 	strd	r0, r1, [r7]
			gParametresConfiguration.pid_vitesse_kd,
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fb42 	bl	80005a8 <__aeabi_f2d>
 8002f24:	4682      	mov	sl, r0
 8002f26:	468b      	mov	fp, r1
			gParametresConfiguration.pid_direction_kp,
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb3b 	bl	80005a8 <__aeabi_f2d>
 8002f32:	4680      	mov	r8, r0
 8002f34:	4689      	mov	r9, r1
			gParametresConfiguration.pid_direction_ki,
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fb34 	bl	80005a8 <__aeabi_f2d>
 8002f40:	4604      	mov	r4, r0
 8002f42:	460d      	mov	r5, r1
			gParametresConfiguration.pid_direction_kd );
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <paramConf_lecture+0xf8>)
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	printf("%f %f %f %f %f %f %f %f %f %f %f\r\n",
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fb2d 	bl	80005a8 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8002f56:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002f5a:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8002f5e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8002f62:	ed97 7b00 	vldr	d7, [r7]
 8002f66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002f6a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002f6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002f72:	ed97 7b04 	vldr	d7, [r7, #16]
 8002f76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002f7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f7e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002f82:	ed97 7b08 	vldr	d7, [r7, #32]
 8002f86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002f8a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002f8e:	ed8d 7b00 	vstr	d7, [sp]
 8002f92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f96:	4805      	ldr	r0, [pc, #20]	; (8002fac <paramConf_lecture+0xfc>)
 8002f98:	f009 fb32 	bl	800c600 <iprintf>
}
 8002f9c:	bf00      	nop
 8002f9e:	3738      	adds	r7, #56	; 0x38
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000aa0 	.word	0x20000aa0
 8002fac:	08011308 	.word	0x08011308

08002fb0 <paramConf_modification>:

void paramConf_modification(float a_acceleration_max, float a_deceleration_max,
		float a_vitesse_max_ligne_droite, float a_vitesse_max_virage, float a_vitesse_max_decouverte,
		float a_pid_vitesse_kp, float a_pid_vitesse_ki, float a_pid_vitesse_kd,
		float a_pid_direction_kp, float a_pid_direction_ki, float a_pid_direction_kd)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b08d      	sub	sp, #52	; 0x34
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8002fba:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 8002fbe:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 8002fc2:	edc7 1a08 	vstr	s3, [r7, #32]
 8002fc6:	ed87 2a07 	vstr	s4, [r7, #28]
 8002fca:	edc7 2a06 	vstr	s5, [r7, #24]
 8002fce:	ed87 3a05 	vstr	s6, [r7, #20]
 8002fd2:	edc7 3a04 	vstr	s7, [r7, #16]
 8002fd6:	ed87 4a03 	vstr	s8, [r7, #12]
 8002fda:	edc7 4a02 	vstr	s9, [r7, #8]
 8002fde:	ed87 5a01 	vstr	s10, [r7, #4]
	// Modification des parametres courants
	gParametresConfiguration.acceleration_max = a_acceleration_max;
 8002fe2:	4a13      	ldr	r2, [pc, #76]	; (8003030 <paramConf_modification+0x80>)
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	6013      	str	r3, [r2, #0]
	gParametresConfiguration.deceleration_max = a_deceleration_max;
 8002fe8:	4a11      	ldr	r2, [pc, #68]	; (8003030 <paramConf_modification+0x80>)
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	6053      	str	r3, [r2, #4]
	gParametresConfiguration.vitesse_max_ligne_droite = a_vitesse_max_ligne_droite;
 8002fee:	4a10      	ldr	r2, [pc, #64]	; (8003030 <paramConf_modification+0x80>)
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	6093      	str	r3, [r2, #8]
	gParametresConfiguration.vitesse_max_virage = a_vitesse_max_virage;
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <paramConf_modification+0x80>)
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	60d3      	str	r3, [r2, #12]
	gParametresConfiguration.vitesse_max_decouverte = a_vitesse_max_decouverte;
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <paramConf_modification+0x80>)
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	6113      	str	r3, [r2, #16]
	gParametresConfiguration.pid_vitesse_kp = a_pid_vitesse_kp;
 8003000:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <paramConf_modification+0x80>)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	6153      	str	r3, [r2, #20]
	gParametresConfiguration.pid_vitesse_ki = a_pid_vitesse_ki;
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <paramConf_modification+0x80>)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	6193      	str	r3, [r2, #24]
	gParametresConfiguration.pid_vitesse_kd = a_pid_vitesse_kd;
 800300c:	4a08      	ldr	r2, [pc, #32]	; (8003030 <paramConf_modification+0x80>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	61d3      	str	r3, [r2, #28]
	gParametresConfiguration.pid_direction_kp = a_pid_direction_kp;
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <paramConf_modification+0x80>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6213      	str	r3, [r2, #32]
	gParametresConfiguration.pid_direction_ki = a_pid_direction_ki;
 8003018:	4a05      	ldr	r2, [pc, #20]	; (8003030 <paramConf_modification+0x80>)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	6253      	str	r3, [r2, #36]	; 0x24
	gParametresConfiguration.pid_direction_kd = a_pid_direction_kd;
 800301e:	4a04      	ldr	r2, [pc, #16]	; (8003030 <paramConf_modification+0x80>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6293      	str	r3, [r2, #40]	; 0x28

}
 8003024:	bf00      	nop
 8003026:	3734      	adds	r7, #52	; 0x34
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	20000aa0 	.word	0x20000aa0

08003034 <pid_init>:
 */

#include "pid.h"

void pid_init(pid_context_t *ctx, float Kp, float Ki, float Kd, float alpha)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6178      	str	r0, [r7, #20]
 800303c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003040:	edc7 0a03 	vstr	s1, [r7, #12]
 8003044:	ed87 1a02 	vstr	s2, [r7, #8]
 8003048:	edc7 1a01 	vstr	s3, [r7, #4]
	ctx->Kp = Kp;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	601a      	str	r2, [r3, #0]
	ctx->Ki = Ki;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	605a      	str	r2, [r3, #4]
	ctx->Kd = Kd;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	609a      	str	r2, [r3, #8]
	ctx->alpha = alpha;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]

	ctx->err_filtered = 0;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
	ctx->err_previous = 0;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	615a      	str	r2, [r3, #20]
	ctx->err_sum = 0;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	371c      	adds	r7, #28
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <pid_output>:
	ctx->err_previous = 0;
	ctx->err_sum = 0;
}

float pid_output(pid_context_t *ctx, float error)
{
 8003088:	b5b0      	push	{r4, r5, r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	ed87 0a00 	vstr	s0, [r7]
	ctx->err_filtered = (1.0-ctx->alpha)*ctx->err_filtered + ctx->alpha*error;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa85 	bl	80005a8 <__aeabi_f2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	4938      	ldr	r1, [pc, #224]	; (8003188 <pid_output+0x100>)
 80030a8:	f7fd f91e 	bl	80002e8 <__aeabi_dsub>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4614      	mov	r4, r2
 80030b2:	461d      	mov	r5, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fa75 	bl	80005a8 <__aeabi_f2d>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4620      	mov	r0, r4
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd fac7 	bl	8000658 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	461d      	mov	r5, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030d8:	edd7 7a00 	vldr	s15, [r7]
 80030dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e0:	ee17 0a90 	vmov	r0, s15
 80030e4:	f7fd fa60 	bl	80005a8 <__aeabi_f2d>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd f8fc 	bl	80002ec <__adddf3>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fd fda4 	bl	8000c48 <__aeabi_d2f>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	611a      	str	r2, [r3, #16]

	float p_term = ctx->err_filtered*ctx->Kp;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	ed93 7a04 	vldr	s14, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	edd3 7a00 	vldr	s15, [r3]
 8003112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003116:	edc7 7a05 	vstr	s15, [r7, #20]
	ctx->err_sum += error;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003120:	edd7 7a00 	vldr	s15, [r7]
 8003124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	edc3 7a06 	vstr	s15, [r3, #24]
	float i_term = ctx->err_sum*ctx->Ki;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	ed93 7a06 	vldr	s14, [r3, #24]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	edd3 7a01 	vldr	s15, [r3, #4]
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a04 	vstr	s15, [r7, #16]
	float d_term = (ctx->err_filtered - ctx->err_previous)*ctx->Kd;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	ed93 7a04 	vldr	s14, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	edd3 7a05 	vldr	s15, [r3, #20]
 800314e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	edd3 7a02 	vldr	s15, [r3, #8]
 8003158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315c:	edc7 7a03 	vstr	s15, [r7, #12]
	ctx->err_previous = ctx->err_filtered;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	615a      	str	r2, [r3, #20]

	return p_term + i_term + d_term;
 8003168:	ed97 7a05 	vldr	s14, [r7, #20]
 800316c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003174:	edd7 7a03 	vldr	s15, [r7, #12]
 8003178:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800317c:	eeb0 0a67 	vmov.f32	s0, s15
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bdb0      	pop	{r4, r5, r7, pc}
 8003186:	bf00      	nop
 8003188:	3ff00000 	.word	0x3ff00000

0800318c <HAL_TIM_IC_CaptureCallback>:
static float wheel_perimeter = 0.204;
// Speed
static int32_t vitesse_mesuree = -1;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) // Callback for PWM input catpure
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	if(htim==&htim3) // DIR from RX
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a2d      	ldr	r2, [pc, #180]	; (800324c <HAL_TIM_IC_CaptureCallback+0xc0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d11c      	bne.n	80031d6 <HAL_TIM_IC_CaptureCallback+0x4a>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7f1b      	ldrb	r3, [r3, #28]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10c      	bne.n	80031be <HAL_TIM_IC_CaptureCallback+0x32>
		{
			radio_dir.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80031a4:	2100      	movs	r1, #0
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f006 fd22 	bl	8009bf0 <HAL_TIM_ReadCapturedValue>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4a28      	ldr	r2, [pc, #160]	; (8003250 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80031b0:	6053      	str	r3, [r2, #4]
			radio_dir.last_time = HAL_GetTick(); // timestamp last pulse
 80031b2:	f002 fe95 	bl	8005ee0 <HAL_GetTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	4a25      	ldr	r2, [pc, #148]	; (8003250 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80031ba:	6013      	str	r3, [r2, #0]
//		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
//		{
//			vehicule_speedsensor.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
//		}
//	}
}
 80031bc:	e041      	b.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	7f1b      	ldrb	r3, [r3, #28]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d13d      	bne.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
			radio_dir.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80031c6:	2104      	movs	r1, #4
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f006 fd11 	bl	8009bf0 <HAL_TIM_ReadCapturedValue>
 80031ce:	4603      	mov	r3, r0
 80031d0:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80031d2:	6093      	str	r3, [r2, #8]
}
 80031d4:	e035      	b.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
	else if(htim==&htim2) // THR from RX
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d11c      	bne.n	8003218 <HAL_TIM_IC_CaptureCallback+0x8c>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7f1b      	ldrb	r3, [r3, #28]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10c      	bne.n	8003200 <HAL_TIM_IC_CaptureCallback+0x74>
			radio_throttle.period = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80031e6:	2100      	movs	r1, #0
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f006 fd01 	bl	8009bf0 <HAL_TIM_ReadCapturedValue>
 80031ee:	4603      	mov	r3, r0
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80031f2:	6053      	str	r3, [r2, #4]
			radio_throttle.last_time = HAL_GetTick(); // timestamp last pulse
 80031f4:	f002 fe74 	bl	8005ee0 <HAL_GetTick>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80031fc:	6013      	str	r3, [r2, #0]
}
 80031fe:	e020      	b.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	7f1b      	ldrb	r3, [r3, #28]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d11c      	bne.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
			radio_throttle.duty_cycle = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003208:	2104      	movs	r1, #4
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f006 fcf0 	bl	8009bf0 <HAL_TIM_ReadCapturedValue>
 8003210:	4603      	mov	r3, r0
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8003214:	6093      	str	r3, [r2, #8]
}
 8003216:	e014      	b.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
	else if(htim==&htim4) // Spare - SpeedSensorAimant from vehicule
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIM_IC_CaptureCallback+0xd0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d110      	bne.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7f1b      	ldrb	r3, [r3, #28]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <HAL_TIM_IC_CaptureCallback+0xb6>
			nb_impulsions_aimants++;
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	4a0c      	ldr	r2, [pc, #48]	; (8003260 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8003230:	6013      	str	r3, [r2, #0]
			vitesse_mesuree = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8003232:	2100      	movs	r1, #0
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f006 fcdb 	bl	8009bf0 <HAL_TIM_ReadCapturedValue>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8003240:	601a      	str	r2, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000528 	.word	0x20000528
 8003250:	20000238 	.word	0x20000238
 8003254:	20000924 	.word	0x20000924
 8003258:	20000248 	.word	0x20000248
 800325c:	200003c4 	.word	0x200003c4
 8003260:	20000278 	.word	0x20000278
 8003264:	20000018 	.word	0x20000018

08003268 <radio_dir_get>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int radio_dir_get(float *a_pDir)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if( (HAL_GetTick() - radio_dir.last_time) > 1000)
 8003270:	f002 fe36 	bl	8005ee0 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <radio_dir_get+0xa8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003280:	d906      	bls.n	8003290 <radio_dir_get+0x28>
	{
		*a_pDir = 0.0;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
		return -1;
 800328a:	f04f 33ff 	mov.w	r3, #4294967295
 800328e:	e03b      	b.n	8003308 <radio_dir_get+0xa0>
	}
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		if(radio_dir.duty_cycle<1000) radio_dir.duty_cycle = 1000;
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <radio_dir_get+0xa8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003298:	d203      	bcs.n	80032a2 <radio_dir_get+0x3a>
 800329a:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <radio_dir_get+0xa8>)
 800329c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a0:	609a      	str	r2, [r3, #8]
		if(radio_dir.duty_cycle>2000) radio_dir.duty_cycle = 2000;
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <radio_dir_get+0xa8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80032aa:	d903      	bls.n	80032b4 <radio_dir_get+0x4c>
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <radio_dir_get+0xa8>)
 80032ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80032b2:	609a      	str	r2, [r3, #8]

		*a_pDir = ((float)(radio_dir.duty_cycle) - (float)(radio_dir.duty_cycle_default))*VEHICULE_DIR_MAX/500.0;
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <radio_dir_get+0xa8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <radio_dir_get+0xa8>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	ee07 3a90 	vmov	s15, r3
 80032c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d0:	ee17 0a90 	vmov	r0, s15
 80032d4:	f7fd f968 	bl	80005a8 <__aeabi_f2d>
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <radio_dir_get+0xac>)
 80032de:	f7fd f9bb 	bl	8000658 <__aeabi_dmul>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <radio_dir_get+0xb0>)
 80032f0:	f7fd fadc 	bl	80008ac <__aeabi_ddiv>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	f7fd fca4 	bl	8000c48 <__aeabi_d2f>
 8003300:	4602      	mov	r2, r0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	601a      	str	r2, [r3, #0]
	}
	return 0;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000238 	.word	0x20000238
 8003314:	403a0000 	.word	0x403a0000
 8003318:	407f4000 	.word	0x407f4000

0800331c <radio_throttle_get>:

// Par convention, la vitesse est négative quand on recule.
int radio_throttle_get(float *a_pThrottle)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - radio_throttle.last_time) > 1000)
 8003324:	f002 fddc 	bl	8005ee0 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <radio_throttle_get+0xa8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003334:	d906      	bls.n	8003344 <radio_throttle_get+0x28>
	{
		*a_pThrottle = 0.0;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
		return -1;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	e03b      	b.n	80033bc <radio_throttle_get+0xa0>
	}
	else
	{
		if(radio_throttle.duty_cycle<1000) radio_throttle.duty_cycle = 1000;
 8003344:	4b1f      	ldr	r3, [pc, #124]	; (80033c4 <radio_throttle_get+0xa8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334c:	d203      	bcs.n	8003356 <radio_throttle_get+0x3a>
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <radio_throttle_get+0xa8>)
 8003350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003354:	609a      	str	r2, [r3, #8]
		if(radio_throttle.duty_cycle>2000) radio_throttle.duty_cycle = 2000;
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <radio_throttle_get+0xa8>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800335e:	d903      	bls.n	8003368 <radio_throttle_get+0x4c>
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <radio_throttle_get+0xa8>)
 8003362:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003366:	609a      	str	r2, [r3, #8]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		*a_pThrottle = ((float)(radio_throttle.duty_cycle) - (float)(radio_throttle.duty_cycle_default))*VEHICULE_SPEED_MAX/500.0;
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <radio_throttle_get+0xa8>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	ee07 3a90 	vmov	s15, r3
 8003370:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <radio_throttle_get+0xa8>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	ee17 0a90 	vmov	r0, s15
 8003388:	f7fd f90e 	bl	80005a8 <__aeabi_f2d>
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	4b0d      	ldr	r3, [pc, #52]	; (80033c8 <radio_throttle_get+0xac>)
 8003392:	f7fd f961 	bl	8000658 <__aeabi_dmul>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <radio_throttle_get+0xb0>)
 80033a4:	f7fd fa82 	bl	80008ac <__aeabi_ddiv>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fd fc4a 	bl	8000c48 <__aeabi_d2f>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000248 	.word	0x20000248
 80033c8:	40310000 	.word	0x40310000
 80033cc:	407f4000 	.word	0x407f4000

080033d0 <radio_isThereCommand>:

int radio_isThereCommand()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
	int retour;
	float direction, throttle;

	// La fonction sert à savoir si on arrête le pilotage automatique, alors par défaut, on considère que le robot reçoit une commande de la télécommande
	retour = 1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]

	// Mesure de vitesse et de direction
	radio_dir_get(&direction);
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff ff42 	bl	8003268 <radio_dir_get>
	radio_throttle_get(&throttle);
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff ff98 	bl	800331c <radio_throttle_get>
	if((abs(direction) < 3) && (abs(throttle) < 0.5))
 80033ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80033f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f4:	ee17 3a90 	vmov	r3, s15
 80033f8:	f113 0f02 	cmn.w	r3, #2
 80033fc:	db19      	blt.n	8003432 <radio_isThereCommand+0x62>
 80033fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003406:	ee17 3a90 	vmov	r3, s15
 800340a:	2b02      	cmp	r3, #2
 800340c:	dc11      	bgt.n	8003432 <radio_isThereCommand+0x62>
 800340e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003416:	ee17 3a90 	vmov	r3, s15
 800341a:	2b00      	cmp	r3, #0
 800341c:	db09      	blt.n	8003432 <radio_isThereCommand+0x62>
 800341e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003426:	ee17 3a90 	vmov	r3, s15
 800342a:	2b00      	cmp	r3, #0
 800342c:	dc01      	bgt.n	8003432 <radio_isThereCommand+0x62>
		retour = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]

	return retour;
 8003432:	68fb      	ldr	r3, [r7, #12]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <vehicule_speed_get>:

// !!!! A travailler !!!!
int vehicule_speed_get(float *a_pSpeed)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	// Si la commande radio n'a pas été rafraichie depuis plus d'une seconde, on remonte une panne
	if((HAL_GetTick() - vehicule_speedsensor.last_time) > 1000)
 8003444:	f002 fd4c 	bl	8005ee0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <vehicule_speed_get+0x84>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003454:	d902      	bls.n	800345c <vehicule_speed_get+0x20>
		return -1;
 8003456:	f04f 33ff 	mov.w	r3, #4294967295
 800345a:	e02c      	b.n	80034b6 <vehicule_speed_get+0x7a>
	else
	{
		if(vehicule_speedsensor.period<2000) vehicule_speedsensor.period = 2000;
 800345c:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <vehicule_speed_get+0x84>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003464:	d203      	bcs.n	800346e <vehicule_speed_get+0x32>
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <vehicule_speed_get+0x84>)
 8003468:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800346c:	605a      	str	r2, [r3, #4]
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		//*a_pSpeed = (float)(vehicule_speedsensor.period)*VEHICULE_SPEED_MAX/500.0;
		*a_pSpeed = VEHICULE_SPEED_MAX*(2000.0/(float)(vehicule_speedsensor.period));
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <vehicule_speed_get+0x84>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	ee17 0a90 	vmov	r0, s15
 800347e:	f7fd f893 	bl	80005a8 <__aeabi_f2d>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	490e      	ldr	r1, [pc, #56]	; (80034c4 <vehicule_speed_get+0x88>)
 800348c:	f7fd fa0e 	bl	80008ac <__aeabi_ddiv>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <vehicule_speed_get+0x8c>)
 800349e:	f7fd f8db 	bl	8000658 <__aeabi_dmul>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4610      	mov	r0, r2
 80034a8:	4619      	mov	r1, r3
 80034aa:	f7fd fbcd 	bl	8000c48 <__aeabi_d2f>
 80034ae:	4602      	mov	r2, r0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	601a      	str	r2, [r3, #0]
	}
	return 0;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20000268 	.word	0x20000268
 80034c4:	409f4000 	.word	0x409f4000
 80034c8:	40310000 	.word	0x40310000
 80034cc:	00000000 	.word	0x00000000

080034d0 <vehicule_speed_aimant_get>:

// !!!! A travailler !!!!
int vehicule_speed_aimant_get(float *a_pSpeed)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

	// Speed computation
	*a_pSpeed =  100000.0/(magnet_count*(float)(vitesse_mesuree+1)) / gear_ratio * wheel_perimeter;
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <vehicule_speed_aimant_get+0x98>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <vehicule_speed_aimant_get+0x9c>)
 80034e8:	edd3 7a00 	vldr	s15, [r3]
 80034ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f0:	ee17 0a90 	vmov	r0, s15
 80034f4:	f7fd f858 	bl	80005a8 <__aeabi_f2d>
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	a118      	add	r1, pc, #96	; (adr r1, 8003560 <vehicule_speed_aimant_get+0x90>)
 80034fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003502:	f7fd f9d3 	bl	80008ac <__aeabi_ddiv>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	4614      	mov	r4, r2
 800350c:	461d      	mov	r5, r3
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <vehicule_speed_aimant_get+0xa0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f848 	bl	80005a8 <__aeabi_f2d>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fd f9c4 	bl	80008ac <__aeabi_ddiv>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4614      	mov	r4, r2
 800352a:	461d      	mov	r5, r3
 800352c:	4b11      	ldr	r3, [pc, #68]	; (8003574 <vehicule_speed_aimant_get+0xa4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f839 	bl	80005a8 <__aeabi_f2d>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4620      	mov	r0, r4
 800353c:	4629      	mov	r1, r5
 800353e:	f7fd f88b 	bl	8000658 <__aeabi_dmul>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4610      	mov	r0, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f7fd fb7d 	bl	8000c48 <__aeabi_d2f>
 800354e:	4602      	mov	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]

	return 0;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bdb0      	pop	{r4, r5, r7, pc}
 800355e:	bf00      	nop
 8003560:	00000000 	.word	0x00000000
 8003564:	40f86a00 	.word	0x40f86a00
 8003568:	20000018 	.word	0x20000018
 800356c:	2000000c 	.word	0x2000000c
 8003570:	20000010 	.word	0x20000010
 8003574:	20000014 	.word	0x20000014

08003578 <vehicule_distance_aimant_get>:

// !!!! A travailler !!!!
int vehicule_distance_aimant_get(float *a_pDistance)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	// Distance
	*a_pDistance =  ( (float)(nb_impulsions_aimants) / magnet_count ) / gear_ratio * wheel_perimeter; // m
 8003580:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <vehicule_distance_aimant_get+0x48>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <vehicule_distance_aimant_get+0x4c>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003596:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <vehicule_distance_aimant_get+0x50>)
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <vehicule_distance_aimant_get+0x54>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000278 	.word	0x20000278
 80035c4:	2000000c 	.word	0x2000000c
 80035c8:	20000010 	.word	0x20000010
 80035cc:	20000014 	.word	0x20000014

080035d0 <vehicule_distance_aimant_reset>:

// !!!! A travailler !!!!
int vehicule_distance_aimant_reset()
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
	nb_impulsions_aimants = 0;
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <vehicule_distance_aimant_reset+0x18>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

	return 0;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000278 	.word	0x20000278

080035ec <vehicule_dir_set>:

// Par convention, l'angle est négatif quand on tourne à gauche.
int vehicule_dir_set(float a_dir)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	ed87 0a01 	vstr	s0, [r7, #4]
	if((a_dir>VEHICULE_DIR_MAX) || (a_dir<-VEHICULE_DIR_MAX))
 80035f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80035fa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80035fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	dc08      	bgt.n	800361a <vehicule_dir_set+0x2e>
 8003608:	edd7 7a01 	vldr	s15, [r7, #4]
 800360c:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8003610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	d502      	bpl.n	8003620 <vehicule_dir_set+0x34>
		return -1;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e01d      	b.n	800365c <vehicule_dir_set+0x70>
	else
	{
		// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
		htim1.Instance->CCR2 = 1500 + (int32_t)((a_dir/VEHICULE_DIR_MAX)*500.0);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fc ffc1 	bl	80005a8 <__aeabi_f2d>
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <vehicule_dir_set+0x78>)
 800362c:	f7fd f93e 	bl	80008ac <__aeabi_ddiv>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <vehicule_dir_set+0x7c>)
 800363e:	f7fd f80b 	bl	8000658 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd fab5 	bl	8000bb8 <__aeabi_d2iz>
 800364e:	4603      	mov	r3, r0
 8003650:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <vehicule_dir_set+0x80>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
	}

	return 0;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	403a0000 	.word	0x403a0000
 8003668:	407f4000 	.word	0x407f4000
 800366c:	200007d0 	.word	0x200007d0

08003670 <vehicule_throttle_set>:

// Par convention, la vitesse est négative quand on recule.
int vehicule_throttle_set(float a_throttle)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	ed87 0a01 	vstr	s0, [r7, #4]
	float commande;
	int retour;

	retour = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]

	if(a_throttle>VEHICULE_SPEED_MAX/2)
 800367e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003682:	eeb2 7a01 	vmov.f32	s14, #33	; 0x41080000  8.5
 8003686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	dd05      	ble.n	800369c <vehicule_throttle_set+0x2c>
	{
		commande = VEHICULE_SPEED_MAX/2;
 8003690:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <vehicule_throttle_set+0x94>)
 8003692:	60fb      	str	r3, [r7, #12]
		retour = -1;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	e010      	b.n	80036be <vehicule_throttle_set+0x4e>
	}
	else if (a_throttle<-VEHICULE_SPEED_MAX)
 800369c:	edd7 7a01 	vldr	s15, [r7, #4]
 80036a0:	eebb 7a01 	vmov.f32	s14, #177	; 0xc1880000 -17.0
 80036a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ac:	d505      	bpl.n	80036ba <vehicule_throttle_set+0x4a>
	{
		commande = -VEHICULE_SPEED_MAX;
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <vehicule_throttle_set+0x98>)
 80036b0:	60fb      	str	r3, [r7, #12]
		retour = -1;
 80036b2:	f04f 33ff 	mov.w	r3, #4294967295
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	e001      	b.n	80036be <vehicule_throttle_set+0x4e>
	}
	else
		commande = a_throttle;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60fb      	str	r3, [r7, #12]

	// A terme, vérifier que le duty_cycle est bien limité à 1000 - 2000 us.
	htim1.Instance->CCR1 = 1500 + (int32_t)((commande/VEHICULE_SPEED_MAX)*500.0);
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7fc ff72 	bl	80005a8 <__aeabi_f2d>
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <vehicule_throttle_set+0x9c>)
 80036ca:	f7fd f8ef 	bl	80008ac <__aeabi_ddiv>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <vehicule_throttle_set+0xa0>)
 80036dc:	f7fc ffbc 	bl	8000658 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	f7fd fa66 	bl	8000bb8 <__aeabi_d2iz>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <vehicule_throttle_set+0xa4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	635a      	str	r2, [r3, #52]	; 0x34

	return retour;
 80036f8:	68bb      	ldr	r3, [r7, #8]
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	41080000 	.word	0x41080000
 8003708:	c1880000 	.word	0xc1880000
 800370c:	40310000 	.word	0x40310000
 8003710:	407f4000 	.word	0x407f4000
 8003714:	200007d0 	.word	0x200007d0

08003718 <init_radio_commandes>:

void init_radio_commandes()
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
	// Initialisation de toutes les structures
	radio_dir.last_time = 0;
 800371c:	4b35      	ldr	r3, [pc, #212]	; (80037f4 <init_radio_commandes+0xdc>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
	radio_dir.period = 0;
 8003722:	4b34      	ldr	r3, [pc, #208]	; (80037f4 <init_radio_commandes+0xdc>)
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
	radio_dir.duty_cycle = 0;
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <init_radio_commandes+0xdc>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]

	radio_throttle.last_time = 0;
 800372e:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <init_radio_commandes+0xe0>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
	radio_throttle.period = 0;
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <init_radio_commandes+0xe0>)
 8003736:	2200      	movs	r2, #0
 8003738:	605a      	str	r2, [r3, #4]
	radio_throttle.duty_cycle = 0;
 800373a:	4b2f      	ldr	r3, [pc, #188]	; (80037f8 <init_radio_commandes+0xe0>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]

	radio_spare.last_time = 0;
 8003740:	4b2e      	ldr	r3, [pc, #184]	; (80037fc <init_radio_commandes+0xe4>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
	radio_spare.period = 0;
 8003746:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <init_radio_commandes+0xe4>)
 8003748:	2200      	movs	r2, #0
 800374a:	605a      	str	r2, [r3, #4]
	radio_spare.duty_cycle = 0;
 800374c:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <init_radio_commandes+0xe4>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]

	vehicule_speedsensor.last_time = 0;
 8003752:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <init_radio_commandes+0xe8>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
	vehicule_speedsensor.period = 0;
 8003758:	4b29      	ldr	r3, [pc, #164]	; (8003800 <init_radio_commandes+0xe8>)
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
	vehicule_speedsensor.duty_cycle = 0;
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <init_radio_commandes+0xe8>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]

	nb_impulsions_aimants = 0;
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <init_radio_commandes+0xec>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

	// Démarrage des Timers d'acquisition
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800376a:	2100      	movs	r1, #0
 800376c:	4826      	ldr	r0, [pc, #152]	; (8003808 <init_radio_commandes+0xf0>)
 800376e:	f005 fd29 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8003772:	2104      	movs	r1, #4
 8003774:	4824      	ldr	r0, [pc, #144]	; (8003808 <init_radio_commandes+0xf0>)
 8003776:	f005 fd25 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800377a:	2100      	movs	r1, #0
 800377c:	4823      	ldr	r0, [pc, #140]	; (800380c <init_radio_commandes+0xf4>)
 800377e:	f005 fd21 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8003782:	2104      	movs	r1, #4
 8003784:	4821      	ldr	r0, [pc, #132]	; (800380c <init_radio_commandes+0xf4>)
 8003786:	f005 fd1d 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_1);
 800378a:	2100      	movs	r1, #0
 800378c:	4820      	ldr	r0, [pc, #128]	; (8003810 <init_radio_commandes+0xf8>)
 800378e:	f005 fd19 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim12, TIM_CHANNEL_2);
 8003792:	2104      	movs	r1, #4
 8003794:	481e      	ldr	r0, [pc, #120]	; (8003810 <init_radio_commandes+0xf8>)
 8003796:	f005 fd15 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800379a:	2100      	movs	r1, #0
 800379c:	481d      	ldr	r0, [pc, #116]	; (8003814 <init_radio_commandes+0xfc>)
 800379e:	f005 fd11 	bl	80091c4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80037a2:	2104      	movs	r1, #4
 80037a4:	481b      	ldr	r0, [pc, #108]	; (8003814 <init_radio_commandes+0xfc>)
 80037a6:	f005 fd0d 	bl	80091c4 <HAL_TIM_IC_Start_IT>

	// Détermination des valeurs médianes sur la télécommande.
	// Il s'avère que lorsque l'on relache la télécommande le point milieu de la gachette de vitesse
	// et de la direction.
	// On attend une seconde puis on mesure les valeurs par défaut
	HAL_Delay(1000);
 80037aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ae:	f002 fba3 	bl	8005ef8 <HAL_Delay>
	radio_dir.duty_cycle_default = radio_dir.duty_cycle;
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <init_radio_commandes+0xdc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <init_radio_commandes+0xdc>)
 80037b8:	60d3      	str	r3, [r2, #12]
	radio_throttle.duty_cycle_default = radio_throttle.duty_cycle;
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <init_radio_commandes+0xe0>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a0e      	ldr	r2, [pc, #56]	; (80037f8 <init_radio_commandes+0xe0>)
 80037c0:	60d3      	str	r3, [r2, #12]
	// TODO : c'est moins pire, mais ce n'est pas encore génial. Il faudrai peut être prévoir une courbe en expo comme sur les télécommandes de planeur

	// Vitesse et direction à 0
	vehicule_dir_set(0.0);
 80037c2:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003818 <init_radio_commandes+0x100>
 80037c6:	f7ff ff11 	bl	80035ec <vehicule_dir_set>
	vehicule_throttle_set(0.0);
 80037ca:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003818 <init_radio_commandes+0x100>
 80037ce:	f7ff ff4f 	bl	8003670 <vehicule_throttle_set>
	HAL_Delay(10);
 80037d2:	200a      	movs	r0, #10
 80037d4:	f002 fb90 	bl	8005ef8 <HAL_Delay>
	vehicule_speedsensor.duty_cycle_default = vehicule_speedsensor.duty_cycle;
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <init_radio_commandes+0xe8>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	4a08      	ldr	r2, [pc, #32]	; (8003800 <init_radio_commandes+0xe8>)
 80037de:	60d3      	str	r3, [r2, #12]

	// Démarrage du Timer de commande
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80037e0:	2100      	movs	r1, #0
 80037e2:	480e      	ldr	r0, [pc, #56]	; (800381c <init_radio_commandes+0x104>)
 80037e4:	f005 fb92 	bl	8008f0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80037e8:	2104      	movs	r1, #4
 80037ea:	480c      	ldr	r0, [pc, #48]	; (800381c <init_radio_commandes+0x104>)
 80037ec:	f005 fb8e 	bl	8008f0c <HAL_TIM_PWM_Start>

}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000238 	.word	0x20000238
 80037f8:	20000248 	.word	0x20000248
 80037fc:	20000258 	.word	0x20000258
 8003800:	20000268 	.word	0x20000268
 8003804:	20000278 	.word	0x20000278
 8003808:	20000924 	.word	0x20000924
 800380c:	20000528 	.word	0x20000528
 8003810:	20000a54 	.word	0x20000a54
 8003814:	200003c4 	.word	0x200003c4
 8003818:	00000000 	.word	0x00000000
 800381c:	200007d0 	.word	0x200007d0

08003820 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003824:	f3bf 8f4f 	dsb	sy
}
 8003828:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <__NVIC_SystemReset+0x24>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <__NVIC_SystemReset+0x24>)
 8003834:	4b04      	ldr	r3, [pc, #16]	; (8003848 <__NVIC_SystemReset+0x28>)
 8003836:	4313      	orrs	r3, r2
 8003838:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800383a:	f3bf 8f4f 	dsb	sy
}
 800383e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003840:	bf00      	nop
 8003842:	e7fd      	b.n	8003840 <__NVIC_SystemReset+0x20>
 8003844:	e000ed00 	.word	0xe000ed00
 8003848:	05fa0004 	.word	0x05fa0004

0800384c <saisie_commande>:

    return nb_car_valide;
}

char *saisie_commande()
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
    char caractere;
	shell_etat etat;
	char *pCommandeCourante;
	unsigned int pointeur_historique;

    nb_car_valide = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
    position = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
	etat = sh_normal;
 800385a:	2300      	movs	r3, #0
 800385c:	74fb      	strb	r3, [r7, #19]

    // Caractere fin de chaine
	pointeur_historique = sh_historique.commande_courante;
 800385e:	4b87      	ldr	r3, [pc, #540]	; (8003a7c <saisie_commande+0x230>)
 8003860:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003864:	60bb      	str	r3, [r7, #8]
	pCommandeCourante = sh_historique.commandes[sh_historique.commande_courante];
 8003866:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <saisie_commande+0x230>)
 8003868:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800386c:	2232      	movs	r2, #50	; 0x32
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	4a82      	ldr	r2, [pc, #520]	; (8003a7c <saisie_commande+0x230>)
 8003874:	4413      	add	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]
	pCommandeCourante[position] = 0x0;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]

    do {
        caractere = getchar();
 8003882:	f008 fa15 	bl	800bcb0 <getchar>
 8003886:	4603      	mov	r3, r0
 8003888:	71fb      	strb	r3, [r7, #7]

		if(etat == sh_normal)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <saisie_commande+0x50>
		{
			if(caractere == 0x1b)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	2b1b      	cmp	r3, #27
 8003894:	d162      	bne.n	800395c <saisie_commande+0x110>
				etat = sh_fleche_en_cours;
 8003896:	2301      	movs	r3, #1
 8003898:	74fb      	strb	r3, [r7, #19]
 800389a:	e05f      	b.n	800395c <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_en_cours)
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d108      	bne.n	80038b4 <saisie_commande+0x68>
		{
			if(caractere == 0x5b)
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	2b5b      	cmp	r3, #91	; 0x5b
 80038a6:	d102      	bne.n	80038ae <saisie_commande+0x62>
				etat = sh_fleche_confirmee;
 80038a8:	2302      	movs	r3, #2
 80038aa:	74fb      	strb	r3, [r7, #19]
 80038ac:	e056      	b.n	800395c <saisie_commande+0x110>
			else
				// Ce n'est pas le code pour une fleche
				// On jete le caractere 0x1b
				etat = sh_normal;
 80038ae:	2300      	movs	r3, #0
 80038b0:	74fb      	strb	r3, [r7, #19]
 80038b2:	e053      	b.n	800395c <saisie_commande+0x110>
		}
		else if(etat == sh_fleche_confirmee)
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d145      	bne.n	8003946 <saisie_commande+0xfa>
		{
			if(caractere == 0x44)
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b44      	cmp	r3, #68	; 0x44
 80038be:	d105      	bne.n	80038cc <saisie_commande+0x80>
			{
				// Fleche vers la gauche
				position -=1;
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 80038c6:	2303      	movs	r3, #3
 80038c8:	74fb      	strb	r3, [r7, #19]
 80038ca:	e047      	b.n	800395c <saisie_commande+0x110>
			}
			else if(caractere == 0x43)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	2b43      	cmp	r3, #67	; 0x43
 80038d0:	d105      	bne.n	80038de <saisie_commande+0x92>
			{
				// Fleche vers la droite
				position +=1;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3301      	adds	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
				etat = sh_code_fleche;
 80038d8:	2303      	movs	r3, #3
 80038da:	74fb      	strb	r3, [r7, #19]
 80038dc:	e03e      	b.n	800395c <saisie_commande+0x110>
			}
			else if(caractere == 0x41)
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	2b41      	cmp	r3, #65	; 0x41
 80038e2:	d12d      	bne.n	8003940 <saisie_commande+0xf4>
			{
				// Fleche vers le haut
				if(pointeur_historique == 0)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d102      	bne.n	80038f0 <saisie_commande+0xa4>
					pointeur_historique = SHELL_MAX_HISTORIQUE-1;
 80038ea:	2304      	movs	r3, #4
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	e002      	b.n	80038f6 <saisie_commande+0xaa>
				else
					pointeur_historique = pointeur_historique-1;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
				pCommandeCourante = sh_historique.commandes[pointeur_historique];
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2232      	movs	r2, #50	; 0x32
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	4a5f      	ldr	r2, [pc, #380]	; (8003a7c <saisie_commande+0x230>)
 8003900:	4413      	add	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
                printf("\r\n                                                  ");
 8003904:	485e      	ldr	r0, [pc, #376]	; (8003a80 <saisie_commande+0x234>)
 8003906:	f008 fe7b 	bl	800c600 <iprintf>
				printf("\r%s%s", PROMPT, pCommandeCourante);
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	495d      	ldr	r1, [pc, #372]	; (8003a84 <saisie_commande+0x238>)
 800390e:	485e      	ldr	r0, [pc, #376]	; (8003a88 <saisie_commande+0x23c>)
 8003910:	f008 fe76 	bl	800c600 <iprintf>
				position = strlen(pCommandeCourante);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f7fc fc85 	bl	8000224 <strlen>
 800391a:	4603      	mov	r3, r0
 800391c:	61bb      	str	r3, [r7, #24]
				nb_car_valide = position;
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	61fb      	str	r3, [r7, #28]
				strcpy(sh_historique.commandes[sh_historique.commande_courante], pCommandeCourante);
 8003922:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <saisie_commande+0x230>)
 8003924:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003928:	2232      	movs	r2, #50	; 0x32
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	4a53      	ldr	r2, [pc, #332]	; (8003a7c <saisie_commande+0x230>)
 8003930:	4413      	add	r3, r2
 8003932:	68f9      	ldr	r1, [r7, #12]
 8003934:	4618      	mov	r0, r3
 8003936:	f008 fef1 	bl	800c71c <strcpy>
				etat = sh_code_fleche;
 800393a:	2303      	movs	r3, #3
 800393c:	74fb      	strb	r3, [r7, #19]
 800393e:	e00d      	b.n	800395c <saisie_commande+0x110>
			}
			else
				// Inconnu ou non gere
				etat = sh_normal;
 8003940:	2300      	movs	r3, #0
 8003942:	74fb      	strb	r3, [r7, #19]
 8003944:	e00a      	b.n	800395c <saisie_commande+0x110>
		}
		else if(etat == sh_code_fleche)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d107      	bne.n	800395c <saisie_commande+0x110>
		{
			if(caractere == 0x1b)
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	2b1b      	cmp	r3, #27
 8003950:	d102      	bne.n	8003958 <saisie_commande+0x10c>
				etat = sh_fleche_en_cours;
 8003952:	2301      	movs	r3, #1
 8003954:	74fb      	strb	r3, [r7, #19]
 8003956:	e001      	b.n	800395c <saisie_commande+0x110>
			else
				etat = sh_normal;
 8003958:	2300      	movs	r3, #0
 800395a:	74fb      	strb	r3, [r7, #19]
		}

		if(etat == sh_normal)
 800395c:	7cfb      	ldrb	r3, [r7, #19]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d165      	bne.n	8003a2e <saisie_commande+0x1e2>
		{
			if(caractere == 0x08)
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d122      	bne.n	80039ae <saisie_commande+0x162>
	        {
		        // DEL
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position-1" � la "fin de la chaine" d'une case
	            for(i=position-1; i<nb_car_valide; i++)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	3b01      	subs	r3, #1
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e00b      	b.n	8003988 <saisie_commande+0x13c>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	3301      	adds	r3, #1
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	441a      	add	r2, r3
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	68f9      	ldr	r1, [r7, #12]
 800397c:	440b      	add	r3, r1
 800397e:	7812      	ldrb	r2, [r2, #0]
 8003980:	701a      	strb	r2, [r3, #0]
	            for(i=position-1; i<nb_car_valide; i++)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	3301      	adds	r3, #1
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	429a      	cmp	r2, r3
 800398e:	dbef      	blt.n	8003970 <saisie_commande+0x124>

	            position -= 1;
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	3b01      	subs	r3, #1
 8003994:	61bb      	str	r3, [r7, #24]
	            nb_car_valide -= 1;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b01      	subs	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]

                // Rafraichissement de l'affichage
                printf("\r                                                  ");
 800399c:	483b      	ldr	r0, [pc, #236]	; (8003a8c <saisie_commande+0x240>)
 800399e:	f008 fe2f 	bl	800c600 <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4937      	ldr	r1, [pc, #220]	; (8003a84 <saisie_commande+0x238>)
 80039a6:	4838      	ldr	r0, [pc, #224]	; (8003a88 <saisie_commande+0x23c>)
 80039a8:	f008 fe2a 	bl	800c600 <iprintf>
 80039ac:	e03f      	b.n	8003a2e <saisie_commande+0x1e2>
	        }
	        else if(caractere == 0x7F)
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	2b7f      	cmp	r3, #127	; 0x7f
 80039b2:	d11e      	bne.n	80039f2 <saisie_commande+0x1a6>
	       {
	            // SUPPR
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=position; i<nb_car_valide; i++)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e00b      	b.n	80039d2 <saisie_commande+0x186>
	                pCommandeCourante[i] = pCommandeCourante[i+1];
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	441a      	add	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	440b      	add	r3, r1
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	701a      	strb	r2, [r3, #0]
	            for(i=position; i<nb_car_valide; i++)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	dbef      	blt.n	80039ba <saisie_commande+0x16e>

	            nb_car_valide -= 1;
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b01      	subs	r3, #1
 80039de:	61fb      	str	r3, [r7, #28]

	            // Rafraichissement de l'affichage
                printf("\r                                                  ");
 80039e0:	482a      	ldr	r0, [pc, #168]	; (8003a8c <saisie_commande+0x240>)
 80039e2:	f008 fe0d 	bl	800c600 <iprintf>
                printf("\r%s%s", PROMPT, pCommandeCourante);
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4926      	ldr	r1, [pc, #152]	; (8003a84 <saisie_commande+0x238>)
 80039ea:	4827      	ldr	r0, [pc, #156]	; (8003a88 <saisie_commande+0x23c>)
 80039ec:	f008 fe08 	bl	800c600 <iprintf>
 80039f0:	e01d      	b.n	8003a2e <saisie_commande+0x1e2>
	        else
	        {
	            // Pas de caractere special
	            // En consid�rant que la position n'est pas � la fin de la chaine de caractere
	            // D�calage de "position" � la "fin de la chaine" d'une case
	            for(i=nb_car_valide; i>=position; i--)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e00b      	b.n	8003a10 <saisie_commande+0x1c4>
	                pCommandeCourante[i+1] = pCommandeCourante[i];
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	441a      	add	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	3301      	adds	r3, #1
 8003a02:	68f9      	ldr	r1, [r7, #12]
 8003a04:	440b      	add	r3, r1
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	701a      	strb	r2, [r3, #0]
	            for(i=nb_car_valide; i>=position; i--)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	daef      	bge.n	80039f8 <saisie_commande+0x1ac>

	            pCommandeCourante[position++] = caractere;
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	61ba      	str	r2, [r7, #24]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	79fa      	ldrb	r2, [r7, #7]
 8003a26:	701a      	strb	r2, [r3, #0]
	            nb_car_valide++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
	        }
		}
        // Over writing pour afficher la chaine mise � jour
        //printf("nb_car_valide = %d, position = %d\n", nb_car_valide, position);

    } while (caractere != '\n');
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	2b0a      	cmp	r3, #10
 8003a32:	f47f af26 	bne.w	8003882 <saisie_commande+0x36>

    if(nb_car_valide >= 2)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	dd06      	ble.n	8003a4a <saisie_commande+0x1fe>
    {
        pCommandeCourante[nb_car_valide-2] = 0x0;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3b02      	subs	r3, #2
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e002      	b.n	8003a50 <saisie_commande+0x204>
    }
    else
    {
        pCommandeCourante[0] = 0x0;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
    }

	sh_historique.commande_courante = (sh_historique.commande_courante + 1)%SHELL_MAX_HISTORIQUE;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <saisie_commande+0x230>)
 8003a52:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <saisie_commande+0x244>)
 8003a5a:	fb83 2301 	smull	r2, r3, r3, r1
 8003a5e:	105a      	asrs	r2, r3, #1
 8003a60:	17cb      	asrs	r3, r1, #31
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	1aca      	subs	r2, r1, r3
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <saisie_commande+0x230>)
 8003a6e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    return pCommandeCourante;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000acc 	.word	0x20000acc
 8003a80:	0801132c 	.word	0x0801132c
 8003a84:	08011364 	.word	0x08011364
 8003a88:	08011378 	.word	0x08011378
 8003a8c:	08011380 	.word	0x08011380
 8003a90:	66666667 	.word	0x66666667

08003a94 <shell>:
NVIC_SystemReset();

}

void shell()
{
 8003a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a98:	ed2d 8b04 	vpush	{d8-d9}
 8003a9c:	b0ed      	sub	sp, #436	; 0x1b4
 8003a9e:	af10      	add	r7, sp, #64	; 0x40
    int quitter;
	int nb_lectures;
	st_tele_element *pTeleElement;
	int erreur;

    sh_historique.commande_courante = 0;
 8003aa0:	4bc8      	ldr	r3, [pc, #800]	; (8003dc4 <shell+0x330>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003aae:	e00d      	b.n	8003acc <shell+0x38>
        sh_historique.commandes[i][0] = '\0';
 8003ab0:	4ac4      	ldr	r2, [pc, #784]	; (8003dc4 <shell+0x330>)
 8003ab2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ab6:	2132      	movs	r1, #50	; 0x32
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
    for(i=0; i<SHELL_MAX_HISTORIQUE; i++)
 8003ac2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003acc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	dded      	ble.n	8003ab0 <shell+0x1c>

    printf("\r\n");
 8003ad4:	48bc      	ldr	r0, [pc, #752]	; (8003dc8 <shell+0x334>)
 8003ad6:	f008 fe19 	bl	800c70c <puts>
    quitter = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    do {
        printf("%s", PROMPT);
 8003ae0:	49ba      	ldr	r1, [pc, #744]	; (8003dcc <shell+0x338>)
 8003ae2:	48bb      	ldr	r0, [pc, #748]	; (8003dd0 <shell+0x33c>)
 8003ae4:	f008 fd8c 	bl	800c600 <iprintf>

        // Saisie de la commande
        saisie_commande();
 8003ae8:	f7ff feb0 	bl	800384c <saisie_commande>
        if(sh_historique.commande_courante == 0)
 8003aec:	4bb5      	ldr	r3, [pc, #724]	; (8003dc4 <shell+0x330>)
 8003aee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <shell+0x70>
        	strcpy(commande, sh_historique.commandes[SHELL_MAX_HISTORIQUE-1]);
 8003af6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003afa:	49b6      	ldr	r1, [pc, #728]	; (8003dd4 <shell+0x340>)
 8003afc:	4618      	mov	r0, r3
 8003afe:	f008 fe0d 	bl	800c71c <strcpy>
 8003b02:	e00e      	b.n	8003b22 <shell+0x8e>
        else
        	strcpy(commande, sh_historique.commandes[sh_historique.commande_courante-1]);
 8003b04:	4baf      	ldr	r3, [pc, #700]	; (8003dc4 <shell+0x330>)
 8003b06:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2232      	movs	r2, #50	; 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4aac      	ldr	r2, [pc, #688]	; (8003dc4 <shell+0x330>)
 8003b14:	441a      	add	r2, r3
 8003b16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f008 fdfd 	bl	800c71c <strcpy>

        printf("\r\n");
 8003b22:	48a9      	ldr	r0, [pc, #676]	; (8003dc8 <shell+0x334>)
 8003b24:	f008 fdf2 	bl	800c70c <puts>

        printf("%s\r\n", commande);
 8003b28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	48aa      	ldr	r0, [pc, #680]	; (8003dd8 <shell+0x344>)
 8003b30:	f008 fd66 	bl	800c600 <iprintf>

        // Interpretation de la commande
        num_args = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        tab_args[num_args] = strtok(commande, " ");
 8003b3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003b3e:	49a7      	ldr	r1, [pc, #668]	; (8003ddc <shell+0x348>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f009 fc27 	bl	800d394 <strtok>
 8003b46:	4601      	mov	r1, r0
 8003b48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b4c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 8003b54:	e00f      	b.n	8003b76 <shell+0xe2>
        {
            tab_args[++num_args] = strtok(NULL, " ");
 8003b56:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003b60:	499e      	ldr	r1, [pc, #632]	; (8003ddc <shell+0x348>)
 8003b62:	2000      	movs	r0, #0
 8003b64:	f009 fc16 	bl	800d394 <strtok>
 8003b68:	4601      	mov	r1, r0
 8003b6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b6e:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        while(tab_args[num_args] != NULL)
 8003b76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b7a:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8003b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e7      	bne.n	8003b56 <shell+0xc2>
        }

        // Shell
        if(strcmp(tab_args[0], "hw_led") == 0)
 8003b86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4994      	ldr	r1, [pc, #592]	; (8003de0 <shell+0x34c>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fb3e 	bl	8000210 <strcmp>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 80c1 	bne.w	8003d1e <shell+0x28a>
        {
            // Led
            if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led1")==0))
 8003b9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d11b      	bne.n	8003bdc <shell+0x148>
 8003ba4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	498e      	ldr	r1, [pc, #568]	; (8003de4 <shell+0x350>)
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fc fb2f 	bl	8000210 <strcmp>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d111      	bne.n	8003bdc <shell+0x148>
 8003bb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	498a      	ldr	r1, [pc, #552]	; (8003de8 <shell+0x354>)
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fb25 	bl	8000210 <strcmp>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d107      	bne.n	8003bdc <shell+0x148>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bd2:	4886      	ldr	r0, [pc, #536]	; (8003dec <shell+0x358>)
 8003bd4:	f003 fb1c 	bl	8007210 <HAL_GPIO_WritePin>
 8003bd8:	f000 bd93 	b.w	8004702 <shell+0xc6e>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led2")==0))
 8003bdc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d11a      	bne.n	8003c1a <shell+0x186>
 8003be4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	497e      	ldr	r1, [pc, #504]	; (8003de4 <shell+0x350>)
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc fb0f 	bl	8000210 <strcmp>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d110      	bne.n	8003c1a <shell+0x186>
 8003bf8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	497c      	ldr	r1, [pc, #496]	; (8003df0 <shell+0x35c>)
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7fc fb05 	bl	8000210 <strcmp>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <shell+0x186>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	4878      	ldr	r0, [pc, #480]	; (8003df4 <shell+0x360>)
 8003c12:	f003 fafd 	bl	8007210 <HAL_GPIO_WritePin>
 8003c16:	f000 bd74 	b.w	8004702 <shell+0xc6e>
            else if((num_args == 3) && (strcmp(tab_args[1], "on")==0) && (strcmp(tab_args[2], "led3")==0))
 8003c1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d11a      	bne.n	8003c58 <shell+0x1c4>
 8003c22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	496e      	ldr	r1, [pc, #440]	; (8003de4 <shell+0x350>)
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc faf0 	bl	8000210 <strcmp>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d110      	bne.n	8003c58 <shell+0x1c4>
 8003c36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	496e      	ldr	r1, [pc, #440]	; (8003df8 <shell+0x364>)
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f7fc fae6 	bl	8000210 <strcmp>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <shell+0x1c4>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_RESET);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	4869      	ldr	r0, [pc, #420]	; (8003df4 <shell+0x360>)
 8003c50:	f003 fade 	bl	8007210 <HAL_GPIO_WritePin>
 8003c54:	f000 bd55 	b.w	8004702 <shell+0xc6e>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led1")==0))
 8003c58:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d11b      	bne.n	8003c98 <shell+0x204>
 8003c60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4965      	ldr	r1, [pc, #404]	; (8003dfc <shell+0x368>)
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fad1 	bl	8000210 <strcmp>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d111      	bne.n	8003c98 <shell+0x204>
 8003c74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	495b      	ldr	r1, [pc, #364]	; (8003de8 <shell+0x354>)
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7fc fac7 	bl	8000210 <strcmp>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <shell+0x204>
                    HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c8e:	4857      	ldr	r0, [pc, #348]	; (8003dec <shell+0x358>)
 8003c90:	f003 fabe 	bl	8007210 <HAL_GPIO_WritePin>
 8003c94:	f000 bd35 	b.w	8004702 <shell+0xc6e>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led2")==0))
 8003c98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d11a      	bne.n	8003cd6 <shell+0x242>
 8003ca0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4955      	ldr	r1, [pc, #340]	; (8003dfc <shell+0x368>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fab1 	bl	8000210 <strcmp>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d110      	bne.n	8003cd6 <shell+0x242>
 8003cb4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	494d      	ldr	r1, [pc, #308]	; (8003df0 <shell+0x35c>)
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc faa7 	bl	8000210 <strcmp>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <shell+0x242>
                    HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	4849      	ldr	r0, [pc, #292]	; (8003df4 <shell+0x360>)
 8003cce:	f003 fa9f 	bl	8007210 <HAL_GPIO_WritePin>
 8003cd2:	f000 bd16 	b.w	8004702 <shell+0xc6e>
            else if((num_args == 3) && (strcmp(tab_args[1], "off")==0) && (strcmp(tab_args[2], "led3")==0))
 8003cd6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d11a      	bne.n	8003d14 <shell+0x280>
 8003cde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	4945      	ldr	r1, [pc, #276]	; (8003dfc <shell+0x368>)
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fc fa92 	bl	8000210 <strcmp>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d110      	bne.n	8003d14 <shell+0x280>
 8003cf2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	493f      	ldr	r1, [pc, #252]	; (8003df8 <shell+0x364>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fc fa88 	bl	8000210 <strcmp>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <shell+0x280>
                    HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, GPIO_PIN_SET);
 8003d06:	2201      	movs	r2, #1
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	483a      	ldr	r0, [pc, #232]	; (8003df4 <shell+0x360>)
 8003d0c:	f003 fa80 	bl	8007210 <HAL_GPIO_WritePin>
 8003d10:	f000 bcf7 	b.w	8004702 <shell+0xc6e>
            else
                printf("Parametres incorrects. \r\nSyntaxe : hw_led <on/off> <led1/led2/led3>\r\n");
 8003d14:	483a      	ldr	r0, [pc, #232]	; (8003e00 <shell+0x36c>)
 8003d16:	f008 fcf9 	bl	800c70c <puts>
 8003d1a:	f000 bcf2 	b.w	8004702 <shell+0xc6e>
        } else
		if(strcmp(tab_args[0], "hw_buttons") == 0)
 8003d1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4937      	ldr	r1, [pc, #220]	; (8003e04 <shell+0x370>)
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fa72 	bl	8000210 <strcmp>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d17c      	bne.n	8003e2c <shell+0x398>
		{
			// Afiche l'�tat des boutons
			if(num_args==1)
 8003d32:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d13f      	bne.n	8003dba <shell+0x326>
			{
				if(HAL_GPIO_ReadPin(bouton1_GPIO_Port, bouton1_Pin) ==  GPIO_PIN_SET)
 8003d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d3e:	482b      	ldr	r0, [pc, #172]	; (8003dec <shell+0x358>)
 8003d40:	f003 fa4e 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d103      	bne.n	8003d52 <shell+0x2be>
					printf("Bouton1 opened.\r\n");
 8003d4a:	482f      	ldr	r0, [pc, #188]	; (8003e08 <shell+0x374>)
 8003d4c:	f008 fcde 	bl	800c70c <puts>
 8003d50:	e002      	b.n	8003d58 <shell+0x2c4>
				else
					printf("Bouton1 closed.\r\n");
 8003d52:	482e      	ldr	r0, [pc, #184]	; (8003e0c <shell+0x378>)
 8003d54:	f008 fcda 	bl	800c70c <puts>
				if(HAL_GPIO_ReadPin(bouton2_GPIO_Port, bouton2_Pin) ==  GPIO_PIN_SET)
 8003d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d5c:	4823      	ldr	r0, [pc, #140]	; (8003dec <shell+0x358>)
 8003d5e:	f003 fa3f 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d103      	bne.n	8003d70 <shell+0x2dc>
					printf("Bouton2 opened.\r\n");
 8003d68:	4829      	ldr	r0, [pc, #164]	; (8003e10 <shell+0x37c>)
 8003d6a:	f008 fccf 	bl	800c70c <puts>
 8003d6e:	e002      	b.n	8003d76 <shell+0x2e2>
				else
					printf("Bouton2 closed.\r\n");
 8003d70:	4828      	ldr	r0, [pc, #160]	; (8003e14 <shell+0x380>)
 8003d72:	f008 fccb 	bl	800c70c <puts>
				if(HAL_GPIO_ReadPin(bouton3_GPIO_Port, bouton3_Pin) ==  GPIO_PIN_SET)
 8003d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d7a:	481c      	ldr	r0, [pc, #112]	; (8003dec <shell+0x358>)
 8003d7c:	f003 fa30 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d103      	bne.n	8003d8e <shell+0x2fa>
					printf("Bouton3 opened.\r\n");
 8003d86:	4824      	ldr	r0, [pc, #144]	; (8003e18 <shell+0x384>)
 8003d88:	f008 fcc0 	bl	800c70c <puts>
 8003d8c:	e002      	b.n	8003d94 <shell+0x300>
				else
					printf("Bouton3 closed.\r\n");
 8003d8e:	4823      	ldr	r0, [pc, #140]	; (8003e1c <shell+0x388>)
 8003d90:	f008 fcbc 	bl	800c70c <puts>
				if(HAL_GPIO_ReadPin(boutonExt1_GPIO_Port, boutonExt1_Pin) ==  GPIO_PIN_SET)
 8003d94:	2110      	movs	r1, #16
 8003d96:	4817      	ldr	r0, [pc, #92]	; (8003df4 <shell+0x360>)
 8003d98:	f003 fa22 	bl	80071e0 <HAL_GPIO_ReadPin>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d103      	bne.n	8003daa <shell+0x316>
					printf("BoutonExt1 opened.\r\n");
 8003da2:	481f      	ldr	r0, [pc, #124]	; (8003e20 <shell+0x38c>)
 8003da4:	f008 fcb2 	bl	800c70c <puts>
 8003da8:	e002      	b.n	8003db0 <shell+0x31c>
				else
					printf("BoutonExt1 closed.\r\n");
 8003daa:	481e      	ldr	r0, [pc, #120]	; (8003e24 <shell+0x390>)
 8003dac:	f008 fcae 	bl	800c70c <puts>
				printf("\r\n");
 8003db0:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <shell+0x334>)
 8003db2:	f008 fcab 	bl	800c70c <puts>
 8003db6:	f000 bca4 	b.w	8004702 <shell+0xc6e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : hw_buttons\r\n");
 8003dba:	481b      	ldr	r0, [pc, #108]	; (8003e28 <shell+0x394>)
 8003dbc:	f008 fca6 	bl	800c70c <puts>
 8003dc0:	f000 bc9f 	b.w	8004702 <shell+0xc6e>
 8003dc4:	20000acc 	.word	0x20000acc
 8003dc8:	080113cc 	.word	0x080113cc
 8003dcc:	08011364 	.word	0x08011364
 8003dd0:	080113d0 	.word	0x080113d0
 8003dd4:	20000b94 	.word	0x20000b94
 8003dd8:	080113d4 	.word	0x080113d4
 8003ddc:	080113dc 	.word	0x080113dc
 8003de0:	080113e0 	.word	0x080113e0
 8003de4:	080113e8 	.word	0x080113e8
 8003de8:	080113ec 	.word	0x080113ec
 8003dec:	40021800 	.word	0x40021800
 8003df0:	080113f4 	.word	0x080113f4
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	080113fc 	.word	0x080113fc
 8003dfc:	08011404 	.word	0x08011404
 8003e00:	08011408 	.word	0x08011408
 8003e04:	08011450 	.word	0x08011450
 8003e08:	0801145c 	.word	0x0801145c
 8003e0c:	08011470 	.word	0x08011470
 8003e10:	08011484 	.word	0x08011484
 8003e14:	08011498 	.word	0x08011498
 8003e18:	080114ac 	.word	0x080114ac
 8003e1c:	080114c0 	.word	0x080114c0
 8003e20:	080114d4 	.word	0x080114d4
 8003e24:	080114e8 	.word	0x080114e8
 8003e28:	080114fc 	.word	0x080114fc
//            	paramsModify();
//            }
//            else
//                printf("Parametres incorrects. \r\nSyntaxe : params_modify\r\n");
//        } else
		if(strcmp(tab_args[0], "radio_get") == 0)
 8003e2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	49c6      	ldr	r1, [pc, #792]	; (800414c <shell+0x6b8>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fc f9eb 	bl	8000210 <strcmp>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 8085 	bne.w	8003f4c <shell+0x4b8>
		{
			if(num_args==1)
 8003e42:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d12f      	bne.n	8003eaa <shell+0x416>
			{
				radio_dir_get(&radio_dir);
 8003e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fa0a 	bl	8003268 <radio_dir_get>
				radio_throttle_get(&radio_throttle);
 8003e54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fa5f 	bl	800331c <radio_throttle_get>
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8003e5e:	48bc      	ldr	r0, [pc, #752]	; (8004150 <shell+0x6bc>)
 8003e60:	f008 fc54 	bl	800c70c <puts>
				radio_dir = 0.0;
 8003e64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8003e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e72:	f04f 0200 	mov.w	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
				printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 8003e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7fc fb92 	bl	80005a8 <__aeabi_f2d>
 8003e84:	4604      	mov	r4, r0
 8003e86:	460d      	mov	r5, r1
 8003e88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fb8a 	bl	80005a8 <__aeabi_f2d>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	e9cd 2300 	strd	r2, r3, [sp]
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	462b      	mov	r3, r5
 8003ea0:	48ac      	ldr	r0, [pc, #688]	; (8004154 <shell+0x6c0>)
 8003ea2:	f008 fbad 	bl	800c600 <iprintf>
 8003ea6:	f000 bc2c 	b.w	8004702 <shell+0xc6e>
			}
			else if(num_args==2)
 8003eaa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d148      	bne.n	8003f44 <shell+0x4b0>
			{
				int nb_lectures = atoi(tab_args[1]);
 8003eb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f007 feef 	bl	800bc9c <atoi>
 8003ebe:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
				// Affiche les commandes reçues de la radio
				printf("Direction <-45 .. 45>, Vitesse <-10..10>\r\n");
 8003ec2:	48a3      	ldr	r0, [pc, #652]	; (8004150 <shell+0x6bc>)
 8003ec4:	f008 fc22 	bl	800c70c <puts>
				radio_dir = 0.0;
 8003ec8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
				radio_throttle = 0.0;
 8003ed2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]
				for(i=0;i<nb_lectures;i++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003ee2:	e028      	b.n	8003f36 <shell+0x4a2>
				{
					radio_dir_get(&radio_dir);
 8003ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff f9bd 	bl	8003268 <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 8003eee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fa12 	bl	800331c <radio_throttle_get>
					printf("%f° , %fm/s\r\n", radio_dir, radio_throttle);
 8003ef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fc fb52 	bl	80005a8 <__aeabi_f2d>
 8003f04:	4604      	mov	r4, r0
 8003f06:	460d      	mov	r5, r1
 8003f08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fb4a 	bl	80005a8 <__aeabi_f2d>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	e9cd 2300 	strd	r2, r3, [sp]
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	488c      	ldr	r0, [pc, #560]	; (8004154 <shell+0x6c0>)
 8003f22:	f008 fb6d 	bl	800c600 <iprintf>

					// Rafraichissement de la radio toutes les 16 ms env.
					HAL_Delay(16);
 8003f26:	2010      	movs	r0, #16
 8003f28:	f001 ffe6 	bl	8005ef8 <HAL_Delay>
				for(i=0;i<nb_lectures;i++)
 8003f2c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003f30:	3301      	adds	r3, #1
 8003f32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8003f36:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8003f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	dbd0      	blt.n	8003ee4 <shell+0x450>
 8003f42:	e3de      	b.n	8004702 <shell+0xc6e>
				}
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : radio_get <nb_lectures=1>\r\n");
 8003f44:	4884      	ldr	r0, [pc, #528]	; (8004158 <shell+0x6c4>)
 8003f46:	f008 fbe1 	bl	800c70c <puts>
 8003f4a:	e3da      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "vehicule_throttle_set") == 0)
 8003f4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4982      	ldr	r1, [pc, #520]	; (800415c <shell+0x6c8>)
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fc f95b 	bl	8000210 <strcmp>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d12f      	bne.n	8003fc0 <shell+0x52c>
		{
			if(num_args==2)
 8003f60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d127      	bne.n	8003fb8 <shell+0x524>
			{
				float valeur = atof(tab_args[1]);
 8003f68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f007 fe91 	bl	800bc96 <atof>
 8003f74:	ec53 2b10 	vmov	r2, r3, d0
 8003f78:	4610      	mov	r0, r2
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f7fc fe64 	bl	8000c48 <__aeabi_d2f>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

				if((valeur >= -10.0) && (valeur <= 10.0))
 8003f86:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8003f8a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f96:	f2c0 83b4 	blt.w	8004702 <shell+0xc6e>
 8003f9a:	edd7 7a54 	vldr	s15, [r7, #336]	; 0x150
 8003f9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	f200 83aa 	bhi.w	8004702 <shell+0xc6e>
					vehicule_throttle_set(valeur);
 8003fae:	ed97 0a54 	vldr	s0, [r7, #336]	; 0x150
 8003fb2:	f7ff fb5d 	bl	8003670 <vehicule_throttle_set>
 8003fb6:	e3a4      	b.n	8004702 <shell+0xc6e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 8003fb8:	4869      	ldr	r0, [pc, #420]	; (8004160 <shell+0x6cc>)
 8003fba:	f008 fba7 	bl	800c70c <puts>
 8003fbe:	e3a0      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "vehicule_dir_set") == 0)
 8003fc0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4967      	ldr	r1, [pc, #412]	; (8004164 <shell+0x6d0>)
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc f921 	bl	8000210 <strcmp>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d138      	bne.n	8004046 <shell+0x5b2>
		{
			if(num_args==2)
 8003fd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d130      	bne.n	800403e <shell+0x5aa>
			{
				float valeur = atof(tab_args[1]);
 8003fdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f007 fe57 	bl	800bc96 <atof>
 8003fe8:	ec53 2b10 	vmov	r2, r3, d0
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f7fc fe2a 	bl	8000c48 <__aeabi_d2f>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				printf("%f\r\n", valeur);
 8003ffa:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8003ffe:	f7fc fad3 	bl	80005a8 <__aeabi_f2d>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4858      	ldr	r0, [pc, #352]	; (8004168 <shell+0x6d4>)
 8004008:	f008 fafa 	bl	800c600 <iprintf>

				if((valeur >= -26.0) && (valeur <= 26.0))
 800400c:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8004010:	eebb 7a0a 	vmov.f32	s14, #186	; 0xc1d00000 -26.0
 8004014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401c:	f2c0 8371 	blt.w	8004702 <shell+0xc6e>
 8004020:	edd7 7a55 	vldr	s15, [r7, #340]	; 0x154
 8004024:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004030:	f200 8367 	bhi.w	8004702 <shell+0xc6e>
					vehicule_dir_set(valeur);
 8004034:	ed97 0a55 	vldr	s0, [r7, #340]	; 0x154
 8004038:	f7ff fad8 	bl	80035ec <vehicule_dir_set>
 800403c:	e361      	b.n	8004702 <shell+0xc6e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_dir_set <-26.0 ... 26.0>\r\n");
 800403e:	484b      	ldr	r0, [pc, #300]	; (800416c <shell+0x6d8>)
 8004040:	f008 fb64 	bl	800c70c <puts>
 8004044:	e35d      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "vehicule_speed_get") == 0)
 8004046:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4948      	ldr	r1, [pc, #288]	; (8004170 <shell+0x6dc>)
 800404e:	4618      	mov	r0, r3
 8004050:	f7fc f8de 	bl	8000210 <strcmp>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	f040 8094 	bne.w	8004184 <shell+0x6f0>
		{
			if(num_args==1)
 800405c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d16f      	bne.n	8004144 <shell+0x6b0>
			{

				printf("Iteration; vitesse_cmd; distance; speed; speed_aimant\r\n");
 8004064:	4843      	ldr	r0, [pc, #268]	; (8004174 <shell+0x6e0>)
 8004066:	f008 fb51 	bl	800c70c <puts>
				nb_lectures = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
				vehicule_distance_aimant_reset();
 8004070:	f7ff faae 	bl	80035d0 <vehicule_distance_aimant_reset>
				do {
					nb_lectures++;
 8004074:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004078:	3301      	adds	r3, #1
 800407a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

					vehicule_distance_aimant_get(&distance);
 800407e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fa78 	bl	8003578 <vehicule_distance_aimant_get>
					vehicule_speed_get(&speed);
 8004088:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff f9d5 	bl	800343c <vehicule_speed_get>
					vehicule_speed_aimant_get(&speed_aimant);
 8004092:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fa1a 	bl	80034d0 <vehicule_speed_aimant_get>

					// Pilotage par la télécommande
					radio_dir_get(&radio_dir);
 800409c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7ff f8e1 	bl	8003268 <radio_dir_get>
					radio_throttle_get(&radio_throttle);
 80040a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f936 	bl	800331c <radio_throttle_get>
					vehicule_dir_set(radio_dir);
 80040b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040b4:	edd3 7a00 	vldr	s15, [r3]
 80040b8:	eeb0 0a67 	vmov.f32	s0, s15
 80040bc:	f7ff fa96 	bl	80035ec <vehicule_dir_set>
					vehicule_throttle_set(radio_throttle);
 80040c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040c4:	edd3 7a00 	vldr	s15, [r3]
 80040c8:	eeb0 0a67 	vmov.f32	s0, s15
 80040cc:	f7ff fad0 	bl	8003670 <vehicule_throttle_set>

					printf("%d; %f; %f; %f; %f\r\n", nb_lectures, radio_throttle, distance, speed, speed_aimant);
 80040d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fc fa66 	bl	80005a8 <__aeabi_f2d>
 80040dc:	4682      	mov	sl, r0
 80040de:	468b      	mov	fp, r1
 80040e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fa5e 	bl	80005a8 <__aeabi_f2d>
 80040ec:	4604      	mov	r4, r0
 80040ee:	460d      	mov	r5, r1
 80040f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa56 	bl	80005a8 <__aeabi_f2d>
 80040fc:	4680      	mov	r8, r0
 80040fe:	4689      	mov	r9, r1
 8004100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc fa4e 	bl	80005a8 <__aeabi_f2d>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004114:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004118:	e9cd 4500 	strd	r4, r5, [sp]
 800411c:	4652      	mov	r2, sl
 800411e:	465b      	mov	r3, fp
 8004120:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8004124:	4814      	ldr	r0, [pc, #80]	; (8004178 <shell+0x6e4>)
 8004126:	f008 fa6b 	bl	800c600 <iprintf>

					HAL_Delay(10);
 800412a:	200a      	movs	r0, #10
 800412c:	f001 fee4 	bl	8005ef8 <HAL_Delay>
					// Acquisition sur 10 s
				} while(nb_lectures<1000);
 8004130:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004138:	db9c      	blt.n	8004074 <shell+0x5e0>

				// Remise à 0 de la vitesse
				vehicule_throttle_set(0.0);
 800413a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800417c <shell+0x6e8>
 800413e:	f7ff fa97 	bl	8003670 <vehicule_throttle_set>
 8004142:	e2de      	b.n	8004702 <shell+0xc6e>

			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : vehicule_speed_get \r\n");
 8004144:	480e      	ldr	r0, [pc, #56]	; (8004180 <shell+0x6ec>)
 8004146:	f008 fae1 	bl	800c70c <puts>
 800414a:	e2da      	b.n	8004702 <shell+0xc6e>
 800414c:	0801152c 	.word	0x0801152c
 8004150:	08011538 	.word	0x08011538
 8004154:	08011564 	.word	0x08011564
 8004158:	08011574 	.word	0x08011574
 800415c:	080115b4 	.word	0x080115b4
 8004160:	080115cc 	.word	0x080115cc
 8004164:	08011618 	.word	0x08011618
 8004168:	0801162c 	.word	0x0801162c
 800416c:	08011634 	.word	0x08011634
 8004170:	0801167c 	.word	0x0801167c
 8004174:	08011690 	.word	0x08011690
 8004178:	080116c8 	.word	0x080116c8
 800417c:	00000000 	.word	0x00000000
 8004180:	080116e0 	.word	0x080116e0
		} else
		if(strcmp(tab_args[0], "lidar_get") == 0)
 8004184:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	49bb      	ldr	r1, [pc, #748]	; (8004478 <shell+0x9e4>)
 800418c:	4618      	mov	r0, r3
 800418e:	f7fc f83f 	bl	8000210 <strcmp>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d171      	bne.n	800427c <shell+0x7e8>
		{
			if(num_args==1)
 8004198:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d169      	bne.n	8004274 <shell+0x7e0>
			{
				nb_lectures = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

				printf("buffer_uart = %x, %x, %x, %x, %x, %x, %x, %x, %x, %x\r\n",
 80041a6:	4bb5      	ldr	r3, [pc, #724]	; (800447c <shell+0x9e8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	4bb3      	ldr	r3, [pc, #716]	; (800447c <shell+0x9e8>)
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	613a      	str	r2, [r7, #16]
 80041b2:	4bb2      	ldr	r3, [pc, #712]	; (800447c <shell+0x9e8>)
 80041b4:	6898      	ldr	r0, [r3, #8]
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	4bb0      	ldr	r3, [pc, #704]	; (800447c <shell+0x9e8>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4aaf      	ldr	r2, [pc, #700]	; (800447c <shell+0x9e8>)
 80041be:	6912      	ldr	r2, [r2, #16]
 80041c0:	49ae      	ldr	r1, [pc, #696]	; (800447c <shell+0x9e8>)
 80041c2:	6949      	ldr	r1, [r1, #20]
 80041c4:	48ad      	ldr	r0, [pc, #692]	; (800447c <shell+0x9e8>)
 80041c6:	6980      	ldr	r0, [r0, #24]
 80041c8:	4cac      	ldr	r4, [pc, #688]	; (800447c <shell+0x9e8>)
 80041ca:	69e4      	ldr	r4, [r4, #28]
 80041cc:	4dab      	ldr	r5, [pc, #684]	; (800447c <shell+0x9e8>)
 80041ce:	6a2d      	ldr	r5, [r5, #32]
 80041d0:	4eaa      	ldr	r6, [pc, #680]	; (800447c <shell+0x9e8>)
 80041d2:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80041d4:	9606      	str	r6, [sp, #24]
 80041d6:	9505      	str	r5, [sp, #20]
 80041d8:	9404      	str	r4, [sp, #16]
 80041da:	9003      	str	r0, [sp, #12]
 80041dc:	9102      	str	r1, [sp, #8]
 80041de:	9201      	str	r2, [sp, #4]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	69b9      	ldr	r1, [r7, #24]
 80041e8:	48a5      	ldr	r0, [pc, #660]	; (8004480 <shell+0x9ec>)
 80041ea:	f008 fa09 	bl	800c600 <iprintf>
						buffer_uart5[0], buffer_uart5[1], buffer_uart5[2], buffer_uart5[3], buffer_uart5[4], buffer_uart5[5],
						buffer_uart5[6], buffer_uart5[7], buffer_uart5[8], buffer_uart5[9]
						);

				do {
					tfminiplus_getLastAcquisition(MINILIDAR_GAUCHE, &lidar_distance_gauche, &lidar_rssi, &lidar_temperature);
 80041ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80041fa:	2001      	movs	r0, #1
 80041fc:	f001 fc5a 	bl	8005ab4 <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_DROIT, &lidar_distance_droite, &lidar_rssi, &lidar_temperature);
 8004200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004204:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004208:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800420c:	2000      	movs	r0, #0
 800420e:	f001 fc51 	bl	8005ab4 <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_AVANT, &lidar_distance_avant, &lidar_rssi, &lidar_temperature);
 8004212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800421a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800421e:	2003      	movs	r0, #3
 8004220:	f001 fc48 	bl	8005ab4 <tfminiplus_getLastAcquisition>
					tfminiplus_getLastAcquisition(MINILIDAR_HAUT, &lidar_distance_haut, &lidar_rssi, &lidar_temperature);
 8004224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004228:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800422c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004230:	2002      	movs	r0, #2
 8004232:	f001 fc3f 	bl	8005ab4 <tfminiplus_getLastAcquisition>

					printf("Gauche : %ld cm, Avant : %ld cm, Haut : %ld cm, Droit : %ld cm\r\n",
 8004236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	4603      	mov	r3, r0
 8004252:	488c      	ldr	r0, [pc, #560]	; (8004484 <shell+0x9f0>)
 8004254:	f008 f9d4 	bl	800c600 <iprintf>
							lidar_distance_gauche, lidar_distance_avant, lidar_distance_haut, lidar_distance_droite);

					HAL_Delay(1000);
 8004258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800425c:	f001 fe4c 	bl	8005ef8 <HAL_Delay>
					nb_lectures++;
 8004260:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004264:	3301      	adds	r3, #1
 8004266:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
				}while(nb_lectures<120);
 800426a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800426e:	2b77      	cmp	r3, #119	; 0x77
 8004270:	ddbd      	ble.n	80041ee <shell+0x75a>
 8004272:	e246      	b.n	8004702 <shell+0xc6e>

			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : lidar_get \r\n");
 8004274:	4884      	ldr	r0, [pc, #528]	; (8004488 <shell+0x9f4>)
 8004276:	f008 fa49 	bl	800c70c <puts>
 800427a:	e242      	b.n	8004702 <shell+0xc6e>
//				printf(".\r\n");
//			}
//			else
//				printf("Parametres incorrects. \r\nSyntaxe : gyro_variance\r\n");
//		} else
		if(strcmp(tab_args[0], "paramconf_restaure") == 0)
 800427c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4982      	ldr	r1, [pc, #520]	; (800448c <shell+0x9f8>)
 8004284:	4618      	mov	r0, r3
 8004286:	f7fb ffc3 	bl	8000210 <strcmp>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <shell+0x812>
		{
			if(num_args==1)
 8004290:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d102      	bne.n	800429e <shell+0x80a>
			{
				paramConf_restaure();
 8004298:	f7fe fdcc 	bl	8002e34 <paramConf_restaure>
 800429c:	e231      	b.n	8004702 <shell+0xc6e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_restaure\r\n");
 800429e:	487c      	ldr	r0, [pc, #496]	; (8004490 <shell+0x9fc>)
 80042a0:	f008 fa34 	bl	800c70c <puts>
 80042a4:	e22d      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "paramconf_sauvegarde") == 0)
 80042a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4979      	ldr	r1, [pc, #484]	; (8004494 <shell+0xa00>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fb ffae 	bl	8000210 <strcmp>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10a      	bne.n	80042d0 <shell+0x83c>
		{
			if(num_args==1)
 80042ba:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d102      	bne.n	80042c8 <shell+0x834>
			{
				paramConf_sauvegarde();
 80042c2:	f7fe fded 	bl	8002ea0 <paramConf_sauvegarde>
 80042c6:	e21c      	b.n	8004702 <shell+0xc6e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_sauvegarde\r\n");
 80042c8:	4873      	ldr	r0, [pc, #460]	; (8004498 <shell+0xa04>)
 80042ca:	f008 fa1f 	bl	800c70c <puts>
 80042ce:	e218      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "paramconf_lecture") == 0)
 80042d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4971      	ldr	r1, [pc, #452]	; (800449c <shell+0xa08>)
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fb ff99 	bl	8000210 <strcmp>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <shell+0x866>
		{
			if(num_args==1)
 80042e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d102      	bne.n	80042f2 <shell+0x85e>
			{
				paramConf_lecture();
 80042ec:	f7fe fde0 	bl	8002eb0 <paramConf_lecture>
 80042f0:	e207      	b.n	8004702 <shell+0xc6e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_lecture\r\n");
 80042f2:	486b      	ldr	r0, [pc, #428]	; (80044a0 <shell+0xa0c>)
 80042f4:	f008 fa0a 	bl	800c70c <puts>
 80042f8:	e203      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "paramconf_modification") == 0)
 80042fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4968      	ldr	r1, [pc, #416]	; (80044a4 <shell+0xa10>)
 8004302:	4618      	mov	r0, r3
 8004304:	f7fb ff84 	bl	8000210 <strcmp>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 80ce 	bne.w	80044ac <shell+0xa18>
		{
			if(num_args==12)
 8004310:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004314:	2b0c      	cmp	r3, #12
 8004316:	f040 80ab 	bne.w	8004470 <shell+0x9dc>
			{
				paramConf_modification(
						atof(tab_args[1]), atof(tab_args[2]), atof(tab_args[3]),
 800431a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4618      	mov	r0, r3
 8004322:	f007 fcb8 	bl	800bc96 <atof>
 8004326:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	f7fc fc8b 	bl	8000c48 <__aeabi_d2f>
 8004332:	4604      	mov	r4, r0
						atof(tab_args[1]), atof(tab_args[2]), atof(tab_args[3]),
 8004334:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f007 fcab 	bl	800bc96 <atof>
 8004340:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f7fc fc7e 	bl	8000c48 <__aeabi_d2f>
 800434c:	4605      	mov	r5, r0
						atof(tab_args[1]), atof(tab_args[2]), atof(tab_args[3]),
 800434e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	4618      	mov	r0, r3
 8004356:	f007 fc9e 	bl	800bc96 <atof>
 800435a:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f7fc fc71 	bl	8000c48 <__aeabi_d2f>
 8004366:	4606      	mov	r6, r0
						atof(tab_args[4]), atof(tab_args[5]), atof(tab_args[6]),
 8004368:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	4618      	mov	r0, r3
 8004370:	f007 fc91 	bl	800bc96 <atof>
 8004374:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	f7fc fc64 	bl	8000c48 <__aeabi_d2f>
 8004380:	4680      	mov	r8, r0
						atof(tab_args[4]), atof(tab_args[5]), atof(tab_args[6]),
 8004382:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4618      	mov	r0, r3
 800438a:	f007 fc84 	bl	800bc96 <atof>
 800438e:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	f7fc fc57 	bl	8000c48 <__aeabi_d2f>
 800439a:	4681      	mov	r9, r0
						atof(tab_args[4]), atof(tab_args[5]), atof(tab_args[6]),
 800439c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f007 fc77 	bl	800bc96 <atof>
 80043a8:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	f7fc fc4a 	bl	8000c48 <__aeabi_d2f>
 80043b4:	4682      	mov	sl, r0
						atof(tab_args[7]), atof(tab_args[8]), atof(tab_args[9]),
 80043b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	4618      	mov	r0, r3
 80043be:	f007 fc6a 	bl	800bc96 <atof>
 80043c2:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f7fc fc3d 	bl	8000c48 <__aeabi_d2f>
 80043ce:	4683      	mov	fp, r0
						atof(tab_args[7]), atof(tab_args[8]), atof(tab_args[9]),
 80043d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f007 fc5d 	bl	800bc96 <atof>
 80043dc:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7fc fc30 	bl	8000c48 <__aeabi_d2f>
 80043e8:	ee08 0a10 	vmov	s16, r0
						atof(tab_args[7]), atof(tab_args[8]), atof(tab_args[9]),
 80043ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f007 fc4f 	bl	800bc96 <atof>
 80043f8:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 80043fc:	4610      	mov	r0, r2
 80043fe:	4619      	mov	r1, r3
 8004400:	f7fc fc22 	bl	8000c48 <__aeabi_d2f>
 8004404:	ee08 0a90 	vmov	s17, r0
						atof(tab_args[10]), atof(tab_args[11]));
 8004408:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	4618      	mov	r0, r3
 8004410:	f007 fc41 	bl	800bc96 <atof>
 8004414:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f7fc fc14 	bl	8000c48 <__aeabi_d2f>
 8004420:	ee09 0a10 	vmov	s18, r0
						atof(tab_args[10]), atof(tab_args[11]));
 8004424:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4618      	mov	r0, r3
 800442c:	f007 fc33 	bl	800bc96 <atof>
 8004430:	ec53 2b10 	vmov	r2, r3, d0
				paramConf_modification(
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	f7fc fc06 	bl	8000c48 <__aeabi_d2f>
 800443c:	4603      	mov	r3, r0
 800443e:	ee05 3a10 	vmov	s10, r3
 8004442:	eef0 4a49 	vmov.f32	s9, s18
 8004446:	eeb0 4a68 	vmov.f32	s8, s17
 800444a:	eef0 3a48 	vmov.f32	s7, s16
 800444e:	ee03 ba10 	vmov	s6, fp
 8004452:	ee02 aa90 	vmov	s5, sl
 8004456:	ee02 9a10 	vmov	s4, r9
 800445a:	ee01 8a90 	vmov	s3, r8
 800445e:	ee01 6a10 	vmov	s2, r6
 8004462:	ee00 5a90 	vmov	s1, r5
 8004466:	ee00 4a10 	vmov	s0, r4
 800446a:	f7fe fda1 	bl	8002fb0 <paramConf_modification>
 800446e:	e148      	b.n	8004702 <shell+0xc6e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : paramconf_modification <N parametres>\r\n");
 8004470:	480d      	ldr	r0, [pc, #52]	; (80044a8 <shell+0xa14>)
 8004472:	f008 f94b 	bl	800c70c <puts>
 8004476:	e144      	b.n	8004702 <shell+0xc6e>
 8004478:	08011718 	.word	0x08011718
 800447c:	20000c60 	.word	0x20000c60
 8004480:	08011724 	.word	0x08011724
 8004484:	0801175c 	.word	0x0801175c
 8004488:	080117a0 	.word	0x080117a0
 800448c:	080117d0 	.word	0x080117d0
 8004490:	080117e4 	.word	0x080117e4
 8004494:	0801181c 	.word	0x0801181c
 8004498:	08011834 	.word	0x08011834
 800449c:	08011870 	.word	0x08011870
 80044a0:	08011884 	.word	0x08011884
 80044a4:	080118bc 	.word	0x080118bc
 80044a8:	080118d4 	.word	0x080118d4
		} else
		if(strcmp(tab_args[0], "telemetrie") == 0)
 80044ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	499b      	ldr	r1, [pc, #620]	; (8004720 <shell+0xc8c>)
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fb feab 	bl	8000210 <strcmp>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d178      	bne.n	80045b2 <shell+0xb1e>
		{
			if(num_args==1)
 80044c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d170      	bne.n	80045aa <shell+0xb16>
			{
				pTeleElement = telemetrie_pt_lecture_en_cours();
 80044c8:	f001 f80c 	bl	80054e4 <telemetrie_pt_lecture_en_cours>
 80044cc:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
				do {
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
							pTeleElement->consigne_vitesse, pTeleElement->consigne_direction,
 80044d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80044d4:	681b      	ldr	r3, [r3, #0]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc f866 	bl	80005a8 <__aeabi_f2d>
 80044dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
							pTeleElement->consigne_vitesse, pTeleElement->consigne_direction,
 80044e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80044e4:	685b      	ldr	r3, [r3, #4]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc f85e 	bl	80005a8 <__aeabi_f2d>
 80044ec:	4680      	mov	r8, r0
 80044ee:	4689      	mov	r9, r1
							pTeleElement->mesure_vitesse, pTeleElement->heading,
 80044f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80044f4:	689b      	ldr	r3, [r3, #8]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fc f856 	bl	80005a8 <__aeabi_f2d>
 80044fc:	4682      	mov	sl, r0
 80044fe:	468b      	mov	fp, r1
							pTeleElement->mesure_vitesse, pTeleElement->heading,
 8004500:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 8004506:	4618      	mov	r0, r3
 8004508:	f7fc f84e 	bl	80005a8 <__aeabi_f2d>
 800450c:	4605      	mov	r5, r0
 800450e:	460e      	mov	r6, r1
							pTeleElement->gyro_dps, pTeleElement->mesure_distance,
 8004510:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc f846 	bl	80005a8 <__aeabi_f2d>
 800451c:	e9c7 0104 	strd	r0, r1, [r7, #16]
							pTeleElement->gyro_dps, pTeleElement->mesure_distance,
 8004520:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004524:	68db      	ldr	r3, [r3, #12]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc f83e 	bl	80005a8 <__aeabi_f2d>
							(int)pTeleElement->lidar_droit, (int)pTeleElement->lidar_gauche,
 800452c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004538:	695c      	ldr	r4, [r3, #20]
 800453a:	60bc      	str	r4, [r7, #8]
							(int)pTeleElement->lidar_avant, (int)pTeleElement->lidar_haut,
 800453c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004548:	69da      	ldr	r2, [r3, #28]
							pTeleElement->etat_automate_principal, pTeleElement->etat_automate_auto);
 800454a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800454e:	f893 3020 	ldrb.w	r3, [r3, #32]
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 8004552:	461c      	mov	r4, r3
							pTeleElement->etat_automate_principal, pTeleElement->etat_automate_auto);
 8004554:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004558:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
					printf("T;%f;%f;%f;%f;%f;%f;%d;%d;%d;%d;%d;%d\r\n",
 800455c:	930f      	str	r3, [sp, #60]	; 0x3c
 800455e:	940e      	str	r4, [sp, #56]	; 0x38
 8004560:	920d      	str	r2, [sp, #52]	; 0x34
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	920c      	str	r2, [sp, #48]	; 0x30
 8004566:	68bc      	ldr	r4, [r7, #8]
 8004568:	940b      	str	r4, [sp, #44]	; 0x2c
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	930a      	str	r3, [sp, #40]	; 0x28
 800456e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004572:	ed97 7b04 	vldr	d7, [r7, #16]
 8004576:	ed8d 7b06 	vstr	d7, [sp, #24]
 800457a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800457e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8004582:	e9cd 8900 	strd	r8, r9, [sp]
 8004586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800458a:	4866      	ldr	r0, [pc, #408]	; (8004724 <shell+0xc90>)
 800458c:	f008 f838 	bl	800c600 <iprintf>

					pTeleElement = telemetrie_pt_lecture_suivant(&erreur);
 8004590:	f107 0320 	add.w	r3, r7, #32
 8004594:	4618      	mov	r0, r3
 8004596:	f000 ffbb 	bl	8005510 <telemetrie_pt_lecture_suivant>
 800459a:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
				} while(erreur == 0);
 800459e:	f107 0320 	add.w	r3, r7, #32
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d093      	beq.n	80044d0 <shell+0xa3c>
 80045a8:	e0ab      	b.n	8004702 <shell+0xc6e>
			} else
				printf("Parametres incorrects. \r\nSyntaxe : telemetrie\r\n");
 80045aa:	485f      	ldr	r0, [pc, #380]	; (8004728 <shell+0xc94>)
 80045ac:	f008 f8ae 	bl	800c70c <puts>
 80045b0:	e0a7      	b.n	8004702 <shell+0xc6e>
		} else
		if(strcmp(tab_args[0], "gyro_heading_get") == 0)
 80045b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	495c      	ldr	r1, [pc, #368]	; (800472c <shell+0xc98>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fb fe28 	bl	8000210 <strcmp>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d136      	bne.n	8004634 <shell+0xba0>
		{
			if(num_args==1)
 80045c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d12e      	bne.n	800462c <shell+0xb98>
			{
				int nb_lectures;
				printf("Iteration; heading; dps\r\n");
 80045ce:	4858      	ldr	r0, [pc, #352]	; (8004730 <shell+0xc9c>)
 80045d0:	f008 f89c 	bl	800c70c <puts>
				nb_lectures = 0;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
				do {
					nb_lectures++;
 80045da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80045de:	3301      	adds	r3, #1
 80045e0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

					printf("%d; %f; %f\r\n", nb_lectures, gyro_get_heading(), gyro_get_dps());
 80045e4:	f7fd f966 	bl	80018b4 <gyro_get_heading>
 80045e8:	ee10 3a10 	vmov	r3, s0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb ffdb 	bl	80005a8 <__aeabi_f2d>
 80045f2:	4604      	mov	r4, r0
 80045f4:	460d      	mov	r5, r1
 80045f6:	f7fd f93d 	bl	8001874 <gyro_get_dps>
 80045fa:	ee10 3a10 	vmov	r3, s0
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ffd2 	bl	80005a8 <__aeabi_f2d>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	e9cd 2300 	strd	r2, r3, [sp]
 800460c:	4622      	mov	r2, r4
 800460e:	462b      	mov	r3, r5
 8004610:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004614:	4847      	ldr	r0, [pc, #284]	; (8004734 <shell+0xca0>)
 8004616:	f007 fff3 	bl	800c600 <iprintf>

					HAL_Delay(10);
 800461a:	200a      	movs	r0, #10
 800461c:	f001 fc6c 	bl	8005ef8 <HAL_Delay>
					// Acquisition sur 10 s
				} while(nb_lectures<1000);
 8004620:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004628:	dbd7      	blt.n	80045da <shell+0xb46>
 800462a:	e06a      	b.n	8004702 <shell+0xc6e>
			}
			else
				printf("Parametres incorrects. \r\nSyntaxe : gyro_heading_get \r\n");
 800462c:	4842      	ldr	r0, [pc, #264]	; (8004738 <shell+0xca4>)
 800462e:	f008 f86d 	bl	800c70c <puts>
 8004632:	e066      	b.n	8004702 <shell+0xc6e>
		} else
        if(strcmp(tab_args[0], "reset") == 0)
 8004634:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4940      	ldr	r1, [pc, #256]	; (800473c <shell+0xca8>)
 800463c:	4618      	mov	r0, r3
 800463e:	f7fb fde7 	bl	8000210 <strcmp>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <shell+0xbb8>
        {
            // Reset
            NVIC_SystemReset();
 8004648:	f7ff f8ea 	bl	8003820 <__NVIC_SystemReset>
        } else
		if(strcmp(tab_args[0], "quit") == 0)
 800464c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	493b      	ldr	r1, [pc, #236]	; (8004740 <shell+0xcac>)
 8004654:	4618      	mov	r0, r3
 8004656:	f7fb fddb 	bl	8000210 <strcmp>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d103      	bne.n	8004668 <shell+0xbd4>
		{
			// Quitter le shell
			quitter = 1;
 8004660:	2301      	movs	r3, #1
 8004662:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004666:	e04c      	b.n	8004702 <shell+0xc6e>
		} else
        if(strcmp(tab_args[0], "help") == 0)
 8004668:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4935      	ldr	r1, [pc, #212]	; (8004744 <shell+0xcb0>)
 8004670:	4618      	mov	r0, r3
 8004672:	f7fb fdcd 	bl	8000210 <strcmp>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d13f      	bne.n	80046fc <shell+0xc68>
        {
            // Help
            printf("Liste des commandes :\r\n");
 800467c:	4832      	ldr	r0, [pc, #200]	; (8004748 <shell+0xcb4>)
 800467e:	f008 f845 	bl	800c70c <puts>
            printf("- hw_led <on/off> <led0/led1/led2/led3>\r\n");
 8004682:	4832      	ldr	r0, [pc, #200]	; (800474c <shell+0xcb8>)
 8004684:	f008 f842 	bl	800c70c <puts>
            printf("         permet d'allumer ou d'eteindre l'une des 4 leds.\r\n");
 8004688:	4831      	ldr	r0, [pc, #196]	; (8004750 <shell+0xcbc>)
 800468a:	f008 f83f 	bl	800c70c <puts>
            printf("- hw_buttons\r\n");
 800468e:	4831      	ldr	r0, [pc, #196]	; (8004754 <shell+0xcc0>)
 8004690:	f008 f83c 	bl	800c70c <puts>
            printf("         permet d'afficher l'etat des boutons.\r\n");
 8004694:	4830      	ldr	r0, [pc, #192]	; (8004758 <shell+0xcc4>)
 8004696:	f008 f839 	bl	800c70c <puts>
//            printf("         permet de charger les parametres depuis la Flash Interne.\r\n");
//            printf("- params_show\r\n");
//            printf("         permet d'afficher les parametres courants\r\n");
//            printf("- params_modify\r\n");
//            printf("         permet de modifier les parametres courants\r\n");
            printf("- radio_get <nb_lectures=1>\r\n");
 800469a:	4830      	ldr	r0, [pc, #192]	; (800475c <shell+0xcc8>)
 800469c:	f008 f836 	bl	800c70c <puts>
            printf("         permet de lire les commandes provenant de la radio.\r\n");
 80046a0:	482f      	ldr	r0, [pc, #188]	; (8004760 <shell+0xccc>)
 80046a2:	f008 f833 	bl	800c70c <puts>
            printf("- vehicule_throttle_set <-10.0 ... 10.0>\r\n");
 80046a6:	482f      	ldr	r0, [pc, #188]	; (8004764 <shell+0xcd0>)
 80046a8:	f008 f830 	bl	800c70c <puts>
            printf("         permet de commander la vitesse du vehicule.\r\n");
 80046ac:	482e      	ldr	r0, [pc, #184]	; (8004768 <shell+0xcd4>)
 80046ae:	f008 f82d 	bl	800c70c <puts>
            printf("- vehicule_dir_set <-26.0 ... 26.0>\r\n");
 80046b2:	482e      	ldr	r0, [pc, #184]	; (800476c <shell+0xcd8>)
 80046b4:	f008 f82a 	bl	800c70c <puts>
            printf("         permet de commander la direction du vehicule.\r\n");
 80046b8:	482d      	ldr	r0, [pc, #180]	; (8004770 <shell+0xcdc>)
 80046ba:	f008 f827 	bl	800c70c <puts>
            printf("- vehicule_speed_get\r\n");
 80046be:	482d      	ldr	r0, [pc, #180]	; (8004774 <shell+0xce0>)
 80046c0:	f008 f824 	bl	800c70c <puts>
            printf("         permet de lire les capteurs de vitesses pour la calibration du capteur BEAST.\r\n");
 80046c4:	482c      	ldr	r0, [pc, #176]	; (8004778 <shell+0xce4>)
 80046c6:	f008 f821 	bl	800c70c <puts>
            printf("- gyro_heading\r\n");
 80046ca:	482c      	ldr	r0, [pc, #176]	; (800477c <shell+0xce8>)
 80046cc:	f008 f81e 	bl	800c70c <puts>
            printf("         permet de lire le cap en boucle.\r\n");
 80046d0:	482b      	ldr	r0, [pc, #172]	; (8004780 <shell+0xcec>)
 80046d2:	f008 f81b 	bl	800c70c <puts>
            printf("- reset\r\n");
 80046d6:	482b      	ldr	r0, [pc, #172]	; (8004784 <shell+0xcf0>)
 80046d8:	f008 f818 	bl	800c70c <puts>
            printf("         permet de reseter le robot.\r\n");
 80046dc:	482a      	ldr	r0, [pc, #168]	; (8004788 <shell+0xcf4>)
 80046de:	f008 f815 	bl	800c70c <puts>
            printf("- quit\r\n");
 80046e2:	482a      	ldr	r0, [pc, #168]	; (800478c <shell+0xcf8>)
 80046e4:	f008 f812 	bl	800c70c <puts>
            printf("         permet de sortir du shell.\r\n");
 80046e8:	4829      	ldr	r0, [pc, #164]	; (8004790 <shell+0xcfc>)
 80046ea:	f008 f80f 	bl	800c70c <puts>
            printf("- version\r\n");
 80046ee:	4829      	ldr	r0, [pc, #164]	; (8004794 <shell+0xd00>)
 80046f0:	f008 f80c 	bl	800c70c <puts>
            printf("         permet d'obtenir la version logicielle.\r\n");
 80046f4:	4828      	ldr	r0, [pc, #160]	; (8004798 <shell+0xd04>)
 80046f6:	f008 f809 	bl	800c70c <puts>
 80046fa:	e002      	b.n	8004702 <shell+0xc6e>
        } else
        {
            printf("Commande inconnue !\r\n");
 80046fc:	4827      	ldr	r0, [pc, #156]	; (800479c <shell+0xd08>)
 80046fe:	f008 f805 	bl	800c70c <puts>
        }

    } while(quitter == 0);
 8004702:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004706:	2b00      	cmp	r3, #0
 8004708:	f43f a9ea 	beq.w	8003ae0 <shell+0x4c>
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8004714:	46bd      	mov	sp, r7
 8004716:	ecbd 8b04 	vpop	{d8-d9}
 800471a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471e:	bf00      	nop
 8004720:	08011920 	.word	0x08011920
 8004724:	0801192c 	.word	0x0801192c
 8004728:	08011954 	.word	0x08011954
 800472c:	08011984 	.word	0x08011984
 8004730:	08011998 	.word	0x08011998
 8004734:	080119b4 	.word	0x080119b4
 8004738:	080119c4 	.word	0x080119c4
 800473c:	080119fc 	.word	0x080119fc
 8004740:	08011a04 	.word	0x08011a04
 8004744:	08011a0c 	.word	0x08011a0c
 8004748:	08011a14 	.word	0x08011a14
 800474c:	08011a2c 	.word	0x08011a2c
 8004750:	08011a58 	.word	0x08011a58
 8004754:	08011a94 	.word	0x08011a94
 8004758:	08011aa4 	.word	0x08011aa4
 800475c:	08011ad4 	.word	0x08011ad4
 8004760:	08011af4 	.word	0x08011af4
 8004764:	08011b34 	.word	0x08011b34
 8004768:	08011b60 	.word	0x08011b60
 800476c:	08011b98 	.word	0x08011b98
 8004770:	08011bc0 	.word	0x08011bc0
 8004774:	08011bf8 	.word	0x08011bf8
 8004778:	08011c10 	.word	0x08011c10
 800477c:	08011c68 	.word	0x08011c68
 8004780:	08011c78 	.word	0x08011c78
 8004784:	08011ca4 	.word	0x08011ca4
 8004788:	08011cb0 	.word	0x08011cb0
 800478c:	08011cd8 	.word	0x08011cd8
 8004790:	08011ce0 	.word	0x08011ce0
 8004794:	08011d08 	.word	0x08011d08
 8004798:	08011d14 	.word	0x08011d14
 800479c:	08011d48 	.word	0x08011d48

080047a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <HAL_MspInit+0x44>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <HAL_MspInit+0x44>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6413      	str	r3, [r2, #64]	; 0x40
 80047b2:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_MspInit+0x44>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_MspInit+0x44>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c2:	4a08      	ldr	r2, [pc, #32]	; (80047e4 <HAL_MspInit+0x44>)
 80047c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047c8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_MspInit+0x44>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40023800 	.word	0x40023800

080047e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08e      	sub	sp, #56	; 0x38
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	605a      	str	r2, [r3, #4]
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a4b      	ldr	r2, [pc, #300]	; (8004934 <HAL_ADC_MspInit+0x14c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d13c      	bne.n	8004884 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800480a:	4b4b      	ldr	r3, [pc, #300]	; (8004938 <HAL_ADC_MspInit+0x150>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4a4a      	ldr	r2, [pc, #296]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004814:	6453      	str	r3, [r2, #68]	; 0x44
 8004816:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004822:	4b45      	ldr	r3, [pc, #276]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	4a44      	ldr	r2, [pc, #272]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6313      	str	r3, [r2, #48]	; 0x30
 800482e:	4b42      	ldr	r3, [pc, #264]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483a:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <HAL_ADC_MspInit+0x150>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a3e      	ldr	r2, [pc, #248]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	69bb      	ldr	r3, [r7, #24]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = qtr_ch8_Pin|qtr_ch7_Pin|qtr_ch6_Pin|qtr_ch5_Pin
 8004852:	233f      	movs	r3, #63	; 0x3f
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
                          |qtr_ch4_Pin|qtr_ch3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004856:	2303      	movs	r3, #3
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800485e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004862:	4619      	mov	r1, r3
 8004864:	4835      	ldr	r0, [pc, #212]	; (800493c <HAL_ADC_MspInit+0x154>)
 8004866:	f002 fb0f 	bl	8006e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = qtr_ch2_Pin|qtr_ch1_Pin;
 800486a:	2303      	movs	r3, #3
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800486e:	2303      	movs	r3, #3
 8004870:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	2300      	movs	r3, #0
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487a:	4619      	mov	r1, r3
 800487c:	4830      	ldr	r0, [pc, #192]	; (8004940 <HAL_ADC_MspInit+0x158>)
 800487e:	f002 fb03 	bl	8006e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004882:	e053      	b.n	800492c <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2e      	ldr	r2, [pc, #184]	; (8004944 <HAL_ADC_MspInit+0x15c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d124      	bne.n	80048d8 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800488e:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	4a29      	ldr	r2, [pc, #164]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004898:	6453      	str	r3, [r2, #68]	; 0x44
 800489a:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_ADC_MspInit+0x150>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a6:	4b24      	ldr	r3, [pc, #144]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048aa:	4a23      	ldr	r2, [pc, #140]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	6313      	str	r3, [r2, #48]	; 0x30
 80048b2:	4b21      	ldr	r3, [pc, #132]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Vbatt_Pin|Vesc_Pin;
 80048be:	2390      	movs	r3, #144	; 0x90
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048c2:	2303      	movs	r3, #3
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ce:	4619      	mov	r1, r3
 80048d0:	481d      	ldr	r0, [pc, #116]	; (8004948 <HAL_ADC_MspInit+0x160>)
 80048d2:	f002 fad9 	bl	8006e88 <HAL_GPIO_Init>
}
 80048d6:	e029      	b.n	800492c <HAL_ADC_MspInit+0x144>
  else if(hadc->Instance==ADC3)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1b      	ldr	r2, [pc, #108]	; (800494c <HAL_ADC_MspInit+0x164>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d124      	bne.n	800492c <HAL_ADC_MspInit+0x144>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80048e2:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	4a14      	ldr	r2, [pc, #80]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ec:	6453      	str	r3, [r2, #68]	; 0x44
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <HAL_ADC_MspInit+0x150>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	4a0e      	ldr	r2, [pc, #56]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6313      	str	r3, [r2, #48]	; 0x30
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_ADC_MspInit+0x150>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = qtr_ch16_Pin|qtr_ch15_Pin|qtr_ch14_Pin|qtr_ch13_Pin
 8004912:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004918:	2303      	movs	r3, #3
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491c:	2300      	movs	r3, #0
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004924:	4619      	mov	r1, r3
 8004926:	480a      	ldr	r0, [pc, #40]	; (8004950 <HAL_ADC_MspInit+0x168>)
 8004928:	f002 faae 	bl	8006e88 <HAL_GPIO_Init>
}
 800492c:	bf00      	nop
 800492e:	3738      	adds	r7, #56	; 0x38
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40012000 	.word	0x40012000
 8004938:	40023800 	.word	0x40023800
 800493c:	40020800 	.word	0x40020800
 8004940:	40020400 	.word	0x40020400
 8004944:	40012100 	.word	0x40012100
 8004948:	40020000 	.word	0x40020000
 800494c:	40012200 	.word	0x40012200
 8004950:	40021400 	.word	0x40021400

08004954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08a      	sub	sp, #40	; 0x28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
 800496a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a17      	ldr	r2, [pc, #92]	; (80049d0 <HAL_I2C_MspInit+0x7c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d127      	bne.n	80049c6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004976:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_I2C_MspInit+0x80>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_I2C_MspInit+0x80>)
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <HAL_I2C_MspInit+0x80>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800498e:	23c0      	movs	r3, #192	; 0xc0
 8004990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004992:	2312      	movs	r3, #18
 8004994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499a:	2303      	movs	r3, #3
 800499c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800499e:	2304      	movs	r3, #4
 80049a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a2:	f107 0314 	add.w	r3, r7, #20
 80049a6:	4619      	mov	r1, r3
 80049a8:	480b      	ldr	r0, [pc, #44]	; (80049d8 <HAL_I2C_MspInit+0x84>)
 80049aa:	f002 fa6d 	bl	8006e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_I2C_MspInit+0x80>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_I2C_MspInit+0x80>)
 80049b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_I2C_MspInit+0x80>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049c6:	bf00      	nop
 80049c8:	3728      	adds	r7, #40	; 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40005400 	.word	0x40005400
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40020400 	.word	0x40020400

080049dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b092      	sub	sp, #72	; 0x48
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049e8:	2200      	movs	r2, #0
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	605a      	str	r2, [r3, #4]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a83      	ldr	r2, [pc, #524]	; (8004c08 <HAL_TIM_Base_MspInit+0x22c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10c      	bne.n	8004a18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049fe:	4b83      	ldr	r3, [pc, #524]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	4a82      	ldr	r2, [pc, #520]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0a:	4b80      	ldr	r3, [pc, #512]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8004a16:	e0f2      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a20:	d130      	bne.n	8004a84 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a22:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	4a79      	ldr	r2, [pc, #484]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2e:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a3a:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	4a73      	ldr	r2, [pc, #460]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a40:	f043 0301 	orr.w	r3, r3, #1
 8004a44:	6313      	str	r3, [r2, #48]	; 0x30
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = SpeedIn_Pin;
 8004a52:	2320      	movs	r3, #32
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a56:	2302      	movs	r3, #2
 8004a58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a62:	2301      	movs	r3, #1
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedIn_GPIO_Port, &GPIO_InitStruct);
 8004a66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4868      	ldr	r0, [pc, #416]	; (8004c10 <HAL_TIM_Base_MspInit+0x234>)
 8004a6e:	f002 fa0b 	bl	8006e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004a72:	2200      	movs	r2, #0
 8004a74:	2100      	movs	r1, #0
 8004a76:	201c      	movs	r0, #28
 8004a78:	f001 fdc5 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a7c:	201c      	movs	r0, #28
 8004a7e:	f001 fdde 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004a82:	e0bc      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM3)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a62      	ldr	r2, [pc, #392]	; (8004c14 <HAL_TIM_Base_MspInit+0x238>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d130      	bne.n	8004af0 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a92:	4a5e      	ldr	r2, [pc, #376]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a94:	f043 0302 	orr.w	r3, r3, #2
 8004a98:	6413      	str	r3, [r2, #64]	; 0x40
 8004a9a:	4b5c      	ldr	r3, [pc, #368]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa6:	4b59      	ldr	r3, [pc, #356]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ab2:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = DirIn_Pin;
 8004abe:	2340      	movs	r3, #64	; 0x40
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aca:	2300      	movs	r3, #0
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(DirIn_GPIO_Port, &GPIO_InitStruct);
 8004ad2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	484d      	ldr	r0, [pc, #308]	; (8004c10 <HAL_TIM_Base_MspInit+0x234>)
 8004ada:	f002 f9d5 	bl	8006e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004ade:	2200      	movs	r2, #0
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	201d      	movs	r0, #29
 8004ae4:	f001 fd8f 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ae8:	201d      	movs	r0, #29
 8004aea:	f001 fda8 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004aee:	e086      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM4)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a48      	ldr	r2, [pc, #288]	; (8004c18 <HAL_TIM_Base_MspInit+0x23c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d131      	bne.n	8004b5e <HAL_TIM_Base_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004afa:	4b44      	ldr	r3, [pc, #272]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a43      	ldr	r2, [pc, #268]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b12:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	4a3d      	ldr	r2, [pc, #244]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = SpareIn_Pin;
 8004b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b30:	2302      	movs	r3, #2
 8004b32:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b34:	2301      	movs	r3, #1
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpareIn_GPIO_Port, &GPIO_InitStruct);
 8004b40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b44:	4619      	mov	r1, r3
 8004b46:	4835      	ldr	r0, [pc, #212]	; (8004c1c <HAL_TIM_Base_MspInit+0x240>)
 8004b48:	f002 f99e 	bl	8006e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2100      	movs	r1, #0
 8004b50:	201e      	movs	r0, #30
 8004b52:	f001 fd58 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004b56:	201e      	movs	r0, #30
 8004b58:	f001 fd71 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004b5c:	e04f      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM8)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <HAL_TIM_Base_MspInit+0x244>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d114      	bne.n	8004b92 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b68:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	6453      	str	r3, [r2, #68]	; 0x44
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2100      	movs	r1, #0
 8004b84:	202b      	movs	r0, #43	; 0x2b
 8004b86:	f001 fd3e 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004b8a:	202b      	movs	r0, #43	; 0x2b
 8004b8c:	f001 fd57 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004b90:	e035      	b.n	8004bfe <HAL_TIM_Base_MspInit+0x222>
  else if(htim_base->Instance==TIM12)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a23      	ldr	r2, [pc, #140]	; (8004c24 <HAL_TIM_Base_MspInit+0x248>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d130      	bne.n	8004bfe <HAL_TIM_Base_MspInit+0x222>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba8:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc0:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_TIM_Base_MspInit+0x230>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SpeedSensor_Pin;
 8004bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004bde:	2309      	movs	r3, #9
 8004be0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(SpeedSensor_GPIO_Port, &GPIO_InitStruct);
 8004be2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004be6:	4619      	mov	r1, r3
 8004be8:	480f      	ldr	r0, [pc, #60]	; (8004c28 <HAL_TIM_Base_MspInit+0x24c>)
 8004bea:	f002 f94d 	bl	8006e88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	202b      	movs	r0, #43	; 0x2b
 8004bf4:	f001 fd07 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004bf8:	202b      	movs	r0, #43	; 0x2b
 8004bfa:	f001 fd20 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004bfe:	bf00      	nop
 8004c00:	3748      	adds	r7, #72	; 0x48
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40020000 	.word	0x40020000
 8004c14:	40000400 	.word	0x40000400
 8004c18:	40000800 	.word	0x40000800
 8004c1c:	40020c00 	.word	0x40020c00
 8004c20:	40010400 	.word	0x40010400
 8004c24:	40001800 	.word	0x40001800
 8004c28:	40020400 	.word	0x40020400

08004c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	605a      	str	r2, [r3, #4]
 8004c3e:	609a      	str	r2, [r3, #8]
 8004c40:	60da      	str	r2, [r3, #12]
 8004c42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a11      	ldr	r2, [pc, #68]	; (8004c90 <HAL_TIM_MspPostInit+0x64>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d11c      	bne.n	8004c88 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c4e:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_TIM_MspPostInit+0x68>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a10      	ldr	r2, [pc, #64]	; (8004c94 <HAL_TIM_MspPostInit+0x68>)
 8004c54:	f043 0310 	orr.w	r3, r3, #16
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b0e      	ldr	r3, [pc, #56]	; (8004c94 <HAL_TIM_MspPostInit+0x68>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SpeedOut_Pin|DirOut_Pin|SpareOut_Pin;
 8004c66:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8004c6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	4619      	mov	r1, r3
 8004c82:	4805      	ldr	r0, [pc, #20]	; (8004c98 <HAL_TIM_MspPostInit+0x6c>)
 8004c84:	f002 f900 	bl	8006e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004c88:	bf00      	nop
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40021000 	.word	0x40021000

08004c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b096      	sub	sp, #88	; 0x58
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4aa3      	ldr	r2, [pc, #652]	; (8004f48 <HAL_UART_MspInit+0x2ac>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d15e      	bne.n	8004d7c <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004cbe:	4ba3      	ldr	r3, [pc, #652]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4aa2      	ldr	r2, [pc, #648]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004cc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4ba0      	ldr	r3, [pc, #640]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd6:	4b9d      	ldr	r3, [pc, #628]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a9c      	ldr	r2, [pc, #624]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce2:	4b9a      	ldr	r3, [pc, #616]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = lid1_txd_Pin|lid1_rxd_Pin;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004cfe:	2308      	movs	r3, #8
 8004d00:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d06:	4619      	mov	r1, r3
 8004d08:	4891      	ldr	r0, [pc, #580]	; (8004f50 <HAL_UART_MspInit+0x2b4>)
 8004d0a:	f002 f8bd 	bl	8006e88 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8004d0e:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d10:	4a91      	ldr	r2, [pc, #580]	; (8004f58 <HAL_UART_MspInit+0x2bc>)
 8004d12:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8004d14:	4b8f      	ldr	r3, [pc, #572]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d1a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d1c:	4b8d      	ldr	r3, [pc, #564]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d22:	4b8c      	ldr	r3, [pc, #560]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d28:	4b8a      	ldr	r3, [pc, #552]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d2e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d36:	4b87      	ldr	r3, [pc, #540]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004d3c:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d42:	4b84      	ldr	r3, [pc, #528]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d48:	4b82      	ldr	r3, [pc, #520]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8004d4e:	4881      	ldr	r0, [pc, #516]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d50:	f001 fc90 	bl	8006674 <HAL_DMA_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8004d5a:	f7fe f865 	bl	8002e28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a7c      	ldr	r2, [pc, #496]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d62:	671a      	str	r2, [r3, #112]	; 0x70
 8004d64:	4a7b      	ldr	r2, [pc, #492]	; (8004f54 <HAL_UART_MspInit+0x2b8>)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	2034      	movs	r0, #52	; 0x34
 8004d70:	f001 fc49 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004d74:	2034      	movs	r0, #52	; 0x34
 8004d76:	f001 fc62 	bl	800663e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d7a:	e1f0      	b.n	800515e <HAL_UART_MspInit+0x4c2>
  else if(huart->Instance==UART5)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a76      	ldr	r2, [pc, #472]	; (8004f5c <HAL_UART_MspInit+0x2c0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d17b      	bne.n	8004e7e <HAL_UART_MspInit+0x1e2>
    __HAL_RCC_UART5_CLK_ENABLE();
 8004d86:	4b71      	ldr	r3, [pc, #452]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	4a70      	ldr	r2, [pc, #448]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d90:	6413      	str	r3, [r2, #64]	; 0x40
 8004d92:	4b6e      	ldr	r3, [pc, #440]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d9e:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4a6a      	ldr	r2, [pc, #424]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	6313      	str	r3, [r2, #48]	; 0x30
 8004daa:	4b68      	ldr	r3, [pc, #416]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	637b      	str	r3, [r7, #52]	; 0x34
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004db6:	4b65      	ldr	r3, [pc, #404]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	4a64      	ldr	r2, [pc, #400]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004dbc:	f043 0308 	orr.w	r3, r3, #8
 8004dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc2:	4b62      	ldr	r3, [pc, #392]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = lid5_txd_Pin;
 8004dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004de0:	2308      	movs	r3, #8
 8004de2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_txd_GPIO_Port, &GPIO_InitStruct);
 8004de4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004de8:	4619      	mov	r1, r3
 8004dea:	485d      	ldr	r0, [pc, #372]	; (8004f60 <HAL_UART_MspInit+0x2c4>)
 8004dec:	f002 f84c 	bl	8006e88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = lid5_rxd_Pin;
 8004df0:	2304      	movs	r3, #4
 8004df2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df4:	2302      	movs	r3, #2
 8004df6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004e00:	2308      	movs	r3, #8
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(lid5_rxd_GPIO_Port, &GPIO_InitStruct);
 8004e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4856      	ldr	r0, [pc, #344]	; (8004f64 <HAL_UART_MspInit+0x2c8>)
 8004e0c:	f002 f83c 	bl	8006e88 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004e10:	4b55      	ldr	r3, [pc, #340]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e12:	4a56      	ldr	r2, [pc, #344]	; (8004f6c <HAL_UART_MspInit+0x2d0>)
 8004e14:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8004e16:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e1c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e1e:	4b52      	ldr	r3, [pc, #328]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e2a:	4b4f      	ldr	r3, [pc, #316]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e30:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e32:	4b4d      	ldr	r3, [pc, #308]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e38:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e44:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004e50:	4845      	ldr	r0, [pc, #276]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e52:	f001 fc0f 	bl	8006674 <HAL_DMA_Init>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d001      	beq.n	8004e60 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8004e5c:	f7fd ffe4 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a41      	ldr	r2, [pc, #260]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e64:	671a      	str	r2, [r3, #112]	; 0x70
 8004e66:	4a40      	ldr	r2, [pc, #256]	; (8004f68 <HAL_UART_MspInit+0x2cc>)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2035      	movs	r0, #53	; 0x35
 8004e72:	f001 fbc8 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004e76:	2035      	movs	r0, #53	; 0x35
 8004e78:	f001 fbe1 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004e7c:	e16f      	b.n	800515e <HAL_UART_MspInit+0x4c2>
  else if(huart->Instance==UART7)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <HAL_UART_MspInit+0x2d4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d17b      	bne.n	8004f80 <HAL_UART_MspInit+0x2e4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004e88:	4b30      	ldr	r3, [pc, #192]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	4a2f      	ldr	r2, [pc, #188]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004e8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e92:	6413      	str	r3, [r2, #64]	; 0x40
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	4a29      	ldr	r2, [pc, #164]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004ea6:	f043 0310 	orr.w	r3, r3, #16
 8004eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8004eac:	4b27      	ldr	r3, [pc, #156]	; (8004f4c <HAL_UART_MspInit+0x2b0>)
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	f003 0310 	and.w	r3, r3, #16
 8004eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = lid2_rxd_Pin|lid2_txd_Pin;
 8004eb8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004eca:	2308      	movs	r3, #8
 8004ecc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ece:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4827      	ldr	r0, [pc, #156]	; (8004f74 <HAL_UART_MspInit+0x2d8>)
 8004ed6:	f001 ffd7 	bl	8006e88 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8004eda:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <HAL_UART_MspInit+0x2e0>)
 8004ede:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004ee2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004ee6:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ee8:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ef4:	4b20      	ldr	r3, [pc, #128]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004efa:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004efc:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f02:	4b1d      	ldr	r3, [pc, #116]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8004f08:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f0e:	4b1a      	ldr	r3, [pc, #104]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f14:	4b18      	ldr	r3, [pc, #96]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8004f1a:	4817      	ldr	r0, [pc, #92]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f1c:	f001 fbaa 	bl	8006674 <HAL_DMA_Init>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8004f26:	f7fd ff7f 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a12      	ldr	r2, [pc, #72]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f2e:	671a      	str	r2, [r3, #112]	; 0x70
 8004f30:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <HAL_UART_MspInit+0x2dc>)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	2052      	movs	r0, #82	; 0x52
 8004f3c:	f001 fb63 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004f40:	2052      	movs	r0, #82	; 0x52
 8004f42:	f001 fb7c 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8004f46:	e10a      	b.n	800515e <HAL_UART_MspInit+0x4c2>
 8004f48:	40004c00 	.word	0x40004c00
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40020000 	.word	0x40020000
 8004f54:	20000294 	.word	0x20000294
 8004f58:	40026040 	.word	0x40026040
 8004f5c:	40005000 	.word	0x40005000
 8004f60:	40020800 	.word	0x40020800
 8004f64:	40020c00 	.word	0x40020c00
 8004f68:	200009f4 	.word	0x200009f4
 8004f6c:	40026010 	.word	0x40026010
 8004f70:	40007800 	.word	0x40007800
 8004f74:	40021000 	.word	0x40021000
 8004f78:	20000640 	.word	0x20000640
 8004f7c:	40026058 	.word	0x40026058
  else if(huart->Instance==UART8)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a78      	ldr	r2, [pc, #480]	; (8005168 <HAL_UART_MspInit+0x4cc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d15e      	bne.n	8005048 <HAL_UART_MspInit+0x3ac>
    __HAL_RCC_UART8_CLK_ENABLE();
 8004f8a:	4b78      	ldr	r3, [pc, #480]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a77      	ldr	r2, [pc, #476]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8004f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b75      	ldr	r3, [pc, #468]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004fa2:	4b72      	ldr	r3, [pc, #456]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	4a71      	ldr	r2, [pc, #452]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8004fa8:	f043 0310 	orr.w	r3, r3, #16
 8004fac:	6313      	str	r3, [r2, #48]	; 0x30
 8004fae:	4b6f      	ldr	r3, [pc, #444]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	623b      	str	r3, [r7, #32]
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = lid6_rxd_Pin|lid6_txd_Pin;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004fca:	2308      	movs	r3, #8
 8004fcc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4866      	ldr	r0, [pc, #408]	; (8005170 <HAL_UART_MspInit+0x4d4>)
 8004fd6:	f001 ff57 	bl	8006e88 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8004fda:	4b66      	ldr	r3, [pc, #408]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8004fdc:	4a66      	ldr	r2, [pc, #408]	; (8005178 <HAL_UART_MspInit+0x4dc>)
 8004fde:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8004fe0:	4b64      	ldr	r3, [pc, #400]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8004fe2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004fe6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fe8:	4b62      	ldr	r3, [pc, #392]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fee:	4b61      	ldr	r3, [pc, #388]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ff4:	4b5f      	ldr	r3, [pc, #380]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8004ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ffa:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ffc:	4b5d      	ldr	r3, [pc, #372]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005002:	4b5c      	ldr	r3, [pc, #368]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8005004:	2200      	movs	r2, #0
 8005006:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8005008:	4b5a      	ldr	r3, [pc, #360]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 800500a:	2200      	movs	r2, #0
 800500c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800500e:	4b59      	ldr	r3, [pc, #356]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8005010:	2200      	movs	r2, #0
 8005012:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005014:	4b57      	ldr	r3, [pc, #348]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8005016:	2200      	movs	r2, #0
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800501a:	4856      	ldr	r0, [pc, #344]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 800501c:	f001 fb2a 	bl	8006674 <HAL_DMA_Init>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_UART_MspInit+0x38e>
      Error_Handler();
 8005026:	f7fd feff 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a51      	ldr	r2, [pc, #324]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 800502e:	671a      	str	r2, [r3, #112]	; 0x70
 8005030:	4a50      	ldr	r2, [pc, #320]	; (8005174 <HAL_UART_MspInit+0x4d8>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8005036:	2200      	movs	r2, #0
 8005038:	2100      	movs	r1, #0
 800503a:	2053      	movs	r0, #83	; 0x53
 800503c:	f001 fae3 	bl	8006606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8005040:	2053      	movs	r0, #83	; 0x53
 8005042:	f001 fafc 	bl	800663e <HAL_NVIC_EnableIRQ>
}
 8005046:	e08a      	b.n	800515e <HAL_UART_MspInit+0x4c2>
  else if(huart->Instance==USART1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a4b      	ldr	r2, [pc, #300]	; (800517c <HAL_UART_MspInit+0x4e0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d129      	bne.n	80050a6 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005052:	4b46      	ldr	r3, [pc, #280]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	4a45      	ldr	r2, [pc, #276]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005058:	f043 0310 	orr.w	r3, r3, #16
 800505c:	6453      	str	r3, [r2, #68]	; 0x44
 800505e:	4b43      	ldr	r3, [pc, #268]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	61fb      	str	r3, [r7, #28]
 8005068:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506a:	4b40      	ldr	r3, [pc, #256]	; (800516c <HAL_UART_MspInit+0x4d0>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	4a3f      	ldr	r2, [pc, #252]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6313      	str	r3, [r2, #48]	; 0x30
 8005076:	4b3d      	ldr	r3, [pc, #244]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = lid4_txd_Pin|lid4_rxd_Pin;
 8005082:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005088:	2302      	movs	r3, #2
 800508a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005094:	2307      	movs	r3, #7
 8005096:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005098:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800509c:	4619      	mov	r1, r3
 800509e:	4838      	ldr	r0, [pc, #224]	; (8005180 <HAL_UART_MspInit+0x4e4>)
 80050a0:	f001 fef2 	bl	8006e88 <HAL_GPIO_Init>
}
 80050a4:	e05b      	b.n	800515e <HAL_UART_MspInit+0x4c2>
  else if(huart->Instance==USART2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a36      	ldr	r2, [pc, #216]	; (8005184 <HAL_UART_MspInit+0x4e8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d128      	bne.n	8005102 <HAL_UART_MspInit+0x466>
    __HAL_RCC_USART2_CLK_ENABLE();
 80050b0:	4b2e      	ldr	r3, [pc, #184]	; (800516c <HAL_UART_MspInit+0x4d0>)
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	4a2d      	ldr	r2, [pc, #180]	; (800516c <HAL_UART_MspInit+0x4d0>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	6413      	str	r3, [r2, #64]	; 0x40
 80050bc:	4b2b      	ldr	r3, [pc, #172]	; (800516c <HAL_UART_MspInit+0x4d0>)
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c8:	4b28      	ldr	r3, [pc, #160]	; (800516c <HAL_UART_MspInit+0x4d0>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4a27      	ldr	r2, [pc, #156]	; (800516c <HAL_UART_MspInit+0x4d0>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6313      	str	r3, [r2, #48]	; 0x30
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_UART_MspInit+0x4d0>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = tele_txd_Pin|tele_rxd_Pin;
 80050e0:	230c      	movs	r3, #12
 80050e2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e4:	2302      	movs	r3, #2
 80050e6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ec:	2300      	movs	r3, #0
 80050ee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80050f0:	2307      	movs	r3, #7
 80050f2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050f8:	4619      	mov	r1, r3
 80050fa:	4821      	ldr	r0, [pc, #132]	; (8005180 <HAL_UART_MspInit+0x4e4>)
 80050fc:	f001 fec4 	bl	8006e88 <HAL_GPIO_Init>
}
 8005100:	e02d      	b.n	800515e <HAL_UART_MspInit+0x4c2>
  else if(huart->Instance==USART3)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a20      	ldr	r2, [pc, #128]	; (8005188 <HAL_UART_MspInit+0x4ec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d128      	bne.n	800515e <HAL_UART_MspInit+0x4c2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800510c:	4b17      	ldr	r3, [pc, #92]	; (800516c <HAL_UART_MspInit+0x4d0>)
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	4a16      	ldr	r2, [pc, #88]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005112:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005116:	6413      	str	r3, [r2, #64]	; 0x40
 8005118:	4b14      	ldr	r3, [pc, #80]	; (800516c <HAL_UART_MspInit+0x4d0>)
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005124:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	4a10      	ldr	r2, [pc, #64]	; (800516c <HAL_UART_MspInit+0x4d0>)
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	6313      	str	r3, [r2, #48]	; 0x30
 8005130:	4b0e      	ldr	r3, [pc, #56]	; (800516c <HAL_UART_MspInit+0x4d0>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = lid3_txd_Pin|lid3_rxd_Pin;
 800513c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514a:	2303      	movs	r3, #3
 800514c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800514e:	2307      	movs	r3, #7
 8005150:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005152:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005156:	4619      	mov	r1, r3
 8005158:	480c      	ldr	r0, [pc, #48]	; (800518c <HAL_UART_MspInit+0x4f0>)
 800515a:	f001 fe95 	bl	8006e88 <HAL_GPIO_Init>
}
 800515e:	bf00      	nop
 8005160:	3758      	adds	r7, #88	; 0x58
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40007c00 	.word	0x40007c00
 800516c:	40023800 	.word	0x40023800
 8005170:	40021000 	.word	0x40021000
 8005174:	200006e8 	.word	0x200006e8
 8005178:	400260a0 	.word	0x400260a0
 800517c:	40011000 	.word	0x40011000
 8005180:	40020000 	.word	0x40020000
 8005184:	40004400 	.word	0x40004400
 8005188:	40004800 	.word	0x40004800
 800518c:	40020400 	.word	0x40020400

08005190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005194:	e7fe      	b.n	8005194 <NMI_Handler+0x4>

08005196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800519a:	e7fe      	b.n	800519a <HardFault_Handler+0x4>

0800519c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a0:	e7fe      	b.n	80051a0 <MemManage_Handler+0x4>

080051a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051a6:	e7fe      	b.n	80051a6 <BusFault_Handler+0x4>

080051a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <UsageFault_Handler+0x4>

080051ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051dc:	f000 fe6c 	bl	8005eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(gUpdateGyro == 1)
 80051e0:	4b0a      	ldr	r3, [pc, #40]	; (800520c <SysTick_Handler+0x34>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10f      	bne.n	8005208 <SysTick_Handler+0x30>
  {
	  nb_tick++;
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <SysTick_Handler+0x38>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3301      	adds	r3, #1
 80051ee:	4a08      	ldr	r2, [pc, #32]	; (8005210 <SysTick_Handler+0x38>)
 80051f0:	6013      	str	r3, [r2, #0]

	  // Update du gyro toutes les 20 ms.
	  // Pas besoin plus souvent car la fréquence de rafraichissement du gyro est de 54 Hz.
	  if(nb_tick>= 20)
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <SysTick_Handler+0x38>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b13      	cmp	r3, #19
 80051f8:	dd06      	ble.n	8005208 <SysTick_Handler+0x30>
	  {
		  gyro_update(0.02);
 80051fa:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005214 <SysTick_Handler+0x3c>
 80051fe:	f7fc fad7 	bl	80017b0 <gyro_update>
		  nb_tick = 0;
 8005202:	4b03      	ldr	r3, [pc, #12]	; (8005210 <SysTick_Handler+0x38>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8005208:	bf00      	nop
 800520a:	bd80      	pop	{r7, pc}
 800520c:	2000027c 	.word	0x2000027c
 8005210:	20000280 	.word	0x20000280
 8005214:	3ca3d70a 	.word	0x3ca3d70a

08005218 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800521c:	4803      	ldr	r0, [pc, #12]	; (800522c <DMA1_Stream0_IRQHandler+0x14>)
 800521e:	f001 fbc9 	bl	80069b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  tfminiplusIrq(MINILIDAR_GAUCHE);
 8005222:	2001      	movs	r0, #1
 8005224:	f000 f9c8 	bl	80055b8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005228:	bf00      	nop
 800522a:	bd80      	pop	{r7, pc}
 800522c:	200009f4 	.word	0x200009f4

08005230 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005234:	4803      	ldr	r0, [pc, #12]	; (8005244 <DMA1_Stream2_IRQHandler+0x14>)
 8005236:	f001 fbbd 	bl	80069b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */
  tfminiplusIrq(MINILIDAR_AVANT);
 800523a:	2003      	movs	r0, #3
 800523c:	f000 f9bc 	bl	80055b8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005240:	bf00      	nop
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000294 	.word	0x20000294

08005248 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800524c:	4803      	ldr	r0, [pc, #12]	; (800525c <DMA1_Stream3_IRQHandler+0x14>)
 800524e:	f001 fbb1 	bl	80069b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */
  tfminiplusIrq(MINILIDAR_DROIT);
 8005252:	2000      	movs	r0, #0
 8005254:	f000 f9b0 	bl	80055b8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000640 	.word	0x20000640

08005260 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8005264:	4803      	ldr	r0, [pc, #12]	; (8005274 <DMA1_Stream6_IRQHandler+0x14>)
 8005266:	f001 fba5 	bl	80069b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */
  tfminiplusIrq(MINILIDAR_HAUT);
 800526a:	2002      	movs	r0, #2
 800526c:	f000 f9a4 	bl	80055b8 <tfminiplusIrq>
  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005270:	bf00      	nop
 8005272:	bd80      	pop	{r7, pc}
 8005274:	200006e8 	.word	0x200006e8

08005278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800527c:	4802      	ldr	r0, [pc, #8]	; (8005288 <TIM2_IRQHandler+0x10>)
 800527e:	f004 f8eb 	bl	8009458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000924 	.word	0x20000924

0800528c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005290:	4802      	ldr	r0, [pc, #8]	; (800529c <TIM3_IRQHandler+0x10>)
 8005292:	f004 f8e1 	bl	8009458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000528 	.word	0x20000528

080052a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <TIM4_IRQHandler+0x10>)
 80052a6:	f004 f8d7 	bl	8009458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200003c4 	.word	0x200003c4

080052b4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80052b8:	4803      	ldr	r0, [pc, #12]	; (80052c8 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80052ba:	f004 f8cd 	bl	8009458 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80052be:	4803      	ldr	r0, [pc, #12]	; (80052cc <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80052c0:	f004 f8ca 	bl	8009458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000378 	.word	0x20000378
 80052cc:	20000a54 	.word	0x20000a54

080052d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80052d4:	4802      	ldr	r0, [pc, #8]	; (80052e0 <UART4_IRQHandler+0x10>)
 80052d6:	f005 fd87 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80052da:	bf00      	nop
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	200008a0 	.word	0x200008a0

080052e4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80052e8:	4802      	ldr	r0, [pc, #8]	; (80052f4 <UART5_IRQHandler+0x10>)
 80052ea:	f005 fd7d 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000574 	.word	0x20000574

080052f8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80052fc:	4802      	ldr	r0, [pc, #8]	; (8005308 <UART7_IRQHandler+0x10>)
 80052fe:	f005 fd73 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005302:	bf00      	nop
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200002f4 	.word	0x200002f4

0800530c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8005310:	4802      	ldr	r0, [pc, #8]	; (800531c <UART8_IRQHandler+0x10>)
 8005312:	f005 fd69 	bl	800ade8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	2000081c 	.word	0x2000081c

08005320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
	return 1;
 8005324:	2301      	movs	r3, #1
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <_kill>:

int _kill(int pid, int sig)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800533a:	f006 fcb3 	bl	800bca4 <__errno>
 800533e:	4603      	mov	r3, r0
 8005340:	2216      	movs	r2, #22
 8005342:	601a      	str	r2, [r3, #0]
	return -1;
 8005344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <_exit>:

void _exit (int status)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005358:	f04f 31ff 	mov.w	r1, #4294967295
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ffe7 	bl	8005330 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005362:	e7fe      	b.n	8005362 <_exit+0x12>

08005364 <_read>:
}

// Modif Nicolas
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
	*ptr = __io_getchar();
 8005370:	f7fc fbcc 	bl	8001b0c <__io_getchar>
 8005374:	4603      	mov	r3, r0
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	701a      	strb	r2, [r3, #0]

	return 1;
 800537c:	2301      	movs	r3, #1
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <_write>:
//
//return len;
//}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e009      	b.n	80053ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	60ba      	str	r2, [r7, #8]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fc fb9d 	bl	8001ae0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	3301      	adds	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	dbf1      	blt.n	8005398 <_write+0x12>
	}
	return len;
 80053b4:	687b      	ldr	r3, [r7, #4]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <_close>:

int _close(int file)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
	return -1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053e6:	605a      	str	r2, [r3, #4]
	return 0;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <_isatty>:

int _isatty(int file)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
	return 1;
 80053fe:	2301      	movs	r3, #1
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
	return 0;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr
	...

08005428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005430:	4a14      	ldr	r2, [pc, #80]	; (8005484 <_sbrk+0x5c>)
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <_sbrk+0x60>)
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <_sbrk+0x64>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <_sbrk+0x64>)
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <_sbrk+0x68>)
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <_sbrk+0x64>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4413      	add	r3, r2
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	429a      	cmp	r2, r3
 8005456:	d207      	bcs.n	8005468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005458:	f006 fc24 	bl	800bca4 <__errno>
 800545c:	4603      	mov	r3, r0
 800545e:	220c      	movs	r2, #12
 8005460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295
 8005466:	e009      	b.n	800547c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005468:	4b08      	ldr	r3, [pc, #32]	; (800548c <_sbrk+0x64>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <_sbrk+0x64>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	4a05      	ldr	r2, [pc, #20]	; (800548c <_sbrk+0x64>)
 8005478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800547a:	68fb      	ldr	r3, [r7, #12]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20010000 	.word	0x20010000
 8005488:	00000400 	.word	0x00000400
 800548c:	20000284 	.word	0x20000284
 8005490:	20000d30 	.word	0x20000d30

08005494 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <SystemInit+0x20>)
 800549a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <SystemInit+0x20>)
 80054a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <telemetrie_pt_enreg_en_cours>:
#define SRAM1_BUFFER __attribute__((section(".mem_telemetrie")))
st_telemetrie gTelemetrie SRAM1_BUFFER;

// Cette fonction renvoi le pointeur sur l'élément dans le tableau qui est en cours d'écriture
st_tele_element *telemetrie_pt_enreg_en_cours()
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0

	return &(gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours]);
 80054bc:	4a07      	ldr	r2, [pc, #28]	; (80054dc <telemetrie_pt_enreg_en_cours+0x24>)
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <telemetrie_pt_enreg_en_cours+0x28>)
 80054c0:	4413      	add	r3, r2
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	461a      	mov	r2, r3
 80054c6:	4613      	mov	r3, r2
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	4413      	add	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	4a03      	ldr	r2, [pc, #12]	; (80054dc <telemetrie_pt_enreg_en_cours+0x24>)
 80054d0:	4413      	add	r3, r2
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20010000 	.word	0x20010000
 80054e0:	0003a980 	.word	0x0003a980

080054e4 <telemetrie_pt_lecture_en_cours>:

	return &(gTelemetrie.enregistrements[gTelemetrie.index_enreg_en_cours]);
}

st_tele_element *telemetrie_pt_lecture_en_cours()
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
	return &gTelemetrie.enregistrements[gTelemetrie.index_lecture_en_cours];
 80054e8:	4a07      	ldr	r2, [pc, #28]	; (8005508 <telemetrie_pt_lecture_en_cours+0x24>)
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <telemetrie_pt_lecture_en_cours+0x28>)
 80054ec:	4413      	add	r3, r2
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4613      	mov	r3, r2
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	4413      	add	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4a03      	ldr	r2, [pc, #12]	; (8005508 <telemetrie_pt_lecture_en_cours+0x24>)
 80054fc:	4413      	add	r3, r2

}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	20010000 	.word	0x20010000
 800550c:	0003a982 	.word	0x0003a982

08005510 <telemetrie_pt_lecture_suivant>:

// Cette fonction donne le pointeur suivant sur l'élément à lire, sauf si le tableau est vide
st_tele_element *telemetrie_pt_lecture_suivant(int *a_pErreur)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
	uint16_t futur_index_lecture;

	*a_pErreur = 0;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

	futur_index_lecture = gTelemetrie.index_lecture_en_cours + 1;
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <telemetrie_pt_lecture_suivant+0x6c>)
 8005520:	4b17      	ldr	r3, [pc, #92]	; (8005580 <telemetrie_pt_lecture_suivant+0x70>)
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	81fb      	strh	r3, [r7, #14]

	// Pour passer à l'élément suivant, il faut que l'index + 1 soit :

	// - le pointeur soit dans la taille du tableau sinon passage à 0.
	if(futur_index_lecture > TELE_TAILLE_BUFFER)
 800552a:	89fb      	ldrh	r3, [r7, #14]
 800552c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005530:	4293      	cmp	r3, r2
 8005532:	d901      	bls.n	8005538 <telemetrie_pt_lecture_suivant+0x28>
		futur_index_lecture = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	81fb      	strh	r3, [r7, #14]

	// - différent du pointeur de lecture (dans ce cas, le tableau est plein)
	if(futur_index_lecture == gTelemetrie.index_enreg_en_cours)
 8005538:	4a10      	ldr	r2, [pc, #64]	; (800557c <telemetrie_pt_lecture_suivant+0x6c>)
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <telemetrie_pt_lecture_suivant+0x74>)
 800553c:	4413      	add	r3, r2
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	89fa      	ldrh	r2, [r7, #14]
 8005542:	429a      	cmp	r2, r3
 8005544:	d104      	bne.n	8005550 <telemetrie_pt_lecture_suivant+0x40>
		*a_pErreur = -1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e004      	b.n	800555a <telemetrie_pt_lecture_suivant+0x4a>
	else
		gTelemetrie.index_lecture_en_cours = futur_index_lecture;
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <telemetrie_pt_lecture_suivant+0x6c>)
 8005552:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <telemetrie_pt_lecture_suivant+0x70>)
 8005554:	4413      	add	r3, r2
 8005556:	89fa      	ldrh	r2, [r7, #14]
 8005558:	801a      	strh	r2, [r3, #0]

	return &gTelemetrie.enregistrements[gTelemetrie.index_lecture_en_cours];
 800555a:	4a08      	ldr	r2, [pc, #32]	; (800557c <telemetrie_pt_lecture_suivant+0x6c>)
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <telemetrie_pt_lecture_suivant+0x70>)
 800555e:	4413      	add	r3, r2
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4a03      	ldr	r2, [pc, #12]	; (800557c <telemetrie_pt_lecture_suivant+0x6c>)
 800556e:	4413      	add	r3, r2
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	20010000 	.word	0x20010000
 8005580:	0003a982 	.word	0x0003a982
 8005584:	0003a980 	.word	0x0003a980

08005588 <telemetrie_init>:

// La stratégie ici est de remplir le tableau jusqu'à ce qu'il soit plein.
// Il n'y a pas d'écrasement des données les plus anciennes.
void telemetrie_init()
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
	gTelemetrie.index_enreg_en_cours = 0;
 800558c:	4a07      	ldr	r2, [pc, #28]	; (80055ac <telemetrie_init+0x24>)
 800558e:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <telemetrie_init+0x28>)
 8005590:	4413      	add	r3, r2
 8005592:	2200      	movs	r2, #0
 8005594:	801a      	strh	r2, [r3, #0]
	gTelemetrie.index_lecture_en_cours = TELE_TAILLE_BUFFER - 1;
 8005596:	4a05      	ldr	r2, [pc, #20]	; (80055ac <telemetrie_init+0x24>)
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <telemetrie_init+0x2c>)
 800559a:	4413      	add	r3, r2
 800559c:	f241 3287 	movw	r2, #4999	; 0x1387
 80055a0:	801a      	strh	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	20010000 	.word	0x20010000
 80055b0:	0003a980 	.word	0x0003a980
 80055b4:	0003a982 	.word	0x0003a982

080055b8 <tfminiplusIrq>:
stMiniLidar miniLidarHaut;

// Dans la routine d'IRQ du DMA, on positionne le num�ro du capteur rattach� au DMA
// Remarque g�n�rale, plutot que de typer numCapteur en int, on pourrait mettre un enum
void tfminiplusIrq(LIDAR_ID a_numCapteur)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	; 0x30
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	71fb      	strb	r3, [r7, #7]
	int distance, strength, temp;
	uint32_t checksum, checksum_ref;
	stMiniLidar *pLidar;

	if(a_numCapteur == MINILIDAR_DROIT)
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <tfminiplusIrq+0x16>
		pLidar = &miniLidarDroit;
 80055c8:	4b92      	ldr	r3, [pc, #584]	; (8005814 <tfminiplusIrq+0x25c>)
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80055cc:	e013      	b.n	80055f6 <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_GAUCHE)
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d102      	bne.n	80055da <tfminiplusIrq+0x22>
		pLidar = &miniLidarGauche;
 80055d4:	4b90      	ldr	r3, [pc, #576]	; (8005818 <tfminiplusIrq+0x260>)
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d8:	e00d      	b.n	80055f6 <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_HAUT)
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d102      	bne.n	80055e6 <tfminiplusIrq+0x2e>
		pLidar = &miniLidarHaut;
 80055e0:	4b8e      	ldr	r3, [pc, #568]	; (800581c <tfminiplusIrq+0x264>)
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	e007      	b.n	80055f6 <tfminiplusIrq+0x3e>
	else if(a_numCapteur == MINILIDAR_AVANT)
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d102      	bne.n	80055f2 <tfminiplusIrq+0x3a>
		pLidar = &miniLidarAvant;
 80055ec:	4b8c      	ldr	r3, [pc, #560]	; (8005820 <tfminiplusIrq+0x268>)
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	e001      	b.n	80055f6 <tfminiplusIrq+0x3e>
	else
		pLidar = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	62bb      	str	r3, [r7, #40]	; 0x28
//	else if(huart == miniLidarAvant.pHuart)
//		pLidar = &miniLidarAvant;
//	else
//		pLidar = 0;

	if(pLidar != 0)
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8254 	beq.w	8005aa6 <tfminiplusIrq+0x4ee>
	{
		// On v�rifie l'ent�te
		if(pLidar->serialBuffer[0] == 0x59)
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	791b      	ldrb	r3, [r3, #4]
 8005602:	2b59      	cmp	r3, #89	; 0x59
 8005604:	d14a      	bne.n	800569c <tfminiplusIrq+0xe4>
		{
			// C'est une trame de donn�e

			// On v�rifie que le deuxi�me octet est correct
			// Ce driver ne g�re que le format standard mais pas le format Pixhawk
			if(pLidar->serialBuffer[1] == 0x59)
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	795b      	ldrb	r3, [r3, #5]
 800560a:	2b59      	cmp	r3, #89	; 0x59
 800560c:	f040 820a 	bne.w	8005a24 <tfminiplusIrq+0x46c>
			{
				// On v�rifie le checksum
				checksum = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<8;i++) checksum += pLidar->serialBuffer[i];
 8005614:	2300      	movs	r3, #0
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	e00b      	b.n	8005632 <tfminiplusIrq+0x7a>
 800561a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	4413      	add	r3, r2
 8005620:	3304      	adds	r3, #4
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	461a      	mov	r2, r3
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	4413      	add	r3, r2
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	3301      	adds	r3, #1
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	2b07      	cmp	r3, #7
 8005636:	ddf0      	ble.n	800561a <tfminiplusIrq+0x62>
				checksum &= 0xFF;
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	b2db      	uxtb	r3, r3
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[8];
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	7b1b      	ldrb	r3, [r3, #12]
 8005642:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 8005644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	429a      	cmp	r2, r3
 800564a:	f040 81eb 	bne.w	8005a24 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On constitue les valeurs r�elles
					distance = pLidar->serialBuffer[2] + (pLidar->serialBuffer[3] << 8);
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	799b      	ldrb	r3, [r3, #6]
 8005652:	461a      	mov	r2, r3
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	79db      	ldrb	r3, [r3, #7]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	4413      	add	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
					strength = pLidar->serialBuffer[4] + (pLidar->serialBuffer[5] << 8);
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	7a1b      	ldrb	r3, [r3, #8]
 8005662:	461a      	mov	r2, r3
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	7a5b      	ldrb	r3, [r3, #9]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	4413      	add	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
					temp =     pLidar->serialBuffer[6] + (pLidar->serialBuffer[7] << 8);
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	7a9b      	ldrb	r3, [r3, #10]
 8005672:	461a      	mov	r2, r3
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	7adb      	ldrb	r3, [r3, #11]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	4413      	add	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]
//						pLidar->distance = distance;
//						pLidar->strength = strength;
//					}
//					// Sinon, on laisse les valeurs de distance et d'intensit� pr�c�dentes
//					pLidar->temperature = temp;
					pLidar->distance = distance;
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	625a      	str	r2, [r3, #36]	; 0x24
					pLidar->strength = strength;
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	629a      	str	r2, [r3, #40]	; 0x28
					pLidar->temperature = temp;
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c
					pLidar->nb_irq += 1;
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
 800569a:	e1c3      	b.n	8005a24 <tfminiplusIrq+0x46c>
				}
			}
		} else if (pLidar->serialBuffer[0] == 0x5A)
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	2b5a      	cmp	r3, #90	; 0x5a
 80056a2:	f040 81bf 	bne.w	8005a24 <tfminiplusIrq+0x46c>
		{
			// C'est une trame de r�ponse � une commande
			if((pLidar->serialBuffer[1] == 0x07) &&
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	795b      	ldrb	r3, [r3, #5]
 80056aa:	2b07      	cmp	r3, #7
 80056ac:	d135      	bne.n	800571a <tfminiplusIrq+0x162>
			   (pLidar->serialBuffer[2] == 0x01))
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	799b      	ldrb	r3, [r3, #6]
			if((pLidar->serialBuffer[1] == 0x07) &&
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d131      	bne.n	800571a <tfminiplusIrq+0x162>
			{
				// On v�rifie le checksum
				checksum = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<6;i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	e00b      	b.n	80056d8 <tfminiplusIrq+0x120>
					checksum += pLidar->serialBuffer[i];
 80056c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	4413      	add	r3, r2
 80056c6:	3304      	adds	r3, #4
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ce:	4413      	add	r3, r2
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<6;i++)
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	3301      	adds	r3, #1
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	2b05      	cmp	r3, #5
 80056dc:	ddf0      	ble.n	80056c0 <tfminiplusIrq+0x108>
				checksum &= 0xFF;
 80056de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[6];
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	7a9b      	ldrb	r3, [r3, #10]
 80056e8:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 80056ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	f040 8198 	bne.w	8005a24 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re les num�ros de version
					// Format 00.V3.V2.V1
					pLidar->version = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) + (pLidar->serialBuffer[5] << 16);
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	79db      	ldrb	r3, [r3, #7]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	7a1b      	ldrb	r3, [r3, #8]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	441a      	add	r2, r3
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	7a5b      	ldrb	r3, [r3, #9]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	441a      	add	r2, r3
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
					pLidar->semaphore++;
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 8005718:	e184      	b.n	8005a24 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	795b      	ldrb	r3, [r3, #5]
 800571e:	2b05      	cmp	r3, #5
 8005720:	d111      	bne.n	8005746 <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[2] == 0x02) &&
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005726:	2b02      	cmp	r3, #2
 8005728:	d10d      	bne.n	8005746 <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[3] == 0x00) &&
 800572a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572c:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x02) &&
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <tfminiplusIrq+0x18e>
					(pLidar->serialBuffer[4] == 0x60))
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8005736:	2b60      	cmp	r3, #96	; 0x60
 8005738:	d105      	bne.n	8005746 <tfminiplusIrq+0x18e>
			{
				// Le capteur va reseter
				pLidar->semaphore++;
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
 8005744:	e16e      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	795b      	ldrb	r3, [r3, #5]
 800574a:	2b05      	cmp	r3, #5
 800574c:	d111      	bne.n	8005772 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[2] == 0x02) &&
 800574e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005750:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005752:	2b02      	cmp	r3, #2
 8005754:	d10d      	bne.n	8005772 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[3] == 0x01) &&
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x02) &&
 800575a:	2b01      	cmp	r3, #1
 800575c:	d109      	bne.n	8005772 <tfminiplusIrq+0x1ba>
					(pLidar->serialBuffer[4] == 0x61))
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8005762:	2b61      	cmp	r3, #97	; 0x61
 8005764:	d105      	bne.n	8005772 <tfminiplusIrq+0x1ba>
			{
				// Le capteur refuse de reseter
				pLidar->semaphore++;
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
 8005770:	e158      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x06) &&
 8005772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005774:	795b      	ldrb	r3, [r3, #5]
 8005776:	2b06      	cmp	r3, #6
 8005778:	d131      	bne.n	80057de <tfminiplusIrq+0x226>
					(pLidar->serialBuffer[2] == 0x03))
 800577a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577c:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x06) &&
 800577e:	2b03      	cmp	r3, #3
 8005780:	d12d      	bne.n	80057de <tfminiplusIrq+0x226>
			{
				// On v�rifie le checksum
				checksum = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<5;i++)
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	e00b      	b.n	80057a4 <tfminiplusIrq+0x1ec>
					checksum += pLidar->serialBuffer[i];
 800578c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579a:	4413      	add	r3, r2
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<5;i++)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	ddf0      	ble.n	800578c <tfminiplusIrq+0x1d4>
				checksum &= 0xFF;
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[5];
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	7a5b      	ldrb	r3, [r3, #9]
 80057b4:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 80057b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	f040 8132 	bne.w	8005a24 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re le Frame Rate
					pLidar->framerate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8);
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	79db      	ldrb	r3, [r3, #7]
 80057c4:	461a      	mov	r2, r3
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	7a1b      	ldrb	r3, [r3, #8]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	441a      	add	r2, r3
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	635a      	str	r2, [r3, #52]	; 0x34

					pLidar->semaphore++;
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 80057dc:	e122      	b.n	8005a24 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	795b      	ldrb	r3, [r3, #5]
 80057e2:	2b05      	cmp	r3, #5
 80057e4:	d11e      	bne.n	8005824 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[2] == 0x05) &&
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80057ea:	2b05      	cmp	r3, #5
 80057ec:	d11a      	bne.n	8005824 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[3] == 0x01) &&
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d116      	bne.n	8005824 <tfminiplusIrq+0x26c>
					(pLidar->serialBuffer[4] == 0x65))
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 80057fa:	2b65      	cmp	r3, #101	; 0x65
 80057fc:	d112      	bne.n	8005824 <tfminiplusIrq+0x26c>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = standard_cm;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
 8005810:	e108      	b.n	8005a24 <tfminiplusIrq+0x46c>
 8005812:	bf00      	nop
 8005814:	20000bd0 	.word	0x20000bd0
 8005818:	20000cd0 	.word	0x20000cd0
 800581c:	20000c18 	.word	0x20000c18
 8005820:	20000c88 	.word	0x20000c88
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	795b      	ldrb	r3, [r3, #5]
 8005828:	2b05      	cmp	r3, #5
 800582a:	d115      	bne.n	8005858 <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[2] == 0x05) &&
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005830:	2b05      	cmp	r3, #5
 8005832:	d111      	bne.n	8005858 <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[3] == 0x02) &&
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 8005838:	2b02      	cmp	r3, #2
 800583a:	d10d      	bne.n	8005858 <tfminiplusIrq+0x2a0>
					(pLidar->serialBuffer[4] == 0x66))
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x02) &&
 8005840:	2b66      	cmp	r3, #102	; 0x66
 8005842:	d109      	bne.n	8005858 <tfminiplusIrq+0x2a0>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = pixhawk;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	641a      	str	r2, [r3, #64]	; 0x40
 8005856:	e0e5      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	795b      	ldrb	r3, [r3, #5]
 800585c:	2b05      	cmp	r3, #5
 800585e:	d115      	bne.n	800588c <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[2] == 0x05) &&
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005864:	2b05      	cmp	r3, #5
 8005866:	d111      	bne.n	800588c <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[3] == 0x03) &&
 8005868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586a:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x05) &&
 800586c:	2b03      	cmp	r3, #3
 800586e:	d10d      	bne.n	800588c <tfminiplusIrq+0x2d4>
					(pLidar->serialBuffer[4] == 0x67))
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x03) &&
 8005874:	2b67      	cmp	r3, #103	; 0x67
 8005876:	d109      	bne.n	800588c <tfminiplusIrq+0x2d4>
			{
				// On r�cup�re le Format des donn�es
				pLidar->outputFormat = standard_mm;
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
 800588a:	e0cb      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x08) &&
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	795b      	ldrb	r3, [r3, #5]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d139      	bne.n	8005908 <tfminiplusIrq+0x350>
					(pLidar->serialBuffer[2] == 0x06))
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x08) &&
 8005898:	2b06      	cmp	r3, #6
 800589a:	d135      	bne.n	8005908 <tfminiplusIrq+0x350>
			{
				// On v�rifie le checksum
				checksum = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<7;i++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
 80058a4:	e00b      	b.n	80058be <tfminiplusIrq+0x306>
					checksum += pLidar->serialBuffer[i];
 80058a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	4413      	add	r3, r2
 80058ac:	3304      	adds	r3, #4
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	4413      	add	r3, r2
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				for (int i=0; i<7;i++)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	ddf0      	ble.n	80058a6 <tfminiplusIrq+0x2ee>
				checksum &= 0xFF;
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
				checksum_ref = pLidar->serialBuffer[7];
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	7adb      	ldrb	r3, [r3, #11]
 80058ce:	617b      	str	r3, [r7, #20]
				if(checksum == checksum_ref)
 80058d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	f040 80a5 	bne.w	8005a24 <tfminiplusIrq+0x46c>
				{
					// La trame est correcte, on traite les donn�es
					// On r�cup�re le Baud Rate
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	79db      	ldrb	r3, [r3, #7]
 80058de:	461a      	mov	r2, r3
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	7a1b      	ldrb	r3, [r3, #8]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	441a      	add	r2, r3
							(pLidar->serialBuffer[5] << 16) + (pLidar->serialBuffer[6] << 24);
 80058e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ea:	7a5b      	ldrb	r3, [r3, #9]
 80058ec:	041b      	lsls	r3, r3, #16
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 80058ee:	441a      	add	r2, r3
							(pLidar->serialBuffer[5] << 16) + (pLidar->serialBuffer[6] << 24);
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	7a9b      	ldrb	r3, [r3, #10]
 80058f4:	061b      	lsls	r3, r3, #24
 80058f6:	441a      	add	r2, r3
					pLidar->baudrate = pLidar->serialBuffer[3] + (pLidar->serialBuffer[4] << 8) +
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
					pLidar->semaphore++;
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	641a      	str	r2, [r3, #64]	; 0x40
				if(checksum == checksum_ref)
 8005906:	e08d      	b.n	8005a24 <tfminiplusIrq+0x46c>
				}
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	795b      	ldrb	r3, [r3, #5]
 800590c:	2b05      	cmp	r3, #5
 800590e:	d111      	bne.n	8005934 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[2] == 0x07) &&
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005914:	2b07      	cmp	r3, #7
 8005916:	d10d      	bne.n	8005934 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[3] == 0x00) &&
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x07) &&
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <tfminiplusIrq+0x37c>
					(pLidar->serialBuffer[4] == 0x66))
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 8005924:	2b66      	cmp	r3, #102	; 0x66
 8005926:	d105      	bne.n	8005934 <tfminiplusIrq+0x37c>
			{
				// Arr�te la g�n�ration automatique des distances
				// Les distances ne sont fournies que sur demande
				pLidar->semaphore++;
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
 8005932:	e077      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	795b      	ldrb	r3, [r3, #5]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d111      	bne.n	8005960 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[2] == 0x07) &&
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005940:	2b07      	cmp	r3, #7
 8005942:	d10d      	bne.n	8005960 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[3] == 0x01) &&
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x07) &&
 8005948:	2b01      	cmp	r3, #1
 800594a:	d109      	bne.n	8005960 <tfminiplusIrq+0x3a8>
					(pLidar->serialBuffer[4] == 0x67))
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8005950:	2b67      	cmp	r3, #103	; 0x67
 8005952:	d105      	bne.n	8005960 <tfminiplusIrq+0x3a8>
			{
				// D�marre la g�n�ration automatique des distances
				// Les distances sont fournies r�guli�rement. La fr�quence est fournie par le Frame Rate
				pLidar->semaphore++;
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	641a      	str	r2, [r3, #64]	; 0x40
 800595e:	e061      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	795b      	ldrb	r3, [r3, #5]
 8005964:	2b05      	cmp	r3, #5
 8005966:	d11c      	bne.n	80059a2 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[2] == 0x10) &&
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 800596c:	2b10      	cmp	r3, #16
 800596e:	d118      	bne.n	80059a2 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[3] == 0x00) &&
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x10) &&
 8005974:	2b00      	cmp	r3, #0
 8005976:	d114      	bne.n	80059a2 <tfminiplusIrq+0x3ea>
					(pLidar->serialBuffer[4] == 0x6E))
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 800597c:	2b6e      	cmp	r3, #110	; 0x6e
 800597e:	d110      	bne.n	80059a2 <tfminiplusIrq+0x3ea>
			{
				// La demande de restauration des param�tres d'usine est accept�e
				pLidar->baudrate = 115200;
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005986:	639a      	str	r2, [r3, #56]	; 0x38
				pLidar->framerate = 100;
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	2264      	movs	r2, #100	; 0x64
 800598c:	635a      	str	r2, [r3, #52]	; 0x34
				pLidar->outputFormat = standard_cm;
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				pLidar->semaphore++;
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	641a      	str	r2, [r3, #64]	; 0x40
 80059a0:	e040      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	795b      	ldrb	r3, [r3, #5]
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d111      	bne.n	80059ce <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[2] == 0x10) &&
 80059aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ac:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d10d      	bne.n	80059ce <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[3] == 0x01) &&
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x10) &&
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d109      	bne.n	80059ce <tfminiplusIrq+0x416>
					(pLidar->serialBuffer[4] == 0x6F))
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 80059be:	2b6f      	cmp	r3, #111	; 0x6f
 80059c0:	d105      	bne.n	80059ce <tfminiplusIrq+0x416>
			{
				// La demande de restauration des param�tres d'usine est refus�e
				pLidar->semaphore++;
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
 80059cc:	e02a      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	795b      	ldrb	r3, [r3, #5]
 80059d2:	2b05      	cmp	r3, #5
 80059d4:	d111      	bne.n	80059fa <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[2] == 0x22) &&
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059da:	2b22      	cmp	r3, #34	; 0x22
 80059dc:	d10d      	bne.n	80059fa <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[3] == 0x00) &&
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x22) &&
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <tfminiplusIrq+0x442>
					(pLidar->serialBuffer[4] == 0x6F))
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x00) &&
 80059ea:	2b6f      	cmp	r3, #111	; 0x6f
 80059ec:	d105      	bne.n	80059fa <tfminiplusIrq+0x442>
			{
				// La demande de sauvegarde des parametres courant est accept�e
				pLidar->semaphore++;
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40
 80059f8:	e014      	b.n	8005a24 <tfminiplusIrq+0x46c>
			}
			else if((pLidar->serialBuffer[1] == 0x05) &&
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	795b      	ldrb	r3, [r3, #5]
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d110      	bne.n	8005a24 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[2] == 0x22) &&
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	799b      	ldrb	r3, [r3, #6]
			else if((pLidar->serialBuffer[1] == 0x05) &&
 8005a06:	2b22      	cmp	r3, #34	; 0x22
 8005a08:	d10c      	bne.n	8005a24 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[3] == 0x01) &&
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	79db      	ldrb	r3, [r3, #7]
					(pLidar->serialBuffer[2] == 0x22) &&
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d108      	bne.n	8005a24 <tfminiplusIrq+0x46c>
					(pLidar->serialBuffer[4] == 0x70))
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	7a1b      	ldrb	r3, [r3, #8]
					(pLidar->serialBuffer[3] == 0x01) &&
 8005a16:	2b70      	cmp	r3, #112	; 0x70
 8005a18:	d104      	bne.n	8005a24 <tfminiplusIrq+0x46c>
			{
				// La demande de sauvegarde des parametres courant est refus�e
				pLidar->semaphore++;
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
			}
		}
		// Sinon, c'est un format inconnu. On j�te la trame.

		if((buffer_uart5[0] == 0x0) && (a_numCapteur == MINILIDAR_HAUT))
 8005a24:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d134      	bne.n	8005a96 <tfminiplusIrq+0x4de>
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d131      	bne.n	8005a96 <tfminiplusIrq+0x4de>
		{
			buffer_uart5[0] = pLidar->serialBuffer[0];
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	791b      	ldrb	r3, [r3, #4]
 8005a36:	461a      	mov	r2, r3
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a3a:	601a      	str	r2, [r3, #0]
			buffer_uart5[1] = pLidar->serialBuffer[1];
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	795b      	ldrb	r3, [r3, #5]
 8005a40:	461a      	mov	r2, r3
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a44:	605a      	str	r2, [r3, #4]
			buffer_uart5[2] = pLidar->serialBuffer[2];
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	799b      	ldrb	r3, [r3, #6]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a4e:	609a      	str	r2, [r3, #8]
			buffer_uart5[3] = pLidar->serialBuffer[3];
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	79db      	ldrb	r3, [r3, #7]
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a58:	60da      	str	r2, [r3, #12]
			buffer_uart5[4] = pLidar->serialBuffer[4];
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	7a1b      	ldrb	r3, [r3, #8]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a62:	611a      	str	r2, [r3, #16]
			buffer_uart5[5] = pLidar->serialBuffer[5];
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	7a5b      	ldrb	r3, [r3, #9]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a6c:	615a      	str	r2, [r3, #20]
			buffer_uart5[6] = pLidar->serialBuffer[6];
 8005a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a70:	7a9b      	ldrb	r3, [r3, #10]
 8005a72:	461a      	mov	r2, r3
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a76:	619a      	str	r2, [r3, #24]
			buffer_uart5[7] = pLidar->serialBuffer[7];
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	7adb      	ldrb	r3, [r3, #11]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a80:	61da      	str	r2, [r3, #28]
			buffer_uart5[8] = pLidar->serialBuffer[8];
 8005a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a84:	7b1b      	ldrb	r3, [r3, #12]
 8005a86:	461a      	mov	r2, r3
 8005a88:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a8a:	621a      	str	r2, [r3, #32]
			buffer_uart5[9] = pLidar->serialBuffer[9];
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	7b5b      	ldrb	r3, [r3, #13]
 8005a90:	461a      	mov	r2, r3
 8005a92:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <tfminiplusIrq+0x4f8>)
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24
		}
		// On r�arme le DMA
		HAL_UART_Receive_DMA(pLidar->pHuart, pLidar->serialBuffer, 9);
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	2209      	movs	r2, #9
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	f005 f964 	bl	800ad6e <HAL_UART_Receive_DMA>

	}

}
 8005aa6:	bf00      	nop
 8005aa8:	3730      	adds	r7, #48	; 0x30
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000c60 	.word	0x20000c60

08005ab4 <tfminiplus_getLastAcquisition>:
//
//	}
//}

int tfminiplus_getLastAcquisition(LIDAR_ID a_numCapteur, int32_t *a_pDistance, int32_t *a_pStrength, int32_t *a_pTemperature)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]
	int erreur;
	stMiniLidar *pLidar;

	if(a_numCapteur == MINILIDAR_DROIT)
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <tfminiplus_getLastAcquisition+0x1c>
		pLidar = &miniLidarDroit;
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <tfminiplus_getLastAcquisition+0xc4>)
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e013      	b.n	8005af8 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_GAUCHE)
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d102      	bne.n	8005adc <tfminiplus_getLastAcquisition+0x28>
		pLidar = &miniLidarGauche;
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <tfminiplus_getLastAcquisition+0xc8>)
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	e00d      	b.n	8005af8 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_HAUT)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d102      	bne.n	8005ae8 <tfminiplus_getLastAcquisition+0x34>
		pLidar = &miniLidarHaut;
 8005ae2:	4b27      	ldr	r3, [pc, #156]	; (8005b80 <tfminiplus_getLastAcquisition+0xcc>)
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	e007      	b.n	8005af8 <tfminiplus_getLastAcquisition+0x44>
	else if(a_numCapteur == MINILIDAR_AVANT)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d102      	bne.n	8005af4 <tfminiplus_getLastAcquisition+0x40>
		pLidar = &miniLidarAvant;
 8005aee:	4b25      	ldr	r3, [pc, #148]	; (8005b84 <tfminiplus_getLastAcquisition+0xd0>)
 8005af0:	613b      	str	r3, [r7, #16]
 8005af2:	e001      	b.n	8005af8 <tfminiplus_getLastAcquisition+0x44>
	else
		pLidar = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]

	if(pLidar != 0)
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d031      	beq.n	8005b62 <tfminiplus_getLastAcquisition+0xae>
	{
		// On renvoie la distance mesur�e par le premier capteur
		if(pLidar->distance == -2)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f113 0f02 	cmn.w	r3, #2
 8005b06:	d10a      	bne.n	8005b1e <tfminiplus_getLastAcquisition+0x6a>
		{
			*a_pDistance = -2;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f06f 0201 	mvn.w	r2, #1
 8005b0e:	601a      	str	r2, [r3, #0]
			*a_pStrength = 0;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
			*a_pTemperature = 0;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e01a      	b.n	8005b54 <tfminiplus_getLastAcquisition+0xa0>
		}
		else if((pLidar->strength >= 100) && (pLidar->strength != 65535))
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	2b63      	cmp	r3, #99	; 0x63
 8005b24:	dd12      	ble.n	8005b4c <tfminiplus_getLastAcquisition+0x98>
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00c      	beq.n	8005b4c <tfminiplus_getLastAcquisition+0x98>
		{
			*a_pDistance = pLidar->distance;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	601a      	str	r2, [r3, #0]
			*a_pStrength = pLidar->strength;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	601a      	str	r2, [r3, #0]
			*a_pTemperature = pLidar->temperature;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e003      	b.n	8005b54 <tfminiplus_getLastAcquisition+0xa0>
		}
		else
		{
			*a_pDistance = -1;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b52:	601a      	str	r2, [r3, #0]
		}
		erreur = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
		// En gros, le lidar envoie des captures toutes les 10 ms.
		// La valeur du strength du rayon de retour permet de savoir si la mesure est valide.
		// On peut avoir strength 250 250 10 10 10 10 10 10
		// Si le logiciel applicatif prend la mesure apr�s le deuxi�me 250, et qu'il prend la deuxi�me mesure apr�s le 4ieme 10,
		// alors le driver pourrait renvoyer la derni�re valeur valide, mais elle est tr�s ancienne.
		pLidar->distance = -2;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f06f 0201 	mvn.w	r2, #1
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
 8005b60:	e002      	b.n	8005b68 <tfminiplus_getLastAcquisition+0xb4>
	}
	else
		// Numero de capteur inconnu
		erreur = -1;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	617b      	str	r3, [r7, #20]

	return erreur;
 8005b68:	697b      	ldr	r3, [r7, #20]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	20000bd0 	.word	0x20000bd0
 8005b7c:	20000cd0 	.word	0x20000cd0
 8005b80:	20000c18 	.word	0x20000c18
 8005b84:	20000c88 	.word	0x20000c88

08005b88 <tfminiplus_init>:

	return erreur;
}

int tfminiplus_init()
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef retour;
	int i;

	// Initialisation des parametres
	miniLidarDroit.pHuart = &huart7;
 8005b8e:	4b86      	ldr	r3, [pc, #536]	; (8005da8 <tfminiplus_init+0x220>)
 8005b90:	4a86      	ldr	r2, [pc, #536]	; (8005dac <tfminiplus_init+0x224>)
 8005b92:	601a      	str	r2, [r3, #0]
	miniLidarDroit.distance = -2;
 8005b94:	4b84      	ldr	r3, [pc, #528]	; (8005da8 <tfminiplus_init+0x220>)
 8005b96:	f06f 0201 	mvn.w	r2, #1
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarDroit.strength = 0;
 8005b9c:	4b82      	ldr	r3, [pc, #520]	; (8005da8 <tfminiplus_init+0x220>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarDroit.temperature = 0;
 8005ba2:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <tfminiplus_init+0x220>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarDroit.baudrate = 115200;
 8005ba8:	4b7f      	ldr	r3, [pc, #508]	; (8005da8 <tfminiplus_init+0x220>)
 8005baa:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005bae:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarDroit.framerate = 100;
 8005bb0:	4b7d      	ldr	r3, [pc, #500]	; (8005da8 <tfminiplus_init+0x220>)
 8005bb2:	2264      	movs	r2, #100	; 0x64
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarDroit.semaphore = 0;
 8005bb6:	4b7c      	ldr	r3, [pc, #496]	; (8005da8 <tfminiplus_init+0x220>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarDroit.nb_irq = 0;
 8005bbc:	4b7a      	ldr	r3, [pc, #488]	; (8005da8 <tfminiplus_init+0x220>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarGauche.pHuart = &huart5;
 8005bc2:	4b7b      	ldr	r3, [pc, #492]	; (8005db0 <tfminiplus_init+0x228>)
 8005bc4:	4a7b      	ldr	r2, [pc, #492]	; (8005db4 <tfminiplus_init+0x22c>)
 8005bc6:	601a      	str	r2, [r3, #0]
	miniLidarGauche.distance = -2;
 8005bc8:	4b79      	ldr	r3, [pc, #484]	; (8005db0 <tfminiplus_init+0x228>)
 8005bca:	f06f 0201 	mvn.w	r2, #1
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarGauche.strength = 0;
 8005bd0:	4b77      	ldr	r3, [pc, #476]	; (8005db0 <tfminiplus_init+0x228>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarGauche.temperature = 0;
 8005bd6:	4b76      	ldr	r3, [pc, #472]	; (8005db0 <tfminiplus_init+0x228>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarGauche.baudrate = 115200;
 8005bdc:	4b74      	ldr	r3, [pc, #464]	; (8005db0 <tfminiplus_init+0x228>)
 8005bde:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarGauche.framerate = 100;
 8005be4:	4b72      	ldr	r3, [pc, #456]	; (8005db0 <tfminiplus_init+0x228>)
 8005be6:	2264      	movs	r2, #100	; 0x64
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarGauche.semaphore = 0;
 8005bea:	4b71      	ldr	r3, [pc, #452]	; (8005db0 <tfminiplus_init+0x228>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarGauche.nb_irq = 0;
 8005bf0:	4b6f      	ldr	r3, [pc, #444]	; (8005db0 <tfminiplus_init+0x228>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarHaut.pHuart = &huart8;
 8005bf6:	4b70      	ldr	r3, [pc, #448]	; (8005db8 <tfminiplus_init+0x230>)
 8005bf8:	4a70      	ldr	r2, [pc, #448]	; (8005dbc <tfminiplus_init+0x234>)
 8005bfa:	601a      	str	r2, [r3, #0]
	miniLidarHaut.distance = -2;
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <tfminiplus_init+0x230>)
 8005bfe:	f06f 0201 	mvn.w	r2, #1
 8005c02:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarHaut.strength = 0;
 8005c04:	4b6c      	ldr	r3, [pc, #432]	; (8005db8 <tfminiplus_init+0x230>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarHaut.temperature = 0;
 8005c0a:	4b6b      	ldr	r3, [pc, #428]	; (8005db8 <tfminiplus_init+0x230>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarHaut.baudrate = 115200;
 8005c10:	4b69      	ldr	r3, [pc, #420]	; (8005db8 <tfminiplus_init+0x230>)
 8005c12:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarHaut.framerate = 100;
 8005c18:	4b67      	ldr	r3, [pc, #412]	; (8005db8 <tfminiplus_init+0x230>)
 8005c1a:	2264      	movs	r2, #100	; 0x64
 8005c1c:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarHaut.semaphore = 0;
 8005c1e:	4b66      	ldr	r3, [pc, #408]	; (8005db8 <tfminiplus_init+0x230>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarHaut.nb_irq = 0;
 8005c24:	4b64      	ldr	r3, [pc, #400]	; (8005db8 <tfminiplus_init+0x230>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44

	miniLidarAvant.pHuart = &huart4;
 8005c2a:	4b65      	ldr	r3, [pc, #404]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <tfminiplus_init+0x23c>)
 8005c2e:	601a      	str	r2, [r3, #0]
	miniLidarAvant.distance = -2;
 8005c30:	4b63      	ldr	r3, [pc, #396]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c32:	f06f 0201 	mvn.w	r2, #1
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24
	miniLidarAvant.strength = 0;
 8005c38:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	629a      	str	r2, [r3, #40]	; 0x28
	miniLidarAvant.temperature = 0;
 8005c3e:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	62da      	str	r2, [r3, #44]	; 0x2c
	miniLidarAvant.baudrate = 115200;
 8005c44:	4b5e      	ldr	r3, [pc, #376]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c46:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c4a:	639a      	str	r2, [r3, #56]	; 0x38
	miniLidarAvant.framerate = 100;
 8005c4c:	4b5c      	ldr	r3, [pc, #368]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c4e:	2264      	movs	r2, #100	; 0x64
 8005c50:	635a      	str	r2, [r3, #52]	; 0x34
	miniLidarAvant.semaphore = 0;
 8005c52:	4b5b      	ldr	r3, [pc, #364]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	641a      	str	r2, [r3, #64]	; 0x40
	miniLidarAvant.nb_irq = 0;
 8005c58:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <tfminiplus_init+0x238>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	645a      	str	r2, [r3, #68]	; 0x44

	// Sequence de mise sous tension pour limiter l'appel de courant
	HAL_GPIO_WritePin(lid1_pwr_en_GPIO_Port, lid1_pwr_en_Pin, GPIO_PIN_RESET);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2104      	movs	r1, #4
 8005c62:	4859      	ldr	r0, [pc, #356]	; (8005dc8 <tfminiplus_init+0x240>)
 8005c64:	f001 fad4 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid2_pwr_en_GPIO_Port, lid2_pwr_en_Pin, GPIO_PIN_RESET);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c6e:	4856      	ldr	r0, [pc, #344]	; (8005dc8 <tfminiplus_init+0x240>)
 8005c70:	f001 face 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid3_pwr_en_GPIO_Port, lid3_pwr_en_Pin, GPIO_PIN_RESET);
 8005c74:	2200      	movs	r2, #0
 8005c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c7a:	4853      	ldr	r0, [pc, #332]	; (8005dc8 <tfminiplus_init+0x240>)
 8005c7c:	f001 fac8 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_RESET);
 8005c80:	2200      	movs	r2, #0
 8005c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c86:	4851      	ldr	r0, [pc, #324]	; (8005dcc <tfminiplus_init+0x244>)
 8005c88:	f001 fac2 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_RESET);
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c92:	484f      	ldr	r0, [pc, #316]	; (8005dd0 <tfminiplus_init+0x248>)
 8005c94:	f001 fabc 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_RESET);
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c9e:	484d      	ldr	r0, [pc, #308]	; (8005dd4 <tfminiplus_init+0x24c>)
 8005ca0:	f001 fab6 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ca8:	f000 f926 	bl	8005ef8 <HAL_Delay>

	HAL_GPIO_WritePin(lid1_pwr_en_GPIO_Port, lid1_pwr_en_Pin, GPIO_PIN_SET);
 8005cac:	2201      	movs	r2, #1
 8005cae:	2104      	movs	r1, #4
 8005cb0:	4845      	ldr	r0, [pc, #276]	; (8005dc8 <tfminiplus_init+0x240>)
 8005cb2:	f001 faad 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005cb6:	2064      	movs	r0, #100	; 0x64
 8005cb8:	f000 f91e 	bl	8005ef8 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarAvant.pHuart, miniLidarAvant.serialBuffer, 26);
 8005cbc:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <tfminiplus_init+0x238>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	221a      	movs	r2, #26
 8005cc2:	4945      	ldr	r1, [pc, #276]	; (8005dd8 <tfminiplus_init+0x250>)
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f005 f852 	bl	800ad6e <HAL_UART_Receive_DMA>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(900);
 8005cce:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005cd2:	f000 f911 	bl	8005ef8 <HAL_Delay>

	HAL_GPIO_WritePin(lid2_pwr_en_GPIO_Port, lid2_pwr_en_Pin, GPIO_PIN_SET);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005cdc:	483a      	ldr	r0, [pc, #232]	; (8005dc8 <tfminiplus_init+0x240>)
 8005cde:	f001 fa97 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005ce2:	2064      	movs	r0, #100	; 0x64
 8005ce4:	f000 f908 	bl	8005ef8 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarDroit.pHuart, miniLidarDroit.serialBuffer, 10);
 8005ce8:	4b2f      	ldr	r3, [pc, #188]	; (8005da8 <tfminiplus_init+0x220>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	220a      	movs	r2, #10
 8005cee:	493b      	ldr	r1, [pc, #236]	; (8005ddc <tfminiplus_init+0x254>)
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f005 f83c 	bl	800ad6e <HAL_UART_Receive_DMA>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(900);
 8005cfa:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005cfe:	f000 f8fb 	bl	8005ef8 <HAL_Delay>

	HAL_GPIO_WritePin(lid3_pwr_en_GPIO_Port, lid3_pwr_en_Pin, GPIO_PIN_SET);
 8005d02:	2201      	movs	r2, #1
 8005d04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d08:	482f      	ldr	r0, [pc, #188]	; (8005dc8 <tfminiplus_init+0x240>)
 8005d0a:	f001 fa81 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005d0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d12:	f000 f8f1 	bl	8005ef8 <HAL_Delay>

	HAL_GPIO_WritePin(lid4_pwr_en_GPIO_Port, lid4_pwr_en_Pin, GPIO_PIN_SET);
 8005d16:	2201      	movs	r2, #1
 8005d18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d1c:	482b      	ldr	r0, [pc, #172]	; (8005dcc <tfminiplus_init+0x244>)
 8005d1e:	f001 fa77 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d26:	f000 f8e7 	bl	8005ef8 <HAL_Delay>

	HAL_GPIO_WritePin(lid5_pwr_en_GPIO_Port, lid5_pwr_en_Pin, GPIO_PIN_SET);
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d30:	4827      	ldr	r0, [pc, #156]	; (8005dd0 <tfminiplus_init+0x248>)
 8005d32:	f001 fa6d 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005d36:	2064      	movs	r0, #100	; 0x64
 8005d38:	f000 f8de 	bl	8005ef8 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarGauche.pHuart, miniLidarGauche.serialBuffer, 10);
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	; (8005db0 <tfminiplus_init+0x228>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	220a      	movs	r2, #10
 8005d42:	4927      	ldr	r1, [pc, #156]	; (8005de0 <tfminiplus_init+0x258>)
 8005d44:	4618      	mov	r0, r3
 8005d46:	f005 f812 	bl	800ad6e <HAL_UART_Receive_DMA>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(900);
 8005d4e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005d52:	f000 f8d1 	bl	8005ef8 <HAL_Delay>

	HAL_GPIO_WritePin(lid6_pwr_en_GPIO_Port, lid6_pwr_en_Pin, GPIO_PIN_SET);
 8005d56:	2201      	movs	r2, #1
 8005d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d5c:	481d      	ldr	r0, [pc, #116]	; (8005dd4 <tfminiplus_init+0x24c>)
 8005d5e:	f001 fa57 	bl	8007210 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005d62:	2064      	movs	r0, #100	; 0x64
 8005d64:	f000 f8c8 	bl	8005ef8 <HAL_Delay>
	retour = HAL_UART_Receive_DMA(miniLidarHaut.pHuart, miniLidarHaut.serialBuffer, 10);
 8005d68:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <tfminiplus_init+0x230>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	220a      	movs	r2, #10
 8005d6e:	491d      	ldr	r1, [pc, #116]	; (8005de4 <tfminiplus_init+0x25c>)
 8005d70:	4618      	mov	r0, r3
 8005d72:	f004 fffc 	bl	800ad6e <HAL_UART_Receive_DMA>
 8005d76:	4603      	mov	r3, r0
 8005d78:	70fb      	strb	r3, [r7, #3]
	HAL_Delay(900);
 8005d7a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8005d7e:	f000 f8bb 	bl	8005ef8 <HAL_Delay>

	// D�but d'�coute
	for(i=0; i<10; i++)
 8005d82:	2300      	movs	r3, #0
 8005d84:	607b      	str	r3, [r7, #4]
 8005d86:	e007      	b.n	8005d98 <tfminiplus_init+0x210>
		buffer_uart5[i] = 0;
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <tfminiplus_init+0x260>)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=0; i<10; i++)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3301      	adds	r3, #1
 8005d96:	607b      	str	r3, [r7, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b09      	cmp	r3, #9
 8005d9c:	ddf4      	ble.n	8005d88 <tfminiplus_init+0x200>
//	retour += HAL_UART_Receive_DMA(miniLidarAvant.pHuart, miniLidarAvant.serialBuffer, 9);

//	retour = HAL_UART_Receive(miniLidarDroit.pHuart, miniLidarDroit.serialBuffer, 9, HAL_MAX_DELAY);
//	retour = 0;

	return retour;
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	20000bd0 	.word	0x20000bd0
 8005dac:	200002f4 	.word	0x200002f4
 8005db0:	20000cd0 	.word	0x20000cd0
 8005db4:	20000574 	.word	0x20000574
 8005db8:	20000c18 	.word	0x20000c18
 8005dbc:	2000081c 	.word	0x2000081c
 8005dc0:	20000c88 	.word	0x20000c88
 8005dc4:	200008a0 	.word	0x200008a0
 8005dc8:	40020400 	.word	0x40020400
 8005dcc:	40020000 	.word	0x40020000
 8005dd0:	40020800 	.word	0x40020800
 8005dd4:	40021400 	.word	0x40021400
 8005dd8:	20000c8c 	.word	0x20000c8c
 8005ddc:	20000bd4 	.word	0x20000bd4
 8005de0:	20000cd4 	.word	0x20000cd4
 8005de4:	20000c1c 	.word	0x20000c1c
 8005de8:	20000c60 	.word	0x20000c60

08005dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005df0:	480d      	ldr	r0, [pc, #52]	; (8005e28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005df2:	490e      	ldr	r1, [pc, #56]	; (8005e2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005df4:	4a0e      	ldr	r2, [pc, #56]	; (8005e30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005df8:	e002      	b.n	8005e00 <LoopCopyDataInit>

08005dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dfe:	3304      	adds	r3, #4

08005e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e04:	d3f9      	bcc.n	8005dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e06:	4a0b      	ldr	r2, [pc, #44]	; (8005e34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e08:	4c0b      	ldr	r4, [pc, #44]	; (8005e38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e0c:	e001      	b.n	8005e12 <LoopFillZerobss>

08005e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e10:	3204      	adds	r2, #4

08005e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e14:	d3fb      	bcc.n	8005e0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e16:	f7ff fb3d 	bl	8005494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e1a:	f005 ff5b 	bl	800bcd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e1e:	f7fb fe93 	bl	8001b48 <main>
  bx  lr    
 8005e22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e2c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005e30:	080122e0 	.word	0x080122e0
  ldr r2, =_sbss
 8005e34:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005e38:	20000d2c 	.word	0x20000d2c

08005e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e3c:	e7fe      	b.n	8005e3c <ADC_IRQHandler>

08005e3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e42:	2003      	movs	r0, #3
 8005e44:	f000 fbd4 	bl	80065f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e48:	200f      	movs	r0, #15
 8005e4a:	f000 f805 	bl	8005e58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005e4e:	f7fe fca7 	bl	80047a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e60:	4b12      	ldr	r3, [pc, #72]	; (8005eac <HAL_InitTick+0x54>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <HAL_InitTick+0x58>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fbef 	bl	800665a <HAL_SYSTICK_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e00e      	b.n	8005ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b0f      	cmp	r3, #15
 8005e8a:	d80a      	bhi.n	8005ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	f000 fbb7 	bl	8006606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005e98:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <HAL_InitTick+0x5c>)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	2000001c 	.word	0x2000001c
 8005eb0:	20000024 	.word	0x20000024
 8005eb4:	20000020 	.word	0x20000020

08005eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <HAL_IncTick+0x20>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <HAL_IncTick+0x24>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <HAL_IncTick+0x24>)
 8005eca:	6013      	str	r3, [r2, #0]
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	20000024 	.word	0x20000024
 8005edc:	20000d18 	.word	0x20000d18

08005ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8005ee4:	4b03      	ldr	r3, [pc, #12]	; (8005ef4 <HAL_GetTick+0x14>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000d18 	.word	0x20000d18

08005ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f00:	f7ff ffee 	bl	8005ee0 <HAL_GetTick>
 8005f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d005      	beq.n	8005f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f12:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <HAL_Delay+0x44>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f1e:	bf00      	nop
 8005f20:	f7ff ffde 	bl	8005ee0 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d8f7      	bhi.n	8005f20 <HAL_Delay+0x28>
  {
  }
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000024 	.word	0x20000024

08005f40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e031      	b.n	8005fba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fe fc42 	bl	80047e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d116      	bne.n	8005fac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f82:	4b10      	ldr	r3, [pc, #64]	; (8005fc4 <HAL_ADC_Init+0x84>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	f043 0202 	orr.w	r2, r3, #2
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f964 	bl	800625c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	f023 0303 	bic.w	r3, r3, #3
 8005fa2:	f043 0201 	orr.w	r2, r3, #1
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8005faa:	e001      	b.n	8005fb0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	ffffeefd 	.word	0xffffeefd

08005fc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_ADC_ConfigChannel+0x1c>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e12a      	b.n	800623a <HAL_ADC_ConfigChannel+0x272>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b09      	cmp	r3, #9
 8005ff2:	d93a      	bls.n	800606a <HAL_ADC_ConfigChannel+0xa2>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffc:	d035      	beq.n	800606a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68d9      	ldr	r1, [r3, #12]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	461a      	mov	r2, r3
 800600c:	4613      	mov	r3, r2
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4413      	add	r3, r2
 8006012:	3b1e      	subs	r3, #30
 8006014:	2207      	movs	r2, #7
 8006016:	fa02 f303 	lsl.w	r3, r2, r3
 800601a:	43da      	mvns	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	400a      	ands	r2, r1
 8006022:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a87      	ldr	r2, [pc, #540]	; (8006248 <HAL_ADC_ConfigChannel+0x280>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d10a      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68d9      	ldr	r1, [r3, #12]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	061a      	lsls	r2, r3, #24
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006042:	e035      	b.n	80060b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68d9      	ldr	r1, [r3, #12]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	4618      	mov	r0, r3
 8006056:	4603      	mov	r3, r0
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	4403      	add	r3, r0
 800605c:	3b1e      	subs	r3, #30
 800605e:	409a      	lsls	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006068:	e022      	b.n	80060b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6919      	ldr	r1, [r3, #16]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	461a      	mov	r2, r3
 8006078:	4613      	mov	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4413      	add	r3, r2
 800607e:	2207      	movs	r2, #7
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	43da      	mvns	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	400a      	ands	r2, r1
 800608c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6919      	ldr	r1, [r3, #16]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	4618      	mov	r0, r3
 80060a0:	4603      	mov	r3, r0
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	4403      	add	r3, r0
 80060a6:	409a      	lsls	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d824      	bhi.n	8006102 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	3b05      	subs	r3, #5
 80060ca:	221f      	movs	r2, #31
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43da      	mvns	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	400a      	ands	r2, r1
 80060d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	4618      	mov	r0, r3
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	3b05      	subs	r3, #5
 80060f4:	fa00 f203 	lsl.w	r2, r0, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	635a      	str	r2, [r3, #52]	; 0x34
 8006100:	e04c      	b.n	800619c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d824      	bhi.n	8006154 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	3b23      	subs	r3, #35	; 0x23
 800611c:	221f      	movs	r2, #31
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43da      	mvns	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	400a      	ands	r2, r1
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	4618      	mov	r0, r3
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	3b23      	subs	r3, #35	; 0x23
 8006146:	fa00 f203 	lsl.w	r2, r0, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	631a      	str	r2, [r3, #48]	; 0x30
 8006152:	e023      	b.n	800619c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	3b41      	subs	r3, #65	; 0x41
 8006166:	221f      	movs	r2, #31
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43da      	mvns	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	400a      	ands	r2, r1
 8006174:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	4618      	mov	r0, r3
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	3b41      	subs	r3, #65	; 0x41
 8006190:	fa00 f203 	lsl.w	r2, r0, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a2a      	ldr	r2, [pc, #168]	; (800624c <HAL_ADC_ConfigChannel+0x284>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10a      	bne.n	80061bc <HAL_ADC_ConfigChannel+0x1f4>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ae:	d105      	bne.n	80061bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80061b0:	4b27      	ldr	r3, [pc, #156]	; (8006250 <HAL_ADC_ConfigChannel+0x288>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4a26      	ldr	r2, [pc, #152]	; (8006250 <HAL_ADC_ConfigChannel+0x288>)
 80061b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80061ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a22      	ldr	r2, [pc, #136]	; (800624c <HAL_ADC_ConfigChannel+0x284>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d109      	bne.n	80061da <HAL_ADC_ConfigChannel+0x212>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b12      	cmp	r3, #18
 80061cc:	d105      	bne.n	80061da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80061ce:	4b20      	ldr	r3, [pc, #128]	; (8006250 <HAL_ADC_ConfigChannel+0x288>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <HAL_ADC_ConfigChannel+0x288>)
 80061d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1b      	ldr	r2, [pc, #108]	; (800624c <HAL_ADC_ConfigChannel+0x284>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d125      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x268>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <HAL_ADC_ConfigChannel+0x280>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d003      	beq.n	80061f6 <HAL_ADC_ConfigChannel+0x22e>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b11      	cmp	r3, #17
 80061f4:	d11c      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80061f6:	4b16      	ldr	r3, [pc, #88]	; (8006250 <HAL_ADC_ConfigChannel+0x288>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <HAL_ADC_ConfigChannel+0x288>)
 80061fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006200:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a10      	ldr	r2, [pc, #64]	; (8006248 <HAL_ADC_ConfigChannel+0x280>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d111      	bne.n	8006230 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800620c:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_ADC_ConfigChannel+0x28c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a11      	ldr	r2, [pc, #68]	; (8006258 <HAL_ADC_ConfigChannel+0x290>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0c9a      	lsrs	r2, r3, #18
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006222:	e002      	b.n	800622a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3b01      	subs	r3, #1
 8006228:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f9      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	10000012 	.word	0x10000012
 800624c:	40012000 	.word	0x40012000
 8006250:	40012300 	.word	0x40012300
 8006254:	2000001c 	.word	0x2000001c
 8006258:	431bde83 	.word	0x431bde83

0800625c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006264:	4b78      	ldr	r3, [pc, #480]	; (8006448 <ADC_Init+0x1ec>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a77      	ldr	r2, [pc, #476]	; (8006448 <ADC_Init+0x1ec>)
 800626a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800626e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006270:	4b75      	ldr	r3, [pc, #468]	; (8006448 <ADC_Init+0x1ec>)
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4973      	ldr	r1, [pc, #460]	; (8006448 <ADC_Init+0x1ec>)
 800627a:	4313      	orrs	r3, r2
 800627c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800628c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	021a      	lsls	r2, r3, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6859      	ldr	r1, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6899      	ldr	r1, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	4a58      	ldr	r2, [pc, #352]	; (800644c <ADC_Init+0x1f0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6899      	ldr	r1, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6899      	ldr	r1, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	609a      	str	r2, [r3, #8]
 8006334:	e00f      	b.n	8006356 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006354:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0202 	bic.w	r2, r2, #2
 8006364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6899      	ldr	r1, [r3, #8]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	005a      	lsls	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006392:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	3b01      	subs	r3, #1
 80063b0:	035a      	lsls	r2, r3, #13
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	e007      	b.n	80063cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	051a      	lsls	r2, r3, #20
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6899      	ldr	r1, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800640e:	025a      	lsls	r2, r3, #9
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6899      	ldr	r1, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	029a      	lsls	r2, r3, #10
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	609a      	str	r2, [r3, #8]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40012300 	.word	0x40012300
 800644c:	0f000001 	.word	0x0f000001

08006450 <__NVIC_SetPriorityGrouping>:
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <__NVIC_SetPriorityGrouping+0x40>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800646c:	4013      	ands	r3, r2
 800646e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <__NVIC_SetPriorityGrouping+0x44>)
 800647a:	4313      	orrs	r3, r2
 800647c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800647e:	4a04      	ldr	r2, [pc, #16]	; (8006490 <__NVIC_SetPriorityGrouping+0x40>)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	60d3      	str	r3, [r2, #12]
}
 8006484:	bf00      	nop
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	e000ed00 	.word	0xe000ed00
 8006494:	05fa0000 	.word	0x05fa0000

08006498 <__NVIC_GetPriorityGrouping>:
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <__NVIC_GetPriorityGrouping+0x18>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	0a1b      	lsrs	r3, r3, #8
 80064a2:	f003 0307 	and.w	r3, r3, #7
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	e000ed00 	.word	0xe000ed00

080064b4 <__NVIC_EnableIRQ>:
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	4603      	mov	r3, r0
 80064bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	db0b      	blt.n	80064de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	f003 021f 	and.w	r2, r3, #31
 80064cc:	4907      	ldr	r1, [pc, #28]	; (80064ec <__NVIC_EnableIRQ+0x38>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	095b      	lsrs	r3, r3, #5
 80064d4:	2001      	movs	r0, #1
 80064d6:	fa00 f202 	lsl.w	r2, r0, r2
 80064da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000e100 	.word	0xe000e100

080064f0 <__NVIC_SetPriority>:
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006500:	2b00      	cmp	r3, #0
 8006502:	db0a      	blt.n	800651a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	490c      	ldr	r1, [pc, #48]	; (800653c <__NVIC_SetPriority+0x4c>)
 800650a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650e:	0112      	lsls	r2, r2, #4
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	440b      	add	r3, r1
 8006514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006518:	e00a      	b.n	8006530 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4908      	ldr	r1, [pc, #32]	; (8006540 <__NVIC_SetPriority+0x50>)
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	3b04      	subs	r3, #4
 8006528:	0112      	lsls	r2, r2, #4
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	440b      	add	r3, r1
 800652e:	761a      	strb	r2, [r3, #24]
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	e000e100 	.word	0xe000e100
 8006540:	e000ed00 	.word	0xe000ed00

08006544 <NVIC_EncodePriority>:
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f1c3 0307 	rsb	r3, r3, #7
 800655e:	2b04      	cmp	r3, #4
 8006560:	bf28      	it	cs
 8006562:	2304      	movcs	r3, #4
 8006564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	3304      	adds	r3, #4
 800656a:	2b06      	cmp	r3, #6
 800656c:	d902      	bls.n	8006574 <NVIC_EncodePriority+0x30>
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3b03      	subs	r3, #3
 8006572:	e000      	b.n	8006576 <NVIC_EncodePriority+0x32>
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43da      	mvns	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	401a      	ands	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800658c:	f04f 31ff 	mov.w	r1, #4294967295
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	43d9      	mvns	r1, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800659c:	4313      	orrs	r3, r2
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3724      	adds	r7, #36	; 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065bc:	d301      	bcc.n	80065c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065be:	2301      	movs	r3, #1
 80065c0:	e00f      	b.n	80065e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065c2:	4a0a      	ldr	r2, [pc, #40]	; (80065ec <SysTick_Config+0x40>)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ca:	210f      	movs	r1, #15
 80065cc:	f04f 30ff 	mov.w	r0, #4294967295
 80065d0:	f7ff ff8e 	bl	80064f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065d4:	4b05      	ldr	r3, [pc, #20]	; (80065ec <SysTick_Config+0x40>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065da:	4b04      	ldr	r3, [pc, #16]	; (80065ec <SysTick_Config+0x40>)
 80065dc:	2207      	movs	r2, #7
 80065de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	e000e010 	.word	0xe000e010

080065f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff ff29 	bl	8006450 <__NVIC_SetPriorityGrouping>
}
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af00      	add	r7, sp, #0
 800660c:	4603      	mov	r3, r0
 800660e:	60b9      	str	r1, [r7, #8]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006618:	f7ff ff3e 	bl	8006498 <__NVIC_GetPriorityGrouping>
 800661c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	6978      	ldr	r0, [r7, #20]
 8006624:	f7ff ff8e 	bl	8006544 <NVIC_EncodePriority>
 8006628:	4602      	mov	r2, r0
 800662a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662e:	4611      	mov	r1, r2
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff ff5d 	bl	80064f0 <__NVIC_SetPriority>
}
 8006636:	bf00      	nop
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b082      	sub	sp, #8
 8006642:	af00      	add	r7, sp, #0
 8006644:	4603      	mov	r3, r0
 8006646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff ff31 	bl	80064b4 <__NVIC_EnableIRQ>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7ff ffa2 	bl	80065ac <SysTick_Config>
 8006668:	4603      	mov	r3, r0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006680:	f7ff fc2e 	bl	8005ee0 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e099      	b.n	80067c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2202      	movs	r2, #2
 800669c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066b0:	e00f      	b.n	80066d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066b2:	f7ff fc15 	bl	8005ee0 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	2b05      	cmp	r3, #5
 80066be:	d908      	bls.n	80066d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2203      	movs	r2, #3
 80066ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e078      	b.n	80067c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e8      	bne.n	80066b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4b38      	ldr	r3, [pc, #224]	; (80067cc <HAL_DMA_Init+0x158>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80066fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800670a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006728:	2b04      	cmp	r3, #4
 800672a:	d107      	bne.n	800673c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006734:	4313      	orrs	r3, r2
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006762:	2b04      	cmp	r3, #4
 8006764:	d117      	bne.n	8006796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00e      	beq.n	8006796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fb09 	bl	8006d90 <DMA_CheckFifoParam>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2240      	movs	r2, #64	; 0x40
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006792:	2301      	movs	r3, #1
 8006794:	e016      	b.n	80067c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fac0 	bl	8006d24 <DMA_CalcBaseAndBitshift>
 80067a4:	4603      	mov	r3, r0
 80067a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	223f      	movs	r2, #63	; 0x3f
 80067ae:	409a      	lsls	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	f010803f 	.word	0xf010803f

080067d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d101      	bne.n	80067f6 <HAL_DMA_Start_IT+0x26>
 80067f2:	2302      	movs	r3, #2
 80067f4:	e048      	b.n	8006888 <HAL_DMA_Start_IT+0xb8>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b01      	cmp	r3, #1
 8006808:	d137      	bne.n	800687a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2202      	movs	r2, #2
 800680e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 fa52 	bl	8006cc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	223f      	movs	r2, #63	; 0x3f
 800682a:	409a      	lsls	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0216 	orr.w	r2, r2, #22
 800683e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695a      	ldr	r2, [r3, #20]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800684e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0208 	orr.w	r2, r2, #8
 8006866:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e005      	b.n	8006886 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800689e:	f7ff fb1f 	bl	8005ee0 <HAL_GetTick>
 80068a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d008      	beq.n	80068c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e052      	b.n	8006968 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0216 	bic.w	r2, r2, #22
 80068d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695a      	ldr	r2, [r3, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <HAL_DMA_Abort+0x62>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0208 	bic.w	r2, r2, #8
 8006900:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006912:	e013      	b.n	800693c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006914:	f7ff fae4 	bl	8005ee0 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b05      	cmp	r3, #5
 8006920:	d90c      	bls.n	800693c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2203      	movs	r2, #3
 8006934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e015      	b.n	8006968 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e4      	bne.n	8006914 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	223f      	movs	r2, #63	; 0x3f
 8006950:	409a      	lsls	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d004      	beq.n	800698e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e00c      	b.n	80069a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2205      	movs	r2, #5
 8006992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80069bc:	2300      	movs	r3, #0
 80069be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80069c0:	4b92      	ldr	r3, [pc, #584]	; (8006c0c <HAL_DMA_IRQHandler+0x258>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a92      	ldr	r2, [pc, #584]	; (8006c10 <HAL_DMA_IRQHandler+0x25c>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	0a9b      	lsrs	r3, r3, #10
 80069cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069de:	2208      	movs	r2, #8
 80069e0:	409a      	lsls	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4013      	ands	r3, r2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01a      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0304 	and.w	r3, r3, #4
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d013      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f043 0201 	orr.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	2201      	movs	r2, #1
 8006a26:	409a      	lsls	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d012      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a42:	2201      	movs	r2, #1
 8006a44:	409a      	lsls	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	f043 0202 	orr.w	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	409a      	lsls	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d012      	beq.n	8006a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a78:	2204      	movs	r2, #4
 8006a7a:	409a      	lsls	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	f043 0204 	orr.w	r2, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a90:	2210      	movs	r2, #16
 8006a92:	409a      	lsls	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4013      	ands	r3, r2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d043      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d03c      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aae:	2210      	movs	r2, #16
 8006ab0:	409a      	lsls	r2, r3
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d018      	beq.n	8006af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d108      	bne.n	8006ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d024      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
 8006ae2:	e01f      	b.n	8006b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01b      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	e016      	b.n	8006b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d107      	bne.n	8006b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0208 	bic.w	r2, r2, #8
 8006b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b28:	2220      	movs	r2, #32
 8006b2a:	409a      	lsls	r2, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 808e 	beq.w	8006c52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8086 	beq.w	8006c52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	409a      	lsls	r2, r3
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b05      	cmp	r3, #5
 8006b5c:	d136      	bne.n	8006bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0216 	bic.w	r2, r2, #22
 8006b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	695a      	ldr	r2, [r3, #20]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_DMA_IRQHandler+0x1da>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0208 	bic.w	r2, r2, #8
 8006b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	223f      	movs	r2, #63	; 0x3f
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d07d      	beq.n	8006cbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
        }
        return;
 8006bca:	e078      	b.n	8006cbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01c      	beq.n	8006c14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d108      	bne.n	8006bfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d030      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
 8006bf8:	e02b      	b.n	8006c52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d027      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
 8006c0a:	e022      	b.n	8006c52 <HAL_DMA_IRQHandler+0x29e>
 8006c0c:	2000001c 	.word	0x2000001c
 8006c10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10f      	bne.n	8006c42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0210 	bic.w	r2, r2, #16
 8006c30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d003      	beq.n	8006c52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d032      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d022      	beq.n	8006cac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2205      	movs	r2, #5
 8006c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3301      	adds	r3, #1
 8006c82:	60bb      	str	r3, [r7, #8]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d307      	bcc.n	8006c9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1f2      	bne.n	8006c7e <HAL_DMA_IRQHandler+0x2ca>
 8006c98:	e000      	b.n	8006c9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006c9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	e000      	b.n	8006cc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006cbe:	bf00      	nop
    }
  }
}
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop

08006cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	2b40      	cmp	r3, #64	; 0x40
 8006cf4:	d108      	bne.n	8006d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d06:	e007      	b.n	8006d18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	60da      	str	r2, [r3, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	3b10      	subs	r3, #16
 8006d34:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <DMA_CalcBaseAndBitshift+0x60>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d3e:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <DMA_CalcBaseAndBitshift+0x64>)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d908      	bls.n	8006d64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	4b0c      	ldr	r3, [pc, #48]	; (8006d8c <DMA_CalcBaseAndBitshift+0x68>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	1d1a      	adds	r2, r3, #4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	659a      	str	r2, [r3, #88]	; 0x58
 8006d62:	e006      	b.n	8006d72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b08      	ldr	r3, [pc, #32]	; (8006d8c <DMA_CalcBaseAndBitshift+0x68>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	aaaaaaab 	.word	0xaaaaaaab
 8006d88:	08011d78 	.word	0x08011d78
 8006d8c:	fffffc00 	.word	0xfffffc00

08006d90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11f      	bne.n	8006dea <DMA_CheckFifoParam+0x5a>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d856      	bhi.n	8006e5e <DMA_CheckFifoParam+0xce>
 8006db0:	a201      	add	r2, pc, #4	; (adr r2, 8006db8 <DMA_CheckFifoParam+0x28>)
 8006db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db6:	bf00      	nop
 8006db8:	08006dc9 	.word	0x08006dc9
 8006dbc:	08006ddb 	.word	0x08006ddb
 8006dc0:	08006dc9 	.word	0x08006dc9
 8006dc4:	08006e5f 	.word	0x08006e5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d046      	beq.n	8006e62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd8:	e043      	b.n	8006e62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006de2:	d140      	bne.n	8006e66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e03d      	b.n	8006e66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df2:	d121      	bne.n	8006e38 <DMA_CheckFifoParam+0xa8>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d837      	bhi.n	8006e6a <DMA_CheckFifoParam+0xda>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <DMA_CheckFifoParam+0x70>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006e17 	.word	0x08006e17
 8006e08:	08006e11 	.word	0x08006e11
 8006e0c:	08006e29 	.word	0x08006e29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	73fb      	strb	r3, [r7, #15]
      break;
 8006e14:	e030      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d025      	beq.n	8006e6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e26:	e022      	b.n	8006e6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e30:	d11f      	bne.n	8006e72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e36:	e01c      	b.n	8006e72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d903      	bls.n	8006e46 <DMA_CheckFifoParam+0xb6>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d003      	beq.n	8006e4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e44:	e018      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	73fb      	strb	r3, [r7, #15]
      break;
 8006e4a:	e015      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5c:	e00b      	b.n	8006e76 <DMA_CheckFifoParam+0xe6>
      break;
 8006e5e:	bf00      	nop
 8006e60:	e00a      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      break;
 8006e62:	bf00      	nop
 8006e64:	e008      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      break;
 8006e66:	bf00      	nop
 8006e68:	e006      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e004      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e002      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e72:	bf00      	nop
 8006e74:	e000      	b.n	8006e78 <DMA_CheckFifoParam+0xe8>
      break;
 8006e76:	bf00      	nop
    }
  } 
  
  return status; 
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop

08006e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b089      	sub	sp, #36	; 0x24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e92:	2300      	movs	r3, #0
 8006e94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	e175      	b.n	8007194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	f040 8164 	bne.w	800718e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d00b      	beq.n	8006ee6 <HAL_GPIO_Init+0x5e>
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d007      	beq.n	8006ee6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006eda:	2b11      	cmp	r3, #17
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b12      	cmp	r3, #18
 8006ee4:	d130      	bne.n	8006f48 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	4013      	ands	r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	43db      	mvns	r3, r3
 8006f26:	69ba      	ldr	r2, [r7, #24]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 0201 	and.w	r2, r3, #1
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	2203      	movs	r2, #3
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d003      	beq.n	8006f88 <HAL_GPIO_Init+0x100>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b12      	cmp	r3, #18
 8006f86:	d123      	bne.n	8006fd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	08da      	lsrs	r2, r3, #3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	3208      	adds	r2, #8
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	220f      	movs	r2, #15
 8006fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f003 0307 	and.w	r3, r3, #7
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	08da      	lsrs	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3208      	adds	r2, #8
 8006fca:	69b9      	ldr	r1, [r7, #24]
 8006fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	2203      	movs	r2, #3
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f003 0203 	and.w	r2, r3, #3
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 80be 	beq.w	800718e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007012:	4b66      	ldr	r3, [pc, #408]	; (80071ac <HAL_GPIO_Init+0x324>)
 8007014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007016:	4a65      	ldr	r2, [pc, #404]	; (80071ac <HAL_GPIO_Init+0x324>)
 8007018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800701c:	6453      	str	r3, [r2, #68]	; 0x44
 800701e:	4b63      	ldr	r3, [pc, #396]	; (80071ac <HAL_GPIO_Init+0x324>)
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800702a:	4a61      	ldr	r2, [pc, #388]	; (80071b0 <HAL_GPIO_Init+0x328>)
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	089b      	lsrs	r3, r3, #2
 8007030:	3302      	adds	r3, #2
 8007032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007036:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f003 0303 	and.w	r3, r3, #3
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	220f      	movs	r2, #15
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	43db      	mvns	r3, r3
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	4013      	ands	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a58      	ldr	r2, [pc, #352]	; (80071b4 <HAL_GPIO_Init+0x32c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d037      	beq.n	80070c6 <HAL_GPIO_Init+0x23e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a57      	ldr	r2, [pc, #348]	; (80071b8 <HAL_GPIO_Init+0x330>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d031      	beq.n	80070c2 <HAL_GPIO_Init+0x23a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a56      	ldr	r2, [pc, #344]	; (80071bc <HAL_GPIO_Init+0x334>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d02b      	beq.n	80070be <HAL_GPIO_Init+0x236>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a55      	ldr	r2, [pc, #340]	; (80071c0 <HAL_GPIO_Init+0x338>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d025      	beq.n	80070ba <HAL_GPIO_Init+0x232>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a54      	ldr	r2, [pc, #336]	; (80071c4 <HAL_GPIO_Init+0x33c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01f      	beq.n	80070b6 <HAL_GPIO_Init+0x22e>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a53      	ldr	r2, [pc, #332]	; (80071c8 <HAL_GPIO_Init+0x340>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d019      	beq.n	80070b2 <HAL_GPIO_Init+0x22a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a52      	ldr	r2, [pc, #328]	; (80071cc <HAL_GPIO_Init+0x344>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_GPIO_Init+0x226>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a51      	ldr	r2, [pc, #324]	; (80071d0 <HAL_GPIO_Init+0x348>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00d      	beq.n	80070aa <HAL_GPIO_Init+0x222>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a50      	ldr	r2, [pc, #320]	; (80071d4 <HAL_GPIO_Init+0x34c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <HAL_GPIO_Init+0x21e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a4f      	ldr	r2, [pc, #316]	; (80071d8 <HAL_GPIO_Init+0x350>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d101      	bne.n	80070a2 <HAL_GPIO_Init+0x21a>
 800709e:	2309      	movs	r3, #9
 80070a0:	e012      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070a2:	230a      	movs	r3, #10
 80070a4:	e010      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070a6:	2308      	movs	r3, #8
 80070a8:	e00e      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070aa:	2307      	movs	r3, #7
 80070ac:	e00c      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070ae:	2306      	movs	r3, #6
 80070b0:	e00a      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070b2:	2305      	movs	r3, #5
 80070b4:	e008      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070b6:	2304      	movs	r3, #4
 80070b8:	e006      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070ba:	2303      	movs	r3, #3
 80070bc:	e004      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070be:	2302      	movs	r3, #2
 80070c0:	e002      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e000      	b.n	80070c8 <HAL_GPIO_Init+0x240>
 80070c6:	2300      	movs	r3, #0
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	f002 0203 	and.w	r2, r2, #3
 80070ce:	0092      	lsls	r2, r2, #2
 80070d0:	4093      	lsls	r3, r2
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80070d8:	4935      	ldr	r1, [pc, #212]	; (80071b0 <HAL_GPIO_Init+0x328>)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	089b      	lsrs	r3, r3, #2
 80070de:	3302      	adds	r3, #2
 80070e0:	69ba      	ldr	r2, [r7, #24]
 80070e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070e6:	4b3d      	ldr	r3, [pc, #244]	; (80071dc <HAL_GPIO_Init+0x354>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	43db      	mvns	r3, r3
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	4013      	ands	r3, r2
 80070f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800710a:	4a34      	ldr	r2, [pc, #208]	; (80071dc <HAL_GPIO_Init+0x354>)
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007110:	4b32      	ldr	r3, [pc, #200]	; (80071dc <HAL_GPIO_Init+0x354>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	43db      	mvns	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d003      	beq.n	8007134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	4313      	orrs	r3, r2
 8007132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007134:	4a29      	ldr	r2, [pc, #164]	; (80071dc <HAL_GPIO_Init+0x354>)
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800713a:	4b28      	ldr	r3, [pc, #160]	; (80071dc <HAL_GPIO_Init+0x354>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	43db      	mvns	r3, r3
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	4013      	ands	r3, r2
 8007148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800715e:	4a1f      	ldr	r2, [pc, #124]	; (80071dc <HAL_GPIO_Init+0x354>)
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007164:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <HAL_GPIO_Init+0x354>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	43db      	mvns	r3, r3
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	4013      	ands	r3, r2
 8007172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4313      	orrs	r3, r2
 8007186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007188:	4a14      	ldr	r2, [pc, #80]	; (80071dc <HAL_GPIO_Init+0x354>)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3301      	adds	r3, #1
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2b0f      	cmp	r3, #15
 8007198:	f67f ae86 	bls.w	8006ea8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	3724      	adds	r7, #36	; 0x24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40023800 	.word	0x40023800
 80071b0:	40013800 	.word	0x40013800
 80071b4:	40020000 	.word	0x40020000
 80071b8:	40020400 	.word	0x40020400
 80071bc:	40020800 	.word	0x40020800
 80071c0:	40020c00 	.word	0x40020c00
 80071c4:	40021000 	.word	0x40021000
 80071c8:	40021400 	.word	0x40021400
 80071cc:	40021800 	.word	0x40021800
 80071d0:	40021c00 	.word	0x40021c00
 80071d4:	40022000 	.word	0x40022000
 80071d8:	40022400 	.word	0x40022400
 80071dc:	40013c00 	.word	0x40013c00

080071e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	887b      	ldrh	r3, [r7, #2]
 80071f2:	4013      	ands	r3, r2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071f8:	2301      	movs	r3, #1
 80071fa:	73fb      	strb	r3, [r7, #15]
 80071fc:	e001      	b.n	8007202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	807b      	strh	r3, [r7, #2]
 800721c:	4613      	mov	r3, r2
 800721e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007220:	787b      	ldrb	r3, [r7, #1]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007226:	887a      	ldrh	r2, [r7, #2]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800722c:	e003      	b.n	8007236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800722e:	887b      	ldrh	r3, [r7, #2]
 8007230:	041a      	lsls	r2, r3, #16
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	619a      	str	r2, [r3, #24]
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
	...

08007244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e07f      	b.n	8007356 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fd fb72 	bl	8004954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2224      	movs	r2, #36	; 0x24
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007294:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d107      	bne.n	80072be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	e006      	b.n	80072cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d104      	bne.n	80072de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6859      	ldr	r1, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4b1d      	ldr	r3, [pc, #116]	; (8007360 <HAL_I2C_Init+0x11c>)
 80072ea:	430b      	orrs	r3, r1
 80072ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691a      	ldr	r2, [r3, #16]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	ea42 0103 	orr.w	r1, r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	021a      	lsls	r2, r3, #8
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	69d9      	ldr	r1, [r3, #28]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3708      	adds	r7, #8
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	02008000 	.word	0x02008000

08007364 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b088      	sub	sp, #32
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	607a      	str	r2, [r7, #4]
 800736e:	461a      	mov	r2, r3
 8007370:	460b      	mov	r3, r1
 8007372:	817b      	strh	r3, [r7, #10]
 8007374:	4613      	mov	r3, r2
 8007376:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b20      	cmp	r3, #32
 8007382:	f040 80da 	bne.w	800753a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_I2C_Master_Transmit+0x30>
 8007390:	2302      	movs	r3, #2
 8007392:	e0d3      	b.n	800753c <HAL_I2C_Master_Transmit+0x1d8>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800739c:	f7fe fda0 	bl	8005ee0 <HAL_GetTick>
 80073a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	2319      	movs	r3, #25
 80073a8:	2201      	movs	r2, #1
 80073aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 f9e6 	bl	8007780 <I2C_WaitOnFlagUntilTimeout>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e0be      	b.n	800753c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2221      	movs	r2, #33	; 0x21
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2210      	movs	r2, #16
 80073ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	893a      	ldrh	r2, [r7, #8]
 80073de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2bff      	cmp	r3, #255	; 0xff
 80073ee:	d90e      	bls.n	800740e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	22ff      	movs	r2, #255	; 0xff
 80073f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	8979      	ldrh	r1, [r7, #10]
 80073fe:	4b51      	ldr	r3, [pc, #324]	; (8007544 <HAL_I2C_Master_Transmit+0x1e0>)
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 fb48 	bl	8007a9c <I2C_TransferConfig>
 800740c:	e06c      	b.n	80074e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800741c:	b2da      	uxtb	r2, r3
 800741e:	8979      	ldrh	r1, [r7, #10]
 8007420:	4b48      	ldr	r3, [pc, #288]	; (8007544 <HAL_I2C_Master_Transmit+0x1e0>)
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fb37 	bl	8007a9c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800742e:	e05b      	b.n	80074e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	6a39      	ldr	r1, [r7, #32]
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f9e3 	bl	8007800 <I2C_WaitOnTXISFlagUntilTimeout>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e07b      	b.n	800753c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	781a      	ldrb	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745e:	b29b      	uxth	r3, r3
 8007460:	3b01      	subs	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800746c:	3b01      	subs	r3, #1
 800746e:	b29a      	uxth	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d034      	beq.n	80074e8 <HAL_I2C_Master_Transmit+0x184>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d130      	bne.n	80074e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	2200      	movs	r2, #0
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f975 	bl	8007780 <I2C_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e04d      	b.n	800753c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2bff      	cmp	r3, #255	; 0xff
 80074a8:	d90e      	bls.n	80074c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	22ff      	movs	r2, #255	; 0xff
 80074ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	8979      	ldrh	r1, [r7, #10]
 80074b8:	2300      	movs	r3, #0
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	f000 faeb 	bl	8007a9c <I2C_TransferConfig>
 80074c6:	e00f      	b.n	80074e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	8979      	ldrh	r1, [r7, #10]
 80074da:	2300      	movs	r3, #0
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fada 	bl	8007a9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d19e      	bne.n	8007430 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	6a39      	ldr	r1, [r7, #32]
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 f9c2 	bl	8007880 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e01a      	b.n	800753c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2220      	movs	r2, #32
 800750c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6859      	ldr	r1, [r3, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_I2C_Master_Transmit+0x1e4>)
 800751a:	400b      	ands	r3, r1
 800751c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	e000      	b.n	800753c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800753a:	2302      	movs	r3, #2
  }
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	80002000 	.word	0x80002000
 8007548:	fe00e800 	.word	0xfe00e800

0800754c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af02      	add	r7, sp, #8
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	461a      	mov	r2, r3
 8007558:	460b      	mov	r3, r1
 800755a:	817b      	strh	r3, [r7, #10]
 800755c:	4613      	mov	r3, r2
 800755e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b20      	cmp	r3, #32
 800756a:	f040 80db 	bne.w	8007724 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <HAL_I2C_Master_Receive+0x30>
 8007578:	2302      	movs	r3, #2
 800757a:	e0d4      	b.n	8007726 <HAL_I2C_Master_Receive+0x1da>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007584:	f7fe fcac 	bl	8005ee0 <HAL_GetTick>
 8007588:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2319      	movs	r3, #25
 8007590:	2201      	movs	r2, #1
 8007592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 f8f2 	bl	8007780 <I2C_WaitOnFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e0bf      	b.n	8007726 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2222      	movs	r2, #34	; 0x22
 80075aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2210      	movs	r2, #16
 80075b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	893a      	ldrh	r2, [r7, #8]
 80075c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2bff      	cmp	r3, #255	; 0xff
 80075d6:	d90e      	bls.n	80075f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	22ff      	movs	r2, #255	; 0xff
 80075dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	8979      	ldrh	r1, [r7, #10]
 80075e6:	4b52      	ldr	r3, [pc, #328]	; (8007730 <HAL_I2C_Master_Receive+0x1e4>)
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa54 	bl	8007a9c <I2C_TransferConfig>
 80075f4:	e06d      	b.n	80076d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007604:	b2da      	uxtb	r2, r3
 8007606:	8979      	ldrh	r1, [r7, #10]
 8007608:	4b49      	ldr	r3, [pc, #292]	; (8007730 <HAL_I2C_Master_Receive+0x1e4>)
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fa43 	bl	8007a9c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8007616:	e05c      	b.n	80076d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	6a39      	ldr	r1, [r7, #32]
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f96b 	bl	80078f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e07c      	b.n	8007726 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007648:	3b01      	subs	r3, #1
 800764a:	b29a      	uxth	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	3b01      	subs	r3, #1
 8007658:	b29a      	uxth	r2, r3
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007662:	b29b      	uxth	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d034      	beq.n	80076d2 <HAL_I2C_Master_Receive+0x186>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766c:	2b00      	cmp	r3, #0
 800766e:	d130      	bne.n	80076d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	2200      	movs	r2, #0
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f880 	bl	8007780 <I2C_WaitOnFlagUntilTimeout>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e04d      	b.n	8007726 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800768e:	b29b      	uxth	r3, r3
 8007690:	2bff      	cmp	r3, #255	; 0xff
 8007692:	d90e      	bls.n	80076b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	22ff      	movs	r2, #255	; 0xff
 8007698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	8979      	ldrh	r1, [r7, #10]
 80076a2:	2300      	movs	r3, #0
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 f9f6 	bl	8007a9c <I2C_TransferConfig>
 80076b0:	e00f      	b.n	80076d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	8979      	ldrh	r1, [r7, #10]
 80076c4:	2300      	movs	r3, #0
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 f9e5 	bl	8007a9c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d19d      	bne.n	8007618 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	6a39      	ldr	r1, [r7, #32]
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f8cd 	bl	8007880 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e01a      	b.n	8007726 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2220      	movs	r2, #32
 80076f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6859      	ldr	r1, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <HAL_I2C_Master_Receive+0x1e8>)
 8007704:	400b      	ands	r3, r1
 8007706:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	80002400 	.word	0x80002400
 8007734:	fe00e800 	.word	0xfe00e800

08007738 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	2b02      	cmp	r3, #2
 800774c:	d103      	bne.n	8007756 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b01      	cmp	r3, #1
 8007762:	d007      	beq.n	8007774 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	699a      	ldr	r2, [r3, #24]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	619a      	str	r2, [r3, #24]
  }
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007790:	e022      	b.n	80077d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007798:	d01e      	beq.n	80077d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fe fba1 	bl	8005ee0 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d113      	bne.n	80077d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e00f      	b.n	80077f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	4013      	ands	r3, r2
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	bf0c      	ite	eq
 80077e8:	2301      	moveq	r3, #1
 80077ea:	2300      	movne	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	461a      	mov	r2, r3
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d0cd      	beq.n	8007792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800780c:	e02c      	b.n	8007868 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68b9      	ldr	r1, [r7, #8]
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f000 f8dc 	bl	80079d0 <I2C_IsAcknowledgeFailed>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e02a      	b.n	8007878 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007828:	d01e      	beq.n	8007868 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782a:	f7fe fb59 	bl	8005ee0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	429a      	cmp	r2, r3
 8007838:	d302      	bcc.n	8007840 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d113      	bne.n	8007868 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e007      	b.n	8007878 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d1cb      	bne.n	800780e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800788c:	e028      	b.n	80078e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	68b9      	ldr	r1, [r7, #8]
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 f89c 	bl	80079d0 <I2C_IsAcknowledgeFailed>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e026      	b.n	80078f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a2:	f7fe fb1d 	bl	8005ee0 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d302      	bcc.n	80078b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d113      	bne.n	80078e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078bc:	f043 0220 	orr.w	r2, r3, #32
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e007      	b.n	80078f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d1cf      	bne.n	800788e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007904:	e055      	b.n	80079b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f860 	bl	80079d0 <I2C_IsAcknowledgeFailed>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e053      	b.n	80079c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0320 	and.w	r3, r3, #32
 8007924:	2b20      	cmp	r3, #32
 8007926:	d129      	bne.n	800797c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b04      	cmp	r3, #4
 8007934:	d105      	bne.n	8007942 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	e03f      	b.n	80079c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2220      	movs	r2, #32
 8007948:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	4b1d      	ldr	r3, [pc, #116]	; (80079cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8007956:	400b      	ands	r3, r1
 8007958:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e022      	b.n	80079c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800797c:	f7fe fab0 	bl	8005ee0 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10f      	bne.n	80079b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e007      	b.n	80079c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d1a2      	bne.n	8007906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	fe00e800 	.word	0xfe00e800

080079d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f003 0310 	and.w	r3, r3, #16
 80079e6:	2b10      	cmp	r3, #16
 80079e8:	d151      	bne.n	8007a8e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079ea:	e022      	b.n	8007a32 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f2:	d01e      	beq.n	8007a32 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f4:	f7fe fa74 	bl	8005ee0 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d302      	bcc.n	8007a0a <I2C_IsAcknowledgeFailed+0x3a>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d113      	bne.n	8007a32 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	f043 0220 	orr.w	r2, r3, #32
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e02e      	b.n	8007a90 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d1d5      	bne.n	80079ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2210      	movs	r2, #16
 8007a46:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff fe71 	bl	8007738 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6859      	ldr	r1, [r3, #4]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <I2C_IsAcknowledgeFailed+0xc8>)
 8007a62:	400b      	ands	r3, r1
 8007a64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	f043 0204 	orr.w	r2, r3, #4
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	fe00e800 	.word	0xfe00e800

08007a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	817b      	strh	r3, [r7, #10]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	0d5b      	lsrs	r3, r3, #21
 8007ab8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007abc:	4b0d      	ldr	r3, [pc, #52]	; (8007af4 <I2C_TransferConfig+0x58>)
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	43db      	mvns	r3, r3
 8007ac2:	ea02 0103 	and.w	r1, r2, r3
 8007ac6:	897b      	ldrh	r3, [r7, #10]
 8007ac8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007acc:	7a7b      	ldrb	r3, [r7, #9]
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007ae6:	bf00      	nop
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	03ff63ff 	.word	0x03ff63ff

08007af8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d138      	bne.n	8007b80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e032      	b.n	8007b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2224      	movs	r2, #36	; 0x24
 8007b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0201 	bic.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6819      	ldr	r1, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e000      	b.n	8007b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b80:	2302      	movs	r3, #2
  }
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d139      	bne.n	8007c18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e033      	b.n	8007c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2224      	movs	r2, #36	; 0x24
 8007bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007be0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	021b      	lsls	r3, r3, #8
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e000      	b.n	8007c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c18:	2302      	movs	r3, #2
  }
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c32:	4b23      	ldr	r3, [pc, #140]	; (8007cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	4a22      	ldr	r2, [pc, #136]	; (8007cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c3e:	4b20      	ldr	r3, [pc, #128]	; (8007cc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c4a:	4b1e      	ldr	r3, [pc, #120]	; (8007cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a1d      	ldr	r2, [pc, #116]	; (8007cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c56:	f7fe f943 	bl	8005ee0 <HAL_GetTick>
 8007c5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c5c:	e009      	b.n	8007c72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c5e:	f7fe f93f 	bl	8005ee0 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c6c:	d901      	bls.n	8007c72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e022      	b.n	8007cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c72:	4b14      	ldr	r3, [pc, #80]	; (8007cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7e:	d1ee      	bne.n	8007c5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007c80:	4b10      	ldr	r3, [pc, #64]	; (8007cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a0f      	ldr	r2, [pc, #60]	; (8007cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c8c:	f7fe f928 	bl	8005ee0 <HAL_GetTick>
 8007c90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007c92:	e009      	b.n	8007ca8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c94:	f7fe f924 	bl	8005ee0 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	1ad3      	subs	r3, r2, r3
 8007c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ca2:	d901      	bls.n	8007ca8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e007      	b.n	8007cb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ca8:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cb4:	d1ee      	bne.n	8007c94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	40007000 	.word	0x40007000

08007cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e291      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 8087 	beq.w	8007dfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007cec:	4b96      	ldr	r3, [pc, #600]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 030c 	and.w	r3, r3, #12
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d00c      	beq.n	8007d12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cf8:	4b93      	ldr	r3, [pc, #588]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 030c 	and.w	r3, r3, #12
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d112      	bne.n	8007d2a <HAL_RCC_OscConfig+0x62>
 8007d04:	4b90      	ldr	r3, [pc, #576]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d10:	d10b      	bne.n	8007d2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d12:	4b8d      	ldr	r3, [pc, #564]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d06c      	beq.n	8007df8 <HAL_RCC_OscConfig+0x130>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d168      	bne.n	8007df8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e26b      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d32:	d106      	bne.n	8007d42 <HAL_RCC_OscConfig+0x7a>
 8007d34:	4b84      	ldr	r3, [pc, #528]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a83      	ldr	r2, [pc, #524]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	e02e      	b.n	8007da0 <HAL_RCC_OscConfig+0xd8>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10c      	bne.n	8007d64 <HAL_RCC_OscConfig+0x9c>
 8007d4a:	4b7f      	ldr	r3, [pc, #508]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a7e      	ldr	r2, [pc, #504]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	4b7c      	ldr	r3, [pc, #496]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a7b      	ldr	r2, [pc, #492]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e01d      	b.n	8007da0 <HAL_RCC_OscConfig+0xd8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d6c:	d10c      	bne.n	8007d88 <HAL_RCC_OscConfig+0xc0>
 8007d6e:	4b76      	ldr	r3, [pc, #472]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a75      	ldr	r2, [pc, #468]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d78:	6013      	str	r3, [r2, #0]
 8007d7a:	4b73      	ldr	r3, [pc, #460]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a72      	ldr	r2, [pc, #456]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	e00b      	b.n	8007da0 <HAL_RCC_OscConfig+0xd8>
 8007d88:	4b6f      	ldr	r3, [pc, #444]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a6e      	ldr	r2, [pc, #440]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	4b6c      	ldr	r3, [pc, #432]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a6b      	ldr	r2, [pc, #428]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d013      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da8:	f7fe f89a 	bl	8005ee0 <HAL_GetTick>
 8007dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dae:	e008      	b.n	8007dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007db0:	f7fe f896 	bl	8005ee0 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	2b64      	cmp	r3, #100	; 0x64
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e21f      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dc2:	4b61      	ldr	r3, [pc, #388]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0f0      	beq.n	8007db0 <HAL_RCC_OscConfig+0xe8>
 8007dce:	e014      	b.n	8007dfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd0:	f7fe f886 	bl	8005ee0 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dd8:	f7fe f882 	bl	8005ee0 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b64      	cmp	r3, #100	; 0x64
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e20b      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007dea:	4b57      	ldr	r3, [pc, #348]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x110>
 8007df6:	e000      	b.n	8007dfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d069      	beq.n	8007eda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e06:	4b50      	ldr	r3, [pc, #320]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f003 030c 	and.w	r3, r3, #12
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00b      	beq.n	8007e2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e12:	4b4d      	ldr	r3, [pc, #308]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	f003 030c 	and.w	r3, r3, #12
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d11c      	bne.n	8007e58 <HAL_RCC_OscConfig+0x190>
 8007e1e:	4b4a      	ldr	r3, [pc, #296]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d116      	bne.n	8007e58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e2a:	4b47      	ldr	r3, [pc, #284]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <HAL_RCC_OscConfig+0x17a>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d001      	beq.n	8007e42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e1df      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e42:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	493d      	ldr	r1, [pc, #244]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e56:	e040      	b.n	8007eda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d023      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e60:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a38      	ldr	r2, [pc, #224]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e6c:	f7fe f838 	bl	8005ee0 <HAL_GetTick>
 8007e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e74:	f7fe f834 	bl	8005ee0 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e1bd      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e86:	4b30      	ldr	r3, [pc, #192]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0f0      	beq.n	8007e74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e92:	4b2d      	ldr	r3, [pc, #180]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	4929      	ldr	r1, [pc, #164]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	600b      	str	r3, [r1, #0]
 8007ea6:	e018      	b.n	8007eda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ea8:	4b27      	ldr	r3, [pc, #156]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a26      	ldr	r2, [pc, #152]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb4:	f7fe f814 	bl	8005ee0 <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ebc:	f7fe f810 	bl	8005ee0 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e199      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ece:	4b1e      	ldr	r3, [pc, #120]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f0      	bne.n	8007ebc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d038      	beq.n	8007f58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d019      	beq.n	8007f22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eee:	4b16      	ldr	r3, [pc, #88]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007ef4:	f043 0301 	orr.w	r3, r3, #1
 8007ef8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efa:	f7fd fff1 	bl	8005ee0 <HAL_GetTick>
 8007efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f00:	e008      	b.n	8007f14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f02:	f7fd ffed 	bl	8005ee0 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d901      	bls.n	8007f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e176      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d0f0      	beq.n	8007f02 <HAL_RCC_OscConfig+0x23a>
 8007f20:	e01a      	b.n	8007f58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f26:	4a08      	ldr	r2, [pc, #32]	; (8007f48 <HAL_RCC_OscConfig+0x280>)
 8007f28:	f023 0301 	bic.w	r3, r3, #1
 8007f2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2e:	f7fd ffd7 	bl	8005ee0 <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f34:	e00a      	b.n	8007f4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f36:	f7fd ffd3 	bl	8005ee0 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d903      	bls.n	8007f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e15c      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
 8007f48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f4c:	4b91      	ldr	r3, [pc, #580]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1ee      	bne.n	8007f36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 80a4 	beq.w	80080ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f66:	4b8b      	ldr	r3, [pc, #556]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f72:	4b88      	ldr	r3, [pc, #544]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f76:	4a87      	ldr	r2, [pc, #540]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f7e:	4b85      	ldr	r3, [pc, #532]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f86:	60bb      	str	r3, [r7, #8]
 8007f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f8e:	4b82      	ldr	r3, [pc, #520]	; (8008198 <HAL_RCC_OscConfig+0x4d0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d118      	bne.n	8007fcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007f9a:	4b7f      	ldr	r3, [pc, #508]	; (8008198 <HAL_RCC_OscConfig+0x4d0>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a7e      	ldr	r2, [pc, #504]	; (8008198 <HAL_RCC_OscConfig+0x4d0>)
 8007fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fa6:	f7fd ff9b 	bl	8005ee0 <HAL_GetTick>
 8007faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fac:	e008      	b.n	8007fc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fae:	f7fd ff97 	bl	8005ee0 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b64      	cmp	r3, #100	; 0x64
 8007fba:	d901      	bls.n	8007fc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e120      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fc0:	4b75      	ldr	r3, [pc, #468]	; (8008198 <HAL_RCC_OscConfig+0x4d0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0f0      	beq.n	8007fae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d106      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x31a>
 8007fd4:	4b6f      	ldr	r3, [pc, #444]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	4a6e      	ldr	r2, [pc, #440]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	6713      	str	r3, [r2, #112]	; 0x70
 8007fe0:	e02d      	b.n	800803e <HAL_RCC_OscConfig+0x376>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10c      	bne.n	8008004 <HAL_RCC_OscConfig+0x33c>
 8007fea:	4b6a      	ldr	r3, [pc, #424]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	4a69      	ldr	r2, [pc, #420]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ff6:	4b67      	ldr	r3, [pc, #412]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffa:	4a66      	ldr	r2, [pc, #408]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8007ffc:	f023 0304 	bic.w	r3, r3, #4
 8008000:	6713      	str	r3, [r2, #112]	; 0x70
 8008002:	e01c      	b.n	800803e <HAL_RCC_OscConfig+0x376>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	2b05      	cmp	r3, #5
 800800a:	d10c      	bne.n	8008026 <HAL_RCC_OscConfig+0x35e>
 800800c:	4b61      	ldr	r3, [pc, #388]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 800800e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008010:	4a60      	ldr	r2, [pc, #384]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008012:	f043 0304 	orr.w	r3, r3, #4
 8008016:	6713      	str	r3, [r2, #112]	; 0x70
 8008018:	4b5e      	ldr	r3, [pc, #376]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801c:	4a5d      	ldr	r2, [pc, #372]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 800801e:	f043 0301 	orr.w	r3, r3, #1
 8008022:	6713      	str	r3, [r2, #112]	; 0x70
 8008024:	e00b      	b.n	800803e <HAL_RCC_OscConfig+0x376>
 8008026:	4b5b      	ldr	r3, [pc, #364]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802a:	4a5a      	ldr	r2, [pc, #360]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	6713      	str	r3, [r2, #112]	; 0x70
 8008032:	4b58      	ldr	r3, [pc, #352]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	4a57      	ldr	r2, [pc, #348]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008038:	f023 0304 	bic.w	r3, r3, #4
 800803c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d015      	beq.n	8008072 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008046:	f7fd ff4b 	bl	8005ee0 <HAL_GetTick>
 800804a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800804c:	e00a      	b.n	8008064 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804e:	f7fd ff47 	bl	8005ee0 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f241 3288 	movw	r2, #5000	; 0x1388
 800805c:	4293      	cmp	r3, r2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e0ce      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008064:	4b4b      	ldr	r3, [pc, #300]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008068:	f003 0302 	and.w	r3, r3, #2
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0ee      	beq.n	800804e <HAL_RCC_OscConfig+0x386>
 8008070:	e014      	b.n	800809c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008072:	f7fd ff35 	bl	8005ee0 <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008078:	e00a      	b.n	8008090 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800807a:	f7fd ff31 	bl	8005ee0 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	f241 3288 	movw	r2, #5000	; 0x1388
 8008088:	4293      	cmp	r3, r2
 800808a:	d901      	bls.n	8008090 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e0b8      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008090:	4b40      	ldr	r3, [pc, #256]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1ee      	bne.n	800807a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d105      	bne.n	80080ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080a2:	4b3c      	ldr	r3, [pc, #240]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	4a3b      	ldr	r2, [pc, #236]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 80080a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	699b      	ldr	r3, [r3, #24]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 80a4 	beq.w	8008200 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080b8:	4b36      	ldr	r3, [pc, #216]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 030c 	and.w	r3, r3, #12
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d06b      	beq.n	800819c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d149      	bne.n	8008160 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080cc:	4b31      	ldr	r3, [pc, #196]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a30      	ldr	r2, [pc, #192]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 80080d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d8:	f7fd ff02 	bl	8005ee0 <HAL_GetTick>
 80080dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080de:	e008      	b.n	80080f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080e0:	f7fd fefe 	bl	8005ee0 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d901      	bls.n	80080f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e087      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f2:	4b28      	ldr	r3, [pc, #160]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1f0      	bne.n	80080e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69da      	ldr	r2, [r3, #28]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810c:	019b      	lsls	r3, r3, #6
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	3b01      	subs	r3, #1
 8008118:	041b      	lsls	r3, r3, #16
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008120:	061b      	lsls	r3, r3, #24
 8008122:	4313      	orrs	r3, r2
 8008124:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008126:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800812a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800812c:	4b19      	ldr	r3, [pc, #100]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a18      	ldr	r2, [pc, #96]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008138:	f7fd fed2 	bl	8005ee0 <HAL_GetTick>
 800813c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008140:	f7fd fece 	bl	8005ee0 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e057      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008152:	4b10      	ldr	r3, [pc, #64]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0x478>
 800815e:	e04f      	b.n	8008200 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008160:	4b0c      	ldr	r3, [pc, #48]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a0b      	ldr	r2, [pc, #44]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800816a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800816c:	f7fd feb8 	bl	8005ee0 <HAL_GetTick>
 8008170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008172:	e008      	b.n	8008186 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008174:	f7fd feb4 	bl	8005ee0 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b02      	cmp	r3, #2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e03d      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008186:	4b03      	ldr	r3, [pc, #12]	; (8008194 <HAL_RCC_OscConfig+0x4cc>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f0      	bne.n	8008174 <HAL_RCC_OscConfig+0x4ac>
 8008192:	e035      	b.n	8008200 <HAL_RCC_OscConfig+0x538>
 8008194:	40023800 	.word	0x40023800
 8008198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800819c:	4b1b      	ldr	r3, [pc, #108]	; (800820c <HAL_RCC_OscConfig+0x544>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d028      	beq.n	80081fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d121      	bne.n	80081fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d11a      	bne.n	80081fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081cc:	4013      	ands	r3, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d111      	bne.n	80081fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	085b      	lsrs	r3, r3, #1
 80081e4:	3b01      	subs	r3, #1
 80081e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d107      	bne.n	80081fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e000      	b.n	8008202 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	40023800 	.word	0x40023800

08008210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e0d0      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008228:	4b6a      	ldr	r3, [pc, #424]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	429a      	cmp	r2, r3
 8008234:	d910      	bls.n	8008258 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008236:	4b67      	ldr	r3, [pc, #412]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f023 020f 	bic.w	r2, r3, #15
 800823e:	4965      	ldr	r1, [pc, #404]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4313      	orrs	r3, r2
 8008244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008246:	4b63      	ldr	r3, [pc, #396]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d001      	beq.n	8008258 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e0b8      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d020      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0304 	and.w	r3, r3, #4
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008270:	4b59      	ldr	r3, [pc, #356]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	4a58      	ldr	r2, [pc, #352]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800827a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	2b00      	cmp	r3, #0
 8008286:	d005      	beq.n	8008294 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008288:	4b53      	ldr	r3, [pc, #332]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	4a52      	ldr	r2, [pc, #328]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 800828e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008292:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008294:	4b50      	ldr	r3, [pc, #320]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	494d      	ldr	r1, [pc, #308]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d040      	beq.n	8008334 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d107      	bne.n	80082ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ba:	4b47      	ldr	r3, [pc, #284]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d115      	bne.n	80082f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e07f      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d107      	bne.n	80082e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082d2:	4b41      	ldr	r3, [pc, #260]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e073      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082e2:	4b3d      	ldr	r3, [pc, #244]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e06b      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80082f2:	4b39      	ldr	r3, [pc, #228]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f023 0203 	bic.w	r2, r3, #3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	4936      	ldr	r1, [pc, #216]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008300:	4313      	orrs	r3, r2
 8008302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008304:	f7fd fdec 	bl	8005ee0 <HAL_GetTick>
 8008308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800830a:	e00a      	b.n	8008322 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800830c:	f7fd fde8 	bl	8005ee0 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	f241 3288 	movw	r2, #5000	; 0x1388
 800831a:	4293      	cmp	r3, r2
 800831c:	d901      	bls.n	8008322 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e053      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008322:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	f003 020c 	and.w	r2, r3, #12
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	429a      	cmp	r2, r3
 8008332:	d1eb      	bne.n	800830c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 030f 	and.w	r3, r3, #15
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	429a      	cmp	r2, r3
 8008340:	d210      	bcs.n	8008364 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008342:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f023 020f 	bic.w	r2, r3, #15
 800834a:	4922      	ldr	r1, [pc, #136]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	4313      	orrs	r3, r2
 8008350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008352:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <HAL_RCC_ClockConfig+0x1c4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	429a      	cmp	r2, r3
 800835e:	d001      	beq.n	8008364 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e032      	b.n	80083ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d008      	beq.n	8008382 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008370:	4b19      	ldr	r3, [pc, #100]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4916      	ldr	r1, [pc, #88]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 800837e:	4313      	orrs	r3, r2
 8008380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0308 	and.w	r3, r3, #8
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800838e:	4b12      	ldr	r3, [pc, #72]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	490e      	ldr	r1, [pc, #56]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083a2:	f000 f821 	bl	80083e8 <HAL_RCC_GetSysClockFreq>
 80083a6:	4602      	mov	r2, r0
 80083a8:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <HAL_RCC_ClockConfig+0x1c8>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	091b      	lsrs	r3, r3, #4
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	490a      	ldr	r1, [pc, #40]	; (80083dc <HAL_RCC_ClockConfig+0x1cc>)
 80083b4:	5ccb      	ldrb	r3, [r1, r3]
 80083b6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ba:	4a09      	ldr	r2, [pc, #36]	; (80083e0 <HAL_RCC_ClockConfig+0x1d0>)
 80083bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80083be:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCC_ClockConfig+0x1d4>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fd48 	bl	8005e58 <HAL_InitTick>

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40023c00 	.word	0x40023c00
 80083d8:	40023800 	.word	0x40023800
 80083dc:	08011d60 	.word	0x08011d60
 80083e0:	2000001c 	.word	0x2000001c
 80083e4:	20000020 	.word	0x20000020

080083e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083e8:	b5b0      	push	{r4, r5, r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80083ee:	2100      	movs	r1, #0
 80083f0:	6079      	str	r1, [r7, #4]
 80083f2:	2100      	movs	r1, #0
 80083f4:	60f9      	str	r1, [r7, #12]
 80083f6:	2100      	movs	r1, #0
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80083fa:	2100      	movs	r1, #0
 80083fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80083fe:	4952      	ldr	r1, [pc, #328]	; (8008548 <HAL_RCC_GetSysClockFreq+0x160>)
 8008400:	6889      	ldr	r1, [r1, #8]
 8008402:	f001 010c 	and.w	r1, r1, #12
 8008406:	2908      	cmp	r1, #8
 8008408:	d00d      	beq.n	8008426 <HAL_RCC_GetSysClockFreq+0x3e>
 800840a:	2908      	cmp	r1, #8
 800840c:	f200 8094 	bhi.w	8008538 <HAL_RCC_GetSysClockFreq+0x150>
 8008410:	2900      	cmp	r1, #0
 8008412:	d002      	beq.n	800841a <HAL_RCC_GetSysClockFreq+0x32>
 8008414:	2904      	cmp	r1, #4
 8008416:	d003      	beq.n	8008420 <HAL_RCC_GetSysClockFreq+0x38>
 8008418:	e08e      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800841a:	4b4c      	ldr	r3, [pc, #304]	; (800854c <HAL_RCC_GetSysClockFreq+0x164>)
 800841c:	60bb      	str	r3, [r7, #8]
      break;
 800841e:	e08e      	b.n	800853e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008420:	4b4b      	ldr	r3, [pc, #300]	; (8008550 <HAL_RCC_GetSysClockFreq+0x168>)
 8008422:	60bb      	str	r3, [r7, #8]
      break;
 8008424:	e08b      	b.n	800853e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008426:	4948      	ldr	r1, [pc, #288]	; (8008548 <HAL_RCC_GetSysClockFreq+0x160>)
 8008428:	6849      	ldr	r1, [r1, #4]
 800842a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800842e:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008430:	4945      	ldr	r1, [pc, #276]	; (8008548 <HAL_RCC_GetSysClockFreq+0x160>)
 8008432:	6849      	ldr	r1, [r1, #4]
 8008434:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008438:	2900      	cmp	r1, #0
 800843a:	d024      	beq.n	8008486 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800843c:	4942      	ldr	r1, [pc, #264]	; (8008548 <HAL_RCC_GetSysClockFreq+0x160>)
 800843e:	6849      	ldr	r1, [r1, #4]
 8008440:	0989      	lsrs	r1, r1, #6
 8008442:	4608      	mov	r0, r1
 8008444:	f04f 0100 	mov.w	r1, #0
 8008448:	f240 14ff 	movw	r4, #511	; 0x1ff
 800844c:	f04f 0500 	mov.w	r5, #0
 8008450:	ea00 0204 	and.w	r2, r0, r4
 8008454:	ea01 0305 	and.w	r3, r1, r5
 8008458:	493d      	ldr	r1, [pc, #244]	; (8008550 <HAL_RCC_GetSysClockFreq+0x168>)
 800845a:	fb01 f003 	mul.w	r0, r1, r3
 800845e:	2100      	movs	r1, #0
 8008460:	fb01 f102 	mul.w	r1, r1, r2
 8008464:	1844      	adds	r4, r0, r1
 8008466:	493a      	ldr	r1, [pc, #232]	; (8008550 <HAL_RCC_GetSysClockFreq+0x168>)
 8008468:	fba2 0101 	umull	r0, r1, r2, r1
 800846c:	1863      	adds	r3, r4, r1
 800846e:	4619      	mov	r1, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	461a      	mov	r2, r3
 8008474:	f04f 0300 	mov.w	r3, #0
 8008478:	f7f8 fc36 	bl	8000ce8 <__aeabi_uldivmod>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	4613      	mov	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e04a      	b.n	800851c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008486:	4b30      	ldr	r3, [pc, #192]	; (8008548 <HAL_RCC_GetSysClockFreq+0x160>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	099b      	lsrs	r3, r3, #6
 800848c:	461a      	mov	r2, r3
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008496:	f04f 0100 	mov.w	r1, #0
 800849a:	ea02 0400 	and.w	r4, r2, r0
 800849e:	ea03 0501 	and.w	r5, r3, r1
 80084a2:	4620      	mov	r0, r4
 80084a4:	4629      	mov	r1, r5
 80084a6:	f04f 0200 	mov.w	r2, #0
 80084aa:	f04f 0300 	mov.w	r3, #0
 80084ae:	014b      	lsls	r3, r1, #5
 80084b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80084b4:	0142      	lsls	r2, r0, #5
 80084b6:	4610      	mov	r0, r2
 80084b8:	4619      	mov	r1, r3
 80084ba:	1b00      	subs	r0, r0, r4
 80084bc:	eb61 0105 	sbc.w	r1, r1, r5
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	018b      	lsls	r3, r1, #6
 80084ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80084ce:	0182      	lsls	r2, r0, #6
 80084d0:	1a12      	subs	r2, r2, r0
 80084d2:	eb63 0301 	sbc.w	r3, r3, r1
 80084d6:	f04f 0000 	mov.w	r0, #0
 80084da:	f04f 0100 	mov.w	r1, #0
 80084de:	00d9      	lsls	r1, r3, #3
 80084e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084e4:	00d0      	lsls	r0, r2, #3
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	1912      	adds	r2, r2, r4
 80084ec:	eb45 0303 	adc.w	r3, r5, r3
 80084f0:	f04f 0000 	mov.w	r0, #0
 80084f4:	f04f 0100 	mov.w	r1, #0
 80084f8:	0299      	lsls	r1, r3, #10
 80084fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084fe:	0290      	lsls	r0, r2, #10
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4610      	mov	r0, r2
 8008506:	4619      	mov	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	461a      	mov	r2, r3
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	f7f8 fbea 	bl	8000ce8 <__aeabi_uldivmod>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4613      	mov	r3, r2
 800851a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800851c:	4b0a      	ldr	r3, [pc, #40]	; (8008548 <HAL_RCC_GetSysClockFreq+0x160>)
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	0c1b      	lsrs	r3, r3, #16
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	3301      	adds	r3, #1
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	60bb      	str	r3, [r7, #8]
      break;
 8008536:	e002      	b.n	800853e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008538:	4b04      	ldr	r3, [pc, #16]	; (800854c <HAL_RCC_GetSysClockFreq+0x164>)
 800853a:	60bb      	str	r3, [r7, #8]
      break;
 800853c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800853e:	68bb      	ldr	r3, [r7, #8]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bdb0      	pop	{r4, r5, r7, pc}
 8008548:	40023800 	.word	0x40023800
 800854c:	00f42400 	.word	0x00f42400
 8008550:	017d7840 	.word	0x017d7840

08008554 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008558:	4b03      	ldr	r3, [pc, #12]	; (8008568 <HAL_RCC_GetHCLKFreq+0x14>)
 800855a:	681b      	ldr	r3, [r3, #0]
}
 800855c:	4618      	mov	r0, r3
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	2000001c 	.word	0x2000001c

0800856c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008570:	f7ff fff0 	bl	8008554 <HAL_RCC_GetHCLKFreq>
 8008574:	4602      	mov	r2, r0
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	0a9b      	lsrs	r3, r3, #10
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	4903      	ldr	r1, [pc, #12]	; (8008590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008582:	5ccb      	ldrb	r3, [r1, r3]
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008588:	4618      	mov	r0, r3
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40023800 	.word	0x40023800
 8008590:	08011d70 	.word	0x08011d70

08008594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008598:	f7ff ffdc 	bl	8008554 <HAL_RCC_GetHCLKFreq>
 800859c:	4602      	mov	r2, r0
 800859e:	4b05      	ldr	r3, [pc, #20]	; (80085b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	0b5b      	lsrs	r3, r3, #13
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	4903      	ldr	r1, [pc, #12]	; (80085b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085aa:	5ccb      	ldrb	r3, [r1, r3]
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40023800 	.word	0x40023800
 80085b8:	08011d70 	.word	0x08011d70

080085bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b088      	sub	sp, #32
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80085c4:	2300      	movs	r3, #0
 80085c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d012      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085e4:	4b69      	ldr	r3, [pc, #420]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a68      	ldr	r2, [pc, #416]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085ee:	6093      	str	r3, [r2, #8]
 80085f0:	4b66      	ldr	r3, [pc, #408]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	4964      	ldr	r1, [pc, #400]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085fa:	4313      	orrs	r3, r2
 80085fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008606:	2301      	movs	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d017      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008616:	4b5d      	ldr	r3, [pc, #372]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008624:	4959      	ldr	r1, [pc, #356]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008634:	d101      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008636:	2301      	movs	r3, #1
 8008638:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863e:	2b00      	cmp	r3, #0
 8008640:	d101      	bne.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008642:	2301      	movs	r3, #1
 8008644:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d017      	beq.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008652:	4b4e      	ldr	r3, [pc, #312]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008660:	494a      	ldr	r1, [pc, #296]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008670:	d101      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800867e:	2301      	movs	r3, #1
 8008680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d001      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800868e:	2301      	movs	r3, #1
 8008690:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 808b 	beq.w	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80086a0:	4b3a      	ldr	r3, [pc, #232]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	4a39      	ldr	r2, [pc, #228]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086aa:	6413      	str	r3, [r2, #64]	; 0x40
 80086ac:	4b37      	ldr	r3, [pc, #220]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086b4:	60bb      	str	r3, [r7, #8]
 80086b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80086b8:	4b35      	ldr	r3, [pc, #212]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a34      	ldr	r2, [pc, #208]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c4:	f7fd fc0c 	bl	8005ee0 <HAL_GetTick>
 80086c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086ca:	e008      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086cc:	f7fd fc08 	bl	8005ee0 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	2b64      	cmp	r3, #100	; 0x64
 80086d8:	d901      	bls.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	e357      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80086de:	4b2c      	ldr	r3, [pc, #176]	; (8008790 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f0      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80086ea:	4b28      	ldr	r3, [pc, #160]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d035      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	429a      	cmp	r2, r3
 8008706:	d02e      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008708:	4b20      	ldr	r3, [pc, #128]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800870a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008710:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008712:	4b1e      	ldr	r3, [pc, #120]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008716:	4a1d      	ldr	r2, [pc, #116]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800871c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800871e:	4b1b      	ldr	r3, [pc, #108]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008722:	4a1a      	ldr	r2, [pc, #104]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008728:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800872a:	4a18      	ldr	r2, [pc, #96]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008730:	4b16      	ldr	r3, [pc, #88]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b01      	cmp	r3, #1
 800873a:	d114      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873c:	f7fd fbd0 	bl	8005ee0 <HAL_GetTick>
 8008740:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008742:	e00a      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008744:	f7fd fbcc 	bl	8005ee0 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008752:	4293      	cmp	r3, r2
 8008754:	d901      	bls.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e319      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800875c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0ee      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800876e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008772:	d111      	bne.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008780:	4b04      	ldr	r3, [pc, #16]	; (8008794 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008782:	400b      	ands	r3, r1
 8008784:	4901      	ldr	r1, [pc, #4]	; (800878c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008786:	4313      	orrs	r3, r2
 8008788:	608b      	str	r3, [r1, #8]
 800878a:	e00b      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800878c:	40023800 	.word	0x40023800
 8008790:	40007000 	.word	0x40007000
 8008794:	0ffffcff 	.word	0x0ffffcff
 8008798:	4bb1      	ldr	r3, [pc, #708]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	4ab0      	ldr	r2, [pc, #704]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800879e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80087a2:	6093      	str	r3, [r2, #8]
 80087a4:	4bae      	ldr	r3, [pc, #696]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80087b0:	49ab      	ldr	r1, [pc, #684]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d010      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80087c2:	4ba7      	ldr	r3, [pc, #668]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087c8:	4aa5      	ldr	r2, [pc, #660]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80087d2:	4ba3      	ldr	r3, [pc, #652]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	49a0      	ldr	r1, [pc, #640]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80087f0:	4b9b      	ldr	r3, [pc, #620]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fe:	4998      	ldr	r1, [pc, #608]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008812:	4b93      	ldr	r3, [pc, #588]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008818:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008820:	498f      	ldr	r1, [pc, #572]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008834:	4b8a      	ldr	r3, [pc, #552]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008842:	4987      	ldr	r1, [pc, #540]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008844:	4313      	orrs	r3, r2
 8008846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008856:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800885c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	497e      	ldr	r1, [pc, #504]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008878:	4b79      	ldr	r3, [pc, #484]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887e:	f023 0203 	bic.w	r2, r3, #3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008886:	4976      	ldr	r1, [pc, #472]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008888:	4313      	orrs	r3, r2
 800888a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800889a:	4b71      	ldr	r3, [pc, #452]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a0:	f023 020c 	bic.w	r2, r3, #12
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a8:	496d      	ldr	r1, [pc, #436]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088bc:	4b68      	ldr	r3, [pc, #416]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ca:	4965      	ldr	r1, [pc, #404]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088de:	4b60      	ldr	r3, [pc, #384]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ec:	495c      	ldr	r1, [pc, #368]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008900:	4b57      	ldr	r3, [pc, #348]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890e:	4954      	ldr	r1, [pc, #336]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008910:	4313      	orrs	r3, r2
 8008912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008922:	4b4f      	ldr	r3, [pc, #316]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008928:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008930:	494b      	ldr	r1, [pc, #300]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008932:	4313      	orrs	r3, r2
 8008934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008944:	4b46      	ldr	r3, [pc, #280]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008952:	4943      	ldr	r1, [pc, #268]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008954:	4313      	orrs	r3, r2
 8008956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008966:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008974:	493a      	ldr	r1, [pc, #232]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008976:	4313      	orrs	r3, r2
 8008978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008988:	4b35      	ldr	r3, [pc, #212]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800898a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008996:	4932      	ldr	r1, [pc, #200]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008998:	4313      	orrs	r3, r2
 800899a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d011      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089aa:	4b2d      	ldr	r3, [pc, #180]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089b8:	4929      	ldr	r1, [pc, #164]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089c8:	d101      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80089ca:	2301      	movs	r3, #1
 80089cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0308 	and.w	r3, r3, #8
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ea:	4b1d      	ldr	r3, [pc, #116]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089f8:	4919      	ldr	r1, [pc, #100]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00b      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008a0c:	4b14      	ldr	r3, [pc, #80]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a1c:	4910      	ldr	r1, [pc, #64]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d006      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f000 80d9 	beq.w	8008bea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a38:	4b09      	ldr	r3, [pc, #36]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a08      	ldr	r2, [pc, #32]	; (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008a3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a44:	f7fd fa4c 	bl	8005ee0 <HAL_GetTick>
 8008a48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a4a:	e00b      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a4c:	f7fd fa48 	bl	8005ee0 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b64      	cmp	r3, #100	; 0x64
 8008a58:	d904      	bls.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e197      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008a5e:	bf00      	nop
 8008a60:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a64:	4b6c      	ldr	r3, [pc, #432]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1ed      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d021      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11d      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a84:	4b64      	ldr	r3, [pc, #400]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a8a:	0c1b      	lsrs	r3, r3, #16
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a92:	4b61      	ldr	r3, [pc, #388]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a98:	0e1b      	lsrs	r3, r3, #24
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	019a      	lsls	r2, r3, #6
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	041b      	lsls	r3, r3, #16
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	061b      	lsls	r3, r3, #24
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	071b      	lsls	r3, r3, #28
 8008ab8:	4957      	ldr	r1, [pc, #348]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d004      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ad4:	d00a      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d02e      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aea:	d129      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008aec:	4b4a      	ldr	r3, [pc, #296]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008af2:	0c1b      	lsrs	r3, r3, #16
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008afa:	4b47      	ldr	r3, [pc, #284]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b00:	0f1b      	lsrs	r3, r3, #28
 8008b02:	f003 0307 	and.w	r3, r3, #7
 8008b06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	019a      	lsls	r2, r3, #6
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	041b      	lsls	r3, r3, #16
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	061b      	lsls	r3, r3, #24
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	071b      	lsls	r3, r3, #28
 8008b20:	493d      	ldr	r1, [pc, #244]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b28:	4b3b      	ldr	r3, [pc, #236]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2e:	f023 021f 	bic.w	r2, r3, #31
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	3b01      	subs	r3, #1
 8008b38:	4937      	ldr	r1, [pc, #220]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01d      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008b4c:	4b32      	ldr	r3, [pc, #200]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b52:	0e1b      	lsrs	r3, r3, #24
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b5a:	4b2f      	ldr	r3, [pc, #188]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b60:	0f1b      	lsrs	r3, r3, #28
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	019a      	lsls	r2, r3, #6
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	041b      	lsls	r3, r3, #16
 8008b74:	431a      	orrs	r2, r3
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	071b      	lsls	r3, r3, #28
 8008b80:	4925      	ldr	r1, [pc, #148]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d011      	beq.n	8008bb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	019a      	lsls	r2, r3, #6
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	041b      	lsls	r3, r3, #16
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	061b      	lsls	r3, r3, #24
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	071b      	lsls	r3, r3, #28
 8008bb0:	4919      	ldr	r1, [pc, #100]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008bb8:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a16      	ldr	r2, [pc, #88]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bc4:	f7fd f98c 	bl	8005ee0 <HAL_GetTick>
 8008bc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bca:	e008      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008bcc:	f7fd f988 	bl	8005ee0 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2b64      	cmp	r3, #100	; 0x64
 8008bd8:	d901      	bls.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e0d7      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008bde:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0f0      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	f040 80cd 	bne.w	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008bf2:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a08      	ldr	r2, [pc, #32]	; (8008c18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfe:	f7fd f96f 	bl	8005ee0 <HAL_GetTick>
 8008c02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c04:	e00a      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c06:	f7fd f96b 	bl	8005ee0 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b64      	cmp	r3, #100	; 0x64
 8008c12:	d903      	bls.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e0ba      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008c18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c1c:	4b5e      	ldr	r3, [pc, #376]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c28:	d0ed      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d02e      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d12a      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c52:	4b51      	ldr	r3, [pc, #324]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c60:	4b4d      	ldr	r3, [pc, #308]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c66:	0f1b      	lsrs	r3, r3, #28
 8008c68:	f003 0307 	and.w	r3, r3, #7
 8008c6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	019a      	lsls	r2, r3, #6
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	041b      	lsls	r3, r3, #16
 8008c78:	431a      	orrs	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	061b      	lsls	r3, r3, #24
 8008c80:	431a      	orrs	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	071b      	lsls	r3, r3, #28
 8008c86:	4944      	ldr	r1, [pc, #272]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c8e:	4b42      	ldr	r3, [pc, #264]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	493d      	ldr	r1, [pc, #244]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d022      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cbc:	d11d      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cbe:	4b36      	ldr	r3, [pc, #216]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc4:	0e1b      	lsrs	r3, r3, #24
 8008cc6:	f003 030f 	and.w	r3, r3, #15
 8008cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ccc:	4b32      	ldr	r3, [pc, #200]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd2:	0f1b      	lsrs	r3, r3, #28
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	019a      	lsls	r2, r3, #6
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a1b      	ldr	r3, [r3, #32]
 8008ce4:	041b      	lsls	r3, r3, #16
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	061b      	lsls	r3, r3, #24
 8008cec:	431a      	orrs	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	071b      	lsls	r3, r3, #28
 8008cf2:	4929      	ldr	r1, [pc, #164]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d028      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0c:	0e1b      	lsrs	r3, r3, #24
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d14:	4b20      	ldr	r3, [pc, #128]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1a:	0c1b      	lsrs	r3, r3, #16
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	019a      	lsls	r2, r3, #6
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	041b      	lsls	r3, r3, #16
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	061b      	lsls	r3, r3, #24
 8008d32:	431a      	orrs	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	071b      	lsls	r3, r3, #28
 8008d3a:	4917      	ldr	r1, [pc, #92]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d42:	4b15      	ldr	r3, [pc, #84]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4911      	ldr	r1, [pc, #68]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d58:	4b0f      	ldr	r3, [pc, #60]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a0e      	ldr	r2, [pc, #56]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d64:	f7fd f8bc 	bl	8005ee0 <HAL_GetTick>
 8008d68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d6c:	f7fd f8b8 	bl	8005ee0 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d901      	bls.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e007      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8a:	d1ef      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3720      	adds	r7, #32
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	40023800 	.word	0x40023800

08008d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e049      	b.n	8008e42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d106      	bne.n	8008dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7fb fe0a 	bl	80049dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	3304      	adds	r3, #4
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f000 ff74 	bl	8009cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e049      	b.n	8008ef0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 f841 	bl	8008ef8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f000 ff1d 	bl	8009cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d109      	bne.n	8008f30 <HAL_TIM_PWM_Start+0x24>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	bf14      	ite	ne
 8008f28:	2301      	movne	r3, #1
 8008f2a:	2300      	moveq	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	e03c      	b.n	8008faa <HAL_TIM_PWM_Start+0x9e>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d109      	bne.n	8008f4a <HAL_TIM_PWM_Start+0x3e>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	bf14      	ite	ne
 8008f42:	2301      	movne	r3, #1
 8008f44:	2300      	moveq	r3, #0
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	e02f      	b.n	8008faa <HAL_TIM_PWM_Start+0x9e>
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	2b08      	cmp	r3, #8
 8008f4e:	d109      	bne.n	8008f64 <HAL_TIM_PWM_Start+0x58>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	bf14      	ite	ne
 8008f5c:	2301      	movne	r3, #1
 8008f5e:	2300      	moveq	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	e022      	b.n	8008faa <HAL_TIM_PWM_Start+0x9e>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b0c      	cmp	r3, #12
 8008f68:	d109      	bne.n	8008f7e <HAL_TIM_PWM_Start+0x72>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	bf14      	ite	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	2300      	moveq	r3, #0
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	e015      	b.n	8008faa <HAL_TIM_PWM_Start+0x9e>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	2b10      	cmp	r3, #16
 8008f82:	d109      	bne.n	8008f98 <HAL_TIM_PWM_Start+0x8c>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	bf14      	ite	ne
 8008f90:	2301      	movne	r3, #1
 8008f92:	2300      	moveq	r3, #0
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	e008      	b.n	8008faa <HAL_TIM_PWM_Start+0x9e>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	bf14      	ite	ne
 8008fa4:	2301      	movne	r3, #1
 8008fa6:	2300      	moveq	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d001      	beq.n	8008fb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e092      	b.n	80090d8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d104      	bne.n	8008fc2 <HAL_TIM_PWM_Start+0xb6>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fc0:	e023      	b.n	800900a <HAL_TIM_PWM_Start+0xfe>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2b04      	cmp	r3, #4
 8008fc6:	d104      	bne.n	8008fd2 <HAL_TIM_PWM_Start+0xc6>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fd0:	e01b      	b.n	800900a <HAL_TIM_PWM_Start+0xfe>
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d104      	bne.n	8008fe2 <HAL_TIM_PWM_Start+0xd6>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fe0:	e013      	b.n	800900a <HAL_TIM_PWM_Start+0xfe>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b0c      	cmp	r3, #12
 8008fe6:	d104      	bne.n	8008ff2 <HAL_TIM_PWM_Start+0xe6>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008ff0:	e00b      	b.n	800900a <HAL_TIM_PWM_Start+0xfe>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b10      	cmp	r3, #16
 8008ff6:	d104      	bne.n	8009002 <HAL_TIM_PWM_Start+0xf6>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009000:	e003      	b.n	800900a <HAL_TIM_PWM_Start+0xfe>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2202      	movs	r2, #2
 8009006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2201      	movs	r2, #1
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fbaa 	bl	800a76c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a30      	ldr	r2, [pc, #192]	; (80090e0 <HAL_TIM_PWM_Start+0x1d4>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d004      	beq.n	800902c <HAL_TIM_PWM_Start+0x120>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a2f      	ldr	r2, [pc, #188]	; (80090e4 <HAL_TIM_PWM_Start+0x1d8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d101      	bne.n	8009030 <HAL_TIM_PWM_Start+0x124>
 800902c:	2301      	movs	r3, #1
 800902e:	e000      	b.n	8009032 <HAL_TIM_PWM_Start+0x126>
 8009030:	2300      	movs	r3, #0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a25      	ldr	r2, [pc, #148]	; (80090e0 <HAL_TIM_PWM_Start+0x1d4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d022      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009058:	d01d      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a22      	ldr	r2, [pc, #136]	; (80090e8 <HAL_TIM_PWM_Start+0x1dc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d018      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a20      	ldr	r2, [pc, #128]	; (80090ec <HAL_TIM_PWM_Start+0x1e0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d013      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <HAL_TIM_PWM_Start+0x1e4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00e      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a19      	ldr	r2, [pc, #100]	; (80090e4 <HAL_TIM_PWM_Start+0x1d8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d009      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a1b      	ldr	r2, [pc, #108]	; (80090f4 <HAL_TIM_PWM_Start+0x1e8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d004      	beq.n	8009096 <HAL_TIM_PWM_Start+0x18a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a19      	ldr	r2, [pc, #100]	; (80090f8 <HAL_TIM_PWM_Start+0x1ec>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d115      	bne.n	80090c2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	4b17      	ldr	r3, [pc, #92]	; (80090fc <HAL_TIM_PWM_Start+0x1f0>)
 800909e:	4013      	ands	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b06      	cmp	r3, #6
 80090a6:	d015      	beq.n	80090d4 <HAL_TIM_PWM_Start+0x1c8>
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ae:	d011      	beq.n	80090d4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c0:	e008      	b.n	80090d4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0201 	orr.w	r2, r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e000      	b.n	80090d6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40010000 	.word	0x40010000
 80090e4:	40010400 	.word	0x40010400
 80090e8:	40000400 	.word	0x40000400
 80090ec:	40000800 	.word	0x40000800
 80090f0:	40000c00 	.word	0x40000c00
 80090f4:	40014000 	.word	0x40014000
 80090f8:	40001800 	.word	0x40001800
 80090fc:	00010007 	.word	0x00010007

08009100 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e049      	b.n	80091a6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f841 	bl	80091ae <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f000 fdc2 	bl	8009cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b083      	sub	sp, #12
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
	...

080091c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d104      	bne.n	80091de <HAL_TIM_IC_Start_IT+0x1a>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	e023      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x62>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	d104      	bne.n	80091ee <HAL_TIM_IC_Start_IT+0x2a>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	e01b      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x62>
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b08      	cmp	r3, #8
 80091f2:	d104      	bne.n	80091fe <HAL_TIM_IC_Start_IT+0x3a>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	e013      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x62>
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b0c      	cmp	r3, #12
 8009202:	d104      	bne.n	800920e <HAL_TIM_IC_Start_IT+0x4a>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800920a:	b2db      	uxtb	r3, r3
 800920c:	e00b      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x62>
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	2b10      	cmp	r3, #16
 8009212:	d104      	bne.n	800921e <HAL_TIM_IC_Start_IT+0x5a>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800921a:	b2db      	uxtb	r3, r3
 800921c:	e003      	b.n	8009226 <HAL_TIM_IC_Start_IT+0x62>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009224:	b2db      	uxtb	r3, r3
 8009226:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <HAL_TIM_IC_Start_IT+0x74>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009234:	b2db      	uxtb	r3, r3
 8009236:	e013      	b.n	8009260 <HAL_TIM_IC_Start_IT+0x9c>
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b04      	cmp	r3, #4
 800923c:	d104      	bne.n	8009248 <HAL_TIM_IC_Start_IT+0x84>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009244:	b2db      	uxtb	r3, r3
 8009246:	e00b      	b.n	8009260 <HAL_TIM_IC_Start_IT+0x9c>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b08      	cmp	r3, #8
 800924c:	d104      	bne.n	8009258 <HAL_TIM_IC_Start_IT+0x94>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009254:	b2db      	uxtb	r3, r3
 8009256:	e003      	b.n	8009260 <HAL_TIM_IC_Start_IT+0x9c>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800925e:	b2db      	uxtb	r3, r3
 8009260:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d102      	bne.n	800926e <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d001      	beq.n	8009272 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e0dd      	b.n	800942e <HAL_TIM_IC_Start_IT+0x26a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d104      	bne.n	8009282 <HAL_TIM_IC_Start_IT+0xbe>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009280:	e023      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x106>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b04      	cmp	r3, #4
 8009286:	d104      	bne.n	8009292 <HAL_TIM_IC_Start_IT+0xce>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009290:	e01b      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x106>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b08      	cmp	r3, #8
 8009296:	d104      	bne.n	80092a2 <HAL_TIM_IC_Start_IT+0xde>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2202      	movs	r2, #2
 800929c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a0:	e013      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x106>
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	2b0c      	cmp	r3, #12
 80092a6:	d104      	bne.n	80092b2 <HAL_TIM_IC_Start_IT+0xee>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2202      	movs	r2, #2
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092b0:	e00b      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x106>
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b10      	cmp	r3, #16
 80092b6:	d104      	bne.n	80092c2 <HAL_TIM_IC_Start_IT+0xfe>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092c0:	e003      	b.n	80092ca <HAL_TIM_IC_Start_IT+0x106>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2202      	movs	r2, #2
 80092c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d104      	bne.n	80092da <HAL_TIM_IC_Start_IT+0x116>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092d8:	e013      	b.n	8009302 <HAL_TIM_IC_Start_IT+0x13e>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b04      	cmp	r3, #4
 80092de:	d104      	bne.n	80092ea <HAL_TIM_IC_Start_IT+0x126>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092e8:	e00b      	b.n	8009302 <HAL_TIM_IC_Start_IT+0x13e>
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d104      	bne.n	80092fa <HAL_TIM_IC_Start_IT+0x136>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092f8:	e003      	b.n	8009302 <HAL_TIM_IC_Start_IT+0x13e>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b0c      	cmp	r3, #12
 8009306:	d841      	bhi.n	800938c <HAL_TIM_IC_Start_IT+0x1c8>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <HAL_TIM_IC_Start_IT+0x14c>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009345 	.word	0x08009345
 8009314:	0800938d 	.word	0x0800938d
 8009318:	0800938d 	.word	0x0800938d
 800931c:	0800938d 	.word	0x0800938d
 8009320:	08009357 	.word	0x08009357
 8009324:	0800938d 	.word	0x0800938d
 8009328:	0800938d 	.word	0x0800938d
 800932c:	0800938d 	.word	0x0800938d
 8009330:	08009369 	.word	0x08009369
 8009334:	0800938d 	.word	0x0800938d
 8009338:	0800938d 	.word	0x0800938d
 800933c:	0800938d 	.word	0x0800938d
 8009340:	0800937b 	.word	0x0800937b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68da      	ldr	r2, [r3, #12]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0202 	orr.w	r2, r2, #2
 8009352:	60da      	str	r2, [r3, #12]
      break;
 8009354:	e01b      	b.n	800938e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f042 0204 	orr.w	r2, r2, #4
 8009364:	60da      	str	r2, [r3, #12]
      break;
 8009366:	e012      	b.n	800938e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0208 	orr.w	r2, r2, #8
 8009376:	60da      	str	r2, [r3, #12]
      break;
 8009378:	e009      	b.n	800938e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68da      	ldr	r2, [r3, #12]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f042 0210 	orr.w	r2, r2, #16
 8009388:	60da      	str	r2, [r3, #12]
      break;
 800938a:	e000      	b.n	800938e <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 800938c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2201      	movs	r2, #1
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f001 f9e8 	bl	800a76c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a25      	ldr	r2, [pc, #148]	; (8009438 <HAL_TIM_IC_Start_IT+0x274>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d022      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ae:	d01d      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a21      	ldr	r2, [pc, #132]	; (800943c <HAL_TIM_IC_Start_IT+0x278>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d018      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a20      	ldr	r2, [pc, #128]	; (8009440 <HAL_TIM_IC_Start_IT+0x27c>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d013      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <HAL_TIM_IC_Start_IT+0x280>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d00e      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a1d      	ldr	r2, [pc, #116]	; (8009448 <HAL_TIM_IC_Start_IT+0x284>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d009      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a1b      	ldr	r2, [pc, #108]	; (800944c <HAL_TIM_IC_Start_IT+0x288>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d004      	beq.n	80093ec <HAL_TIM_IC_Start_IT+0x228>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a1a      	ldr	r2, [pc, #104]	; (8009450 <HAL_TIM_IC_Start_IT+0x28c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d115      	bne.n	8009418 <HAL_TIM_IC_Start_IT+0x254>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	4b18      	ldr	r3, [pc, #96]	; (8009454 <HAL_TIM_IC_Start_IT+0x290>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b06      	cmp	r3, #6
 80093fc:	d015      	beq.n	800942a <HAL_TIM_IC_Start_IT+0x266>
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009404:	d011      	beq.n	800942a <HAL_TIM_IC_Start_IT+0x266>
    {
      __HAL_TIM_ENABLE(htim);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0201 	orr.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009416:	e008      	b.n	800942a <HAL_TIM_IC_Start_IT+0x266>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]
 8009428:	e000      	b.n	800942c <HAL_TIM_IC_Start_IT+0x268>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800942a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	40010000 	.word	0x40010000
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40000c00 	.word	0x40000c00
 8009448:	40010400 	.word	0x40010400
 800944c:	40014000 	.word	0x40014000
 8009450:	40001800 	.word	0x40001800
 8009454:	00010007 	.word	0x00010007

08009458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0302 	and.w	r3, r3, #2
 800946a:	2b02      	cmp	r3, #2
 800946c:	d122      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0302 	and.w	r3, r3, #2
 8009478:	2b02      	cmp	r3, #2
 800947a:	d11b      	bne.n	80094b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0202 	mvn.w	r2, #2
 8009484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	f003 0303 	and.w	r3, r3, #3
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7f9 fe76 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 80094a0:	e005      	b.n	80094ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fbf2 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fbf9 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d122      	bne.n	8009508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d11b      	bne.n	8009508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f06f 0204 	mvn.w	r2, #4
 80094d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2202      	movs	r2, #2
 80094de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7f9 fe4c 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 80094f4:	e005      	b.n	8009502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fbc8 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fbcf 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f003 0308 	and.w	r3, r3, #8
 8009512:	2b08      	cmp	r3, #8
 8009514:	d122      	bne.n	800955c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	2b08      	cmp	r3, #8
 8009522:	d11b      	bne.n	800955c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f06f 0208 	mvn.w	r2, #8
 800952c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2204      	movs	r2, #4
 8009532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d003      	beq.n	800954a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7f9 fe22 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 8009548:	e005      	b.n	8009556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fb9e 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fba5 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	f003 0310 	and.w	r3, r3, #16
 8009566:	2b10      	cmp	r3, #16
 8009568:	d122      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	f003 0310 	and.w	r3, r3, #16
 8009574:	2b10      	cmp	r3, #16
 8009576:	d11b      	bne.n	80095b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f06f 0210 	mvn.w	r2, #16
 8009580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2208      	movs	r2, #8
 8009586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7f9 fdf8 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 800959c:	e005      	b.n	80095aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb74 	bl	8009c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 fb7b 	bl	8009ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d10e      	bne.n	80095dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d107      	bne.n	80095dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f06f 0201 	mvn.w	r2, #1
 80095d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fb4e 	bl	8009c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e6:	2b80      	cmp	r3, #128	; 0x80
 80095e8:	d10e      	bne.n	8009608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f4:	2b80      	cmp	r3, #128	; 0x80
 80095f6:	d107      	bne.n	8009608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 f9ee 	bl	800a9e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009616:	d10e      	bne.n	8009636 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68db      	ldr	r3, [r3, #12]
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b80      	cmp	r3, #128	; 0x80
 8009624:	d107      	bne.n	8009636 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800962e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 f9e1 	bl	800a9f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	d10e      	bne.n	8009662 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964e:	2b40      	cmp	r3, #64	; 0x40
 8009650:	d107      	bne.n	8009662 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800965a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fb29 	bl	8009cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	f003 0320 	and.w	r3, r3, #32
 800966c:	2b20      	cmp	r3, #32
 800966e:	d10e      	bne.n	800968e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b20      	cmp	r3, #32
 800967c:	d107      	bne.n	800968e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f06f 0220 	mvn.w	r2, #32
 8009686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f9a1 	bl	800a9d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d101      	bne.n	80096b0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80096ac:	2302      	movs	r3, #2
 80096ae:	e082      	b.n	80097b6 <HAL_TIM_IC_ConfigChannel+0x120>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d11b      	bne.n	80096f6 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	6819      	ldr	r1, [r3, #0]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	685a      	ldr	r2, [r3, #4]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f000 fe89 	bl	800a3e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	699a      	ldr	r2, [r3, #24]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 020c 	bic.w	r2, r2, #12
 80096e0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6999      	ldr	r1, [r3, #24]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	619a      	str	r2, [r3, #24]
 80096f4:	e05a      	b.n	80097ac <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d11c      	bne.n	8009736 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6818      	ldr	r0, [r3, #0]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f000 ff0d 	bl	800a52a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	699a      	ldr	r2, [r3, #24]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800971e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	6999      	ldr	r1, [r3, #24]
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	021a      	lsls	r2, r3, #8
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	430a      	orrs	r2, r1
 8009732:	619a      	str	r2, [r3, #24]
 8009734:	e03a      	b.n	80097ac <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2b08      	cmp	r3, #8
 800973a:	d11b      	bne.n	8009774 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	6819      	ldr	r1, [r3, #0]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f000 ff5a 	bl	800a604 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69da      	ldr	r2, [r3, #28]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 020c 	bic.w	r2, r2, #12
 800975e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69d9      	ldr	r1, [r3, #28]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	689a      	ldr	r2, [r3, #8]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	61da      	str	r2, [r3, #28]
 8009772:	e01b      	b.n	80097ac <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6818      	ldr	r0, [r3, #0]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	6819      	ldr	r1, [r3, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f000 ff7a 	bl	800a67c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69da      	ldr	r2, [r3, #28]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009796:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	69d9      	ldr	r1, [r3, #28]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	021a      	lsls	r2, r3, #8
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_TIM_PWM_ConfigChannel+0x1a>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e0fd      	b.n	80099d6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b14      	cmp	r3, #20
 80097e6:	f200 80f0 	bhi.w	80099ca <HAL_TIM_PWM_ConfigChannel+0x20a>
 80097ea:	a201      	add	r2, pc, #4	; (adr r2, 80097f0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80097ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f0:	08009845 	.word	0x08009845
 80097f4:	080099cb 	.word	0x080099cb
 80097f8:	080099cb 	.word	0x080099cb
 80097fc:	080099cb 	.word	0x080099cb
 8009800:	08009885 	.word	0x08009885
 8009804:	080099cb 	.word	0x080099cb
 8009808:	080099cb 	.word	0x080099cb
 800980c:	080099cb 	.word	0x080099cb
 8009810:	080098c7 	.word	0x080098c7
 8009814:	080099cb 	.word	0x080099cb
 8009818:	080099cb 	.word	0x080099cb
 800981c:	080099cb 	.word	0x080099cb
 8009820:	08009907 	.word	0x08009907
 8009824:	080099cb 	.word	0x080099cb
 8009828:	080099cb 	.word	0x080099cb
 800982c:	080099cb 	.word	0x080099cb
 8009830:	08009949 	.word	0x08009949
 8009834:	080099cb 	.word	0x080099cb
 8009838:	080099cb 	.word	0x080099cb
 800983c:	080099cb 	.word	0x080099cb
 8009840:	08009989 	.word	0x08009989
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 fadc 	bl	8009e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	699a      	ldr	r2, [r3, #24]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f042 0208 	orr.w	r2, r2, #8
 800985e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	699a      	ldr	r2, [r3, #24]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0204 	bic.w	r2, r2, #4
 800986e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6999      	ldr	r1, [r3, #24]
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	619a      	str	r2, [r3, #24]
      break;
 8009882:	e0a3      	b.n	80099cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fb2e 	bl	8009eec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800989e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	699a      	ldr	r2, [r3, #24]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6999      	ldr	r1, [r3, #24]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	021a      	lsls	r2, r3, #8
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	619a      	str	r2, [r3, #24]
      break;
 80098c4:	e082      	b.n	80099cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fb85 	bl	8009fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	69da      	ldr	r2, [r3, #28]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0208 	orr.w	r2, r2, #8
 80098e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69da      	ldr	r2, [r3, #28]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f022 0204 	bic.w	r2, r2, #4
 80098f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	69d9      	ldr	r1, [r3, #28]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	430a      	orrs	r2, r1
 8009902:	61da      	str	r2, [r3, #28]
      break;
 8009904:	e062      	b.n	80099cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68b9      	ldr	r1, [r7, #8]
 800990c:	4618      	mov	r0, r3
 800990e:	f000 fbdb 	bl	800a0c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	69da      	ldr	r2, [r3, #28]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	69da      	ldr	r2, [r3, #28]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	69d9      	ldr	r1, [r3, #28]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	021a      	lsls	r2, r3, #8
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	61da      	str	r2, [r3, #28]
      break;
 8009946:	e041      	b.n	80099cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fc12 	bl	800a178 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0208 	orr.w	r2, r2, #8
 8009962:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f022 0204 	bic.w	r2, r2, #4
 8009972:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	691a      	ldr	r2, [r3, #16]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	430a      	orrs	r2, r1
 8009984:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009986:	e021      	b.n	80099cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	4618      	mov	r0, r3
 8009990:	f000 fc44 	bl	800a21c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	021a      	lsls	r2, r3, #8
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	430a      	orrs	r2, r1
 80099c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099c8:	e000      	b.n	80099cc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80099ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop

080099e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d101      	bne.n	80099f8 <HAL_TIM_ConfigClockSource+0x18>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e0b3      	b.n	8009b60 <HAL_TIM_ConfigClockSource+0x180>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4b55      	ldr	r3, [pc, #340]	; (8009b68 <HAL_TIM_ConfigClockSource+0x188>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a30:	d03e      	beq.n	8009ab0 <HAL_TIM_ConfigClockSource+0xd0>
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a36:	f200 8087 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3e:	f000 8085 	beq.w	8009b4c <HAL_TIM_ConfigClockSource+0x16c>
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a46:	d87f      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a48:	2b70      	cmp	r3, #112	; 0x70
 8009a4a:	d01a      	beq.n	8009a82 <HAL_TIM_ConfigClockSource+0xa2>
 8009a4c:	2b70      	cmp	r3, #112	; 0x70
 8009a4e:	d87b      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a50:	2b60      	cmp	r3, #96	; 0x60
 8009a52:	d050      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x116>
 8009a54:	2b60      	cmp	r3, #96	; 0x60
 8009a56:	d877      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a58:	2b50      	cmp	r3, #80	; 0x50
 8009a5a:	d03c      	beq.n	8009ad6 <HAL_TIM_ConfigClockSource+0xf6>
 8009a5c:	2b50      	cmp	r3, #80	; 0x50
 8009a5e:	d873      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d058      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x136>
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d86f      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a68:	2b30      	cmp	r3, #48	; 0x30
 8009a6a:	d064      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x156>
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d86b      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d060      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x156>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d867      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d05c      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x156>
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d05a      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009a80:	e062      	b.n	8009b48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	6899      	ldr	r1, [r3, #8]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f000 fe4b 	bl	800a72c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009aa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	609a      	str	r2, [r3, #8]
      break;
 8009aae:	e04e      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f000 fe34 	bl	800a72c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ad2:	609a      	str	r2, [r3, #8]
      break;
 8009ad4:	e03b      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6859      	ldr	r1, [r3, #4]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f000 fcf2 	bl	800a4cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2150      	movs	r1, #80	; 0x50
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fe01 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 8009af4:	e02b      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	6859      	ldr	r1, [r3, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f000 fd4e 	bl	800a5a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2160      	movs	r1, #96	; 0x60
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fdf1 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 8009b14:	e01b      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f000 fcd2 	bl	800a4cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2140      	movs	r1, #64	; 0x40
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fde1 	bl	800a6f6 <TIM_ITRx_SetConfig>
      break;
 8009b34:	e00b      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f000 fdd8 	bl	800a6f6 <TIM_ITRx_SetConfig>
        break;
 8009b46:	e002      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009b48:	bf00      	nop
 8009b4a:	e000      	b.n	8009b4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009b4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	fffeff88 	.word	0xfffeff88

08009b6c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e031      	b.n	8009be8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fb94 	bl	800a2c4 <TIM_SlaveTimer_SetConfig>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d009      	beq.n	8009bb6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e018      	b.n	8009be8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bc4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009bd4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b0c      	cmp	r3, #12
 8009c02:	d831      	bhi.n	8009c68 <HAL_TIM_ReadCapturedValue+0x78>
 8009c04:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8009c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0a:	bf00      	nop
 8009c0c:	08009c41 	.word	0x08009c41
 8009c10:	08009c69 	.word	0x08009c69
 8009c14:	08009c69 	.word	0x08009c69
 8009c18:	08009c69 	.word	0x08009c69
 8009c1c:	08009c4b 	.word	0x08009c4b
 8009c20:	08009c69 	.word	0x08009c69
 8009c24:	08009c69 	.word	0x08009c69
 8009c28:	08009c69 	.word	0x08009c69
 8009c2c:	08009c55 	.word	0x08009c55
 8009c30:	08009c69 	.word	0x08009c69
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009c69 	.word	0x08009c69
 8009c3c:	08009c5f 	.word	0x08009c5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c46:	60fb      	str	r3, [r7, #12]

      break;
 8009c48:	e00f      	b.n	8009c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c50:	60fb      	str	r3, [r7, #12]

      break;
 8009c52:	e00a      	b.n	8009c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c5a:	60fb      	str	r3, [r7, #12]

      break;
 8009c5c:	e005      	b.n	8009c6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c64:	60fb      	str	r3, [r7, #12]

      break;
 8009c66:	e000      	b.n	8009c6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8009c68:	bf00      	nop
  }

  return tmpreg;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a40      	ldr	r2, [pc, #256]	; (8009ddc <TIM_Base_SetConfig+0x114>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d013      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce6:	d00f      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a3d      	ldr	r2, [pc, #244]	; (8009de0 <TIM_Base_SetConfig+0x118>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d00b      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a3c      	ldr	r2, [pc, #240]	; (8009de4 <TIM_Base_SetConfig+0x11c>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d007      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a3b      	ldr	r2, [pc, #236]	; (8009de8 <TIM_Base_SetConfig+0x120>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d003      	beq.n	8009d08 <TIM_Base_SetConfig+0x40>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a3a      	ldr	r2, [pc, #232]	; (8009dec <TIM_Base_SetConfig+0x124>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d108      	bne.n	8009d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a2f      	ldr	r2, [pc, #188]	; (8009ddc <TIM_Base_SetConfig+0x114>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d02b      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d28:	d027      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a2c      	ldr	r2, [pc, #176]	; (8009de0 <TIM_Base_SetConfig+0x118>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d023      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a2b      	ldr	r2, [pc, #172]	; (8009de4 <TIM_Base_SetConfig+0x11c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d01f      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a2a      	ldr	r2, [pc, #168]	; (8009de8 <TIM_Base_SetConfig+0x120>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d01b      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a29      	ldr	r2, [pc, #164]	; (8009dec <TIM_Base_SetConfig+0x124>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d017      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a28      	ldr	r2, [pc, #160]	; (8009df0 <TIM_Base_SetConfig+0x128>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d013      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a27      	ldr	r2, [pc, #156]	; (8009df4 <TIM_Base_SetConfig+0x12c>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d00f      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a26      	ldr	r2, [pc, #152]	; (8009df8 <TIM_Base_SetConfig+0x130>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d00b      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4a25      	ldr	r2, [pc, #148]	; (8009dfc <TIM_Base_SetConfig+0x134>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d007      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a24      	ldr	r2, [pc, #144]	; (8009e00 <TIM_Base_SetConfig+0x138>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d003      	beq.n	8009d7a <TIM_Base_SetConfig+0xb2>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a23      	ldr	r2, [pc, #140]	; (8009e04 <TIM_Base_SetConfig+0x13c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d108      	bne.n	8009d8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689a      	ldr	r2, [r3, #8]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <TIM_Base_SetConfig+0x114>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d003      	beq.n	8009dc0 <TIM_Base_SetConfig+0xf8>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a0c      	ldr	r2, [pc, #48]	; (8009dec <TIM_Base_SetConfig+0x124>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d103      	bne.n	8009dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	691a      	ldr	r2, [r3, #16]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	615a      	str	r2, [r3, #20]
}
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	40010000 	.word	0x40010000
 8009de0:	40000400 	.word	0x40000400
 8009de4:	40000800 	.word	0x40000800
 8009de8:	40000c00 	.word	0x40000c00
 8009dec:	40010400 	.word	0x40010400
 8009df0:	40014000 	.word	0x40014000
 8009df4:	40014400 	.word	0x40014400
 8009df8:	40014800 	.word	0x40014800
 8009dfc:	40001800 	.word	0x40001800
 8009e00:	40001c00 	.word	0x40001c00
 8009e04:	40002000 	.word	0x40002000

08009e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b087      	sub	sp, #28
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	f023 0201 	bic.w	r2, r3, #1
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4b2b      	ldr	r3, [pc, #172]	; (8009ee0 <TIM_OC1_SetConfig+0xd8>)
 8009e34:	4013      	ands	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f023 0302 	bic.w	r3, r3, #2
 8009e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a21      	ldr	r2, [pc, #132]	; (8009ee4 <TIM_OC1_SetConfig+0xdc>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d003      	beq.n	8009e6c <TIM_OC1_SetConfig+0x64>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a20      	ldr	r2, [pc, #128]	; (8009ee8 <TIM_OC1_SetConfig+0xe0>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d10c      	bne.n	8009e86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f023 0308 	bic.w	r3, r3, #8
 8009e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	f023 0304 	bic.w	r3, r3, #4
 8009e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a16      	ldr	r2, [pc, #88]	; (8009ee4 <TIM_OC1_SetConfig+0xdc>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d003      	beq.n	8009e96 <TIM_OC1_SetConfig+0x8e>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <TIM_OC1_SetConfig+0xe0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d111      	bne.n	8009eba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	693a      	ldr	r2, [r7, #16]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	685a      	ldr	r2, [r3, #4]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	621a      	str	r2, [r3, #32]
}
 8009ed4:	bf00      	nop
 8009ed6:	371c      	adds	r7, #28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	fffeff8f 	.word	0xfffeff8f
 8009ee4:	40010000 	.word	0x40010000
 8009ee8:	40010400 	.word	0x40010400

08009eec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	f023 0210 	bic.w	r2, r3, #16
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a1b      	ldr	r3, [r3, #32]
 8009f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	4b2e      	ldr	r3, [pc, #184]	; (8009fd0 <TIM_OC2_SetConfig+0xe4>)
 8009f18:	4013      	ands	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	021b      	lsls	r3, r3, #8
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f023 0320 	bic.w	r3, r3, #32
 8009f36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	011b      	lsls	r3, r3, #4
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a23      	ldr	r2, [pc, #140]	; (8009fd4 <TIM_OC2_SetConfig+0xe8>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d003      	beq.n	8009f54 <TIM_OC2_SetConfig+0x68>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a22      	ldr	r2, [pc, #136]	; (8009fd8 <TIM_OC2_SetConfig+0xec>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d10d      	bne.n	8009f70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	011b      	lsls	r3, r3, #4
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a18      	ldr	r2, [pc, #96]	; (8009fd4 <TIM_OC2_SetConfig+0xe8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_OC2_SetConfig+0x94>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a17      	ldr	r2, [pc, #92]	; (8009fd8 <TIM_OC2_SetConfig+0xec>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d113      	bne.n	8009fa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	feff8fff 	.word	0xfeff8fff
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400

08009fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	69db      	ldr	r3, [r3, #28]
 800a002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	4b2d      	ldr	r3, [pc, #180]	; (800a0bc <TIM_OC3_SetConfig+0xe0>)
 800a008:	4013      	ands	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 0303 	bic.w	r3, r3, #3
 800a012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	021b      	lsls	r3, r3, #8
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4313      	orrs	r3, r2
 800a030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a22      	ldr	r2, [pc, #136]	; (800a0c0 <TIM_OC3_SetConfig+0xe4>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d003      	beq.n	800a042 <TIM_OC3_SetConfig+0x66>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a21      	ldr	r2, [pc, #132]	; (800a0c4 <TIM_OC3_SetConfig+0xe8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d10d      	bne.n	800a05e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a048:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	021b      	lsls	r3, r3, #8
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a05c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <TIM_OC3_SetConfig+0xe4>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d003      	beq.n	800a06e <TIM_OC3_SetConfig+0x92>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a16      	ldr	r2, [pc, #88]	; (800a0c4 <TIM_OC3_SetConfig+0xe8>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d113      	bne.n	800a096 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a074:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a07c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	011b      	lsls	r3, r3, #4
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	4313      	orrs	r3, r2
 800a088:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	621a      	str	r2, [r3, #32]
}
 800a0b0:	bf00      	nop
 800a0b2:	371c      	adds	r7, #28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	fffeff8f 	.word	0xfffeff8f
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40010400 	.word	0x40010400

0800a0c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b087      	sub	sp, #28
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <TIM_OC4_SetConfig+0xa4>)
 800a0f4:	4013      	ands	r3, r2
 800a0f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	021b      	lsls	r3, r3, #8
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	4313      	orrs	r3, r2
 800a10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	031b      	lsls	r3, r3, #12
 800a11a:	693a      	ldr	r2, [r7, #16]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a13      	ldr	r2, [pc, #76]	; (800a170 <TIM_OC4_SetConfig+0xa8>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d003      	beq.n	800a130 <TIM_OC4_SetConfig+0x68>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	4a12      	ldr	r2, [pc, #72]	; (800a174 <TIM_OC4_SetConfig+0xac>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d109      	bne.n	800a144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	019b      	lsls	r3, r3, #6
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	4313      	orrs	r3, r2
 800a142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	621a      	str	r2, [r3, #32]
}
 800a15e:	bf00      	nop
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	feff8fff 	.word	0xfeff8fff
 800a170:	40010000 	.word	0x40010000
 800a174:	40010400 	.word	0x40010400

0800a178 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4b1b      	ldr	r3, [pc, #108]	; (800a210 <TIM_OC5_SetConfig+0x98>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a1b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	041b      	lsls	r3, r3, #16
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a12      	ldr	r2, [pc, #72]	; (800a214 <TIM_OC5_SetConfig+0x9c>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d003      	beq.n	800a1d6 <TIM_OC5_SetConfig+0x5e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a11      	ldr	r2, [pc, #68]	; (800a218 <TIM_OC5_SetConfig+0xa0>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d109      	bne.n	800a1ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	621a      	str	r2, [r3, #32]
}
 800a204:	bf00      	nop
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	fffeff8f 	.word	0xfffeff8f
 800a214:	40010000 	.word	0x40010000
 800a218:	40010400 	.word	0x40010400

0800a21c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <TIM_OC6_SetConfig+0x9c>)
 800a248:	4013      	ands	r3, r2
 800a24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	4313      	orrs	r3, r2
 800a256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a25e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	051b      	lsls	r3, r3, #20
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	4313      	orrs	r3, r2
 800a26a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a13      	ldr	r2, [pc, #76]	; (800a2bc <TIM_OC6_SetConfig+0xa0>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_OC6_SetConfig+0x60>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a12      	ldr	r2, [pc, #72]	; (800a2c0 <TIM_OC6_SetConfig+0xa4>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d109      	bne.n	800a290 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	029b      	lsls	r3, r3, #10
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	621a      	str	r2, [r3, #32]
}
 800a2aa:	bf00      	nop
 800a2ac:	371c      	adds	r7, #28
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	feff8fff 	.word	0xfeff8fff
 800a2bc:	40010000 	.word	0x40010000
 800a2c0:	40010400 	.word	0x40010400

0800a2c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4b3d      	ldr	r3, [pc, #244]	; (800a3e0 <TIM_SlaveTimer_SetConfig+0x11c>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	697a      	ldr	r2, [r7, #20]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	2b70      	cmp	r3, #112	; 0x70
 800a308:	d01a      	beq.n	800a340 <TIM_SlaveTimer_SetConfig+0x7c>
 800a30a:	2b70      	cmp	r3, #112	; 0x70
 800a30c:	d860      	bhi.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a30e:	2b60      	cmp	r3, #96	; 0x60
 800a310:	d054      	beq.n	800a3bc <TIM_SlaveTimer_SetConfig+0xf8>
 800a312:	2b60      	cmp	r3, #96	; 0x60
 800a314:	d85c      	bhi.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a316:	2b50      	cmp	r3, #80	; 0x50
 800a318:	d046      	beq.n	800a3a8 <TIM_SlaveTimer_SetConfig+0xe4>
 800a31a:	2b50      	cmp	r3, #80	; 0x50
 800a31c:	d858      	bhi.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a31e:	2b40      	cmp	r3, #64	; 0x40
 800a320:	d019      	beq.n	800a356 <TIM_SlaveTimer_SetConfig+0x92>
 800a322:	2b40      	cmp	r3, #64	; 0x40
 800a324:	d854      	bhi.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a326:	2b30      	cmp	r3, #48	; 0x30
 800a328:	d054      	beq.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x110>
 800a32a:	2b30      	cmp	r3, #48	; 0x30
 800a32c:	d850      	bhi.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d050      	beq.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x110>
 800a332:	2b20      	cmp	r3, #32
 800a334:	d84c      	bhi.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d04c      	beq.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x110>
 800a33a:	2b10      	cmp	r3, #16
 800a33c:	d04a      	beq.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800a33e:	e047      	b.n	800a3d0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	68d9      	ldr	r1, [r3, #12]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f000 f9ec 	bl	800a72c <TIM_ETR_SetConfig>
      break;
 800a354:	e03f      	b.n	800a3d6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b05      	cmp	r3, #5
 800a35c:	d101      	bne.n	800a362 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e03a      	b.n	800a3d8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6a1a      	ldr	r2, [r3, #32]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 0201 	bic.w	r2, r2, #1
 800a378:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a388:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	011b      	lsls	r3, r3, #4
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	693a      	ldr	r2, [r7, #16]
 800a3a4:	621a      	str	r2, [r3, #32]
      break;
 800a3a6:	e016      	b.n	800a3d6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6818      	ldr	r0, [r3, #0]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	6899      	ldr	r1, [r3, #8]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	f000 f889 	bl	800a4cc <TIM_TI1_ConfigInputStage>
      break;
 800a3ba:	e00c      	b.n	800a3d6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6818      	ldr	r0, [r3, #0]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	6899      	ldr	r1, [r3, #8]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f000 f8eb 	bl	800a5a4 <TIM_TI2_ConfigInputStage>
      break;
 800a3ce:	e002      	b.n	800a3d6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a3d0:	bf00      	nop
 800a3d2:	e000      	b.n	800a3d6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800a3d4:	bf00      	nop
  }
  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	fffefff8 	.word	0xfffefff8

0800a3e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6a1b      	ldr	r3, [r3, #32]
 800a3f6:	f023 0201 	bic.w	r2, r3, #1
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4a28      	ldr	r2, [pc, #160]	; (800a4b0 <TIM_TI1_SetConfig+0xcc>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d01b      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a418:	d017      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	4a25      	ldr	r2, [pc, #148]	; (800a4b4 <TIM_TI1_SetConfig+0xd0>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d013      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	4a24      	ldr	r2, [pc, #144]	; (800a4b8 <TIM_TI1_SetConfig+0xd4>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d00f      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4a23      	ldr	r2, [pc, #140]	; (800a4bc <TIM_TI1_SetConfig+0xd8>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d00b      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4a22      	ldr	r2, [pc, #136]	; (800a4c0 <TIM_TI1_SetConfig+0xdc>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d007      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4a21      	ldr	r2, [pc, #132]	; (800a4c4 <TIM_TI1_SetConfig+0xe0>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d003      	beq.n	800a44a <TIM_TI1_SetConfig+0x66>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4a20      	ldr	r2, [pc, #128]	; (800a4c8 <TIM_TI1_SetConfig+0xe4>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d101      	bne.n	800a44e <TIM_TI1_SetConfig+0x6a>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <TIM_TI1_SetConfig+0x6c>
 800a44e:	2300      	movs	r3, #0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d008      	beq.n	800a466 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e003      	b.n	800a46e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f043 0301 	orr.w	r3, r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	4313      	orrs	r3, r2
 800a480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f023 030a 	bic.w	r3, r3, #10
 800a488:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	f003 030a 	and.w	r3, r3, #10
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	4313      	orrs	r3, r2
 800a494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	697a      	ldr	r2, [r7, #20]
 800a49a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	621a      	str	r2, [r3, #32]
}
 800a4a2:	bf00      	nop
 800a4a4:	371c      	adds	r7, #28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	40010000 	.word	0x40010000
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40010400 	.word	0x40010400
 800a4c4:	40014000 	.word	0x40014000
 800a4c8:	40001800 	.word	0x40001800

0800a4cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	f023 0201 	bic.w	r2, r3, #1
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	f023 030a 	bic.w	r3, r3, #10
 800a508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	697a      	ldr	r2, [r7, #20]
 800a51c:	621a      	str	r2, [r3, #32]
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b087      	sub	sp, #28
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	f023 0210 	bic.w	r2, r3, #16
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a556:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	021b      	lsls	r3, r3, #8
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	031b      	lsls	r3, r3, #12
 800a56e:	b29b      	uxth	r3, r3
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	4313      	orrs	r3, r2
 800a574:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a57c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	011b      	lsls	r3, r3, #4
 800a582:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a586:	693a      	ldr	r2, [r7, #16]
 800a588:	4313      	orrs	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	621a      	str	r2, [r3, #32]
}
 800a598:	bf00      	nop
 800a59a:	371c      	adds	r7, #28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	f023 0210 	bic.w	r2, r3, #16
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	031b      	lsls	r3, r3, #12
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a5e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	011b      	lsls	r3, r3, #4
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	697a      	ldr	r2, [r7, #20]
 800a5f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	693a      	ldr	r2, [r7, #16]
 800a5f6:	621a      	str	r2, [r3, #32]
}
 800a5f8:	bf00      	nop
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a604:	b480      	push	{r7}
 800a606:	b087      	sub	sp, #28
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f023 0303 	bic.w	r3, r3, #3
 800a630:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4313      	orrs	r3, r2
 800a638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a640:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	b2db      	uxtb	r3, r3
 800a648:	697a      	ldr	r2, [r7, #20]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	021b      	lsls	r3, r3, #8
 800a65a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a65e:	693a      	ldr	r2, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	621a      	str	r2, [r3, #32]
}
 800a670:	bf00      	nop
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6a1b      	ldr	r3, [r3, #32]
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	697a      	ldr	r2, [r7, #20]
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	031b      	lsls	r3, r3, #12
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	697a      	ldr	r2, [r7, #20]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a6ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	031b      	lsls	r3, r3, #12
 800a6d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	621a      	str	r2, [r3, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	371c      	adds	r7, #28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a70c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4313      	orrs	r3, r2
 800a714:	f043 0307 	orr.w	r3, r3, #7
 800a718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	609a      	str	r2, [r3, #8]
}
 800a720:	bf00      	nop
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	021a      	lsls	r2, r3, #8
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	431a      	orrs	r2, r3
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4313      	orrs	r3, r2
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	4313      	orrs	r3, r2
 800a758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	609a      	str	r2, [r3, #8]
}
 800a760:	bf00      	nop
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f003 031f 	and.w	r3, r3, #31
 800a77e:	2201      	movs	r2, #1
 800a780:	fa02 f303 	lsl.w	r3, r2, r3
 800a784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a1a      	ldr	r2, [r3, #32]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	43db      	mvns	r3, r3
 800a78e:	401a      	ands	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6a1a      	ldr	r2, [r3, #32]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f003 031f 	and.w	r3, r3, #31
 800a79e:	6879      	ldr	r1, [r7, #4]
 800a7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a4:	431a      	orrs	r2, r3
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	621a      	str	r2, [r3, #32]
}
 800a7aa:	bf00      	nop
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e06d      	b.n	800a8ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a30      	ldr	r2, [pc, #192]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d004      	beq.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a2f      	ldr	r2, [pc, #188]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d108      	bne.n	800a816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a80a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	4313      	orrs	r3, r2
 800a814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a81c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4313      	orrs	r3, r2
 800a826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a20      	ldr	r2, [pc, #128]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d022      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a842:	d01d      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a1d      	ldr	r2, [pc, #116]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d018      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a1c      	ldr	r2, [pc, #112]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d013      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a1a      	ldr	r2, [pc, #104]	; (800a8c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d00e      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a15      	ldr	r2, [pc, #84]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d009      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a16      	ldr	r2, [pc, #88]	; (800a8cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d004      	beq.n	800a880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a15      	ldr	r2, [pc, #84]	; (800a8d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10c      	bne.n	800a89a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	689b      	ldr	r3, [r3, #8]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	40010000 	.word	0x40010000
 800a8bc:	40010400 	.word	0x40010400
 800a8c0:	40000400 	.word	0x40000400
 800a8c4:	40000800 	.word	0x40000800
 800a8c8:	40000c00 	.word	0x40000c00
 800a8cc:	40014000 	.word	0x40014000
 800a8d0:	40001800 	.word	0x40001800

0800a8d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d101      	bne.n	800a8f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8ec:	2302      	movs	r3, #2
 800a8ee:	e065      	b.n	800a9bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	4313      	orrs	r3, r2
 800a958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	699b      	ldr	r3, [r3, #24]
 800a964:	041b      	lsls	r3, r3, #16
 800a966:	4313      	orrs	r3, r2
 800a968:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a16      	ldr	r2, [pc, #88]	; (800a9c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d004      	beq.n	800a97e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a14      	ldr	r2, [pc, #80]	; (800a9cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d115      	bne.n	800a9aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	051b      	lsls	r3, r3, #20
 800a98a:	4313      	orrs	r3, r2
 800a98c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	4313      	orrs	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68fa      	ldr	r2, [r7, #12]
 800a9b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	40010000 	.word	0x40010000
 800a9cc:	40010400 	.word	0x40010400

0800a9d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa00:	bf00      	nop
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e040      	b.n	800aaa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7fa f934 	bl	8004c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2224      	movs	r2, #36	; 0x24
 800aa38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f022 0201 	bic.w	r2, r2, #1
 800aa48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fbec 	bl	800b228 <UART_SetConfig>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d101      	bne.n	800aa5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e022      	b.n	800aaa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d002      	beq.n	800aa68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fe42 	bl	800b6ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f042 0201 	orr.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fec9 	bl	800b830 <UART_CheckIdleState>
 800aa9e:	4603      	mov	r3, r0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08a      	sub	sp, #40	; 0x28
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	4613      	mov	r3, r2
 800aab6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aabc:	2b20      	cmp	r3, #32
 800aabe:	f040 8081 	bne.w	800abc4 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <HAL_UART_Transmit+0x26>
 800aac8:	88fb      	ldrh	r3, [r7, #6]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d101      	bne.n	800aad2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e079      	b.n	800abc6 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d101      	bne.n	800aae0 <HAL_UART_Transmit+0x38>
 800aadc:	2302      	movs	r3, #2
 800aade:	e072      	b.n	800abc6 <HAL_UART_Transmit+0x11e>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2221      	movs	r2, #33	; 0x21
 800aaf4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aaf6:	f7fb f9f3 	bl	8005ee0 <HAL_GetTick>
 800aafa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	88fa      	ldrh	r2, [r7, #6]
 800ab00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	88fa      	ldrh	r2, [r7, #6]
 800ab08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab14:	d108      	bne.n	800ab28 <HAL_UART_Transmit+0x80>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d104      	bne.n	800ab28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	61bb      	str	r3, [r7, #24]
 800ab26:	e003      	b.n	800ab30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800ab38:	e02c      	b.n	800ab94 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2200      	movs	r2, #0
 800ab42:	2180      	movs	r1, #128	; 0x80
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 fea6 	bl	800b896 <UART_WaitOnFlagUntilTimeout>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e038      	b.n	800abc6 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10b      	bne.n	800ab72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	461a      	mov	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	3302      	adds	r3, #2
 800ab6e:	61bb      	str	r3, [r7, #24]
 800ab70:	e007      	b.n	800ab82 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	781a      	ldrb	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1cc      	bne.n	800ab3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2200      	movs	r2, #0
 800aba8:	2140      	movs	r1, #64	; 0x40
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 fe73 	bl	800b896 <UART_WaitOnFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e005      	b.n	800abc6 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2220      	movs	r2, #32
 800abbe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	e000      	b.n	800abc6 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800abc4:	2302      	movs	r3, #2
  }
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3720      	adds	r7, #32
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b08a      	sub	sp, #40	; 0x28
 800abd2:	af02      	add	r7, sp, #8
 800abd4:	60f8      	str	r0, [r7, #12]
 800abd6:	60b9      	str	r1, [r7, #8]
 800abd8:	603b      	str	r3, [r7, #0]
 800abda:	4613      	mov	r3, r2
 800abdc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abe2:	2b20      	cmp	r3, #32
 800abe4:	f040 80be 	bne.w	800ad64 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <HAL_UART_Receive+0x26>
 800abee:	88fb      	ldrh	r3, [r7, #6]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	e0b6      	b.n	800ad66 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d101      	bne.n	800ac06 <HAL_UART_Receive+0x38>
 800ac02:	2302      	movs	r3, #2
 800ac04:	e0af      	b.n	800ad66 <HAL_UART_Receive+0x198>
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2222      	movs	r2, #34	; 0x22
 800ac1a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac22:	f7fb f95d 	bl	8005ee0 <HAL_GetTick>
 800ac26:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	88fa      	ldrh	r2, [r7, #6]
 800ac2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	88fa      	ldrh	r2, [r7, #6]
 800ac34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac40:	d10e      	bne.n	800ac60 <HAL_UART_Receive+0x92>
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d105      	bne.n	800ac56 <HAL_UART_Receive+0x88>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac54:	e02d      	b.n	800acb2 <HAL_UART_Receive+0xe4>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	22ff      	movs	r2, #255	; 0xff
 800ac5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac5e:	e028      	b.n	800acb2 <HAL_UART_Receive+0xe4>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10d      	bne.n	800ac84 <HAL_UART_Receive+0xb6>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <HAL_UART_Receive+0xac>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	22ff      	movs	r2, #255	; 0xff
 800ac74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac78:	e01b      	b.n	800acb2 <HAL_UART_Receive+0xe4>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	227f      	movs	r2, #127	; 0x7f
 800ac7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac82:	e016      	b.n	800acb2 <HAL_UART_Receive+0xe4>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac8c:	d10d      	bne.n	800acaa <HAL_UART_Receive+0xdc>
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d104      	bne.n	800aca0 <HAL_UART_Receive+0xd2>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	227f      	movs	r2, #127	; 0x7f
 800ac9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac9e:	e008      	b.n	800acb2 <HAL_UART_Receive+0xe4>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	223f      	movs	r2, #63	; 0x3f
 800aca4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aca8:	e003      	b.n	800acb2 <HAL_UART_Receive+0xe4>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2200      	movs	r2, #0
 800acae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acb8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc2:	d108      	bne.n	800acd6 <HAL_UART_Receive+0x108>
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d104      	bne.n	800acd6 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800accc:	2300      	movs	r3, #0
 800acce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	e003      	b.n	800acde <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ace6:	e032      	b.n	800ad4e <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2200      	movs	r2, #0
 800acf0:	2120      	movs	r1, #32
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 fdcf 	bl	800b896 <UART_WaitOnFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e031      	b.n	800ad66 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10c      	bne.n	800ad22 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	8a7b      	ldrh	r3, [r7, #18]
 800ad12:	4013      	ands	r3, r2
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	61bb      	str	r3, [r7, #24]
 800ad20:	e00c      	b.n	800ad3c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	8a7b      	ldrh	r3, [r7, #18]
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	4013      	ands	r3, r2
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1c6      	bne.n	800ace8 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800ad60:	2300      	movs	r3, #0
 800ad62:	e000      	b.n	800ad66 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800ad64:	2302      	movs	r3, #2
  }
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3720      	adds	r7, #32
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad80:	2b20      	cmp	r3, #32
 800ad82:	d12c      	bne.n	800adde <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <HAL_UART_Receive_DMA+0x22>
 800ad8a:	88fb      	ldrh	r3, [r7, #6]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d101      	bne.n	800ad94 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e025      	b.n	800ade0 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d101      	bne.n	800ada2 <HAL_UART_Receive_DMA+0x34>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e01e      	b.n	800ade0 <HAL_UART_Receive_DMA+0x72>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2201      	movs	r2, #1
 800ada6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d007      	beq.n	800adce <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800adcc:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	461a      	mov	r2, r3
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 fddb 	bl	800b990 <UART_Start_Receive_DMA>
 800adda:	4603      	mov	r3, r0
 800addc:	e000      	b.n	800ade0 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 800adde:	2302      	movs	r3, #2
  }
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ae08:	69fa      	ldr	r2, [r7, #28]
 800ae0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ae0e:	4013      	ands	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d113      	bne.n	800ae40 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	f003 0320 	and.w	r3, r3, #32
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00e      	beq.n	800ae40 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	f003 0320 	and.w	r3, r3, #32
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d009      	beq.n	800ae40 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 81b9 	beq.w	800b1a8 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	4798      	blx	r3
      }
      return;
 800ae3e:	e1b3      	b.n	800b1a8 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 80e3 	beq.w	800b00e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d105      	bne.n	800ae5e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ae52:	69ba      	ldr	r2, [r7, #24]
 800ae54:	4ba5      	ldr	r3, [pc, #660]	; (800b0ec <HAL_UART_IRQHandler+0x304>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f000 80d8 	beq.w	800b00e <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d010      	beq.n	800ae8a <HAL_UART_IRQHandler+0xa2>
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00b      	beq.n	800ae8a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	2201      	movs	r2, #1
 800ae78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae80:	f043 0201 	orr.w	r2, r3, #1
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d010      	beq.n	800aeb6 <HAL_UART_IRQHandler+0xce>
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f003 0301 	and.w	r3, r3, #1
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00b      	beq.n	800aeb6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2202      	movs	r2, #2
 800aea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeac:	f043 0204 	orr.w	r2, r3, #4
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <HAL_UART_IRQHandler+0xfa>
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00b      	beq.n	800aee2 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2204      	movs	r2, #4
 800aed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aed8:	f043 0202 	orr.w	r2, r3, #2
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d015      	beq.n	800af18 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	f003 0320 	and.w	r3, r3, #32
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d104      	bne.n	800af00 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2208      	movs	r2, #8
 800af06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af0e:	f043 0208 	orr.w	r2, r3, #8
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d011      	beq.n	800af46 <HAL_UART_IRQHandler+0x15e>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00c      	beq.n	800af46 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af3c:	f043 0220 	orr.w	r2, r3, #32
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 812d 	beq.w	800b1ac <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	f003 0320 	and.w	r3, r3, #32
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00c      	beq.n	800af76 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	f003 0320 	and.w	r3, r3, #32
 800af62:	2b00      	cmp	r3, #0
 800af64:	d007      	beq.n	800af76 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af88:	2b40      	cmp	r3, #64	; 0x40
 800af8a:	d004      	beq.n	800af96 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af92:	2b00      	cmp	r3, #0
 800af94:	d031      	beq.n	800affa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fd7b 	bl	800ba92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa6:	2b40      	cmp	r3, #64	; 0x40
 800afa8:	d123      	bne.n	800aff2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	689a      	ldr	r2, [r3, #8]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d013      	beq.n	800afea <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc6:	4a4a      	ldr	r2, [pc, #296]	; (800b0f0 <HAL_UART_IRQHandler+0x308>)
 800afc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fb fcce 	bl	8006970 <HAL_DMA_Abort_IT>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d017      	beq.n	800b00a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800afe4:	4610      	mov	r0, r2
 800afe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe8:	e00f      	b.n	800b00a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f906 	bl	800b1fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff0:	e00b      	b.n	800b00a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f902 	bl	800b1fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff8:	e007      	b.n	800b00a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f8fe 	bl	800b1fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b008:	e0d0      	b.n	800b1ac <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00a:	bf00      	nop
    return;
 800b00c:	e0ce      	b.n	800b1ac <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b012:	2b01      	cmp	r3, #1
 800b014:	f040 80a7 	bne.w	800b166 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	f003 0310 	and.w	r3, r3, #16
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 80a1 	beq.w	800b166 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	f003 0310 	and.w	r3, r3, #16
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 809b 	beq.w	800b166 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2210      	movs	r2, #16
 800b036:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b042:	2b40      	cmp	r3, #64	; 0x40
 800b044:	d156      	bne.n	800b0f4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b050:	893b      	ldrh	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 80ac 	beq.w	800b1b0 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b05e:	893a      	ldrh	r2, [r7, #8]
 800b060:	429a      	cmp	r2, r3
 800b062:	f080 80a5 	bcs.w	800b1b0 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	893a      	ldrh	r2, [r7, #8]
 800b06a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b072:	69db      	ldr	r3, [r3, #28]
 800b074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b078:	d02a      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b088:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f022 0201 	bic.w	r2, r2, #1
 800b098:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	689a      	ldr	r2, [r3, #8]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0a8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f022 0210 	bic.w	r2, r2, #16
 800b0c4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fb fbe0 	bl	8006890 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f893 	bl	800b210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b0ea:	e061      	b.n	800b1b0 <HAL_UART_IRQHandler+0x3c8>
 800b0ec:	04000120 	.word	0x04000120
 800b0f0:	0800bc39 	.word	0x0800bc39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b100:	b29b      	uxth	r3, r3
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d050      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800b112:	897b      	ldrh	r3, [r7, #10]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d04d      	beq.n	800b1b4 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b126:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689a      	ldr	r2, [r3, #8]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f022 0201 	bic.w	r2, r2, #1
 800b136:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f022 0210 	bic.w	r2, r2, #16
 800b158:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b15a:	897b      	ldrh	r3, [r7, #10]
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f856 	bl	800b210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b164:	e026      	b.n	800b1b4 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00d      	beq.n	800b18c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b176:	2b00      	cmp	r3, #0
 800b178:	d008      	beq.n	800b18c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d01a      	beq.n	800b1b8 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
    }
    return;
 800b18a:	e015      	b.n	800b1b8 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b192:	2b00      	cmp	r3, #0
 800b194:	d011      	beq.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00c      	beq.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fd5f 	bl	800bc64 <UART_EndTransmit_IT>
    return;
 800b1a6:	e008      	b.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
      return;
 800b1a8:	bf00      	nop
 800b1aa:	e006      	b.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
    return;
 800b1ac:	bf00      	nop
 800b1ae:	e004      	b.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
      return;
 800b1b0:	bf00      	nop
 800b1b2:	e002      	b.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
      return;
 800b1b4:	bf00      	nop
 800b1b6:	e000      	b.n	800b1ba <HAL_UART_IRQHandler+0x3d2>
    return;
 800b1b8:	bf00      	nop
  }

}
 800b1ba:	3720      	adds	r7, #32
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b1c8:	bf00      	nop
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b21c:	bf00      	nop
 800b21e:	370c      	adds	r7, #12
 800b220:	46bd      	mov	sp, r7
 800b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b226:	4770      	bx	lr

0800b228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	689a      	ldr	r2, [r3, #8]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	431a      	orrs	r2, r3
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	431a      	orrs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	4313      	orrs	r3, r2
 800b24a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	4ba7      	ldr	r3, [pc, #668]	; (800b4f0 <UART_SetConfig+0x2c8>)
 800b254:	4013      	ands	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6812      	ldr	r2, [r2, #0]
 800b25a:	6979      	ldr	r1, [r7, #20]
 800b25c:	430b      	orrs	r3, r1
 800b25e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68da      	ldr	r2, [r3, #12]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	430a      	orrs	r2, r1
 800b274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	699b      	ldr	r3, [r3, #24]
 800b27a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	697a      	ldr	r2, [r7, #20]
 800b282:	4313      	orrs	r3, r2
 800b284:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	430a      	orrs	r2, r1
 800b298:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a95      	ldr	r2, [pc, #596]	; (800b4f4 <UART_SetConfig+0x2cc>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d120      	bne.n	800b2e6 <UART_SetConfig+0xbe>
 800b2a4:	4b94      	ldr	r3, [pc, #592]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d816      	bhi.n	800b2e0 <UART_SetConfig+0xb8>
 800b2b2:	a201      	add	r2, pc, #4	; (adr r2, 800b2b8 <UART_SetConfig+0x90>)
 800b2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b8:	0800b2c9 	.word	0x0800b2c9
 800b2bc:	0800b2d5 	.word	0x0800b2d5
 800b2c0:	0800b2cf 	.word	0x0800b2cf
 800b2c4:	0800b2db 	.word	0x0800b2db
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	77fb      	strb	r3, [r7, #31]
 800b2cc:	e14f      	b.n	800b56e <UART_SetConfig+0x346>
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	77fb      	strb	r3, [r7, #31]
 800b2d2:	e14c      	b.n	800b56e <UART_SetConfig+0x346>
 800b2d4:	2304      	movs	r3, #4
 800b2d6:	77fb      	strb	r3, [r7, #31]
 800b2d8:	e149      	b.n	800b56e <UART_SetConfig+0x346>
 800b2da:	2308      	movs	r3, #8
 800b2dc:	77fb      	strb	r3, [r7, #31]
 800b2de:	e146      	b.n	800b56e <UART_SetConfig+0x346>
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	77fb      	strb	r3, [r7, #31]
 800b2e4:	e143      	b.n	800b56e <UART_SetConfig+0x346>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a84      	ldr	r2, [pc, #528]	; (800b4fc <UART_SetConfig+0x2d4>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d132      	bne.n	800b356 <UART_SetConfig+0x12e>
 800b2f0:	4b81      	ldr	r3, [pc, #516]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b2f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f6:	f003 030c 	and.w	r3, r3, #12
 800b2fa:	2b0c      	cmp	r3, #12
 800b2fc:	d828      	bhi.n	800b350 <UART_SetConfig+0x128>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <UART_SetConfig+0xdc>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b339 	.word	0x0800b339
 800b308:	0800b351 	.word	0x0800b351
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b351 	.word	0x0800b351
 800b314:	0800b345 	.word	0x0800b345
 800b318:	0800b351 	.word	0x0800b351
 800b31c:	0800b351 	.word	0x0800b351
 800b320:	0800b351 	.word	0x0800b351
 800b324:	0800b33f 	.word	0x0800b33f
 800b328:	0800b351 	.word	0x0800b351
 800b32c:	0800b351 	.word	0x0800b351
 800b330:	0800b351 	.word	0x0800b351
 800b334:	0800b34b 	.word	0x0800b34b
 800b338:	2300      	movs	r3, #0
 800b33a:	77fb      	strb	r3, [r7, #31]
 800b33c:	e117      	b.n	800b56e <UART_SetConfig+0x346>
 800b33e:	2302      	movs	r3, #2
 800b340:	77fb      	strb	r3, [r7, #31]
 800b342:	e114      	b.n	800b56e <UART_SetConfig+0x346>
 800b344:	2304      	movs	r3, #4
 800b346:	77fb      	strb	r3, [r7, #31]
 800b348:	e111      	b.n	800b56e <UART_SetConfig+0x346>
 800b34a:	2308      	movs	r3, #8
 800b34c:	77fb      	strb	r3, [r7, #31]
 800b34e:	e10e      	b.n	800b56e <UART_SetConfig+0x346>
 800b350:	2310      	movs	r3, #16
 800b352:	77fb      	strb	r3, [r7, #31]
 800b354:	e10b      	b.n	800b56e <UART_SetConfig+0x346>
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a69      	ldr	r2, [pc, #420]	; (800b500 <UART_SetConfig+0x2d8>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d120      	bne.n	800b3a2 <UART_SetConfig+0x17a>
 800b360:	4b65      	ldr	r3, [pc, #404]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b366:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b36a:	2b30      	cmp	r3, #48	; 0x30
 800b36c:	d013      	beq.n	800b396 <UART_SetConfig+0x16e>
 800b36e:	2b30      	cmp	r3, #48	; 0x30
 800b370:	d814      	bhi.n	800b39c <UART_SetConfig+0x174>
 800b372:	2b20      	cmp	r3, #32
 800b374:	d009      	beq.n	800b38a <UART_SetConfig+0x162>
 800b376:	2b20      	cmp	r3, #32
 800b378:	d810      	bhi.n	800b39c <UART_SetConfig+0x174>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <UART_SetConfig+0x15c>
 800b37e:	2b10      	cmp	r3, #16
 800b380:	d006      	beq.n	800b390 <UART_SetConfig+0x168>
 800b382:	e00b      	b.n	800b39c <UART_SetConfig+0x174>
 800b384:	2300      	movs	r3, #0
 800b386:	77fb      	strb	r3, [r7, #31]
 800b388:	e0f1      	b.n	800b56e <UART_SetConfig+0x346>
 800b38a:	2302      	movs	r3, #2
 800b38c:	77fb      	strb	r3, [r7, #31]
 800b38e:	e0ee      	b.n	800b56e <UART_SetConfig+0x346>
 800b390:	2304      	movs	r3, #4
 800b392:	77fb      	strb	r3, [r7, #31]
 800b394:	e0eb      	b.n	800b56e <UART_SetConfig+0x346>
 800b396:	2308      	movs	r3, #8
 800b398:	77fb      	strb	r3, [r7, #31]
 800b39a:	e0e8      	b.n	800b56e <UART_SetConfig+0x346>
 800b39c:	2310      	movs	r3, #16
 800b39e:	77fb      	strb	r3, [r7, #31]
 800b3a0:	e0e5      	b.n	800b56e <UART_SetConfig+0x346>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a57      	ldr	r2, [pc, #348]	; (800b504 <UART_SetConfig+0x2dc>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d120      	bne.n	800b3ee <UART_SetConfig+0x1c6>
 800b3ac:	4b52      	ldr	r3, [pc, #328]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b3b6:	2bc0      	cmp	r3, #192	; 0xc0
 800b3b8:	d013      	beq.n	800b3e2 <UART_SetConfig+0x1ba>
 800b3ba:	2bc0      	cmp	r3, #192	; 0xc0
 800b3bc:	d814      	bhi.n	800b3e8 <UART_SetConfig+0x1c0>
 800b3be:	2b80      	cmp	r3, #128	; 0x80
 800b3c0:	d009      	beq.n	800b3d6 <UART_SetConfig+0x1ae>
 800b3c2:	2b80      	cmp	r3, #128	; 0x80
 800b3c4:	d810      	bhi.n	800b3e8 <UART_SetConfig+0x1c0>
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <UART_SetConfig+0x1a8>
 800b3ca:	2b40      	cmp	r3, #64	; 0x40
 800b3cc:	d006      	beq.n	800b3dc <UART_SetConfig+0x1b4>
 800b3ce:	e00b      	b.n	800b3e8 <UART_SetConfig+0x1c0>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	77fb      	strb	r3, [r7, #31]
 800b3d4:	e0cb      	b.n	800b56e <UART_SetConfig+0x346>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	77fb      	strb	r3, [r7, #31]
 800b3da:	e0c8      	b.n	800b56e <UART_SetConfig+0x346>
 800b3dc:	2304      	movs	r3, #4
 800b3de:	77fb      	strb	r3, [r7, #31]
 800b3e0:	e0c5      	b.n	800b56e <UART_SetConfig+0x346>
 800b3e2:	2308      	movs	r3, #8
 800b3e4:	77fb      	strb	r3, [r7, #31]
 800b3e6:	e0c2      	b.n	800b56e <UART_SetConfig+0x346>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	77fb      	strb	r3, [r7, #31]
 800b3ec:	e0bf      	b.n	800b56e <UART_SetConfig+0x346>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a45      	ldr	r2, [pc, #276]	; (800b508 <UART_SetConfig+0x2e0>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d125      	bne.n	800b444 <UART_SetConfig+0x21c>
 800b3f8:	4b3f      	ldr	r3, [pc, #252]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b406:	d017      	beq.n	800b438 <UART_SetConfig+0x210>
 800b408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b40c:	d817      	bhi.n	800b43e <UART_SetConfig+0x216>
 800b40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b412:	d00b      	beq.n	800b42c <UART_SetConfig+0x204>
 800b414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b418:	d811      	bhi.n	800b43e <UART_SetConfig+0x216>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d003      	beq.n	800b426 <UART_SetConfig+0x1fe>
 800b41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b422:	d006      	beq.n	800b432 <UART_SetConfig+0x20a>
 800b424:	e00b      	b.n	800b43e <UART_SetConfig+0x216>
 800b426:	2300      	movs	r3, #0
 800b428:	77fb      	strb	r3, [r7, #31]
 800b42a:	e0a0      	b.n	800b56e <UART_SetConfig+0x346>
 800b42c:	2302      	movs	r3, #2
 800b42e:	77fb      	strb	r3, [r7, #31]
 800b430:	e09d      	b.n	800b56e <UART_SetConfig+0x346>
 800b432:	2304      	movs	r3, #4
 800b434:	77fb      	strb	r3, [r7, #31]
 800b436:	e09a      	b.n	800b56e <UART_SetConfig+0x346>
 800b438:	2308      	movs	r3, #8
 800b43a:	77fb      	strb	r3, [r7, #31]
 800b43c:	e097      	b.n	800b56e <UART_SetConfig+0x346>
 800b43e:	2310      	movs	r3, #16
 800b440:	77fb      	strb	r3, [r7, #31]
 800b442:	e094      	b.n	800b56e <UART_SetConfig+0x346>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a30      	ldr	r2, [pc, #192]	; (800b50c <UART_SetConfig+0x2e4>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d125      	bne.n	800b49a <UART_SetConfig+0x272>
 800b44e:	4b2a      	ldr	r3, [pc, #168]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b454:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b458:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b45c:	d017      	beq.n	800b48e <UART_SetConfig+0x266>
 800b45e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b462:	d817      	bhi.n	800b494 <UART_SetConfig+0x26c>
 800b464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b468:	d00b      	beq.n	800b482 <UART_SetConfig+0x25a>
 800b46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b46e:	d811      	bhi.n	800b494 <UART_SetConfig+0x26c>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <UART_SetConfig+0x254>
 800b474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b478:	d006      	beq.n	800b488 <UART_SetConfig+0x260>
 800b47a:	e00b      	b.n	800b494 <UART_SetConfig+0x26c>
 800b47c:	2301      	movs	r3, #1
 800b47e:	77fb      	strb	r3, [r7, #31]
 800b480:	e075      	b.n	800b56e <UART_SetConfig+0x346>
 800b482:	2302      	movs	r3, #2
 800b484:	77fb      	strb	r3, [r7, #31]
 800b486:	e072      	b.n	800b56e <UART_SetConfig+0x346>
 800b488:	2304      	movs	r3, #4
 800b48a:	77fb      	strb	r3, [r7, #31]
 800b48c:	e06f      	b.n	800b56e <UART_SetConfig+0x346>
 800b48e:	2308      	movs	r3, #8
 800b490:	77fb      	strb	r3, [r7, #31]
 800b492:	e06c      	b.n	800b56e <UART_SetConfig+0x346>
 800b494:	2310      	movs	r3, #16
 800b496:	77fb      	strb	r3, [r7, #31]
 800b498:	e069      	b.n	800b56e <UART_SetConfig+0x346>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a1c      	ldr	r2, [pc, #112]	; (800b510 <UART_SetConfig+0x2e8>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d137      	bne.n	800b514 <UART_SetConfig+0x2ec>
 800b4a4:	4b14      	ldr	r3, [pc, #80]	; (800b4f8 <UART_SetConfig+0x2d0>)
 800b4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b4ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4b2:	d017      	beq.n	800b4e4 <UART_SetConfig+0x2bc>
 800b4b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b4b8:	d817      	bhi.n	800b4ea <UART_SetConfig+0x2c2>
 800b4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4be:	d00b      	beq.n	800b4d8 <UART_SetConfig+0x2b0>
 800b4c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b4c4:	d811      	bhi.n	800b4ea <UART_SetConfig+0x2c2>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <UART_SetConfig+0x2aa>
 800b4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4ce:	d006      	beq.n	800b4de <UART_SetConfig+0x2b6>
 800b4d0:	e00b      	b.n	800b4ea <UART_SetConfig+0x2c2>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	77fb      	strb	r3, [r7, #31]
 800b4d6:	e04a      	b.n	800b56e <UART_SetConfig+0x346>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	77fb      	strb	r3, [r7, #31]
 800b4dc:	e047      	b.n	800b56e <UART_SetConfig+0x346>
 800b4de:	2304      	movs	r3, #4
 800b4e0:	77fb      	strb	r3, [r7, #31]
 800b4e2:	e044      	b.n	800b56e <UART_SetConfig+0x346>
 800b4e4:	2308      	movs	r3, #8
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e041      	b.n	800b56e <UART_SetConfig+0x346>
 800b4ea:	2310      	movs	r3, #16
 800b4ec:	77fb      	strb	r3, [r7, #31]
 800b4ee:	e03e      	b.n	800b56e <UART_SetConfig+0x346>
 800b4f0:	efff69f3 	.word	0xefff69f3
 800b4f4:	40011000 	.word	0x40011000
 800b4f8:	40023800 	.word	0x40023800
 800b4fc:	40004400 	.word	0x40004400
 800b500:	40004800 	.word	0x40004800
 800b504:	40004c00 	.word	0x40004c00
 800b508:	40005000 	.word	0x40005000
 800b50c:	40011400 	.word	0x40011400
 800b510:	40007800 	.word	0x40007800
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a71      	ldr	r2, [pc, #452]	; (800b6e0 <UART_SetConfig+0x4b8>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d125      	bne.n	800b56a <UART_SetConfig+0x342>
 800b51e:	4b71      	ldr	r3, [pc, #452]	; (800b6e4 <UART_SetConfig+0x4bc>)
 800b520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b524:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b528:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b52c:	d017      	beq.n	800b55e <UART_SetConfig+0x336>
 800b52e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b532:	d817      	bhi.n	800b564 <UART_SetConfig+0x33c>
 800b534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b538:	d00b      	beq.n	800b552 <UART_SetConfig+0x32a>
 800b53a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b53e:	d811      	bhi.n	800b564 <UART_SetConfig+0x33c>
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <UART_SetConfig+0x324>
 800b544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b548:	d006      	beq.n	800b558 <UART_SetConfig+0x330>
 800b54a:	e00b      	b.n	800b564 <UART_SetConfig+0x33c>
 800b54c:	2300      	movs	r3, #0
 800b54e:	77fb      	strb	r3, [r7, #31]
 800b550:	e00d      	b.n	800b56e <UART_SetConfig+0x346>
 800b552:	2302      	movs	r3, #2
 800b554:	77fb      	strb	r3, [r7, #31]
 800b556:	e00a      	b.n	800b56e <UART_SetConfig+0x346>
 800b558:	2304      	movs	r3, #4
 800b55a:	77fb      	strb	r3, [r7, #31]
 800b55c:	e007      	b.n	800b56e <UART_SetConfig+0x346>
 800b55e:	2308      	movs	r3, #8
 800b560:	77fb      	strb	r3, [r7, #31]
 800b562:	e004      	b.n	800b56e <UART_SetConfig+0x346>
 800b564:	2310      	movs	r3, #16
 800b566:	77fb      	strb	r3, [r7, #31]
 800b568:	e001      	b.n	800b56e <UART_SetConfig+0x346>
 800b56a:	2310      	movs	r3, #16
 800b56c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	69db      	ldr	r3, [r3, #28]
 800b572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b576:	d15b      	bne.n	800b630 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800b578:	7ffb      	ldrb	r3, [r7, #31]
 800b57a:	2b08      	cmp	r3, #8
 800b57c:	d827      	bhi.n	800b5ce <UART_SetConfig+0x3a6>
 800b57e:	a201      	add	r2, pc, #4	; (adr r2, 800b584 <UART_SetConfig+0x35c>)
 800b580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b584:	0800b5a9 	.word	0x0800b5a9
 800b588:	0800b5b1 	.word	0x0800b5b1
 800b58c:	0800b5b9 	.word	0x0800b5b9
 800b590:	0800b5cf 	.word	0x0800b5cf
 800b594:	0800b5bf 	.word	0x0800b5bf
 800b598:	0800b5cf 	.word	0x0800b5cf
 800b59c:	0800b5cf 	.word	0x0800b5cf
 800b5a0:	0800b5cf 	.word	0x0800b5cf
 800b5a4:	0800b5c7 	.word	0x0800b5c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5a8:	f7fc ffe0 	bl	800856c <HAL_RCC_GetPCLK1Freq>
 800b5ac:	61b8      	str	r0, [r7, #24]
        break;
 800b5ae:	e013      	b.n	800b5d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5b0:	f7fc fff0 	bl	8008594 <HAL_RCC_GetPCLK2Freq>
 800b5b4:	61b8      	str	r0, [r7, #24]
        break;
 800b5b6:	e00f      	b.n	800b5d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5b8:	4b4b      	ldr	r3, [pc, #300]	; (800b6e8 <UART_SetConfig+0x4c0>)
 800b5ba:	61bb      	str	r3, [r7, #24]
        break;
 800b5bc:	e00c      	b.n	800b5d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5be:	f7fc ff13 	bl	80083e8 <HAL_RCC_GetSysClockFreq>
 800b5c2:	61b8      	str	r0, [r7, #24]
        break;
 800b5c4:	e008      	b.n	800b5d8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ca:	61bb      	str	r3, [r7, #24]
        break;
 800b5cc:	e004      	b.n	800b5d8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	77bb      	strb	r3, [r7, #30]
        break;
 800b5d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d074      	beq.n	800b6c8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	005a      	lsls	r2, r3, #1
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	085b      	lsrs	r3, r3, #1
 800b5e8:	441a      	add	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	2b0f      	cmp	r3, #15
 800b5fa:	d916      	bls.n	800b62a <UART_SetConfig+0x402>
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b602:	d212      	bcs.n	800b62a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	b29b      	uxth	r3, r3
 800b608:	f023 030f 	bic.w	r3, r3, #15
 800b60c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	085b      	lsrs	r3, r3, #1
 800b612:	b29b      	uxth	r3, r3
 800b614:	f003 0307 	and.w	r3, r3, #7
 800b618:	b29a      	uxth	r2, r3
 800b61a:	89fb      	ldrh	r3, [r7, #14]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	89fa      	ldrh	r2, [r7, #14]
 800b626:	60da      	str	r2, [r3, #12]
 800b628:	e04e      	b.n	800b6c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	77bb      	strb	r3, [r7, #30]
 800b62e:	e04b      	b.n	800b6c8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b630:	7ffb      	ldrb	r3, [r7, #31]
 800b632:	2b08      	cmp	r3, #8
 800b634:	d827      	bhi.n	800b686 <UART_SetConfig+0x45e>
 800b636:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <UART_SetConfig+0x414>)
 800b638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63c:	0800b661 	.word	0x0800b661
 800b640:	0800b669 	.word	0x0800b669
 800b644:	0800b671 	.word	0x0800b671
 800b648:	0800b687 	.word	0x0800b687
 800b64c:	0800b677 	.word	0x0800b677
 800b650:	0800b687 	.word	0x0800b687
 800b654:	0800b687 	.word	0x0800b687
 800b658:	0800b687 	.word	0x0800b687
 800b65c:	0800b67f 	.word	0x0800b67f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b660:	f7fc ff84 	bl	800856c <HAL_RCC_GetPCLK1Freq>
 800b664:	61b8      	str	r0, [r7, #24]
        break;
 800b666:	e013      	b.n	800b690 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b668:	f7fc ff94 	bl	8008594 <HAL_RCC_GetPCLK2Freq>
 800b66c:	61b8      	str	r0, [r7, #24]
        break;
 800b66e:	e00f      	b.n	800b690 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b670:	4b1d      	ldr	r3, [pc, #116]	; (800b6e8 <UART_SetConfig+0x4c0>)
 800b672:	61bb      	str	r3, [r7, #24]
        break;
 800b674:	e00c      	b.n	800b690 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b676:	f7fc feb7 	bl	80083e8 <HAL_RCC_GetSysClockFreq>
 800b67a:	61b8      	str	r0, [r7, #24]
        break;
 800b67c:	e008      	b.n	800b690 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b67e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b682:	61bb      	str	r3, [r7, #24]
        break;
 800b684:	e004      	b.n	800b690 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800b686:	2300      	movs	r3, #0
 800b688:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	77bb      	strb	r3, [r7, #30]
        break;
 800b68e:	bf00      	nop
    }

    if (pclk != 0U)
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d018      	beq.n	800b6c8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	085a      	lsrs	r2, r3, #1
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	441a      	add	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	2b0f      	cmp	r3, #15
 800b6b0:	d908      	bls.n	800b6c4 <UART_SetConfig+0x49c>
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b8:	d204      	bcs.n	800b6c4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	60da      	str	r2, [r3, #12]
 800b6c2:	e001      	b.n	800b6c8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b6d4:	7fbb      	ldrb	r3, [r7, #30]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3720      	adds	r7, #32
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	40007c00 	.word	0x40007c00
 800b6e4:	40023800 	.word	0x40023800
 800b6e8:	00f42400 	.word	0x00f42400

0800b6ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00a      	beq.n	800b716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00a      	beq.n	800b738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	430a      	orrs	r2, r1
 800b736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	f003 0304 	and.w	r3, r3, #4
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00a      	beq.n	800b75a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00a      	beq.n	800b77c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	f003 0310 	and.w	r3, r3, #16
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00a      	beq.n	800b79e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	430a      	orrs	r2, r1
 800b79c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a2:	f003 0320 	and.w	r3, r3, #32
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	430a      	orrs	r2, r1
 800b7be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01a      	beq.n	800b802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	430a      	orrs	r2, r1
 800b7e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b7ea:	d10a      	bne.n	800b802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	430a      	orrs	r2, r1
 800b800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00a      	beq.n	800b824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	605a      	str	r2, [r3, #4]
  }
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af02      	add	r7, sp, #8
 800b836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b840:	f7fa fb4e 	bl	8005ee0 <HAL_GetTick>
 800b844:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0308 	and.w	r3, r3, #8
 800b850:	2b08      	cmp	r3, #8
 800b852:	d10e      	bne.n	800b872 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b858:	9300      	str	r3, [sp, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f817 	bl	800b896 <UART_WaitOnFlagUntilTimeout>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b86e:	2303      	movs	r3, #3
 800b870:	e00d      	b.n	800b88e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2220      	movs	r2, #32
 800b876:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2220      	movs	r2, #32
 800b87c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	603b      	str	r3, [r7, #0]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8a6:	e05e      	b.n	800b966 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ae:	d05a      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8b0:	f7fa fb16 	bl	8005ee0 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d302      	bcc.n	800b8c6 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d11b      	bne.n	800b8fe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681a      	ldr	r2, [r3, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b8d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0201 	bic.w	r2, r2, #1
 800b8e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2220      	movs	r2, #32
 800b8ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b8fa:	2303      	movs	r3, #3
 800b8fc:	e043      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d02c      	beq.n	800b966 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	69db      	ldr	r3, [r3, #28]
 800b912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b91a:	d124      	bne.n	800b966 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b924:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b934:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f022 0201 	bic.w	r2, r2, #1
 800b944:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2220      	movs	r2, #32
 800b94a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2220      	movs	r2, #32
 800b950:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2220      	movs	r2, #32
 800b956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e00f      	b.n	800b986 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	69da      	ldr	r2, [r3, #28]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	4013      	ands	r3, r2
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	bf0c      	ite	eq
 800b976:	2301      	moveq	r3, #1
 800b978:	2300      	movne	r3, #0
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	461a      	mov	r2, r3
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	429a      	cmp	r2, r3
 800b982:	d091      	beq.n	800b8a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
	...

0800b990 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4613      	mov	r3, r2
 800b99c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	88fa      	ldrh	r2, [r7, #6]
 800b9a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2222      	movs	r2, #34	; 0x22
 800b9b8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d02b      	beq.n	800ba1a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c6:	4a25      	ldr	r2, [pc, #148]	; (800ba5c <UART_Start_Receive_DMA+0xcc>)
 800b9c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ce:	4a24      	ldr	r2, [pc, #144]	; (800ba60 <UART_Start_Receive_DMA+0xd0>)
 800b9d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d6:	4a23      	ldr	r2, [pc, #140]	; (800ba64 <UART_Start_Receive_DMA+0xd4>)
 800b9d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9de:	2200      	movs	r2, #0
 800b9e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3324      	adds	r3, #36	; 0x24
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	88fb      	ldrh	r3, [r7, #6]
 800b9f6:	f7fa feeb 	bl	80067d0 <HAL_DMA_Start_IT>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00c      	beq.n	800ba1a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2210      	movs	r2, #16
 800ba04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2220      	movs	r2, #32
 800ba14:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 800ba16:	2301      	movs	r3, #1
 800ba18:	e01c      	b.n	800ba54 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba30:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f042 0201 	orr.w	r2, r2, #1
 800ba40:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	689a      	ldr	r2, [r3, #8]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba50:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	0800baf1 	.word	0x0800baf1
 800ba60:	0800bb85 	.word	0x0800bb85
 800ba64:	0800bbbd 	.word	0x0800bbbd

0800ba68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ba7e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2220      	movs	r2, #32
 800ba84:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800baa8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	689a      	ldr	r2, [r3, #8]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f022 0201 	bic.w	r2, r2, #1
 800bab8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d107      	bne.n	800bad2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f022 0210 	bic.w	r2, r2, #16
 800bad0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bae4:	bf00      	nop
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bafc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	69db      	ldr	r3, [r3, #28]
 800bb02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb06:	d02a      	beq.n	800bb5e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb1e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689a      	ldr	r2, [r3, #8]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f022 0201 	bic.w	r2, r2, #1
 800bb2e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	689a      	ldr	r2, [r3, #8]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb3e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2220      	movs	r2, #32
 800bb44:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb4a:	2b01      	cmp	r3, #1
 800bb4c:	d107      	bne.n	800bb5e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0210 	bic.w	r2, r2, #16
 800bb5c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d107      	bne.n	800bb76 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f7ff fb4e 	bl	800b210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb74:	e002      	b.n	800bb7c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f7ff fb2c 	bl	800b1d4 <HAL_UART_RxCpltCallback>
}
 800bb7c:	bf00      	nop
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d109      	bne.n	800bbae <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bba0:	085b      	lsrs	r3, r3, #1
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff fb32 	bl	800b210 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbac:	e002      	b.n	800bbb4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff fb1a 	bl	800b1e8 <HAL_UART_RxHalfCpltCallback>
}
 800bbb4:	bf00      	nop
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe0:	2b80      	cmp	r3, #128	; 0x80
 800bbe2:	d109      	bne.n	800bbf8 <UART_DMAError+0x3c>
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	2b21      	cmp	r3, #33	; 0x21
 800bbe8:	d106      	bne.n	800bbf8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bbf2:	6978      	ldr	r0, [r7, #20]
 800bbf4:	f7ff ff38 	bl	800ba68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc02:	2b40      	cmp	r3, #64	; 0x40
 800bc04:	d109      	bne.n	800bc1a <UART_DMAError+0x5e>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b22      	cmp	r3, #34	; 0x22
 800bc0a:	d106      	bne.n	800bc1a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bc14:	6978      	ldr	r0, [r7, #20]
 800bc16:	f7ff ff3c 	bl	800ba92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc20:	f043 0210 	orr.w	r2, r3, #16
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc2a:	6978      	ldr	r0, [r7, #20]
 800bc2c:	f7ff fae6 	bl	800b1fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc30:	bf00      	nop
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc56:	68f8      	ldr	r0, [r7, #12]
 800bc58:	f7ff fad0 	bl	800b1fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc5c:	bf00      	nop
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc7a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2220      	movs	r2, #32
 800bc80:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7ff fa99 	bl	800b1c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}

0800bc96 <atof>:
 800bc96:	2100      	movs	r1, #0
 800bc98:	f001 bb70 	b.w	800d37c <strtod>

0800bc9c <atoi>:
 800bc9c:	220a      	movs	r2, #10
 800bc9e:	2100      	movs	r1, #0
 800bca0:	f001 bc58 	b.w	800d554 <strtol>

0800bca4 <__errno>:
 800bca4:	4b01      	ldr	r3, [pc, #4]	; (800bcac <__errno+0x8>)
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	20000028 	.word	0x20000028

0800bcb0 <getchar>:
 800bcb0:	4b07      	ldr	r3, [pc, #28]	; (800bcd0 <getchar+0x20>)
 800bcb2:	b510      	push	{r4, lr}
 800bcb4:	681c      	ldr	r4, [r3, #0]
 800bcb6:	b124      	cbz	r4, 800bcc2 <getchar+0x12>
 800bcb8:	69a3      	ldr	r3, [r4, #24]
 800bcba:	b913      	cbnz	r3, 800bcc2 <getchar+0x12>
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	f002 fcd7 	bl	800e670 <__sinit>
 800bcc2:	6861      	ldr	r1, [r4, #4]
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcca:	f003 b90d 	b.w	800eee8 <_getc_r>
 800bcce:	bf00      	nop
 800bcd0:	20000028 	.word	0x20000028

0800bcd4 <__libc_init_array>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4d0d      	ldr	r5, [pc, #52]	; (800bd0c <__libc_init_array+0x38>)
 800bcd8:	4c0d      	ldr	r4, [pc, #52]	; (800bd10 <__libc_init_array+0x3c>)
 800bcda:	1b64      	subs	r4, r4, r5
 800bcdc:	10a4      	asrs	r4, r4, #2
 800bcde:	2600      	movs	r6, #0
 800bce0:	42a6      	cmp	r6, r4
 800bce2:	d109      	bne.n	800bcf8 <__libc_init_array+0x24>
 800bce4:	4d0b      	ldr	r5, [pc, #44]	; (800bd14 <__libc_init_array+0x40>)
 800bce6:	4c0c      	ldr	r4, [pc, #48]	; (800bd18 <__libc_init_array+0x44>)
 800bce8:	f005 fa44 	bl	8011174 <_init>
 800bcec:	1b64      	subs	r4, r4, r5
 800bcee:	10a4      	asrs	r4, r4, #2
 800bcf0:	2600      	movs	r6, #0
 800bcf2:	42a6      	cmp	r6, r4
 800bcf4:	d105      	bne.n	800bd02 <__libc_init_array+0x2e>
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcfc:	4798      	blx	r3
 800bcfe:	3601      	adds	r6, #1
 800bd00:	e7ee      	b.n	800bce0 <__libc_init_array+0xc>
 800bd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd06:	4798      	blx	r3
 800bd08:	3601      	adds	r6, #1
 800bd0a:	e7f2      	b.n	800bcf2 <__libc_init_array+0x1e>
 800bd0c:	080122d8 	.word	0x080122d8
 800bd10:	080122d8 	.word	0x080122d8
 800bd14:	080122d8 	.word	0x080122d8
 800bd18:	080122dc 	.word	0x080122dc

0800bd1c <memset>:
 800bd1c:	4402      	add	r2, r0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d100      	bne.n	800bd26 <memset+0xa>
 800bd24:	4770      	bx	lr
 800bd26:	f803 1b01 	strb.w	r1, [r3], #1
 800bd2a:	e7f9      	b.n	800bd20 <memset+0x4>

0800bd2c <__cvt>:
 800bd2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	ec55 4b10 	vmov	r4, r5, d0
 800bd34:	2d00      	cmp	r5, #0
 800bd36:	460e      	mov	r6, r1
 800bd38:	4619      	mov	r1, r3
 800bd3a:	462b      	mov	r3, r5
 800bd3c:	bfbb      	ittet	lt
 800bd3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bd42:	461d      	movlt	r5, r3
 800bd44:	2300      	movge	r3, #0
 800bd46:	232d      	movlt	r3, #45	; 0x2d
 800bd48:	700b      	strb	r3, [r1, #0]
 800bd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bd50:	4691      	mov	r9, r2
 800bd52:	f023 0820 	bic.w	r8, r3, #32
 800bd56:	bfbc      	itt	lt
 800bd58:	4622      	movlt	r2, r4
 800bd5a:	4614      	movlt	r4, r2
 800bd5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd60:	d005      	beq.n	800bd6e <__cvt+0x42>
 800bd62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bd66:	d100      	bne.n	800bd6a <__cvt+0x3e>
 800bd68:	3601      	adds	r6, #1
 800bd6a:	2102      	movs	r1, #2
 800bd6c:	e000      	b.n	800bd70 <__cvt+0x44>
 800bd6e:	2103      	movs	r1, #3
 800bd70:	ab03      	add	r3, sp, #12
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	ab02      	add	r3, sp, #8
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	ec45 4b10 	vmov	d0, r4, r5
 800bd7c:	4653      	mov	r3, sl
 800bd7e:	4632      	mov	r2, r6
 800bd80:	f001 fd5e 	bl	800d840 <_dtoa_r>
 800bd84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd88:	4607      	mov	r7, r0
 800bd8a:	d102      	bne.n	800bd92 <__cvt+0x66>
 800bd8c:	f019 0f01 	tst.w	r9, #1
 800bd90:	d022      	beq.n	800bdd8 <__cvt+0xac>
 800bd92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd96:	eb07 0906 	add.w	r9, r7, r6
 800bd9a:	d110      	bne.n	800bdbe <__cvt+0x92>
 800bd9c:	783b      	ldrb	r3, [r7, #0]
 800bd9e:	2b30      	cmp	r3, #48	; 0x30
 800bda0:	d10a      	bne.n	800bdb8 <__cvt+0x8c>
 800bda2:	2200      	movs	r2, #0
 800bda4:	2300      	movs	r3, #0
 800bda6:	4620      	mov	r0, r4
 800bda8:	4629      	mov	r1, r5
 800bdaa:	f7f4 febd 	bl	8000b28 <__aeabi_dcmpeq>
 800bdae:	b918      	cbnz	r0, 800bdb8 <__cvt+0x8c>
 800bdb0:	f1c6 0601 	rsb	r6, r6, #1
 800bdb4:	f8ca 6000 	str.w	r6, [sl]
 800bdb8:	f8da 3000 	ldr.w	r3, [sl]
 800bdbc:	4499      	add	r9, r3
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 feaf 	bl	8000b28 <__aeabi_dcmpeq>
 800bdca:	b108      	cbz	r0, 800bdd0 <__cvt+0xa4>
 800bdcc:	f8cd 900c 	str.w	r9, [sp, #12]
 800bdd0:	2230      	movs	r2, #48	; 0x30
 800bdd2:	9b03      	ldr	r3, [sp, #12]
 800bdd4:	454b      	cmp	r3, r9
 800bdd6:	d307      	bcc.n	800bde8 <__cvt+0xbc>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bddc:	1bdb      	subs	r3, r3, r7
 800bdde:	4638      	mov	r0, r7
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	b004      	add	sp, #16
 800bde4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde8:	1c59      	adds	r1, r3, #1
 800bdea:	9103      	str	r1, [sp, #12]
 800bdec:	701a      	strb	r2, [r3, #0]
 800bdee:	e7f0      	b.n	800bdd2 <__cvt+0xa6>

0800bdf0 <__exponent>:
 800bdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2900      	cmp	r1, #0
 800bdf6:	bfb8      	it	lt
 800bdf8:	4249      	neglt	r1, r1
 800bdfa:	f803 2b02 	strb.w	r2, [r3], #2
 800bdfe:	bfb4      	ite	lt
 800be00:	222d      	movlt	r2, #45	; 0x2d
 800be02:	222b      	movge	r2, #43	; 0x2b
 800be04:	2909      	cmp	r1, #9
 800be06:	7042      	strb	r2, [r0, #1]
 800be08:	dd2a      	ble.n	800be60 <__exponent+0x70>
 800be0a:	f10d 0407 	add.w	r4, sp, #7
 800be0e:	46a4      	mov	ip, r4
 800be10:	270a      	movs	r7, #10
 800be12:	46a6      	mov	lr, r4
 800be14:	460a      	mov	r2, r1
 800be16:	fb91 f6f7 	sdiv	r6, r1, r7
 800be1a:	fb07 1516 	mls	r5, r7, r6, r1
 800be1e:	3530      	adds	r5, #48	; 0x30
 800be20:	2a63      	cmp	r2, #99	; 0x63
 800be22:	f104 34ff 	add.w	r4, r4, #4294967295
 800be26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be2a:	4631      	mov	r1, r6
 800be2c:	dcf1      	bgt.n	800be12 <__exponent+0x22>
 800be2e:	3130      	adds	r1, #48	; 0x30
 800be30:	f1ae 0502 	sub.w	r5, lr, #2
 800be34:	f804 1c01 	strb.w	r1, [r4, #-1]
 800be38:	1c44      	adds	r4, r0, #1
 800be3a:	4629      	mov	r1, r5
 800be3c:	4561      	cmp	r1, ip
 800be3e:	d30a      	bcc.n	800be56 <__exponent+0x66>
 800be40:	f10d 0209 	add.w	r2, sp, #9
 800be44:	eba2 020e 	sub.w	r2, r2, lr
 800be48:	4565      	cmp	r5, ip
 800be4a:	bf88      	it	hi
 800be4c:	2200      	movhi	r2, #0
 800be4e:	4413      	add	r3, r2
 800be50:	1a18      	subs	r0, r3, r0
 800be52:	b003      	add	sp, #12
 800be54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800be5e:	e7ed      	b.n	800be3c <__exponent+0x4c>
 800be60:	2330      	movs	r3, #48	; 0x30
 800be62:	3130      	adds	r1, #48	; 0x30
 800be64:	7083      	strb	r3, [r0, #2]
 800be66:	70c1      	strb	r1, [r0, #3]
 800be68:	1d03      	adds	r3, r0, #4
 800be6a:	e7f1      	b.n	800be50 <__exponent+0x60>

0800be6c <_printf_float>:
 800be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be70:	ed2d 8b02 	vpush	{d8}
 800be74:	b08d      	sub	sp, #52	; 0x34
 800be76:	460c      	mov	r4, r1
 800be78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be7c:	4616      	mov	r6, r2
 800be7e:	461f      	mov	r7, r3
 800be80:	4605      	mov	r5, r0
 800be82:	f003 f871 	bl	800ef68 <_localeconv_r>
 800be86:	f8d0 a000 	ldr.w	sl, [r0]
 800be8a:	4650      	mov	r0, sl
 800be8c:	f7f4 f9ca 	bl	8000224 <strlen>
 800be90:	2300      	movs	r3, #0
 800be92:	930a      	str	r3, [sp, #40]	; 0x28
 800be94:	6823      	ldr	r3, [r4, #0]
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	f8d8 3000 	ldr.w	r3, [r8]
 800be9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bea0:	3307      	adds	r3, #7
 800bea2:	f023 0307 	bic.w	r3, r3, #7
 800bea6:	f103 0208 	add.w	r2, r3, #8
 800beaa:	f8c8 2000 	str.w	r2, [r8]
 800beae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800beb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800beba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f8cd 8018 	str.w	r8, [sp, #24]
 800bec4:	ee08 0a10 	vmov	s16, r0
 800bec8:	4b9f      	ldr	r3, [pc, #636]	; (800c148 <_printf_float+0x2dc>)
 800beca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	f7f4 fe5b 	bl	8000b8c <__aeabi_dcmpun>
 800bed6:	bb88      	cbnz	r0, 800bf3c <_printf_float+0xd0>
 800bed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bedc:	4b9a      	ldr	r3, [pc, #616]	; (800c148 <_printf_float+0x2dc>)
 800bede:	f04f 32ff 	mov.w	r2, #4294967295
 800bee2:	f7f4 fe35 	bl	8000b50 <__aeabi_dcmple>
 800bee6:	bb48      	cbnz	r0, 800bf3c <_printf_float+0xd0>
 800bee8:	2200      	movs	r2, #0
 800beea:	2300      	movs	r3, #0
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 fe24 	bl	8000b3c <__aeabi_dcmplt>
 800bef4:	b110      	cbz	r0, 800befc <_printf_float+0x90>
 800bef6:	232d      	movs	r3, #45	; 0x2d
 800bef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800befc:	4b93      	ldr	r3, [pc, #588]	; (800c14c <_printf_float+0x2e0>)
 800befe:	4894      	ldr	r0, [pc, #592]	; (800c150 <_printf_float+0x2e4>)
 800bf00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf04:	bf94      	ite	ls
 800bf06:	4698      	movls	r8, r3
 800bf08:	4680      	movhi	r8, r0
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	6123      	str	r3, [r4, #16]
 800bf0e:	9b05      	ldr	r3, [sp, #20]
 800bf10:	f023 0204 	bic.w	r2, r3, #4
 800bf14:	6022      	str	r2, [r4, #0]
 800bf16:	f04f 0900 	mov.w	r9, #0
 800bf1a:	9700      	str	r7, [sp, #0]
 800bf1c:	4633      	mov	r3, r6
 800bf1e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf20:	4621      	mov	r1, r4
 800bf22:	4628      	mov	r0, r5
 800bf24:	f000 f9d8 	bl	800c2d8 <_printf_common>
 800bf28:	3001      	adds	r0, #1
 800bf2a:	f040 8090 	bne.w	800c04e <_printf_float+0x1e2>
 800bf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf32:	b00d      	add	sp, #52	; 0x34
 800bf34:	ecbd 8b02 	vpop	{d8}
 800bf38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3c:	4642      	mov	r2, r8
 800bf3e:	464b      	mov	r3, r9
 800bf40:	4640      	mov	r0, r8
 800bf42:	4649      	mov	r1, r9
 800bf44:	f7f4 fe22 	bl	8000b8c <__aeabi_dcmpun>
 800bf48:	b140      	cbz	r0, 800bf5c <_printf_float+0xf0>
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	bfbc      	itt	lt
 800bf50:	232d      	movlt	r3, #45	; 0x2d
 800bf52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bf56:	487f      	ldr	r0, [pc, #508]	; (800c154 <_printf_float+0x2e8>)
 800bf58:	4b7f      	ldr	r3, [pc, #508]	; (800c158 <_printf_float+0x2ec>)
 800bf5a:	e7d1      	b.n	800bf00 <_printf_float+0x94>
 800bf5c:	6863      	ldr	r3, [r4, #4]
 800bf5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bf62:	9206      	str	r2, [sp, #24]
 800bf64:	1c5a      	adds	r2, r3, #1
 800bf66:	d13f      	bne.n	800bfe8 <_printf_float+0x17c>
 800bf68:	2306      	movs	r3, #6
 800bf6a:	6063      	str	r3, [r4, #4]
 800bf6c:	9b05      	ldr	r3, [sp, #20]
 800bf6e:	6861      	ldr	r1, [r4, #4]
 800bf70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf74:	2300      	movs	r3, #0
 800bf76:	9303      	str	r3, [sp, #12]
 800bf78:	ab0a      	add	r3, sp, #40	; 0x28
 800bf7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf7e:	ab09      	add	r3, sp, #36	; 0x24
 800bf80:	ec49 8b10 	vmov	d0, r8, r9
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	6022      	str	r2, [r4, #0]
 800bf88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f7ff fecd 	bl	800bd2c <__cvt>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf96:	2b47      	cmp	r3, #71	; 0x47
 800bf98:	4680      	mov	r8, r0
 800bf9a:	d108      	bne.n	800bfae <_printf_float+0x142>
 800bf9c:	1cc8      	adds	r0, r1, #3
 800bf9e:	db02      	blt.n	800bfa6 <_printf_float+0x13a>
 800bfa0:	6863      	ldr	r3, [r4, #4]
 800bfa2:	4299      	cmp	r1, r3
 800bfa4:	dd41      	ble.n	800c02a <_printf_float+0x1be>
 800bfa6:	f1ab 0b02 	sub.w	fp, fp, #2
 800bfaa:	fa5f fb8b 	uxtb.w	fp, fp
 800bfae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfb2:	d820      	bhi.n	800bff6 <_printf_float+0x18a>
 800bfb4:	3901      	subs	r1, #1
 800bfb6:	465a      	mov	r2, fp
 800bfb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bfbc:	9109      	str	r1, [sp, #36]	; 0x24
 800bfbe:	f7ff ff17 	bl	800bdf0 <__exponent>
 800bfc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bfc4:	1813      	adds	r3, r2, r0
 800bfc6:	2a01      	cmp	r2, #1
 800bfc8:	4681      	mov	r9, r0
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	dc02      	bgt.n	800bfd4 <_printf_float+0x168>
 800bfce:	6822      	ldr	r2, [r4, #0]
 800bfd0:	07d2      	lsls	r2, r2, #31
 800bfd2:	d501      	bpl.n	800bfd8 <_printf_float+0x16c>
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	6123      	str	r3, [r4, #16]
 800bfd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d09c      	beq.n	800bf1a <_printf_float+0xae>
 800bfe0:	232d      	movs	r3, #45	; 0x2d
 800bfe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfe6:	e798      	b.n	800bf1a <_printf_float+0xae>
 800bfe8:	9a06      	ldr	r2, [sp, #24]
 800bfea:	2a47      	cmp	r2, #71	; 0x47
 800bfec:	d1be      	bne.n	800bf6c <_printf_float+0x100>
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1bc      	bne.n	800bf6c <_printf_float+0x100>
 800bff2:	2301      	movs	r3, #1
 800bff4:	e7b9      	b.n	800bf6a <_printf_float+0xfe>
 800bff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bffa:	d118      	bne.n	800c02e <_printf_float+0x1c2>
 800bffc:	2900      	cmp	r1, #0
 800bffe:	6863      	ldr	r3, [r4, #4]
 800c000:	dd0b      	ble.n	800c01a <_printf_float+0x1ae>
 800c002:	6121      	str	r1, [r4, #16]
 800c004:	b913      	cbnz	r3, 800c00c <_printf_float+0x1a0>
 800c006:	6822      	ldr	r2, [r4, #0]
 800c008:	07d0      	lsls	r0, r2, #31
 800c00a:	d502      	bpl.n	800c012 <_printf_float+0x1a6>
 800c00c:	3301      	adds	r3, #1
 800c00e:	440b      	add	r3, r1
 800c010:	6123      	str	r3, [r4, #16]
 800c012:	65a1      	str	r1, [r4, #88]	; 0x58
 800c014:	f04f 0900 	mov.w	r9, #0
 800c018:	e7de      	b.n	800bfd8 <_printf_float+0x16c>
 800c01a:	b913      	cbnz	r3, 800c022 <_printf_float+0x1b6>
 800c01c:	6822      	ldr	r2, [r4, #0]
 800c01e:	07d2      	lsls	r2, r2, #31
 800c020:	d501      	bpl.n	800c026 <_printf_float+0x1ba>
 800c022:	3302      	adds	r3, #2
 800c024:	e7f4      	b.n	800c010 <_printf_float+0x1a4>
 800c026:	2301      	movs	r3, #1
 800c028:	e7f2      	b.n	800c010 <_printf_float+0x1a4>
 800c02a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c030:	4299      	cmp	r1, r3
 800c032:	db05      	blt.n	800c040 <_printf_float+0x1d4>
 800c034:	6823      	ldr	r3, [r4, #0]
 800c036:	6121      	str	r1, [r4, #16]
 800c038:	07d8      	lsls	r0, r3, #31
 800c03a:	d5ea      	bpl.n	800c012 <_printf_float+0x1a6>
 800c03c:	1c4b      	adds	r3, r1, #1
 800c03e:	e7e7      	b.n	800c010 <_printf_float+0x1a4>
 800c040:	2900      	cmp	r1, #0
 800c042:	bfd4      	ite	le
 800c044:	f1c1 0202 	rsble	r2, r1, #2
 800c048:	2201      	movgt	r2, #1
 800c04a:	4413      	add	r3, r2
 800c04c:	e7e0      	b.n	800c010 <_printf_float+0x1a4>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	055a      	lsls	r2, r3, #21
 800c052:	d407      	bmi.n	800c064 <_printf_float+0x1f8>
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	4642      	mov	r2, r8
 800c058:	4631      	mov	r1, r6
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b8      	blx	r7
 800c05e:	3001      	adds	r0, #1
 800c060:	d12c      	bne.n	800c0bc <_printf_float+0x250>
 800c062:	e764      	b.n	800bf2e <_printf_float+0xc2>
 800c064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c068:	f240 80e0 	bls.w	800c22c <_printf_float+0x3c0>
 800c06c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c070:	2200      	movs	r2, #0
 800c072:	2300      	movs	r3, #0
 800c074:	f7f4 fd58 	bl	8000b28 <__aeabi_dcmpeq>
 800c078:	2800      	cmp	r0, #0
 800c07a:	d034      	beq.n	800c0e6 <_printf_float+0x27a>
 800c07c:	4a37      	ldr	r2, [pc, #220]	; (800c15c <_printf_float+0x2f0>)
 800c07e:	2301      	movs	r3, #1
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af51 	beq.w	800bf2e <_printf_float+0xc2>
 800c08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c090:	429a      	cmp	r2, r3
 800c092:	db02      	blt.n	800c09a <_printf_float+0x22e>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	07d8      	lsls	r0, r3, #31
 800c098:	d510      	bpl.n	800c0bc <_printf_float+0x250>
 800c09a:	ee18 3a10 	vmov	r3, s16
 800c09e:	4652      	mov	r2, sl
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af41 	beq.w	800bf2e <_printf_float+0xc2>
 800c0ac:	f04f 0800 	mov.w	r8, #0
 800c0b0:	f104 091a 	add.w	r9, r4, #26
 800c0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	4543      	cmp	r3, r8
 800c0ba:	dc09      	bgt.n	800c0d0 <_printf_float+0x264>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	079b      	lsls	r3, r3, #30
 800c0c0:	f100 8105 	bmi.w	800c2ce <_printf_float+0x462>
 800c0c4:	68e0      	ldr	r0, [r4, #12]
 800c0c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0c8:	4298      	cmp	r0, r3
 800c0ca:	bfb8      	it	lt
 800c0cc:	4618      	movlt	r0, r3
 800c0ce:	e730      	b.n	800bf32 <_printf_float+0xc6>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	464a      	mov	r2, r9
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	f43f af27 	beq.w	800bf2e <_printf_float+0xc2>
 800c0e0:	f108 0801 	add.w	r8, r8, #1
 800c0e4:	e7e6      	b.n	800c0b4 <_printf_float+0x248>
 800c0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	dc39      	bgt.n	800c160 <_printf_float+0x2f4>
 800c0ec:	4a1b      	ldr	r2, [pc, #108]	; (800c15c <_printf_float+0x2f0>)
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f af19 	beq.w	800bf2e <_printf_float+0xc2>
 800c0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c100:	4313      	orrs	r3, r2
 800c102:	d102      	bne.n	800c10a <_printf_float+0x29e>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	07d9      	lsls	r1, r3, #31
 800c108:	d5d8      	bpl.n	800c0bc <_printf_float+0x250>
 800c10a:	ee18 3a10 	vmov	r3, s16
 800c10e:	4652      	mov	r2, sl
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	47b8      	blx	r7
 800c116:	3001      	adds	r0, #1
 800c118:	f43f af09 	beq.w	800bf2e <_printf_float+0xc2>
 800c11c:	f04f 0900 	mov.w	r9, #0
 800c120:	f104 0a1a 	add.w	sl, r4, #26
 800c124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c126:	425b      	negs	r3, r3
 800c128:	454b      	cmp	r3, r9
 800c12a:	dc01      	bgt.n	800c130 <_printf_float+0x2c4>
 800c12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c12e:	e792      	b.n	800c056 <_printf_float+0x1ea>
 800c130:	2301      	movs	r3, #1
 800c132:	4652      	mov	r2, sl
 800c134:	4631      	mov	r1, r6
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	f43f aef7 	beq.w	800bf2e <_printf_float+0xc2>
 800c140:	f109 0901 	add.w	r9, r9, #1
 800c144:	e7ee      	b.n	800c124 <_printf_float+0x2b8>
 800c146:	bf00      	nop
 800c148:	7fefffff 	.word	0x7fefffff
 800c14c:	08011d84 	.word	0x08011d84
 800c150:	08011d88 	.word	0x08011d88
 800c154:	08011d90 	.word	0x08011d90
 800c158:	08011d8c 	.word	0x08011d8c
 800c15c:	08011d94 	.word	0x08011d94
 800c160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c164:	429a      	cmp	r2, r3
 800c166:	bfa8      	it	ge
 800c168:	461a      	movge	r2, r3
 800c16a:	2a00      	cmp	r2, #0
 800c16c:	4691      	mov	r9, r2
 800c16e:	dc37      	bgt.n	800c1e0 <_printf_float+0x374>
 800c170:	f04f 0b00 	mov.w	fp, #0
 800c174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c178:	f104 021a 	add.w	r2, r4, #26
 800c17c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c17e:	9305      	str	r3, [sp, #20]
 800c180:	eba3 0309 	sub.w	r3, r3, r9
 800c184:	455b      	cmp	r3, fp
 800c186:	dc33      	bgt.n	800c1f0 <_printf_float+0x384>
 800c188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c18c:	429a      	cmp	r2, r3
 800c18e:	db3b      	blt.n	800c208 <_printf_float+0x39c>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	07da      	lsls	r2, r3, #31
 800c194:	d438      	bmi.n	800c208 <_printf_float+0x39c>
 800c196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c198:	9b05      	ldr	r3, [sp, #20]
 800c19a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	eba2 0901 	sub.w	r9, r2, r1
 800c1a2:	4599      	cmp	r9, r3
 800c1a4:	bfa8      	it	ge
 800c1a6:	4699      	movge	r9, r3
 800c1a8:	f1b9 0f00 	cmp.w	r9, #0
 800c1ac:	dc35      	bgt.n	800c21a <_printf_float+0x3ae>
 800c1ae:	f04f 0800 	mov.w	r8, #0
 800c1b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1b6:	f104 0a1a 	add.w	sl, r4, #26
 800c1ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	eba3 0309 	sub.w	r3, r3, r9
 800c1c4:	4543      	cmp	r3, r8
 800c1c6:	f77f af79 	ble.w	800c0bc <_printf_float+0x250>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	4652      	mov	r2, sl
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	47b8      	blx	r7
 800c1d4:	3001      	adds	r0, #1
 800c1d6:	f43f aeaa 	beq.w	800bf2e <_printf_float+0xc2>
 800c1da:	f108 0801 	add.w	r8, r8, #1
 800c1de:	e7ec      	b.n	800c1ba <_printf_float+0x34e>
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4642      	mov	r2, r8
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	47b8      	blx	r7
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	d1c0      	bne.n	800c170 <_printf_float+0x304>
 800c1ee:	e69e      	b.n	800bf2e <_printf_float+0xc2>
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	4631      	mov	r1, r6
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	9205      	str	r2, [sp, #20]
 800c1f8:	47b8      	blx	r7
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f43f ae97 	beq.w	800bf2e <_printf_float+0xc2>
 800c200:	9a05      	ldr	r2, [sp, #20]
 800c202:	f10b 0b01 	add.w	fp, fp, #1
 800c206:	e7b9      	b.n	800c17c <_printf_float+0x310>
 800c208:	ee18 3a10 	vmov	r3, s16
 800c20c:	4652      	mov	r2, sl
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	d1be      	bne.n	800c196 <_printf_float+0x32a>
 800c218:	e689      	b.n	800bf2e <_printf_float+0xc2>
 800c21a:	9a05      	ldr	r2, [sp, #20]
 800c21c:	464b      	mov	r3, r9
 800c21e:	4442      	add	r2, r8
 800c220:	4631      	mov	r1, r6
 800c222:	4628      	mov	r0, r5
 800c224:	47b8      	blx	r7
 800c226:	3001      	adds	r0, #1
 800c228:	d1c1      	bne.n	800c1ae <_printf_float+0x342>
 800c22a:	e680      	b.n	800bf2e <_printf_float+0xc2>
 800c22c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c22e:	2a01      	cmp	r2, #1
 800c230:	dc01      	bgt.n	800c236 <_printf_float+0x3ca>
 800c232:	07db      	lsls	r3, r3, #31
 800c234:	d538      	bpl.n	800c2a8 <_printf_float+0x43c>
 800c236:	2301      	movs	r3, #1
 800c238:	4642      	mov	r2, r8
 800c23a:	4631      	mov	r1, r6
 800c23c:	4628      	mov	r0, r5
 800c23e:	47b8      	blx	r7
 800c240:	3001      	adds	r0, #1
 800c242:	f43f ae74 	beq.w	800bf2e <_printf_float+0xc2>
 800c246:	ee18 3a10 	vmov	r3, s16
 800c24a:	4652      	mov	r2, sl
 800c24c:	4631      	mov	r1, r6
 800c24e:	4628      	mov	r0, r5
 800c250:	47b8      	blx	r7
 800c252:	3001      	adds	r0, #1
 800c254:	f43f ae6b 	beq.w	800bf2e <_printf_float+0xc2>
 800c258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c25c:	2200      	movs	r2, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	f7f4 fc62 	bl	8000b28 <__aeabi_dcmpeq>
 800c264:	b9d8      	cbnz	r0, 800c29e <_printf_float+0x432>
 800c266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c268:	f108 0201 	add.w	r2, r8, #1
 800c26c:	3b01      	subs	r3, #1
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	47b8      	blx	r7
 800c274:	3001      	adds	r0, #1
 800c276:	d10e      	bne.n	800c296 <_printf_float+0x42a>
 800c278:	e659      	b.n	800bf2e <_printf_float+0xc2>
 800c27a:	2301      	movs	r3, #1
 800c27c:	4652      	mov	r2, sl
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	47b8      	blx	r7
 800c284:	3001      	adds	r0, #1
 800c286:	f43f ae52 	beq.w	800bf2e <_printf_float+0xc2>
 800c28a:	f108 0801 	add.w	r8, r8, #1
 800c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c290:	3b01      	subs	r3, #1
 800c292:	4543      	cmp	r3, r8
 800c294:	dcf1      	bgt.n	800c27a <_printf_float+0x40e>
 800c296:	464b      	mov	r3, r9
 800c298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c29c:	e6dc      	b.n	800c058 <_printf_float+0x1ec>
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	f104 0a1a 	add.w	sl, r4, #26
 800c2a6:	e7f2      	b.n	800c28e <_printf_float+0x422>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	e7df      	b.n	800c26e <_printf_float+0x402>
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	464a      	mov	r2, r9
 800c2b2:	4631      	mov	r1, r6
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	47b8      	blx	r7
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	f43f ae38 	beq.w	800bf2e <_printf_float+0xc2>
 800c2be:	f108 0801 	add.w	r8, r8, #1
 800c2c2:	68e3      	ldr	r3, [r4, #12]
 800c2c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2c6:	1a5b      	subs	r3, r3, r1
 800c2c8:	4543      	cmp	r3, r8
 800c2ca:	dcf0      	bgt.n	800c2ae <_printf_float+0x442>
 800c2cc:	e6fa      	b.n	800c0c4 <_printf_float+0x258>
 800c2ce:	f04f 0800 	mov.w	r8, #0
 800c2d2:	f104 0919 	add.w	r9, r4, #25
 800c2d6:	e7f4      	b.n	800c2c2 <_printf_float+0x456>

0800c2d8 <_printf_common>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	4616      	mov	r6, r2
 800c2de:	4699      	mov	r9, r3
 800c2e0:	688a      	ldr	r2, [r1, #8]
 800c2e2:	690b      	ldr	r3, [r1, #16]
 800c2e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	bfb8      	it	lt
 800c2ec:	4613      	movlt	r3, r2
 800c2ee:	6033      	str	r3, [r6, #0]
 800c2f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	b10a      	cbz	r2, 800c2fe <_printf_common+0x26>
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	6033      	str	r3, [r6, #0]
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	0699      	lsls	r1, r3, #26
 800c302:	bf42      	ittt	mi
 800c304:	6833      	ldrmi	r3, [r6, #0]
 800c306:	3302      	addmi	r3, #2
 800c308:	6033      	strmi	r3, [r6, #0]
 800c30a:	6825      	ldr	r5, [r4, #0]
 800c30c:	f015 0506 	ands.w	r5, r5, #6
 800c310:	d106      	bne.n	800c320 <_printf_common+0x48>
 800c312:	f104 0a19 	add.w	sl, r4, #25
 800c316:	68e3      	ldr	r3, [r4, #12]
 800c318:	6832      	ldr	r2, [r6, #0]
 800c31a:	1a9b      	subs	r3, r3, r2
 800c31c:	42ab      	cmp	r3, r5
 800c31e:	dc26      	bgt.n	800c36e <_printf_common+0x96>
 800c320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c324:	1e13      	subs	r3, r2, #0
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	bf18      	it	ne
 800c32a:	2301      	movne	r3, #1
 800c32c:	0692      	lsls	r2, r2, #26
 800c32e:	d42b      	bmi.n	800c388 <_printf_common+0xb0>
 800c330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c334:	4649      	mov	r1, r9
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	3001      	adds	r0, #1
 800c33c:	d01e      	beq.n	800c37c <_printf_common+0xa4>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	68e5      	ldr	r5, [r4, #12]
 800c342:	6832      	ldr	r2, [r6, #0]
 800c344:	f003 0306 	and.w	r3, r3, #6
 800c348:	2b04      	cmp	r3, #4
 800c34a:	bf08      	it	eq
 800c34c:	1aad      	subeq	r5, r5, r2
 800c34e:	68a3      	ldr	r3, [r4, #8]
 800c350:	6922      	ldr	r2, [r4, #16]
 800c352:	bf0c      	ite	eq
 800c354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c358:	2500      	movne	r5, #0
 800c35a:	4293      	cmp	r3, r2
 800c35c:	bfc4      	itt	gt
 800c35e:	1a9b      	subgt	r3, r3, r2
 800c360:	18ed      	addgt	r5, r5, r3
 800c362:	2600      	movs	r6, #0
 800c364:	341a      	adds	r4, #26
 800c366:	42b5      	cmp	r5, r6
 800c368:	d11a      	bne.n	800c3a0 <_printf_common+0xc8>
 800c36a:	2000      	movs	r0, #0
 800c36c:	e008      	b.n	800c380 <_printf_common+0xa8>
 800c36e:	2301      	movs	r3, #1
 800c370:	4652      	mov	r2, sl
 800c372:	4649      	mov	r1, r9
 800c374:	4638      	mov	r0, r7
 800c376:	47c0      	blx	r8
 800c378:	3001      	adds	r0, #1
 800c37a:	d103      	bne.n	800c384 <_printf_common+0xac>
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c384:	3501      	adds	r5, #1
 800c386:	e7c6      	b.n	800c316 <_printf_common+0x3e>
 800c388:	18e1      	adds	r1, r4, r3
 800c38a:	1c5a      	adds	r2, r3, #1
 800c38c:	2030      	movs	r0, #48	; 0x30
 800c38e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c392:	4422      	add	r2, r4
 800c394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c39c:	3302      	adds	r3, #2
 800c39e:	e7c7      	b.n	800c330 <_printf_common+0x58>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4622      	mov	r2, r4
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d0e6      	beq.n	800c37c <_printf_common+0xa4>
 800c3ae:	3601      	adds	r6, #1
 800c3b0:	e7d9      	b.n	800c366 <_printf_common+0x8e>
	...

0800c3b4 <_printf_i>:
 800c3b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b8:	460c      	mov	r4, r1
 800c3ba:	4691      	mov	r9, r2
 800c3bc:	7e27      	ldrb	r7, [r4, #24]
 800c3be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c3c0:	2f78      	cmp	r7, #120	; 0x78
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	469a      	mov	sl, r3
 800c3c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3ca:	d807      	bhi.n	800c3dc <_printf_i+0x28>
 800c3cc:	2f62      	cmp	r7, #98	; 0x62
 800c3ce:	d80a      	bhi.n	800c3e6 <_printf_i+0x32>
 800c3d0:	2f00      	cmp	r7, #0
 800c3d2:	f000 80d8 	beq.w	800c586 <_printf_i+0x1d2>
 800c3d6:	2f58      	cmp	r7, #88	; 0x58
 800c3d8:	f000 80a3 	beq.w	800c522 <_printf_i+0x16e>
 800c3dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c3e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3e4:	e03a      	b.n	800c45c <_printf_i+0xa8>
 800c3e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3ea:	2b15      	cmp	r3, #21
 800c3ec:	d8f6      	bhi.n	800c3dc <_printf_i+0x28>
 800c3ee:	a001      	add	r0, pc, #4	; (adr r0, 800c3f4 <_printf_i+0x40>)
 800c3f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c3f4:	0800c44d 	.word	0x0800c44d
 800c3f8:	0800c461 	.word	0x0800c461
 800c3fc:	0800c3dd 	.word	0x0800c3dd
 800c400:	0800c3dd 	.word	0x0800c3dd
 800c404:	0800c3dd 	.word	0x0800c3dd
 800c408:	0800c3dd 	.word	0x0800c3dd
 800c40c:	0800c461 	.word	0x0800c461
 800c410:	0800c3dd 	.word	0x0800c3dd
 800c414:	0800c3dd 	.word	0x0800c3dd
 800c418:	0800c3dd 	.word	0x0800c3dd
 800c41c:	0800c3dd 	.word	0x0800c3dd
 800c420:	0800c56d 	.word	0x0800c56d
 800c424:	0800c491 	.word	0x0800c491
 800c428:	0800c54f 	.word	0x0800c54f
 800c42c:	0800c3dd 	.word	0x0800c3dd
 800c430:	0800c3dd 	.word	0x0800c3dd
 800c434:	0800c58f 	.word	0x0800c58f
 800c438:	0800c3dd 	.word	0x0800c3dd
 800c43c:	0800c491 	.word	0x0800c491
 800c440:	0800c3dd 	.word	0x0800c3dd
 800c444:	0800c3dd 	.word	0x0800c3dd
 800c448:	0800c557 	.word	0x0800c557
 800c44c:	680b      	ldr	r3, [r1, #0]
 800c44e:	1d1a      	adds	r2, r3, #4
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	600a      	str	r2, [r1, #0]
 800c454:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c45c:	2301      	movs	r3, #1
 800c45e:	e0a3      	b.n	800c5a8 <_printf_i+0x1f4>
 800c460:	6825      	ldr	r5, [r4, #0]
 800c462:	6808      	ldr	r0, [r1, #0]
 800c464:	062e      	lsls	r6, r5, #24
 800c466:	f100 0304 	add.w	r3, r0, #4
 800c46a:	d50a      	bpl.n	800c482 <_printf_i+0xce>
 800c46c:	6805      	ldr	r5, [r0, #0]
 800c46e:	600b      	str	r3, [r1, #0]
 800c470:	2d00      	cmp	r5, #0
 800c472:	da03      	bge.n	800c47c <_printf_i+0xc8>
 800c474:	232d      	movs	r3, #45	; 0x2d
 800c476:	426d      	negs	r5, r5
 800c478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c47c:	485e      	ldr	r0, [pc, #376]	; (800c5f8 <_printf_i+0x244>)
 800c47e:	230a      	movs	r3, #10
 800c480:	e019      	b.n	800c4b6 <_printf_i+0x102>
 800c482:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c486:	6805      	ldr	r5, [r0, #0]
 800c488:	600b      	str	r3, [r1, #0]
 800c48a:	bf18      	it	ne
 800c48c:	b22d      	sxthne	r5, r5
 800c48e:	e7ef      	b.n	800c470 <_printf_i+0xbc>
 800c490:	680b      	ldr	r3, [r1, #0]
 800c492:	6825      	ldr	r5, [r4, #0]
 800c494:	1d18      	adds	r0, r3, #4
 800c496:	6008      	str	r0, [r1, #0]
 800c498:	0628      	lsls	r0, r5, #24
 800c49a:	d501      	bpl.n	800c4a0 <_printf_i+0xec>
 800c49c:	681d      	ldr	r5, [r3, #0]
 800c49e:	e002      	b.n	800c4a6 <_printf_i+0xf2>
 800c4a0:	0669      	lsls	r1, r5, #25
 800c4a2:	d5fb      	bpl.n	800c49c <_printf_i+0xe8>
 800c4a4:	881d      	ldrh	r5, [r3, #0]
 800c4a6:	4854      	ldr	r0, [pc, #336]	; (800c5f8 <_printf_i+0x244>)
 800c4a8:	2f6f      	cmp	r7, #111	; 0x6f
 800c4aa:	bf0c      	ite	eq
 800c4ac:	2308      	moveq	r3, #8
 800c4ae:	230a      	movne	r3, #10
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4b6:	6866      	ldr	r6, [r4, #4]
 800c4b8:	60a6      	str	r6, [r4, #8]
 800c4ba:	2e00      	cmp	r6, #0
 800c4bc:	bfa2      	ittt	ge
 800c4be:	6821      	ldrge	r1, [r4, #0]
 800c4c0:	f021 0104 	bicge.w	r1, r1, #4
 800c4c4:	6021      	strge	r1, [r4, #0]
 800c4c6:	b90d      	cbnz	r5, 800c4cc <_printf_i+0x118>
 800c4c8:	2e00      	cmp	r6, #0
 800c4ca:	d04d      	beq.n	800c568 <_printf_i+0x1b4>
 800c4cc:	4616      	mov	r6, r2
 800c4ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4d2:	fb03 5711 	mls	r7, r3, r1, r5
 800c4d6:	5dc7      	ldrb	r7, [r0, r7]
 800c4d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4dc:	462f      	mov	r7, r5
 800c4de:	42bb      	cmp	r3, r7
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	d9f4      	bls.n	800c4ce <_printf_i+0x11a>
 800c4e4:	2b08      	cmp	r3, #8
 800c4e6:	d10b      	bne.n	800c500 <_printf_i+0x14c>
 800c4e8:	6823      	ldr	r3, [r4, #0]
 800c4ea:	07df      	lsls	r7, r3, #31
 800c4ec:	d508      	bpl.n	800c500 <_printf_i+0x14c>
 800c4ee:	6923      	ldr	r3, [r4, #16]
 800c4f0:	6861      	ldr	r1, [r4, #4]
 800c4f2:	4299      	cmp	r1, r3
 800c4f4:	bfde      	ittt	le
 800c4f6:	2330      	movle	r3, #48	; 0x30
 800c4f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c500:	1b92      	subs	r2, r2, r6
 800c502:	6122      	str	r2, [r4, #16]
 800c504:	f8cd a000 	str.w	sl, [sp]
 800c508:	464b      	mov	r3, r9
 800c50a:	aa03      	add	r2, sp, #12
 800c50c:	4621      	mov	r1, r4
 800c50e:	4640      	mov	r0, r8
 800c510:	f7ff fee2 	bl	800c2d8 <_printf_common>
 800c514:	3001      	adds	r0, #1
 800c516:	d14c      	bne.n	800c5b2 <_printf_i+0x1fe>
 800c518:	f04f 30ff 	mov.w	r0, #4294967295
 800c51c:	b004      	add	sp, #16
 800c51e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c522:	4835      	ldr	r0, [pc, #212]	; (800c5f8 <_printf_i+0x244>)
 800c524:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c528:	6823      	ldr	r3, [r4, #0]
 800c52a:	680e      	ldr	r6, [r1, #0]
 800c52c:	061f      	lsls	r7, r3, #24
 800c52e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c532:	600e      	str	r6, [r1, #0]
 800c534:	d514      	bpl.n	800c560 <_printf_i+0x1ac>
 800c536:	07d9      	lsls	r1, r3, #31
 800c538:	bf44      	itt	mi
 800c53a:	f043 0320 	orrmi.w	r3, r3, #32
 800c53e:	6023      	strmi	r3, [r4, #0]
 800c540:	b91d      	cbnz	r5, 800c54a <_printf_i+0x196>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	f023 0320 	bic.w	r3, r3, #32
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2310      	movs	r3, #16
 800c54c:	e7b0      	b.n	800c4b0 <_printf_i+0xfc>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	f043 0320 	orr.w	r3, r3, #32
 800c554:	6023      	str	r3, [r4, #0]
 800c556:	2378      	movs	r3, #120	; 0x78
 800c558:	4828      	ldr	r0, [pc, #160]	; (800c5fc <_printf_i+0x248>)
 800c55a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c55e:	e7e3      	b.n	800c528 <_printf_i+0x174>
 800c560:	065e      	lsls	r6, r3, #25
 800c562:	bf48      	it	mi
 800c564:	b2ad      	uxthmi	r5, r5
 800c566:	e7e6      	b.n	800c536 <_printf_i+0x182>
 800c568:	4616      	mov	r6, r2
 800c56a:	e7bb      	b.n	800c4e4 <_printf_i+0x130>
 800c56c:	680b      	ldr	r3, [r1, #0]
 800c56e:	6826      	ldr	r6, [r4, #0]
 800c570:	6960      	ldr	r0, [r4, #20]
 800c572:	1d1d      	adds	r5, r3, #4
 800c574:	600d      	str	r5, [r1, #0]
 800c576:	0635      	lsls	r5, r6, #24
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	d501      	bpl.n	800c580 <_printf_i+0x1cc>
 800c57c:	6018      	str	r0, [r3, #0]
 800c57e:	e002      	b.n	800c586 <_printf_i+0x1d2>
 800c580:	0671      	lsls	r1, r6, #25
 800c582:	d5fb      	bpl.n	800c57c <_printf_i+0x1c8>
 800c584:	8018      	strh	r0, [r3, #0]
 800c586:	2300      	movs	r3, #0
 800c588:	6123      	str	r3, [r4, #16]
 800c58a:	4616      	mov	r6, r2
 800c58c:	e7ba      	b.n	800c504 <_printf_i+0x150>
 800c58e:	680b      	ldr	r3, [r1, #0]
 800c590:	1d1a      	adds	r2, r3, #4
 800c592:	600a      	str	r2, [r1, #0]
 800c594:	681e      	ldr	r6, [r3, #0]
 800c596:	6862      	ldr	r2, [r4, #4]
 800c598:	2100      	movs	r1, #0
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7f3 fe50 	bl	8000240 <memchr>
 800c5a0:	b108      	cbz	r0, 800c5a6 <_printf_i+0x1f2>
 800c5a2:	1b80      	subs	r0, r0, r6
 800c5a4:	6060      	str	r0, [r4, #4]
 800c5a6:	6863      	ldr	r3, [r4, #4]
 800c5a8:	6123      	str	r3, [r4, #16]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5b0:	e7a8      	b.n	800c504 <_printf_i+0x150>
 800c5b2:	6923      	ldr	r3, [r4, #16]
 800c5b4:	4632      	mov	r2, r6
 800c5b6:	4649      	mov	r1, r9
 800c5b8:	4640      	mov	r0, r8
 800c5ba:	47d0      	blx	sl
 800c5bc:	3001      	adds	r0, #1
 800c5be:	d0ab      	beq.n	800c518 <_printf_i+0x164>
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	079b      	lsls	r3, r3, #30
 800c5c4:	d413      	bmi.n	800c5ee <_printf_i+0x23a>
 800c5c6:	68e0      	ldr	r0, [r4, #12]
 800c5c8:	9b03      	ldr	r3, [sp, #12]
 800c5ca:	4298      	cmp	r0, r3
 800c5cc:	bfb8      	it	lt
 800c5ce:	4618      	movlt	r0, r3
 800c5d0:	e7a4      	b.n	800c51c <_printf_i+0x168>
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	4640      	mov	r0, r8
 800c5da:	47d0      	blx	sl
 800c5dc:	3001      	adds	r0, #1
 800c5de:	d09b      	beq.n	800c518 <_printf_i+0x164>
 800c5e0:	3501      	adds	r5, #1
 800c5e2:	68e3      	ldr	r3, [r4, #12]
 800c5e4:	9903      	ldr	r1, [sp, #12]
 800c5e6:	1a5b      	subs	r3, r3, r1
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	dcf2      	bgt.n	800c5d2 <_printf_i+0x21e>
 800c5ec:	e7eb      	b.n	800c5c6 <_printf_i+0x212>
 800c5ee:	2500      	movs	r5, #0
 800c5f0:	f104 0619 	add.w	r6, r4, #25
 800c5f4:	e7f5      	b.n	800c5e2 <_printf_i+0x22e>
 800c5f6:	bf00      	nop
 800c5f8:	08011d96 	.word	0x08011d96
 800c5fc:	08011da7 	.word	0x08011da7

0800c600 <iprintf>:
 800c600:	b40f      	push	{r0, r1, r2, r3}
 800c602:	4b0a      	ldr	r3, [pc, #40]	; (800c62c <iprintf+0x2c>)
 800c604:	b513      	push	{r0, r1, r4, lr}
 800c606:	681c      	ldr	r4, [r3, #0]
 800c608:	b124      	cbz	r4, 800c614 <iprintf+0x14>
 800c60a:	69a3      	ldr	r3, [r4, #24]
 800c60c:	b913      	cbnz	r3, 800c614 <iprintf+0x14>
 800c60e:	4620      	mov	r0, r4
 800c610:	f002 f82e 	bl	800e670 <__sinit>
 800c614:	ab05      	add	r3, sp, #20
 800c616:	9a04      	ldr	r2, [sp, #16]
 800c618:	68a1      	ldr	r1, [r4, #8]
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	4620      	mov	r0, r4
 800c61e:	f003 fad5 	bl	800fbcc <_vfiprintf_r>
 800c622:	b002      	add	sp, #8
 800c624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c628:	b004      	add	sp, #16
 800c62a:	4770      	bx	lr
 800c62c:	20000028 	.word	0x20000028

0800c630 <_puts_r>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	460e      	mov	r6, r1
 800c634:	4605      	mov	r5, r0
 800c636:	b118      	cbz	r0, 800c640 <_puts_r+0x10>
 800c638:	6983      	ldr	r3, [r0, #24]
 800c63a:	b90b      	cbnz	r3, 800c640 <_puts_r+0x10>
 800c63c:	f002 f818 	bl	800e670 <__sinit>
 800c640:	69ab      	ldr	r3, [r5, #24]
 800c642:	68ac      	ldr	r4, [r5, #8]
 800c644:	b913      	cbnz	r3, 800c64c <_puts_r+0x1c>
 800c646:	4628      	mov	r0, r5
 800c648:	f002 f812 	bl	800e670 <__sinit>
 800c64c:	4b2c      	ldr	r3, [pc, #176]	; (800c700 <_puts_r+0xd0>)
 800c64e:	429c      	cmp	r4, r3
 800c650:	d120      	bne.n	800c694 <_puts_r+0x64>
 800c652:	686c      	ldr	r4, [r5, #4]
 800c654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c656:	07db      	lsls	r3, r3, #31
 800c658:	d405      	bmi.n	800c666 <_puts_r+0x36>
 800c65a:	89a3      	ldrh	r3, [r4, #12]
 800c65c:	0598      	lsls	r0, r3, #22
 800c65e:	d402      	bmi.n	800c666 <_puts_r+0x36>
 800c660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c662:	f002 fc86 	bl	800ef72 <__retarget_lock_acquire_recursive>
 800c666:	89a3      	ldrh	r3, [r4, #12]
 800c668:	0719      	lsls	r1, r3, #28
 800c66a:	d51d      	bpl.n	800c6a8 <_puts_r+0x78>
 800c66c:	6923      	ldr	r3, [r4, #16]
 800c66e:	b1db      	cbz	r3, 800c6a8 <_puts_r+0x78>
 800c670:	3e01      	subs	r6, #1
 800c672:	68a3      	ldr	r3, [r4, #8]
 800c674:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c678:	3b01      	subs	r3, #1
 800c67a:	60a3      	str	r3, [r4, #8]
 800c67c:	bb39      	cbnz	r1, 800c6ce <_puts_r+0x9e>
 800c67e:	2b00      	cmp	r3, #0
 800c680:	da38      	bge.n	800c6f4 <_puts_r+0xc4>
 800c682:	4622      	mov	r2, r4
 800c684:	210a      	movs	r1, #10
 800c686:	4628      	mov	r0, r5
 800c688:	f000 ff6e 	bl	800d568 <__swbuf_r>
 800c68c:	3001      	adds	r0, #1
 800c68e:	d011      	beq.n	800c6b4 <_puts_r+0x84>
 800c690:	250a      	movs	r5, #10
 800c692:	e011      	b.n	800c6b8 <_puts_r+0x88>
 800c694:	4b1b      	ldr	r3, [pc, #108]	; (800c704 <_puts_r+0xd4>)
 800c696:	429c      	cmp	r4, r3
 800c698:	d101      	bne.n	800c69e <_puts_r+0x6e>
 800c69a:	68ac      	ldr	r4, [r5, #8]
 800c69c:	e7da      	b.n	800c654 <_puts_r+0x24>
 800c69e:	4b1a      	ldr	r3, [pc, #104]	; (800c708 <_puts_r+0xd8>)
 800c6a0:	429c      	cmp	r4, r3
 800c6a2:	bf08      	it	eq
 800c6a4:	68ec      	ldreq	r4, [r5, #12]
 800c6a6:	e7d5      	b.n	800c654 <_puts_r+0x24>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	f000 ffae 	bl	800d60c <__swsetup_r>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d0dd      	beq.n	800c670 <_puts_r+0x40>
 800c6b4:	f04f 35ff 	mov.w	r5, #4294967295
 800c6b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6ba:	07da      	lsls	r2, r3, #31
 800c6bc:	d405      	bmi.n	800c6ca <_puts_r+0x9a>
 800c6be:	89a3      	ldrh	r3, [r4, #12]
 800c6c0:	059b      	lsls	r3, r3, #22
 800c6c2:	d402      	bmi.n	800c6ca <_puts_r+0x9a>
 800c6c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6c6:	f002 fc55 	bl	800ef74 <__retarget_lock_release_recursive>
 800c6ca:	4628      	mov	r0, r5
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	da04      	bge.n	800c6dc <_puts_r+0xac>
 800c6d2:	69a2      	ldr	r2, [r4, #24]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	dc06      	bgt.n	800c6e6 <_puts_r+0xb6>
 800c6d8:	290a      	cmp	r1, #10
 800c6da:	d004      	beq.n	800c6e6 <_puts_r+0xb6>
 800c6dc:	6823      	ldr	r3, [r4, #0]
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	6022      	str	r2, [r4, #0]
 800c6e2:	7019      	strb	r1, [r3, #0]
 800c6e4:	e7c5      	b.n	800c672 <_puts_r+0x42>
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 ff3d 	bl	800d568 <__swbuf_r>
 800c6ee:	3001      	adds	r0, #1
 800c6f0:	d1bf      	bne.n	800c672 <_puts_r+0x42>
 800c6f2:	e7df      	b.n	800c6b4 <_puts_r+0x84>
 800c6f4:	6823      	ldr	r3, [r4, #0]
 800c6f6:	250a      	movs	r5, #10
 800c6f8:	1c5a      	adds	r2, r3, #1
 800c6fa:	6022      	str	r2, [r4, #0]
 800c6fc:	701d      	strb	r5, [r3, #0]
 800c6fe:	e7db      	b.n	800c6b8 <_puts_r+0x88>
 800c700:	0801205c 	.word	0x0801205c
 800c704:	0801207c 	.word	0x0801207c
 800c708:	0801203c 	.word	0x0801203c

0800c70c <puts>:
 800c70c:	4b02      	ldr	r3, [pc, #8]	; (800c718 <puts+0xc>)
 800c70e:	4601      	mov	r1, r0
 800c710:	6818      	ldr	r0, [r3, #0]
 800c712:	f7ff bf8d 	b.w	800c630 <_puts_r>
 800c716:	bf00      	nop
 800c718:	20000028 	.word	0x20000028

0800c71c <strcpy>:
 800c71c:	4603      	mov	r3, r0
 800c71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c722:	f803 2b01 	strb.w	r2, [r3], #1
 800c726:	2a00      	cmp	r2, #0
 800c728:	d1f9      	bne.n	800c71e <strcpy+0x2>
 800c72a:	4770      	bx	lr

0800c72c <sulp>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	4604      	mov	r4, r0
 800c730:	460d      	mov	r5, r1
 800c732:	ec45 4b10 	vmov	d0, r4, r5
 800c736:	4616      	mov	r6, r2
 800c738:	f003 f816 	bl	800f768 <__ulp>
 800c73c:	ec51 0b10 	vmov	r0, r1, d0
 800c740:	b17e      	cbz	r6, 800c762 <sulp+0x36>
 800c742:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c746:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	dd09      	ble.n	800c762 <sulp+0x36>
 800c74e:	051b      	lsls	r3, r3, #20
 800c750:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c754:	2400      	movs	r4, #0
 800c756:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c75a:	4622      	mov	r2, r4
 800c75c:	462b      	mov	r3, r5
 800c75e:	f7f3 ff7b 	bl	8000658 <__aeabi_dmul>
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	0000      	movs	r0, r0
	...

0800c768 <_strtod_l>:
 800c768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c76c:	b0a3      	sub	sp, #140	; 0x8c
 800c76e:	461f      	mov	r7, r3
 800c770:	2300      	movs	r3, #0
 800c772:	931e      	str	r3, [sp, #120]	; 0x78
 800c774:	4ba4      	ldr	r3, [pc, #656]	; (800ca08 <_strtod_l+0x2a0>)
 800c776:	9219      	str	r2, [sp, #100]	; 0x64
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	9307      	str	r3, [sp, #28]
 800c77c:	4604      	mov	r4, r0
 800c77e:	4618      	mov	r0, r3
 800c780:	4688      	mov	r8, r1
 800c782:	f7f3 fd4f 	bl	8000224 <strlen>
 800c786:	f04f 0a00 	mov.w	sl, #0
 800c78a:	4605      	mov	r5, r0
 800c78c:	f04f 0b00 	mov.w	fp, #0
 800c790:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c794:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c796:	781a      	ldrb	r2, [r3, #0]
 800c798:	2a2b      	cmp	r2, #43	; 0x2b
 800c79a:	d04c      	beq.n	800c836 <_strtod_l+0xce>
 800c79c:	d839      	bhi.n	800c812 <_strtod_l+0xaa>
 800c79e:	2a0d      	cmp	r2, #13
 800c7a0:	d832      	bhi.n	800c808 <_strtod_l+0xa0>
 800c7a2:	2a08      	cmp	r2, #8
 800c7a4:	d832      	bhi.n	800c80c <_strtod_l+0xa4>
 800c7a6:	2a00      	cmp	r2, #0
 800c7a8:	d03c      	beq.n	800c824 <_strtod_l+0xbc>
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	930e      	str	r3, [sp, #56]	; 0x38
 800c7ae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c7b0:	7833      	ldrb	r3, [r6, #0]
 800c7b2:	2b30      	cmp	r3, #48	; 0x30
 800c7b4:	f040 80b4 	bne.w	800c920 <_strtod_l+0x1b8>
 800c7b8:	7873      	ldrb	r3, [r6, #1]
 800c7ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7be:	2b58      	cmp	r3, #88	; 0x58
 800c7c0:	d16c      	bne.n	800c89c <_strtod_l+0x134>
 800c7c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	ab1e      	add	r3, sp, #120	; 0x78
 800c7c8:	9702      	str	r7, [sp, #8]
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	4a8f      	ldr	r2, [pc, #572]	; (800ca0c <_strtod_l+0x2a4>)
 800c7ce:	ab1f      	add	r3, sp, #124	; 0x7c
 800c7d0:	a91d      	add	r1, sp, #116	; 0x74
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f002 f880 	bl	800e8d8 <__gethex>
 800c7d8:	f010 0707 	ands.w	r7, r0, #7
 800c7dc:	4605      	mov	r5, r0
 800c7de:	d005      	beq.n	800c7ec <_strtod_l+0x84>
 800c7e0:	2f06      	cmp	r7, #6
 800c7e2:	d12a      	bne.n	800c83a <_strtod_l+0xd2>
 800c7e4:	3601      	adds	r6, #1
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	961d      	str	r6, [sp, #116]	; 0x74
 800c7ea:	930e      	str	r3, [sp, #56]	; 0x38
 800c7ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f040 8596 	bne.w	800d320 <_strtod_l+0xbb8>
 800c7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7f6:	b1db      	cbz	r3, 800c830 <_strtod_l+0xc8>
 800c7f8:	4652      	mov	r2, sl
 800c7fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7fe:	ec43 2b10 	vmov	d0, r2, r3
 800c802:	b023      	add	sp, #140	; 0x8c
 800c804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c808:	2a20      	cmp	r2, #32
 800c80a:	d1ce      	bne.n	800c7aa <_strtod_l+0x42>
 800c80c:	3301      	adds	r3, #1
 800c80e:	931d      	str	r3, [sp, #116]	; 0x74
 800c810:	e7c0      	b.n	800c794 <_strtod_l+0x2c>
 800c812:	2a2d      	cmp	r2, #45	; 0x2d
 800c814:	d1c9      	bne.n	800c7aa <_strtod_l+0x42>
 800c816:	2201      	movs	r2, #1
 800c818:	920e      	str	r2, [sp, #56]	; 0x38
 800c81a:	1c5a      	adds	r2, r3, #1
 800c81c:	921d      	str	r2, [sp, #116]	; 0x74
 800c81e:	785b      	ldrb	r3, [r3, #1]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1c4      	bne.n	800c7ae <_strtod_l+0x46>
 800c824:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c826:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f040 8576 	bne.w	800d31c <_strtod_l+0xbb4>
 800c830:	4652      	mov	r2, sl
 800c832:	465b      	mov	r3, fp
 800c834:	e7e3      	b.n	800c7fe <_strtod_l+0x96>
 800c836:	2200      	movs	r2, #0
 800c838:	e7ee      	b.n	800c818 <_strtod_l+0xb0>
 800c83a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c83c:	b13a      	cbz	r2, 800c84e <_strtod_l+0xe6>
 800c83e:	2135      	movs	r1, #53	; 0x35
 800c840:	a820      	add	r0, sp, #128	; 0x80
 800c842:	f003 f89c 	bl	800f97e <__copybits>
 800c846:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c848:	4620      	mov	r0, r4
 800c84a:	f002 fc61 	bl	800f110 <_Bfree>
 800c84e:	3f01      	subs	r7, #1
 800c850:	2f05      	cmp	r7, #5
 800c852:	d807      	bhi.n	800c864 <_strtod_l+0xfc>
 800c854:	e8df f007 	tbb	[pc, r7]
 800c858:	1d180b0e 	.word	0x1d180b0e
 800c85c:	030e      	.short	0x030e
 800c85e:	f04f 0b00 	mov.w	fp, #0
 800c862:	46da      	mov	sl, fp
 800c864:	0728      	lsls	r0, r5, #28
 800c866:	d5c1      	bpl.n	800c7ec <_strtod_l+0x84>
 800c868:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c86c:	e7be      	b.n	800c7ec <_strtod_l+0x84>
 800c86e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c872:	e7f7      	b.n	800c864 <_strtod_l+0xfc>
 800c874:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c878:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c87a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c87e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c882:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c886:	e7ed      	b.n	800c864 <_strtod_l+0xfc>
 800c888:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ca10 <_strtod_l+0x2a8>
 800c88c:	f04f 0a00 	mov.w	sl, #0
 800c890:	e7e8      	b.n	800c864 <_strtod_l+0xfc>
 800c892:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c896:	f04f 3aff 	mov.w	sl, #4294967295
 800c89a:	e7e3      	b.n	800c864 <_strtod_l+0xfc>
 800c89c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c89e:	1c5a      	adds	r2, r3, #1
 800c8a0:	921d      	str	r2, [sp, #116]	; 0x74
 800c8a2:	785b      	ldrb	r3, [r3, #1]
 800c8a4:	2b30      	cmp	r3, #48	; 0x30
 800c8a6:	d0f9      	beq.n	800c89c <_strtod_l+0x134>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d09f      	beq.n	800c7ec <_strtod_l+0x84>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	f04f 0900 	mov.w	r9, #0
 800c8b2:	9304      	str	r3, [sp, #16]
 800c8b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c8bc:	464f      	mov	r7, r9
 800c8be:	220a      	movs	r2, #10
 800c8c0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c8c2:	7806      	ldrb	r6, [r0, #0]
 800c8c4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c8c8:	b2d9      	uxtb	r1, r3
 800c8ca:	2909      	cmp	r1, #9
 800c8cc:	d92a      	bls.n	800c924 <_strtod_l+0x1bc>
 800c8ce:	9907      	ldr	r1, [sp, #28]
 800c8d0:	462a      	mov	r2, r5
 800c8d2:	f003 fb34 	bl	800ff3e <strncmp>
 800c8d6:	b398      	cbz	r0, 800c940 <_strtod_l+0x1d8>
 800c8d8:	2000      	movs	r0, #0
 800c8da:	4633      	mov	r3, r6
 800c8dc:	463d      	mov	r5, r7
 800c8de:	9007      	str	r0, [sp, #28]
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	2b65      	cmp	r3, #101	; 0x65
 800c8e4:	d001      	beq.n	800c8ea <_strtod_l+0x182>
 800c8e6:	2b45      	cmp	r3, #69	; 0x45
 800c8e8:	d118      	bne.n	800c91c <_strtod_l+0x1b4>
 800c8ea:	b91d      	cbnz	r5, 800c8f4 <_strtod_l+0x18c>
 800c8ec:	9b04      	ldr	r3, [sp, #16]
 800c8ee:	4303      	orrs	r3, r0
 800c8f0:	d098      	beq.n	800c824 <_strtod_l+0xbc>
 800c8f2:	2500      	movs	r5, #0
 800c8f4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c8f8:	f108 0301 	add.w	r3, r8, #1
 800c8fc:	931d      	str	r3, [sp, #116]	; 0x74
 800c8fe:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c902:	2b2b      	cmp	r3, #43	; 0x2b
 800c904:	d075      	beq.n	800c9f2 <_strtod_l+0x28a>
 800c906:	2b2d      	cmp	r3, #45	; 0x2d
 800c908:	d07b      	beq.n	800ca02 <_strtod_l+0x29a>
 800c90a:	f04f 0c00 	mov.w	ip, #0
 800c90e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c912:	2909      	cmp	r1, #9
 800c914:	f240 8082 	bls.w	800ca1c <_strtod_l+0x2b4>
 800c918:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c91c:	2600      	movs	r6, #0
 800c91e:	e09d      	b.n	800ca5c <_strtod_l+0x2f4>
 800c920:	2300      	movs	r3, #0
 800c922:	e7c4      	b.n	800c8ae <_strtod_l+0x146>
 800c924:	2f08      	cmp	r7, #8
 800c926:	bfd8      	it	le
 800c928:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c92a:	f100 0001 	add.w	r0, r0, #1
 800c92e:	bfda      	itte	le
 800c930:	fb02 3301 	mlale	r3, r2, r1, r3
 800c934:	9309      	strle	r3, [sp, #36]	; 0x24
 800c936:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c93a:	3701      	adds	r7, #1
 800c93c:	901d      	str	r0, [sp, #116]	; 0x74
 800c93e:	e7bf      	b.n	800c8c0 <_strtod_l+0x158>
 800c940:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c942:	195a      	adds	r2, r3, r5
 800c944:	921d      	str	r2, [sp, #116]	; 0x74
 800c946:	5d5b      	ldrb	r3, [r3, r5]
 800c948:	2f00      	cmp	r7, #0
 800c94a:	d037      	beq.n	800c9bc <_strtod_l+0x254>
 800c94c:	9007      	str	r0, [sp, #28]
 800c94e:	463d      	mov	r5, r7
 800c950:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c954:	2a09      	cmp	r2, #9
 800c956:	d912      	bls.n	800c97e <_strtod_l+0x216>
 800c958:	2201      	movs	r2, #1
 800c95a:	e7c2      	b.n	800c8e2 <_strtod_l+0x17a>
 800c95c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	921d      	str	r2, [sp, #116]	; 0x74
 800c962:	785b      	ldrb	r3, [r3, #1]
 800c964:	3001      	adds	r0, #1
 800c966:	2b30      	cmp	r3, #48	; 0x30
 800c968:	d0f8      	beq.n	800c95c <_strtod_l+0x1f4>
 800c96a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c96e:	2a08      	cmp	r2, #8
 800c970:	f200 84db 	bhi.w	800d32a <_strtod_l+0xbc2>
 800c974:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c976:	9007      	str	r0, [sp, #28]
 800c978:	2000      	movs	r0, #0
 800c97a:	920a      	str	r2, [sp, #40]	; 0x28
 800c97c:	4605      	mov	r5, r0
 800c97e:	3b30      	subs	r3, #48	; 0x30
 800c980:	f100 0201 	add.w	r2, r0, #1
 800c984:	d014      	beq.n	800c9b0 <_strtod_l+0x248>
 800c986:	9907      	ldr	r1, [sp, #28]
 800c988:	4411      	add	r1, r2
 800c98a:	9107      	str	r1, [sp, #28]
 800c98c:	462a      	mov	r2, r5
 800c98e:	eb00 0e05 	add.w	lr, r0, r5
 800c992:	210a      	movs	r1, #10
 800c994:	4572      	cmp	r2, lr
 800c996:	d113      	bne.n	800c9c0 <_strtod_l+0x258>
 800c998:	182a      	adds	r2, r5, r0
 800c99a:	2a08      	cmp	r2, #8
 800c99c:	f105 0501 	add.w	r5, r5, #1
 800c9a0:	4405      	add	r5, r0
 800c9a2:	dc1c      	bgt.n	800c9de <_strtod_l+0x276>
 800c9a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9a6:	220a      	movs	r2, #10
 800c9a8:	fb02 3301 	mla	r3, r2, r1, r3
 800c9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9b2:	1c59      	adds	r1, r3, #1
 800c9b4:	911d      	str	r1, [sp, #116]	; 0x74
 800c9b6:	785b      	ldrb	r3, [r3, #1]
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	e7c9      	b.n	800c950 <_strtod_l+0x1e8>
 800c9bc:	4638      	mov	r0, r7
 800c9be:	e7d2      	b.n	800c966 <_strtod_l+0x1fe>
 800c9c0:	2a08      	cmp	r2, #8
 800c9c2:	dc04      	bgt.n	800c9ce <_strtod_l+0x266>
 800c9c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9c6:	434e      	muls	r6, r1
 800c9c8:	9609      	str	r6, [sp, #36]	; 0x24
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	e7e2      	b.n	800c994 <_strtod_l+0x22c>
 800c9ce:	f102 0c01 	add.w	ip, r2, #1
 800c9d2:	f1bc 0f10 	cmp.w	ip, #16
 800c9d6:	bfd8      	it	le
 800c9d8:	fb01 f909 	mulle.w	r9, r1, r9
 800c9dc:	e7f5      	b.n	800c9ca <_strtod_l+0x262>
 800c9de:	2d10      	cmp	r5, #16
 800c9e0:	bfdc      	itt	le
 800c9e2:	220a      	movle	r2, #10
 800c9e4:	fb02 3909 	mlale	r9, r2, r9, r3
 800c9e8:	e7e1      	b.n	800c9ae <_strtod_l+0x246>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	2201      	movs	r2, #1
 800c9f0:	e77c      	b.n	800c8ec <_strtod_l+0x184>
 800c9f2:	f04f 0c00 	mov.w	ip, #0
 800c9f6:	f108 0302 	add.w	r3, r8, #2
 800c9fa:	931d      	str	r3, [sp, #116]	; 0x74
 800c9fc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800ca00:	e785      	b.n	800c90e <_strtod_l+0x1a6>
 800ca02:	f04f 0c01 	mov.w	ip, #1
 800ca06:	e7f6      	b.n	800c9f6 <_strtod_l+0x28e>
 800ca08:	08012108 	.word	0x08012108
 800ca0c:	08011db8 	.word	0x08011db8
 800ca10:	7ff00000 	.word	0x7ff00000
 800ca14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca16:	1c59      	adds	r1, r3, #1
 800ca18:	911d      	str	r1, [sp, #116]	; 0x74
 800ca1a:	785b      	ldrb	r3, [r3, #1]
 800ca1c:	2b30      	cmp	r3, #48	; 0x30
 800ca1e:	d0f9      	beq.n	800ca14 <_strtod_l+0x2ac>
 800ca20:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ca24:	2908      	cmp	r1, #8
 800ca26:	f63f af79 	bhi.w	800c91c <_strtod_l+0x1b4>
 800ca2a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ca2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca30:	9308      	str	r3, [sp, #32]
 800ca32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca34:	1c59      	adds	r1, r3, #1
 800ca36:	911d      	str	r1, [sp, #116]	; 0x74
 800ca38:	785b      	ldrb	r3, [r3, #1]
 800ca3a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ca3e:	2e09      	cmp	r6, #9
 800ca40:	d937      	bls.n	800cab2 <_strtod_l+0x34a>
 800ca42:	9e08      	ldr	r6, [sp, #32]
 800ca44:	1b89      	subs	r1, r1, r6
 800ca46:	2908      	cmp	r1, #8
 800ca48:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ca4c:	dc02      	bgt.n	800ca54 <_strtod_l+0x2ec>
 800ca4e:	4576      	cmp	r6, lr
 800ca50:	bfa8      	it	ge
 800ca52:	4676      	movge	r6, lr
 800ca54:	f1bc 0f00 	cmp.w	ip, #0
 800ca58:	d000      	beq.n	800ca5c <_strtod_l+0x2f4>
 800ca5a:	4276      	negs	r6, r6
 800ca5c:	2d00      	cmp	r5, #0
 800ca5e:	d14f      	bne.n	800cb00 <_strtod_l+0x398>
 800ca60:	9904      	ldr	r1, [sp, #16]
 800ca62:	4301      	orrs	r1, r0
 800ca64:	f47f aec2 	bne.w	800c7ec <_strtod_l+0x84>
 800ca68:	2a00      	cmp	r2, #0
 800ca6a:	f47f aedb 	bne.w	800c824 <_strtod_l+0xbc>
 800ca6e:	2b69      	cmp	r3, #105	; 0x69
 800ca70:	d027      	beq.n	800cac2 <_strtod_l+0x35a>
 800ca72:	dc24      	bgt.n	800cabe <_strtod_l+0x356>
 800ca74:	2b49      	cmp	r3, #73	; 0x49
 800ca76:	d024      	beq.n	800cac2 <_strtod_l+0x35a>
 800ca78:	2b4e      	cmp	r3, #78	; 0x4e
 800ca7a:	f47f aed3 	bne.w	800c824 <_strtod_l+0xbc>
 800ca7e:	499e      	ldr	r1, [pc, #632]	; (800ccf8 <_strtod_l+0x590>)
 800ca80:	a81d      	add	r0, sp, #116	; 0x74
 800ca82:	f002 f981 	bl	800ed88 <__match>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	f43f aecc 	beq.w	800c824 <_strtod_l+0xbc>
 800ca8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	2b28      	cmp	r3, #40	; 0x28
 800ca92:	d12d      	bne.n	800caf0 <_strtod_l+0x388>
 800ca94:	4999      	ldr	r1, [pc, #612]	; (800ccfc <_strtod_l+0x594>)
 800ca96:	aa20      	add	r2, sp, #128	; 0x80
 800ca98:	a81d      	add	r0, sp, #116	; 0x74
 800ca9a:	f002 f989 	bl	800edb0 <__hexnan>
 800ca9e:	2805      	cmp	r0, #5
 800caa0:	d126      	bne.n	800caf0 <_strtod_l+0x388>
 800caa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caa4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800caa8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800caac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cab0:	e69c      	b.n	800c7ec <_strtod_l+0x84>
 800cab2:	210a      	movs	r1, #10
 800cab4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800cab8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cabc:	e7b9      	b.n	800ca32 <_strtod_l+0x2ca>
 800cabe:	2b6e      	cmp	r3, #110	; 0x6e
 800cac0:	e7db      	b.n	800ca7a <_strtod_l+0x312>
 800cac2:	498f      	ldr	r1, [pc, #572]	; (800cd00 <_strtod_l+0x598>)
 800cac4:	a81d      	add	r0, sp, #116	; 0x74
 800cac6:	f002 f95f 	bl	800ed88 <__match>
 800caca:	2800      	cmp	r0, #0
 800cacc:	f43f aeaa 	beq.w	800c824 <_strtod_l+0xbc>
 800cad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cad2:	498c      	ldr	r1, [pc, #560]	; (800cd04 <_strtod_l+0x59c>)
 800cad4:	3b01      	subs	r3, #1
 800cad6:	a81d      	add	r0, sp, #116	; 0x74
 800cad8:	931d      	str	r3, [sp, #116]	; 0x74
 800cada:	f002 f955 	bl	800ed88 <__match>
 800cade:	b910      	cbnz	r0, 800cae6 <_strtod_l+0x37e>
 800cae0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cae2:	3301      	adds	r3, #1
 800cae4:	931d      	str	r3, [sp, #116]	; 0x74
 800cae6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cd14 <_strtod_l+0x5ac>
 800caea:	f04f 0a00 	mov.w	sl, #0
 800caee:	e67d      	b.n	800c7ec <_strtod_l+0x84>
 800caf0:	4885      	ldr	r0, [pc, #532]	; (800cd08 <_strtod_l+0x5a0>)
 800caf2:	f003 f9c9 	bl	800fe88 <nan>
 800caf6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cafa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cafe:	e675      	b.n	800c7ec <_strtod_l+0x84>
 800cb00:	9b07      	ldr	r3, [sp, #28]
 800cb02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb04:	1af3      	subs	r3, r6, r3
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	bf08      	it	eq
 800cb0a:	462f      	moveq	r7, r5
 800cb0c:	2d10      	cmp	r5, #16
 800cb0e:	9308      	str	r3, [sp, #32]
 800cb10:	46a8      	mov	r8, r5
 800cb12:	bfa8      	it	ge
 800cb14:	f04f 0810 	movge.w	r8, #16
 800cb18:	f7f3 fd24 	bl	8000564 <__aeabi_ui2d>
 800cb1c:	2d09      	cmp	r5, #9
 800cb1e:	4682      	mov	sl, r0
 800cb20:	468b      	mov	fp, r1
 800cb22:	dd13      	ble.n	800cb4c <_strtod_l+0x3e4>
 800cb24:	4b79      	ldr	r3, [pc, #484]	; (800cd0c <_strtod_l+0x5a4>)
 800cb26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cb2a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cb2e:	f7f3 fd93 	bl	8000658 <__aeabi_dmul>
 800cb32:	4682      	mov	sl, r0
 800cb34:	4648      	mov	r0, r9
 800cb36:	468b      	mov	fp, r1
 800cb38:	f7f3 fd14 	bl	8000564 <__aeabi_ui2d>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	460b      	mov	r3, r1
 800cb40:	4650      	mov	r0, sl
 800cb42:	4659      	mov	r1, fp
 800cb44:	f7f3 fbd2 	bl	80002ec <__adddf3>
 800cb48:	4682      	mov	sl, r0
 800cb4a:	468b      	mov	fp, r1
 800cb4c:	2d0f      	cmp	r5, #15
 800cb4e:	dc38      	bgt.n	800cbc2 <_strtod_l+0x45a>
 800cb50:	9b08      	ldr	r3, [sp, #32]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f43f ae4a 	beq.w	800c7ec <_strtod_l+0x84>
 800cb58:	dd24      	ble.n	800cba4 <_strtod_l+0x43c>
 800cb5a:	2b16      	cmp	r3, #22
 800cb5c:	dc0b      	bgt.n	800cb76 <_strtod_l+0x40e>
 800cb5e:	4d6b      	ldr	r5, [pc, #428]	; (800cd0c <_strtod_l+0x5a4>)
 800cb60:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cb64:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cb68:	4652      	mov	r2, sl
 800cb6a:	465b      	mov	r3, fp
 800cb6c:	f7f3 fd74 	bl	8000658 <__aeabi_dmul>
 800cb70:	4682      	mov	sl, r0
 800cb72:	468b      	mov	fp, r1
 800cb74:	e63a      	b.n	800c7ec <_strtod_l+0x84>
 800cb76:	9a08      	ldr	r2, [sp, #32]
 800cb78:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	db20      	blt.n	800cbc2 <_strtod_l+0x45a>
 800cb80:	4c62      	ldr	r4, [pc, #392]	; (800cd0c <_strtod_l+0x5a4>)
 800cb82:	f1c5 050f 	rsb	r5, r5, #15
 800cb86:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb8a:	4652      	mov	r2, sl
 800cb8c:	465b      	mov	r3, fp
 800cb8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb92:	f7f3 fd61 	bl	8000658 <__aeabi_dmul>
 800cb96:	9b08      	ldr	r3, [sp, #32]
 800cb98:	1b5d      	subs	r5, r3, r5
 800cb9a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cba2:	e7e3      	b.n	800cb6c <_strtod_l+0x404>
 800cba4:	9b08      	ldr	r3, [sp, #32]
 800cba6:	3316      	adds	r3, #22
 800cba8:	db0b      	blt.n	800cbc2 <_strtod_l+0x45a>
 800cbaa:	9b07      	ldr	r3, [sp, #28]
 800cbac:	4a57      	ldr	r2, [pc, #348]	; (800cd0c <_strtod_l+0x5a4>)
 800cbae:	1b9e      	subs	r6, r3, r6
 800cbb0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cbb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cbb8:	4650      	mov	r0, sl
 800cbba:	4659      	mov	r1, fp
 800cbbc:	f7f3 fe76 	bl	80008ac <__aeabi_ddiv>
 800cbc0:	e7d6      	b.n	800cb70 <_strtod_l+0x408>
 800cbc2:	9b08      	ldr	r3, [sp, #32]
 800cbc4:	eba5 0808 	sub.w	r8, r5, r8
 800cbc8:	4498      	add	r8, r3
 800cbca:	f1b8 0f00 	cmp.w	r8, #0
 800cbce:	dd71      	ble.n	800ccb4 <_strtod_l+0x54c>
 800cbd0:	f018 030f 	ands.w	r3, r8, #15
 800cbd4:	d00a      	beq.n	800cbec <_strtod_l+0x484>
 800cbd6:	494d      	ldr	r1, [pc, #308]	; (800cd0c <_strtod_l+0x5a4>)
 800cbd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbdc:	4652      	mov	r2, sl
 800cbde:	465b      	mov	r3, fp
 800cbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe4:	f7f3 fd38 	bl	8000658 <__aeabi_dmul>
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	f038 080f 	bics.w	r8, r8, #15
 800cbf0:	d04d      	beq.n	800cc8e <_strtod_l+0x526>
 800cbf2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cbf6:	dd22      	ble.n	800cc3e <_strtod_l+0x4d6>
 800cbf8:	2500      	movs	r5, #0
 800cbfa:	462e      	mov	r6, r5
 800cbfc:	9509      	str	r5, [sp, #36]	; 0x24
 800cbfe:	9507      	str	r5, [sp, #28]
 800cc00:	2322      	movs	r3, #34	; 0x22
 800cc02:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cd14 <_strtod_l+0x5ac>
 800cc06:	6023      	str	r3, [r4, #0]
 800cc08:	f04f 0a00 	mov.w	sl, #0
 800cc0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f43f adec 	beq.w	800c7ec <_strtod_l+0x84>
 800cc14:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc16:	4620      	mov	r0, r4
 800cc18:	f002 fa7a 	bl	800f110 <_Bfree>
 800cc1c:	9907      	ldr	r1, [sp, #28]
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f002 fa76 	bl	800f110 <_Bfree>
 800cc24:	4631      	mov	r1, r6
 800cc26:	4620      	mov	r0, r4
 800cc28:	f002 fa72 	bl	800f110 <_Bfree>
 800cc2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f002 fa6e 	bl	800f110 <_Bfree>
 800cc34:	4629      	mov	r1, r5
 800cc36:	4620      	mov	r0, r4
 800cc38:	f002 fa6a 	bl	800f110 <_Bfree>
 800cc3c:	e5d6      	b.n	800c7ec <_strtod_l+0x84>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cc44:	4650      	mov	r0, sl
 800cc46:	4659      	mov	r1, fp
 800cc48:	4699      	mov	r9, r3
 800cc4a:	f1b8 0f01 	cmp.w	r8, #1
 800cc4e:	dc21      	bgt.n	800cc94 <_strtod_l+0x52c>
 800cc50:	b10b      	cbz	r3, 800cc56 <_strtod_l+0x4ee>
 800cc52:	4682      	mov	sl, r0
 800cc54:	468b      	mov	fp, r1
 800cc56:	4b2e      	ldr	r3, [pc, #184]	; (800cd10 <_strtod_l+0x5a8>)
 800cc58:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cc5c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cc60:	4652      	mov	r2, sl
 800cc62:	465b      	mov	r3, fp
 800cc64:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cc68:	f7f3 fcf6 	bl	8000658 <__aeabi_dmul>
 800cc6c:	4b29      	ldr	r3, [pc, #164]	; (800cd14 <_strtod_l+0x5ac>)
 800cc6e:	460a      	mov	r2, r1
 800cc70:	400b      	ands	r3, r1
 800cc72:	4929      	ldr	r1, [pc, #164]	; (800cd18 <_strtod_l+0x5b0>)
 800cc74:	428b      	cmp	r3, r1
 800cc76:	4682      	mov	sl, r0
 800cc78:	d8be      	bhi.n	800cbf8 <_strtod_l+0x490>
 800cc7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc7e:	428b      	cmp	r3, r1
 800cc80:	bf86      	itte	hi
 800cc82:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cd1c <_strtod_l+0x5b4>
 800cc86:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc8a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cc8e:	2300      	movs	r3, #0
 800cc90:	9304      	str	r3, [sp, #16]
 800cc92:	e081      	b.n	800cd98 <_strtod_l+0x630>
 800cc94:	f018 0f01 	tst.w	r8, #1
 800cc98:	d007      	beq.n	800ccaa <_strtod_l+0x542>
 800cc9a:	4b1d      	ldr	r3, [pc, #116]	; (800cd10 <_strtod_l+0x5a8>)
 800cc9c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7f3 fcd8 	bl	8000658 <__aeabi_dmul>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f109 0901 	add.w	r9, r9, #1
 800ccae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ccb2:	e7ca      	b.n	800cc4a <_strtod_l+0x4e2>
 800ccb4:	d0eb      	beq.n	800cc8e <_strtod_l+0x526>
 800ccb6:	f1c8 0800 	rsb	r8, r8, #0
 800ccba:	f018 020f 	ands.w	r2, r8, #15
 800ccbe:	d00a      	beq.n	800ccd6 <_strtod_l+0x56e>
 800ccc0:	4b12      	ldr	r3, [pc, #72]	; (800cd0c <_strtod_l+0x5a4>)
 800ccc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccc6:	4650      	mov	r0, sl
 800ccc8:	4659      	mov	r1, fp
 800ccca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccce:	f7f3 fded 	bl	80008ac <__aeabi_ddiv>
 800ccd2:	4682      	mov	sl, r0
 800ccd4:	468b      	mov	fp, r1
 800ccd6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ccda:	d0d8      	beq.n	800cc8e <_strtod_l+0x526>
 800ccdc:	f1b8 0f1f 	cmp.w	r8, #31
 800cce0:	dd1e      	ble.n	800cd20 <_strtod_l+0x5b8>
 800cce2:	2500      	movs	r5, #0
 800cce4:	462e      	mov	r6, r5
 800cce6:	9509      	str	r5, [sp, #36]	; 0x24
 800cce8:	9507      	str	r5, [sp, #28]
 800ccea:	2322      	movs	r3, #34	; 0x22
 800ccec:	f04f 0a00 	mov.w	sl, #0
 800ccf0:	f04f 0b00 	mov.w	fp, #0
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	e789      	b.n	800cc0c <_strtod_l+0x4a4>
 800ccf8:	08011d91 	.word	0x08011d91
 800ccfc:	08011dcc 	.word	0x08011dcc
 800cd00:	08011d89 	.word	0x08011d89
 800cd04:	08011fc0 	.word	0x08011fc0
 800cd08:	08011ebb 	.word	0x08011ebb
 800cd0c:	080121a8 	.word	0x080121a8
 800cd10:	08012180 	.word	0x08012180
 800cd14:	7ff00000 	.word	0x7ff00000
 800cd18:	7ca00000 	.word	0x7ca00000
 800cd1c:	7fefffff 	.word	0x7fefffff
 800cd20:	f018 0310 	ands.w	r3, r8, #16
 800cd24:	bf18      	it	ne
 800cd26:	236a      	movne	r3, #106	; 0x6a
 800cd28:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d0e0 <_strtod_l+0x978>
 800cd2c:	9304      	str	r3, [sp, #16]
 800cd2e:	4650      	mov	r0, sl
 800cd30:	4659      	mov	r1, fp
 800cd32:	2300      	movs	r3, #0
 800cd34:	f018 0f01 	tst.w	r8, #1
 800cd38:	d004      	beq.n	800cd44 <_strtod_l+0x5dc>
 800cd3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cd3e:	f7f3 fc8b 	bl	8000658 <__aeabi_dmul>
 800cd42:	2301      	movs	r3, #1
 800cd44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cd48:	f109 0908 	add.w	r9, r9, #8
 800cd4c:	d1f2      	bne.n	800cd34 <_strtod_l+0x5cc>
 800cd4e:	b10b      	cbz	r3, 800cd54 <_strtod_l+0x5ec>
 800cd50:	4682      	mov	sl, r0
 800cd52:	468b      	mov	fp, r1
 800cd54:	9b04      	ldr	r3, [sp, #16]
 800cd56:	b1bb      	cbz	r3, 800cd88 <_strtod_l+0x620>
 800cd58:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cd5c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	4659      	mov	r1, fp
 800cd64:	dd10      	ble.n	800cd88 <_strtod_l+0x620>
 800cd66:	2b1f      	cmp	r3, #31
 800cd68:	f340 8128 	ble.w	800cfbc <_strtod_l+0x854>
 800cd6c:	2b34      	cmp	r3, #52	; 0x34
 800cd6e:	bfde      	ittt	le
 800cd70:	3b20      	suble	r3, #32
 800cd72:	f04f 32ff 	movle.w	r2, #4294967295
 800cd76:	fa02 f303 	lslle.w	r3, r2, r3
 800cd7a:	f04f 0a00 	mov.w	sl, #0
 800cd7e:	bfcc      	ite	gt
 800cd80:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cd84:	ea03 0b01 	andle.w	fp, r3, r1
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	4650      	mov	r0, sl
 800cd8e:	4659      	mov	r1, fp
 800cd90:	f7f3 feca 	bl	8000b28 <__aeabi_dcmpeq>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d1a4      	bne.n	800cce2 <_strtod_l+0x57a>
 800cd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd9e:	462b      	mov	r3, r5
 800cda0:	463a      	mov	r2, r7
 800cda2:	4620      	mov	r0, r4
 800cda4:	f002 fa20 	bl	800f1e8 <__s2b>
 800cda8:	9009      	str	r0, [sp, #36]	; 0x24
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	f43f af24 	beq.w	800cbf8 <_strtod_l+0x490>
 800cdb0:	9b07      	ldr	r3, [sp, #28]
 800cdb2:	1b9e      	subs	r6, r3, r6
 800cdb4:	9b08      	ldr	r3, [sp, #32]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	bfb4      	ite	lt
 800cdba:	4633      	movlt	r3, r6
 800cdbc:	2300      	movge	r3, #0
 800cdbe:	9310      	str	r3, [sp, #64]	; 0x40
 800cdc0:	9b08      	ldr	r3, [sp, #32]
 800cdc2:	2500      	movs	r5, #0
 800cdc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdc8:	9318      	str	r3, [sp, #96]	; 0x60
 800cdca:	462e      	mov	r6, r5
 800cdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdce:	4620      	mov	r0, r4
 800cdd0:	6859      	ldr	r1, [r3, #4]
 800cdd2:	f002 f95d 	bl	800f090 <_Balloc>
 800cdd6:	9007      	str	r0, [sp, #28]
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	f43f af11 	beq.w	800cc00 <_strtod_l+0x498>
 800cdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde0:	691a      	ldr	r2, [r3, #16]
 800cde2:	3202      	adds	r2, #2
 800cde4:	f103 010c 	add.w	r1, r3, #12
 800cde8:	0092      	lsls	r2, r2, #2
 800cdea:	300c      	adds	r0, #12
 800cdec:	f002 f942 	bl	800f074 <memcpy>
 800cdf0:	ec4b ab10 	vmov	d0, sl, fp
 800cdf4:	aa20      	add	r2, sp, #128	; 0x80
 800cdf6:	a91f      	add	r1, sp, #124	; 0x7c
 800cdf8:	4620      	mov	r0, r4
 800cdfa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800cdfe:	f002 fd2f 	bl	800f860 <__d2b>
 800ce02:	901e      	str	r0, [sp, #120]	; 0x78
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f43f aefb 	beq.w	800cc00 <_strtod_l+0x498>
 800ce0a:	2101      	movs	r1, #1
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f002 fa85 	bl	800f31c <__i2b>
 800ce12:	4606      	mov	r6, r0
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f43f aef3 	beq.w	800cc00 <_strtod_l+0x498>
 800ce1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ce1c:	9904      	ldr	r1, [sp, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	bfab      	itete	ge
 800ce22:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ce24:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ce26:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ce28:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ce2c:	bfac      	ite	ge
 800ce2e:	eb03 0902 	addge.w	r9, r3, r2
 800ce32:	1ad7      	sublt	r7, r2, r3
 800ce34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce36:	eba3 0801 	sub.w	r8, r3, r1
 800ce3a:	4490      	add	r8, r2
 800ce3c:	4ba3      	ldr	r3, [pc, #652]	; (800d0cc <_strtod_l+0x964>)
 800ce3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce42:	4598      	cmp	r8, r3
 800ce44:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ce48:	f280 80cc 	bge.w	800cfe4 <_strtod_l+0x87c>
 800ce4c:	eba3 0308 	sub.w	r3, r3, r8
 800ce50:	2b1f      	cmp	r3, #31
 800ce52:	eba2 0203 	sub.w	r2, r2, r3
 800ce56:	f04f 0101 	mov.w	r1, #1
 800ce5a:	f300 80b6 	bgt.w	800cfca <_strtod_l+0x862>
 800ce5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce62:	9311      	str	r3, [sp, #68]	; 0x44
 800ce64:	2300      	movs	r3, #0
 800ce66:	930c      	str	r3, [sp, #48]	; 0x30
 800ce68:	eb09 0802 	add.w	r8, r9, r2
 800ce6c:	9b04      	ldr	r3, [sp, #16]
 800ce6e:	45c1      	cmp	r9, r8
 800ce70:	4417      	add	r7, r2
 800ce72:	441f      	add	r7, r3
 800ce74:	464b      	mov	r3, r9
 800ce76:	bfa8      	it	ge
 800ce78:	4643      	movge	r3, r8
 800ce7a:	42bb      	cmp	r3, r7
 800ce7c:	bfa8      	it	ge
 800ce7e:	463b      	movge	r3, r7
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	bfc2      	ittt	gt
 800ce84:	eba8 0803 	subgt.w	r8, r8, r3
 800ce88:	1aff      	subgt	r7, r7, r3
 800ce8a:	eba9 0903 	subgt.w	r9, r9, r3
 800ce8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dd17      	ble.n	800cec4 <_strtod_l+0x75c>
 800ce94:	4631      	mov	r1, r6
 800ce96:	461a      	mov	r2, r3
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f002 fafb 	bl	800f494 <__pow5mult>
 800ce9e:	4606      	mov	r6, r0
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f43f aead 	beq.w	800cc00 <_strtod_l+0x498>
 800cea6:	4601      	mov	r1, r0
 800cea8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f002 fa4c 	bl	800f348 <__multiply>
 800ceb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f43f aea4 	beq.w	800cc00 <_strtod_l+0x498>
 800ceb8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ceba:	4620      	mov	r0, r4
 800cebc:	f002 f928 	bl	800f110 <_Bfree>
 800cec0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cec2:	931e      	str	r3, [sp, #120]	; 0x78
 800cec4:	f1b8 0f00 	cmp.w	r8, #0
 800cec8:	f300 8091 	bgt.w	800cfee <_strtod_l+0x886>
 800cecc:	9b08      	ldr	r3, [sp, #32]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	dd08      	ble.n	800cee4 <_strtod_l+0x77c>
 800ced2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ced4:	9907      	ldr	r1, [sp, #28]
 800ced6:	4620      	mov	r0, r4
 800ced8:	f002 fadc 	bl	800f494 <__pow5mult>
 800cedc:	9007      	str	r0, [sp, #28]
 800cede:	2800      	cmp	r0, #0
 800cee0:	f43f ae8e 	beq.w	800cc00 <_strtod_l+0x498>
 800cee4:	2f00      	cmp	r7, #0
 800cee6:	dd08      	ble.n	800cefa <_strtod_l+0x792>
 800cee8:	9907      	ldr	r1, [sp, #28]
 800ceea:	463a      	mov	r2, r7
 800ceec:	4620      	mov	r0, r4
 800ceee:	f002 fb2b 	bl	800f548 <__lshift>
 800cef2:	9007      	str	r0, [sp, #28]
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f43f ae83 	beq.w	800cc00 <_strtod_l+0x498>
 800cefa:	f1b9 0f00 	cmp.w	r9, #0
 800cefe:	dd08      	ble.n	800cf12 <_strtod_l+0x7aa>
 800cf00:	4631      	mov	r1, r6
 800cf02:	464a      	mov	r2, r9
 800cf04:	4620      	mov	r0, r4
 800cf06:	f002 fb1f 	bl	800f548 <__lshift>
 800cf0a:	4606      	mov	r6, r0
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	f43f ae77 	beq.w	800cc00 <_strtod_l+0x498>
 800cf12:	9a07      	ldr	r2, [sp, #28]
 800cf14:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf16:	4620      	mov	r0, r4
 800cf18:	f002 fb9e 	bl	800f658 <__mdiff>
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f43f ae6e 	beq.w	800cc00 <_strtod_l+0x498>
 800cf24:	68c3      	ldr	r3, [r0, #12]
 800cf26:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf28:	2300      	movs	r3, #0
 800cf2a:	60c3      	str	r3, [r0, #12]
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	f002 fb77 	bl	800f620 <__mcmp>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	da65      	bge.n	800d002 <_strtod_l+0x89a>
 800cf36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf38:	ea53 030a 	orrs.w	r3, r3, sl
 800cf3c:	f040 8087 	bne.w	800d04e <_strtod_l+0x8e6>
 800cf40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f040 8082 	bne.w	800d04e <_strtod_l+0x8e6>
 800cf4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf4e:	0d1b      	lsrs	r3, r3, #20
 800cf50:	051b      	lsls	r3, r3, #20
 800cf52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cf56:	d97a      	bls.n	800d04e <_strtod_l+0x8e6>
 800cf58:	696b      	ldr	r3, [r5, #20]
 800cf5a:	b913      	cbnz	r3, 800cf62 <_strtod_l+0x7fa>
 800cf5c:	692b      	ldr	r3, [r5, #16]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	dd75      	ble.n	800d04e <_strtod_l+0x8e6>
 800cf62:	4629      	mov	r1, r5
 800cf64:	2201      	movs	r2, #1
 800cf66:	4620      	mov	r0, r4
 800cf68:	f002 faee 	bl	800f548 <__lshift>
 800cf6c:	4631      	mov	r1, r6
 800cf6e:	4605      	mov	r5, r0
 800cf70:	f002 fb56 	bl	800f620 <__mcmp>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	dd6a      	ble.n	800d04e <_strtod_l+0x8e6>
 800cf78:	9904      	ldr	r1, [sp, #16]
 800cf7a:	4a55      	ldr	r2, [pc, #340]	; (800d0d0 <_strtod_l+0x968>)
 800cf7c:	465b      	mov	r3, fp
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	f000 8085 	beq.w	800d08e <_strtod_l+0x926>
 800cf84:	ea02 010b 	and.w	r1, r2, fp
 800cf88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf8c:	dc7f      	bgt.n	800d08e <_strtod_l+0x926>
 800cf8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf92:	f77f aeaa 	ble.w	800ccea <_strtod_l+0x582>
 800cf96:	4a4f      	ldr	r2, [pc, #316]	; (800d0d4 <_strtod_l+0x96c>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cf9e:	4650      	mov	r0, sl
 800cfa0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cfa4:	4659      	mov	r1, fp
 800cfa6:	f7f3 fb57 	bl	8000658 <__aeabi_dmul>
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4303      	orrs	r3, r0
 800cfae:	bf08      	it	eq
 800cfb0:	2322      	moveq	r3, #34	; 0x22
 800cfb2:	4682      	mov	sl, r0
 800cfb4:	468b      	mov	fp, r1
 800cfb6:	bf08      	it	eq
 800cfb8:	6023      	streq	r3, [r4, #0]
 800cfba:	e62b      	b.n	800cc14 <_strtod_l+0x4ac>
 800cfbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cfc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfc4:	ea03 0a0a 	and.w	sl, r3, sl
 800cfc8:	e6de      	b.n	800cd88 <_strtod_l+0x620>
 800cfca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cfce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cfd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cfd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cfda:	fa01 f308 	lsl.w	r3, r1, r8
 800cfde:	930c      	str	r3, [sp, #48]	; 0x30
 800cfe0:	9111      	str	r1, [sp, #68]	; 0x44
 800cfe2:	e741      	b.n	800ce68 <_strtod_l+0x700>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	930c      	str	r3, [sp, #48]	; 0x30
 800cfe8:	2301      	movs	r3, #1
 800cfea:	9311      	str	r3, [sp, #68]	; 0x44
 800cfec:	e73c      	b.n	800ce68 <_strtod_l+0x700>
 800cfee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cff0:	4642      	mov	r2, r8
 800cff2:	4620      	mov	r0, r4
 800cff4:	f002 faa8 	bl	800f548 <__lshift>
 800cff8:	901e      	str	r0, [sp, #120]	; 0x78
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f47f af66 	bne.w	800cecc <_strtod_l+0x764>
 800d000:	e5fe      	b.n	800cc00 <_strtod_l+0x498>
 800d002:	465f      	mov	r7, fp
 800d004:	d16e      	bne.n	800d0e4 <_strtod_l+0x97c>
 800d006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d008:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d00c:	b342      	cbz	r2, 800d060 <_strtod_l+0x8f8>
 800d00e:	4a32      	ldr	r2, [pc, #200]	; (800d0d8 <_strtod_l+0x970>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d128      	bne.n	800d066 <_strtod_l+0x8fe>
 800d014:	9b04      	ldr	r3, [sp, #16]
 800d016:	4650      	mov	r0, sl
 800d018:	b1eb      	cbz	r3, 800d056 <_strtod_l+0x8ee>
 800d01a:	4a2d      	ldr	r2, [pc, #180]	; (800d0d0 <_strtod_l+0x968>)
 800d01c:	403a      	ands	r2, r7
 800d01e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d022:	f04f 31ff 	mov.w	r1, #4294967295
 800d026:	d819      	bhi.n	800d05c <_strtod_l+0x8f4>
 800d028:	0d12      	lsrs	r2, r2, #20
 800d02a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d02e:	fa01 f303 	lsl.w	r3, r1, r3
 800d032:	4298      	cmp	r0, r3
 800d034:	d117      	bne.n	800d066 <_strtod_l+0x8fe>
 800d036:	4b29      	ldr	r3, [pc, #164]	; (800d0dc <_strtod_l+0x974>)
 800d038:	429f      	cmp	r7, r3
 800d03a:	d102      	bne.n	800d042 <_strtod_l+0x8da>
 800d03c:	3001      	adds	r0, #1
 800d03e:	f43f addf 	beq.w	800cc00 <_strtod_l+0x498>
 800d042:	4b23      	ldr	r3, [pc, #140]	; (800d0d0 <_strtod_l+0x968>)
 800d044:	403b      	ands	r3, r7
 800d046:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d04a:	f04f 0a00 	mov.w	sl, #0
 800d04e:	9b04      	ldr	r3, [sp, #16]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1a0      	bne.n	800cf96 <_strtod_l+0x82e>
 800d054:	e5de      	b.n	800cc14 <_strtod_l+0x4ac>
 800d056:	f04f 33ff 	mov.w	r3, #4294967295
 800d05a:	e7ea      	b.n	800d032 <_strtod_l+0x8ca>
 800d05c:	460b      	mov	r3, r1
 800d05e:	e7e8      	b.n	800d032 <_strtod_l+0x8ca>
 800d060:	ea53 030a 	orrs.w	r3, r3, sl
 800d064:	d088      	beq.n	800cf78 <_strtod_l+0x810>
 800d066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d068:	b1db      	cbz	r3, 800d0a2 <_strtod_l+0x93a>
 800d06a:	423b      	tst	r3, r7
 800d06c:	d0ef      	beq.n	800d04e <_strtod_l+0x8e6>
 800d06e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d070:	9a04      	ldr	r2, [sp, #16]
 800d072:	4650      	mov	r0, sl
 800d074:	4659      	mov	r1, fp
 800d076:	b1c3      	cbz	r3, 800d0aa <_strtod_l+0x942>
 800d078:	f7ff fb58 	bl	800c72c <sulp>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d084:	f7f3 f932 	bl	80002ec <__adddf3>
 800d088:	4682      	mov	sl, r0
 800d08a:	468b      	mov	fp, r1
 800d08c:	e7df      	b.n	800d04e <_strtod_l+0x8e6>
 800d08e:	4013      	ands	r3, r2
 800d090:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d094:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d098:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d09c:	f04f 3aff 	mov.w	sl, #4294967295
 800d0a0:	e7d5      	b.n	800d04e <_strtod_l+0x8e6>
 800d0a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0a4:	ea13 0f0a 	tst.w	r3, sl
 800d0a8:	e7e0      	b.n	800d06c <_strtod_l+0x904>
 800d0aa:	f7ff fb3f 	bl	800c72c <sulp>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d0b6:	f7f3 f917 	bl	80002e8 <__aeabi_dsub>
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4682      	mov	sl, r0
 800d0c0:	468b      	mov	fp, r1
 800d0c2:	f7f3 fd31 	bl	8000b28 <__aeabi_dcmpeq>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d0c1      	beq.n	800d04e <_strtod_l+0x8e6>
 800d0ca:	e60e      	b.n	800ccea <_strtod_l+0x582>
 800d0cc:	fffffc02 	.word	0xfffffc02
 800d0d0:	7ff00000 	.word	0x7ff00000
 800d0d4:	39500000 	.word	0x39500000
 800d0d8:	000fffff 	.word	0x000fffff
 800d0dc:	7fefffff 	.word	0x7fefffff
 800d0e0:	08011de0 	.word	0x08011de0
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f002 fc16 	bl	800f918 <__ratio>
 800d0ec:	ec59 8b10 	vmov	r8, r9, d0
 800d0f0:	ee10 0a10 	vmov	r0, s0
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f7f3 fd28 	bl	8000b50 <__aeabi_dcmple>
 800d100:	2800      	cmp	r0, #0
 800d102:	d07c      	beq.n	800d1fe <_strtod_l+0xa96>
 800d104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d04c      	beq.n	800d1a4 <_strtod_l+0xa3c>
 800d10a:	4b95      	ldr	r3, [pc, #596]	; (800d360 <_strtod_l+0xbf8>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d112:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d360 <_strtod_l+0xbf8>
 800d116:	f04f 0800 	mov.w	r8, #0
 800d11a:	4b92      	ldr	r3, [pc, #584]	; (800d364 <_strtod_l+0xbfc>)
 800d11c:	403b      	ands	r3, r7
 800d11e:	9311      	str	r3, [sp, #68]	; 0x44
 800d120:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d122:	4b91      	ldr	r3, [pc, #580]	; (800d368 <_strtod_l+0xc00>)
 800d124:	429a      	cmp	r2, r3
 800d126:	f040 80b2 	bne.w	800d28e <_strtod_l+0xb26>
 800d12a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d12e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d132:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d136:	ec4b ab10 	vmov	d0, sl, fp
 800d13a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d13e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d142:	f002 fb11 	bl	800f768 <__ulp>
 800d146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d14a:	ec53 2b10 	vmov	r2, r3, d0
 800d14e:	f7f3 fa83 	bl	8000658 <__aeabi_dmul>
 800d152:	4652      	mov	r2, sl
 800d154:	465b      	mov	r3, fp
 800d156:	f7f3 f8c9 	bl	80002ec <__adddf3>
 800d15a:	460b      	mov	r3, r1
 800d15c:	4981      	ldr	r1, [pc, #516]	; (800d364 <_strtod_l+0xbfc>)
 800d15e:	4a83      	ldr	r2, [pc, #524]	; (800d36c <_strtod_l+0xc04>)
 800d160:	4019      	ands	r1, r3
 800d162:	4291      	cmp	r1, r2
 800d164:	4682      	mov	sl, r0
 800d166:	d95e      	bls.n	800d226 <_strtod_l+0xabe>
 800d168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d16a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d16e:	4293      	cmp	r3, r2
 800d170:	d103      	bne.n	800d17a <_strtod_l+0xa12>
 800d172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d174:	3301      	adds	r3, #1
 800d176:	f43f ad43 	beq.w	800cc00 <_strtod_l+0x498>
 800d17a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d378 <_strtod_l+0xc10>
 800d17e:	f04f 3aff 	mov.w	sl, #4294967295
 800d182:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d184:	4620      	mov	r0, r4
 800d186:	f001 ffc3 	bl	800f110 <_Bfree>
 800d18a:	9907      	ldr	r1, [sp, #28]
 800d18c:	4620      	mov	r0, r4
 800d18e:	f001 ffbf 	bl	800f110 <_Bfree>
 800d192:	4631      	mov	r1, r6
 800d194:	4620      	mov	r0, r4
 800d196:	f001 ffbb 	bl	800f110 <_Bfree>
 800d19a:	4629      	mov	r1, r5
 800d19c:	4620      	mov	r0, r4
 800d19e:	f001 ffb7 	bl	800f110 <_Bfree>
 800d1a2:	e613      	b.n	800cdcc <_strtod_l+0x664>
 800d1a4:	f1ba 0f00 	cmp.w	sl, #0
 800d1a8:	d11b      	bne.n	800d1e2 <_strtod_l+0xa7a>
 800d1aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1ae:	b9f3      	cbnz	r3, 800d1ee <_strtod_l+0xa86>
 800d1b0:	4b6b      	ldr	r3, [pc, #428]	; (800d360 <_strtod_l+0xbf8>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	f7f3 fcc0 	bl	8000b3c <__aeabi_dcmplt>
 800d1bc:	b9d0      	cbnz	r0, 800d1f4 <_strtod_l+0xa8c>
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	4b6b      	ldr	r3, [pc, #428]	; (800d370 <_strtod_l+0xc08>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	f7f3 fa47 	bl	8000658 <__aeabi_dmul>
 800d1ca:	4680      	mov	r8, r0
 800d1cc:	4689      	mov	r9, r1
 800d1ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d1d2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d1d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1d8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d1dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d1e0:	e79b      	b.n	800d11a <_strtod_l+0x9b2>
 800d1e2:	f1ba 0f01 	cmp.w	sl, #1
 800d1e6:	d102      	bne.n	800d1ee <_strtod_l+0xa86>
 800d1e8:	2f00      	cmp	r7, #0
 800d1ea:	f43f ad7e 	beq.w	800ccea <_strtod_l+0x582>
 800d1ee:	4b61      	ldr	r3, [pc, #388]	; (800d374 <_strtod_l+0xc0c>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	e78c      	b.n	800d10e <_strtod_l+0x9a6>
 800d1f4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d370 <_strtod_l+0xc08>
 800d1f8:	f04f 0800 	mov.w	r8, #0
 800d1fc:	e7e7      	b.n	800d1ce <_strtod_l+0xa66>
 800d1fe:	4b5c      	ldr	r3, [pc, #368]	; (800d370 <_strtod_l+0xc08>)
 800d200:	4640      	mov	r0, r8
 800d202:	4649      	mov	r1, r9
 800d204:	2200      	movs	r2, #0
 800d206:	f7f3 fa27 	bl	8000658 <__aeabi_dmul>
 800d20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d20c:	4680      	mov	r8, r0
 800d20e:	4689      	mov	r9, r1
 800d210:	b933      	cbnz	r3, 800d220 <_strtod_l+0xab8>
 800d212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d216:	9012      	str	r0, [sp, #72]	; 0x48
 800d218:	9313      	str	r3, [sp, #76]	; 0x4c
 800d21a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d21e:	e7dd      	b.n	800d1dc <_strtod_l+0xa74>
 800d220:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d224:	e7f9      	b.n	800d21a <_strtod_l+0xab2>
 800d226:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d22a:	9b04      	ldr	r3, [sp, #16]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1a8      	bne.n	800d182 <_strtod_l+0xa1a>
 800d230:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d234:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d236:	0d1b      	lsrs	r3, r3, #20
 800d238:	051b      	lsls	r3, r3, #20
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d1a1      	bne.n	800d182 <_strtod_l+0xa1a>
 800d23e:	4640      	mov	r0, r8
 800d240:	4649      	mov	r1, r9
 800d242:	f7f3 fd69 	bl	8000d18 <__aeabi_d2lz>
 800d246:	f7f3 f9d9 	bl	80005fc <__aeabi_l2d>
 800d24a:	4602      	mov	r2, r0
 800d24c:	460b      	mov	r3, r1
 800d24e:	4640      	mov	r0, r8
 800d250:	4649      	mov	r1, r9
 800d252:	f7f3 f849 	bl	80002e8 <__aeabi_dsub>
 800d256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d25c:	ea43 030a 	orr.w	r3, r3, sl
 800d260:	4313      	orrs	r3, r2
 800d262:	4680      	mov	r8, r0
 800d264:	4689      	mov	r9, r1
 800d266:	d053      	beq.n	800d310 <_strtod_l+0xba8>
 800d268:	a335      	add	r3, pc, #212	; (adr r3, 800d340 <_strtod_l+0xbd8>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	f7f3 fc65 	bl	8000b3c <__aeabi_dcmplt>
 800d272:	2800      	cmp	r0, #0
 800d274:	f47f acce 	bne.w	800cc14 <_strtod_l+0x4ac>
 800d278:	a333      	add	r3, pc, #204	; (adr r3, 800d348 <_strtod_l+0xbe0>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	4640      	mov	r0, r8
 800d280:	4649      	mov	r1, r9
 800d282:	f7f3 fc79 	bl	8000b78 <__aeabi_dcmpgt>
 800d286:	2800      	cmp	r0, #0
 800d288:	f43f af7b 	beq.w	800d182 <_strtod_l+0xa1a>
 800d28c:	e4c2      	b.n	800cc14 <_strtod_l+0x4ac>
 800d28e:	9b04      	ldr	r3, [sp, #16]
 800d290:	b333      	cbz	r3, 800d2e0 <_strtod_l+0xb78>
 800d292:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d294:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d298:	d822      	bhi.n	800d2e0 <_strtod_l+0xb78>
 800d29a:	a32d      	add	r3, pc, #180	; (adr r3, 800d350 <_strtod_l+0xbe8>)
 800d29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	f7f3 fc54 	bl	8000b50 <__aeabi_dcmple>
 800d2a8:	b1a0      	cbz	r0, 800d2d4 <_strtod_l+0xb6c>
 800d2aa:	4649      	mov	r1, r9
 800d2ac:	4640      	mov	r0, r8
 800d2ae:	f7f3 fcab 	bl	8000c08 <__aeabi_d2uiz>
 800d2b2:	2801      	cmp	r0, #1
 800d2b4:	bf38      	it	cc
 800d2b6:	2001      	movcc	r0, #1
 800d2b8:	f7f3 f954 	bl	8000564 <__aeabi_ui2d>
 800d2bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2be:	4680      	mov	r8, r0
 800d2c0:	4689      	mov	r9, r1
 800d2c2:	bb13      	cbnz	r3, 800d30a <_strtod_l+0xba2>
 800d2c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2c8:	9014      	str	r0, [sp, #80]	; 0x50
 800d2ca:	9315      	str	r3, [sp, #84]	; 0x54
 800d2cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d2d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d2d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d2dc:	1a9b      	subs	r3, r3, r2
 800d2de:	930d      	str	r3, [sp, #52]	; 0x34
 800d2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2e4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d2e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2ec:	f002 fa3c 	bl	800f768 <__ulp>
 800d2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2f4:	ec53 2b10 	vmov	r2, r3, d0
 800d2f8:	f7f3 f9ae 	bl	8000658 <__aeabi_dmul>
 800d2fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d300:	f7f2 fff4 	bl	80002ec <__adddf3>
 800d304:	4682      	mov	sl, r0
 800d306:	468b      	mov	fp, r1
 800d308:	e78f      	b.n	800d22a <_strtod_l+0xac2>
 800d30a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d30e:	e7dd      	b.n	800d2cc <_strtod_l+0xb64>
 800d310:	a311      	add	r3, pc, #68	; (adr r3, 800d358 <_strtod_l+0xbf0>)
 800d312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d316:	f7f3 fc11 	bl	8000b3c <__aeabi_dcmplt>
 800d31a:	e7b4      	b.n	800d286 <_strtod_l+0xb1e>
 800d31c:	2300      	movs	r3, #0
 800d31e:	930e      	str	r3, [sp, #56]	; 0x38
 800d320:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d322:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	f7ff ba65 	b.w	800c7f4 <_strtod_l+0x8c>
 800d32a:	2b65      	cmp	r3, #101	; 0x65
 800d32c:	f43f ab5d 	beq.w	800c9ea <_strtod_l+0x282>
 800d330:	2b45      	cmp	r3, #69	; 0x45
 800d332:	f43f ab5a 	beq.w	800c9ea <_strtod_l+0x282>
 800d336:	2201      	movs	r2, #1
 800d338:	f7ff bb92 	b.w	800ca60 <_strtod_l+0x2f8>
 800d33c:	f3af 8000 	nop.w
 800d340:	94a03595 	.word	0x94a03595
 800d344:	3fdfffff 	.word	0x3fdfffff
 800d348:	35afe535 	.word	0x35afe535
 800d34c:	3fe00000 	.word	0x3fe00000
 800d350:	ffc00000 	.word	0xffc00000
 800d354:	41dfffff 	.word	0x41dfffff
 800d358:	94a03595 	.word	0x94a03595
 800d35c:	3fcfffff 	.word	0x3fcfffff
 800d360:	3ff00000 	.word	0x3ff00000
 800d364:	7ff00000 	.word	0x7ff00000
 800d368:	7fe00000 	.word	0x7fe00000
 800d36c:	7c9fffff 	.word	0x7c9fffff
 800d370:	3fe00000 	.word	0x3fe00000
 800d374:	bff00000 	.word	0xbff00000
 800d378:	7fefffff 	.word	0x7fefffff

0800d37c <strtod>:
 800d37c:	460a      	mov	r2, r1
 800d37e:	4601      	mov	r1, r0
 800d380:	4802      	ldr	r0, [pc, #8]	; (800d38c <strtod+0x10>)
 800d382:	4b03      	ldr	r3, [pc, #12]	; (800d390 <strtod+0x14>)
 800d384:	6800      	ldr	r0, [r0, #0]
 800d386:	f7ff b9ef 	b.w	800c768 <_strtod_l>
 800d38a:	bf00      	nop
 800d38c:	20000028 	.word	0x20000028
 800d390:	20000090 	.word	0x20000090

0800d394 <strtok>:
 800d394:	4b16      	ldr	r3, [pc, #88]	; (800d3f0 <strtok+0x5c>)
 800d396:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d398:	681e      	ldr	r6, [r3, #0]
 800d39a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d39c:	4605      	mov	r5, r0
 800d39e:	b9fc      	cbnz	r4, 800d3e0 <strtok+0x4c>
 800d3a0:	2050      	movs	r0, #80	; 0x50
 800d3a2:	9101      	str	r1, [sp, #4]
 800d3a4:	f001 fe4c 	bl	800f040 <malloc>
 800d3a8:	9901      	ldr	r1, [sp, #4]
 800d3aa:	65b0      	str	r0, [r6, #88]	; 0x58
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	b920      	cbnz	r0, 800d3ba <strtok+0x26>
 800d3b0:	4b10      	ldr	r3, [pc, #64]	; (800d3f4 <strtok+0x60>)
 800d3b2:	4811      	ldr	r0, [pc, #68]	; (800d3f8 <strtok+0x64>)
 800d3b4:	2157      	movs	r1, #87	; 0x57
 800d3b6:	f000 f997 	bl	800d6e8 <__assert_func>
 800d3ba:	e9c0 4400 	strd	r4, r4, [r0]
 800d3be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d3c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d3c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d3ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d3ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d3d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d3d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d3da:	6184      	str	r4, [r0, #24]
 800d3dc:	7704      	strb	r4, [r0, #28]
 800d3de:	6244      	str	r4, [r0, #36]	; 0x24
 800d3e0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	4628      	mov	r0, r5
 800d3e6:	b002      	add	sp, #8
 800d3e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3ec:	f000 b806 	b.w	800d3fc <__strtok_r>
 800d3f0:	20000028 	.word	0x20000028
 800d3f4:	08011e08 	.word	0x08011e08
 800d3f8:	08011e1f 	.word	0x08011e1f

0800d3fc <__strtok_r>:
 800d3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3fe:	b908      	cbnz	r0, 800d404 <__strtok_r+0x8>
 800d400:	6810      	ldr	r0, [r2, #0]
 800d402:	b188      	cbz	r0, 800d428 <__strtok_r+0x2c>
 800d404:	4604      	mov	r4, r0
 800d406:	4620      	mov	r0, r4
 800d408:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d40c:	460f      	mov	r7, r1
 800d40e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d412:	b91e      	cbnz	r6, 800d41c <__strtok_r+0x20>
 800d414:	b965      	cbnz	r5, 800d430 <__strtok_r+0x34>
 800d416:	6015      	str	r5, [r2, #0]
 800d418:	4628      	mov	r0, r5
 800d41a:	e005      	b.n	800d428 <__strtok_r+0x2c>
 800d41c:	42b5      	cmp	r5, r6
 800d41e:	d1f6      	bne.n	800d40e <__strtok_r+0x12>
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1f0      	bne.n	800d406 <__strtok_r+0xa>
 800d424:	6014      	str	r4, [r2, #0]
 800d426:	7003      	strb	r3, [r0, #0]
 800d428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d42a:	461c      	mov	r4, r3
 800d42c:	e00c      	b.n	800d448 <__strtok_r+0x4c>
 800d42e:	b915      	cbnz	r5, 800d436 <__strtok_r+0x3a>
 800d430:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d434:	460e      	mov	r6, r1
 800d436:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d43a:	42ab      	cmp	r3, r5
 800d43c:	d1f7      	bne.n	800d42e <__strtok_r+0x32>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d0f3      	beq.n	800d42a <__strtok_r+0x2e>
 800d442:	2300      	movs	r3, #0
 800d444:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d448:	6014      	str	r4, [r2, #0]
 800d44a:	e7ed      	b.n	800d428 <__strtok_r+0x2c>

0800d44c <_strtol_l.isra.0>:
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d452:	d001      	beq.n	800d458 <_strtol_l.isra.0+0xc>
 800d454:	2b24      	cmp	r3, #36	; 0x24
 800d456:	d906      	bls.n	800d466 <_strtol_l.isra.0+0x1a>
 800d458:	f7fe fc24 	bl	800bca4 <__errno>
 800d45c:	2316      	movs	r3, #22
 800d45e:	6003      	str	r3, [r0, #0]
 800d460:	2000      	movs	r0, #0
 800d462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d466:	4f3a      	ldr	r7, [pc, #232]	; (800d550 <_strtol_l.isra.0+0x104>)
 800d468:	468e      	mov	lr, r1
 800d46a:	4676      	mov	r6, lr
 800d46c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d470:	5de5      	ldrb	r5, [r4, r7]
 800d472:	f015 0508 	ands.w	r5, r5, #8
 800d476:	d1f8      	bne.n	800d46a <_strtol_l.isra.0+0x1e>
 800d478:	2c2d      	cmp	r4, #45	; 0x2d
 800d47a:	d134      	bne.n	800d4e6 <_strtol_l.isra.0+0x9a>
 800d47c:	f89e 4000 	ldrb.w	r4, [lr]
 800d480:	f04f 0801 	mov.w	r8, #1
 800d484:	f106 0e02 	add.w	lr, r6, #2
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d05c      	beq.n	800d546 <_strtol_l.isra.0+0xfa>
 800d48c:	2b10      	cmp	r3, #16
 800d48e:	d10c      	bne.n	800d4aa <_strtol_l.isra.0+0x5e>
 800d490:	2c30      	cmp	r4, #48	; 0x30
 800d492:	d10a      	bne.n	800d4aa <_strtol_l.isra.0+0x5e>
 800d494:	f89e 4000 	ldrb.w	r4, [lr]
 800d498:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d49c:	2c58      	cmp	r4, #88	; 0x58
 800d49e:	d14d      	bne.n	800d53c <_strtol_l.isra.0+0xf0>
 800d4a0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d4a4:	2310      	movs	r3, #16
 800d4a6:	f10e 0e02 	add.w	lr, lr, #2
 800d4aa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d4ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d4b2:	2600      	movs	r6, #0
 800d4b4:	fbbc f9f3 	udiv	r9, ip, r3
 800d4b8:	4635      	mov	r5, r6
 800d4ba:	fb03 ca19 	mls	sl, r3, r9, ip
 800d4be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d4c2:	2f09      	cmp	r7, #9
 800d4c4:	d818      	bhi.n	800d4f8 <_strtol_l.isra.0+0xac>
 800d4c6:	463c      	mov	r4, r7
 800d4c8:	42a3      	cmp	r3, r4
 800d4ca:	dd24      	ble.n	800d516 <_strtol_l.isra.0+0xca>
 800d4cc:	2e00      	cmp	r6, #0
 800d4ce:	db1f      	blt.n	800d510 <_strtol_l.isra.0+0xc4>
 800d4d0:	45a9      	cmp	r9, r5
 800d4d2:	d31d      	bcc.n	800d510 <_strtol_l.isra.0+0xc4>
 800d4d4:	d101      	bne.n	800d4da <_strtol_l.isra.0+0x8e>
 800d4d6:	45a2      	cmp	sl, r4
 800d4d8:	db1a      	blt.n	800d510 <_strtol_l.isra.0+0xc4>
 800d4da:	fb05 4503 	mla	r5, r5, r3, r4
 800d4de:	2601      	movs	r6, #1
 800d4e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d4e4:	e7eb      	b.n	800d4be <_strtol_l.isra.0+0x72>
 800d4e6:	2c2b      	cmp	r4, #43	; 0x2b
 800d4e8:	bf08      	it	eq
 800d4ea:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d4ee:	46a8      	mov	r8, r5
 800d4f0:	bf08      	it	eq
 800d4f2:	f106 0e02 	addeq.w	lr, r6, #2
 800d4f6:	e7c7      	b.n	800d488 <_strtol_l.isra.0+0x3c>
 800d4f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d4fc:	2f19      	cmp	r7, #25
 800d4fe:	d801      	bhi.n	800d504 <_strtol_l.isra.0+0xb8>
 800d500:	3c37      	subs	r4, #55	; 0x37
 800d502:	e7e1      	b.n	800d4c8 <_strtol_l.isra.0+0x7c>
 800d504:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d508:	2f19      	cmp	r7, #25
 800d50a:	d804      	bhi.n	800d516 <_strtol_l.isra.0+0xca>
 800d50c:	3c57      	subs	r4, #87	; 0x57
 800d50e:	e7db      	b.n	800d4c8 <_strtol_l.isra.0+0x7c>
 800d510:	f04f 36ff 	mov.w	r6, #4294967295
 800d514:	e7e4      	b.n	800d4e0 <_strtol_l.isra.0+0x94>
 800d516:	2e00      	cmp	r6, #0
 800d518:	da05      	bge.n	800d526 <_strtol_l.isra.0+0xda>
 800d51a:	2322      	movs	r3, #34	; 0x22
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	4665      	mov	r5, ip
 800d520:	b942      	cbnz	r2, 800d534 <_strtol_l.isra.0+0xe8>
 800d522:	4628      	mov	r0, r5
 800d524:	e79d      	b.n	800d462 <_strtol_l.isra.0+0x16>
 800d526:	f1b8 0f00 	cmp.w	r8, #0
 800d52a:	d000      	beq.n	800d52e <_strtol_l.isra.0+0xe2>
 800d52c:	426d      	negs	r5, r5
 800d52e:	2a00      	cmp	r2, #0
 800d530:	d0f7      	beq.n	800d522 <_strtol_l.isra.0+0xd6>
 800d532:	b10e      	cbz	r6, 800d538 <_strtol_l.isra.0+0xec>
 800d534:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d538:	6011      	str	r1, [r2, #0]
 800d53a:	e7f2      	b.n	800d522 <_strtol_l.isra.0+0xd6>
 800d53c:	2430      	movs	r4, #48	; 0x30
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1b3      	bne.n	800d4aa <_strtol_l.isra.0+0x5e>
 800d542:	2308      	movs	r3, #8
 800d544:	e7b1      	b.n	800d4aa <_strtol_l.isra.0+0x5e>
 800d546:	2c30      	cmp	r4, #48	; 0x30
 800d548:	d0a4      	beq.n	800d494 <_strtol_l.isra.0+0x48>
 800d54a:	230a      	movs	r3, #10
 800d54c:	e7ad      	b.n	800d4aa <_strtol_l.isra.0+0x5e>
 800d54e:	bf00      	nop
 800d550:	08011ebd 	.word	0x08011ebd

0800d554 <strtol>:
 800d554:	4613      	mov	r3, r2
 800d556:	460a      	mov	r2, r1
 800d558:	4601      	mov	r1, r0
 800d55a:	4802      	ldr	r0, [pc, #8]	; (800d564 <strtol+0x10>)
 800d55c:	6800      	ldr	r0, [r0, #0]
 800d55e:	f7ff bf75 	b.w	800d44c <_strtol_l.isra.0>
 800d562:	bf00      	nop
 800d564:	20000028 	.word	0x20000028

0800d568 <__swbuf_r>:
 800d568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56a:	460e      	mov	r6, r1
 800d56c:	4614      	mov	r4, r2
 800d56e:	4605      	mov	r5, r0
 800d570:	b118      	cbz	r0, 800d57a <__swbuf_r+0x12>
 800d572:	6983      	ldr	r3, [r0, #24]
 800d574:	b90b      	cbnz	r3, 800d57a <__swbuf_r+0x12>
 800d576:	f001 f87b 	bl	800e670 <__sinit>
 800d57a:	4b21      	ldr	r3, [pc, #132]	; (800d600 <__swbuf_r+0x98>)
 800d57c:	429c      	cmp	r4, r3
 800d57e:	d12b      	bne.n	800d5d8 <__swbuf_r+0x70>
 800d580:	686c      	ldr	r4, [r5, #4]
 800d582:	69a3      	ldr	r3, [r4, #24]
 800d584:	60a3      	str	r3, [r4, #8]
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	071a      	lsls	r2, r3, #28
 800d58a:	d52f      	bpl.n	800d5ec <__swbuf_r+0x84>
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	b36b      	cbz	r3, 800d5ec <__swbuf_r+0x84>
 800d590:	6923      	ldr	r3, [r4, #16]
 800d592:	6820      	ldr	r0, [r4, #0]
 800d594:	1ac0      	subs	r0, r0, r3
 800d596:	6963      	ldr	r3, [r4, #20]
 800d598:	b2f6      	uxtb	r6, r6
 800d59a:	4283      	cmp	r3, r0
 800d59c:	4637      	mov	r7, r6
 800d59e:	dc04      	bgt.n	800d5aa <__swbuf_r+0x42>
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	f000 ffbe 	bl	800e524 <_fflush_r>
 800d5a8:	bb30      	cbnz	r0, 800d5f8 <__swbuf_r+0x90>
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	60a3      	str	r3, [r4, #8]
 800d5b0:	6823      	ldr	r3, [r4, #0]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	6022      	str	r2, [r4, #0]
 800d5b6:	701e      	strb	r6, [r3, #0]
 800d5b8:	6963      	ldr	r3, [r4, #20]
 800d5ba:	3001      	adds	r0, #1
 800d5bc:	4283      	cmp	r3, r0
 800d5be:	d004      	beq.n	800d5ca <__swbuf_r+0x62>
 800d5c0:	89a3      	ldrh	r3, [r4, #12]
 800d5c2:	07db      	lsls	r3, r3, #31
 800d5c4:	d506      	bpl.n	800d5d4 <__swbuf_r+0x6c>
 800d5c6:	2e0a      	cmp	r6, #10
 800d5c8:	d104      	bne.n	800d5d4 <__swbuf_r+0x6c>
 800d5ca:	4621      	mov	r1, r4
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	f000 ffa9 	bl	800e524 <_fflush_r>
 800d5d2:	b988      	cbnz	r0, 800d5f8 <__swbuf_r+0x90>
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <__swbuf_r+0x9c>)
 800d5da:	429c      	cmp	r4, r3
 800d5dc:	d101      	bne.n	800d5e2 <__swbuf_r+0x7a>
 800d5de:	68ac      	ldr	r4, [r5, #8]
 800d5e0:	e7cf      	b.n	800d582 <__swbuf_r+0x1a>
 800d5e2:	4b09      	ldr	r3, [pc, #36]	; (800d608 <__swbuf_r+0xa0>)
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	bf08      	it	eq
 800d5e8:	68ec      	ldreq	r4, [r5, #12]
 800d5ea:	e7ca      	b.n	800d582 <__swbuf_r+0x1a>
 800d5ec:	4621      	mov	r1, r4
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	f000 f80c 	bl	800d60c <__swsetup_r>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	d0cb      	beq.n	800d590 <__swbuf_r+0x28>
 800d5f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d5fc:	e7ea      	b.n	800d5d4 <__swbuf_r+0x6c>
 800d5fe:	bf00      	nop
 800d600:	0801205c 	.word	0x0801205c
 800d604:	0801207c 	.word	0x0801207c
 800d608:	0801203c 	.word	0x0801203c

0800d60c <__swsetup_r>:
 800d60c:	4b32      	ldr	r3, [pc, #200]	; (800d6d8 <__swsetup_r+0xcc>)
 800d60e:	b570      	push	{r4, r5, r6, lr}
 800d610:	681d      	ldr	r5, [r3, #0]
 800d612:	4606      	mov	r6, r0
 800d614:	460c      	mov	r4, r1
 800d616:	b125      	cbz	r5, 800d622 <__swsetup_r+0x16>
 800d618:	69ab      	ldr	r3, [r5, #24]
 800d61a:	b913      	cbnz	r3, 800d622 <__swsetup_r+0x16>
 800d61c:	4628      	mov	r0, r5
 800d61e:	f001 f827 	bl	800e670 <__sinit>
 800d622:	4b2e      	ldr	r3, [pc, #184]	; (800d6dc <__swsetup_r+0xd0>)
 800d624:	429c      	cmp	r4, r3
 800d626:	d10f      	bne.n	800d648 <__swsetup_r+0x3c>
 800d628:	686c      	ldr	r4, [r5, #4]
 800d62a:	89a3      	ldrh	r3, [r4, #12]
 800d62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d630:	0719      	lsls	r1, r3, #28
 800d632:	d42c      	bmi.n	800d68e <__swsetup_r+0x82>
 800d634:	06dd      	lsls	r5, r3, #27
 800d636:	d411      	bmi.n	800d65c <__swsetup_r+0x50>
 800d638:	2309      	movs	r3, #9
 800d63a:	6033      	str	r3, [r6, #0]
 800d63c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d640:	81a3      	strh	r3, [r4, #12]
 800d642:	f04f 30ff 	mov.w	r0, #4294967295
 800d646:	e03e      	b.n	800d6c6 <__swsetup_r+0xba>
 800d648:	4b25      	ldr	r3, [pc, #148]	; (800d6e0 <__swsetup_r+0xd4>)
 800d64a:	429c      	cmp	r4, r3
 800d64c:	d101      	bne.n	800d652 <__swsetup_r+0x46>
 800d64e:	68ac      	ldr	r4, [r5, #8]
 800d650:	e7eb      	b.n	800d62a <__swsetup_r+0x1e>
 800d652:	4b24      	ldr	r3, [pc, #144]	; (800d6e4 <__swsetup_r+0xd8>)
 800d654:	429c      	cmp	r4, r3
 800d656:	bf08      	it	eq
 800d658:	68ec      	ldreq	r4, [r5, #12]
 800d65a:	e7e6      	b.n	800d62a <__swsetup_r+0x1e>
 800d65c:	0758      	lsls	r0, r3, #29
 800d65e:	d512      	bpl.n	800d686 <__swsetup_r+0x7a>
 800d660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d662:	b141      	cbz	r1, 800d676 <__swsetup_r+0x6a>
 800d664:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d668:	4299      	cmp	r1, r3
 800d66a:	d002      	beq.n	800d672 <__swsetup_r+0x66>
 800d66c:	4630      	mov	r0, r6
 800d66e:	f002 f9d9 	bl	800fa24 <_free_r>
 800d672:	2300      	movs	r3, #0
 800d674:	6363      	str	r3, [r4, #52]	; 0x34
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d67c:	81a3      	strh	r3, [r4, #12]
 800d67e:	2300      	movs	r3, #0
 800d680:	6063      	str	r3, [r4, #4]
 800d682:	6923      	ldr	r3, [r4, #16]
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	f043 0308 	orr.w	r3, r3, #8
 800d68c:	81a3      	strh	r3, [r4, #12]
 800d68e:	6923      	ldr	r3, [r4, #16]
 800d690:	b94b      	cbnz	r3, 800d6a6 <__swsetup_r+0x9a>
 800d692:	89a3      	ldrh	r3, [r4, #12]
 800d694:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d69c:	d003      	beq.n	800d6a6 <__swsetup_r+0x9a>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	f001 fc8d 	bl	800efc0 <__smakebuf_r>
 800d6a6:	89a0      	ldrh	r0, [r4, #12]
 800d6a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6ac:	f010 0301 	ands.w	r3, r0, #1
 800d6b0:	d00a      	beq.n	800d6c8 <__swsetup_r+0xbc>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	60a3      	str	r3, [r4, #8]
 800d6b6:	6963      	ldr	r3, [r4, #20]
 800d6b8:	425b      	negs	r3, r3
 800d6ba:	61a3      	str	r3, [r4, #24]
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	b943      	cbnz	r3, 800d6d2 <__swsetup_r+0xc6>
 800d6c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d6c4:	d1ba      	bne.n	800d63c <__swsetup_r+0x30>
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}
 800d6c8:	0781      	lsls	r1, r0, #30
 800d6ca:	bf58      	it	pl
 800d6cc:	6963      	ldrpl	r3, [r4, #20]
 800d6ce:	60a3      	str	r3, [r4, #8]
 800d6d0:	e7f4      	b.n	800d6bc <__swsetup_r+0xb0>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e7f7      	b.n	800d6c6 <__swsetup_r+0xba>
 800d6d6:	bf00      	nop
 800d6d8:	20000028 	.word	0x20000028
 800d6dc:	0801205c 	.word	0x0801205c
 800d6e0:	0801207c 	.word	0x0801207c
 800d6e4:	0801203c 	.word	0x0801203c

0800d6e8 <__assert_func>:
 800d6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ea:	4614      	mov	r4, r2
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	4b09      	ldr	r3, [pc, #36]	; (800d714 <__assert_func+0x2c>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4605      	mov	r5, r0
 800d6f4:	68d8      	ldr	r0, [r3, #12]
 800d6f6:	b14c      	cbz	r4, 800d70c <__assert_func+0x24>
 800d6f8:	4b07      	ldr	r3, [pc, #28]	; (800d718 <__assert_func+0x30>)
 800d6fa:	9100      	str	r1, [sp, #0]
 800d6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d700:	4906      	ldr	r1, [pc, #24]	; (800d71c <__assert_func+0x34>)
 800d702:	462b      	mov	r3, r5
 800d704:	f001 f832 	bl	800e76c <fiprintf>
 800d708:	f002 fc4a 	bl	800ffa0 <abort>
 800d70c:	4b04      	ldr	r3, [pc, #16]	; (800d720 <__assert_func+0x38>)
 800d70e:	461c      	mov	r4, r3
 800d710:	e7f3      	b.n	800d6fa <__assert_func+0x12>
 800d712:	bf00      	nop
 800d714:	20000028 	.word	0x20000028
 800d718:	08011e80 	.word	0x08011e80
 800d71c:	08011e8d 	.word	0x08011e8d
 800d720:	08011ebb 	.word	0x08011ebb

0800d724 <quorem>:
 800d724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	6903      	ldr	r3, [r0, #16]
 800d72a:	690c      	ldr	r4, [r1, #16]
 800d72c:	42a3      	cmp	r3, r4
 800d72e:	4607      	mov	r7, r0
 800d730:	f2c0 8081 	blt.w	800d836 <quorem+0x112>
 800d734:	3c01      	subs	r4, #1
 800d736:	f101 0814 	add.w	r8, r1, #20
 800d73a:	f100 0514 	add.w	r5, r0, #20
 800d73e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d742:	9301      	str	r3, [sp, #4]
 800d744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d74c:	3301      	adds	r3, #1
 800d74e:	429a      	cmp	r2, r3
 800d750:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d754:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d758:	fbb2 f6f3 	udiv	r6, r2, r3
 800d75c:	d331      	bcc.n	800d7c2 <quorem+0x9e>
 800d75e:	f04f 0e00 	mov.w	lr, #0
 800d762:	4640      	mov	r0, r8
 800d764:	46ac      	mov	ip, r5
 800d766:	46f2      	mov	sl, lr
 800d768:	f850 2b04 	ldr.w	r2, [r0], #4
 800d76c:	b293      	uxth	r3, r2
 800d76e:	fb06 e303 	mla	r3, r6, r3, lr
 800d772:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d776:	b29b      	uxth	r3, r3
 800d778:	ebaa 0303 	sub.w	r3, sl, r3
 800d77c:	0c12      	lsrs	r2, r2, #16
 800d77e:	f8dc a000 	ldr.w	sl, [ip]
 800d782:	fb06 e202 	mla	r2, r6, r2, lr
 800d786:	fa13 f38a 	uxtah	r3, r3, sl
 800d78a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d78e:	fa1f fa82 	uxth.w	sl, r2
 800d792:	f8dc 2000 	ldr.w	r2, [ip]
 800d796:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d79a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7a4:	4581      	cmp	r9, r0
 800d7a6:	f84c 3b04 	str.w	r3, [ip], #4
 800d7aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d7ae:	d2db      	bcs.n	800d768 <quorem+0x44>
 800d7b0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d7b4:	b92b      	cbnz	r3, 800d7c2 <quorem+0x9e>
 800d7b6:	9b01      	ldr	r3, [sp, #4]
 800d7b8:	3b04      	subs	r3, #4
 800d7ba:	429d      	cmp	r5, r3
 800d7bc:	461a      	mov	r2, r3
 800d7be:	d32e      	bcc.n	800d81e <quorem+0xfa>
 800d7c0:	613c      	str	r4, [r7, #16]
 800d7c2:	4638      	mov	r0, r7
 800d7c4:	f001 ff2c 	bl	800f620 <__mcmp>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	db24      	blt.n	800d816 <quorem+0xf2>
 800d7cc:	3601      	adds	r6, #1
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f04f 0c00 	mov.w	ip, #0
 800d7d4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d7d8:	f8d0 e000 	ldr.w	lr, [r0]
 800d7dc:	b293      	uxth	r3, r2
 800d7de:	ebac 0303 	sub.w	r3, ip, r3
 800d7e2:	0c12      	lsrs	r2, r2, #16
 800d7e4:	fa13 f38e 	uxtah	r3, r3, lr
 800d7e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d7ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d7f6:	45c1      	cmp	r9, r8
 800d7f8:	f840 3b04 	str.w	r3, [r0], #4
 800d7fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d800:	d2e8      	bcs.n	800d7d4 <quorem+0xb0>
 800d802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d80a:	b922      	cbnz	r2, 800d816 <quorem+0xf2>
 800d80c:	3b04      	subs	r3, #4
 800d80e:	429d      	cmp	r5, r3
 800d810:	461a      	mov	r2, r3
 800d812:	d30a      	bcc.n	800d82a <quorem+0x106>
 800d814:	613c      	str	r4, [r7, #16]
 800d816:	4630      	mov	r0, r6
 800d818:	b003      	add	sp, #12
 800d81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81e:	6812      	ldr	r2, [r2, #0]
 800d820:	3b04      	subs	r3, #4
 800d822:	2a00      	cmp	r2, #0
 800d824:	d1cc      	bne.n	800d7c0 <quorem+0x9c>
 800d826:	3c01      	subs	r4, #1
 800d828:	e7c7      	b.n	800d7ba <quorem+0x96>
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	3b04      	subs	r3, #4
 800d82e:	2a00      	cmp	r2, #0
 800d830:	d1f0      	bne.n	800d814 <quorem+0xf0>
 800d832:	3c01      	subs	r4, #1
 800d834:	e7eb      	b.n	800d80e <quorem+0xea>
 800d836:	2000      	movs	r0, #0
 800d838:	e7ee      	b.n	800d818 <quorem+0xf4>
 800d83a:	0000      	movs	r0, r0
 800d83c:	0000      	movs	r0, r0
	...

0800d840 <_dtoa_r>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	ed2d 8b02 	vpush	{d8}
 800d848:	ec57 6b10 	vmov	r6, r7, d0
 800d84c:	b095      	sub	sp, #84	; 0x54
 800d84e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d850:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d854:	9105      	str	r1, [sp, #20]
 800d856:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d85a:	4604      	mov	r4, r0
 800d85c:	9209      	str	r2, [sp, #36]	; 0x24
 800d85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d860:	b975      	cbnz	r5, 800d880 <_dtoa_r+0x40>
 800d862:	2010      	movs	r0, #16
 800d864:	f001 fbec 	bl	800f040 <malloc>
 800d868:	4602      	mov	r2, r0
 800d86a:	6260      	str	r0, [r4, #36]	; 0x24
 800d86c:	b920      	cbnz	r0, 800d878 <_dtoa_r+0x38>
 800d86e:	4bb2      	ldr	r3, [pc, #712]	; (800db38 <_dtoa_r+0x2f8>)
 800d870:	21ea      	movs	r1, #234	; 0xea
 800d872:	48b2      	ldr	r0, [pc, #712]	; (800db3c <_dtoa_r+0x2fc>)
 800d874:	f7ff ff38 	bl	800d6e8 <__assert_func>
 800d878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d87c:	6005      	str	r5, [r0, #0]
 800d87e:	60c5      	str	r5, [r0, #12]
 800d880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d882:	6819      	ldr	r1, [r3, #0]
 800d884:	b151      	cbz	r1, 800d89c <_dtoa_r+0x5c>
 800d886:	685a      	ldr	r2, [r3, #4]
 800d888:	604a      	str	r2, [r1, #4]
 800d88a:	2301      	movs	r3, #1
 800d88c:	4093      	lsls	r3, r2
 800d88e:	608b      	str	r3, [r1, #8]
 800d890:	4620      	mov	r0, r4
 800d892:	f001 fc3d 	bl	800f110 <_Bfree>
 800d896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	1e3b      	subs	r3, r7, #0
 800d89e:	bfb9      	ittee	lt
 800d8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8a4:	9303      	strlt	r3, [sp, #12]
 800d8a6:	2300      	movge	r3, #0
 800d8a8:	f8c8 3000 	strge.w	r3, [r8]
 800d8ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d8b0:	4ba3      	ldr	r3, [pc, #652]	; (800db40 <_dtoa_r+0x300>)
 800d8b2:	bfbc      	itt	lt
 800d8b4:	2201      	movlt	r2, #1
 800d8b6:	f8c8 2000 	strlt.w	r2, [r8]
 800d8ba:	ea33 0309 	bics.w	r3, r3, r9
 800d8be:	d11b      	bne.n	800d8f8 <_dtoa_r+0xb8>
 800d8c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8cc:	4333      	orrs	r3, r6
 800d8ce:	f000 857a 	beq.w	800e3c6 <_dtoa_r+0xb86>
 800d8d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8d4:	b963      	cbnz	r3, 800d8f0 <_dtoa_r+0xb0>
 800d8d6:	4b9b      	ldr	r3, [pc, #620]	; (800db44 <_dtoa_r+0x304>)
 800d8d8:	e024      	b.n	800d924 <_dtoa_r+0xe4>
 800d8da:	4b9b      	ldr	r3, [pc, #620]	; (800db48 <_dtoa_r+0x308>)
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	9800      	ldr	r0, [sp, #0]
 800d8e6:	b015      	add	sp, #84	; 0x54
 800d8e8:	ecbd 8b02 	vpop	{d8}
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f0:	4b94      	ldr	r3, [pc, #592]	; (800db44 <_dtoa_r+0x304>)
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	3303      	adds	r3, #3
 800d8f6:	e7f3      	b.n	800d8e0 <_dtoa_r+0xa0>
 800d8f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	ec51 0b17 	vmov	r0, r1, d7
 800d902:	2300      	movs	r3, #0
 800d904:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d908:	f7f3 f90e 	bl	8000b28 <__aeabi_dcmpeq>
 800d90c:	4680      	mov	r8, r0
 800d90e:	b158      	cbz	r0, 800d928 <_dtoa_r+0xe8>
 800d910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d912:	2301      	movs	r3, #1
 800d914:	6013      	str	r3, [r2, #0]
 800d916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 8551 	beq.w	800e3c0 <_dtoa_r+0xb80>
 800d91e:	488b      	ldr	r0, [pc, #556]	; (800db4c <_dtoa_r+0x30c>)
 800d920:	6018      	str	r0, [r3, #0]
 800d922:	1e43      	subs	r3, r0, #1
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	e7dd      	b.n	800d8e4 <_dtoa_r+0xa4>
 800d928:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d92c:	aa12      	add	r2, sp, #72	; 0x48
 800d92e:	a913      	add	r1, sp, #76	; 0x4c
 800d930:	4620      	mov	r0, r4
 800d932:	f001 ff95 	bl	800f860 <__d2b>
 800d936:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d93a:	4683      	mov	fp, r0
 800d93c:	2d00      	cmp	r5, #0
 800d93e:	d07c      	beq.n	800da3a <_dtoa_r+0x1fa>
 800d940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d942:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d946:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d94a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d94e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d952:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d956:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d95a:	4b7d      	ldr	r3, [pc, #500]	; (800db50 <_dtoa_r+0x310>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	4630      	mov	r0, r6
 800d960:	4639      	mov	r1, r7
 800d962:	f7f2 fcc1 	bl	80002e8 <__aeabi_dsub>
 800d966:	a36e      	add	r3, pc, #440	; (adr r3, 800db20 <_dtoa_r+0x2e0>)
 800d968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96c:	f7f2 fe74 	bl	8000658 <__aeabi_dmul>
 800d970:	a36d      	add	r3, pc, #436	; (adr r3, 800db28 <_dtoa_r+0x2e8>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fcb9 	bl	80002ec <__adddf3>
 800d97a:	4606      	mov	r6, r0
 800d97c:	4628      	mov	r0, r5
 800d97e:	460f      	mov	r7, r1
 800d980:	f7f2 fe00 	bl	8000584 <__aeabi_i2d>
 800d984:	a36a      	add	r3, pc, #424	; (adr r3, 800db30 <_dtoa_r+0x2f0>)
 800d986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98a:	f7f2 fe65 	bl	8000658 <__aeabi_dmul>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4630      	mov	r0, r6
 800d994:	4639      	mov	r1, r7
 800d996:	f7f2 fca9 	bl	80002ec <__adddf3>
 800d99a:	4606      	mov	r6, r0
 800d99c:	460f      	mov	r7, r1
 800d99e:	f7f3 f90b 	bl	8000bb8 <__aeabi_d2iz>
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	4682      	mov	sl, r0
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f3 f8c6 	bl	8000b3c <__aeabi_dcmplt>
 800d9b0:	b148      	cbz	r0, 800d9c6 <_dtoa_r+0x186>
 800d9b2:	4650      	mov	r0, sl
 800d9b4:	f7f2 fde6 	bl	8000584 <__aeabi_i2d>
 800d9b8:	4632      	mov	r2, r6
 800d9ba:	463b      	mov	r3, r7
 800d9bc:	f7f3 f8b4 	bl	8000b28 <__aeabi_dcmpeq>
 800d9c0:	b908      	cbnz	r0, 800d9c6 <_dtoa_r+0x186>
 800d9c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9c6:	f1ba 0f16 	cmp.w	sl, #22
 800d9ca:	d854      	bhi.n	800da76 <_dtoa_r+0x236>
 800d9cc:	4b61      	ldr	r3, [pc, #388]	; (800db54 <_dtoa_r+0x314>)
 800d9ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d9da:	f7f3 f8af 	bl	8000b3c <__aeabi_dcmplt>
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d04b      	beq.n	800da7a <_dtoa_r+0x23a>
 800d9e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	930e      	str	r3, [sp, #56]	; 0x38
 800d9ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d9ec:	1b5d      	subs	r5, r3, r5
 800d9ee:	1e6b      	subs	r3, r5, #1
 800d9f0:	9304      	str	r3, [sp, #16]
 800d9f2:	bf43      	ittte	mi
 800d9f4:	2300      	movmi	r3, #0
 800d9f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800d9fa:	9304      	strmi	r3, [sp, #16]
 800d9fc:	f04f 0800 	movpl.w	r8, #0
 800da00:	f1ba 0f00 	cmp.w	sl, #0
 800da04:	db3b      	blt.n	800da7e <_dtoa_r+0x23e>
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800da0c:	4453      	add	r3, sl
 800da0e:	9304      	str	r3, [sp, #16]
 800da10:	2300      	movs	r3, #0
 800da12:	9306      	str	r3, [sp, #24]
 800da14:	9b05      	ldr	r3, [sp, #20]
 800da16:	2b09      	cmp	r3, #9
 800da18:	d869      	bhi.n	800daee <_dtoa_r+0x2ae>
 800da1a:	2b05      	cmp	r3, #5
 800da1c:	bfc4      	itt	gt
 800da1e:	3b04      	subgt	r3, #4
 800da20:	9305      	strgt	r3, [sp, #20]
 800da22:	9b05      	ldr	r3, [sp, #20]
 800da24:	f1a3 0302 	sub.w	r3, r3, #2
 800da28:	bfcc      	ite	gt
 800da2a:	2500      	movgt	r5, #0
 800da2c:	2501      	movle	r5, #1
 800da2e:	2b03      	cmp	r3, #3
 800da30:	d869      	bhi.n	800db06 <_dtoa_r+0x2c6>
 800da32:	e8df f003 	tbb	[pc, r3]
 800da36:	4e2c      	.short	0x4e2c
 800da38:	5a4c      	.short	0x5a4c
 800da3a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800da3e:	441d      	add	r5, r3
 800da40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800da44:	2b20      	cmp	r3, #32
 800da46:	bfc1      	itttt	gt
 800da48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800da4c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800da50:	fa09 f303 	lslgt.w	r3, r9, r3
 800da54:	fa26 f000 	lsrgt.w	r0, r6, r0
 800da58:	bfda      	itte	le
 800da5a:	f1c3 0320 	rsble	r3, r3, #32
 800da5e:	fa06 f003 	lslle.w	r0, r6, r3
 800da62:	4318      	orrgt	r0, r3
 800da64:	f7f2 fd7e 	bl	8000564 <__aeabi_ui2d>
 800da68:	2301      	movs	r3, #1
 800da6a:	4606      	mov	r6, r0
 800da6c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800da70:	3d01      	subs	r5, #1
 800da72:	9310      	str	r3, [sp, #64]	; 0x40
 800da74:	e771      	b.n	800d95a <_dtoa_r+0x11a>
 800da76:	2301      	movs	r3, #1
 800da78:	e7b6      	b.n	800d9e8 <_dtoa_r+0x1a8>
 800da7a:	900e      	str	r0, [sp, #56]	; 0x38
 800da7c:	e7b5      	b.n	800d9ea <_dtoa_r+0x1aa>
 800da7e:	f1ca 0300 	rsb	r3, sl, #0
 800da82:	9306      	str	r3, [sp, #24]
 800da84:	2300      	movs	r3, #0
 800da86:	eba8 080a 	sub.w	r8, r8, sl
 800da8a:	930d      	str	r3, [sp, #52]	; 0x34
 800da8c:	e7c2      	b.n	800da14 <_dtoa_r+0x1d4>
 800da8e:	2300      	movs	r3, #0
 800da90:	9308      	str	r3, [sp, #32]
 800da92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da94:	2b00      	cmp	r3, #0
 800da96:	dc39      	bgt.n	800db0c <_dtoa_r+0x2cc>
 800da98:	f04f 0901 	mov.w	r9, #1
 800da9c:	f8cd 9004 	str.w	r9, [sp, #4]
 800daa0:	464b      	mov	r3, r9
 800daa2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800daa6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800daa8:	2200      	movs	r2, #0
 800daaa:	6042      	str	r2, [r0, #4]
 800daac:	2204      	movs	r2, #4
 800daae:	f102 0614 	add.w	r6, r2, #20
 800dab2:	429e      	cmp	r6, r3
 800dab4:	6841      	ldr	r1, [r0, #4]
 800dab6:	d92f      	bls.n	800db18 <_dtoa_r+0x2d8>
 800dab8:	4620      	mov	r0, r4
 800daba:	f001 fae9 	bl	800f090 <_Balloc>
 800dabe:	9000      	str	r0, [sp, #0]
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d14b      	bne.n	800db5c <_dtoa_r+0x31c>
 800dac4:	4b24      	ldr	r3, [pc, #144]	; (800db58 <_dtoa_r+0x318>)
 800dac6:	4602      	mov	r2, r0
 800dac8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dacc:	e6d1      	b.n	800d872 <_dtoa_r+0x32>
 800dace:	2301      	movs	r3, #1
 800dad0:	e7de      	b.n	800da90 <_dtoa_r+0x250>
 800dad2:	2300      	movs	r3, #0
 800dad4:	9308      	str	r3, [sp, #32]
 800dad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad8:	eb0a 0903 	add.w	r9, sl, r3
 800dadc:	f109 0301 	add.w	r3, r9, #1
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	bfb8      	it	lt
 800dae6:	2301      	movlt	r3, #1
 800dae8:	e7dd      	b.n	800daa6 <_dtoa_r+0x266>
 800daea:	2301      	movs	r3, #1
 800daec:	e7f2      	b.n	800dad4 <_dtoa_r+0x294>
 800daee:	2501      	movs	r5, #1
 800daf0:	2300      	movs	r3, #0
 800daf2:	9305      	str	r3, [sp, #20]
 800daf4:	9508      	str	r5, [sp, #32]
 800daf6:	f04f 39ff 	mov.w	r9, #4294967295
 800dafa:	2200      	movs	r2, #0
 800dafc:	f8cd 9004 	str.w	r9, [sp, #4]
 800db00:	2312      	movs	r3, #18
 800db02:	9209      	str	r2, [sp, #36]	; 0x24
 800db04:	e7cf      	b.n	800daa6 <_dtoa_r+0x266>
 800db06:	2301      	movs	r3, #1
 800db08:	9308      	str	r3, [sp, #32]
 800db0a:	e7f4      	b.n	800daf6 <_dtoa_r+0x2b6>
 800db0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800db10:	f8cd 9004 	str.w	r9, [sp, #4]
 800db14:	464b      	mov	r3, r9
 800db16:	e7c6      	b.n	800daa6 <_dtoa_r+0x266>
 800db18:	3101      	adds	r1, #1
 800db1a:	6041      	str	r1, [r0, #4]
 800db1c:	0052      	lsls	r2, r2, #1
 800db1e:	e7c6      	b.n	800daae <_dtoa_r+0x26e>
 800db20:	636f4361 	.word	0x636f4361
 800db24:	3fd287a7 	.word	0x3fd287a7
 800db28:	8b60c8b3 	.word	0x8b60c8b3
 800db2c:	3fc68a28 	.word	0x3fc68a28
 800db30:	509f79fb 	.word	0x509f79fb
 800db34:	3fd34413 	.word	0x3fd34413
 800db38:	08011e08 	.word	0x08011e08
 800db3c:	08011fca 	.word	0x08011fca
 800db40:	7ff00000 	.word	0x7ff00000
 800db44:	08011fc6 	.word	0x08011fc6
 800db48:	08011fbd 	.word	0x08011fbd
 800db4c:	08011d95 	.word	0x08011d95
 800db50:	3ff80000 	.word	0x3ff80000
 800db54:	080121a8 	.word	0x080121a8
 800db58:	08012029 	.word	0x08012029
 800db5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db5e:	9a00      	ldr	r2, [sp, #0]
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	9b01      	ldr	r3, [sp, #4]
 800db64:	2b0e      	cmp	r3, #14
 800db66:	f200 80ad 	bhi.w	800dcc4 <_dtoa_r+0x484>
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	f000 80aa 	beq.w	800dcc4 <_dtoa_r+0x484>
 800db70:	f1ba 0f00 	cmp.w	sl, #0
 800db74:	dd36      	ble.n	800dbe4 <_dtoa_r+0x3a4>
 800db76:	4ac3      	ldr	r2, [pc, #780]	; (800de84 <_dtoa_r+0x644>)
 800db78:	f00a 030f 	and.w	r3, sl, #15
 800db7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db80:	ed93 7b00 	vldr	d7, [r3]
 800db84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800db88:	ea4f 172a 	mov.w	r7, sl, asr #4
 800db8c:	eeb0 8a47 	vmov.f32	s16, s14
 800db90:	eef0 8a67 	vmov.f32	s17, s15
 800db94:	d016      	beq.n	800dbc4 <_dtoa_r+0x384>
 800db96:	4bbc      	ldr	r3, [pc, #752]	; (800de88 <_dtoa_r+0x648>)
 800db98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dba0:	f7f2 fe84 	bl	80008ac <__aeabi_ddiv>
 800dba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dba8:	f007 070f 	and.w	r7, r7, #15
 800dbac:	2503      	movs	r5, #3
 800dbae:	4eb6      	ldr	r6, [pc, #728]	; (800de88 <_dtoa_r+0x648>)
 800dbb0:	b957      	cbnz	r7, 800dbc8 <_dtoa_r+0x388>
 800dbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbb6:	ec53 2b18 	vmov	r2, r3, d8
 800dbba:	f7f2 fe77 	bl	80008ac <__aeabi_ddiv>
 800dbbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbc2:	e029      	b.n	800dc18 <_dtoa_r+0x3d8>
 800dbc4:	2502      	movs	r5, #2
 800dbc6:	e7f2      	b.n	800dbae <_dtoa_r+0x36e>
 800dbc8:	07f9      	lsls	r1, r7, #31
 800dbca:	d508      	bpl.n	800dbde <_dtoa_r+0x39e>
 800dbcc:	ec51 0b18 	vmov	r0, r1, d8
 800dbd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbd4:	f7f2 fd40 	bl	8000658 <__aeabi_dmul>
 800dbd8:	ec41 0b18 	vmov	d8, r0, r1
 800dbdc:	3501      	adds	r5, #1
 800dbde:	107f      	asrs	r7, r7, #1
 800dbe0:	3608      	adds	r6, #8
 800dbe2:	e7e5      	b.n	800dbb0 <_dtoa_r+0x370>
 800dbe4:	f000 80a6 	beq.w	800dd34 <_dtoa_r+0x4f4>
 800dbe8:	f1ca 0600 	rsb	r6, sl, #0
 800dbec:	4ba5      	ldr	r3, [pc, #660]	; (800de84 <_dtoa_r+0x644>)
 800dbee:	4fa6      	ldr	r7, [pc, #664]	; (800de88 <_dtoa_r+0x648>)
 800dbf0:	f006 020f 	and.w	r2, r6, #15
 800dbf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc00:	f7f2 fd2a 	bl	8000658 <__aeabi_dmul>
 800dc04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc08:	1136      	asrs	r6, r6, #4
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	2502      	movs	r5, #2
 800dc0e:	2e00      	cmp	r6, #0
 800dc10:	f040 8085 	bne.w	800dd1e <_dtoa_r+0x4de>
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d1d2      	bne.n	800dbbe <_dtoa_r+0x37e>
 800dc18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	f000 808c 	beq.w	800dd38 <_dtoa_r+0x4f8>
 800dc20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc24:	4b99      	ldr	r3, [pc, #612]	; (800de8c <_dtoa_r+0x64c>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	f7f2 ff86 	bl	8000b3c <__aeabi_dcmplt>
 800dc30:	2800      	cmp	r0, #0
 800dc32:	f000 8081 	beq.w	800dd38 <_dtoa_r+0x4f8>
 800dc36:	9b01      	ldr	r3, [sp, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d07d      	beq.n	800dd38 <_dtoa_r+0x4f8>
 800dc3c:	f1b9 0f00 	cmp.w	r9, #0
 800dc40:	dd3c      	ble.n	800dcbc <_dtoa_r+0x47c>
 800dc42:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dc46:	9307      	str	r3, [sp, #28]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	4b91      	ldr	r3, [pc, #580]	; (800de90 <_dtoa_r+0x650>)
 800dc4c:	4630      	mov	r0, r6
 800dc4e:	4639      	mov	r1, r7
 800dc50:	f7f2 fd02 	bl	8000658 <__aeabi_dmul>
 800dc54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc58:	3501      	adds	r5, #1
 800dc5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dc5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc62:	4628      	mov	r0, r5
 800dc64:	f7f2 fc8e 	bl	8000584 <__aeabi_i2d>
 800dc68:	4632      	mov	r2, r6
 800dc6a:	463b      	mov	r3, r7
 800dc6c:	f7f2 fcf4 	bl	8000658 <__aeabi_dmul>
 800dc70:	4b88      	ldr	r3, [pc, #544]	; (800de94 <_dtoa_r+0x654>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	f7f2 fb3a 	bl	80002ec <__adddf3>
 800dc78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc80:	9303      	str	r3, [sp, #12]
 800dc82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d15c      	bne.n	800dd42 <_dtoa_r+0x502>
 800dc88:	4b83      	ldr	r3, [pc, #524]	; (800de98 <_dtoa_r+0x658>)
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	4630      	mov	r0, r6
 800dc8e:	4639      	mov	r1, r7
 800dc90:	f7f2 fb2a 	bl	80002e8 <__aeabi_dsub>
 800dc94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc98:	4606      	mov	r6, r0
 800dc9a:	460f      	mov	r7, r1
 800dc9c:	f7f2 ff6c 	bl	8000b78 <__aeabi_dcmpgt>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	f040 8296 	bne.w	800e1d2 <_dtoa_r+0x992>
 800dca6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	f7f2 ff43 	bl	8000b3c <__aeabi_dcmplt>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	f040 8288 	bne.w	800e1cc <_dtoa_r+0x98c>
 800dcbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dcc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f2c0 8158 	blt.w	800df7c <_dtoa_r+0x73c>
 800dccc:	f1ba 0f0e 	cmp.w	sl, #14
 800dcd0:	f300 8154 	bgt.w	800df7c <_dtoa_r+0x73c>
 800dcd4:	4b6b      	ldr	r3, [pc, #428]	; (800de84 <_dtoa_r+0x644>)
 800dcd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dcda:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	f280 80e3 	bge.w	800deac <_dtoa_r+0x66c>
 800dce6:	9b01      	ldr	r3, [sp, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f300 80df 	bgt.w	800deac <_dtoa_r+0x66c>
 800dcee:	f040 826d 	bne.w	800e1cc <_dtoa_r+0x98c>
 800dcf2:	4b69      	ldr	r3, [pc, #420]	; (800de98 <_dtoa_r+0x658>)
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	f7f2 fcad 	bl	8000658 <__aeabi_dmul>
 800dcfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd02:	f7f2 ff2f 	bl	8000b64 <__aeabi_dcmpge>
 800dd06:	9e01      	ldr	r6, [sp, #4]
 800dd08:	4637      	mov	r7, r6
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	f040 8243 	bne.w	800e196 <_dtoa_r+0x956>
 800dd10:	9d00      	ldr	r5, [sp, #0]
 800dd12:	2331      	movs	r3, #49	; 0x31
 800dd14:	f805 3b01 	strb.w	r3, [r5], #1
 800dd18:	f10a 0a01 	add.w	sl, sl, #1
 800dd1c:	e23f      	b.n	800e19e <_dtoa_r+0x95e>
 800dd1e:	07f2      	lsls	r2, r6, #31
 800dd20:	d505      	bpl.n	800dd2e <_dtoa_r+0x4ee>
 800dd22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd26:	f7f2 fc97 	bl	8000658 <__aeabi_dmul>
 800dd2a:	3501      	adds	r5, #1
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	1076      	asrs	r6, r6, #1
 800dd30:	3708      	adds	r7, #8
 800dd32:	e76c      	b.n	800dc0e <_dtoa_r+0x3ce>
 800dd34:	2502      	movs	r5, #2
 800dd36:	e76f      	b.n	800dc18 <_dtoa_r+0x3d8>
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	f8cd a01c 	str.w	sl, [sp, #28]
 800dd3e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd40:	e78d      	b.n	800dc5e <_dtoa_r+0x41e>
 800dd42:	9900      	ldr	r1, [sp, #0]
 800dd44:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dd46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd48:	4b4e      	ldr	r3, [pc, #312]	; (800de84 <_dtoa_r+0x644>)
 800dd4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd4e:	4401      	add	r1, r0
 800dd50:	9102      	str	r1, [sp, #8]
 800dd52:	9908      	ldr	r1, [sp, #32]
 800dd54:	eeb0 8a47 	vmov.f32	s16, s14
 800dd58:	eef0 8a67 	vmov.f32	s17, s15
 800dd5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd64:	2900      	cmp	r1, #0
 800dd66:	d045      	beq.n	800ddf4 <_dtoa_r+0x5b4>
 800dd68:	494c      	ldr	r1, [pc, #304]	; (800de9c <_dtoa_r+0x65c>)
 800dd6a:	2000      	movs	r0, #0
 800dd6c:	f7f2 fd9e 	bl	80008ac <__aeabi_ddiv>
 800dd70:	ec53 2b18 	vmov	r2, r3, d8
 800dd74:	f7f2 fab8 	bl	80002e8 <__aeabi_dsub>
 800dd78:	9d00      	ldr	r5, [sp, #0]
 800dd7a:	ec41 0b18 	vmov	d8, r0, r1
 800dd7e:	4639      	mov	r1, r7
 800dd80:	4630      	mov	r0, r6
 800dd82:	f7f2 ff19 	bl	8000bb8 <__aeabi_d2iz>
 800dd86:	900c      	str	r0, [sp, #48]	; 0x30
 800dd88:	f7f2 fbfc 	bl	8000584 <__aeabi_i2d>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4630      	mov	r0, r6
 800dd92:	4639      	mov	r1, r7
 800dd94:	f7f2 faa8 	bl	80002e8 <__aeabi_dsub>
 800dd98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd9a:	3330      	adds	r3, #48	; 0x30
 800dd9c:	f805 3b01 	strb.w	r3, [r5], #1
 800dda0:	ec53 2b18 	vmov	r2, r3, d8
 800dda4:	4606      	mov	r6, r0
 800dda6:	460f      	mov	r7, r1
 800dda8:	f7f2 fec8 	bl	8000b3c <__aeabi_dcmplt>
 800ddac:	2800      	cmp	r0, #0
 800ddae:	d165      	bne.n	800de7c <_dtoa_r+0x63c>
 800ddb0:	4632      	mov	r2, r6
 800ddb2:	463b      	mov	r3, r7
 800ddb4:	4935      	ldr	r1, [pc, #212]	; (800de8c <_dtoa_r+0x64c>)
 800ddb6:	2000      	movs	r0, #0
 800ddb8:	f7f2 fa96 	bl	80002e8 <__aeabi_dsub>
 800ddbc:	ec53 2b18 	vmov	r2, r3, d8
 800ddc0:	f7f2 febc 	bl	8000b3c <__aeabi_dcmplt>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	f040 80b9 	bne.w	800df3c <_dtoa_r+0x6fc>
 800ddca:	9b02      	ldr	r3, [sp, #8]
 800ddcc:	429d      	cmp	r5, r3
 800ddce:	f43f af75 	beq.w	800dcbc <_dtoa_r+0x47c>
 800ddd2:	4b2f      	ldr	r3, [pc, #188]	; (800de90 <_dtoa_r+0x650>)
 800ddd4:	ec51 0b18 	vmov	r0, r1, d8
 800ddd8:	2200      	movs	r2, #0
 800ddda:	f7f2 fc3d 	bl	8000658 <__aeabi_dmul>
 800ddde:	4b2c      	ldr	r3, [pc, #176]	; (800de90 <_dtoa_r+0x650>)
 800dde0:	ec41 0b18 	vmov	d8, r0, r1
 800dde4:	2200      	movs	r2, #0
 800dde6:	4630      	mov	r0, r6
 800dde8:	4639      	mov	r1, r7
 800ddea:	f7f2 fc35 	bl	8000658 <__aeabi_dmul>
 800ddee:	4606      	mov	r6, r0
 800ddf0:	460f      	mov	r7, r1
 800ddf2:	e7c4      	b.n	800dd7e <_dtoa_r+0x53e>
 800ddf4:	ec51 0b17 	vmov	r0, r1, d7
 800ddf8:	f7f2 fc2e 	bl	8000658 <__aeabi_dmul>
 800ddfc:	9b02      	ldr	r3, [sp, #8]
 800ddfe:	9d00      	ldr	r5, [sp, #0]
 800de00:	930c      	str	r3, [sp, #48]	; 0x30
 800de02:	ec41 0b18 	vmov	d8, r0, r1
 800de06:	4639      	mov	r1, r7
 800de08:	4630      	mov	r0, r6
 800de0a:	f7f2 fed5 	bl	8000bb8 <__aeabi_d2iz>
 800de0e:	9011      	str	r0, [sp, #68]	; 0x44
 800de10:	f7f2 fbb8 	bl	8000584 <__aeabi_i2d>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4630      	mov	r0, r6
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 fa64 	bl	80002e8 <__aeabi_dsub>
 800de20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de22:	3330      	adds	r3, #48	; 0x30
 800de24:	f805 3b01 	strb.w	r3, [r5], #1
 800de28:	9b02      	ldr	r3, [sp, #8]
 800de2a:	429d      	cmp	r5, r3
 800de2c:	4606      	mov	r6, r0
 800de2e:	460f      	mov	r7, r1
 800de30:	f04f 0200 	mov.w	r2, #0
 800de34:	d134      	bne.n	800dea0 <_dtoa_r+0x660>
 800de36:	4b19      	ldr	r3, [pc, #100]	; (800de9c <_dtoa_r+0x65c>)
 800de38:	ec51 0b18 	vmov	r0, r1, d8
 800de3c:	f7f2 fa56 	bl	80002ec <__adddf3>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4630      	mov	r0, r6
 800de46:	4639      	mov	r1, r7
 800de48:	f7f2 fe96 	bl	8000b78 <__aeabi_dcmpgt>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	d175      	bne.n	800df3c <_dtoa_r+0x6fc>
 800de50:	ec53 2b18 	vmov	r2, r3, d8
 800de54:	4911      	ldr	r1, [pc, #68]	; (800de9c <_dtoa_r+0x65c>)
 800de56:	2000      	movs	r0, #0
 800de58:	f7f2 fa46 	bl	80002e8 <__aeabi_dsub>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	4630      	mov	r0, r6
 800de62:	4639      	mov	r1, r7
 800de64:	f7f2 fe6a 	bl	8000b3c <__aeabi_dcmplt>
 800de68:	2800      	cmp	r0, #0
 800de6a:	f43f af27 	beq.w	800dcbc <_dtoa_r+0x47c>
 800de6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de70:	1e6b      	subs	r3, r5, #1
 800de72:	930c      	str	r3, [sp, #48]	; 0x30
 800de74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de78:	2b30      	cmp	r3, #48	; 0x30
 800de7a:	d0f8      	beq.n	800de6e <_dtoa_r+0x62e>
 800de7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de80:	e04a      	b.n	800df18 <_dtoa_r+0x6d8>
 800de82:	bf00      	nop
 800de84:	080121a8 	.word	0x080121a8
 800de88:	08012180 	.word	0x08012180
 800de8c:	3ff00000 	.word	0x3ff00000
 800de90:	40240000 	.word	0x40240000
 800de94:	401c0000 	.word	0x401c0000
 800de98:	40140000 	.word	0x40140000
 800de9c:	3fe00000 	.word	0x3fe00000
 800dea0:	4baf      	ldr	r3, [pc, #700]	; (800e160 <_dtoa_r+0x920>)
 800dea2:	f7f2 fbd9 	bl	8000658 <__aeabi_dmul>
 800dea6:	4606      	mov	r6, r0
 800dea8:	460f      	mov	r7, r1
 800deaa:	e7ac      	b.n	800de06 <_dtoa_r+0x5c6>
 800deac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800deb0:	9d00      	ldr	r5, [sp, #0]
 800deb2:	4642      	mov	r2, r8
 800deb4:	464b      	mov	r3, r9
 800deb6:	4630      	mov	r0, r6
 800deb8:	4639      	mov	r1, r7
 800deba:	f7f2 fcf7 	bl	80008ac <__aeabi_ddiv>
 800debe:	f7f2 fe7b 	bl	8000bb8 <__aeabi_d2iz>
 800dec2:	9002      	str	r0, [sp, #8]
 800dec4:	f7f2 fb5e 	bl	8000584 <__aeabi_i2d>
 800dec8:	4642      	mov	r2, r8
 800deca:	464b      	mov	r3, r9
 800decc:	f7f2 fbc4 	bl	8000658 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4630      	mov	r0, r6
 800ded6:	4639      	mov	r1, r7
 800ded8:	f7f2 fa06 	bl	80002e8 <__aeabi_dsub>
 800dedc:	9e02      	ldr	r6, [sp, #8]
 800dede:	9f01      	ldr	r7, [sp, #4]
 800dee0:	3630      	adds	r6, #48	; 0x30
 800dee2:	f805 6b01 	strb.w	r6, [r5], #1
 800dee6:	9e00      	ldr	r6, [sp, #0]
 800dee8:	1bae      	subs	r6, r5, r6
 800deea:	42b7      	cmp	r7, r6
 800deec:	4602      	mov	r2, r0
 800deee:	460b      	mov	r3, r1
 800def0:	d137      	bne.n	800df62 <_dtoa_r+0x722>
 800def2:	f7f2 f9fb 	bl	80002ec <__adddf3>
 800def6:	4642      	mov	r2, r8
 800def8:	464b      	mov	r3, r9
 800defa:	4606      	mov	r6, r0
 800defc:	460f      	mov	r7, r1
 800defe:	f7f2 fe3b 	bl	8000b78 <__aeabi_dcmpgt>
 800df02:	b9c8      	cbnz	r0, 800df38 <_dtoa_r+0x6f8>
 800df04:	4642      	mov	r2, r8
 800df06:	464b      	mov	r3, r9
 800df08:	4630      	mov	r0, r6
 800df0a:	4639      	mov	r1, r7
 800df0c:	f7f2 fe0c 	bl	8000b28 <__aeabi_dcmpeq>
 800df10:	b110      	cbz	r0, 800df18 <_dtoa_r+0x6d8>
 800df12:	9b02      	ldr	r3, [sp, #8]
 800df14:	07d9      	lsls	r1, r3, #31
 800df16:	d40f      	bmi.n	800df38 <_dtoa_r+0x6f8>
 800df18:	4620      	mov	r0, r4
 800df1a:	4659      	mov	r1, fp
 800df1c:	f001 f8f8 	bl	800f110 <_Bfree>
 800df20:	2300      	movs	r3, #0
 800df22:	702b      	strb	r3, [r5, #0]
 800df24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df26:	f10a 0001 	add.w	r0, sl, #1
 800df2a:	6018      	str	r0, [r3, #0]
 800df2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f43f acd8 	beq.w	800d8e4 <_dtoa_r+0xa4>
 800df34:	601d      	str	r5, [r3, #0]
 800df36:	e4d5      	b.n	800d8e4 <_dtoa_r+0xa4>
 800df38:	f8cd a01c 	str.w	sl, [sp, #28]
 800df3c:	462b      	mov	r3, r5
 800df3e:	461d      	mov	r5, r3
 800df40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df44:	2a39      	cmp	r2, #57	; 0x39
 800df46:	d108      	bne.n	800df5a <_dtoa_r+0x71a>
 800df48:	9a00      	ldr	r2, [sp, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d1f7      	bne.n	800df3e <_dtoa_r+0x6fe>
 800df4e:	9a07      	ldr	r2, [sp, #28]
 800df50:	9900      	ldr	r1, [sp, #0]
 800df52:	3201      	adds	r2, #1
 800df54:	9207      	str	r2, [sp, #28]
 800df56:	2230      	movs	r2, #48	; 0x30
 800df58:	700a      	strb	r2, [r1, #0]
 800df5a:	781a      	ldrb	r2, [r3, #0]
 800df5c:	3201      	adds	r2, #1
 800df5e:	701a      	strb	r2, [r3, #0]
 800df60:	e78c      	b.n	800de7c <_dtoa_r+0x63c>
 800df62:	4b7f      	ldr	r3, [pc, #508]	; (800e160 <_dtoa_r+0x920>)
 800df64:	2200      	movs	r2, #0
 800df66:	f7f2 fb77 	bl	8000658 <__aeabi_dmul>
 800df6a:	2200      	movs	r2, #0
 800df6c:	2300      	movs	r3, #0
 800df6e:	4606      	mov	r6, r0
 800df70:	460f      	mov	r7, r1
 800df72:	f7f2 fdd9 	bl	8000b28 <__aeabi_dcmpeq>
 800df76:	2800      	cmp	r0, #0
 800df78:	d09b      	beq.n	800deb2 <_dtoa_r+0x672>
 800df7a:	e7cd      	b.n	800df18 <_dtoa_r+0x6d8>
 800df7c:	9a08      	ldr	r2, [sp, #32]
 800df7e:	2a00      	cmp	r2, #0
 800df80:	f000 80c4 	beq.w	800e10c <_dtoa_r+0x8cc>
 800df84:	9a05      	ldr	r2, [sp, #20]
 800df86:	2a01      	cmp	r2, #1
 800df88:	f300 80a8 	bgt.w	800e0dc <_dtoa_r+0x89c>
 800df8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df8e:	2a00      	cmp	r2, #0
 800df90:	f000 80a0 	beq.w	800e0d4 <_dtoa_r+0x894>
 800df94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df98:	9e06      	ldr	r6, [sp, #24]
 800df9a:	4645      	mov	r5, r8
 800df9c:	9a04      	ldr	r2, [sp, #16]
 800df9e:	2101      	movs	r1, #1
 800dfa0:	441a      	add	r2, r3
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	4498      	add	r8, r3
 800dfa6:	9204      	str	r2, [sp, #16]
 800dfa8:	f001 f9b8 	bl	800f31c <__i2b>
 800dfac:	4607      	mov	r7, r0
 800dfae:	2d00      	cmp	r5, #0
 800dfb0:	dd0b      	ble.n	800dfca <_dtoa_r+0x78a>
 800dfb2:	9b04      	ldr	r3, [sp, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	dd08      	ble.n	800dfca <_dtoa_r+0x78a>
 800dfb8:	42ab      	cmp	r3, r5
 800dfba:	9a04      	ldr	r2, [sp, #16]
 800dfbc:	bfa8      	it	ge
 800dfbe:	462b      	movge	r3, r5
 800dfc0:	eba8 0803 	sub.w	r8, r8, r3
 800dfc4:	1aed      	subs	r5, r5, r3
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	9304      	str	r3, [sp, #16]
 800dfca:	9b06      	ldr	r3, [sp, #24]
 800dfcc:	b1fb      	cbz	r3, 800e00e <_dtoa_r+0x7ce>
 800dfce:	9b08      	ldr	r3, [sp, #32]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 809f 	beq.w	800e114 <_dtoa_r+0x8d4>
 800dfd6:	2e00      	cmp	r6, #0
 800dfd8:	dd11      	ble.n	800dffe <_dtoa_r+0x7be>
 800dfda:	4639      	mov	r1, r7
 800dfdc:	4632      	mov	r2, r6
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f001 fa58 	bl	800f494 <__pow5mult>
 800dfe4:	465a      	mov	r2, fp
 800dfe6:	4601      	mov	r1, r0
 800dfe8:	4607      	mov	r7, r0
 800dfea:	4620      	mov	r0, r4
 800dfec:	f001 f9ac 	bl	800f348 <__multiply>
 800dff0:	4659      	mov	r1, fp
 800dff2:	9007      	str	r0, [sp, #28]
 800dff4:	4620      	mov	r0, r4
 800dff6:	f001 f88b 	bl	800f110 <_Bfree>
 800dffa:	9b07      	ldr	r3, [sp, #28]
 800dffc:	469b      	mov	fp, r3
 800dffe:	9b06      	ldr	r3, [sp, #24]
 800e000:	1b9a      	subs	r2, r3, r6
 800e002:	d004      	beq.n	800e00e <_dtoa_r+0x7ce>
 800e004:	4659      	mov	r1, fp
 800e006:	4620      	mov	r0, r4
 800e008:	f001 fa44 	bl	800f494 <__pow5mult>
 800e00c:	4683      	mov	fp, r0
 800e00e:	2101      	movs	r1, #1
 800e010:	4620      	mov	r0, r4
 800e012:	f001 f983 	bl	800f31c <__i2b>
 800e016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e018:	2b00      	cmp	r3, #0
 800e01a:	4606      	mov	r6, r0
 800e01c:	dd7c      	ble.n	800e118 <_dtoa_r+0x8d8>
 800e01e:	461a      	mov	r2, r3
 800e020:	4601      	mov	r1, r0
 800e022:	4620      	mov	r0, r4
 800e024:	f001 fa36 	bl	800f494 <__pow5mult>
 800e028:	9b05      	ldr	r3, [sp, #20]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	4606      	mov	r6, r0
 800e02e:	dd76      	ble.n	800e11e <_dtoa_r+0x8de>
 800e030:	2300      	movs	r3, #0
 800e032:	9306      	str	r3, [sp, #24]
 800e034:	6933      	ldr	r3, [r6, #16]
 800e036:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e03a:	6918      	ldr	r0, [r3, #16]
 800e03c:	f001 f91e 	bl	800f27c <__hi0bits>
 800e040:	f1c0 0020 	rsb	r0, r0, #32
 800e044:	9b04      	ldr	r3, [sp, #16]
 800e046:	4418      	add	r0, r3
 800e048:	f010 001f 	ands.w	r0, r0, #31
 800e04c:	f000 8086 	beq.w	800e15c <_dtoa_r+0x91c>
 800e050:	f1c0 0320 	rsb	r3, r0, #32
 800e054:	2b04      	cmp	r3, #4
 800e056:	dd7f      	ble.n	800e158 <_dtoa_r+0x918>
 800e058:	f1c0 001c 	rsb	r0, r0, #28
 800e05c:	9b04      	ldr	r3, [sp, #16]
 800e05e:	4403      	add	r3, r0
 800e060:	4480      	add	r8, r0
 800e062:	4405      	add	r5, r0
 800e064:	9304      	str	r3, [sp, #16]
 800e066:	f1b8 0f00 	cmp.w	r8, #0
 800e06a:	dd05      	ble.n	800e078 <_dtoa_r+0x838>
 800e06c:	4659      	mov	r1, fp
 800e06e:	4642      	mov	r2, r8
 800e070:	4620      	mov	r0, r4
 800e072:	f001 fa69 	bl	800f548 <__lshift>
 800e076:	4683      	mov	fp, r0
 800e078:	9b04      	ldr	r3, [sp, #16]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	dd05      	ble.n	800e08a <_dtoa_r+0x84a>
 800e07e:	4631      	mov	r1, r6
 800e080:	461a      	mov	r2, r3
 800e082:	4620      	mov	r0, r4
 800e084:	f001 fa60 	bl	800f548 <__lshift>
 800e088:	4606      	mov	r6, r0
 800e08a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d069      	beq.n	800e164 <_dtoa_r+0x924>
 800e090:	4631      	mov	r1, r6
 800e092:	4658      	mov	r0, fp
 800e094:	f001 fac4 	bl	800f620 <__mcmp>
 800e098:	2800      	cmp	r0, #0
 800e09a:	da63      	bge.n	800e164 <_dtoa_r+0x924>
 800e09c:	2300      	movs	r3, #0
 800e09e:	4659      	mov	r1, fp
 800e0a0:	220a      	movs	r2, #10
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f001 f856 	bl	800f154 <__multadd>
 800e0a8:	9b08      	ldr	r3, [sp, #32]
 800e0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0ae:	4683      	mov	fp, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 818f 	beq.w	800e3d4 <_dtoa_r+0xb94>
 800e0b6:	4639      	mov	r1, r7
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	220a      	movs	r2, #10
 800e0bc:	4620      	mov	r0, r4
 800e0be:	f001 f849 	bl	800f154 <__multadd>
 800e0c2:	f1b9 0f00 	cmp.w	r9, #0
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	f300 808e 	bgt.w	800e1e8 <_dtoa_r+0x9a8>
 800e0cc:	9b05      	ldr	r3, [sp, #20]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	dc50      	bgt.n	800e174 <_dtoa_r+0x934>
 800e0d2:	e089      	b.n	800e1e8 <_dtoa_r+0x9a8>
 800e0d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e0d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e0da:	e75d      	b.n	800df98 <_dtoa_r+0x758>
 800e0dc:	9b01      	ldr	r3, [sp, #4]
 800e0de:	1e5e      	subs	r6, r3, #1
 800e0e0:	9b06      	ldr	r3, [sp, #24]
 800e0e2:	42b3      	cmp	r3, r6
 800e0e4:	bfbf      	itttt	lt
 800e0e6:	9b06      	ldrlt	r3, [sp, #24]
 800e0e8:	9606      	strlt	r6, [sp, #24]
 800e0ea:	1af2      	sublt	r2, r6, r3
 800e0ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e0ee:	bfb6      	itet	lt
 800e0f0:	189b      	addlt	r3, r3, r2
 800e0f2:	1b9e      	subge	r6, r3, r6
 800e0f4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e0f6:	9b01      	ldr	r3, [sp, #4]
 800e0f8:	bfb8      	it	lt
 800e0fa:	2600      	movlt	r6, #0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	bfb5      	itete	lt
 800e100:	eba8 0503 	sublt.w	r5, r8, r3
 800e104:	9b01      	ldrge	r3, [sp, #4]
 800e106:	2300      	movlt	r3, #0
 800e108:	4645      	movge	r5, r8
 800e10a:	e747      	b.n	800df9c <_dtoa_r+0x75c>
 800e10c:	9e06      	ldr	r6, [sp, #24]
 800e10e:	9f08      	ldr	r7, [sp, #32]
 800e110:	4645      	mov	r5, r8
 800e112:	e74c      	b.n	800dfae <_dtoa_r+0x76e>
 800e114:	9a06      	ldr	r2, [sp, #24]
 800e116:	e775      	b.n	800e004 <_dtoa_r+0x7c4>
 800e118:	9b05      	ldr	r3, [sp, #20]
 800e11a:	2b01      	cmp	r3, #1
 800e11c:	dc18      	bgt.n	800e150 <_dtoa_r+0x910>
 800e11e:	9b02      	ldr	r3, [sp, #8]
 800e120:	b9b3      	cbnz	r3, 800e150 <_dtoa_r+0x910>
 800e122:	9b03      	ldr	r3, [sp, #12]
 800e124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e128:	b9a3      	cbnz	r3, 800e154 <_dtoa_r+0x914>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e130:	0d1b      	lsrs	r3, r3, #20
 800e132:	051b      	lsls	r3, r3, #20
 800e134:	b12b      	cbz	r3, 800e142 <_dtoa_r+0x902>
 800e136:	9b04      	ldr	r3, [sp, #16]
 800e138:	3301      	adds	r3, #1
 800e13a:	9304      	str	r3, [sp, #16]
 800e13c:	f108 0801 	add.w	r8, r8, #1
 800e140:	2301      	movs	r3, #1
 800e142:	9306      	str	r3, [sp, #24]
 800e144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e146:	2b00      	cmp	r3, #0
 800e148:	f47f af74 	bne.w	800e034 <_dtoa_r+0x7f4>
 800e14c:	2001      	movs	r0, #1
 800e14e:	e779      	b.n	800e044 <_dtoa_r+0x804>
 800e150:	2300      	movs	r3, #0
 800e152:	e7f6      	b.n	800e142 <_dtoa_r+0x902>
 800e154:	9b02      	ldr	r3, [sp, #8]
 800e156:	e7f4      	b.n	800e142 <_dtoa_r+0x902>
 800e158:	d085      	beq.n	800e066 <_dtoa_r+0x826>
 800e15a:	4618      	mov	r0, r3
 800e15c:	301c      	adds	r0, #28
 800e15e:	e77d      	b.n	800e05c <_dtoa_r+0x81c>
 800e160:	40240000 	.word	0x40240000
 800e164:	9b01      	ldr	r3, [sp, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	dc38      	bgt.n	800e1dc <_dtoa_r+0x99c>
 800e16a:	9b05      	ldr	r3, [sp, #20]
 800e16c:	2b02      	cmp	r3, #2
 800e16e:	dd35      	ble.n	800e1dc <_dtoa_r+0x99c>
 800e170:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	d10d      	bne.n	800e196 <_dtoa_r+0x956>
 800e17a:	4631      	mov	r1, r6
 800e17c:	464b      	mov	r3, r9
 800e17e:	2205      	movs	r2, #5
 800e180:	4620      	mov	r0, r4
 800e182:	f000 ffe7 	bl	800f154 <__multadd>
 800e186:	4601      	mov	r1, r0
 800e188:	4606      	mov	r6, r0
 800e18a:	4658      	mov	r0, fp
 800e18c:	f001 fa48 	bl	800f620 <__mcmp>
 800e190:	2800      	cmp	r0, #0
 800e192:	f73f adbd 	bgt.w	800dd10 <_dtoa_r+0x4d0>
 800e196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e198:	9d00      	ldr	r5, [sp, #0]
 800e19a:	ea6f 0a03 	mvn.w	sl, r3
 800e19e:	f04f 0800 	mov.w	r8, #0
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f000 ffb3 	bl	800f110 <_Bfree>
 800e1aa:	2f00      	cmp	r7, #0
 800e1ac:	f43f aeb4 	beq.w	800df18 <_dtoa_r+0x6d8>
 800e1b0:	f1b8 0f00 	cmp.w	r8, #0
 800e1b4:	d005      	beq.n	800e1c2 <_dtoa_r+0x982>
 800e1b6:	45b8      	cmp	r8, r7
 800e1b8:	d003      	beq.n	800e1c2 <_dtoa_r+0x982>
 800e1ba:	4641      	mov	r1, r8
 800e1bc:	4620      	mov	r0, r4
 800e1be:	f000 ffa7 	bl	800f110 <_Bfree>
 800e1c2:	4639      	mov	r1, r7
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 ffa3 	bl	800f110 <_Bfree>
 800e1ca:	e6a5      	b.n	800df18 <_dtoa_r+0x6d8>
 800e1cc:	2600      	movs	r6, #0
 800e1ce:	4637      	mov	r7, r6
 800e1d0:	e7e1      	b.n	800e196 <_dtoa_r+0x956>
 800e1d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e1d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e1d8:	4637      	mov	r7, r6
 800e1da:	e599      	b.n	800dd10 <_dtoa_r+0x4d0>
 800e1dc:	9b08      	ldr	r3, [sp, #32]
 800e1de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f000 80fd 	beq.w	800e3e2 <_dtoa_r+0xba2>
 800e1e8:	2d00      	cmp	r5, #0
 800e1ea:	dd05      	ble.n	800e1f8 <_dtoa_r+0x9b8>
 800e1ec:	4639      	mov	r1, r7
 800e1ee:	462a      	mov	r2, r5
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f001 f9a9 	bl	800f548 <__lshift>
 800e1f6:	4607      	mov	r7, r0
 800e1f8:	9b06      	ldr	r3, [sp, #24]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d05c      	beq.n	800e2b8 <_dtoa_r+0xa78>
 800e1fe:	6879      	ldr	r1, [r7, #4]
 800e200:	4620      	mov	r0, r4
 800e202:	f000 ff45 	bl	800f090 <_Balloc>
 800e206:	4605      	mov	r5, r0
 800e208:	b928      	cbnz	r0, 800e216 <_dtoa_r+0x9d6>
 800e20a:	4b80      	ldr	r3, [pc, #512]	; (800e40c <_dtoa_r+0xbcc>)
 800e20c:	4602      	mov	r2, r0
 800e20e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e212:	f7ff bb2e 	b.w	800d872 <_dtoa_r+0x32>
 800e216:	693a      	ldr	r2, [r7, #16]
 800e218:	3202      	adds	r2, #2
 800e21a:	0092      	lsls	r2, r2, #2
 800e21c:	f107 010c 	add.w	r1, r7, #12
 800e220:	300c      	adds	r0, #12
 800e222:	f000 ff27 	bl	800f074 <memcpy>
 800e226:	2201      	movs	r2, #1
 800e228:	4629      	mov	r1, r5
 800e22a:	4620      	mov	r0, r4
 800e22c:	f001 f98c 	bl	800f548 <__lshift>
 800e230:	9b00      	ldr	r3, [sp, #0]
 800e232:	3301      	adds	r3, #1
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	9b00      	ldr	r3, [sp, #0]
 800e238:	444b      	add	r3, r9
 800e23a:	9307      	str	r3, [sp, #28]
 800e23c:	9b02      	ldr	r3, [sp, #8]
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	46b8      	mov	r8, r7
 800e244:	9306      	str	r3, [sp, #24]
 800e246:	4607      	mov	r7, r0
 800e248:	9b01      	ldr	r3, [sp, #4]
 800e24a:	4631      	mov	r1, r6
 800e24c:	3b01      	subs	r3, #1
 800e24e:	4658      	mov	r0, fp
 800e250:	9302      	str	r3, [sp, #8]
 800e252:	f7ff fa67 	bl	800d724 <quorem>
 800e256:	4603      	mov	r3, r0
 800e258:	3330      	adds	r3, #48	; 0x30
 800e25a:	9004      	str	r0, [sp, #16]
 800e25c:	4641      	mov	r1, r8
 800e25e:	4658      	mov	r0, fp
 800e260:	9308      	str	r3, [sp, #32]
 800e262:	f001 f9dd 	bl	800f620 <__mcmp>
 800e266:	463a      	mov	r2, r7
 800e268:	4681      	mov	r9, r0
 800e26a:	4631      	mov	r1, r6
 800e26c:	4620      	mov	r0, r4
 800e26e:	f001 f9f3 	bl	800f658 <__mdiff>
 800e272:	68c2      	ldr	r2, [r0, #12]
 800e274:	9b08      	ldr	r3, [sp, #32]
 800e276:	4605      	mov	r5, r0
 800e278:	bb02      	cbnz	r2, 800e2bc <_dtoa_r+0xa7c>
 800e27a:	4601      	mov	r1, r0
 800e27c:	4658      	mov	r0, fp
 800e27e:	f001 f9cf 	bl	800f620 <__mcmp>
 800e282:	9b08      	ldr	r3, [sp, #32]
 800e284:	4602      	mov	r2, r0
 800e286:	4629      	mov	r1, r5
 800e288:	4620      	mov	r0, r4
 800e28a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e28e:	f000 ff3f 	bl	800f110 <_Bfree>
 800e292:	9b05      	ldr	r3, [sp, #20]
 800e294:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e296:	9d01      	ldr	r5, [sp, #4]
 800e298:	ea43 0102 	orr.w	r1, r3, r2
 800e29c:	9b06      	ldr	r3, [sp, #24]
 800e29e:	430b      	orrs	r3, r1
 800e2a0:	9b08      	ldr	r3, [sp, #32]
 800e2a2:	d10d      	bne.n	800e2c0 <_dtoa_r+0xa80>
 800e2a4:	2b39      	cmp	r3, #57	; 0x39
 800e2a6:	d029      	beq.n	800e2fc <_dtoa_r+0xabc>
 800e2a8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ac:	dd01      	ble.n	800e2b2 <_dtoa_r+0xa72>
 800e2ae:	9b04      	ldr	r3, [sp, #16]
 800e2b0:	3331      	adds	r3, #49	; 0x31
 800e2b2:	9a02      	ldr	r2, [sp, #8]
 800e2b4:	7013      	strb	r3, [r2, #0]
 800e2b6:	e774      	b.n	800e1a2 <_dtoa_r+0x962>
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	e7b9      	b.n	800e230 <_dtoa_r+0x9f0>
 800e2bc:	2201      	movs	r2, #1
 800e2be:	e7e2      	b.n	800e286 <_dtoa_r+0xa46>
 800e2c0:	f1b9 0f00 	cmp.w	r9, #0
 800e2c4:	db06      	blt.n	800e2d4 <_dtoa_r+0xa94>
 800e2c6:	9905      	ldr	r1, [sp, #20]
 800e2c8:	ea41 0909 	orr.w	r9, r1, r9
 800e2cc:	9906      	ldr	r1, [sp, #24]
 800e2ce:	ea59 0101 	orrs.w	r1, r9, r1
 800e2d2:	d120      	bne.n	800e316 <_dtoa_r+0xad6>
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	ddec      	ble.n	800e2b2 <_dtoa_r+0xa72>
 800e2d8:	4659      	mov	r1, fp
 800e2da:	2201      	movs	r2, #1
 800e2dc:	4620      	mov	r0, r4
 800e2de:	9301      	str	r3, [sp, #4]
 800e2e0:	f001 f932 	bl	800f548 <__lshift>
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	4683      	mov	fp, r0
 800e2e8:	f001 f99a 	bl	800f620 <__mcmp>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	9b01      	ldr	r3, [sp, #4]
 800e2f0:	dc02      	bgt.n	800e2f8 <_dtoa_r+0xab8>
 800e2f2:	d1de      	bne.n	800e2b2 <_dtoa_r+0xa72>
 800e2f4:	07da      	lsls	r2, r3, #31
 800e2f6:	d5dc      	bpl.n	800e2b2 <_dtoa_r+0xa72>
 800e2f8:	2b39      	cmp	r3, #57	; 0x39
 800e2fa:	d1d8      	bne.n	800e2ae <_dtoa_r+0xa6e>
 800e2fc:	9a02      	ldr	r2, [sp, #8]
 800e2fe:	2339      	movs	r3, #57	; 0x39
 800e300:	7013      	strb	r3, [r2, #0]
 800e302:	462b      	mov	r3, r5
 800e304:	461d      	mov	r5, r3
 800e306:	3b01      	subs	r3, #1
 800e308:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e30c:	2a39      	cmp	r2, #57	; 0x39
 800e30e:	d050      	beq.n	800e3b2 <_dtoa_r+0xb72>
 800e310:	3201      	adds	r2, #1
 800e312:	701a      	strb	r2, [r3, #0]
 800e314:	e745      	b.n	800e1a2 <_dtoa_r+0x962>
 800e316:	2a00      	cmp	r2, #0
 800e318:	dd03      	ble.n	800e322 <_dtoa_r+0xae2>
 800e31a:	2b39      	cmp	r3, #57	; 0x39
 800e31c:	d0ee      	beq.n	800e2fc <_dtoa_r+0xabc>
 800e31e:	3301      	adds	r3, #1
 800e320:	e7c7      	b.n	800e2b2 <_dtoa_r+0xa72>
 800e322:	9a01      	ldr	r2, [sp, #4]
 800e324:	9907      	ldr	r1, [sp, #28]
 800e326:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e32a:	428a      	cmp	r2, r1
 800e32c:	d02a      	beq.n	800e384 <_dtoa_r+0xb44>
 800e32e:	4659      	mov	r1, fp
 800e330:	2300      	movs	r3, #0
 800e332:	220a      	movs	r2, #10
 800e334:	4620      	mov	r0, r4
 800e336:	f000 ff0d 	bl	800f154 <__multadd>
 800e33a:	45b8      	cmp	r8, r7
 800e33c:	4683      	mov	fp, r0
 800e33e:	f04f 0300 	mov.w	r3, #0
 800e342:	f04f 020a 	mov.w	r2, #10
 800e346:	4641      	mov	r1, r8
 800e348:	4620      	mov	r0, r4
 800e34a:	d107      	bne.n	800e35c <_dtoa_r+0xb1c>
 800e34c:	f000 ff02 	bl	800f154 <__multadd>
 800e350:	4680      	mov	r8, r0
 800e352:	4607      	mov	r7, r0
 800e354:	9b01      	ldr	r3, [sp, #4]
 800e356:	3301      	adds	r3, #1
 800e358:	9301      	str	r3, [sp, #4]
 800e35a:	e775      	b.n	800e248 <_dtoa_r+0xa08>
 800e35c:	f000 fefa 	bl	800f154 <__multadd>
 800e360:	4639      	mov	r1, r7
 800e362:	4680      	mov	r8, r0
 800e364:	2300      	movs	r3, #0
 800e366:	220a      	movs	r2, #10
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 fef3 	bl	800f154 <__multadd>
 800e36e:	4607      	mov	r7, r0
 800e370:	e7f0      	b.n	800e354 <_dtoa_r+0xb14>
 800e372:	f1b9 0f00 	cmp.w	r9, #0
 800e376:	9a00      	ldr	r2, [sp, #0]
 800e378:	bfcc      	ite	gt
 800e37a:	464d      	movgt	r5, r9
 800e37c:	2501      	movle	r5, #1
 800e37e:	4415      	add	r5, r2
 800e380:	f04f 0800 	mov.w	r8, #0
 800e384:	4659      	mov	r1, fp
 800e386:	2201      	movs	r2, #1
 800e388:	4620      	mov	r0, r4
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	f001 f8dc 	bl	800f548 <__lshift>
 800e390:	4631      	mov	r1, r6
 800e392:	4683      	mov	fp, r0
 800e394:	f001 f944 	bl	800f620 <__mcmp>
 800e398:	2800      	cmp	r0, #0
 800e39a:	dcb2      	bgt.n	800e302 <_dtoa_r+0xac2>
 800e39c:	d102      	bne.n	800e3a4 <_dtoa_r+0xb64>
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	07db      	lsls	r3, r3, #31
 800e3a2:	d4ae      	bmi.n	800e302 <_dtoa_r+0xac2>
 800e3a4:	462b      	mov	r3, r5
 800e3a6:	461d      	mov	r5, r3
 800e3a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3ac:	2a30      	cmp	r2, #48	; 0x30
 800e3ae:	d0fa      	beq.n	800e3a6 <_dtoa_r+0xb66>
 800e3b0:	e6f7      	b.n	800e1a2 <_dtoa_r+0x962>
 800e3b2:	9a00      	ldr	r2, [sp, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d1a5      	bne.n	800e304 <_dtoa_r+0xac4>
 800e3b8:	f10a 0a01 	add.w	sl, sl, #1
 800e3bc:	2331      	movs	r3, #49	; 0x31
 800e3be:	e779      	b.n	800e2b4 <_dtoa_r+0xa74>
 800e3c0:	4b13      	ldr	r3, [pc, #76]	; (800e410 <_dtoa_r+0xbd0>)
 800e3c2:	f7ff baaf 	b.w	800d924 <_dtoa_r+0xe4>
 800e3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f47f aa86 	bne.w	800d8da <_dtoa_r+0x9a>
 800e3ce:	4b11      	ldr	r3, [pc, #68]	; (800e414 <_dtoa_r+0xbd4>)
 800e3d0:	f7ff baa8 	b.w	800d924 <_dtoa_r+0xe4>
 800e3d4:	f1b9 0f00 	cmp.w	r9, #0
 800e3d8:	dc03      	bgt.n	800e3e2 <_dtoa_r+0xba2>
 800e3da:	9b05      	ldr	r3, [sp, #20]
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	f73f aec9 	bgt.w	800e174 <_dtoa_r+0x934>
 800e3e2:	9d00      	ldr	r5, [sp, #0]
 800e3e4:	4631      	mov	r1, r6
 800e3e6:	4658      	mov	r0, fp
 800e3e8:	f7ff f99c 	bl	800d724 <quorem>
 800e3ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e3f0:	f805 3b01 	strb.w	r3, [r5], #1
 800e3f4:	9a00      	ldr	r2, [sp, #0]
 800e3f6:	1aaa      	subs	r2, r5, r2
 800e3f8:	4591      	cmp	r9, r2
 800e3fa:	ddba      	ble.n	800e372 <_dtoa_r+0xb32>
 800e3fc:	4659      	mov	r1, fp
 800e3fe:	2300      	movs	r3, #0
 800e400:	220a      	movs	r2, #10
 800e402:	4620      	mov	r0, r4
 800e404:	f000 fea6 	bl	800f154 <__multadd>
 800e408:	4683      	mov	fp, r0
 800e40a:	e7eb      	b.n	800e3e4 <_dtoa_r+0xba4>
 800e40c:	08012029 	.word	0x08012029
 800e410:	08011d94 	.word	0x08011d94
 800e414:	08011fbd 	.word	0x08011fbd

0800e418 <__sflush_r>:
 800e418:	898a      	ldrh	r2, [r1, #12]
 800e41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e41e:	4605      	mov	r5, r0
 800e420:	0710      	lsls	r0, r2, #28
 800e422:	460c      	mov	r4, r1
 800e424:	d458      	bmi.n	800e4d8 <__sflush_r+0xc0>
 800e426:	684b      	ldr	r3, [r1, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	dc05      	bgt.n	800e438 <__sflush_r+0x20>
 800e42c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e42e:	2b00      	cmp	r3, #0
 800e430:	dc02      	bgt.n	800e438 <__sflush_r+0x20>
 800e432:	2000      	movs	r0, #0
 800e434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e43a:	2e00      	cmp	r6, #0
 800e43c:	d0f9      	beq.n	800e432 <__sflush_r+0x1a>
 800e43e:	2300      	movs	r3, #0
 800e440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e444:	682f      	ldr	r7, [r5, #0]
 800e446:	602b      	str	r3, [r5, #0]
 800e448:	d032      	beq.n	800e4b0 <__sflush_r+0x98>
 800e44a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	075a      	lsls	r2, r3, #29
 800e450:	d505      	bpl.n	800e45e <__sflush_r+0x46>
 800e452:	6863      	ldr	r3, [r4, #4]
 800e454:	1ac0      	subs	r0, r0, r3
 800e456:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e458:	b10b      	cbz	r3, 800e45e <__sflush_r+0x46>
 800e45a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e45c:	1ac0      	subs	r0, r0, r3
 800e45e:	2300      	movs	r3, #0
 800e460:	4602      	mov	r2, r0
 800e462:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e464:	6a21      	ldr	r1, [r4, #32]
 800e466:	4628      	mov	r0, r5
 800e468:	47b0      	blx	r6
 800e46a:	1c43      	adds	r3, r0, #1
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	d106      	bne.n	800e47e <__sflush_r+0x66>
 800e470:	6829      	ldr	r1, [r5, #0]
 800e472:	291d      	cmp	r1, #29
 800e474:	d82c      	bhi.n	800e4d0 <__sflush_r+0xb8>
 800e476:	4a2a      	ldr	r2, [pc, #168]	; (800e520 <__sflush_r+0x108>)
 800e478:	40ca      	lsrs	r2, r1
 800e47a:	07d6      	lsls	r6, r2, #31
 800e47c:	d528      	bpl.n	800e4d0 <__sflush_r+0xb8>
 800e47e:	2200      	movs	r2, #0
 800e480:	6062      	str	r2, [r4, #4]
 800e482:	04d9      	lsls	r1, r3, #19
 800e484:	6922      	ldr	r2, [r4, #16]
 800e486:	6022      	str	r2, [r4, #0]
 800e488:	d504      	bpl.n	800e494 <__sflush_r+0x7c>
 800e48a:	1c42      	adds	r2, r0, #1
 800e48c:	d101      	bne.n	800e492 <__sflush_r+0x7a>
 800e48e:	682b      	ldr	r3, [r5, #0]
 800e490:	b903      	cbnz	r3, 800e494 <__sflush_r+0x7c>
 800e492:	6560      	str	r0, [r4, #84]	; 0x54
 800e494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e496:	602f      	str	r7, [r5, #0]
 800e498:	2900      	cmp	r1, #0
 800e49a:	d0ca      	beq.n	800e432 <__sflush_r+0x1a>
 800e49c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4a0:	4299      	cmp	r1, r3
 800e4a2:	d002      	beq.n	800e4aa <__sflush_r+0x92>
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	f001 fabd 	bl	800fa24 <_free_r>
 800e4aa:	2000      	movs	r0, #0
 800e4ac:	6360      	str	r0, [r4, #52]	; 0x34
 800e4ae:	e7c1      	b.n	800e434 <__sflush_r+0x1c>
 800e4b0:	6a21      	ldr	r1, [r4, #32]
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	47b0      	blx	r6
 800e4b8:	1c41      	adds	r1, r0, #1
 800e4ba:	d1c7      	bne.n	800e44c <__sflush_r+0x34>
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d0c4      	beq.n	800e44c <__sflush_r+0x34>
 800e4c2:	2b1d      	cmp	r3, #29
 800e4c4:	d001      	beq.n	800e4ca <__sflush_r+0xb2>
 800e4c6:	2b16      	cmp	r3, #22
 800e4c8:	d101      	bne.n	800e4ce <__sflush_r+0xb6>
 800e4ca:	602f      	str	r7, [r5, #0]
 800e4cc:	e7b1      	b.n	800e432 <__sflush_r+0x1a>
 800e4ce:	89a3      	ldrh	r3, [r4, #12]
 800e4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4d4:	81a3      	strh	r3, [r4, #12]
 800e4d6:	e7ad      	b.n	800e434 <__sflush_r+0x1c>
 800e4d8:	690f      	ldr	r7, [r1, #16]
 800e4da:	2f00      	cmp	r7, #0
 800e4dc:	d0a9      	beq.n	800e432 <__sflush_r+0x1a>
 800e4de:	0793      	lsls	r3, r2, #30
 800e4e0:	680e      	ldr	r6, [r1, #0]
 800e4e2:	bf08      	it	eq
 800e4e4:	694b      	ldreq	r3, [r1, #20]
 800e4e6:	600f      	str	r7, [r1, #0]
 800e4e8:	bf18      	it	ne
 800e4ea:	2300      	movne	r3, #0
 800e4ec:	eba6 0807 	sub.w	r8, r6, r7
 800e4f0:	608b      	str	r3, [r1, #8]
 800e4f2:	f1b8 0f00 	cmp.w	r8, #0
 800e4f6:	dd9c      	ble.n	800e432 <__sflush_r+0x1a>
 800e4f8:	6a21      	ldr	r1, [r4, #32]
 800e4fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4fc:	4643      	mov	r3, r8
 800e4fe:	463a      	mov	r2, r7
 800e500:	4628      	mov	r0, r5
 800e502:	47b0      	blx	r6
 800e504:	2800      	cmp	r0, #0
 800e506:	dc06      	bgt.n	800e516 <__sflush_r+0xfe>
 800e508:	89a3      	ldrh	r3, [r4, #12]
 800e50a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e50e:	81a3      	strh	r3, [r4, #12]
 800e510:	f04f 30ff 	mov.w	r0, #4294967295
 800e514:	e78e      	b.n	800e434 <__sflush_r+0x1c>
 800e516:	4407      	add	r7, r0
 800e518:	eba8 0800 	sub.w	r8, r8, r0
 800e51c:	e7e9      	b.n	800e4f2 <__sflush_r+0xda>
 800e51e:	bf00      	nop
 800e520:	20400001 	.word	0x20400001

0800e524 <_fflush_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	690b      	ldr	r3, [r1, #16]
 800e528:	4605      	mov	r5, r0
 800e52a:	460c      	mov	r4, r1
 800e52c:	b913      	cbnz	r3, 800e534 <_fflush_r+0x10>
 800e52e:	2500      	movs	r5, #0
 800e530:	4628      	mov	r0, r5
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	b118      	cbz	r0, 800e53e <_fflush_r+0x1a>
 800e536:	6983      	ldr	r3, [r0, #24]
 800e538:	b90b      	cbnz	r3, 800e53e <_fflush_r+0x1a>
 800e53a:	f000 f899 	bl	800e670 <__sinit>
 800e53e:	4b14      	ldr	r3, [pc, #80]	; (800e590 <_fflush_r+0x6c>)
 800e540:	429c      	cmp	r4, r3
 800e542:	d11b      	bne.n	800e57c <_fflush_r+0x58>
 800e544:	686c      	ldr	r4, [r5, #4]
 800e546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d0ef      	beq.n	800e52e <_fflush_r+0xa>
 800e54e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e550:	07d0      	lsls	r0, r2, #31
 800e552:	d404      	bmi.n	800e55e <_fflush_r+0x3a>
 800e554:	0599      	lsls	r1, r3, #22
 800e556:	d402      	bmi.n	800e55e <_fflush_r+0x3a>
 800e558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e55a:	f000 fd0a 	bl	800ef72 <__retarget_lock_acquire_recursive>
 800e55e:	4628      	mov	r0, r5
 800e560:	4621      	mov	r1, r4
 800e562:	f7ff ff59 	bl	800e418 <__sflush_r>
 800e566:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e568:	07da      	lsls	r2, r3, #31
 800e56a:	4605      	mov	r5, r0
 800e56c:	d4e0      	bmi.n	800e530 <_fflush_r+0xc>
 800e56e:	89a3      	ldrh	r3, [r4, #12]
 800e570:	059b      	lsls	r3, r3, #22
 800e572:	d4dd      	bmi.n	800e530 <_fflush_r+0xc>
 800e574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e576:	f000 fcfd 	bl	800ef74 <__retarget_lock_release_recursive>
 800e57a:	e7d9      	b.n	800e530 <_fflush_r+0xc>
 800e57c:	4b05      	ldr	r3, [pc, #20]	; (800e594 <_fflush_r+0x70>)
 800e57e:	429c      	cmp	r4, r3
 800e580:	d101      	bne.n	800e586 <_fflush_r+0x62>
 800e582:	68ac      	ldr	r4, [r5, #8]
 800e584:	e7df      	b.n	800e546 <_fflush_r+0x22>
 800e586:	4b04      	ldr	r3, [pc, #16]	; (800e598 <_fflush_r+0x74>)
 800e588:	429c      	cmp	r4, r3
 800e58a:	bf08      	it	eq
 800e58c:	68ec      	ldreq	r4, [r5, #12]
 800e58e:	e7da      	b.n	800e546 <_fflush_r+0x22>
 800e590:	0801205c 	.word	0x0801205c
 800e594:	0801207c 	.word	0x0801207c
 800e598:	0801203c 	.word	0x0801203c

0800e59c <fflush>:
 800e59c:	4601      	mov	r1, r0
 800e59e:	b920      	cbnz	r0, 800e5aa <fflush+0xe>
 800e5a0:	4b04      	ldr	r3, [pc, #16]	; (800e5b4 <fflush+0x18>)
 800e5a2:	4905      	ldr	r1, [pc, #20]	; (800e5b8 <fflush+0x1c>)
 800e5a4:	6818      	ldr	r0, [r3, #0]
 800e5a6:	f000 b910 	b.w	800e7ca <_fwalk_reent>
 800e5aa:	4b04      	ldr	r3, [pc, #16]	; (800e5bc <fflush+0x20>)
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	f7ff bfb9 	b.w	800e524 <_fflush_r>
 800e5b2:	bf00      	nop
 800e5b4:	08011d80 	.word	0x08011d80
 800e5b8:	0800e525 	.word	0x0800e525
 800e5bc:	20000028 	.word	0x20000028

0800e5c0 <std>:
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	b510      	push	{r4, lr}
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	e9c0 3300 	strd	r3, r3, [r0]
 800e5ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ce:	6083      	str	r3, [r0, #8]
 800e5d0:	8181      	strh	r1, [r0, #12]
 800e5d2:	6643      	str	r3, [r0, #100]	; 0x64
 800e5d4:	81c2      	strh	r2, [r0, #14]
 800e5d6:	6183      	str	r3, [r0, #24]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	2208      	movs	r2, #8
 800e5dc:	305c      	adds	r0, #92	; 0x5c
 800e5de:	f7fd fb9d 	bl	800bd1c <memset>
 800e5e2:	4b05      	ldr	r3, [pc, #20]	; (800e5f8 <std+0x38>)
 800e5e4:	6263      	str	r3, [r4, #36]	; 0x24
 800e5e6:	4b05      	ldr	r3, [pc, #20]	; (800e5fc <std+0x3c>)
 800e5e8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <std+0x40>)
 800e5ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <std+0x44>)
 800e5f0:	6224      	str	r4, [r4, #32]
 800e5f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5f4:	bd10      	pop	{r4, pc}
 800e5f6:	bf00      	nop
 800e5f8:	0800feb9 	.word	0x0800feb9
 800e5fc:	0800fedb 	.word	0x0800fedb
 800e600:	0800ff13 	.word	0x0800ff13
 800e604:	0800ff37 	.word	0x0800ff37

0800e608 <_cleanup_r>:
 800e608:	4901      	ldr	r1, [pc, #4]	; (800e610 <_cleanup_r+0x8>)
 800e60a:	f000 b8de 	b.w	800e7ca <_fwalk_reent>
 800e60e:	bf00      	nop
 800e610:	0800e525 	.word	0x0800e525

0800e614 <__sfmoreglue>:
 800e614:	b570      	push	{r4, r5, r6, lr}
 800e616:	1e4a      	subs	r2, r1, #1
 800e618:	2568      	movs	r5, #104	; 0x68
 800e61a:	4355      	muls	r5, r2
 800e61c:	460e      	mov	r6, r1
 800e61e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e622:	f001 fa4f 	bl	800fac4 <_malloc_r>
 800e626:	4604      	mov	r4, r0
 800e628:	b140      	cbz	r0, 800e63c <__sfmoreglue+0x28>
 800e62a:	2100      	movs	r1, #0
 800e62c:	e9c0 1600 	strd	r1, r6, [r0]
 800e630:	300c      	adds	r0, #12
 800e632:	60a0      	str	r0, [r4, #8]
 800e634:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e638:	f7fd fb70 	bl	800bd1c <memset>
 800e63c:	4620      	mov	r0, r4
 800e63e:	bd70      	pop	{r4, r5, r6, pc}

0800e640 <__sfp_lock_acquire>:
 800e640:	4801      	ldr	r0, [pc, #4]	; (800e648 <__sfp_lock_acquire+0x8>)
 800e642:	f000 bc96 	b.w	800ef72 <__retarget_lock_acquire_recursive>
 800e646:	bf00      	nop
 800e648:	20000d24 	.word	0x20000d24

0800e64c <__sfp_lock_release>:
 800e64c:	4801      	ldr	r0, [pc, #4]	; (800e654 <__sfp_lock_release+0x8>)
 800e64e:	f000 bc91 	b.w	800ef74 <__retarget_lock_release_recursive>
 800e652:	bf00      	nop
 800e654:	20000d24 	.word	0x20000d24

0800e658 <__sinit_lock_acquire>:
 800e658:	4801      	ldr	r0, [pc, #4]	; (800e660 <__sinit_lock_acquire+0x8>)
 800e65a:	f000 bc8a 	b.w	800ef72 <__retarget_lock_acquire_recursive>
 800e65e:	bf00      	nop
 800e660:	20000d1f 	.word	0x20000d1f

0800e664 <__sinit_lock_release>:
 800e664:	4801      	ldr	r0, [pc, #4]	; (800e66c <__sinit_lock_release+0x8>)
 800e666:	f000 bc85 	b.w	800ef74 <__retarget_lock_release_recursive>
 800e66a:	bf00      	nop
 800e66c:	20000d1f 	.word	0x20000d1f

0800e670 <__sinit>:
 800e670:	b510      	push	{r4, lr}
 800e672:	4604      	mov	r4, r0
 800e674:	f7ff fff0 	bl	800e658 <__sinit_lock_acquire>
 800e678:	69a3      	ldr	r3, [r4, #24]
 800e67a:	b11b      	cbz	r3, 800e684 <__sinit+0x14>
 800e67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e680:	f7ff bff0 	b.w	800e664 <__sinit_lock_release>
 800e684:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e688:	6523      	str	r3, [r4, #80]	; 0x50
 800e68a:	4b13      	ldr	r3, [pc, #76]	; (800e6d8 <__sinit+0x68>)
 800e68c:	4a13      	ldr	r2, [pc, #76]	; (800e6dc <__sinit+0x6c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	62a2      	str	r2, [r4, #40]	; 0x28
 800e692:	42a3      	cmp	r3, r4
 800e694:	bf04      	itt	eq
 800e696:	2301      	moveq	r3, #1
 800e698:	61a3      	streq	r3, [r4, #24]
 800e69a:	4620      	mov	r0, r4
 800e69c:	f000 f820 	bl	800e6e0 <__sfp>
 800e6a0:	6060      	str	r0, [r4, #4]
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 f81c 	bl	800e6e0 <__sfp>
 800e6a8:	60a0      	str	r0, [r4, #8]
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 f818 	bl	800e6e0 <__sfp>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	60e0      	str	r0, [r4, #12]
 800e6b4:	2104      	movs	r1, #4
 800e6b6:	6860      	ldr	r0, [r4, #4]
 800e6b8:	f7ff ff82 	bl	800e5c0 <std>
 800e6bc:	68a0      	ldr	r0, [r4, #8]
 800e6be:	2201      	movs	r2, #1
 800e6c0:	2109      	movs	r1, #9
 800e6c2:	f7ff ff7d 	bl	800e5c0 <std>
 800e6c6:	68e0      	ldr	r0, [r4, #12]
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	2112      	movs	r1, #18
 800e6cc:	f7ff ff78 	bl	800e5c0 <std>
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	61a3      	str	r3, [r4, #24]
 800e6d4:	e7d2      	b.n	800e67c <__sinit+0xc>
 800e6d6:	bf00      	nop
 800e6d8:	08011d80 	.word	0x08011d80
 800e6dc:	0800e609 	.word	0x0800e609

0800e6e0 <__sfp>:
 800e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	f7ff ffac 	bl	800e640 <__sfp_lock_acquire>
 800e6e8:	4b1e      	ldr	r3, [pc, #120]	; (800e764 <__sfp+0x84>)
 800e6ea:	681e      	ldr	r6, [r3, #0]
 800e6ec:	69b3      	ldr	r3, [r6, #24]
 800e6ee:	b913      	cbnz	r3, 800e6f6 <__sfp+0x16>
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7ff ffbd 	bl	800e670 <__sinit>
 800e6f6:	3648      	adds	r6, #72	; 0x48
 800e6f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	d503      	bpl.n	800e708 <__sfp+0x28>
 800e700:	6833      	ldr	r3, [r6, #0]
 800e702:	b30b      	cbz	r3, 800e748 <__sfp+0x68>
 800e704:	6836      	ldr	r6, [r6, #0]
 800e706:	e7f7      	b.n	800e6f8 <__sfp+0x18>
 800e708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e70c:	b9d5      	cbnz	r5, 800e744 <__sfp+0x64>
 800e70e:	4b16      	ldr	r3, [pc, #88]	; (800e768 <__sfp+0x88>)
 800e710:	60e3      	str	r3, [r4, #12]
 800e712:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e716:	6665      	str	r5, [r4, #100]	; 0x64
 800e718:	f000 fc2a 	bl	800ef70 <__retarget_lock_init_recursive>
 800e71c:	f7ff ff96 	bl	800e64c <__sfp_lock_release>
 800e720:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e724:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e728:	6025      	str	r5, [r4, #0]
 800e72a:	61a5      	str	r5, [r4, #24]
 800e72c:	2208      	movs	r2, #8
 800e72e:	4629      	mov	r1, r5
 800e730:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e734:	f7fd faf2 	bl	800bd1c <memset>
 800e738:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e73c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e740:	4620      	mov	r0, r4
 800e742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e744:	3468      	adds	r4, #104	; 0x68
 800e746:	e7d9      	b.n	800e6fc <__sfp+0x1c>
 800e748:	2104      	movs	r1, #4
 800e74a:	4638      	mov	r0, r7
 800e74c:	f7ff ff62 	bl	800e614 <__sfmoreglue>
 800e750:	4604      	mov	r4, r0
 800e752:	6030      	str	r0, [r6, #0]
 800e754:	2800      	cmp	r0, #0
 800e756:	d1d5      	bne.n	800e704 <__sfp+0x24>
 800e758:	f7ff ff78 	bl	800e64c <__sfp_lock_release>
 800e75c:	230c      	movs	r3, #12
 800e75e:	603b      	str	r3, [r7, #0]
 800e760:	e7ee      	b.n	800e740 <__sfp+0x60>
 800e762:	bf00      	nop
 800e764:	08011d80 	.word	0x08011d80
 800e768:	ffff0001 	.word	0xffff0001

0800e76c <fiprintf>:
 800e76c:	b40e      	push	{r1, r2, r3}
 800e76e:	b503      	push	{r0, r1, lr}
 800e770:	4601      	mov	r1, r0
 800e772:	ab03      	add	r3, sp, #12
 800e774:	4805      	ldr	r0, [pc, #20]	; (800e78c <fiprintf+0x20>)
 800e776:	f853 2b04 	ldr.w	r2, [r3], #4
 800e77a:	6800      	ldr	r0, [r0, #0]
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	f001 fa25 	bl	800fbcc <_vfiprintf_r>
 800e782:	b002      	add	sp, #8
 800e784:	f85d eb04 	ldr.w	lr, [sp], #4
 800e788:	b003      	add	sp, #12
 800e78a:	4770      	bx	lr
 800e78c:	20000028 	.word	0x20000028

0800e790 <_fwalk>:
 800e790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e794:	460f      	mov	r7, r1
 800e796:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e79a:	2600      	movs	r6, #0
 800e79c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800e7a0:	f1b8 0801 	subs.w	r8, r8, #1
 800e7a4:	d505      	bpl.n	800e7b2 <_fwalk+0x22>
 800e7a6:	6824      	ldr	r4, [r4, #0]
 800e7a8:	2c00      	cmp	r4, #0
 800e7aa:	d1f7      	bne.n	800e79c <_fwalk+0xc>
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b2:	89ab      	ldrh	r3, [r5, #12]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d906      	bls.n	800e7c6 <_fwalk+0x36>
 800e7b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	d002      	beq.n	800e7c6 <_fwalk+0x36>
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	47b8      	blx	r7
 800e7c4:	4306      	orrs	r6, r0
 800e7c6:	3568      	adds	r5, #104	; 0x68
 800e7c8:	e7ea      	b.n	800e7a0 <_fwalk+0x10>

0800e7ca <_fwalk_reent>:
 800e7ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	4688      	mov	r8, r1
 800e7d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e7d6:	2700      	movs	r7, #0
 800e7d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e7dc:	f1b9 0901 	subs.w	r9, r9, #1
 800e7e0:	d505      	bpl.n	800e7ee <_fwalk_reent+0x24>
 800e7e2:	6824      	ldr	r4, [r4, #0]
 800e7e4:	2c00      	cmp	r4, #0
 800e7e6:	d1f7      	bne.n	800e7d8 <_fwalk_reent+0xe>
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ee:	89ab      	ldrh	r3, [r5, #12]
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d907      	bls.n	800e804 <_fwalk_reent+0x3a>
 800e7f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	d003      	beq.n	800e804 <_fwalk_reent+0x3a>
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	4630      	mov	r0, r6
 800e800:	47c0      	blx	r8
 800e802:	4307      	orrs	r7, r0
 800e804:	3568      	adds	r5, #104	; 0x68
 800e806:	e7e9      	b.n	800e7dc <_fwalk_reent+0x12>

0800e808 <rshift>:
 800e808:	6903      	ldr	r3, [r0, #16]
 800e80a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e80e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e812:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e816:	f100 0414 	add.w	r4, r0, #20
 800e81a:	dd45      	ble.n	800e8a8 <rshift+0xa0>
 800e81c:	f011 011f 	ands.w	r1, r1, #31
 800e820:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e824:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e828:	d10c      	bne.n	800e844 <rshift+0x3c>
 800e82a:	f100 0710 	add.w	r7, r0, #16
 800e82e:	4629      	mov	r1, r5
 800e830:	42b1      	cmp	r1, r6
 800e832:	d334      	bcc.n	800e89e <rshift+0x96>
 800e834:	1a9b      	subs	r3, r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	1eea      	subs	r2, r5, #3
 800e83a:	4296      	cmp	r6, r2
 800e83c:	bf38      	it	cc
 800e83e:	2300      	movcc	r3, #0
 800e840:	4423      	add	r3, r4
 800e842:	e015      	b.n	800e870 <rshift+0x68>
 800e844:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e848:	f1c1 0820 	rsb	r8, r1, #32
 800e84c:	40cf      	lsrs	r7, r1
 800e84e:	f105 0e04 	add.w	lr, r5, #4
 800e852:	46a1      	mov	r9, r4
 800e854:	4576      	cmp	r6, lr
 800e856:	46f4      	mov	ip, lr
 800e858:	d815      	bhi.n	800e886 <rshift+0x7e>
 800e85a:	1a9b      	subs	r3, r3, r2
 800e85c:	009a      	lsls	r2, r3, #2
 800e85e:	3a04      	subs	r2, #4
 800e860:	3501      	adds	r5, #1
 800e862:	42ae      	cmp	r6, r5
 800e864:	bf38      	it	cc
 800e866:	2200      	movcc	r2, #0
 800e868:	18a3      	adds	r3, r4, r2
 800e86a:	50a7      	str	r7, [r4, r2]
 800e86c:	b107      	cbz	r7, 800e870 <rshift+0x68>
 800e86e:	3304      	adds	r3, #4
 800e870:	1b1a      	subs	r2, r3, r4
 800e872:	42a3      	cmp	r3, r4
 800e874:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e878:	bf08      	it	eq
 800e87a:	2300      	moveq	r3, #0
 800e87c:	6102      	str	r2, [r0, #16]
 800e87e:	bf08      	it	eq
 800e880:	6143      	streq	r3, [r0, #20]
 800e882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e886:	f8dc c000 	ldr.w	ip, [ip]
 800e88a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e88e:	ea4c 0707 	orr.w	r7, ip, r7
 800e892:	f849 7b04 	str.w	r7, [r9], #4
 800e896:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e89a:	40cf      	lsrs	r7, r1
 800e89c:	e7da      	b.n	800e854 <rshift+0x4c>
 800e89e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e8a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800e8a6:	e7c3      	b.n	800e830 <rshift+0x28>
 800e8a8:	4623      	mov	r3, r4
 800e8aa:	e7e1      	b.n	800e870 <rshift+0x68>

0800e8ac <__hexdig_fun>:
 800e8ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e8b0:	2b09      	cmp	r3, #9
 800e8b2:	d802      	bhi.n	800e8ba <__hexdig_fun+0xe>
 800e8b4:	3820      	subs	r0, #32
 800e8b6:	b2c0      	uxtb	r0, r0
 800e8b8:	4770      	bx	lr
 800e8ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e8be:	2b05      	cmp	r3, #5
 800e8c0:	d801      	bhi.n	800e8c6 <__hexdig_fun+0x1a>
 800e8c2:	3847      	subs	r0, #71	; 0x47
 800e8c4:	e7f7      	b.n	800e8b6 <__hexdig_fun+0xa>
 800e8c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e8ca:	2b05      	cmp	r3, #5
 800e8cc:	d801      	bhi.n	800e8d2 <__hexdig_fun+0x26>
 800e8ce:	3827      	subs	r0, #39	; 0x27
 800e8d0:	e7f1      	b.n	800e8b6 <__hexdig_fun+0xa>
 800e8d2:	2000      	movs	r0, #0
 800e8d4:	4770      	bx	lr
	...

0800e8d8 <__gethex>:
 800e8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8dc:	ed2d 8b02 	vpush	{d8}
 800e8e0:	b089      	sub	sp, #36	; 0x24
 800e8e2:	ee08 0a10 	vmov	s16, r0
 800e8e6:	9304      	str	r3, [sp, #16]
 800e8e8:	4bbc      	ldr	r3, [pc, #752]	; (800ebdc <__gethex+0x304>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	468b      	mov	fp, r1
 800e8f2:	4690      	mov	r8, r2
 800e8f4:	f7f1 fc96 	bl	8000224 <strlen>
 800e8f8:	9b01      	ldr	r3, [sp, #4]
 800e8fa:	f8db 2000 	ldr.w	r2, [fp]
 800e8fe:	4403      	add	r3, r0
 800e900:	4682      	mov	sl, r0
 800e902:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e906:	9305      	str	r3, [sp, #20]
 800e908:	1c93      	adds	r3, r2, #2
 800e90a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e90e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e912:	32fe      	adds	r2, #254	; 0xfe
 800e914:	18d1      	adds	r1, r2, r3
 800e916:	461f      	mov	r7, r3
 800e918:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e91c:	9100      	str	r1, [sp, #0]
 800e91e:	2830      	cmp	r0, #48	; 0x30
 800e920:	d0f8      	beq.n	800e914 <__gethex+0x3c>
 800e922:	f7ff ffc3 	bl	800e8ac <__hexdig_fun>
 800e926:	4604      	mov	r4, r0
 800e928:	2800      	cmp	r0, #0
 800e92a:	d13a      	bne.n	800e9a2 <__gethex+0xca>
 800e92c:	9901      	ldr	r1, [sp, #4]
 800e92e:	4652      	mov	r2, sl
 800e930:	4638      	mov	r0, r7
 800e932:	f001 fb04 	bl	800ff3e <strncmp>
 800e936:	4605      	mov	r5, r0
 800e938:	2800      	cmp	r0, #0
 800e93a:	d168      	bne.n	800ea0e <__gethex+0x136>
 800e93c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e940:	eb07 060a 	add.w	r6, r7, sl
 800e944:	f7ff ffb2 	bl	800e8ac <__hexdig_fun>
 800e948:	2800      	cmp	r0, #0
 800e94a:	d062      	beq.n	800ea12 <__gethex+0x13a>
 800e94c:	4633      	mov	r3, r6
 800e94e:	7818      	ldrb	r0, [r3, #0]
 800e950:	2830      	cmp	r0, #48	; 0x30
 800e952:	461f      	mov	r7, r3
 800e954:	f103 0301 	add.w	r3, r3, #1
 800e958:	d0f9      	beq.n	800e94e <__gethex+0x76>
 800e95a:	f7ff ffa7 	bl	800e8ac <__hexdig_fun>
 800e95e:	2301      	movs	r3, #1
 800e960:	fab0 f480 	clz	r4, r0
 800e964:	0964      	lsrs	r4, r4, #5
 800e966:	4635      	mov	r5, r6
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	463a      	mov	r2, r7
 800e96c:	4616      	mov	r6, r2
 800e96e:	3201      	adds	r2, #1
 800e970:	7830      	ldrb	r0, [r6, #0]
 800e972:	f7ff ff9b 	bl	800e8ac <__hexdig_fun>
 800e976:	2800      	cmp	r0, #0
 800e978:	d1f8      	bne.n	800e96c <__gethex+0x94>
 800e97a:	9901      	ldr	r1, [sp, #4]
 800e97c:	4652      	mov	r2, sl
 800e97e:	4630      	mov	r0, r6
 800e980:	f001 fadd 	bl	800ff3e <strncmp>
 800e984:	b980      	cbnz	r0, 800e9a8 <__gethex+0xd0>
 800e986:	b94d      	cbnz	r5, 800e99c <__gethex+0xc4>
 800e988:	eb06 050a 	add.w	r5, r6, sl
 800e98c:	462a      	mov	r2, r5
 800e98e:	4616      	mov	r6, r2
 800e990:	3201      	adds	r2, #1
 800e992:	7830      	ldrb	r0, [r6, #0]
 800e994:	f7ff ff8a 	bl	800e8ac <__hexdig_fun>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d1f8      	bne.n	800e98e <__gethex+0xb6>
 800e99c:	1bad      	subs	r5, r5, r6
 800e99e:	00ad      	lsls	r5, r5, #2
 800e9a0:	e004      	b.n	800e9ac <__gethex+0xd4>
 800e9a2:	2400      	movs	r4, #0
 800e9a4:	4625      	mov	r5, r4
 800e9a6:	e7e0      	b.n	800e96a <__gethex+0x92>
 800e9a8:	2d00      	cmp	r5, #0
 800e9aa:	d1f7      	bne.n	800e99c <__gethex+0xc4>
 800e9ac:	7833      	ldrb	r3, [r6, #0]
 800e9ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e9b2:	2b50      	cmp	r3, #80	; 0x50
 800e9b4:	d13b      	bne.n	800ea2e <__gethex+0x156>
 800e9b6:	7873      	ldrb	r3, [r6, #1]
 800e9b8:	2b2b      	cmp	r3, #43	; 0x2b
 800e9ba:	d02c      	beq.n	800ea16 <__gethex+0x13e>
 800e9bc:	2b2d      	cmp	r3, #45	; 0x2d
 800e9be:	d02e      	beq.n	800ea1e <__gethex+0x146>
 800e9c0:	1c71      	adds	r1, r6, #1
 800e9c2:	f04f 0900 	mov.w	r9, #0
 800e9c6:	7808      	ldrb	r0, [r1, #0]
 800e9c8:	f7ff ff70 	bl	800e8ac <__hexdig_fun>
 800e9cc:	1e43      	subs	r3, r0, #1
 800e9ce:	b2db      	uxtb	r3, r3
 800e9d0:	2b18      	cmp	r3, #24
 800e9d2:	d82c      	bhi.n	800ea2e <__gethex+0x156>
 800e9d4:	f1a0 0210 	sub.w	r2, r0, #16
 800e9d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e9dc:	f7ff ff66 	bl	800e8ac <__hexdig_fun>
 800e9e0:	1e43      	subs	r3, r0, #1
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b18      	cmp	r3, #24
 800e9e6:	d91d      	bls.n	800ea24 <__gethex+0x14c>
 800e9e8:	f1b9 0f00 	cmp.w	r9, #0
 800e9ec:	d000      	beq.n	800e9f0 <__gethex+0x118>
 800e9ee:	4252      	negs	r2, r2
 800e9f0:	4415      	add	r5, r2
 800e9f2:	f8cb 1000 	str.w	r1, [fp]
 800e9f6:	b1e4      	cbz	r4, 800ea32 <__gethex+0x15a>
 800e9f8:	9b00      	ldr	r3, [sp, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	bf14      	ite	ne
 800e9fe:	2700      	movne	r7, #0
 800ea00:	2706      	moveq	r7, #6
 800ea02:	4638      	mov	r0, r7
 800ea04:	b009      	add	sp, #36	; 0x24
 800ea06:	ecbd 8b02 	vpop	{d8}
 800ea0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea0e:	463e      	mov	r6, r7
 800ea10:	4625      	mov	r5, r4
 800ea12:	2401      	movs	r4, #1
 800ea14:	e7ca      	b.n	800e9ac <__gethex+0xd4>
 800ea16:	f04f 0900 	mov.w	r9, #0
 800ea1a:	1cb1      	adds	r1, r6, #2
 800ea1c:	e7d3      	b.n	800e9c6 <__gethex+0xee>
 800ea1e:	f04f 0901 	mov.w	r9, #1
 800ea22:	e7fa      	b.n	800ea1a <__gethex+0x142>
 800ea24:	230a      	movs	r3, #10
 800ea26:	fb03 0202 	mla	r2, r3, r2, r0
 800ea2a:	3a10      	subs	r2, #16
 800ea2c:	e7d4      	b.n	800e9d8 <__gethex+0x100>
 800ea2e:	4631      	mov	r1, r6
 800ea30:	e7df      	b.n	800e9f2 <__gethex+0x11a>
 800ea32:	1bf3      	subs	r3, r6, r7
 800ea34:	3b01      	subs	r3, #1
 800ea36:	4621      	mov	r1, r4
 800ea38:	2b07      	cmp	r3, #7
 800ea3a:	dc0b      	bgt.n	800ea54 <__gethex+0x17c>
 800ea3c:	ee18 0a10 	vmov	r0, s16
 800ea40:	f000 fb26 	bl	800f090 <_Balloc>
 800ea44:	4604      	mov	r4, r0
 800ea46:	b940      	cbnz	r0, 800ea5a <__gethex+0x182>
 800ea48:	4b65      	ldr	r3, [pc, #404]	; (800ebe0 <__gethex+0x308>)
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	21de      	movs	r1, #222	; 0xde
 800ea4e:	4865      	ldr	r0, [pc, #404]	; (800ebe4 <__gethex+0x30c>)
 800ea50:	f7fe fe4a 	bl	800d6e8 <__assert_func>
 800ea54:	3101      	adds	r1, #1
 800ea56:	105b      	asrs	r3, r3, #1
 800ea58:	e7ee      	b.n	800ea38 <__gethex+0x160>
 800ea5a:	f100 0914 	add.w	r9, r0, #20
 800ea5e:	f04f 0b00 	mov.w	fp, #0
 800ea62:	f1ca 0301 	rsb	r3, sl, #1
 800ea66:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea6a:	f8cd b000 	str.w	fp, [sp]
 800ea6e:	9306      	str	r3, [sp, #24]
 800ea70:	42b7      	cmp	r7, r6
 800ea72:	d340      	bcc.n	800eaf6 <__gethex+0x21e>
 800ea74:	9802      	ldr	r0, [sp, #8]
 800ea76:	9b00      	ldr	r3, [sp, #0]
 800ea78:	f840 3b04 	str.w	r3, [r0], #4
 800ea7c:	eba0 0009 	sub.w	r0, r0, r9
 800ea80:	1080      	asrs	r0, r0, #2
 800ea82:	0146      	lsls	r6, r0, #5
 800ea84:	6120      	str	r0, [r4, #16]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 fbf8 	bl	800f27c <__hi0bits>
 800ea8c:	1a30      	subs	r0, r6, r0
 800ea8e:	f8d8 6000 	ldr.w	r6, [r8]
 800ea92:	42b0      	cmp	r0, r6
 800ea94:	dd63      	ble.n	800eb5e <__gethex+0x286>
 800ea96:	1b87      	subs	r7, r0, r6
 800ea98:	4639      	mov	r1, r7
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f000 ff92 	bl	800f9c4 <__any_on>
 800eaa0:	4682      	mov	sl, r0
 800eaa2:	b1a8      	cbz	r0, 800ead0 <__gethex+0x1f8>
 800eaa4:	1e7b      	subs	r3, r7, #1
 800eaa6:	1159      	asrs	r1, r3, #5
 800eaa8:	f003 021f 	and.w	r2, r3, #31
 800eaac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800eab0:	f04f 0a01 	mov.w	sl, #1
 800eab4:	fa0a f202 	lsl.w	r2, sl, r2
 800eab8:	420a      	tst	r2, r1
 800eaba:	d009      	beq.n	800ead0 <__gethex+0x1f8>
 800eabc:	4553      	cmp	r3, sl
 800eabe:	dd05      	ble.n	800eacc <__gethex+0x1f4>
 800eac0:	1eb9      	subs	r1, r7, #2
 800eac2:	4620      	mov	r0, r4
 800eac4:	f000 ff7e 	bl	800f9c4 <__any_on>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	d145      	bne.n	800eb58 <__gethex+0x280>
 800eacc:	f04f 0a02 	mov.w	sl, #2
 800ead0:	4639      	mov	r1, r7
 800ead2:	4620      	mov	r0, r4
 800ead4:	f7ff fe98 	bl	800e808 <rshift>
 800ead8:	443d      	add	r5, r7
 800eada:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eade:	42ab      	cmp	r3, r5
 800eae0:	da4c      	bge.n	800eb7c <__gethex+0x2a4>
 800eae2:	ee18 0a10 	vmov	r0, s16
 800eae6:	4621      	mov	r1, r4
 800eae8:	f000 fb12 	bl	800f110 <_Bfree>
 800eaec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eaee:	2300      	movs	r3, #0
 800eaf0:	6013      	str	r3, [r2, #0]
 800eaf2:	27a3      	movs	r7, #163	; 0xa3
 800eaf4:	e785      	b.n	800ea02 <__gethex+0x12a>
 800eaf6:	1e73      	subs	r3, r6, #1
 800eaf8:	9a05      	ldr	r2, [sp, #20]
 800eafa:	9303      	str	r3, [sp, #12]
 800eafc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d019      	beq.n	800eb38 <__gethex+0x260>
 800eb04:	f1bb 0f20 	cmp.w	fp, #32
 800eb08:	d107      	bne.n	800eb1a <__gethex+0x242>
 800eb0a:	9b02      	ldr	r3, [sp, #8]
 800eb0c:	9a00      	ldr	r2, [sp, #0]
 800eb0e:	f843 2b04 	str.w	r2, [r3], #4
 800eb12:	9302      	str	r3, [sp, #8]
 800eb14:	2300      	movs	r3, #0
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	469b      	mov	fp, r3
 800eb1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800eb1e:	f7ff fec5 	bl	800e8ac <__hexdig_fun>
 800eb22:	9b00      	ldr	r3, [sp, #0]
 800eb24:	f000 000f 	and.w	r0, r0, #15
 800eb28:	fa00 f00b 	lsl.w	r0, r0, fp
 800eb2c:	4303      	orrs	r3, r0
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	f10b 0b04 	add.w	fp, fp, #4
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	e00d      	b.n	800eb54 <__gethex+0x27c>
 800eb38:	9b03      	ldr	r3, [sp, #12]
 800eb3a:	9a06      	ldr	r2, [sp, #24]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	42bb      	cmp	r3, r7
 800eb40:	d3e0      	bcc.n	800eb04 <__gethex+0x22c>
 800eb42:	4618      	mov	r0, r3
 800eb44:	9901      	ldr	r1, [sp, #4]
 800eb46:	9307      	str	r3, [sp, #28]
 800eb48:	4652      	mov	r2, sl
 800eb4a:	f001 f9f8 	bl	800ff3e <strncmp>
 800eb4e:	9b07      	ldr	r3, [sp, #28]
 800eb50:	2800      	cmp	r0, #0
 800eb52:	d1d7      	bne.n	800eb04 <__gethex+0x22c>
 800eb54:	461e      	mov	r6, r3
 800eb56:	e78b      	b.n	800ea70 <__gethex+0x198>
 800eb58:	f04f 0a03 	mov.w	sl, #3
 800eb5c:	e7b8      	b.n	800ead0 <__gethex+0x1f8>
 800eb5e:	da0a      	bge.n	800eb76 <__gethex+0x29e>
 800eb60:	1a37      	subs	r7, r6, r0
 800eb62:	4621      	mov	r1, r4
 800eb64:	ee18 0a10 	vmov	r0, s16
 800eb68:	463a      	mov	r2, r7
 800eb6a:	f000 fced 	bl	800f548 <__lshift>
 800eb6e:	1bed      	subs	r5, r5, r7
 800eb70:	4604      	mov	r4, r0
 800eb72:	f100 0914 	add.w	r9, r0, #20
 800eb76:	f04f 0a00 	mov.w	sl, #0
 800eb7a:	e7ae      	b.n	800eada <__gethex+0x202>
 800eb7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800eb80:	42a8      	cmp	r0, r5
 800eb82:	dd72      	ble.n	800ec6a <__gethex+0x392>
 800eb84:	1b45      	subs	r5, r0, r5
 800eb86:	42ae      	cmp	r6, r5
 800eb88:	dc36      	bgt.n	800ebf8 <__gethex+0x320>
 800eb8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb8e:	2b02      	cmp	r3, #2
 800eb90:	d02a      	beq.n	800ebe8 <__gethex+0x310>
 800eb92:	2b03      	cmp	r3, #3
 800eb94:	d02c      	beq.n	800ebf0 <__gethex+0x318>
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d115      	bne.n	800ebc6 <__gethex+0x2ee>
 800eb9a:	42ae      	cmp	r6, r5
 800eb9c:	d113      	bne.n	800ebc6 <__gethex+0x2ee>
 800eb9e:	2e01      	cmp	r6, #1
 800eba0:	d10b      	bne.n	800ebba <__gethex+0x2e2>
 800eba2:	9a04      	ldr	r2, [sp, #16]
 800eba4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eba8:	6013      	str	r3, [r2, #0]
 800ebaa:	2301      	movs	r3, #1
 800ebac:	6123      	str	r3, [r4, #16]
 800ebae:	f8c9 3000 	str.w	r3, [r9]
 800ebb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ebb4:	2762      	movs	r7, #98	; 0x62
 800ebb6:	601c      	str	r4, [r3, #0]
 800ebb8:	e723      	b.n	800ea02 <__gethex+0x12a>
 800ebba:	1e71      	subs	r1, r6, #1
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f000 ff01 	bl	800f9c4 <__any_on>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	d1ed      	bne.n	800eba2 <__gethex+0x2ca>
 800ebc6:	ee18 0a10 	vmov	r0, s16
 800ebca:	4621      	mov	r1, r4
 800ebcc:	f000 faa0 	bl	800f110 <_Bfree>
 800ebd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	6013      	str	r3, [r2, #0]
 800ebd6:	2750      	movs	r7, #80	; 0x50
 800ebd8:	e713      	b.n	800ea02 <__gethex+0x12a>
 800ebda:	bf00      	nop
 800ebdc:	08012108 	.word	0x08012108
 800ebe0:	08012029 	.word	0x08012029
 800ebe4:	0801209c 	.word	0x0801209c
 800ebe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1eb      	bne.n	800ebc6 <__gethex+0x2ee>
 800ebee:	e7d8      	b.n	800eba2 <__gethex+0x2ca>
 800ebf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d1d5      	bne.n	800eba2 <__gethex+0x2ca>
 800ebf6:	e7e6      	b.n	800ebc6 <__gethex+0x2ee>
 800ebf8:	1e6f      	subs	r7, r5, #1
 800ebfa:	f1ba 0f00 	cmp.w	sl, #0
 800ebfe:	d131      	bne.n	800ec64 <__gethex+0x38c>
 800ec00:	b127      	cbz	r7, 800ec0c <__gethex+0x334>
 800ec02:	4639      	mov	r1, r7
 800ec04:	4620      	mov	r0, r4
 800ec06:	f000 fedd 	bl	800f9c4 <__any_on>
 800ec0a:	4682      	mov	sl, r0
 800ec0c:	117b      	asrs	r3, r7, #5
 800ec0e:	2101      	movs	r1, #1
 800ec10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ec14:	f007 071f 	and.w	r7, r7, #31
 800ec18:	fa01 f707 	lsl.w	r7, r1, r7
 800ec1c:	421f      	tst	r7, r3
 800ec1e:	4629      	mov	r1, r5
 800ec20:	4620      	mov	r0, r4
 800ec22:	bf18      	it	ne
 800ec24:	f04a 0a02 	orrne.w	sl, sl, #2
 800ec28:	1b76      	subs	r6, r6, r5
 800ec2a:	f7ff fded 	bl	800e808 <rshift>
 800ec2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ec32:	2702      	movs	r7, #2
 800ec34:	f1ba 0f00 	cmp.w	sl, #0
 800ec38:	d048      	beq.n	800eccc <__gethex+0x3f4>
 800ec3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d015      	beq.n	800ec6e <__gethex+0x396>
 800ec42:	2b03      	cmp	r3, #3
 800ec44:	d017      	beq.n	800ec76 <__gethex+0x39e>
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d109      	bne.n	800ec5e <__gethex+0x386>
 800ec4a:	f01a 0f02 	tst.w	sl, #2
 800ec4e:	d006      	beq.n	800ec5e <__gethex+0x386>
 800ec50:	f8d9 0000 	ldr.w	r0, [r9]
 800ec54:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec58:	f01a 0f01 	tst.w	sl, #1
 800ec5c:	d10e      	bne.n	800ec7c <__gethex+0x3a4>
 800ec5e:	f047 0710 	orr.w	r7, r7, #16
 800ec62:	e033      	b.n	800eccc <__gethex+0x3f4>
 800ec64:	f04f 0a01 	mov.w	sl, #1
 800ec68:	e7d0      	b.n	800ec0c <__gethex+0x334>
 800ec6a:	2701      	movs	r7, #1
 800ec6c:	e7e2      	b.n	800ec34 <__gethex+0x35c>
 800ec6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec70:	f1c3 0301 	rsb	r3, r3, #1
 800ec74:	9315      	str	r3, [sp, #84]	; 0x54
 800ec76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d0f0      	beq.n	800ec5e <__gethex+0x386>
 800ec7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec80:	f104 0314 	add.w	r3, r4, #20
 800ec84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec8c:	f04f 0c00 	mov.w	ip, #0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec96:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec9a:	d01c      	beq.n	800ecd6 <__gethex+0x3fe>
 800ec9c:	3201      	adds	r2, #1
 800ec9e:	6002      	str	r2, [r0, #0]
 800eca0:	2f02      	cmp	r7, #2
 800eca2:	f104 0314 	add.w	r3, r4, #20
 800eca6:	d13f      	bne.n	800ed28 <__gethex+0x450>
 800eca8:	f8d8 2000 	ldr.w	r2, [r8]
 800ecac:	3a01      	subs	r2, #1
 800ecae:	42b2      	cmp	r2, r6
 800ecb0:	d10a      	bne.n	800ecc8 <__gethex+0x3f0>
 800ecb2:	1171      	asrs	r1, r6, #5
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecba:	f006 061f 	and.w	r6, r6, #31
 800ecbe:	fa02 f606 	lsl.w	r6, r2, r6
 800ecc2:	421e      	tst	r6, r3
 800ecc4:	bf18      	it	ne
 800ecc6:	4617      	movne	r7, r2
 800ecc8:	f047 0720 	orr.w	r7, r7, #32
 800eccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecce:	601c      	str	r4, [r3, #0]
 800ecd0:	9b04      	ldr	r3, [sp, #16]
 800ecd2:	601d      	str	r5, [r3, #0]
 800ecd4:	e695      	b.n	800ea02 <__gethex+0x12a>
 800ecd6:	4299      	cmp	r1, r3
 800ecd8:	f843 cc04 	str.w	ip, [r3, #-4]
 800ecdc:	d8d8      	bhi.n	800ec90 <__gethex+0x3b8>
 800ecde:	68a3      	ldr	r3, [r4, #8]
 800ece0:	459b      	cmp	fp, r3
 800ece2:	db19      	blt.n	800ed18 <__gethex+0x440>
 800ece4:	6861      	ldr	r1, [r4, #4]
 800ece6:	ee18 0a10 	vmov	r0, s16
 800ecea:	3101      	adds	r1, #1
 800ecec:	f000 f9d0 	bl	800f090 <_Balloc>
 800ecf0:	4681      	mov	r9, r0
 800ecf2:	b918      	cbnz	r0, 800ecfc <__gethex+0x424>
 800ecf4:	4b1a      	ldr	r3, [pc, #104]	; (800ed60 <__gethex+0x488>)
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	2184      	movs	r1, #132	; 0x84
 800ecfa:	e6a8      	b.n	800ea4e <__gethex+0x176>
 800ecfc:	6922      	ldr	r2, [r4, #16]
 800ecfe:	3202      	adds	r2, #2
 800ed00:	f104 010c 	add.w	r1, r4, #12
 800ed04:	0092      	lsls	r2, r2, #2
 800ed06:	300c      	adds	r0, #12
 800ed08:	f000 f9b4 	bl	800f074 <memcpy>
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	ee18 0a10 	vmov	r0, s16
 800ed12:	f000 f9fd 	bl	800f110 <_Bfree>
 800ed16:	464c      	mov	r4, r9
 800ed18:	6923      	ldr	r3, [r4, #16]
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed20:	6122      	str	r2, [r4, #16]
 800ed22:	2201      	movs	r2, #1
 800ed24:	615a      	str	r2, [r3, #20]
 800ed26:	e7bb      	b.n	800eca0 <__gethex+0x3c8>
 800ed28:	6922      	ldr	r2, [r4, #16]
 800ed2a:	455a      	cmp	r2, fp
 800ed2c:	dd0b      	ble.n	800ed46 <__gethex+0x46e>
 800ed2e:	2101      	movs	r1, #1
 800ed30:	4620      	mov	r0, r4
 800ed32:	f7ff fd69 	bl	800e808 <rshift>
 800ed36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed3a:	3501      	adds	r5, #1
 800ed3c:	42ab      	cmp	r3, r5
 800ed3e:	f6ff aed0 	blt.w	800eae2 <__gethex+0x20a>
 800ed42:	2701      	movs	r7, #1
 800ed44:	e7c0      	b.n	800ecc8 <__gethex+0x3f0>
 800ed46:	f016 061f 	ands.w	r6, r6, #31
 800ed4a:	d0fa      	beq.n	800ed42 <__gethex+0x46a>
 800ed4c:	449a      	add	sl, r3
 800ed4e:	f1c6 0620 	rsb	r6, r6, #32
 800ed52:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ed56:	f000 fa91 	bl	800f27c <__hi0bits>
 800ed5a:	42b0      	cmp	r0, r6
 800ed5c:	dbe7      	blt.n	800ed2e <__gethex+0x456>
 800ed5e:	e7f0      	b.n	800ed42 <__gethex+0x46a>
 800ed60:	08012029 	.word	0x08012029

0800ed64 <L_shift>:
 800ed64:	f1c2 0208 	rsb	r2, r2, #8
 800ed68:	0092      	lsls	r2, r2, #2
 800ed6a:	b570      	push	{r4, r5, r6, lr}
 800ed6c:	f1c2 0620 	rsb	r6, r2, #32
 800ed70:	6843      	ldr	r3, [r0, #4]
 800ed72:	6804      	ldr	r4, [r0, #0]
 800ed74:	fa03 f506 	lsl.w	r5, r3, r6
 800ed78:	432c      	orrs	r4, r5
 800ed7a:	40d3      	lsrs	r3, r2
 800ed7c:	6004      	str	r4, [r0, #0]
 800ed7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed82:	4288      	cmp	r0, r1
 800ed84:	d3f4      	bcc.n	800ed70 <L_shift+0xc>
 800ed86:	bd70      	pop	{r4, r5, r6, pc}

0800ed88 <__match>:
 800ed88:	b530      	push	{r4, r5, lr}
 800ed8a:	6803      	ldr	r3, [r0, #0]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed92:	b914      	cbnz	r4, 800ed9a <__match+0x12>
 800ed94:	6003      	str	r3, [r0, #0]
 800ed96:	2001      	movs	r0, #1
 800ed98:	bd30      	pop	{r4, r5, pc}
 800ed9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eda2:	2d19      	cmp	r5, #25
 800eda4:	bf98      	it	ls
 800eda6:	3220      	addls	r2, #32
 800eda8:	42a2      	cmp	r2, r4
 800edaa:	d0f0      	beq.n	800ed8e <__match+0x6>
 800edac:	2000      	movs	r0, #0
 800edae:	e7f3      	b.n	800ed98 <__match+0x10>

0800edb0 <__hexnan>:
 800edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb4:	680b      	ldr	r3, [r1, #0]
 800edb6:	6801      	ldr	r1, [r0, #0]
 800edb8:	115e      	asrs	r6, r3, #5
 800edba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800edbe:	f013 031f 	ands.w	r3, r3, #31
 800edc2:	b087      	sub	sp, #28
 800edc4:	bf18      	it	ne
 800edc6:	3604      	addne	r6, #4
 800edc8:	2500      	movs	r5, #0
 800edca:	1f37      	subs	r7, r6, #4
 800edcc:	4682      	mov	sl, r0
 800edce:	4690      	mov	r8, r2
 800edd0:	9301      	str	r3, [sp, #4]
 800edd2:	f846 5c04 	str.w	r5, [r6, #-4]
 800edd6:	46b9      	mov	r9, r7
 800edd8:	463c      	mov	r4, r7
 800edda:	9502      	str	r5, [sp, #8]
 800eddc:	46ab      	mov	fp, r5
 800edde:	784a      	ldrb	r2, [r1, #1]
 800ede0:	1c4b      	adds	r3, r1, #1
 800ede2:	9303      	str	r3, [sp, #12]
 800ede4:	b342      	cbz	r2, 800ee38 <__hexnan+0x88>
 800ede6:	4610      	mov	r0, r2
 800ede8:	9105      	str	r1, [sp, #20]
 800edea:	9204      	str	r2, [sp, #16]
 800edec:	f7ff fd5e 	bl	800e8ac <__hexdig_fun>
 800edf0:	2800      	cmp	r0, #0
 800edf2:	d14f      	bne.n	800ee94 <__hexnan+0xe4>
 800edf4:	9a04      	ldr	r2, [sp, #16]
 800edf6:	9905      	ldr	r1, [sp, #20]
 800edf8:	2a20      	cmp	r2, #32
 800edfa:	d818      	bhi.n	800ee2e <__hexnan+0x7e>
 800edfc:	9b02      	ldr	r3, [sp, #8]
 800edfe:	459b      	cmp	fp, r3
 800ee00:	dd13      	ble.n	800ee2a <__hexnan+0x7a>
 800ee02:	454c      	cmp	r4, r9
 800ee04:	d206      	bcs.n	800ee14 <__hexnan+0x64>
 800ee06:	2d07      	cmp	r5, #7
 800ee08:	dc04      	bgt.n	800ee14 <__hexnan+0x64>
 800ee0a:	462a      	mov	r2, r5
 800ee0c:	4649      	mov	r1, r9
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f7ff ffa8 	bl	800ed64 <L_shift>
 800ee14:	4544      	cmp	r4, r8
 800ee16:	d950      	bls.n	800eeba <__hexnan+0x10a>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f1a4 0904 	sub.w	r9, r4, #4
 800ee1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee22:	f8cd b008 	str.w	fp, [sp, #8]
 800ee26:	464c      	mov	r4, r9
 800ee28:	461d      	mov	r5, r3
 800ee2a:	9903      	ldr	r1, [sp, #12]
 800ee2c:	e7d7      	b.n	800edde <__hexnan+0x2e>
 800ee2e:	2a29      	cmp	r2, #41	; 0x29
 800ee30:	d156      	bne.n	800eee0 <__hexnan+0x130>
 800ee32:	3102      	adds	r1, #2
 800ee34:	f8ca 1000 	str.w	r1, [sl]
 800ee38:	f1bb 0f00 	cmp.w	fp, #0
 800ee3c:	d050      	beq.n	800eee0 <__hexnan+0x130>
 800ee3e:	454c      	cmp	r4, r9
 800ee40:	d206      	bcs.n	800ee50 <__hexnan+0xa0>
 800ee42:	2d07      	cmp	r5, #7
 800ee44:	dc04      	bgt.n	800ee50 <__hexnan+0xa0>
 800ee46:	462a      	mov	r2, r5
 800ee48:	4649      	mov	r1, r9
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f7ff ff8a 	bl	800ed64 <L_shift>
 800ee50:	4544      	cmp	r4, r8
 800ee52:	d934      	bls.n	800eebe <__hexnan+0x10e>
 800ee54:	f1a8 0204 	sub.w	r2, r8, #4
 800ee58:	4623      	mov	r3, r4
 800ee5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee62:	429f      	cmp	r7, r3
 800ee64:	d2f9      	bcs.n	800ee5a <__hexnan+0xaa>
 800ee66:	1b3b      	subs	r3, r7, r4
 800ee68:	f023 0303 	bic.w	r3, r3, #3
 800ee6c:	3304      	adds	r3, #4
 800ee6e:	3401      	adds	r4, #1
 800ee70:	3e03      	subs	r6, #3
 800ee72:	42b4      	cmp	r4, r6
 800ee74:	bf88      	it	hi
 800ee76:	2304      	movhi	r3, #4
 800ee78:	4443      	add	r3, r8
 800ee7a:	2200      	movs	r2, #0
 800ee7c:	f843 2b04 	str.w	r2, [r3], #4
 800ee80:	429f      	cmp	r7, r3
 800ee82:	d2fb      	bcs.n	800ee7c <__hexnan+0xcc>
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	b91b      	cbnz	r3, 800ee90 <__hexnan+0xe0>
 800ee88:	4547      	cmp	r7, r8
 800ee8a:	d127      	bne.n	800eedc <__hexnan+0x12c>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	2005      	movs	r0, #5
 800ee92:	e026      	b.n	800eee2 <__hexnan+0x132>
 800ee94:	3501      	adds	r5, #1
 800ee96:	2d08      	cmp	r5, #8
 800ee98:	f10b 0b01 	add.w	fp, fp, #1
 800ee9c:	dd06      	ble.n	800eeac <__hexnan+0xfc>
 800ee9e:	4544      	cmp	r4, r8
 800eea0:	d9c3      	bls.n	800ee2a <__hexnan+0x7a>
 800eea2:	2300      	movs	r3, #0
 800eea4:	f844 3c04 	str.w	r3, [r4, #-4]
 800eea8:	2501      	movs	r5, #1
 800eeaa:	3c04      	subs	r4, #4
 800eeac:	6822      	ldr	r2, [r4, #0]
 800eeae:	f000 000f 	and.w	r0, r0, #15
 800eeb2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eeb6:	6022      	str	r2, [r4, #0]
 800eeb8:	e7b7      	b.n	800ee2a <__hexnan+0x7a>
 800eeba:	2508      	movs	r5, #8
 800eebc:	e7b5      	b.n	800ee2a <__hexnan+0x7a>
 800eebe:	9b01      	ldr	r3, [sp, #4]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d0df      	beq.n	800ee84 <__hexnan+0xd4>
 800eec4:	f04f 32ff 	mov.w	r2, #4294967295
 800eec8:	f1c3 0320 	rsb	r3, r3, #32
 800eecc:	fa22 f303 	lsr.w	r3, r2, r3
 800eed0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eed4:	401a      	ands	r2, r3
 800eed6:	f846 2c04 	str.w	r2, [r6, #-4]
 800eeda:	e7d3      	b.n	800ee84 <__hexnan+0xd4>
 800eedc:	3f04      	subs	r7, #4
 800eede:	e7d1      	b.n	800ee84 <__hexnan+0xd4>
 800eee0:	2004      	movs	r0, #4
 800eee2:	b007      	add	sp, #28
 800eee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eee8 <_getc_r>:
 800eee8:	b538      	push	{r3, r4, r5, lr}
 800eeea:	460c      	mov	r4, r1
 800eeec:	4605      	mov	r5, r0
 800eeee:	b118      	cbz	r0, 800eef8 <_getc_r+0x10>
 800eef0:	6983      	ldr	r3, [r0, #24]
 800eef2:	b90b      	cbnz	r3, 800eef8 <_getc_r+0x10>
 800eef4:	f7ff fbbc 	bl	800e670 <__sinit>
 800eef8:	4b18      	ldr	r3, [pc, #96]	; (800ef5c <_getc_r+0x74>)
 800eefa:	429c      	cmp	r4, r3
 800eefc:	d11e      	bne.n	800ef3c <_getc_r+0x54>
 800eefe:	686c      	ldr	r4, [r5, #4]
 800ef00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef02:	07d8      	lsls	r0, r3, #31
 800ef04:	d405      	bmi.n	800ef12 <_getc_r+0x2a>
 800ef06:	89a3      	ldrh	r3, [r4, #12]
 800ef08:	0599      	lsls	r1, r3, #22
 800ef0a:	d402      	bmi.n	800ef12 <_getc_r+0x2a>
 800ef0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef0e:	f000 f830 	bl	800ef72 <__retarget_lock_acquire_recursive>
 800ef12:	6863      	ldr	r3, [r4, #4]
 800ef14:	3b01      	subs	r3, #1
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	6063      	str	r3, [r4, #4]
 800ef1a:	da19      	bge.n	800ef50 <_getc_r+0x68>
 800ef1c:	4628      	mov	r0, r5
 800ef1e:	4621      	mov	r1, r4
 800ef20:	f000 ff84 	bl	800fe2c <__srget_r>
 800ef24:	4605      	mov	r5, r0
 800ef26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ef28:	07da      	lsls	r2, r3, #31
 800ef2a:	d405      	bmi.n	800ef38 <_getc_r+0x50>
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	059b      	lsls	r3, r3, #22
 800ef30:	d402      	bmi.n	800ef38 <_getc_r+0x50>
 800ef32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ef34:	f000 f81e 	bl	800ef74 <__retarget_lock_release_recursive>
 800ef38:	4628      	mov	r0, r5
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}
 800ef3c:	4b08      	ldr	r3, [pc, #32]	; (800ef60 <_getc_r+0x78>)
 800ef3e:	429c      	cmp	r4, r3
 800ef40:	d101      	bne.n	800ef46 <_getc_r+0x5e>
 800ef42:	68ac      	ldr	r4, [r5, #8]
 800ef44:	e7dc      	b.n	800ef00 <_getc_r+0x18>
 800ef46:	4b07      	ldr	r3, [pc, #28]	; (800ef64 <_getc_r+0x7c>)
 800ef48:	429c      	cmp	r4, r3
 800ef4a:	bf08      	it	eq
 800ef4c:	68ec      	ldreq	r4, [r5, #12]
 800ef4e:	e7d7      	b.n	800ef00 <_getc_r+0x18>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	6022      	str	r2, [r4, #0]
 800ef56:	781d      	ldrb	r5, [r3, #0]
 800ef58:	e7e5      	b.n	800ef26 <_getc_r+0x3e>
 800ef5a:	bf00      	nop
 800ef5c:	0801205c 	.word	0x0801205c
 800ef60:	0801207c 	.word	0x0801207c
 800ef64:	0801203c 	.word	0x0801203c

0800ef68 <_localeconv_r>:
 800ef68:	4800      	ldr	r0, [pc, #0]	; (800ef6c <_localeconv_r+0x4>)
 800ef6a:	4770      	bx	lr
 800ef6c:	20000180 	.word	0x20000180

0800ef70 <__retarget_lock_init_recursive>:
 800ef70:	4770      	bx	lr

0800ef72 <__retarget_lock_acquire_recursive>:
 800ef72:	4770      	bx	lr

0800ef74 <__retarget_lock_release_recursive>:
 800ef74:	4770      	bx	lr

0800ef76 <__swhatbuf_r>:
 800ef76:	b570      	push	{r4, r5, r6, lr}
 800ef78:	460e      	mov	r6, r1
 800ef7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7e:	2900      	cmp	r1, #0
 800ef80:	b096      	sub	sp, #88	; 0x58
 800ef82:	4614      	mov	r4, r2
 800ef84:	461d      	mov	r5, r3
 800ef86:	da07      	bge.n	800ef98 <__swhatbuf_r+0x22>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	602b      	str	r3, [r5, #0]
 800ef8c:	89b3      	ldrh	r3, [r6, #12]
 800ef8e:	061a      	lsls	r2, r3, #24
 800ef90:	d410      	bmi.n	800efb4 <__swhatbuf_r+0x3e>
 800ef92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef96:	e00e      	b.n	800efb6 <__swhatbuf_r+0x40>
 800ef98:	466a      	mov	r2, sp
 800ef9a:	f001 f819 	bl	800ffd0 <_fstat_r>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	dbf2      	blt.n	800ef88 <__swhatbuf_r+0x12>
 800efa2:	9a01      	ldr	r2, [sp, #4]
 800efa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800efa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800efac:	425a      	negs	r2, r3
 800efae:	415a      	adcs	r2, r3
 800efb0:	602a      	str	r2, [r5, #0]
 800efb2:	e7ee      	b.n	800ef92 <__swhatbuf_r+0x1c>
 800efb4:	2340      	movs	r3, #64	; 0x40
 800efb6:	2000      	movs	r0, #0
 800efb8:	6023      	str	r3, [r4, #0]
 800efba:	b016      	add	sp, #88	; 0x58
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800efc0 <__smakebuf_r>:
 800efc0:	898b      	ldrh	r3, [r1, #12]
 800efc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efc4:	079d      	lsls	r5, r3, #30
 800efc6:	4606      	mov	r6, r0
 800efc8:	460c      	mov	r4, r1
 800efca:	d507      	bpl.n	800efdc <__smakebuf_r+0x1c>
 800efcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efd0:	6023      	str	r3, [r4, #0]
 800efd2:	6123      	str	r3, [r4, #16]
 800efd4:	2301      	movs	r3, #1
 800efd6:	6163      	str	r3, [r4, #20]
 800efd8:	b002      	add	sp, #8
 800efda:	bd70      	pop	{r4, r5, r6, pc}
 800efdc:	ab01      	add	r3, sp, #4
 800efde:	466a      	mov	r2, sp
 800efe0:	f7ff ffc9 	bl	800ef76 <__swhatbuf_r>
 800efe4:	9900      	ldr	r1, [sp, #0]
 800efe6:	4605      	mov	r5, r0
 800efe8:	4630      	mov	r0, r6
 800efea:	f000 fd6b 	bl	800fac4 <_malloc_r>
 800efee:	b948      	cbnz	r0, 800f004 <__smakebuf_r+0x44>
 800eff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eff4:	059a      	lsls	r2, r3, #22
 800eff6:	d4ef      	bmi.n	800efd8 <__smakebuf_r+0x18>
 800eff8:	f023 0303 	bic.w	r3, r3, #3
 800effc:	f043 0302 	orr.w	r3, r3, #2
 800f000:	81a3      	strh	r3, [r4, #12]
 800f002:	e7e3      	b.n	800efcc <__smakebuf_r+0xc>
 800f004:	4b0d      	ldr	r3, [pc, #52]	; (800f03c <__smakebuf_r+0x7c>)
 800f006:	62b3      	str	r3, [r6, #40]	; 0x28
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	6020      	str	r0, [r4, #0]
 800f00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f010:	81a3      	strh	r3, [r4, #12]
 800f012:	9b00      	ldr	r3, [sp, #0]
 800f014:	6163      	str	r3, [r4, #20]
 800f016:	9b01      	ldr	r3, [sp, #4]
 800f018:	6120      	str	r0, [r4, #16]
 800f01a:	b15b      	cbz	r3, 800f034 <__smakebuf_r+0x74>
 800f01c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f020:	4630      	mov	r0, r6
 800f022:	f000 ffe7 	bl	800fff4 <_isatty_r>
 800f026:	b128      	cbz	r0, 800f034 <__smakebuf_r+0x74>
 800f028:	89a3      	ldrh	r3, [r4, #12]
 800f02a:	f023 0303 	bic.w	r3, r3, #3
 800f02e:	f043 0301 	orr.w	r3, r3, #1
 800f032:	81a3      	strh	r3, [r4, #12]
 800f034:	89a0      	ldrh	r0, [r4, #12]
 800f036:	4305      	orrs	r5, r0
 800f038:	81a5      	strh	r5, [r4, #12]
 800f03a:	e7cd      	b.n	800efd8 <__smakebuf_r+0x18>
 800f03c:	0800e609 	.word	0x0800e609

0800f040 <malloc>:
 800f040:	4b02      	ldr	r3, [pc, #8]	; (800f04c <malloc+0xc>)
 800f042:	4601      	mov	r1, r0
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	f000 bd3d 	b.w	800fac4 <_malloc_r>
 800f04a:	bf00      	nop
 800f04c:	20000028 	.word	0x20000028

0800f050 <__ascii_mbtowc>:
 800f050:	b082      	sub	sp, #8
 800f052:	b901      	cbnz	r1, 800f056 <__ascii_mbtowc+0x6>
 800f054:	a901      	add	r1, sp, #4
 800f056:	b142      	cbz	r2, 800f06a <__ascii_mbtowc+0x1a>
 800f058:	b14b      	cbz	r3, 800f06e <__ascii_mbtowc+0x1e>
 800f05a:	7813      	ldrb	r3, [r2, #0]
 800f05c:	600b      	str	r3, [r1, #0]
 800f05e:	7812      	ldrb	r2, [r2, #0]
 800f060:	1e10      	subs	r0, r2, #0
 800f062:	bf18      	it	ne
 800f064:	2001      	movne	r0, #1
 800f066:	b002      	add	sp, #8
 800f068:	4770      	bx	lr
 800f06a:	4610      	mov	r0, r2
 800f06c:	e7fb      	b.n	800f066 <__ascii_mbtowc+0x16>
 800f06e:	f06f 0001 	mvn.w	r0, #1
 800f072:	e7f8      	b.n	800f066 <__ascii_mbtowc+0x16>

0800f074 <memcpy>:
 800f074:	440a      	add	r2, r1
 800f076:	4291      	cmp	r1, r2
 800f078:	f100 33ff 	add.w	r3, r0, #4294967295
 800f07c:	d100      	bne.n	800f080 <memcpy+0xc>
 800f07e:	4770      	bx	lr
 800f080:	b510      	push	{r4, lr}
 800f082:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f08a:	4291      	cmp	r1, r2
 800f08c:	d1f9      	bne.n	800f082 <memcpy+0xe>
 800f08e:	bd10      	pop	{r4, pc}

0800f090 <_Balloc>:
 800f090:	b570      	push	{r4, r5, r6, lr}
 800f092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f094:	4604      	mov	r4, r0
 800f096:	460d      	mov	r5, r1
 800f098:	b976      	cbnz	r6, 800f0b8 <_Balloc+0x28>
 800f09a:	2010      	movs	r0, #16
 800f09c:	f7ff ffd0 	bl	800f040 <malloc>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	6260      	str	r0, [r4, #36]	; 0x24
 800f0a4:	b920      	cbnz	r0, 800f0b0 <_Balloc+0x20>
 800f0a6:	4b18      	ldr	r3, [pc, #96]	; (800f108 <_Balloc+0x78>)
 800f0a8:	4818      	ldr	r0, [pc, #96]	; (800f10c <_Balloc+0x7c>)
 800f0aa:	2166      	movs	r1, #102	; 0x66
 800f0ac:	f7fe fb1c 	bl	800d6e8 <__assert_func>
 800f0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0b4:	6006      	str	r6, [r0, #0]
 800f0b6:	60c6      	str	r6, [r0, #12]
 800f0b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f0ba:	68f3      	ldr	r3, [r6, #12]
 800f0bc:	b183      	cbz	r3, 800f0e0 <_Balloc+0x50>
 800f0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0c0:	68db      	ldr	r3, [r3, #12]
 800f0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0c6:	b9b8      	cbnz	r0, 800f0f8 <_Balloc+0x68>
 800f0c8:	2101      	movs	r1, #1
 800f0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800f0ce:	1d72      	adds	r2, r6, #5
 800f0d0:	0092      	lsls	r2, r2, #2
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 fc97 	bl	800fa06 <_calloc_r>
 800f0d8:	b160      	cbz	r0, 800f0f4 <_Balloc+0x64>
 800f0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f0de:	e00e      	b.n	800f0fe <_Balloc+0x6e>
 800f0e0:	2221      	movs	r2, #33	; 0x21
 800f0e2:	2104      	movs	r1, #4
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	f000 fc8e 	bl	800fa06 <_calloc_r>
 800f0ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0ec:	60f0      	str	r0, [r6, #12]
 800f0ee:	68db      	ldr	r3, [r3, #12]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1e4      	bne.n	800f0be <_Balloc+0x2e>
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	bd70      	pop	{r4, r5, r6, pc}
 800f0f8:	6802      	ldr	r2, [r0, #0]
 800f0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0fe:	2300      	movs	r3, #0
 800f100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f104:	e7f7      	b.n	800f0f6 <_Balloc+0x66>
 800f106:	bf00      	nop
 800f108:	08011e08 	.word	0x08011e08
 800f10c:	0801211c 	.word	0x0801211c

0800f110 <_Bfree>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f114:	4605      	mov	r5, r0
 800f116:	460c      	mov	r4, r1
 800f118:	b976      	cbnz	r6, 800f138 <_Bfree+0x28>
 800f11a:	2010      	movs	r0, #16
 800f11c:	f7ff ff90 	bl	800f040 <malloc>
 800f120:	4602      	mov	r2, r0
 800f122:	6268      	str	r0, [r5, #36]	; 0x24
 800f124:	b920      	cbnz	r0, 800f130 <_Bfree+0x20>
 800f126:	4b09      	ldr	r3, [pc, #36]	; (800f14c <_Bfree+0x3c>)
 800f128:	4809      	ldr	r0, [pc, #36]	; (800f150 <_Bfree+0x40>)
 800f12a:	218a      	movs	r1, #138	; 0x8a
 800f12c:	f7fe fadc 	bl	800d6e8 <__assert_func>
 800f130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f134:	6006      	str	r6, [r0, #0]
 800f136:	60c6      	str	r6, [r0, #12]
 800f138:	b13c      	cbz	r4, 800f14a <_Bfree+0x3a>
 800f13a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f13c:	6862      	ldr	r2, [r4, #4]
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f144:	6021      	str	r1, [r4, #0]
 800f146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f14a:	bd70      	pop	{r4, r5, r6, pc}
 800f14c:	08011e08 	.word	0x08011e08
 800f150:	0801211c 	.word	0x0801211c

0800f154 <__multadd>:
 800f154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f158:	690e      	ldr	r6, [r1, #16]
 800f15a:	4607      	mov	r7, r0
 800f15c:	4698      	mov	r8, r3
 800f15e:	460c      	mov	r4, r1
 800f160:	f101 0014 	add.w	r0, r1, #20
 800f164:	2300      	movs	r3, #0
 800f166:	6805      	ldr	r5, [r0, #0]
 800f168:	b2a9      	uxth	r1, r5
 800f16a:	fb02 8101 	mla	r1, r2, r1, r8
 800f16e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f172:	0c2d      	lsrs	r5, r5, #16
 800f174:	fb02 c505 	mla	r5, r2, r5, ip
 800f178:	b289      	uxth	r1, r1
 800f17a:	3301      	adds	r3, #1
 800f17c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f180:	429e      	cmp	r6, r3
 800f182:	f840 1b04 	str.w	r1, [r0], #4
 800f186:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f18a:	dcec      	bgt.n	800f166 <__multadd+0x12>
 800f18c:	f1b8 0f00 	cmp.w	r8, #0
 800f190:	d022      	beq.n	800f1d8 <__multadd+0x84>
 800f192:	68a3      	ldr	r3, [r4, #8]
 800f194:	42b3      	cmp	r3, r6
 800f196:	dc19      	bgt.n	800f1cc <__multadd+0x78>
 800f198:	6861      	ldr	r1, [r4, #4]
 800f19a:	4638      	mov	r0, r7
 800f19c:	3101      	adds	r1, #1
 800f19e:	f7ff ff77 	bl	800f090 <_Balloc>
 800f1a2:	4605      	mov	r5, r0
 800f1a4:	b928      	cbnz	r0, 800f1b2 <__multadd+0x5e>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	4b0d      	ldr	r3, [pc, #52]	; (800f1e0 <__multadd+0x8c>)
 800f1aa:	480e      	ldr	r0, [pc, #56]	; (800f1e4 <__multadd+0x90>)
 800f1ac:	21b5      	movs	r1, #181	; 0xb5
 800f1ae:	f7fe fa9b 	bl	800d6e8 <__assert_func>
 800f1b2:	6922      	ldr	r2, [r4, #16]
 800f1b4:	3202      	adds	r2, #2
 800f1b6:	f104 010c 	add.w	r1, r4, #12
 800f1ba:	0092      	lsls	r2, r2, #2
 800f1bc:	300c      	adds	r0, #12
 800f1be:	f7ff ff59 	bl	800f074 <memcpy>
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff ffa3 	bl	800f110 <_Bfree>
 800f1ca:	462c      	mov	r4, r5
 800f1cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f1d0:	3601      	adds	r6, #1
 800f1d2:	f8c3 8014 	str.w	r8, [r3, #20]
 800f1d6:	6126      	str	r6, [r4, #16]
 800f1d8:	4620      	mov	r0, r4
 800f1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1de:	bf00      	nop
 800f1e0:	08012029 	.word	0x08012029
 800f1e4:	0801211c 	.word	0x0801211c

0800f1e8 <__s2b>:
 800f1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1ec:	460c      	mov	r4, r1
 800f1ee:	4615      	mov	r5, r2
 800f1f0:	461f      	mov	r7, r3
 800f1f2:	2209      	movs	r2, #9
 800f1f4:	3308      	adds	r3, #8
 800f1f6:	4606      	mov	r6, r0
 800f1f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	2201      	movs	r2, #1
 800f200:	429a      	cmp	r2, r3
 800f202:	db09      	blt.n	800f218 <__s2b+0x30>
 800f204:	4630      	mov	r0, r6
 800f206:	f7ff ff43 	bl	800f090 <_Balloc>
 800f20a:	b940      	cbnz	r0, 800f21e <__s2b+0x36>
 800f20c:	4602      	mov	r2, r0
 800f20e:	4b19      	ldr	r3, [pc, #100]	; (800f274 <__s2b+0x8c>)
 800f210:	4819      	ldr	r0, [pc, #100]	; (800f278 <__s2b+0x90>)
 800f212:	21ce      	movs	r1, #206	; 0xce
 800f214:	f7fe fa68 	bl	800d6e8 <__assert_func>
 800f218:	0052      	lsls	r2, r2, #1
 800f21a:	3101      	adds	r1, #1
 800f21c:	e7f0      	b.n	800f200 <__s2b+0x18>
 800f21e:	9b08      	ldr	r3, [sp, #32]
 800f220:	6143      	str	r3, [r0, #20]
 800f222:	2d09      	cmp	r5, #9
 800f224:	f04f 0301 	mov.w	r3, #1
 800f228:	6103      	str	r3, [r0, #16]
 800f22a:	dd16      	ble.n	800f25a <__s2b+0x72>
 800f22c:	f104 0909 	add.w	r9, r4, #9
 800f230:	46c8      	mov	r8, r9
 800f232:	442c      	add	r4, r5
 800f234:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f238:	4601      	mov	r1, r0
 800f23a:	3b30      	subs	r3, #48	; 0x30
 800f23c:	220a      	movs	r2, #10
 800f23e:	4630      	mov	r0, r6
 800f240:	f7ff ff88 	bl	800f154 <__multadd>
 800f244:	45a0      	cmp	r8, r4
 800f246:	d1f5      	bne.n	800f234 <__s2b+0x4c>
 800f248:	f1a5 0408 	sub.w	r4, r5, #8
 800f24c:	444c      	add	r4, r9
 800f24e:	1b2d      	subs	r5, r5, r4
 800f250:	1963      	adds	r3, r4, r5
 800f252:	42bb      	cmp	r3, r7
 800f254:	db04      	blt.n	800f260 <__s2b+0x78>
 800f256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f25a:	340a      	adds	r4, #10
 800f25c:	2509      	movs	r5, #9
 800f25e:	e7f6      	b.n	800f24e <__s2b+0x66>
 800f260:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f264:	4601      	mov	r1, r0
 800f266:	3b30      	subs	r3, #48	; 0x30
 800f268:	220a      	movs	r2, #10
 800f26a:	4630      	mov	r0, r6
 800f26c:	f7ff ff72 	bl	800f154 <__multadd>
 800f270:	e7ee      	b.n	800f250 <__s2b+0x68>
 800f272:	bf00      	nop
 800f274:	08012029 	.word	0x08012029
 800f278:	0801211c 	.word	0x0801211c

0800f27c <__hi0bits>:
 800f27c:	0c03      	lsrs	r3, r0, #16
 800f27e:	041b      	lsls	r3, r3, #16
 800f280:	b9d3      	cbnz	r3, 800f2b8 <__hi0bits+0x3c>
 800f282:	0400      	lsls	r0, r0, #16
 800f284:	2310      	movs	r3, #16
 800f286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f28a:	bf04      	itt	eq
 800f28c:	0200      	lsleq	r0, r0, #8
 800f28e:	3308      	addeq	r3, #8
 800f290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f294:	bf04      	itt	eq
 800f296:	0100      	lsleq	r0, r0, #4
 800f298:	3304      	addeq	r3, #4
 800f29a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f29e:	bf04      	itt	eq
 800f2a0:	0080      	lsleq	r0, r0, #2
 800f2a2:	3302      	addeq	r3, #2
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	db05      	blt.n	800f2b4 <__hi0bits+0x38>
 800f2a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f2ac:	f103 0301 	add.w	r3, r3, #1
 800f2b0:	bf08      	it	eq
 800f2b2:	2320      	moveq	r3, #32
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	4770      	bx	lr
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	e7e4      	b.n	800f286 <__hi0bits+0xa>

0800f2bc <__lo0bits>:
 800f2bc:	6803      	ldr	r3, [r0, #0]
 800f2be:	f013 0207 	ands.w	r2, r3, #7
 800f2c2:	4601      	mov	r1, r0
 800f2c4:	d00b      	beq.n	800f2de <__lo0bits+0x22>
 800f2c6:	07da      	lsls	r2, r3, #31
 800f2c8:	d424      	bmi.n	800f314 <__lo0bits+0x58>
 800f2ca:	0798      	lsls	r0, r3, #30
 800f2cc:	bf49      	itett	mi
 800f2ce:	085b      	lsrmi	r3, r3, #1
 800f2d0:	089b      	lsrpl	r3, r3, #2
 800f2d2:	2001      	movmi	r0, #1
 800f2d4:	600b      	strmi	r3, [r1, #0]
 800f2d6:	bf5c      	itt	pl
 800f2d8:	600b      	strpl	r3, [r1, #0]
 800f2da:	2002      	movpl	r0, #2
 800f2dc:	4770      	bx	lr
 800f2de:	b298      	uxth	r0, r3
 800f2e0:	b9b0      	cbnz	r0, 800f310 <__lo0bits+0x54>
 800f2e2:	0c1b      	lsrs	r3, r3, #16
 800f2e4:	2010      	movs	r0, #16
 800f2e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f2ea:	bf04      	itt	eq
 800f2ec:	0a1b      	lsreq	r3, r3, #8
 800f2ee:	3008      	addeq	r0, #8
 800f2f0:	071a      	lsls	r2, r3, #28
 800f2f2:	bf04      	itt	eq
 800f2f4:	091b      	lsreq	r3, r3, #4
 800f2f6:	3004      	addeq	r0, #4
 800f2f8:	079a      	lsls	r2, r3, #30
 800f2fa:	bf04      	itt	eq
 800f2fc:	089b      	lsreq	r3, r3, #2
 800f2fe:	3002      	addeq	r0, #2
 800f300:	07da      	lsls	r2, r3, #31
 800f302:	d403      	bmi.n	800f30c <__lo0bits+0x50>
 800f304:	085b      	lsrs	r3, r3, #1
 800f306:	f100 0001 	add.w	r0, r0, #1
 800f30a:	d005      	beq.n	800f318 <__lo0bits+0x5c>
 800f30c:	600b      	str	r3, [r1, #0]
 800f30e:	4770      	bx	lr
 800f310:	4610      	mov	r0, r2
 800f312:	e7e8      	b.n	800f2e6 <__lo0bits+0x2a>
 800f314:	2000      	movs	r0, #0
 800f316:	4770      	bx	lr
 800f318:	2020      	movs	r0, #32
 800f31a:	4770      	bx	lr

0800f31c <__i2b>:
 800f31c:	b510      	push	{r4, lr}
 800f31e:	460c      	mov	r4, r1
 800f320:	2101      	movs	r1, #1
 800f322:	f7ff feb5 	bl	800f090 <_Balloc>
 800f326:	4602      	mov	r2, r0
 800f328:	b928      	cbnz	r0, 800f336 <__i2b+0x1a>
 800f32a:	4b05      	ldr	r3, [pc, #20]	; (800f340 <__i2b+0x24>)
 800f32c:	4805      	ldr	r0, [pc, #20]	; (800f344 <__i2b+0x28>)
 800f32e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f332:	f7fe f9d9 	bl	800d6e8 <__assert_func>
 800f336:	2301      	movs	r3, #1
 800f338:	6144      	str	r4, [r0, #20]
 800f33a:	6103      	str	r3, [r0, #16]
 800f33c:	bd10      	pop	{r4, pc}
 800f33e:	bf00      	nop
 800f340:	08012029 	.word	0x08012029
 800f344:	0801211c 	.word	0x0801211c

0800f348 <__multiply>:
 800f348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f34c:	4614      	mov	r4, r2
 800f34e:	690a      	ldr	r2, [r1, #16]
 800f350:	6923      	ldr	r3, [r4, #16]
 800f352:	429a      	cmp	r2, r3
 800f354:	bfb8      	it	lt
 800f356:	460b      	movlt	r3, r1
 800f358:	460d      	mov	r5, r1
 800f35a:	bfbc      	itt	lt
 800f35c:	4625      	movlt	r5, r4
 800f35e:	461c      	movlt	r4, r3
 800f360:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f364:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f368:	68ab      	ldr	r3, [r5, #8]
 800f36a:	6869      	ldr	r1, [r5, #4]
 800f36c:	eb0a 0709 	add.w	r7, sl, r9
 800f370:	42bb      	cmp	r3, r7
 800f372:	b085      	sub	sp, #20
 800f374:	bfb8      	it	lt
 800f376:	3101      	addlt	r1, #1
 800f378:	f7ff fe8a 	bl	800f090 <_Balloc>
 800f37c:	b930      	cbnz	r0, 800f38c <__multiply+0x44>
 800f37e:	4602      	mov	r2, r0
 800f380:	4b42      	ldr	r3, [pc, #264]	; (800f48c <__multiply+0x144>)
 800f382:	4843      	ldr	r0, [pc, #268]	; (800f490 <__multiply+0x148>)
 800f384:	f240 115d 	movw	r1, #349	; 0x15d
 800f388:	f7fe f9ae 	bl	800d6e8 <__assert_func>
 800f38c:	f100 0614 	add.w	r6, r0, #20
 800f390:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f394:	4633      	mov	r3, r6
 800f396:	2200      	movs	r2, #0
 800f398:	4543      	cmp	r3, r8
 800f39a:	d31e      	bcc.n	800f3da <__multiply+0x92>
 800f39c:	f105 0c14 	add.w	ip, r5, #20
 800f3a0:	f104 0314 	add.w	r3, r4, #20
 800f3a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f3a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f3ac:	9202      	str	r2, [sp, #8]
 800f3ae:	ebac 0205 	sub.w	r2, ip, r5
 800f3b2:	3a15      	subs	r2, #21
 800f3b4:	f022 0203 	bic.w	r2, r2, #3
 800f3b8:	3204      	adds	r2, #4
 800f3ba:	f105 0115 	add.w	r1, r5, #21
 800f3be:	458c      	cmp	ip, r1
 800f3c0:	bf38      	it	cc
 800f3c2:	2204      	movcc	r2, #4
 800f3c4:	9201      	str	r2, [sp, #4]
 800f3c6:	9a02      	ldr	r2, [sp, #8]
 800f3c8:	9303      	str	r3, [sp, #12]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d808      	bhi.n	800f3e0 <__multiply+0x98>
 800f3ce:	2f00      	cmp	r7, #0
 800f3d0:	dc55      	bgt.n	800f47e <__multiply+0x136>
 800f3d2:	6107      	str	r7, [r0, #16]
 800f3d4:	b005      	add	sp, #20
 800f3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3da:	f843 2b04 	str.w	r2, [r3], #4
 800f3de:	e7db      	b.n	800f398 <__multiply+0x50>
 800f3e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800f3e4:	f1ba 0f00 	cmp.w	sl, #0
 800f3e8:	d020      	beq.n	800f42c <__multiply+0xe4>
 800f3ea:	f105 0e14 	add.w	lr, r5, #20
 800f3ee:	46b1      	mov	r9, r6
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f3f6:	f8d9 b000 	ldr.w	fp, [r9]
 800f3fa:	b2a1      	uxth	r1, r4
 800f3fc:	fa1f fb8b 	uxth.w	fp, fp
 800f400:	fb0a b101 	mla	r1, sl, r1, fp
 800f404:	4411      	add	r1, r2
 800f406:	f8d9 2000 	ldr.w	r2, [r9]
 800f40a:	0c24      	lsrs	r4, r4, #16
 800f40c:	0c12      	lsrs	r2, r2, #16
 800f40e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f412:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f416:	b289      	uxth	r1, r1
 800f418:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f41c:	45f4      	cmp	ip, lr
 800f41e:	f849 1b04 	str.w	r1, [r9], #4
 800f422:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f426:	d8e4      	bhi.n	800f3f2 <__multiply+0xaa>
 800f428:	9901      	ldr	r1, [sp, #4]
 800f42a:	5072      	str	r2, [r6, r1]
 800f42c:	9a03      	ldr	r2, [sp, #12]
 800f42e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f432:	3304      	adds	r3, #4
 800f434:	f1b9 0f00 	cmp.w	r9, #0
 800f438:	d01f      	beq.n	800f47a <__multiply+0x132>
 800f43a:	6834      	ldr	r4, [r6, #0]
 800f43c:	f105 0114 	add.w	r1, r5, #20
 800f440:	46b6      	mov	lr, r6
 800f442:	f04f 0a00 	mov.w	sl, #0
 800f446:	880a      	ldrh	r2, [r1, #0]
 800f448:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f44c:	fb09 b202 	mla	r2, r9, r2, fp
 800f450:	4492      	add	sl, r2
 800f452:	b2a4      	uxth	r4, r4
 800f454:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f458:	f84e 4b04 	str.w	r4, [lr], #4
 800f45c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f460:	f8be 2000 	ldrh.w	r2, [lr]
 800f464:	0c24      	lsrs	r4, r4, #16
 800f466:	fb09 2404 	mla	r4, r9, r4, r2
 800f46a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f46e:	458c      	cmp	ip, r1
 800f470:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f474:	d8e7      	bhi.n	800f446 <__multiply+0xfe>
 800f476:	9a01      	ldr	r2, [sp, #4]
 800f478:	50b4      	str	r4, [r6, r2]
 800f47a:	3604      	adds	r6, #4
 800f47c:	e7a3      	b.n	800f3c6 <__multiply+0x7e>
 800f47e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f482:	2b00      	cmp	r3, #0
 800f484:	d1a5      	bne.n	800f3d2 <__multiply+0x8a>
 800f486:	3f01      	subs	r7, #1
 800f488:	e7a1      	b.n	800f3ce <__multiply+0x86>
 800f48a:	bf00      	nop
 800f48c:	08012029 	.word	0x08012029
 800f490:	0801211c 	.word	0x0801211c

0800f494 <__pow5mult>:
 800f494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f498:	4615      	mov	r5, r2
 800f49a:	f012 0203 	ands.w	r2, r2, #3
 800f49e:	4606      	mov	r6, r0
 800f4a0:	460f      	mov	r7, r1
 800f4a2:	d007      	beq.n	800f4b4 <__pow5mult+0x20>
 800f4a4:	4c25      	ldr	r4, [pc, #148]	; (800f53c <__pow5mult+0xa8>)
 800f4a6:	3a01      	subs	r2, #1
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4ae:	f7ff fe51 	bl	800f154 <__multadd>
 800f4b2:	4607      	mov	r7, r0
 800f4b4:	10ad      	asrs	r5, r5, #2
 800f4b6:	d03d      	beq.n	800f534 <__pow5mult+0xa0>
 800f4b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f4ba:	b97c      	cbnz	r4, 800f4dc <__pow5mult+0x48>
 800f4bc:	2010      	movs	r0, #16
 800f4be:	f7ff fdbf 	bl	800f040 <malloc>
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	6270      	str	r0, [r6, #36]	; 0x24
 800f4c6:	b928      	cbnz	r0, 800f4d4 <__pow5mult+0x40>
 800f4c8:	4b1d      	ldr	r3, [pc, #116]	; (800f540 <__pow5mult+0xac>)
 800f4ca:	481e      	ldr	r0, [pc, #120]	; (800f544 <__pow5mult+0xb0>)
 800f4cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f4d0:	f7fe f90a 	bl	800d6e8 <__assert_func>
 800f4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4d8:	6004      	str	r4, [r0, #0]
 800f4da:	60c4      	str	r4, [r0, #12]
 800f4dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4e4:	b94c      	cbnz	r4, 800f4fa <__pow5mult+0x66>
 800f4e6:	f240 2171 	movw	r1, #625	; 0x271
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	f7ff ff16 	bl	800f31c <__i2b>
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	6003      	str	r3, [r0, #0]
 800f4fa:	f04f 0900 	mov.w	r9, #0
 800f4fe:	07eb      	lsls	r3, r5, #31
 800f500:	d50a      	bpl.n	800f518 <__pow5mult+0x84>
 800f502:	4639      	mov	r1, r7
 800f504:	4622      	mov	r2, r4
 800f506:	4630      	mov	r0, r6
 800f508:	f7ff ff1e 	bl	800f348 <__multiply>
 800f50c:	4639      	mov	r1, r7
 800f50e:	4680      	mov	r8, r0
 800f510:	4630      	mov	r0, r6
 800f512:	f7ff fdfd 	bl	800f110 <_Bfree>
 800f516:	4647      	mov	r7, r8
 800f518:	106d      	asrs	r5, r5, #1
 800f51a:	d00b      	beq.n	800f534 <__pow5mult+0xa0>
 800f51c:	6820      	ldr	r0, [r4, #0]
 800f51e:	b938      	cbnz	r0, 800f530 <__pow5mult+0x9c>
 800f520:	4622      	mov	r2, r4
 800f522:	4621      	mov	r1, r4
 800f524:	4630      	mov	r0, r6
 800f526:	f7ff ff0f 	bl	800f348 <__multiply>
 800f52a:	6020      	str	r0, [r4, #0]
 800f52c:	f8c0 9000 	str.w	r9, [r0]
 800f530:	4604      	mov	r4, r0
 800f532:	e7e4      	b.n	800f4fe <__pow5mult+0x6a>
 800f534:	4638      	mov	r0, r7
 800f536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f53a:	bf00      	nop
 800f53c:	08012270 	.word	0x08012270
 800f540:	08011e08 	.word	0x08011e08
 800f544:	0801211c 	.word	0x0801211c

0800f548 <__lshift>:
 800f548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f54c:	460c      	mov	r4, r1
 800f54e:	6849      	ldr	r1, [r1, #4]
 800f550:	6923      	ldr	r3, [r4, #16]
 800f552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f556:	68a3      	ldr	r3, [r4, #8]
 800f558:	4607      	mov	r7, r0
 800f55a:	4691      	mov	r9, r2
 800f55c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f560:	f108 0601 	add.w	r6, r8, #1
 800f564:	42b3      	cmp	r3, r6
 800f566:	db0b      	blt.n	800f580 <__lshift+0x38>
 800f568:	4638      	mov	r0, r7
 800f56a:	f7ff fd91 	bl	800f090 <_Balloc>
 800f56e:	4605      	mov	r5, r0
 800f570:	b948      	cbnz	r0, 800f586 <__lshift+0x3e>
 800f572:	4602      	mov	r2, r0
 800f574:	4b28      	ldr	r3, [pc, #160]	; (800f618 <__lshift+0xd0>)
 800f576:	4829      	ldr	r0, [pc, #164]	; (800f61c <__lshift+0xd4>)
 800f578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f57c:	f7fe f8b4 	bl	800d6e8 <__assert_func>
 800f580:	3101      	adds	r1, #1
 800f582:	005b      	lsls	r3, r3, #1
 800f584:	e7ee      	b.n	800f564 <__lshift+0x1c>
 800f586:	2300      	movs	r3, #0
 800f588:	f100 0114 	add.w	r1, r0, #20
 800f58c:	f100 0210 	add.w	r2, r0, #16
 800f590:	4618      	mov	r0, r3
 800f592:	4553      	cmp	r3, sl
 800f594:	db33      	blt.n	800f5fe <__lshift+0xb6>
 800f596:	6920      	ldr	r0, [r4, #16]
 800f598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f59c:	f104 0314 	add.w	r3, r4, #20
 800f5a0:	f019 091f 	ands.w	r9, r9, #31
 800f5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f5ac:	d02b      	beq.n	800f606 <__lshift+0xbe>
 800f5ae:	f1c9 0e20 	rsb	lr, r9, #32
 800f5b2:	468a      	mov	sl, r1
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	6818      	ldr	r0, [r3, #0]
 800f5b8:	fa00 f009 	lsl.w	r0, r0, r9
 800f5bc:	4302      	orrs	r2, r0
 800f5be:	f84a 2b04 	str.w	r2, [sl], #4
 800f5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c6:	459c      	cmp	ip, r3
 800f5c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800f5cc:	d8f3      	bhi.n	800f5b6 <__lshift+0x6e>
 800f5ce:	ebac 0304 	sub.w	r3, ip, r4
 800f5d2:	3b15      	subs	r3, #21
 800f5d4:	f023 0303 	bic.w	r3, r3, #3
 800f5d8:	3304      	adds	r3, #4
 800f5da:	f104 0015 	add.w	r0, r4, #21
 800f5de:	4584      	cmp	ip, r0
 800f5e0:	bf38      	it	cc
 800f5e2:	2304      	movcc	r3, #4
 800f5e4:	50ca      	str	r2, [r1, r3]
 800f5e6:	b10a      	cbz	r2, 800f5ec <__lshift+0xa4>
 800f5e8:	f108 0602 	add.w	r6, r8, #2
 800f5ec:	3e01      	subs	r6, #1
 800f5ee:	4638      	mov	r0, r7
 800f5f0:	612e      	str	r6, [r5, #16]
 800f5f2:	4621      	mov	r1, r4
 800f5f4:	f7ff fd8c 	bl	800f110 <_Bfree>
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800f602:	3301      	adds	r3, #1
 800f604:	e7c5      	b.n	800f592 <__lshift+0x4a>
 800f606:	3904      	subs	r1, #4
 800f608:	f853 2b04 	ldr.w	r2, [r3], #4
 800f60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f610:	459c      	cmp	ip, r3
 800f612:	d8f9      	bhi.n	800f608 <__lshift+0xc0>
 800f614:	e7ea      	b.n	800f5ec <__lshift+0xa4>
 800f616:	bf00      	nop
 800f618:	08012029 	.word	0x08012029
 800f61c:	0801211c 	.word	0x0801211c

0800f620 <__mcmp>:
 800f620:	b530      	push	{r4, r5, lr}
 800f622:	6902      	ldr	r2, [r0, #16]
 800f624:	690c      	ldr	r4, [r1, #16]
 800f626:	1b12      	subs	r2, r2, r4
 800f628:	d10e      	bne.n	800f648 <__mcmp+0x28>
 800f62a:	f100 0314 	add.w	r3, r0, #20
 800f62e:	3114      	adds	r1, #20
 800f630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f63c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f640:	42a5      	cmp	r5, r4
 800f642:	d003      	beq.n	800f64c <__mcmp+0x2c>
 800f644:	d305      	bcc.n	800f652 <__mcmp+0x32>
 800f646:	2201      	movs	r2, #1
 800f648:	4610      	mov	r0, r2
 800f64a:	bd30      	pop	{r4, r5, pc}
 800f64c:	4283      	cmp	r3, r0
 800f64e:	d3f3      	bcc.n	800f638 <__mcmp+0x18>
 800f650:	e7fa      	b.n	800f648 <__mcmp+0x28>
 800f652:	f04f 32ff 	mov.w	r2, #4294967295
 800f656:	e7f7      	b.n	800f648 <__mcmp+0x28>

0800f658 <__mdiff>:
 800f658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	460c      	mov	r4, r1
 800f65e:	4606      	mov	r6, r0
 800f660:	4611      	mov	r1, r2
 800f662:	4620      	mov	r0, r4
 800f664:	4617      	mov	r7, r2
 800f666:	f7ff ffdb 	bl	800f620 <__mcmp>
 800f66a:	1e05      	subs	r5, r0, #0
 800f66c:	d110      	bne.n	800f690 <__mdiff+0x38>
 800f66e:	4629      	mov	r1, r5
 800f670:	4630      	mov	r0, r6
 800f672:	f7ff fd0d 	bl	800f090 <_Balloc>
 800f676:	b930      	cbnz	r0, 800f686 <__mdiff+0x2e>
 800f678:	4b39      	ldr	r3, [pc, #228]	; (800f760 <__mdiff+0x108>)
 800f67a:	4602      	mov	r2, r0
 800f67c:	f240 2132 	movw	r1, #562	; 0x232
 800f680:	4838      	ldr	r0, [pc, #224]	; (800f764 <__mdiff+0x10c>)
 800f682:	f7fe f831 	bl	800d6e8 <__assert_func>
 800f686:	2301      	movs	r3, #1
 800f688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f690:	bfa4      	itt	ge
 800f692:	463b      	movge	r3, r7
 800f694:	4627      	movge	r7, r4
 800f696:	4630      	mov	r0, r6
 800f698:	6879      	ldr	r1, [r7, #4]
 800f69a:	bfa6      	itte	ge
 800f69c:	461c      	movge	r4, r3
 800f69e:	2500      	movge	r5, #0
 800f6a0:	2501      	movlt	r5, #1
 800f6a2:	f7ff fcf5 	bl	800f090 <_Balloc>
 800f6a6:	b920      	cbnz	r0, 800f6b2 <__mdiff+0x5a>
 800f6a8:	4b2d      	ldr	r3, [pc, #180]	; (800f760 <__mdiff+0x108>)
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f6b0:	e7e6      	b.n	800f680 <__mdiff+0x28>
 800f6b2:	693e      	ldr	r6, [r7, #16]
 800f6b4:	60c5      	str	r5, [r0, #12]
 800f6b6:	6925      	ldr	r5, [r4, #16]
 800f6b8:	f107 0114 	add.w	r1, r7, #20
 800f6bc:	f104 0914 	add.w	r9, r4, #20
 800f6c0:	f100 0e14 	add.w	lr, r0, #20
 800f6c4:	f107 0210 	add.w	r2, r7, #16
 800f6c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f6cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f6d0:	46f2      	mov	sl, lr
 800f6d2:	2700      	movs	r7, #0
 800f6d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f6dc:	fa1f f883 	uxth.w	r8, r3
 800f6e0:	fa17 f78b 	uxtah	r7, r7, fp
 800f6e4:	0c1b      	lsrs	r3, r3, #16
 800f6e6:	eba7 0808 	sub.w	r8, r7, r8
 800f6ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f6f2:	fa1f f888 	uxth.w	r8, r8
 800f6f6:	141f      	asrs	r7, r3, #16
 800f6f8:	454d      	cmp	r5, r9
 800f6fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f6fe:	f84a 3b04 	str.w	r3, [sl], #4
 800f702:	d8e7      	bhi.n	800f6d4 <__mdiff+0x7c>
 800f704:	1b2b      	subs	r3, r5, r4
 800f706:	3b15      	subs	r3, #21
 800f708:	f023 0303 	bic.w	r3, r3, #3
 800f70c:	3304      	adds	r3, #4
 800f70e:	3415      	adds	r4, #21
 800f710:	42a5      	cmp	r5, r4
 800f712:	bf38      	it	cc
 800f714:	2304      	movcc	r3, #4
 800f716:	4419      	add	r1, r3
 800f718:	4473      	add	r3, lr
 800f71a:	469e      	mov	lr, r3
 800f71c:	460d      	mov	r5, r1
 800f71e:	4565      	cmp	r5, ip
 800f720:	d30e      	bcc.n	800f740 <__mdiff+0xe8>
 800f722:	f10c 0203 	add.w	r2, ip, #3
 800f726:	1a52      	subs	r2, r2, r1
 800f728:	f022 0203 	bic.w	r2, r2, #3
 800f72c:	3903      	subs	r1, #3
 800f72e:	458c      	cmp	ip, r1
 800f730:	bf38      	it	cc
 800f732:	2200      	movcc	r2, #0
 800f734:	441a      	add	r2, r3
 800f736:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f73a:	b17b      	cbz	r3, 800f75c <__mdiff+0x104>
 800f73c:	6106      	str	r6, [r0, #16]
 800f73e:	e7a5      	b.n	800f68c <__mdiff+0x34>
 800f740:	f855 8b04 	ldr.w	r8, [r5], #4
 800f744:	fa17 f488 	uxtah	r4, r7, r8
 800f748:	1422      	asrs	r2, r4, #16
 800f74a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f74e:	b2a4      	uxth	r4, r4
 800f750:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f754:	f84e 4b04 	str.w	r4, [lr], #4
 800f758:	1417      	asrs	r7, r2, #16
 800f75a:	e7e0      	b.n	800f71e <__mdiff+0xc6>
 800f75c:	3e01      	subs	r6, #1
 800f75e:	e7ea      	b.n	800f736 <__mdiff+0xde>
 800f760:	08012029 	.word	0x08012029
 800f764:	0801211c 	.word	0x0801211c

0800f768 <__ulp>:
 800f768:	b082      	sub	sp, #8
 800f76a:	ed8d 0b00 	vstr	d0, [sp]
 800f76e:	9b01      	ldr	r3, [sp, #4]
 800f770:	4912      	ldr	r1, [pc, #72]	; (800f7bc <__ulp+0x54>)
 800f772:	4019      	ands	r1, r3
 800f774:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f778:	2900      	cmp	r1, #0
 800f77a:	dd05      	ble.n	800f788 <__ulp+0x20>
 800f77c:	2200      	movs	r2, #0
 800f77e:	460b      	mov	r3, r1
 800f780:	ec43 2b10 	vmov	d0, r2, r3
 800f784:	b002      	add	sp, #8
 800f786:	4770      	bx	lr
 800f788:	4249      	negs	r1, r1
 800f78a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f78e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f792:	f04f 0200 	mov.w	r2, #0
 800f796:	f04f 0300 	mov.w	r3, #0
 800f79a:	da04      	bge.n	800f7a6 <__ulp+0x3e>
 800f79c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f7a0:	fa41 f300 	asr.w	r3, r1, r0
 800f7a4:	e7ec      	b.n	800f780 <__ulp+0x18>
 800f7a6:	f1a0 0114 	sub.w	r1, r0, #20
 800f7aa:	291e      	cmp	r1, #30
 800f7ac:	bfda      	itte	le
 800f7ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f7b2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f7b6:	2101      	movgt	r1, #1
 800f7b8:	460a      	mov	r2, r1
 800f7ba:	e7e1      	b.n	800f780 <__ulp+0x18>
 800f7bc:	7ff00000 	.word	0x7ff00000

0800f7c0 <__b2d>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	6905      	ldr	r5, [r0, #16]
 800f7c4:	f100 0714 	add.w	r7, r0, #20
 800f7c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f7cc:	1f2e      	subs	r6, r5, #4
 800f7ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	f7ff fd52 	bl	800f27c <__hi0bits>
 800f7d8:	f1c0 0320 	rsb	r3, r0, #32
 800f7dc:	280a      	cmp	r0, #10
 800f7de:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f85c <__b2d+0x9c>
 800f7e2:	600b      	str	r3, [r1, #0]
 800f7e4:	dc14      	bgt.n	800f810 <__b2d+0x50>
 800f7e6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f7ea:	fa24 f10e 	lsr.w	r1, r4, lr
 800f7ee:	42b7      	cmp	r7, r6
 800f7f0:	ea41 030c 	orr.w	r3, r1, ip
 800f7f4:	bf34      	ite	cc
 800f7f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f7fa:	2100      	movcs	r1, #0
 800f7fc:	3015      	adds	r0, #21
 800f7fe:	fa04 f000 	lsl.w	r0, r4, r0
 800f802:	fa21 f10e 	lsr.w	r1, r1, lr
 800f806:	ea40 0201 	orr.w	r2, r0, r1
 800f80a:	ec43 2b10 	vmov	d0, r2, r3
 800f80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f810:	42b7      	cmp	r7, r6
 800f812:	bf3a      	itte	cc
 800f814:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f818:	f1a5 0608 	subcc.w	r6, r5, #8
 800f81c:	2100      	movcs	r1, #0
 800f81e:	380b      	subs	r0, #11
 800f820:	d017      	beq.n	800f852 <__b2d+0x92>
 800f822:	f1c0 0c20 	rsb	ip, r0, #32
 800f826:	fa04 f500 	lsl.w	r5, r4, r0
 800f82a:	42be      	cmp	r6, r7
 800f82c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f830:	ea45 0504 	orr.w	r5, r5, r4
 800f834:	bf8c      	ite	hi
 800f836:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f83a:	2400      	movls	r4, #0
 800f83c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f840:	fa01 f000 	lsl.w	r0, r1, r0
 800f844:	fa24 f40c 	lsr.w	r4, r4, ip
 800f848:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f84c:	ea40 0204 	orr.w	r2, r0, r4
 800f850:	e7db      	b.n	800f80a <__b2d+0x4a>
 800f852:	ea44 030c 	orr.w	r3, r4, ip
 800f856:	460a      	mov	r2, r1
 800f858:	e7d7      	b.n	800f80a <__b2d+0x4a>
 800f85a:	bf00      	nop
 800f85c:	3ff00000 	.word	0x3ff00000

0800f860 <__d2b>:
 800f860:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f864:	4689      	mov	r9, r1
 800f866:	2101      	movs	r1, #1
 800f868:	ec57 6b10 	vmov	r6, r7, d0
 800f86c:	4690      	mov	r8, r2
 800f86e:	f7ff fc0f 	bl	800f090 <_Balloc>
 800f872:	4604      	mov	r4, r0
 800f874:	b930      	cbnz	r0, 800f884 <__d2b+0x24>
 800f876:	4602      	mov	r2, r0
 800f878:	4b25      	ldr	r3, [pc, #148]	; (800f910 <__d2b+0xb0>)
 800f87a:	4826      	ldr	r0, [pc, #152]	; (800f914 <__d2b+0xb4>)
 800f87c:	f240 310a 	movw	r1, #778	; 0x30a
 800f880:	f7fd ff32 	bl	800d6e8 <__assert_func>
 800f884:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f88c:	bb35      	cbnz	r5, 800f8dc <__d2b+0x7c>
 800f88e:	2e00      	cmp	r6, #0
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	d028      	beq.n	800f8e6 <__d2b+0x86>
 800f894:	4668      	mov	r0, sp
 800f896:	9600      	str	r6, [sp, #0]
 800f898:	f7ff fd10 	bl	800f2bc <__lo0bits>
 800f89c:	9900      	ldr	r1, [sp, #0]
 800f89e:	b300      	cbz	r0, 800f8e2 <__d2b+0x82>
 800f8a0:	9a01      	ldr	r2, [sp, #4]
 800f8a2:	f1c0 0320 	rsb	r3, r0, #32
 800f8a6:	fa02 f303 	lsl.w	r3, r2, r3
 800f8aa:	430b      	orrs	r3, r1
 800f8ac:	40c2      	lsrs	r2, r0
 800f8ae:	6163      	str	r3, [r4, #20]
 800f8b0:	9201      	str	r2, [sp, #4]
 800f8b2:	9b01      	ldr	r3, [sp, #4]
 800f8b4:	61a3      	str	r3, [r4, #24]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	bf14      	ite	ne
 800f8ba:	2202      	movne	r2, #2
 800f8bc:	2201      	moveq	r2, #1
 800f8be:	6122      	str	r2, [r4, #16]
 800f8c0:	b1d5      	cbz	r5, 800f8f8 <__d2b+0x98>
 800f8c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8c6:	4405      	add	r5, r0
 800f8c8:	f8c9 5000 	str.w	r5, [r9]
 800f8cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8d0:	f8c8 0000 	str.w	r0, [r8]
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	b003      	add	sp, #12
 800f8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8e0:	e7d5      	b.n	800f88e <__d2b+0x2e>
 800f8e2:	6161      	str	r1, [r4, #20]
 800f8e4:	e7e5      	b.n	800f8b2 <__d2b+0x52>
 800f8e6:	a801      	add	r0, sp, #4
 800f8e8:	f7ff fce8 	bl	800f2bc <__lo0bits>
 800f8ec:	9b01      	ldr	r3, [sp, #4]
 800f8ee:	6163      	str	r3, [r4, #20]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	6122      	str	r2, [r4, #16]
 800f8f4:	3020      	adds	r0, #32
 800f8f6:	e7e3      	b.n	800f8c0 <__d2b+0x60>
 800f8f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f8fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f900:	f8c9 0000 	str.w	r0, [r9]
 800f904:	6918      	ldr	r0, [r3, #16]
 800f906:	f7ff fcb9 	bl	800f27c <__hi0bits>
 800f90a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f90e:	e7df      	b.n	800f8d0 <__d2b+0x70>
 800f910:	08012029 	.word	0x08012029
 800f914:	0801211c 	.word	0x0801211c

0800f918 <__ratio>:
 800f918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f91c:	4688      	mov	r8, r1
 800f91e:	4669      	mov	r1, sp
 800f920:	4681      	mov	r9, r0
 800f922:	f7ff ff4d 	bl	800f7c0 <__b2d>
 800f926:	a901      	add	r1, sp, #4
 800f928:	4640      	mov	r0, r8
 800f92a:	ec55 4b10 	vmov	r4, r5, d0
 800f92e:	f7ff ff47 	bl	800f7c0 <__b2d>
 800f932:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f936:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f93a:	eba3 0c02 	sub.w	ip, r3, r2
 800f93e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f942:	1a9b      	subs	r3, r3, r2
 800f944:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f948:	ec51 0b10 	vmov	r0, r1, d0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bfd6      	itet	le
 800f950:	460a      	movle	r2, r1
 800f952:	462a      	movgt	r2, r5
 800f954:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f958:	468b      	mov	fp, r1
 800f95a:	462f      	mov	r7, r5
 800f95c:	bfd4      	ite	le
 800f95e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f962:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f966:	4620      	mov	r0, r4
 800f968:	ee10 2a10 	vmov	r2, s0
 800f96c:	465b      	mov	r3, fp
 800f96e:	4639      	mov	r1, r7
 800f970:	f7f0 ff9c 	bl	80008ac <__aeabi_ddiv>
 800f974:	ec41 0b10 	vmov	d0, r0, r1
 800f978:	b003      	add	sp, #12
 800f97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f97e <__copybits>:
 800f97e:	3901      	subs	r1, #1
 800f980:	b570      	push	{r4, r5, r6, lr}
 800f982:	1149      	asrs	r1, r1, #5
 800f984:	6914      	ldr	r4, [r2, #16]
 800f986:	3101      	adds	r1, #1
 800f988:	f102 0314 	add.w	r3, r2, #20
 800f98c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f990:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f994:	1f05      	subs	r5, r0, #4
 800f996:	42a3      	cmp	r3, r4
 800f998:	d30c      	bcc.n	800f9b4 <__copybits+0x36>
 800f99a:	1aa3      	subs	r3, r4, r2
 800f99c:	3b11      	subs	r3, #17
 800f99e:	f023 0303 	bic.w	r3, r3, #3
 800f9a2:	3211      	adds	r2, #17
 800f9a4:	42a2      	cmp	r2, r4
 800f9a6:	bf88      	it	hi
 800f9a8:	2300      	movhi	r3, #0
 800f9aa:	4418      	add	r0, r3
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	4288      	cmp	r0, r1
 800f9b0:	d305      	bcc.n	800f9be <__copybits+0x40>
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}
 800f9b4:	f853 6b04 	ldr.w	r6, [r3], #4
 800f9b8:	f845 6f04 	str.w	r6, [r5, #4]!
 800f9bc:	e7eb      	b.n	800f996 <__copybits+0x18>
 800f9be:	f840 3b04 	str.w	r3, [r0], #4
 800f9c2:	e7f4      	b.n	800f9ae <__copybits+0x30>

0800f9c4 <__any_on>:
 800f9c4:	f100 0214 	add.w	r2, r0, #20
 800f9c8:	6900      	ldr	r0, [r0, #16]
 800f9ca:	114b      	asrs	r3, r1, #5
 800f9cc:	4298      	cmp	r0, r3
 800f9ce:	b510      	push	{r4, lr}
 800f9d0:	db11      	blt.n	800f9f6 <__any_on+0x32>
 800f9d2:	dd0a      	ble.n	800f9ea <__any_on+0x26>
 800f9d4:	f011 011f 	ands.w	r1, r1, #31
 800f9d8:	d007      	beq.n	800f9ea <__any_on+0x26>
 800f9da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9de:	fa24 f001 	lsr.w	r0, r4, r1
 800f9e2:	fa00 f101 	lsl.w	r1, r0, r1
 800f9e6:	428c      	cmp	r4, r1
 800f9e8:	d10b      	bne.n	800fa02 <__any_on+0x3e>
 800f9ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d803      	bhi.n	800f9fa <__any_on+0x36>
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	bd10      	pop	{r4, pc}
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	e7f7      	b.n	800f9ea <__any_on+0x26>
 800f9fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9fe:	2900      	cmp	r1, #0
 800fa00:	d0f5      	beq.n	800f9ee <__any_on+0x2a>
 800fa02:	2001      	movs	r0, #1
 800fa04:	e7f6      	b.n	800f9f4 <__any_on+0x30>

0800fa06 <_calloc_r>:
 800fa06:	b513      	push	{r0, r1, r4, lr}
 800fa08:	434a      	muls	r2, r1
 800fa0a:	4611      	mov	r1, r2
 800fa0c:	9201      	str	r2, [sp, #4]
 800fa0e:	f000 f859 	bl	800fac4 <_malloc_r>
 800fa12:	4604      	mov	r4, r0
 800fa14:	b118      	cbz	r0, 800fa1e <_calloc_r+0x18>
 800fa16:	9a01      	ldr	r2, [sp, #4]
 800fa18:	2100      	movs	r1, #0
 800fa1a:	f7fc f97f 	bl	800bd1c <memset>
 800fa1e:	4620      	mov	r0, r4
 800fa20:	b002      	add	sp, #8
 800fa22:	bd10      	pop	{r4, pc}

0800fa24 <_free_r>:
 800fa24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa26:	2900      	cmp	r1, #0
 800fa28:	d048      	beq.n	800fabc <_free_r+0x98>
 800fa2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa2e:	9001      	str	r0, [sp, #4]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	f1a1 0404 	sub.w	r4, r1, #4
 800fa36:	bfb8      	it	lt
 800fa38:	18e4      	addlt	r4, r4, r3
 800fa3a:	f000 fafd 	bl	8010038 <__malloc_lock>
 800fa3e:	4a20      	ldr	r2, [pc, #128]	; (800fac0 <_free_r+0x9c>)
 800fa40:	9801      	ldr	r0, [sp, #4]
 800fa42:	6813      	ldr	r3, [r2, #0]
 800fa44:	4615      	mov	r5, r2
 800fa46:	b933      	cbnz	r3, 800fa56 <_free_r+0x32>
 800fa48:	6063      	str	r3, [r4, #4]
 800fa4a:	6014      	str	r4, [r2, #0]
 800fa4c:	b003      	add	sp, #12
 800fa4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa52:	f000 baf7 	b.w	8010044 <__malloc_unlock>
 800fa56:	42a3      	cmp	r3, r4
 800fa58:	d90b      	bls.n	800fa72 <_free_r+0x4e>
 800fa5a:	6821      	ldr	r1, [r4, #0]
 800fa5c:	1862      	adds	r2, r4, r1
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	bf04      	itt	eq
 800fa62:	681a      	ldreq	r2, [r3, #0]
 800fa64:	685b      	ldreq	r3, [r3, #4]
 800fa66:	6063      	str	r3, [r4, #4]
 800fa68:	bf04      	itt	eq
 800fa6a:	1852      	addeq	r2, r2, r1
 800fa6c:	6022      	streq	r2, [r4, #0]
 800fa6e:	602c      	str	r4, [r5, #0]
 800fa70:	e7ec      	b.n	800fa4c <_free_r+0x28>
 800fa72:	461a      	mov	r2, r3
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	b10b      	cbz	r3, 800fa7c <_free_r+0x58>
 800fa78:	42a3      	cmp	r3, r4
 800fa7a:	d9fa      	bls.n	800fa72 <_free_r+0x4e>
 800fa7c:	6811      	ldr	r1, [r2, #0]
 800fa7e:	1855      	adds	r5, r2, r1
 800fa80:	42a5      	cmp	r5, r4
 800fa82:	d10b      	bne.n	800fa9c <_free_r+0x78>
 800fa84:	6824      	ldr	r4, [r4, #0]
 800fa86:	4421      	add	r1, r4
 800fa88:	1854      	adds	r4, r2, r1
 800fa8a:	42a3      	cmp	r3, r4
 800fa8c:	6011      	str	r1, [r2, #0]
 800fa8e:	d1dd      	bne.n	800fa4c <_free_r+0x28>
 800fa90:	681c      	ldr	r4, [r3, #0]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	6053      	str	r3, [r2, #4]
 800fa96:	4421      	add	r1, r4
 800fa98:	6011      	str	r1, [r2, #0]
 800fa9a:	e7d7      	b.n	800fa4c <_free_r+0x28>
 800fa9c:	d902      	bls.n	800faa4 <_free_r+0x80>
 800fa9e:	230c      	movs	r3, #12
 800faa0:	6003      	str	r3, [r0, #0]
 800faa2:	e7d3      	b.n	800fa4c <_free_r+0x28>
 800faa4:	6825      	ldr	r5, [r4, #0]
 800faa6:	1961      	adds	r1, r4, r5
 800faa8:	428b      	cmp	r3, r1
 800faaa:	bf04      	itt	eq
 800faac:	6819      	ldreq	r1, [r3, #0]
 800faae:	685b      	ldreq	r3, [r3, #4]
 800fab0:	6063      	str	r3, [r4, #4]
 800fab2:	bf04      	itt	eq
 800fab4:	1949      	addeq	r1, r1, r5
 800fab6:	6021      	streq	r1, [r4, #0]
 800fab8:	6054      	str	r4, [r2, #4]
 800faba:	e7c7      	b.n	800fa4c <_free_r+0x28>
 800fabc:	b003      	add	sp, #12
 800fabe:	bd30      	pop	{r4, r5, pc}
 800fac0:	20000288 	.word	0x20000288

0800fac4 <_malloc_r>:
 800fac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fac6:	1ccd      	adds	r5, r1, #3
 800fac8:	f025 0503 	bic.w	r5, r5, #3
 800facc:	3508      	adds	r5, #8
 800face:	2d0c      	cmp	r5, #12
 800fad0:	bf38      	it	cc
 800fad2:	250c      	movcc	r5, #12
 800fad4:	2d00      	cmp	r5, #0
 800fad6:	4606      	mov	r6, r0
 800fad8:	db01      	blt.n	800fade <_malloc_r+0x1a>
 800fada:	42a9      	cmp	r1, r5
 800fadc:	d903      	bls.n	800fae6 <_malloc_r+0x22>
 800fade:	230c      	movs	r3, #12
 800fae0:	6033      	str	r3, [r6, #0]
 800fae2:	2000      	movs	r0, #0
 800fae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fae6:	f000 faa7 	bl	8010038 <__malloc_lock>
 800faea:	4921      	ldr	r1, [pc, #132]	; (800fb70 <_malloc_r+0xac>)
 800faec:	680a      	ldr	r2, [r1, #0]
 800faee:	4614      	mov	r4, r2
 800faf0:	b99c      	cbnz	r4, 800fb1a <_malloc_r+0x56>
 800faf2:	4f20      	ldr	r7, [pc, #128]	; (800fb74 <_malloc_r+0xb0>)
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	b923      	cbnz	r3, 800fb02 <_malloc_r+0x3e>
 800faf8:	4621      	mov	r1, r4
 800fafa:	4630      	mov	r0, r6
 800fafc:	f000 f9cc 	bl	800fe98 <_sbrk_r>
 800fb00:	6038      	str	r0, [r7, #0]
 800fb02:	4629      	mov	r1, r5
 800fb04:	4630      	mov	r0, r6
 800fb06:	f000 f9c7 	bl	800fe98 <_sbrk_r>
 800fb0a:	1c43      	adds	r3, r0, #1
 800fb0c:	d123      	bne.n	800fb56 <_malloc_r+0x92>
 800fb0e:	230c      	movs	r3, #12
 800fb10:	6033      	str	r3, [r6, #0]
 800fb12:	4630      	mov	r0, r6
 800fb14:	f000 fa96 	bl	8010044 <__malloc_unlock>
 800fb18:	e7e3      	b.n	800fae2 <_malloc_r+0x1e>
 800fb1a:	6823      	ldr	r3, [r4, #0]
 800fb1c:	1b5b      	subs	r3, r3, r5
 800fb1e:	d417      	bmi.n	800fb50 <_malloc_r+0x8c>
 800fb20:	2b0b      	cmp	r3, #11
 800fb22:	d903      	bls.n	800fb2c <_malloc_r+0x68>
 800fb24:	6023      	str	r3, [r4, #0]
 800fb26:	441c      	add	r4, r3
 800fb28:	6025      	str	r5, [r4, #0]
 800fb2a:	e004      	b.n	800fb36 <_malloc_r+0x72>
 800fb2c:	6863      	ldr	r3, [r4, #4]
 800fb2e:	42a2      	cmp	r2, r4
 800fb30:	bf0c      	ite	eq
 800fb32:	600b      	streq	r3, [r1, #0]
 800fb34:	6053      	strne	r3, [r2, #4]
 800fb36:	4630      	mov	r0, r6
 800fb38:	f000 fa84 	bl	8010044 <__malloc_unlock>
 800fb3c:	f104 000b 	add.w	r0, r4, #11
 800fb40:	1d23      	adds	r3, r4, #4
 800fb42:	f020 0007 	bic.w	r0, r0, #7
 800fb46:	1ac2      	subs	r2, r0, r3
 800fb48:	d0cc      	beq.n	800fae4 <_malloc_r+0x20>
 800fb4a:	1a1b      	subs	r3, r3, r0
 800fb4c:	50a3      	str	r3, [r4, r2]
 800fb4e:	e7c9      	b.n	800fae4 <_malloc_r+0x20>
 800fb50:	4622      	mov	r2, r4
 800fb52:	6864      	ldr	r4, [r4, #4]
 800fb54:	e7cc      	b.n	800faf0 <_malloc_r+0x2c>
 800fb56:	1cc4      	adds	r4, r0, #3
 800fb58:	f024 0403 	bic.w	r4, r4, #3
 800fb5c:	42a0      	cmp	r0, r4
 800fb5e:	d0e3      	beq.n	800fb28 <_malloc_r+0x64>
 800fb60:	1a21      	subs	r1, r4, r0
 800fb62:	4630      	mov	r0, r6
 800fb64:	f000 f998 	bl	800fe98 <_sbrk_r>
 800fb68:	3001      	adds	r0, #1
 800fb6a:	d1dd      	bne.n	800fb28 <_malloc_r+0x64>
 800fb6c:	e7cf      	b.n	800fb0e <_malloc_r+0x4a>
 800fb6e:	bf00      	nop
 800fb70:	20000288 	.word	0x20000288
 800fb74:	2000028c 	.word	0x2000028c

0800fb78 <__sfputc_r>:
 800fb78:	6893      	ldr	r3, [r2, #8]
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	b410      	push	{r4}
 800fb80:	6093      	str	r3, [r2, #8]
 800fb82:	da08      	bge.n	800fb96 <__sfputc_r+0x1e>
 800fb84:	6994      	ldr	r4, [r2, #24]
 800fb86:	42a3      	cmp	r3, r4
 800fb88:	db01      	blt.n	800fb8e <__sfputc_r+0x16>
 800fb8a:	290a      	cmp	r1, #10
 800fb8c:	d103      	bne.n	800fb96 <__sfputc_r+0x1e>
 800fb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb92:	f7fd bce9 	b.w	800d568 <__swbuf_r>
 800fb96:	6813      	ldr	r3, [r2, #0]
 800fb98:	1c58      	adds	r0, r3, #1
 800fb9a:	6010      	str	r0, [r2, #0]
 800fb9c:	7019      	strb	r1, [r3, #0]
 800fb9e:	4608      	mov	r0, r1
 800fba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fba4:	4770      	bx	lr

0800fba6 <__sfputs_r>:
 800fba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba8:	4606      	mov	r6, r0
 800fbaa:	460f      	mov	r7, r1
 800fbac:	4614      	mov	r4, r2
 800fbae:	18d5      	adds	r5, r2, r3
 800fbb0:	42ac      	cmp	r4, r5
 800fbb2:	d101      	bne.n	800fbb8 <__sfputs_r+0x12>
 800fbb4:	2000      	movs	r0, #0
 800fbb6:	e007      	b.n	800fbc8 <__sfputs_r+0x22>
 800fbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbbc:	463a      	mov	r2, r7
 800fbbe:	4630      	mov	r0, r6
 800fbc0:	f7ff ffda 	bl	800fb78 <__sfputc_r>
 800fbc4:	1c43      	adds	r3, r0, #1
 800fbc6:	d1f3      	bne.n	800fbb0 <__sfputs_r+0xa>
 800fbc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fbcc <_vfiprintf_r>:
 800fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd0:	460d      	mov	r5, r1
 800fbd2:	b09d      	sub	sp, #116	; 0x74
 800fbd4:	4614      	mov	r4, r2
 800fbd6:	4698      	mov	r8, r3
 800fbd8:	4606      	mov	r6, r0
 800fbda:	b118      	cbz	r0, 800fbe4 <_vfiprintf_r+0x18>
 800fbdc:	6983      	ldr	r3, [r0, #24]
 800fbde:	b90b      	cbnz	r3, 800fbe4 <_vfiprintf_r+0x18>
 800fbe0:	f7fe fd46 	bl	800e670 <__sinit>
 800fbe4:	4b89      	ldr	r3, [pc, #548]	; (800fe0c <_vfiprintf_r+0x240>)
 800fbe6:	429d      	cmp	r5, r3
 800fbe8:	d11b      	bne.n	800fc22 <_vfiprintf_r+0x56>
 800fbea:	6875      	ldr	r5, [r6, #4]
 800fbec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbee:	07d9      	lsls	r1, r3, #31
 800fbf0:	d405      	bmi.n	800fbfe <_vfiprintf_r+0x32>
 800fbf2:	89ab      	ldrh	r3, [r5, #12]
 800fbf4:	059a      	lsls	r2, r3, #22
 800fbf6:	d402      	bmi.n	800fbfe <_vfiprintf_r+0x32>
 800fbf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbfa:	f7ff f9ba 	bl	800ef72 <__retarget_lock_acquire_recursive>
 800fbfe:	89ab      	ldrh	r3, [r5, #12]
 800fc00:	071b      	lsls	r3, r3, #28
 800fc02:	d501      	bpl.n	800fc08 <_vfiprintf_r+0x3c>
 800fc04:	692b      	ldr	r3, [r5, #16]
 800fc06:	b9eb      	cbnz	r3, 800fc44 <_vfiprintf_r+0x78>
 800fc08:	4629      	mov	r1, r5
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	f7fd fcfe 	bl	800d60c <__swsetup_r>
 800fc10:	b1c0      	cbz	r0, 800fc44 <_vfiprintf_r+0x78>
 800fc12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc14:	07dc      	lsls	r4, r3, #31
 800fc16:	d50e      	bpl.n	800fc36 <_vfiprintf_r+0x6a>
 800fc18:	f04f 30ff 	mov.w	r0, #4294967295
 800fc1c:	b01d      	add	sp, #116	; 0x74
 800fc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc22:	4b7b      	ldr	r3, [pc, #492]	; (800fe10 <_vfiprintf_r+0x244>)
 800fc24:	429d      	cmp	r5, r3
 800fc26:	d101      	bne.n	800fc2c <_vfiprintf_r+0x60>
 800fc28:	68b5      	ldr	r5, [r6, #8]
 800fc2a:	e7df      	b.n	800fbec <_vfiprintf_r+0x20>
 800fc2c:	4b79      	ldr	r3, [pc, #484]	; (800fe14 <_vfiprintf_r+0x248>)
 800fc2e:	429d      	cmp	r5, r3
 800fc30:	bf08      	it	eq
 800fc32:	68f5      	ldreq	r5, [r6, #12]
 800fc34:	e7da      	b.n	800fbec <_vfiprintf_r+0x20>
 800fc36:	89ab      	ldrh	r3, [r5, #12]
 800fc38:	0598      	lsls	r0, r3, #22
 800fc3a:	d4ed      	bmi.n	800fc18 <_vfiprintf_r+0x4c>
 800fc3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc3e:	f7ff f999 	bl	800ef74 <__retarget_lock_release_recursive>
 800fc42:	e7e9      	b.n	800fc18 <_vfiprintf_r+0x4c>
 800fc44:	2300      	movs	r3, #0
 800fc46:	9309      	str	r3, [sp, #36]	; 0x24
 800fc48:	2320      	movs	r3, #32
 800fc4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc52:	2330      	movs	r3, #48	; 0x30
 800fc54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fe18 <_vfiprintf_r+0x24c>
 800fc58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc5c:	f04f 0901 	mov.w	r9, #1
 800fc60:	4623      	mov	r3, r4
 800fc62:	469a      	mov	sl, r3
 800fc64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc68:	b10a      	cbz	r2, 800fc6e <_vfiprintf_r+0xa2>
 800fc6a:	2a25      	cmp	r2, #37	; 0x25
 800fc6c:	d1f9      	bne.n	800fc62 <_vfiprintf_r+0x96>
 800fc6e:	ebba 0b04 	subs.w	fp, sl, r4
 800fc72:	d00b      	beq.n	800fc8c <_vfiprintf_r+0xc0>
 800fc74:	465b      	mov	r3, fp
 800fc76:	4622      	mov	r2, r4
 800fc78:	4629      	mov	r1, r5
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	f7ff ff93 	bl	800fba6 <__sfputs_r>
 800fc80:	3001      	adds	r0, #1
 800fc82:	f000 80aa 	beq.w	800fdda <_vfiprintf_r+0x20e>
 800fc86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc88:	445a      	add	r2, fp
 800fc8a:	9209      	str	r2, [sp, #36]	; 0x24
 800fc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	f000 80a2 	beq.w	800fdda <_vfiprintf_r+0x20e>
 800fc96:	2300      	movs	r3, #0
 800fc98:	f04f 32ff 	mov.w	r2, #4294967295
 800fc9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fca0:	f10a 0a01 	add.w	sl, sl, #1
 800fca4:	9304      	str	r3, [sp, #16]
 800fca6:	9307      	str	r3, [sp, #28]
 800fca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcac:	931a      	str	r3, [sp, #104]	; 0x68
 800fcae:	4654      	mov	r4, sl
 800fcb0:	2205      	movs	r2, #5
 800fcb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcb6:	4858      	ldr	r0, [pc, #352]	; (800fe18 <_vfiprintf_r+0x24c>)
 800fcb8:	f7f0 fac2 	bl	8000240 <memchr>
 800fcbc:	9a04      	ldr	r2, [sp, #16]
 800fcbe:	b9d8      	cbnz	r0, 800fcf8 <_vfiprintf_r+0x12c>
 800fcc0:	06d1      	lsls	r1, r2, #27
 800fcc2:	bf44      	itt	mi
 800fcc4:	2320      	movmi	r3, #32
 800fcc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcca:	0713      	lsls	r3, r2, #28
 800fccc:	bf44      	itt	mi
 800fcce:	232b      	movmi	r3, #43	; 0x2b
 800fcd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcd4:	f89a 3000 	ldrb.w	r3, [sl]
 800fcd8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcda:	d015      	beq.n	800fd08 <_vfiprintf_r+0x13c>
 800fcdc:	9a07      	ldr	r2, [sp, #28]
 800fcde:	4654      	mov	r4, sl
 800fce0:	2000      	movs	r0, #0
 800fce2:	f04f 0c0a 	mov.w	ip, #10
 800fce6:	4621      	mov	r1, r4
 800fce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcec:	3b30      	subs	r3, #48	; 0x30
 800fcee:	2b09      	cmp	r3, #9
 800fcf0:	d94e      	bls.n	800fd90 <_vfiprintf_r+0x1c4>
 800fcf2:	b1b0      	cbz	r0, 800fd22 <_vfiprintf_r+0x156>
 800fcf4:	9207      	str	r2, [sp, #28]
 800fcf6:	e014      	b.n	800fd22 <_vfiprintf_r+0x156>
 800fcf8:	eba0 0308 	sub.w	r3, r0, r8
 800fcfc:	fa09 f303 	lsl.w	r3, r9, r3
 800fd00:	4313      	orrs	r3, r2
 800fd02:	9304      	str	r3, [sp, #16]
 800fd04:	46a2      	mov	sl, r4
 800fd06:	e7d2      	b.n	800fcae <_vfiprintf_r+0xe2>
 800fd08:	9b03      	ldr	r3, [sp, #12]
 800fd0a:	1d19      	adds	r1, r3, #4
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	9103      	str	r1, [sp, #12]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	bfbb      	ittet	lt
 800fd14:	425b      	neglt	r3, r3
 800fd16:	f042 0202 	orrlt.w	r2, r2, #2
 800fd1a:	9307      	strge	r3, [sp, #28]
 800fd1c:	9307      	strlt	r3, [sp, #28]
 800fd1e:	bfb8      	it	lt
 800fd20:	9204      	strlt	r2, [sp, #16]
 800fd22:	7823      	ldrb	r3, [r4, #0]
 800fd24:	2b2e      	cmp	r3, #46	; 0x2e
 800fd26:	d10c      	bne.n	800fd42 <_vfiprintf_r+0x176>
 800fd28:	7863      	ldrb	r3, [r4, #1]
 800fd2a:	2b2a      	cmp	r3, #42	; 0x2a
 800fd2c:	d135      	bne.n	800fd9a <_vfiprintf_r+0x1ce>
 800fd2e:	9b03      	ldr	r3, [sp, #12]
 800fd30:	1d1a      	adds	r2, r3, #4
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	9203      	str	r2, [sp, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	bfb8      	it	lt
 800fd3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd3e:	3402      	adds	r4, #2
 800fd40:	9305      	str	r3, [sp, #20]
 800fd42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fe28 <_vfiprintf_r+0x25c>
 800fd46:	7821      	ldrb	r1, [r4, #0]
 800fd48:	2203      	movs	r2, #3
 800fd4a:	4650      	mov	r0, sl
 800fd4c:	f7f0 fa78 	bl	8000240 <memchr>
 800fd50:	b140      	cbz	r0, 800fd64 <_vfiprintf_r+0x198>
 800fd52:	2340      	movs	r3, #64	; 0x40
 800fd54:	eba0 000a 	sub.w	r0, r0, sl
 800fd58:	fa03 f000 	lsl.w	r0, r3, r0
 800fd5c:	9b04      	ldr	r3, [sp, #16]
 800fd5e:	4303      	orrs	r3, r0
 800fd60:	3401      	adds	r4, #1
 800fd62:	9304      	str	r3, [sp, #16]
 800fd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd68:	482c      	ldr	r0, [pc, #176]	; (800fe1c <_vfiprintf_r+0x250>)
 800fd6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd6e:	2206      	movs	r2, #6
 800fd70:	f7f0 fa66 	bl	8000240 <memchr>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d03f      	beq.n	800fdf8 <_vfiprintf_r+0x22c>
 800fd78:	4b29      	ldr	r3, [pc, #164]	; (800fe20 <_vfiprintf_r+0x254>)
 800fd7a:	bb1b      	cbnz	r3, 800fdc4 <_vfiprintf_r+0x1f8>
 800fd7c:	9b03      	ldr	r3, [sp, #12]
 800fd7e:	3307      	adds	r3, #7
 800fd80:	f023 0307 	bic.w	r3, r3, #7
 800fd84:	3308      	adds	r3, #8
 800fd86:	9303      	str	r3, [sp, #12]
 800fd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd8a:	443b      	add	r3, r7
 800fd8c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd8e:	e767      	b.n	800fc60 <_vfiprintf_r+0x94>
 800fd90:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd94:	460c      	mov	r4, r1
 800fd96:	2001      	movs	r0, #1
 800fd98:	e7a5      	b.n	800fce6 <_vfiprintf_r+0x11a>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	3401      	adds	r4, #1
 800fd9e:	9305      	str	r3, [sp, #20]
 800fda0:	4619      	mov	r1, r3
 800fda2:	f04f 0c0a 	mov.w	ip, #10
 800fda6:	4620      	mov	r0, r4
 800fda8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdac:	3a30      	subs	r2, #48	; 0x30
 800fdae:	2a09      	cmp	r2, #9
 800fdb0:	d903      	bls.n	800fdba <_vfiprintf_r+0x1ee>
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d0c5      	beq.n	800fd42 <_vfiprintf_r+0x176>
 800fdb6:	9105      	str	r1, [sp, #20]
 800fdb8:	e7c3      	b.n	800fd42 <_vfiprintf_r+0x176>
 800fdba:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e7f0      	b.n	800fda6 <_vfiprintf_r+0x1da>
 800fdc4:	ab03      	add	r3, sp, #12
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	462a      	mov	r2, r5
 800fdca:	4b16      	ldr	r3, [pc, #88]	; (800fe24 <_vfiprintf_r+0x258>)
 800fdcc:	a904      	add	r1, sp, #16
 800fdce:	4630      	mov	r0, r6
 800fdd0:	f7fc f84c 	bl	800be6c <_printf_float>
 800fdd4:	4607      	mov	r7, r0
 800fdd6:	1c78      	adds	r0, r7, #1
 800fdd8:	d1d6      	bne.n	800fd88 <_vfiprintf_r+0x1bc>
 800fdda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fddc:	07d9      	lsls	r1, r3, #31
 800fdde:	d405      	bmi.n	800fdec <_vfiprintf_r+0x220>
 800fde0:	89ab      	ldrh	r3, [r5, #12]
 800fde2:	059a      	lsls	r2, r3, #22
 800fde4:	d402      	bmi.n	800fdec <_vfiprintf_r+0x220>
 800fde6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fde8:	f7ff f8c4 	bl	800ef74 <__retarget_lock_release_recursive>
 800fdec:	89ab      	ldrh	r3, [r5, #12]
 800fdee:	065b      	lsls	r3, r3, #25
 800fdf0:	f53f af12 	bmi.w	800fc18 <_vfiprintf_r+0x4c>
 800fdf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdf6:	e711      	b.n	800fc1c <_vfiprintf_r+0x50>
 800fdf8:	ab03      	add	r3, sp, #12
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	462a      	mov	r2, r5
 800fdfe:	4b09      	ldr	r3, [pc, #36]	; (800fe24 <_vfiprintf_r+0x258>)
 800fe00:	a904      	add	r1, sp, #16
 800fe02:	4630      	mov	r0, r6
 800fe04:	f7fc fad6 	bl	800c3b4 <_printf_i>
 800fe08:	e7e4      	b.n	800fdd4 <_vfiprintf_r+0x208>
 800fe0a:	bf00      	nop
 800fe0c:	0801205c 	.word	0x0801205c
 800fe10:	0801207c 	.word	0x0801207c
 800fe14:	0801203c 	.word	0x0801203c
 800fe18:	0801227c 	.word	0x0801227c
 800fe1c:	08012286 	.word	0x08012286
 800fe20:	0800be6d 	.word	0x0800be6d
 800fe24:	0800fba7 	.word	0x0800fba7
 800fe28:	08012282 	.word	0x08012282

0800fe2c <__srget_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	460c      	mov	r4, r1
 800fe30:	4605      	mov	r5, r0
 800fe32:	b118      	cbz	r0, 800fe3c <__srget_r+0x10>
 800fe34:	6983      	ldr	r3, [r0, #24]
 800fe36:	b90b      	cbnz	r3, 800fe3c <__srget_r+0x10>
 800fe38:	f7fe fc1a 	bl	800e670 <__sinit>
 800fe3c:	4b0e      	ldr	r3, [pc, #56]	; (800fe78 <__srget_r+0x4c>)
 800fe3e:	429c      	cmp	r4, r3
 800fe40:	d10d      	bne.n	800fe5e <__srget_r+0x32>
 800fe42:	686c      	ldr	r4, [r5, #4]
 800fe44:	4621      	mov	r1, r4
 800fe46:	4628      	mov	r0, r5
 800fe48:	f000 f91e 	bl	8010088 <__srefill_r>
 800fe4c:	b988      	cbnz	r0, 800fe72 <__srget_r+0x46>
 800fe4e:	6863      	ldr	r3, [r4, #4]
 800fe50:	3b01      	subs	r3, #1
 800fe52:	6063      	str	r3, [r4, #4]
 800fe54:	6823      	ldr	r3, [r4, #0]
 800fe56:	1c5a      	adds	r2, r3, #1
 800fe58:	6022      	str	r2, [r4, #0]
 800fe5a:	7818      	ldrb	r0, [r3, #0]
 800fe5c:	bd38      	pop	{r3, r4, r5, pc}
 800fe5e:	4b07      	ldr	r3, [pc, #28]	; (800fe7c <__srget_r+0x50>)
 800fe60:	429c      	cmp	r4, r3
 800fe62:	d101      	bne.n	800fe68 <__srget_r+0x3c>
 800fe64:	68ac      	ldr	r4, [r5, #8]
 800fe66:	e7ed      	b.n	800fe44 <__srget_r+0x18>
 800fe68:	4b05      	ldr	r3, [pc, #20]	; (800fe80 <__srget_r+0x54>)
 800fe6a:	429c      	cmp	r4, r3
 800fe6c:	bf08      	it	eq
 800fe6e:	68ec      	ldreq	r4, [r5, #12]
 800fe70:	e7e8      	b.n	800fe44 <__srget_r+0x18>
 800fe72:	f04f 30ff 	mov.w	r0, #4294967295
 800fe76:	e7f1      	b.n	800fe5c <__srget_r+0x30>
 800fe78:	0801205c 	.word	0x0801205c
 800fe7c:	0801207c 	.word	0x0801207c
 800fe80:	0801203c 	.word	0x0801203c
 800fe84:	00000000 	.word	0x00000000

0800fe88 <nan>:
 800fe88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fe90 <nan+0x8>
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	00000000 	.word	0x00000000
 800fe94:	7ff80000 	.word	0x7ff80000

0800fe98 <_sbrk_r>:
 800fe98:	b538      	push	{r3, r4, r5, lr}
 800fe9a:	4d06      	ldr	r5, [pc, #24]	; (800feb4 <_sbrk_r+0x1c>)
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	4604      	mov	r4, r0
 800fea0:	4608      	mov	r0, r1
 800fea2:	602b      	str	r3, [r5, #0]
 800fea4:	f7f5 fac0 	bl	8005428 <_sbrk>
 800fea8:	1c43      	adds	r3, r0, #1
 800feaa:	d102      	bne.n	800feb2 <_sbrk_r+0x1a>
 800feac:	682b      	ldr	r3, [r5, #0]
 800feae:	b103      	cbz	r3, 800feb2 <_sbrk_r+0x1a>
 800feb0:	6023      	str	r3, [r4, #0]
 800feb2:	bd38      	pop	{r3, r4, r5, pc}
 800feb4:	20000d28 	.word	0x20000d28

0800feb8 <__sread>:
 800feb8:	b510      	push	{r4, lr}
 800feba:	460c      	mov	r4, r1
 800febc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fec0:	f000 f8c6 	bl	8010050 <_read_r>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	bfab      	itete	ge
 800fec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800feca:	89a3      	ldrhlt	r3, [r4, #12]
 800fecc:	181b      	addge	r3, r3, r0
 800fece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fed2:	bfac      	ite	ge
 800fed4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fed6:	81a3      	strhlt	r3, [r4, #12]
 800fed8:	bd10      	pop	{r4, pc}

0800feda <__swrite>:
 800feda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fede:	461f      	mov	r7, r3
 800fee0:	898b      	ldrh	r3, [r1, #12]
 800fee2:	05db      	lsls	r3, r3, #23
 800fee4:	4605      	mov	r5, r0
 800fee6:	460c      	mov	r4, r1
 800fee8:	4616      	mov	r6, r2
 800feea:	d505      	bpl.n	800fef8 <__swrite+0x1e>
 800feec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef0:	2302      	movs	r3, #2
 800fef2:	2200      	movs	r2, #0
 800fef4:	f000 f88e 	bl	8010014 <_lseek_r>
 800fef8:	89a3      	ldrh	r3, [r4, #12]
 800fefa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fefe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	4632      	mov	r2, r6
 800ff06:	463b      	mov	r3, r7
 800ff08:	4628      	mov	r0, r5
 800ff0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0e:	f000 b835 	b.w	800ff7c <_write_r>

0800ff12 <__sseek>:
 800ff12:	b510      	push	{r4, lr}
 800ff14:	460c      	mov	r4, r1
 800ff16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff1a:	f000 f87b 	bl	8010014 <_lseek_r>
 800ff1e:	1c43      	adds	r3, r0, #1
 800ff20:	89a3      	ldrh	r3, [r4, #12]
 800ff22:	bf15      	itete	ne
 800ff24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ff2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ff2e:	81a3      	strheq	r3, [r4, #12]
 800ff30:	bf18      	it	ne
 800ff32:	81a3      	strhne	r3, [r4, #12]
 800ff34:	bd10      	pop	{r4, pc}

0800ff36 <__sclose>:
 800ff36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff3a:	f000 b839 	b.w	800ffb0 <_close_r>

0800ff3e <strncmp>:
 800ff3e:	b510      	push	{r4, lr}
 800ff40:	b16a      	cbz	r2, 800ff5e <strncmp+0x20>
 800ff42:	3901      	subs	r1, #1
 800ff44:	1884      	adds	r4, r0, r2
 800ff46:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ff4a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d103      	bne.n	800ff5a <strncmp+0x1c>
 800ff52:	42a0      	cmp	r0, r4
 800ff54:	d001      	beq.n	800ff5a <strncmp+0x1c>
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d1f5      	bne.n	800ff46 <strncmp+0x8>
 800ff5a:	1a98      	subs	r0, r3, r2
 800ff5c:	bd10      	pop	{r4, pc}
 800ff5e:	4610      	mov	r0, r2
 800ff60:	e7fc      	b.n	800ff5c <strncmp+0x1e>

0800ff62 <__ascii_wctomb>:
 800ff62:	b149      	cbz	r1, 800ff78 <__ascii_wctomb+0x16>
 800ff64:	2aff      	cmp	r2, #255	; 0xff
 800ff66:	bf85      	ittet	hi
 800ff68:	238a      	movhi	r3, #138	; 0x8a
 800ff6a:	6003      	strhi	r3, [r0, #0]
 800ff6c:	700a      	strbls	r2, [r1, #0]
 800ff6e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ff72:	bf98      	it	ls
 800ff74:	2001      	movls	r0, #1
 800ff76:	4770      	bx	lr
 800ff78:	4608      	mov	r0, r1
 800ff7a:	4770      	bx	lr

0800ff7c <_write_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d07      	ldr	r5, [pc, #28]	; (800ff9c <_write_r+0x20>)
 800ff80:	4604      	mov	r4, r0
 800ff82:	4608      	mov	r0, r1
 800ff84:	4611      	mov	r1, r2
 800ff86:	2200      	movs	r2, #0
 800ff88:	602a      	str	r2, [r5, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f7f5 f9fb 	bl	8005386 <_write>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d102      	bne.n	800ff9a <_write_r+0x1e>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	b103      	cbz	r3, 800ff9a <_write_r+0x1e>
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	20000d28 	.word	0x20000d28

0800ffa0 <abort>:
 800ffa0:	b508      	push	{r3, lr}
 800ffa2:	2006      	movs	r0, #6
 800ffa4:	f000 f922 	bl	80101ec <raise>
 800ffa8:	2001      	movs	r0, #1
 800ffaa:	f7f5 f9d1 	bl	8005350 <_exit>
	...

0800ffb0 <_close_r>:
 800ffb0:	b538      	push	{r3, r4, r5, lr}
 800ffb2:	4d06      	ldr	r5, [pc, #24]	; (800ffcc <_close_r+0x1c>)
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	4604      	mov	r4, r0
 800ffb8:	4608      	mov	r0, r1
 800ffba:	602b      	str	r3, [r5, #0]
 800ffbc:	f7f5 f9ff 	bl	80053be <_close>
 800ffc0:	1c43      	adds	r3, r0, #1
 800ffc2:	d102      	bne.n	800ffca <_close_r+0x1a>
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	b103      	cbz	r3, 800ffca <_close_r+0x1a>
 800ffc8:	6023      	str	r3, [r4, #0]
 800ffca:	bd38      	pop	{r3, r4, r5, pc}
 800ffcc:	20000d28 	.word	0x20000d28

0800ffd0 <_fstat_r>:
 800ffd0:	b538      	push	{r3, r4, r5, lr}
 800ffd2:	4d07      	ldr	r5, [pc, #28]	; (800fff0 <_fstat_r+0x20>)
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	4608      	mov	r0, r1
 800ffda:	4611      	mov	r1, r2
 800ffdc:	602b      	str	r3, [r5, #0]
 800ffde:	f7f5 f9fa 	bl	80053d6 <_fstat>
 800ffe2:	1c43      	adds	r3, r0, #1
 800ffe4:	d102      	bne.n	800ffec <_fstat_r+0x1c>
 800ffe6:	682b      	ldr	r3, [r5, #0]
 800ffe8:	b103      	cbz	r3, 800ffec <_fstat_r+0x1c>
 800ffea:	6023      	str	r3, [r4, #0]
 800ffec:	bd38      	pop	{r3, r4, r5, pc}
 800ffee:	bf00      	nop
 800fff0:	20000d28 	.word	0x20000d28

0800fff4 <_isatty_r>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4d06      	ldr	r5, [pc, #24]	; (8010010 <_isatty_r+0x1c>)
 800fff8:	2300      	movs	r3, #0
 800fffa:	4604      	mov	r4, r0
 800fffc:	4608      	mov	r0, r1
 800fffe:	602b      	str	r3, [r5, #0]
 8010000:	f7f5 f9f9 	bl	80053f6 <_isatty>
 8010004:	1c43      	adds	r3, r0, #1
 8010006:	d102      	bne.n	801000e <_isatty_r+0x1a>
 8010008:	682b      	ldr	r3, [r5, #0]
 801000a:	b103      	cbz	r3, 801000e <_isatty_r+0x1a>
 801000c:	6023      	str	r3, [r4, #0]
 801000e:	bd38      	pop	{r3, r4, r5, pc}
 8010010:	20000d28 	.word	0x20000d28

08010014 <_lseek_r>:
 8010014:	b538      	push	{r3, r4, r5, lr}
 8010016:	4d07      	ldr	r5, [pc, #28]	; (8010034 <_lseek_r+0x20>)
 8010018:	4604      	mov	r4, r0
 801001a:	4608      	mov	r0, r1
 801001c:	4611      	mov	r1, r2
 801001e:	2200      	movs	r2, #0
 8010020:	602a      	str	r2, [r5, #0]
 8010022:	461a      	mov	r2, r3
 8010024:	f7f5 f9f2 	bl	800540c <_lseek>
 8010028:	1c43      	adds	r3, r0, #1
 801002a:	d102      	bne.n	8010032 <_lseek_r+0x1e>
 801002c:	682b      	ldr	r3, [r5, #0]
 801002e:	b103      	cbz	r3, 8010032 <_lseek_r+0x1e>
 8010030:	6023      	str	r3, [r4, #0]
 8010032:	bd38      	pop	{r3, r4, r5, pc}
 8010034:	20000d28 	.word	0x20000d28

08010038 <__malloc_lock>:
 8010038:	4801      	ldr	r0, [pc, #4]	; (8010040 <__malloc_lock+0x8>)
 801003a:	f7fe bf9a 	b.w	800ef72 <__retarget_lock_acquire_recursive>
 801003e:	bf00      	nop
 8010040:	20000d20 	.word	0x20000d20

08010044 <__malloc_unlock>:
 8010044:	4801      	ldr	r0, [pc, #4]	; (801004c <__malloc_unlock+0x8>)
 8010046:	f7fe bf95 	b.w	800ef74 <__retarget_lock_release_recursive>
 801004a:	bf00      	nop
 801004c:	20000d20 	.word	0x20000d20

08010050 <_read_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4d07      	ldr	r5, [pc, #28]	; (8010070 <_read_r+0x20>)
 8010054:	4604      	mov	r4, r0
 8010056:	4608      	mov	r0, r1
 8010058:	4611      	mov	r1, r2
 801005a:	2200      	movs	r2, #0
 801005c:	602a      	str	r2, [r5, #0]
 801005e:	461a      	mov	r2, r3
 8010060:	f7f5 f980 	bl	8005364 <_read>
 8010064:	1c43      	adds	r3, r0, #1
 8010066:	d102      	bne.n	801006e <_read_r+0x1e>
 8010068:	682b      	ldr	r3, [r5, #0]
 801006a:	b103      	cbz	r3, 801006e <_read_r+0x1e>
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	bd38      	pop	{r3, r4, r5, pc}
 8010070:	20000d28 	.word	0x20000d28

08010074 <lflush>:
 8010074:	8983      	ldrh	r3, [r0, #12]
 8010076:	f003 0309 	and.w	r3, r3, #9
 801007a:	2b09      	cmp	r3, #9
 801007c:	d101      	bne.n	8010082 <lflush+0xe>
 801007e:	f7fe ba8d 	b.w	800e59c <fflush>
 8010082:	2000      	movs	r0, #0
 8010084:	4770      	bx	lr
	...

08010088 <__srefill_r>:
 8010088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801008a:	460c      	mov	r4, r1
 801008c:	4605      	mov	r5, r0
 801008e:	b118      	cbz	r0, 8010098 <__srefill_r+0x10>
 8010090:	6983      	ldr	r3, [r0, #24]
 8010092:	b90b      	cbnz	r3, 8010098 <__srefill_r+0x10>
 8010094:	f7fe faec 	bl	800e670 <__sinit>
 8010098:	4b3b      	ldr	r3, [pc, #236]	; (8010188 <__srefill_r+0x100>)
 801009a:	429c      	cmp	r4, r3
 801009c:	d10a      	bne.n	80100b4 <__srefill_r+0x2c>
 801009e:	686c      	ldr	r4, [r5, #4]
 80100a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80100a4:	2300      	movs	r3, #0
 80100a6:	6063      	str	r3, [r4, #4]
 80100a8:	89a3      	ldrh	r3, [r4, #12]
 80100aa:	069e      	lsls	r6, r3, #26
 80100ac:	d50c      	bpl.n	80100c8 <__srefill_r+0x40>
 80100ae:	f04f 30ff 	mov.w	r0, #4294967295
 80100b2:	e066      	b.n	8010182 <__srefill_r+0xfa>
 80100b4:	4b35      	ldr	r3, [pc, #212]	; (801018c <__srefill_r+0x104>)
 80100b6:	429c      	cmp	r4, r3
 80100b8:	d101      	bne.n	80100be <__srefill_r+0x36>
 80100ba:	68ac      	ldr	r4, [r5, #8]
 80100bc:	e7f0      	b.n	80100a0 <__srefill_r+0x18>
 80100be:	4b34      	ldr	r3, [pc, #208]	; (8010190 <__srefill_r+0x108>)
 80100c0:	429c      	cmp	r4, r3
 80100c2:	bf08      	it	eq
 80100c4:	68ec      	ldreq	r4, [r5, #12]
 80100c6:	e7eb      	b.n	80100a0 <__srefill_r+0x18>
 80100c8:	0758      	lsls	r0, r3, #29
 80100ca:	d448      	bmi.n	801015e <__srefill_r+0xd6>
 80100cc:	06d9      	lsls	r1, r3, #27
 80100ce:	d405      	bmi.n	80100dc <__srefill_r+0x54>
 80100d0:	2309      	movs	r3, #9
 80100d2:	602b      	str	r3, [r5, #0]
 80100d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80100d8:	81a3      	strh	r3, [r4, #12]
 80100da:	e7e8      	b.n	80100ae <__srefill_r+0x26>
 80100dc:	071a      	lsls	r2, r3, #28
 80100de:	d50b      	bpl.n	80100f8 <__srefill_r+0x70>
 80100e0:	4621      	mov	r1, r4
 80100e2:	4628      	mov	r0, r5
 80100e4:	f7fe fa1e 	bl	800e524 <_fflush_r>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	d1e0      	bne.n	80100ae <__srefill_r+0x26>
 80100ec:	89a3      	ldrh	r3, [r4, #12]
 80100ee:	60a0      	str	r0, [r4, #8]
 80100f0:	f023 0308 	bic.w	r3, r3, #8
 80100f4:	81a3      	strh	r3, [r4, #12]
 80100f6:	61a0      	str	r0, [r4, #24]
 80100f8:	89a3      	ldrh	r3, [r4, #12]
 80100fa:	f043 0304 	orr.w	r3, r3, #4
 80100fe:	81a3      	strh	r3, [r4, #12]
 8010100:	6923      	ldr	r3, [r4, #16]
 8010102:	b91b      	cbnz	r3, 801010c <__srefill_r+0x84>
 8010104:	4621      	mov	r1, r4
 8010106:	4628      	mov	r0, r5
 8010108:	f7fe ff5a 	bl	800efc0 <__smakebuf_r>
 801010c:	89a6      	ldrh	r6, [r4, #12]
 801010e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8010112:	07b3      	lsls	r3, r6, #30
 8010114:	d00f      	beq.n	8010136 <__srefill_r+0xae>
 8010116:	2301      	movs	r3, #1
 8010118:	81a3      	strh	r3, [r4, #12]
 801011a:	4b1e      	ldr	r3, [pc, #120]	; (8010194 <__srefill_r+0x10c>)
 801011c:	491e      	ldr	r1, [pc, #120]	; (8010198 <__srefill_r+0x110>)
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	f006 0609 	and.w	r6, r6, #9
 8010124:	f7fe fb34 	bl	800e790 <_fwalk>
 8010128:	2e09      	cmp	r6, #9
 801012a:	81a7      	strh	r7, [r4, #12]
 801012c:	d103      	bne.n	8010136 <__srefill_r+0xae>
 801012e:	4621      	mov	r1, r4
 8010130:	4628      	mov	r0, r5
 8010132:	f7fe f971 	bl	800e418 <__sflush_r>
 8010136:	6922      	ldr	r2, [r4, #16]
 8010138:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801013a:	6963      	ldr	r3, [r4, #20]
 801013c:	6a21      	ldr	r1, [r4, #32]
 801013e:	6022      	str	r2, [r4, #0]
 8010140:	4628      	mov	r0, r5
 8010142:	47b0      	blx	r6
 8010144:	2800      	cmp	r0, #0
 8010146:	6060      	str	r0, [r4, #4]
 8010148:	dc1c      	bgt.n	8010184 <__srefill_r+0xfc>
 801014a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801014e:	bf17      	itett	ne
 8010150:	2200      	movne	r2, #0
 8010152:	f043 0320 	orreq.w	r3, r3, #32
 8010156:	6062      	strne	r2, [r4, #4]
 8010158:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 801015c:	e7bc      	b.n	80100d8 <__srefill_r+0x50>
 801015e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010160:	2900      	cmp	r1, #0
 8010162:	d0cd      	beq.n	8010100 <__srefill_r+0x78>
 8010164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010168:	4299      	cmp	r1, r3
 801016a:	d002      	beq.n	8010172 <__srefill_r+0xea>
 801016c:	4628      	mov	r0, r5
 801016e:	f7ff fc59 	bl	800fa24 <_free_r>
 8010172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010174:	6063      	str	r3, [r4, #4]
 8010176:	2000      	movs	r0, #0
 8010178:	6360      	str	r0, [r4, #52]	; 0x34
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0c0      	beq.n	8010100 <__srefill_r+0x78>
 801017e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010180:	6023      	str	r3, [r4, #0]
 8010182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010184:	2000      	movs	r0, #0
 8010186:	e7fc      	b.n	8010182 <__srefill_r+0xfa>
 8010188:	0801205c 	.word	0x0801205c
 801018c:	0801207c 	.word	0x0801207c
 8010190:	0801203c 	.word	0x0801203c
 8010194:	08011d80 	.word	0x08011d80
 8010198:	08010075 	.word	0x08010075

0801019c <_raise_r>:
 801019c:	291f      	cmp	r1, #31
 801019e:	b538      	push	{r3, r4, r5, lr}
 80101a0:	4604      	mov	r4, r0
 80101a2:	460d      	mov	r5, r1
 80101a4:	d904      	bls.n	80101b0 <_raise_r+0x14>
 80101a6:	2316      	movs	r3, #22
 80101a8:	6003      	str	r3, [r0, #0]
 80101aa:	f04f 30ff 	mov.w	r0, #4294967295
 80101ae:	bd38      	pop	{r3, r4, r5, pc}
 80101b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101b2:	b112      	cbz	r2, 80101ba <_raise_r+0x1e>
 80101b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101b8:	b94b      	cbnz	r3, 80101ce <_raise_r+0x32>
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 f830 	bl	8010220 <_getpid_r>
 80101c0:	462a      	mov	r2, r5
 80101c2:	4601      	mov	r1, r0
 80101c4:	4620      	mov	r0, r4
 80101c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ca:	f000 b817 	b.w	80101fc <_kill_r>
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d00a      	beq.n	80101e8 <_raise_r+0x4c>
 80101d2:	1c59      	adds	r1, r3, #1
 80101d4:	d103      	bne.n	80101de <_raise_r+0x42>
 80101d6:	2316      	movs	r3, #22
 80101d8:	6003      	str	r3, [r0, #0]
 80101da:	2001      	movs	r0, #1
 80101dc:	e7e7      	b.n	80101ae <_raise_r+0x12>
 80101de:	2400      	movs	r4, #0
 80101e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80101e4:	4628      	mov	r0, r5
 80101e6:	4798      	blx	r3
 80101e8:	2000      	movs	r0, #0
 80101ea:	e7e0      	b.n	80101ae <_raise_r+0x12>

080101ec <raise>:
 80101ec:	4b02      	ldr	r3, [pc, #8]	; (80101f8 <raise+0xc>)
 80101ee:	4601      	mov	r1, r0
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	f7ff bfd3 	b.w	801019c <_raise_r>
 80101f6:	bf00      	nop
 80101f8:	20000028 	.word	0x20000028

080101fc <_kill_r>:
 80101fc:	b538      	push	{r3, r4, r5, lr}
 80101fe:	4d07      	ldr	r5, [pc, #28]	; (801021c <_kill_r+0x20>)
 8010200:	2300      	movs	r3, #0
 8010202:	4604      	mov	r4, r0
 8010204:	4608      	mov	r0, r1
 8010206:	4611      	mov	r1, r2
 8010208:	602b      	str	r3, [r5, #0]
 801020a:	f7f5 f891 	bl	8005330 <_kill>
 801020e:	1c43      	adds	r3, r0, #1
 8010210:	d102      	bne.n	8010218 <_kill_r+0x1c>
 8010212:	682b      	ldr	r3, [r5, #0]
 8010214:	b103      	cbz	r3, 8010218 <_kill_r+0x1c>
 8010216:	6023      	str	r3, [r4, #0]
 8010218:	bd38      	pop	{r3, r4, r5, pc}
 801021a:	bf00      	nop
 801021c:	20000d28 	.word	0x20000d28

08010220 <_getpid_r>:
 8010220:	f7f5 b87e 	b.w	8005320 <_getpid>

08010224 <pow>:
 8010224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010228:	ec59 8b10 	vmov	r8, r9, d0
 801022c:	ec57 6b11 	vmov	r6, r7, d1
 8010230:	f000 f8a6 	bl	8010380 <__ieee754_pow>
 8010234:	4b4e      	ldr	r3, [pc, #312]	; (8010370 <pow+0x14c>)
 8010236:	f993 3000 	ldrsb.w	r3, [r3]
 801023a:	3301      	adds	r3, #1
 801023c:	ec55 4b10 	vmov	r4, r5, d0
 8010240:	d015      	beq.n	801026e <pow+0x4a>
 8010242:	4632      	mov	r2, r6
 8010244:	463b      	mov	r3, r7
 8010246:	4630      	mov	r0, r6
 8010248:	4639      	mov	r1, r7
 801024a:	f7f0 fc9f 	bl	8000b8c <__aeabi_dcmpun>
 801024e:	b970      	cbnz	r0, 801026e <pow+0x4a>
 8010250:	4642      	mov	r2, r8
 8010252:	464b      	mov	r3, r9
 8010254:	4640      	mov	r0, r8
 8010256:	4649      	mov	r1, r9
 8010258:	f7f0 fc98 	bl	8000b8c <__aeabi_dcmpun>
 801025c:	2200      	movs	r2, #0
 801025e:	2300      	movs	r3, #0
 8010260:	b148      	cbz	r0, 8010276 <pow+0x52>
 8010262:	4630      	mov	r0, r6
 8010264:	4639      	mov	r1, r7
 8010266:	f7f0 fc5f 	bl	8000b28 <__aeabi_dcmpeq>
 801026a:	2800      	cmp	r0, #0
 801026c:	d17d      	bne.n	801036a <pow+0x146>
 801026e:	ec45 4b10 	vmov	d0, r4, r5
 8010272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010276:	4640      	mov	r0, r8
 8010278:	4649      	mov	r1, r9
 801027a:	f7f0 fc55 	bl	8000b28 <__aeabi_dcmpeq>
 801027e:	b1e0      	cbz	r0, 80102ba <pow+0x96>
 8010280:	2200      	movs	r2, #0
 8010282:	2300      	movs	r3, #0
 8010284:	4630      	mov	r0, r6
 8010286:	4639      	mov	r1, r7
 8010288:	f7f0 fc4e 	bl	8000b28 <__aeabi_dcmpeq>
 801028c:	2800      	cmp	r0, #0
 801028e:	d16c      	bne.n	801036a <pow+0x146>
 8010290:	ec47 6b10 	vmov	d0, r6, r7
 8010294:	f000 fe53 	bl	8010f3e <finite>
 8010298:	2800      	cmp	r0, #0
 801029a:	d0e8      	beq.n	801026e <pow+0x4a>
 801029c:	2200      	movs	r2, #0
 801029e:	2300      	movs	r3, #0
 80102a0:	4630      	mov	r0, r6
 80102a2:	4639      	mov	r1, r7
 80102a4:	f7f0 fc4a 	bl	8000b3c <__aeabi_dcmplt>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d0e0      	beq.n	801026e <pow+0x4a>
 80102ac:	f7fb fcfa 	bl	800bca4 <__errno>
 80102b0:	2321      	movs	r3, #33	; 0x21
 80102b2:	6003      	str	r3, [r0, #0]
 80102b4:	2400      	movs	r4, #0
 80102b6:	4d2f      	ldr	r5, [pc, #188]	; (8010374 <pow+0x150>)
 80102b8:	e7d9      	b.n	801026e <pow+0x4a>
 80102ba:	ec45 4b10 	vmov	d0, r4, r5
 80102be:	f000 fe3e 	bl	8010f3e <finite>
 80102c2:	bbb8      	cbnz	r0, 8010334 <pow+0x110>
 80102c4:	ec49 8b10 	vmov	d0, r8, r9
 80102c8:	f000 fe39 	bl	8010f3e <finite>
 80102cc:	b390      	cbz	r0, 8010334 <pow+0x110>
 80102ce:	ec47 6b10 	vmov	d0, r6, r7
 80102d2:	f000 fe34 	bl	8010f3e <finite>
 80102d6:	b368      	cbz	r0, 8010334 <pow+0x110>
 80102d8:	4622      	mov	r2, r4
 80102da:	462b      	mov	r3, r5
 80102dc:	4620      	mov	r0, r4
 80102de:	4629      	mov	r1, r5
 80102e0:	f7f0 fc54 	bl	8000b8c <__aeabi_dcmpun>
 80102e4:	b160      	cbz	r0, 8010300 <pow+0xdc>
 80102e6:	f7fb fcdd 	bl	800bca4 <__errno>
 80102ea:	2321      	movs	r3, #33	; 0x21
 80102ec:	6003      	str	r3, [r0, #0]
 80102ee:	2200      	movs	r2, #0
 80102f0:	2300      	movs	r3, #0
 80102f2:	4610      	mov	r0, r2
 80102f4:	4619      	mov	r1, r3
 80102f6:	f7f0 fad9 	bl	80008ac <__aeabi_ddiv>
 80102fa:	4604      	mov	r4, r0
 80102fc:	460d      	mov	r5, r1
 80102fe:	e7b6      	b.n	801026e <pow+0x4a>
 8010300:	f7fb fcd0 	bl	800bca4 <__errno>
 8010304:	2322      	movs	r3, #34	; 0x22
 8010306:	6003      	str	r3, [r0, #0]
 8010308:	2200      	movs	r2, #0
 801030a:	2300      	movs	r3, #0
 801030c:	4640      	mov	r0, r8
 801030e:	4649      	mov	r1, r9
 8010310:	f7f0 fc14 	bl	8000b3c <__aeabi_dcmplt>
 8010314:	2400      	movs	r4, #0
 8010316:	b158      	cbz	r0, 8010330 <pow+0x10c>
 8010318:	ec47 6b10 	vmov	d0, r6, r7
 801031c:	f000 fe1a 	bl	8010f54 <rint>
 8010320:	4632      	mov	r2, r6
 8010322:	ec51 0b10 	vmov	r0, r1, d0
 8010326:	463b      	mov	r3, r7
 8010328:	f7f0 fbfe 	bl	8000b28 <__aeabi_dcmpeq>
 801032c:	2800      	cmp	r0, #0
 801032e:	d0c2      	beq.n	80102b6 <pow+0x92>
 8010330:	4d11      	ldr	r5, [pc, #68]	; (8010378 <pow+0x154>)
 8010332:	e79c      	b.n	801026e <pow+0x4a>
 8010334:	2200      	movs	r2, #0
 8010336:	2300      	movs	r3, #0
 8010338:	4620      	mov	r0, r4
 801033a:	4629      	mov	r1, r5
 801033c:	f7f0 fbf4 	bl	8000b28 <__aeabi_dcmpeq>
 8010340:	2800      	cmp	r0, #0
 8010342:	d094      	beq.n	801026e <pow+0x4a>
 8010344:	ec49 8b10 	vmov	d0, r8, r9
 8010348:	f000 fdf9 	bl	8010f3e <finite>
 801034c:	2800      	cmp	r0, #0
 801034e:	d08e      	beq.n	801026e <pow+0x4a>
 8010350:	ec47 6b10 	vmov	d0, r6, r7
 8010354:	f000 fdf3 	bl	8010f3e <finite>
 8010358:	2800      	cmp	r0, #0
 801035a:	d088      	beq.n	801026e <pow+0x4a>
 801035c:	f7fb fca2 	bl	800bca4 <__errno>
 8010360:	2322      	movs	r3, #34	; 0x22
 8010362:	6003      	str	r3, [r0, #0]
 8010364:	2400      	movs	r4, #0
 8010366:	2500      	movs	r5, #0
 8010368:	e781      	b.n	801026e <pow+0x4a>
 801036a:	4d04      	ldr	r5, [pc, #16]	; (801037c <pow+0x158>)
 801036c:	2400      	movs	r4, #0
 801036e:	e77e      	b.n	801026e <pow+0x4a>
 8010370:	200001fc 	.word	0x200001fc
 8010374:	fff00000 	.word	0xfff00000
 8010378:	7ff00000 	.word	0x7ff00000
 801037c:	3ff00000 	.word	0x3ff00000

08010380 <__ieee754_pow>:
 8010380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010384:	ed2d 8b06 	vpush	{d8-d10}
 8010388:	b08d      	sub	sp, #52	; 0x34
 801038a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801038e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8010392:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8010396:	ea56 0100 	orrs.w	r1, r6, r0
 801039a:	ec53 2b10 	vmov	r2, r3, d0
 801039e:	f000 84d1 	beq.w	8010d44 <__ieee754_pow+0x9c4>
 80103a2:	497f      	ldr	r1, [pc, #508]	; (80105a0 <__ieee754_pow+0x220>)
 80103a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80103a8:	428c      	cmp	r4, r1
 80103aa:	ee10 8a10 	vmov	r8, s0
 80103ae:	4699      	mov	r9, r3
 80103b0:	dc09      	bgt.n	80103c6 <__ieee754_pow+0x46>
 80103b2:	d103      	bne.n	80103bc <__ieee754_pow+0x3c>
 80103b4:	b97a      	cbnz	r2, 80103d6 <__ieee754_pow+0x56>
 80103b6:	42a6      	cmp	r6, r4
 80103b8:	dd02      	ble.n	80103c0 <__ieee754_pow+0x40>
 80103ba:	e00c      	b.n	80103d6 <__ieee754_pow+0x56>
 80103bc:	428e      	cmp	r6, r1
 80103be:	dc02      	bgt.n	80103c6 <__ieee754_pow+0x46>
 80103c0:	428e      	cmp	r6, r1
 80103c2:	d110      	bne.n	80103e6 <__ieee754_pow+0x66>
 80103c4:	b178      	cbz	r0, 80103e6 <__ieee754_pow+0x66>
 80103c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80103ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80103ce:	ea54 0308 	orrs.w	r3, r4, r8
 80103d2:	f000 84b7 	beq.w	8010d44 <__ieee754_pow+0x9c4>
 80103d6:	4873      	ldr	r0, [pc, #460]	; (80105a4 <__ieee754_pow+0x224>)
 80103d8:	b00d      	add	sp, #52	; 0x34
 80103da:	ecbd 8b06 	vpop	{d8-d10}
 80103de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e2:	f7ff bd51 	b.w	800fe88 <nan>
 80103e6:	f1b9 0f00 	cmp.w	r9, #0
 80103ea:	da36      	bge.n	801045a <__ieee754_pow+0xda>
 80103ec:	496e      	ldr	r1, [pc, #440]	; (80105a8 <__ieee754_pow+0x228>)
 80103ee:	428e      	cmp	r6, r1
 80103f0:	dc51      	bgt.n	8010496 <__ieee754_pow+0x116>
 80103f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80103f6:	428e      	cmp	r6, r1
 80103f8:	f340 84af 	ble.w	8010d5a <__ieee754_pow+0x9da>
 80103fc:	1531      	asrs	r1, r6, #20
 80103fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010402:	2914      	cmp	r1, #20
 8010404:	dd0f      	ble.n	8010426 <__ieee754_pow+0xa6>
 8010406:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801040a:	fa20 fc01 	lsr.w	ip, r0, r1
 801040e:	fa0c f101 	lsl.w	r1, ip, r1
 8010412:	4281      	cmp	r1, r0
 8010414:	f040 84a1 	bne.w	8010d5a <__ieee754_pow+0x9da>
 8010418:	f00c 0c01 	and.w	ip, ip, #1
 801041c:	f1cc 0102 	rsb	r1, ip, #2
 8010420:	9100      	str	r1, [sp, #0]
 8010422:	b180      	cbz	r0, 8010446 <__ieee754_pow+0xc6>
 8010424:	e059      	b.n	80104da <__ieee754_pow+0x15a>
 8010426:	2800      	cmp	r0, #0
 8010428:	d155      	bne.n	80104d6 <__ieee754_pow+0x156>
 801042a:	f1c1 0114 	rsb	r1, r1, #20
 801042e:	fa46 fc01 	asr.w	ip, r6, r1
 8010432:	fa0c f101 	lsl.w	r1, ip, r1
 8010436:	42b1      	cmp	r1, r6
 8010438:	f040 848c 	bne.w	8010d54 <__ieee754_pow+0x9d4>
 801043c:	f00c 0c01 	and.w	ip, ip, #1
 8010440:	f1cc 0102 	rsb	r1, ip, #2
 8010444:	9100      	str	r1, [sp, #0]
 8010446:	4959      	ldr	r1, [pc, #356]	; (80105ac <__ieee754_pow+0x22c>)
 8010448:	428e      	cmp	r6, r1
 801044a:	d12d      	bne.n	80104a8 <__ieee754_pow+0x128>
 801044c:	2f00      	cmp	r7, #0
 801044e:	da79      	bge.n	8010544 <__ieee754_pow+0x1c4>
 8010450:	4956      	ldr	r1, [pc, #344]	; (80105ac <__ieee754_pow+0x22c>)
 8010452:	2000      	movs	r0, #0
 8010454:	f7f0 fa2a 	bl	80008ac <__aeabi_ddiv>
 8010458:	e016      	b.n	8010488 <__ieee754_pow+0x108>
 801045a:	2100      	movs	r1, #0
 801045c:	9100      	str	r1, [sp, #0]
 801045e:	2800      	cmp	r0, #0
 8010460:	d13b      	bne.n	80104da <__ieee754_pow+0x15a>
 8010462:	494f      	ldr	r1, [pc, #316]	; (80105a0 <__ieee754_pow+0x220>)
 8010464:	428e      	cmp	r6, r1
 8010466:	d1ee      	bne.n	8010446 <__ieee754_pow+0xc6>
 8010468:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801046c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010470:	ea53 0308 	orrs.w	r3, r3, r8
 8010474:	f000 8466 	beq.w	8010d44 <__ieee754_pow+0x9c4>
 8010478:	4b4d      	ldr	r3, [pc, #308]	; (80105b0 <__ieee754_pow+0x230>)
 801047a:	429c      	cmp	r4, r3
 801047c:	dd0d      	ble.n	801049a <__ieee754_pow+0x11a>
 801047e:	2f00      	cmp	r7, #0
 8010480:	f280 8464 	bge.w	8010d4c <__ieee754_pow+0x9cc>
 8010484:	2000      	movs	r0, #0
 8010486:	2100      	movs	r1, #0
 8010488:	ec41 0b10 	vmov	d0, r0, r1
 801048c:	b00d      	add	sp, #52	; 0x34
 801048e:	ecbd 8b06 	vpop	{d8-d10}
 8010492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010496:	2102      	movs	r1, #2
 8010498:	e7e0      	b.n	801045c <__ieee754_pow+0xdc>
 801049a:	2f00      	cmp	r7, #0
 801049c:	daf2      	bge.n	8010484 <__ieee754_pow+0x104>
 801049e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80104a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80104a6:	e7ef      	b.n	8010488 <__ieee754_pow+0x108>
 80104a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80104ac:	d104      	bne.n	80104b8 <__ieee754_pow+0x138>
 80104ae:	4610      	mov	r0, r2
 80104b0:	4619      	mov	r1, r3
 80104b2:	f7f0 f8d1 	bl	8000658 <__aeabi_dmul>
 80104b6:	e7e7      	b.n	8010488 <__ieee754_pow+0x108>
 80104b8:	493e      	ldr	r1, [pc, #248]	; (80105b4 <__ieee754_pow+0x234>)
 80104ba:	428f      	cmp	r7, r1
 80104bc:	d10d      	bne.n	80104da <__ieee754_pow+0x15a>
 80104be:	f1b9 0f00 	cmp.w	r9, #0
 80104c2:	db0a      	blt.n	80104da <__ieee754_pow+0x15a>
 80104c4:	ec43 2b10 	vmov	d0, r2, r3
 80104c8:	b00d      	add	sp, #52	; 0x34
 80104ca:	ecbd 8b06 	vpop	{d8-d10}
 80104ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d2:	f000 bc77 	b.w	8010dc4 <__ieee754_sqrt>
 80104d6:	2100      	movs	r1, #0
 80104d8:	9100      	str	r1, [sp, #0]
 80104da:	ec43 2b10 	vmov	d0, r2, r3
 80104de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80104e2:	f000 fd23 	bl	8010f2c <fabs>
 80104e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80104ea:	ec51 0b10 	vmov	r0, r1, d0
 80104ee:	f1b8 0f00 	cmp.w	r8, #0
 80104f2:	d12a      	bne.n	801054a <__ieee754_pow+0x1ca>
 80104f4:	b12c      	cbz	r4, 8010502 <__ieee754_pow+0x182>
 80104f6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80105ac <__ieee754_pow+0x22c>
 80104fa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80104fe:	45e6      	cmp	lr, ip
 8010500:	d123      	bne.n	801054a <__ieee754_pow+0x1ca>
 8010502:	2f00      	cmp	r7, #0
 8010504:	da05      	bge.n	8010512 <__ieee754_pow+0x192>
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	2000      	movs	r0, #0
 801050c:	4927      	ldr	r1, [pc, #156]	; (80105ac <__ieee754_pow+0x22c>)
 801050e:	f7f0 f9cd 	bl	80008ac <__aeabi_ddiv>
 8010512:	f1b9 0f00 	cmp.w	r9, #0
 8010516:	dab7      	bge.n	8010488 <__ieee754_pow+0x108>
 8010518:	9b00      	ldr	r3, [sp, #0]
 801051a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801051e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010522:	4323      	orrs	r3, r4
 8010524:	d108      	bne.n	8010538 <__ieee754_pow+0x1b8>
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	4610      	mov	r0, r2
 801052c:	4619      	mov	r1, r3
 801052e:	f7ef fedb 	bl	80002e8 <__aeabi_dsub>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	e78d      	b.n	8010454 <__ieee754_pow+0xd4>
 8010538:	9b00      	ldr	r3, [sp, #0]
 801053a:	2b01      	cmp	r3, #1
 801053c:	d1a4      	bne.n	8010488 <__ieee754_pow+0x108>
 801053e:	4602      	mov	r2, r0
 8010540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010544:	4610      	mov	r0, r2
 8010546:	4619      	mov	r1, r3
 8010548:	e79e      	b.n	8010488 <__ieee754_pow+0x108>
 801054a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801054e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8010552:	950a      	str	r5, [sp, #40]	; 0x28
 8010554:	9d00      	ldr	r5, [sp, #0]
 8010556:	46ac      	mov	ip, r5
 8010558:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801055a:	ea5c 0505 	orrs.w	r5, ip, r5
 801055e:	d0e4      	beq.n	801052a <__ieee754_pow+0x1aa>
 8010560:	4b15      	ldr	r3, [pc, #84]	; (80105b8 <__ieee754_pow+0x238>)
 8010562:	429e      	cmp	r6, r3
 8010564:	f340 80fc 	ble.w	8010760 <__ieee754_pow+0x3e0>
 8010568:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801056c:	429e      	cmp	r6, r3
 801056e:	4b10      	ldr	r3, [pc, #64]	; (80105b0 <__ieee754_pow+0x230>)
 8010570:	dd07      	ble.n	8010582 <__ieee754_pow+0x202>
 8010572:	429c      	cmp	r4, r3
 8010574:	dc0a      	bgt.n	801058c <__ieee754_pow+0x20c>
 8010576:	2f00      	cmp	r7, #0
 8010578:	da84      	bge.n	8010484 <__ieee754_pow+0x104>
 801057a:	a307      	add	r3, pc, #28	; (adr r3, 8010598 <__ieee754_pow+0x218>)
 801057c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010580:	e795      	b.n	80104ae <__ieee754_pow+0x12e>
 8010582:	429c      	cmp	r4, r3
 8010584:	dbf7      	blt.n	8010576 <__ieee754_pow+0x1f6>
 8010586:	4b09      	ldr	r3, [pc, #36]	; (80105ac <__ieee754_pow+0x22c>)
 8010588:	429c      	cmp	r4, r3
 801058a:	dd17      	ble.n	80105bc <__ieee754_pow+0x23c>
 801058c:	2f00      	cmp	r7, #0
 801058e:	dcf4      	bgt.n	801057a <__ieee754_pow+0x1fa>
 8010590:	e778      	b.n	8010484 <__ieee754_pow+0x104>
 8010592:	bf00      	nop
 8010594:	f3af 8000 	nop.w
 8010598:	8800759c 	.word	0x8800759c
 801059c:	7e37e43c 	.word	0x7e37e43c
 80105a0:	7ff00000 	.word	0x7ff00000
 80105a4:	08011ebb 	.word	0x08011ebb
 80105a8:	433fffff 	.word	0x433fffff
 80105ac:	3ff00000 	.word	0x3ff00000
 80105b0:	3fefffff 	.word	0x3fefffff
 80105b4:	3fe00000 	.word	0x3fe00000
 80105b8:	41e00000 	.word	0x41e00000
 80105bc:	4b64      	ldr	r3, [pc, #400]	; (8010750 <__ieee754_pow+0x3d0>)
 80105be:	2200      	movs	r2, #0
 80105c0:	f7ef fe92 	bl	80002e8 <__aeabi_dsub>
 80105c4:	a356      	add	r3, pc, #344	; (adr r3, 8010720 <__ieee754_pow+0x3a0>)
 80105c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ca:	4604      	mov	r4, r0
 80105cc:	460d      	mov	r5, r1
 80105ce:	f7f0 f843 	bl	8000658 <__aeabi_dmul>
 80105d2:	a355      	add	r3, pc, #340	; (adr r3, 8010728 <__ieee754_pow+0x3a8>)
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	4606      	mov	r6, r0
 80105da:	460f      	mov	r7, r1
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7f0 f83a 	bl	8000658 <__aeabi_dmul>
 80105e4:	4b5b      	ldr	r3, [pc, #364]	; (8010754 <__ieee754_pow+0x3d4>)
 80105e6:	4682      	mov	sl, r0
 80105e8:	468b      	mov	fp, r1
 80105ea:	2200      	movs	r2, #0
 80105ec:	4620      	mov	r0, r4
 80105ee:	4629      	mov	r1, r5
 80105f0:	f7f0 f832 	bl	8000658 <__aeabi_dmul>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	a14d      	add	r1, pc, #308	; (adr r1, 8010730 <__ieee754_pow+0x3b0>)
 80105fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105fe:	f7ef fe73 	bl	80002e8 <__aeabi_dsub>
 8010602:	4622      	mov	r2, r4
 8010604:	462b      	mov	r3, r5
 8010606:	f7f0 f827 	bl	8000658 <__aeabi_dmul>
 801060a:	4602      	mov	r2, r0
 801060c:	460b      	mov	r3, r1
 801060e:	2000      	movs	r0, #0
 8010610:	4951      	ldr	r1, [pc, #324]	; (8010758 <__ieee754_pow+0x3d8>)
 8010612:	f7ef fe69 	bl	80002e8 <__aeabi_dsub>
 8010616:	4622      	mov	r2, r4
 8010618:	4680      	mov	r8, r0
 801061a:	4689      	mov	r9, r1
 801061c:	462b      	mov	r3, r5
 801061e:	4620      	mov	r0, r4
 8010620:	4629      	mov	r1, r5
 8010622:	f7f0 f819 	bl	8000658 <__aeabi_dmul>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4640      	mov	r0, r8
 801062c:	4649      	mov	r1, r9
 801062e:	f7f0 f813 	bl	8000658 <__aeabi_dmul>
 8010632:	a341      	add	r3, pc, #260	; (adr r3, 8010738 <__ieee754_pow+0x3b8>)
 8010634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010638:	f7f0 f80e 	bl	8000658 <__aeabi_dmul>
 801063c:	4602      	mov	r2, r0
 801063e:	460b      	mov	r3, r1
 8010640:	4650      	mov	r0, sl
 8010642:	4659      	mov	r1, fp
 8010644:	f7ef fe50 	bl	80002e8 <__aeabi_dsub>
 8010648:	4602      	mov	r2, r0
 801064a:	460b      	mov	r3, r1
 801064c:	4680      	mov	r8, r0
 801064e:	4689      	mov	r9, r1
 8010650:	4630      	mov	r0, r6
 8010652:	4639      	mov	r1, r7
 8010654:	f7ef fe4a 	bl	80002ec <__adddf3>
 8010658:	2400      	movs	r4, #0
 801065a:	4632      	mov	r2, r6
 801065c:	463b      	mov	r3, r7
 801065e:	4620      	mov	r0, r4
 8010660:	460d      	mov	r5, r1
 8010662:	f7ef fe41 	bl	80002e8 <__aeabi_dsub>
 8010666:	4602      	mov	r2, r0
 8010668:	460b      	mov	r3, r1
 801066a:	4640      	mov	r0, r8
 801066c:	4649      	mov	r1, r9
 801066e:	f7ef fe3b 	bl	80002e8 <__aeabi_dsub>
 8010672:	9b00      	ldr	r3, [sp, #0]
 8010674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010676:	3b01      	subs	r3, #1
 8010678:	4313      	orrs	r3, r2
 801067a:	4682      	mov	sl, r0
 801067c:	468b      	mov	fp, r1
 801067e:	f040 81f1 	bne.w	8010a64 <__ieee754_pow+0x6e4>
 8010682:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010740 <__ieee754_pow+0x3c0>
 8010686:	eeb0 8a47 	vmov.f32	s16, s14
 801068a:	eef0 8a67 	vmov.f32	s17, s15
 801068e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010692:	2600      	movs	r6, #0
 8010694:	4632      	mov	r2, r6
 8010696:	463b      	mov	r3, r7
 8010698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801069c:	f7ef fe24 	bl	80002e8 <__aeabi_dsub>
 80106a0:	4622      	mov	r2, r4
 80106a2:	462b      	mov	r3, r5
 80106a4:	f7ef ffd8 	bl	8000658 <__aeabi_dmul>
 80106a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80106ac:	4680      	mov	r8, r0
 80106ae:	4689      	mov	r9, r1
 80106b0:	4650      	mov	r0, sl
 80106b2:	4659      	mov	r1, fp
 80106b4:	f7ef ffd0 	bl	8000658 <__aeabi_dmul>
 80106b8:	4602      	mov	r2, r0
 80106ba:	460b      	mov	r3, r1
 80106bc:	4640      	mov	r0, r8
 80106be:	4649      	mov	r1, r9
 80106c0:	f7ef fe14 	bl	80002ec <__adddf3>
 80106c4:	4632      	mov	r2, r6
 80106c6:	463b      	mov	r3, r7
 80106c8:	4680      	mov	r8, r0
 80106ca:	4689      	mov	r9, r1
 80106cc:	4620      	mov	r0, r4
 80106ce:	4629      	mov	r1, r5
 80106d0:	f7ef ffc2 	bl	8000658 <__aeabi_dmul>
 80106d4:	460b      	mov	r3, r1
 80106d6:	4604      	mov	r4, r0
 80106d8:	460d      	mov	r5, r1
 80106da:	4602      	mov	r2, r0
 80106dc:	4649      	mov	r1, r9
 80106de:	4640      	mov	r0, r8
 80106e0:	f7ef fe04 	bl	80002ec <__adddf3>
 80106e4:	4b1d      	ldr	r3, [pc, #116]	; (801075c <__ieee754_pow+0x3dc>)
 80106e6:	4299      	cmp	r1, r3
 80106e8:	ec45 4b19 	vmov	d9, r4, r5
 80106ec:	4606      	mov	r6, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	468b      	mov	fp, r1
 80106f2:	f340 82fe 	ble.w	8010cf2 <__ieee754_pow+0x972>
 80106f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80106fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80106fe:	4303      	orrs	r3, r0
 8010700:	f000 81f0 	beq.w	8010ae4 <__ieee754_pow+0x764>
 8010704:	a310      	add	r3, pc, #64	; (adr r3, 8010748 <__ieee754_pow+0x3c8>)
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	ec51 0b18 	vmov	r0, r1, d8
 801070e:	f7ef ffa3 	bl	8000658 <__aeabi_dmul>
 8010712:	a30d      	add	r3, pc, #52	; (adr r3, 8010748 <__ieee754_pow+0x3c8>)
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	e6cb      	b.n	80104b2 <__ieee754_pow+0x132>
 801071a:	bf00      	nop
 801071c:	f3af 8000 	nop.w
 8010720:	60000000 	.word	0x60000000
 8010724:	3ff71547 	.word	0x3ff71547
 8010728:	f85ddf44 	.word	0xf85ddf44
 801072c:	3e54ae0b 	.word	0x3e54ae0b
 8010730:	55555555 	.word	0x55555555
 8010734:	3fd55555 	.word	0x3fd55555
 8010738:	652b82fe 	.word	0x652b82fe
 801073c:	3ff71547 	.word	0x3ff71547
 8010740:	00000000 	.word	0x00000000
 8010744:	bff00000 	.word	0xbff00000
 8010748:	8800759c 	.word	0x8800759c
 801074c:	7e37e43c 	.word	0x7e37e43c
 8010750:	3ff00000 	.word	0x3ff00000
 8010754:	3fd00000 	.word	0x3fd00000
 8010758:	3fe00000 	.word	0x3fe00000
 801075c:	408fffff 	.word	0x408fffff
 8010760:	4bd7      	ldr	r3, [pc, #860]	; (8010ac0 <__ieee754_pow+0x740>)
 8010762:	ea03 0309 	and.w	r3, r3, r9
 8010766:	2200      	movs	r2, #0
 8010768:	b92b      	cbnz	r3, 8010776 <__ieee754_pow+0x3f6>
 801076a:	4bd6      	ldr	r3, [pc, #856]	; (8010ac4 <__ieee754_pow+0x744>)
 801076c:	f7ef ff74 	bl	8000658 <__aeabi_dmul>
 8010770:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010774:	460c      	mov	r4, r1
 8010776:	1523      	asrs	r3, r4, #20
 8010778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801077c:	4413      	add	r3, r2
 801077e:	9309      	str	r3, [sp, #36]	; 0x24
 8010780:	4bd1      	ldr	r3, [pc, #836]	; (8010ac8 <__ieee754_pow+0x748>)
 8010782:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010786:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801078a:	429c      	cmp	r4, r3
 801078c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010790:	dd08      	ble.n	80107a4 <__ieee754_pow+0x424>
 8010792:	4bce      	ldr	r3, [pc, #824]	; (8010acc <__ieee754_pow+0x74c>)
 8010794:	429c      	cmp	r4, r3
 8010796:	f340 8163 	ble.w	8010a60 <__ieee754_pow+0x6e0>
 801079a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801079c:	3301      	adds	r3, #1
 801079e:	9309      	str	r3, [sp, #36]	; 0x24
 80107a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80107a4:	2400      	movs	r4, #0
 80107a6:	00e3      	lsls	r3, r4, #3
 80107a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80107aa:	4bc9      	ldr	r3, [pc, #804]	; (8010ad0 <__ieee754_pow+0x750>)
 80107ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80107b0:	ed93 7b00 	vldr	d7, [r3]
 80107b4:	4629      	mov	r1, r5
 80107b6:	ec53 2b17 	vmov	r2, r3, d7
 80107ba:	eeb0 8a47 	vmov.f32	s16, s14
 80107be:	eef0 8a67 	vmov.f32	s17, s15
 80107c2:	4682      	mov	sl, r0
 80107c4:	f7ef fd90 	bl	80002e8 <__aeabi_dsub>
 80107c8:	4652      	mov	r2, sl
 80107ca:	4606      	mov	r6, r0
 80107cc:	460f      	mov	r7, r1
 80107ce:	462b      	mov	r3, r5
 80107d0:	ec51 0b18 	vmov	r0, r1, d8
 80107d4:	f7ef fd8a 	bl	80002ec <__adddf3>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	2000      	movs	r0, #0
 80107de:	49bd      	ldr	r1, [pc, #756]	; (8010ad4 <__ieee754_pow+0x754>)
 80107e0:	f7f0 f864 	bl	80008ac <__aeabi_ddiv>
 80107e4:	ec41 0b19 	vmov	d9, r0, r1
 80107e8:	4602      	mov	r2, r0
 80107ea:	460b      	mov	r3, r1
 80107ec:	4630      	mov	r0, r6
 80107ee:	4639      	mov	r1, r7
 80107f0:	f7ef ff32 	bl	8000658 <__aeabi_dmul>
 80107f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80107f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80107fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010800:	2300      	movs	r3, #0
 8010802:	9304      	str	r3, [sp, #16]
 8010804:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010808:	46ab      	mov	fp, r5
 801080a:	106d      	asrs	r5, r5, #1
 801080c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010810:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8010814:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010818:	2200      	movs	r2, #0
 801081a:	4640      	mov	r0, r8
 801081c:	4649      	mov	r1, r9
 801081e:	4614      	mov	r4, r2
 8010820:	461d      	mov	r5, r3
 8010822:	f7ef ff19 	bl	8000658 <__aeabi_dmul>
 8010826:	4602      	mov	r2, r0
 8010828:	460b      	mov	r3, r1
 801082a:	4630      	mov	r0, r6
 801082c:	4639      	mov	r1, r7
 801082e:	f7ef fd5b 	bl	80002e8 <__aeabi_dsub>
 8010832:	ec53 2b18 	vmov	r2, r3, d8
 8010836:	4606      	mov	r6, r0
 8010838:	460f      	mov	r7, r1
 801083a:	4620      	mov	r0, r4
 801083c:	4629      	mov	r1, r5
 801083e:	f7ef fd53 	bl	80002e8 <__aeabi_dsub>
 8010842:	4602      	mov	r2, r0
 8010844:	460b      	mov	r3, r1
 8010846:	4650      	mov	r0, sl
 8010848:	4659      	mov	r1, fp
 801084a:	f7ef fd4d 	bl	80002e8 <__aeabi_dsub>
 801084e:	4642      	mov	r2, r8
 8010850:	464b      	mov	r3, r9
 8010852:	f7ef ff01 	bl	8000658 <__aeabi_dmul>
 8010856:	4602      	mov	r2, r0
 8010858:	460b      	mov	r3, r1
 801085a:	4630      	mov	r0, r6
 801085c:	4639      	mov	r1, r7
 801085e:	f7ef fd43 	bl	80002e8 <__aeabi_dsub>
 8010862:	ec53 2b19 	vmov	r2, r3, d9
 8010866:	f7ef fef7 	bl	8000658 <__aeabi_dmul>
 801086a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801086e:	ec41 0b18 	vmov	d8, r0, r1
 8010872:	4610      	mov	r0, r2
 8010874:	4619      	mov	r1, r3
 8010876:	f7ef feef 	bl	8000658 <__aeabi_dmul>
 801087a:	a37d      	add	r3, pc, #500	; (adr r3, 8010a70 <__ieee754_pow+0x6f0>)
 801087c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010880:	4604      	mov	r4, r0
 8010882:	460d      	mov	r5, r1
 8010884:	f7ef fee8 	bl	8000658 <__aeabi_dmul>
 8010888:	a37b      	add	r3, pc, #492	; (adr r3, 8010a78 <__ieee754_pow+0x6f8>)
 801088a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801088e:	f7ef fd2d 	bl	80002ec <__adddf3>
 8010892:	4622      	mov	r2, r4
 8010894:	462b      	mov	r3, r5
 8010896:	f7ef fedf 	bl	8000658 <__aeabi_dmul>
 801089a:	a379      	add	r3, pc, #484	; (adr r3, 8010a80 <__ieee754_pow+0x700>)
 801089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a0:	f7ef fd24 	bl	80002ec <__adddf3>
 80108a4:	4622      	mov	r2, r4
 80108a6:	462b      	mov	r3, r5
 80108a8:	f7ef fed6 	bl	8000658 <__aeabi_dmul>
 80108ac:	a376      	add	r3, pc, #472	; (adr r3, 8010a88 <__ieee754_pow+0x708>)
 80108ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b2:	f7ef fd1b 	bl	80002ec <__adddf3>
 80108b6:	4622      	mov	r2, r4
 80108b8:	462b      	mov	r3, r5
 80108ba:	f7ef fecd 	bl	8000658 <__aeabi_dmul>
 80108be:	a374      	add	r3, pc, #464	; (adr r3, 8010a90 <__ieee754_pow+0x710>)
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	f7ef fd12 	bl	80002ec <__adddf3>
 80108c8:	4622      	mov	r2, r4
 80108ca:	462b      	mov	r3, r5
 80108cc:	f7ef fec4 	bl	8000658 <__aeabi_dmul>
 80108d0:	a371      	add	r3, pc, #452	; (adr r3, 8010a98 <__ieee754_pow+0x718>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	f7ef fd09 	bl	80002ec <__adddf3>
 80108da:	4622      	mov	r2, r4
 80108dc:	4606      	mov	r6, r0
 80108de:	460f      	mov	r7, r1
 80108e0:	462b      	mov	r3, r5
 80108e2:	4620      	mov	r0, r4
 80108e4:	4629      	mov	r1, r5
 80108e6:	f7ef feb7 	bl	8000658 <__aeabi_dmul>
 80108ea:	4602      	mov	r2, r0
 80108ec:	460b      	mov	r3, r1
 80108ee:	4630      	mov	r0, r6
 80108f0:	4639      	mov	r1, r7
 80108f2:	f7ef feb1 	bl	8000658 <__aeabi_dmul>
 80108f6:	4642      	mov	r2, r8
 80108f8:	4604      	mov	r4, r0
 80108fa:	460d      	mov	r5, r1
 80108fc:	464b      	mov	r3, r9
 80108fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010902:	f7ef fcf3 	bl	80002ec <__adddf3>
 8010906:	ec53 2b18 	vmov	r2, r3, d8
 801090a:	f7ef fea5 	bl	8000658 <__aeabi_dmul>
 801090e:	4622      	mov	r2, r4
 8010910:	462b      	mov	r3, r5
 8010912:	f7ef fceb 	bl	80002ec <__adddf3>
 8010916:	4642      	mov	r2, r8
 8010918:	4682      	mov	sl, r0
 801091a:	468b      	mov	fp, r1
 801091c:	464b      	mov	r3, r9
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	f7ef fe99 	bl	8000658 <__aeabi_dmul>
 8010926:	4b6c      	ldr	r3, [pc, #432]	; (8010ad8 <__ieee754_pow+0x758>)
 8010928:	2200      	movs	r2, #0
 801092a:	4606      	mov	r6, r0
 801092c:	460f      	mov	r7, r1
 801092e:	f7ef fcdd 	bl	80002ec <__adddf3>
 8010932:	4652      	mov	r2, sl
 8010934:	465b      	mov	r3, fp
 8010936:	f7ef fcd9 	bl	80002ec <__adddf3>
 801093a:	9c04      	ldr	r4, [sp, #16]
 801093c:	460d      	mov	r5, r1
 801093e:	4622      	mov	r2, r4
 8010940:	460b      	mov	r3, r1
 8010942:	4640      	mov	r0, r8
 8010944:	4649      	mov	r1, r9
 8010946:	f7ef fe87 	bl	8000658 <__aeabi_dmul>
 801094a:	4b63      	ldr	r3, [pc, #396]	; (8010ad8 <__ieee754_pow+0x758>)
 801094c:	4680      	mov	r8, r0
 801094e:	4689      	mov	r9, r1
 8010950:	2200      	movs	r2, #0
 8010952:	4620      	mov	r0, r4
 8010954:	4629      	mov	r1, r5
 8010956:	f7ef fcc7 	bl	80002e8 <__aeabi_dsub>
 801095a:	4632      	mov	r2, r6
 801095c:	463b      	mov	r3, r7
 801095e:	f7ef fcc3 	bl	80002e8 <__aeabi_dsub>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	4650      	mov	r0, sl
 8010968:	4659      	mov	r1, fp
 801096a:	f7ef fcbd 	bl	80002e8 <__aeabi_dsub>
 801096e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010972:	f7ef fe71 	bl	8000658 <__aeabi_dmul>
 8010976:	4622      	mov	r2, r4
 8010978:	4606      	mov	r6, r0
 801097a:	460f      	mov	r7, r1
 801097c:	462b      	mov	r3, r5
 801097e:	ec51 0b18 	vmov	r0, r1, d8
 8010982:	f7ef fe69 	bl	8000658 <__aeabi_dmul>
 8010986:	4602      	mov	r2, r0
 8010988:	460b      	mov	r3, r1
 801098a:	4630      	mov	r0, r6
 801098c:	4639      	mov	r1, r7
 801098e:	f7ef fcad 	bl	80002ec <__adddf3>
 8010992:	4606      	mov	r6, r0
 8010994:	460f      	mov	r7, r1
 8010996:	4602      	mov	r2, r0
 8010998:	460b      	mov	r3, r1
 801099a:	4640      	mov	r0, r8
 801099c:	4649      	mov	r1, r9
 801099e:	f7ef fca5 	bl	80002ec <__adddf3>
 80109a2:	9c04      	ldr	r4, [sp, #16]
 80109a4:	a33e      	add	r3, pc, #248	; (adr r3, 8010aa0 <__ieee754_pow+0x720>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	4620      	mov	r0, r4
 80109ac:	460d      	mov	r5, r1
 80109ae:	f7ef fe53 	bl	8000658 <__aeabi_dmul>
 80109b2:	4642      	mov	r2, r8
 80109b4:	ec41 0b18 	vmov	d8, r0, r1
 80109b8:	464b      	mov	r3, r9
 80109ba:	4620      	mov	r0, r4
 80109bc:	4629      	mov	r1, r5
 80109be:	f7ef fc93 	bl	80002e8 <__aeabi_dsub>
 80109c2:	4602      	mov	r2, r0
 80109c4:	460b      	mov	r3, r1
 80109c6:	4630      	mov	r0, r6
 80109c8:	4639      	mov	r1, r7
 80109ca:	f7ef fc8d 	bl	80002e8 <__aeabi_dsub>
 80109ce:	a336      	add	r3, pc, #216	; (adr r3, 8010aa8 <__ieee754_pow+0x728>)
 80109d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d4:	f7ef fe40 	bl	8000658 <__aeabi_dmul>
 80109d8:	a335      	add	r3, pc, #212	; (adr r3, 8010ab0 <__ieee754_pow+0x730>)
 80109da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109de:	4606      	mov	r6, r0
 80109e0:	460f      	mov	r7, r1
 80109e2:	4620      	mov	r0, r4
 80109e4:	4629      	mov	r1, r5
 80109e6:	f7ef fe37 	bl	8000658 <__aeabi_dmul>
 80109ea:	4602      	mov	r2, r0
 80109ec:	460b      	mov	r3, r1
 80109ee:	4630      	mov	r0, r6
 80109f0:	4639      	mov	r1, r7
 80109f2:	f7ef fc7b 	bl	80002ec <__adddf3>
 80109f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109f8:	4b38      	ldr	r3, [pc, #224]	; (8010adc <__ieee754_pow+0x75c>)
 80109fa:	4413      	add	r3, r2
 80109fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a00:	f7ef fc74 	bl	80002ec <__adddf3>
 8010a04:	4682      	mov	sl, r0
 8010a06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a08:	468b      	mov	fp, r1
 8010a0a:	f7ef fdbb 	bl	8000584 <__aeabi_i2d>
 8010a0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a10:	4b33      	ldr	r3, [pc, #204]	; (8010ae0 <__ieee754_pow+0x760>)
 8010a12:	4413      	add	r3, r2
 8010a14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a18:	4606      	mov	r6, r0
 8010a1a:	460f      	mov	r7, r1
 8010a1c:	4652      	mov	r2, sl
 8010a1e:	465b      	mov	r3, fp
 8010a20:	ec51 0b18 	vmov	r0, r1, d8
 8010a24:	f7ef fc62 	bl	80002ec <__adddf3>
 8010a28:	4642      	mov	r2, r8
 8010a2a:	464b      	mov	r3, r9
 8010a2c:	f7ef fc5e 	bl	80002ec <__adddf3>
 8010a30:	4632      	mov	r2, r6
 8010a32:	463b      	mov	r3, r7
 8010a34:	f7ef fc5a 	bl	80002ec <__adddf3>
 8010a38:	9c04      	ldr	r4, [sp, #16]
 8010a3a:	4632      	mov	r2, r6
 8010a3c:	463b      	mov	r3, r7
 8010a3e:	4620      	mov	r0, r4
 8010a40:	460d      	mov	r5, r1
 8010a42:	f7ef fc51 	bl	80002e8 <__aeabi_dsub>
 8010a46:	4642      	mov	r2, r8
 8010a48:	464b      	mov	r3, r9
 8010a4a:	f7ef fc4d 	bl	80002e8 <__aeabi_dsub>
 8010a4e:	ec53 2b18 	vmov	r2, r3, d8
 8010a52:	f7ef fc49 	bl	80002e8 <__aeabi_dsub>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	4650      	mov	r0, sl
 8010a5c:	4659      	mov	r1, fp
 8010a5e:	e606      	b.n	801066e <__ieee754_pow+0x2ee>
 8010a60:	2401      	movs	r4, #1
 8010a62:	e6a0      	b.n	80107a6 <__ieee754_pow+0x426>
 8010a64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8010ab8 <__ieee754_pow+0x738>
 8010a68:	e60d      	b.n	8010686 <__ieee754_pow+0x306>
 8010a6a:	bf00      	nop
 8010a6c:	f3af 8000 	nop.w
 8010a70:	4a454eef 	.word	0x4a454eef
 8010a74:	3fca7e28 	.word	0x3fca7e28
 8010a78:	93c9db65 	.word	0x93c9db65
 8010a7c:	3fcd864a 	.word	0x3fcd864a
 8010a80:	a91d4101 	.word	0xa91d4101
 8010a84:	3fd17460 	.word	0x3fd17460
 8010a88:	518f264d 	.word	0x518f264d
 8010a8c:	3fd55555 	.word	0x3fd55555
 8010a90:	db6fabff 	.word	0xdb6fabff
 8010a94:	3fdb6db6 	.word	0x3fdb6db6
 8010a98:	33333303 	.word	0x33333303
 8010a9c:	3fe33333 	.word	0x3fe33333
 8010aa0:	e0000000 	.word	0xe0000000
 8010aa4:	3feec709 	.word	0x3feec709
 8010aa8:	dc3a03fd 	.word	0xdc3a03fd
 8010aac:	3feec709 	.word	0x3feec709
 8010ab0:	145b01f5 	.word	0x145b01f5
 8010ab4:	be3e2fe0 	.word	0xbe3e2fe0
 8010ab8:	00000000 	.word	0x00000000
 8010abc:	3ff00000 	.word	0x3ff00000
 8010ac0:	7ff00000 	.word	0x7ff00000
 8010ac4:	43400000 	.word	0x43400000
 8010ac8:	0003988e 	.word	0x0003988e
 8010acc:	000bb679 	.word	0x000bb679
 8010ad0:	08012290 	.word	0x08012290
 8010ad4:	3ff00000 	.word	0x3ff00000
 8010ad8:	40080000 	.word	0x40080000
 8010adc:	080122b0 	.word	0x080122b0
 8010ae0:	080122a0 	.word	0x080122a0
 8010ae4:	a3b5      	add	r3, pc, #724	; (adr r3, 8010dbc <__ieee754_pow+0xa3c>)
 8010ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aea:	4640      	mov	r0, r8
 8010aec:	4649      	mov	r1, r9
 8010aee:	f7ef fbfd 	bl	80002ec <__adddf3>
 8010af2:	4622      	mov	r2, r4
 8010af4:	ec41 0b1a 	vmov	d10, r0, r1
 8010af8:	462b      	mov	r3, r5
 8010afa:	4630      	mov	r0, r6
 8010afc:	4639      	mov	r1, r7
 8010afe:	f7ef fbf3 	bl	80002e8 <__aeabi_dsub>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	ec51 0b1a 	vmov	r0, r1, d10
 8010b0a:	f7f0 f835 	bl	8000b78 <__aeabi_dcmpgt>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	f47f adf8 	bne.w	8010704 <__ieee754_pow+0x384>
 8010b14:	4aa4      	ldr	r2, [pc, #656]	; (8010da8 <__ieee754_pow+0xa28>)
 8010b16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	f340 810b 	ble.w	8010d36 <__ieee754_pow+0x9b6>
 8010b20:	151b      	asrs	r3, r3, #20
 8010b22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010b26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010b2a:	fa4a f303 	asr.w	r3, sl, r3
 8010b2e:	445b      	add	r3, fp
 8010b30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010b34:	4e9d      	ldr	r6, [pc, #628]	; (8010dac <__ieee754_pow+0xa2c>)
 8010b36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010b3a:	4116      	asrs	r6, r2
 8010b3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010b40:	2000      	movs	r0, #0
 8010b42:	ea23 0106 	bic.w	r1, r3, r6
 8010b46:	f1c2 0214 	rsb	r2, r2, #20
 8010b4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010b4e:	fa4a fa02 	asr.w	sl, sl, r2
 8010b52:	f1bb 0f00 	cmp.w	fp, #0
 8010b56:	4602      	mov	r2, r0
 8010b58:	460b      	mov	r3, r1
 8010b5a:	4620      	mov	r0, r4
 8010b5c:	4629      	mov	r1, r5
 8010b5e:	bfb8      	it	lt
 8010b60:	f1ca 0a00 	rsblt	sl, sl, #0
 8010b64:	f7ef fbc0 	bl	80002e8 <__aeabi_dsub>
 8010b68:	ec41 0b19 	vmov	d9, r0, r1
 8010b6c:	4642      	mov	r2, r8
 8010b6e:	464b      	mov	r3, r9
 8010b70:	ec51 0b19 	vmov	r0, r1, d9
 8010b74:	f7ef fbba 	bl	80002ec <__adddf3>
 8010b78:	2400      	movs	r4, #0
 8010b7a:	a379      	add	r3, pc, #484	; (adr r3, 8010d60 <__ieee754_pow+0x9e0>)
 8010b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b80:	4620      	mov	r0, r4
 8010b82:	460d      	mov	r5, r1
 8010b84:	f7ef fd68 	bl	8000658 <__aeabi_dmul>
 8010b88:	ec53 2b19 	vmov	r2, r3, d9
 8010b8c:	4606      	mov	r6, r0
 8010b8e:	460f      	mov	r7, r1
 8010b90:	4620      	mov	r0, r4
 8010b92:	4629      	mov	r1, r5
 8010b94:	f7ef fba8 	bl	80002e8 <__aeabi_dsub>
 8010b98:	4602      	mov	r2, r0
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	4640      	mov	r0, r8
 8010b9e:	4649      	mov	r1, r9
 8010ba0:	f7ef fba2 	bl	80002e8 <__aeabi_dsub>
 8010ba4:	a370      	add	r3, pc, #448	; (adr r3, 8010d68 <__ieee754_pow+0x9e8>)
 8010ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010baa:	f7ef fd55 	bl	8000658 <__aeabi_dmul>
 8010bae:	a370      	add	r3, pc, #448	; (adr r3, 8010d70 <__ieee754_pow+0x9f0>)
 8010bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb4:	4680      	mov	r8, r0
 8010bb6:	4689      	mov	r9, r1
 8010bb8:	4620      	mov	r0, r4
 8010bba:	4629      	mov	r1, r5
 8010bbc:	f7ef fd4c 	bl	8000658 <__aeabi_dmul>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	4649      	mov	r1, r9
 8010bc8:	f7ef fb90 	bl	80002ec <__adddf3>
 8010bcc:	4604      	mov	r4, r0
 8010bce:	460d      	mov	r5, r1
 8010bd0:	4602      	mov	r2, r0
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	4630      	mov	r0, r6
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	f7ef fb88 	bl	80002ec <__adddf3>
 8010bdc:	4632      	mov	r2, r6
 8010bde:	463b      	mov	r3, r7
 8010be0:	4680      	mov	r8, r0
 8010be2:	4689      	mov	r9, r1
 8010be4:	f7ef fb80 	bl	80002e8 <__aeabi_dsub>
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	4620      	mov	r0, r4
 8010bee:	4629      	mov	r1, r5
 8010bf0:	f7ef fb7a 	bl	80002e8 <__aeabi_dsub>
 8010bf4:	4642      	mov	r2, r8
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	460f      	mov	r7, r1
 8010bfa:	464b      	mov	r3, r9
 8010bfc:	4640      	mov	r0, r8
 8010bfe:	4649      	mov	r1, r9
 8010c00:	f7ef fd2a 	bl	8000658 <__aeabi_dmul>
 8010c04:	a35c      	add	r3, pc, #368	; (adr r3, 8010d78 <__ieee754_pow+0x9f8>)
 8010c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	460d      	mov	r5, r1
 8010c0e:	f7ef fd23 	bl	8000658 <__aeabi_dmul>
 8010c12:	a35b      	add	r3, pc, #364	; (adr r3, 8010d80 <__ieee754_pow+0xa00>)
 8010c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c18:	f7ef fb66 	bl	80002e8 <__aeabi_dsub>
 8010c1c:	4622      	mov	r2, r4
 8010c1e:	462b      	mov	r3, r5
 8010c20:	f7ef fd1a 	bl	8000658 <__aeabi_dmul>
 8010c24:	a358      	add	r3, pc, #352	; (adr r3, 8010d88 <__ieee754_pow+0xa08>)
 8010c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2a:	f7ef fb5f 	bl	80002ec <__adddf3>
 8010c2e:	4622      	mov	r2, r4
 8010c30:	462b      	mov	r3, r5
 8010c32:	f7ef fd11 	bl	8000658 <__aeabi_dmul>
 8010c36:	a356      	add	r3, pc, #344	; (adr r3, 8010d90 <__ieee754_pow+0xa10>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	f7ef fb54 	bl	80002e8 <__aeabi_dsub>
 8010c40:	4622      	mov	r2, r4
 8010c42:	462b      	mov	r3, r5
 8010c44:	f7ef fd08 	bl	8000658 <__aeabi_dmul>
 8010c48:	a353      	add	r3, pc, #332	; (adr r3, 8010d98 <__ieee754_pow+0xa18>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	f7ef fb4d 	bl	80002ec <__adddf3>
 8010c52:	4622      	mov	r2, r4
 8010c54:	462b      	mov	r3, r5
 8010c56:	f7ef fcff 	bl	8000658 <__aeabi_dmul>
 8010c5a:	4602      	mov	r2, r0
 8010c5c:	460b      	mov	r3, r1
 8010c5e:	4640      	mov	r0, r8
 8010c60:	4649      	mov	r1, r9
 8010c62:	f7ef fb41 	bl	80002e8 <__aeabi_dsub>
 8010c66:	4604      	mov	r4, r0
 8010c68:	460d      	mov	r5, r1
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	4640      	mov	r0, r8
 8010c70:	4649      	mov	r1, r9
 8010c72:	f7ef fcf1 	bl	8000658 <__aeabi_dmul>
 8010c76:	2200      	movs	r2, #0
 8010c78:	ec41 0b19 	vmov	d9, r0, r1
 8010c7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010c80:	4620      	mov	r0, r4
 8010c82:	4629      	mov	r1, r5
 8010c84:	f7ef fb30 	bl	80002e8 <__aeabi_dsub>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	ec51 0b19 	vmov	r0, r1, d9
 8010c90:	f7ef fe0c 	bl	80008ac <__aeabi_ddiv>
 8010c94:	4632      	mov	r2, r6
 8010c96:	4604      	mov	r4, r0
 8010c98:	460d      	mov	r5, r1
 8010c9a:	463b      	mov	r3, r7
 8010c9c:	4640      	mov	r0, r8
 8010c9e:	4649      	mov	r1, r9
 8010ca0:	f7ef fcda 	bl	8000658 <__aeabi_dmul>
 8010ca4:	4632      	mov	r2, r6
 8010ca6:	463b      	mov	r3, r7
 8010ca8:	f7ef fb20 	bl	80002ec <__adddf3>
 8010cac:	4602      	mov	r2, r0
 8010cae:	460b      	mov	r3, r1
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	4629      	mov	r1, r5
 8010cb4:	f7ef fb18 	bl	80002e8 <__aeabi_dsub>
 8010cb8:	4642      	mov	r2, r8
 8010cba:	464b      	mov	r3, r9
 8010cbc:	f7ef fb14 	bl	80002e8 <__aeabi_dsub>
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	4602      	mov	r2, r0
 8010cc4:	493a      	ldr	r1, [pc, #232]	; (8010db0 <__ieee754_pow+0xa30>)
 8010cc6:	2000      	movs	r0, #0
 8010cc8:	f7ef fb0e 	bl	80002e8 <__aeabi_dsub>
 8010ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8010cd0:	9b01      	ldr	r3, [sp, #4]
 8010cd2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010cda:	da2f      	bge.n	8010d3c <__ieee754_pow+0x9bc>
 8010cdc:	4650      	mov	r0, sl
 8010cde:	ed9d 0b00 	vldr	d0, [sp]
 8010ce2:	f000 f9c1 	bl	8011068 <scalbn>
 8010ce6:	ec51 0b10 	vmov	r0, r1, d0
 8010cea:	ec53 2b18 	vmov	r2, r3, d8
 8010cee:	f7ff bbe0 	b.w	80104b2 <__ieee754_pow+0x132>
 8010cf2:	4b30      	ldr	r3, [pc, #192]	; (8010db4 <__ieee754_pow+0xa34>)
 8010cf4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010cf8:	429e      	cmp	r6, r3
 8010cfa:	f77f af0b 	ble.w	8010b14 <__ieee754_pow+0x794>
 8010cfe:	4b2e      	ldr	r3, [pc, #184]	; (8010db8 <__ieee754_pow+0xa38>)
 8010d00:	440b      	add	r3, r1
 8010d02:	4303      	orrs	r3, r0
 8010d04:	d00b      	beq.n	8010d1e <__ieee754_pow+0x99e>
 8010d06:	a326      	add	r3, pc, #152	; (adr r3, 8010da0 <__ieee754_pow+0xa20>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	ec51 0b18 	vmov	r0, r1, d8
 8010d10:	f7ef fca2 	bl	8000658 <__aeabi_dmul>
 8010d14:	a322      	add	r3, pc, #136	; (adr r3, 8010da0 <__ieee754_pow+0xa20>)
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	f7ff bbca 	b.w	80104b2 <__ieee754_pow+0x132>
 8010d1e:	4622      	mov	r2, r4
 8010d20:	462b      	mov	r3, r5
 8010d22:	f7ef fae1 	bl	80002e8 <__aeabi_dsub>
 8010d26:	4642      	mov	r2, r8
 8010d28:	464b      	mov	r3, r9
 8010d2a:	f7ef ff1b 	bl	8000b64 <__aeabi_dcmpge>
 8010d2e:	2800      	cmp	r0, #0
 8010d30:	f43f aef0 	beq.w	8010b14 <__ieee754_pow+0x794>
 8010d34:	e7e7      	b.n	8010d06 <__ieee754_pow+0x986>
 8010d36:	f04f 0a00 	mov.w	sl, #0
 8010d3a:	e717      	b.n	8010b6c <__ieee754_pow+0x7ec>
 8010d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d40:	4619      	mov	r1, r3
 8010d42:	e7d2      	b.n	8010cea <__ieee754_pow+0x96a>
 8010d44:	491a      	ldr	r1, [pc, #104]	; (8010db0 <__ieee754_pow+0xa30>)
 8010d46:	2000      	movs	r0, #0
 8010d48:	f7ff bb9e 	b.w	8010488 <__ieee754_pow+0x108>
 8010d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d50:	f7ff bb9a 	b.w	8010488 <__ieee754_pow+0x108>
 8010d54:	9000      	str	r0, [sp, #0]
 8010d56:	f7ff bb76 	b.w	8010446 <__ieee754_pow+0xc6>
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	f7ff bb60 	b.w	8010420 <__ieee754_pow+0xa0>
 8010d60:	00000000 	.word	0x00000000
 8010d64:	3fe62e43 	.word	0x3fe62e43
 8010d68:	fefa39ef 	.word	0xfefa39ef
 8010d6c:	3fe62e42 	.word	0x3fe62e42
 8010d70:	0ca86c39 	.word	0x0ca86c39
 8010d74:	be205c61 	.word	0xbe205c61
 8010d78:	72bea4d0 	.word	0x72bea4d0
 8010d7c:	3e663769 	.word	0x3e663769
 8010d80:	c5d26bf1 	.word	0xc5d26bf1
 8010d84:	3ebbbd41 	.word	0x3ebbbd41
 8010d88:	af25de2c 	.word	0xaf25de2c
 8010d8c:	3f11566a 	.word	0x3f11566a
 8010d90:	16bebd93 	.word	0x16bebd93
 8010d94:	3f66c16c 	.word	0x3f66c16c
 8010d98:	5555553e 	.word	0x5555553e
 8010d9c:	3fc55555 	.word	0x3fc55555
 8010da0:	c2f8f359 	.word	0xc2f8f359
 8010da4:	01a56e1f 	.word	0x01a56e1f
 8010da8:	3fe00000 	.word	0x3fe00000
 8010dac:	000fffff 	.word	0x000fffff
 8010db0:	3ff00000 	.word	0x3ff00000
 8010db4:	4090cbff 	.word	0x4090cbff
 8010db8:	3f6f3400 	.word	0x3f6f3400
 8010dbc:	652b82fe 	.word	0x652b82fe
 8010dc0:	3c971547 	.word	0x3c971547

08010dc4 <__ieee754_sqrt>:
 8010dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	ec55 4b10 	vmov	r4, r5, d0
 8010dcc:	4e56      	ldr	r6, [pc, #344]	; (8010f28 <__ieee754_sqrt+0x164>)
 8010dce:	43ae      	bics	r6, r5
 8010dd0:	ee10 0a10 	vmov	r0, s0
 8010dd4:	ee10 3a10 	vmov	r3, s0
 8010dd8:	4629      	mov	r1, r5
 8010dda:	462a      	mov	r2, r5
 8010ddc:	d110      	bne.n	8010e00 <__ieee754_sqrt+0x3c>
 8010dde:	ee10 2a10 	vmov	r2, s0
 8010de2:	462b      	mov	r3, r5
 8010de4:	f7ef fc38 	bl	8000658 <__aeabi_dmul>
 8010de8:	4602      	mov	r2, r0
 8010dea:	460b      	mov	r3, r1
 8010dec:	4620      	mov	r0, r4
 8010dee:	4629      	mov	r1, r5
 8010df0:	f7ef fa7c 	bl	80002ec <__adddf3>
 8010df4:	4604      	mov	r4, r0
 8010df6:	460d      	mov	r5, r1
 8010df8:	ec45 4b10 	vmov	d0, r4, r5
 8010dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e00:	2d00      	cmp	r5, #0
 8010e02:	dc10      	bgt.n	8010e26 <__ieee754_sqrt+0x62>
 8010e04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e08:	4330      	orrs	r0, r6
 8010e0a:	d0f5      	beq.n	8010df8 <__ieee754_sqrt+0x34>
 8010e0c:	b15d      	cbz	r5, 8010e26 <__ieee754_sqrt+0x62>
 8010e0e:	ee10 2a10 	vmov	r2, s0
 8010e12:	462b      	mov	r3, r5
 8010e14:	ee10 0a10 	vmov	r0, s0
 8010e18:	f7ef fa66 	bl	80002e8 <__aeabi_dsub>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	f7ef fd44 	bl	80008ac <__aeabi_ddiv>
 8010e24:	e7e6      	b.n	8010df4 <__ieee754_sqrt+0x30>
 8010e26:	1509      	asrs	r1, r1, #20
 8010e28:	d076      	beq.n	8010f18 <__ieee754_sqrt+0x154>
 8010e2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010e2e:	07ce      	lsls	r6, r1, #31
 8010e30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010e34:	bf5e      	ittt	pl
 8010e36:	0fda      	lsrpl	r2, r3, #31
 8010e38:	005b      	lslpl	r3, r3, #1
 8010e3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010e3e:	0fda      	lsrs	r2, r3, #31
 8010e40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010e44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010e48:	2000      	movs	r0, #0
 8010e4a:	106d      	asrs	r5, r5, #1
 8010e4c:	005b      	lsls	r3, r3, #1
 8010e4e:	f04f 0e16 	mov.w	lr, #22
 8010e52:	4684      	mov	ip, r0
 8010e54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010e58:	eb0c 0401 	add.w	r4, ip, r1
 8010e5c:	4294      	cmp	r4, r2
 8010e5e:	bfde      	ittt	le
 8010e60:	1b12      	suble	r2, r2, r4
 8010e62:	eb04 0c01 	addle.w	ip, r4, r1
 8010e66:	1840      	addle	r0, r0, r1
 8010e68:	0052      	lsls	r2, r2, #1
 8010e6a:	f1be 0e01 	subs.w	lr, lr, #1
 8010e6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010e72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010e76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010e7a:	d1ed      	bne.n	8010e58 <__ieee754_sqrt+0x94>
 8010e7c:	4671      	mov	r1, lr
 8010e7e:	2720      	movs	r7, #32
 8010e80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010e84:	4562      	cmp	r2, ip
 8010e86:	eb04 060e 	add.w	r6, r4, lr
 8010e8a:	dc02      	bgt.n	8010e92 <__ieee754_sqrt+0xce>
 8010e8c:	d113      	bne.n	8010eb6 <__ieee754_sqrt+0xf2>
 8010e8e:	429e      	cmp	r6, r3
 8010e90:	d811      	bhi.n	8010eb6 <__ieee754_sqrt+0xf2>
 8010e92:	2e00      	cmp	r6, #0
 8010e94:	eb06 0e04 	add.w	lr, r6, r4
 8010e98:	da43      	bge.n	8010f22 <__ieee754_sqrt+0x15e>
 8010e9a:	f1be 0f00 	cmp.w	lr, #0
 8010e9e:	db40      	blt.n	8010f22 <__ieee754_sqrt+0x15e>
 8010ea0:	f10c 0801 	add.w	r8, ip, #1
 8010ea4:	eba2 020c 	sub.w	r2, r2, ip
 8010ea8:	429e      	cmp	r6, r3
 8010eaa:	bf88      	it	hi
 8010eac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010eb0:	1b9b      	subs	r3, r3, r6
 8010eb2:	4421      	add	r1, r4
 8010eb4:	46c4      	mov	ip, r8
 8010eb6:	0052      	lsls	r2, r2, #1
 8010eb8:	3f01      	subs	r7, #1
 8010eba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010ebe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010ec2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010ec6:	d1dd      	bne.n	8010e84 <__ieee754_sqrt+0xc0>
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	d006      	beq.n	8010eda <__ieee754_sqrt+0x116>
 8010ecc:	1c4c      	adds	r4, r1, #1
 8010ece:	bf13      	iteet	ne
 8010ed0:	3101      	addne	r1, #1
 8010ed2:	3001      	addeq	r0, #1
 8010ed4:	4639      	moveq	r1, r7
 8010ed6:	f021 0101 	bicne.w	r1, r1, #1
 8010eda:	1043      	asrs	r3, r0, #1
 8010edc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010ee0:	0849      	lsrs	r1, r1, #1
 8010ee2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010ee6:	07c2      	lsls	r2, r0, #31
 8010ee8:	bf48      	it	mi
 8010eea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010eee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010ef2:	460c      	mov	r4, r1
 8010ef4:	463d      	mov	r5, r7
 8010ef6:	e77f      	b.n	8010df8 <__ieee754_sqrt+0x34>
 8010ef8:	0ada      	lsrs	r2, r3, #11
 8010efa:	3815      	subs	r0, #21
 8010efc:	055b      	lsls	r3, r3, #21
 8010efe:	2a00      	cmp	r2, #0
 8010f00:	d0fa      	beq.n	8010ef8 <__ieee754_sqrt+0x134>
 8010f02:	02d7      	lsls	r7, r2, #11
 8010f04:	d50a      	bpl.n	8010f1c <__ieee754_sqrt+0x158>
 8010f06:	f1c1 0420 	rsb	r4, r1, #32
 8010f0a:	fa23 f404 	lsr.w	r4, r3, r4
 8010f0e:	1e4d      	subs	r5, r1, #1
 8010f10:	408b      	lsls	r3, r1
 8010f12:	4322      	orrs	r2, r4
 8010f14:	1b41      	subs	r1, r0, r5
 8010f16:	e788      	b.n	8010e2a <__ieee754_sqrt+0x66>
 8010f18:	4608      	mov	r0, r1
 8010f1a:	e7f0      	b.n	8010efe <__ieee754_sqrt+0x13a>
 8010f1c:	0052      	lsls	r2, r2, #1
 8010f1e:	3101      	adds	r1, #1
 8010f20:	e7ef      	b.n	8010f02 <__ieee754_sqrt+0x13e>
 8010f22:	46e0      	mov	r8, ip
 8010f24:	e7be      	b.n	8010ea4 <__ieee754_sqrt+0xe0>
 8010f26:	bf00      	nop
 8010f28:	7ff00000 	.word	0x7ff00000

08010f2c <fabs>:
 8010f2c:	ec51 0b10 	vmov	r0, r1, d0
 8010f30:	ee10 2a10 	vmov	r2, s0
 8010f34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010f38:	ec43 2b10 	vmov	d0, r2, r3
 8010f3c:	4770      	bx	lr

08010f3e <finite>:
 8010f3e:	b082      	sub	sp, #8
 8010f40:	ed8d 0b00 	vstr	d0, [sp]
 8010f44:	9801      	ldr	r0, [sp, #4]
 8010f46:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010f4a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010f4e:	0fc0      	lsrs	r0, r0, #31
 8010f50:	b002      	add	sp, #8
 8010f52:	4770      	bx	lr

08010f54 <rint>:
 8010f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f56:	ec51 0b10 	vmov	r0, r1, d0
 8010f5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010f5e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8010f62:	2e13      	cmp	r6, #19
 8010f64:	ee10 4a10 	vmov	r4, s0
 8010f68:	460b      	mov	r3, r1
 8010f6a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8010f6e:	dc58      	bgt.n	8011022 <rint+0xce>
 8010f70:	2e00      	cmp	r6, #0
 8010f72:	da2b      	bge.n	8010fcc <rint+0x78>
 8010f74:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010f78:	4302      	orrs	r2, r0
 8010f7a:	d023      	beq.n	8010fc4 <rint+0x70>
 8010f7c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8010f80:	4302      	orrs	r2, r0
 8010f82:	4254      	negs	r4, r2
 8010f84:	4314      	orrs	r4, r2
 8010f86:	0c4b      	lsrs	r3, r1, #17
 8010f88:	0b24      	lsrs	r4, r4, #12
 8010f8a:	045b      	lsls	r3, r3, #17
 8010f8c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8010f90:	ea44 0103 	orr.w	r1, r4, r3
 8010f94:	4b32      	ldr	r3, [pc, #200]	; (8011060 <rint+0x10c>)
 8010f96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010f9a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	f7ef f9a1 	bl	80002ec <__adddf3>
 8010faa:	e9cd 0100 	strd	r0, r1, [sp]
 8010fae:	463b      	mov	r3, r7
 8010fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	f7ef f997 	bl	80002e8 <__aeabi_dsub>
 8010fba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010fbe:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	ec41 0b10 	vmov	d0, r0, r1
 8010fc8:	b003      	add	sp, #12
 8010fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fcc:	4a25      	ldr	r2, [pc, #148]	; (8011064 <rint+0x110>)
 8010fce:	4132      	asrs	r2, r6
 8010fd0:	ea01 0702 	and.w	r7, r1, r2
 8010fd4:	4307      	orrs	r7, r0
 8010fd6:	d0f5      	beq.n	8010fc4 <rint+0x70>
 8010fd8:	0851      	lsrs	r1, r2, #1
 8010fda:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8010fde:	4314      	orrs	r4, r2
 8010fe0:	d00c      	beq.n	8010ffc <rint+0xa8>
 8010fe2:	ea23 0201 	bic.w	r2, r3, r1
 8010fe6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010fea:	2e13      	cmp	r6, #19
 8010fec:	fa43 f606 	asr.w	r6, r3, r6
 8010ff0:	bf0c      	ite	eq
 8010ff2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010ff6:	2400      	movne	r4, #0
 8010ff8:	ea42 0306 	orr.w	r3, r2, r6
 8010ffc:	4918      	ldr	r1, [pc, #96]	; (8011060 <rint+0x10c>)
 8010ffe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011002:	4622      	mov	r2, r4
 8011004:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011008:	4620      	mov	r0, r4
 801100a:	4629      	mov	r1, r5
 801100c:	f7ef f96e 	bl	80002ec <__adddf3>
 8011010:	e9cd 0100 	strd	r0, r1, [sp]
 8011014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011018:	4622      	mov	r2, r4
 801101a:	462b      	mov	r3, r5
 801101c:	f7ef f964 	bl	80002e8 <__aeabi_dsub>
 8011020:	e7d0      	b.n	8010fc4 <rint+0x70>
 8011022:	2e33      	cmp	r6, #51	; 0x33
 8011024:	dd07      	ble.n	8011036 <rint+0xe2>
 8011026:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801102a:	d1cb      	bne.n	8010fc4 <rint+0x70>
 801102c:	ee10 2a10 	vmov	r2, s0
 8011030:	f7ef f95c 	bl	80002ec <__adddf3>
 8011034:	e7c6      	b.n	8010fc4 <rint+0x70>
 8011036:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801103a:	f04f 36ff 	mov.w	r6, #4294967295
 801103e:	40d6      	lsrs	r6, r2
 8011040:	4230      	tst	r0, r6
 8011042:	d0bf      	beq.n	8010fc4 <rint+0x70>
 8011044:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8011048:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801104c:	bf1f      	itttt	ne
 801104e:	ea24 0101 	bicne.w	r1, r4, r1
 8011052:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011056:	fa44 f202 	asrne.w	r2, r4, r2
 801105a:	ea41 0402 	orrne.w	r4, r1, r2
 801105e:	e7cd      	b.n	8010ffc <rint+0xa8>
 8011060:	080122c0 	.word	0x080122c0
 8011064:	000fffff 	.word	0x000fffff

08011068 <scalbn>:
 8011068:	b570      	push	{r4, r5, r6, lr}
 801106a:	ec55 4b10 	vmov	r4, r5, d0
 801106e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011072:	4606      	mov	r6, r0
 8011074:	462b      	mov	r3, r5
 8011076:	b99a      	cbnz	r2, 80110a0 <scalbn+0x38>
 8011078:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801107c:	4323      	orrs	r3, r4
 801107e:	d036      	beq.n	80110ee <scalbn+0x86>
 8011080:	4b39      	ldr	r3, [pc, #228]	; (8011168 <scalbn+0x100>)
 8011082:	4629      	mov	r1, r5
 8011084:	ee10 0a10 	vmov	r0, s0
 8011088:	2200      	movs	r2, #0
 801108a:	f7ef fae5 	bl	8000658 <__aeabi_dmul>
 801108e:	4b37      	ldr	r3, [pc, #220]	; (801116c <scalbn+0x104>)
 8011090:	429e      	cmp	r6, r3
 8011092:	4604      	mov	r4, r0
 8011094:	460d      	mov	r5, r1
 8011096:	da10      	bge.n	80110ba <scalbn+0x52>
 8011098:	a32b      	add	r3, pc, #172	; (adr r3, 8011148 <scalbn+0xe0>)
 801109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109e:	e03a      	b.n	8011116 <scalbn+0xae>
 80110a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80110a4:	428a      	cmp	r2, r1
 80110a6:	d10c      	bne.n	80110c2 <scalbn+0x5a>
 80110a8:	ee10 2a10 	vmov	r2, s0
 80110ac:	4620      	mov	r0, r4
 80110ae:	4629      	mov	r1, r5
 80110b0:	f7ef f91c 	bl	80002ec <__adddf3>
 80110b4:	4604      	mov	r4, r0
 80110b6:	460d      	mov	r5, r1
 80110b8:	e019      	b.n	80110ee <scalbn+0x86>
 80110ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80110be:	460b      	mov	r3, r1
 80110c0:	3a36      	subs	r2, #54	; 0x36
 80110c2:	4432      	add	r2, r6
 80110c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80110c8:	428a      	cmp	r2, r1
 80110ca:	dd08      	ble.n	80110de <scalbn+0x76>
 80110cc:	2d00      	cmp	r5, #0
 80110ce:	a120      	add	r1, pc, #128	; (adr r1, 8011150 <scalbn+0xe8>)
 80110d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110d4:	da1c      	bge.n	8011110 <scalbn+0xa8>
 80110d6:	a120      	add	r1, pc, #128	; (adr r1, 8011158 <scalbn+0xf0>)
 80110d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110dc:	e018      	b.n	8011110 <scalbn+0xa8>
 80110de:	2a00      	cmp	r2, #0
 80110e0:	dd08      	ble.n	80110f4 <scalbn+0x8c>
 80110e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80110ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80110ee:	ec45 4b10 	vmov	d0, r4, r5
 80110f2:	bd70      	pop	{r4, r5, r6, pc}
 80110f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80110f8:	da19      	bge.n	801112e <scalbn+0xc6>
 80110fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80110fe:	429e      	cmp	r6, r3
 8011100:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011104:	dd0a      	ble.n	801111c <scalbn+0xb4>
 8011106:	a112      	add	r1, pc, #72	; (adr r1, 8011150 <scalbn+0xe8>)
 8011108:	e9d1 0100 	ldrd	r0, r1, [r1]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1e2      	bne.n	80110d6 <scalbn+0x6e>
 8011110:	a30f      	add	r3, pc, #60	; (adr r3, 8011150 <scalbn+0xe8>)
 8011112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011116:	f7ef fa9f 	bl	8000658 <__aeabi_dmul>
 801111a:	e7cb      	b.n	80110b4 <scalbn+0x4c>
 801111c:	a10a      	add	r1, pc, #40	; (adr r1, 8011148 <scalbn+0xe0>)
 801111e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d0b8      	beq.n	8011098 <scalbn+0x30>
 8011126:	a10e      	add	r1, pc, #56	; (adr r1, 8011160 <scalbn+0xf8>)
 8011128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801112c:	e7b4      	b.n	8011098 <scalbn+0x30>
 801112e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011132:	3236      	adds	r2, #54	; 0x36
 8011134:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011138:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801113c:	4620      	mov	r0, r4
 801113e:	4b0c      	ldr	r3, [pc, #48]	; (8011170 <scalbn+0x108>)
 8011140:	2200      	movs	r2, #0
 8011142:	e7e8      	b.n	8011116 <scalbn+0xae>
 8011144:	f3af 8000 	nop.w
 8011148:	c2f8f359 	.word	0xc2f8f359
 801114c:	01a56e1f 	.word	0x01a56e1f
 8011150:	8800759c 	.word	0x8800759c
 8011154:	7e37e43c 	.word	0x7e37e43c
 8011158:	8800759c 	.word	0x8800759c
 801115c:	fe37e43c 	.word	0xfe37e43c
 8011160:	c2f8f359 	.word	0xc2f8f359
 8011164:	81a56e1f 	.word	0x81a56e1f
 8011168:	43500000 	.word	0x43500000
 801116c:	ffff3cb0 	.word	0xffff3cb0
 8011170:	3c900000 	.word	0x3c900000

08011174 <_init>:
 8011174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011176:	bf00      	nop
 8011178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117a:	bc08      	pop	{r3}
 801117c:	469e      	mov	lr, r3
 801117e:	4770      	bx	lr

08011180 <_fini>:
 8011180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011182:	bf00      	nop
 8011184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011186:	bc08      	pop	{r3}
 8011188:	469e      	mov	lr, r3
 801118a:	4770      	bx	lr
